using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Kendo.Mvc.Extensions;
using Data;
using DTO;
using System.ServiceModel;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;

namespace Business
{
    public class BLReport : Base, IBase
    {
        #region Variables
        private const string sPODStatusComplete = "Đã nhận";
        private const string sPODStatusPart = "Đã nhận 1 phần";
        private const string sPODStatusNotComplete = "Chưa nhận";

        #endregion

        #region Common

        public DTOResult Customer_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName,
                        CodeName = c.Code + " - " + c.ShortName,
                    }).ToList();

                    //var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).Select(c => new DTOCustomer
                    //{
                    //    ID = c.ID,
                    //    Code = c.Code,
                    //    CustomerName = c.ShortName
                    //}).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult GroupOfProduct_List(List<int> lstid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Vendor_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName
                    }).ToList();
                    DTOCustomer home = new DTOCustomer();
                    home.ID = 0;
                    home.Code = "Xe nhà";
                    home.CustomerName = "Xe nhà";
                    query.Insert(0, home);
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Vendor_Read()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iCustomer = -(int)SYSVarType.TypeOfCustomerVEN;
                    int iBoth = -(int)SYSVarType.TypeOfCustomerBOTH;
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == iCustomer || c.TypeOfCustomerID == iBoth) && c.CUS_Customer1.Count == 0 && !c.IsSystem && Account.ListCustomerID.Contains(c.ID)).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName
                    }).ToList();

                    DTOCustomer itemHome = new DTOCustomer();
                    itemHome.ID = Account.SYSCustomerID;
                    itemHome.Code = "Xe nhà";
                    itemHome.CustomerName = "Xe nhà";
                    query.Insert(0, itemHome);
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMDriver_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsUse).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult GroupOfLocation_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfLocation.Select(c=> new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult GroupOfPartner_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREP_Common REPDI_GetDataByFilter(DataEntities model, CUSSettingsReport_Filter filter)
        {
            try
            {
                DTOREP_Common result = new DTOREP_Common();
                result.ListDITOGroupProductID = new List<int>();
                result.ListOrderGroupProductID = new List<int>();
                result.Filter = new CUSSettingsReport_Filter();

                #region Điều kiện lọc
                filter.DateFrom = filter.DateFrom.Date;
                filter.DateTo = filter.DateTo.AddDays(1).Date;

                bool IsGroup = false;
                bool IsStock = false;
                bool IsGroupLocation = false;
                bool IsGroupPartner = false;
                bool IsProvince = false;
                bool IsServiceOfOrder = false;
                bool IsOrderRouting = false;
                bool IsOPSRouting = false;
                bool IsPartner = false;

                if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                    filter.ListGroupProductID = new List<int>();
                if (filter.ListGroupProductID.Count > 0)
                    IsGroup = true;

                if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                    filter.ListStockID = new List<int>();
                if (filter.ListStockID.Count > 0)
                    IsStock = true;

                if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                    filter.ListGroupOfPartnerID = new List<int>();
                if (filter.ListGroupOfPartnerID.Count > 0)
                    IsGroupPartner = true;

                if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                    filter.ListGroupOfLocationID = new List<int>();
                if (filter.ListGroupOfLocationID.Count > 0)
                    IsGroupLocation = true;

                if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                    filter.ListProvinceID = new List<int>();
                if (filter.ListProvinceID.Count > 0)
                    IsProvince = true;

                if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                    filter.ListServiceOfOrderID = new List<int>();
                if (filter.ListServiceOfOrderID.Count > 0)
                    IsServiceOfOrder = true;

                if (filter.ListOrderRoutingID == null || filter.ListOrderRoutingID.Count == 0)
                    filter.ListOrderRoutingID = new List<int>();
                if (filter.ListOrderRoutingID.Count > 0)
                    IsOrderRouting = true;

                if (filter.ListOPSRoutingID == null || filter.ListOPSRoutingID.Count == 0)
                    filter.ListOPSRoutingID = new List<int>();
                if (filter.ListOPSRoutingID.Count > 0)
                    IsOPSRouting = true;

                if (filter.ListPartnerID == null || filter.ListPartnerID.Count == 0)
                    filter.ListPartnerID = new List<int>();
                if (filter.ListPartnerID.Count > 0)
                    IsPartner = true;

                bool IsVen = false;
                filter.ListCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                filter.ListVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                if (filter.ListVenID.Count > 0)
                    IsVen = true;

                result.Filter = filter;
                #endregion

                var query = model.CAT_Country.Where(c => c.ID == -1).Select(c => new { DITOGroupProductID = -1, OrderGroupProductID = -1 }).ToList();

                #region Lấy theo ngày tính giá thu
                if (filter.TypeOfDate == 0)
                {
                    query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                    c.ORD_GroupProduct.DateConfig >= filter.DateFrom && c.ORD_GroupProduct.DateConfig < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                    filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                    (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                    (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                    (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                    (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                    (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                    (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                    (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                    (IsPartner? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                    (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                    if (!filter.IsComplete)
                    {
                        query.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                            c.ORD_GroupProduct.DateConfig >= filter.DateFrom && c.ORD_GroupProduct.DateConfig < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting &&
                            filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                            (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                            (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                            (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                            (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                            (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                            (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                            (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                            (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList());
                    }
                }
                #endregion

                #region Lấy theo ngày tính giá chi
                if (filter.TypeOfDate == 1)
                {
                    query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                    c.DateConfig >= filter.DateFrom && c.DateConfig < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                    filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                    (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                    (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                    (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                    (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                    (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                    (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                    (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                    (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                    (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                    if (!filter.IsComplete)
                    {
                        query.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                            c.DateConfig >= filter.DateFrom && c.DateConfig < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting &&
                            filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                            (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                            (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                            (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                            (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                            (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                            (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                            (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                            (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList());
                    }
                }
                #endregion

                #region Lấy theo ngày gửi yêu cầu
                if (filter.TypeOfDate == 2)
                {
                    query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                    c.ORD_GroupProduct.ORD_Order.RequestDate >= filter.DateFrom && c.ORD_GroupProduct.ORD_Order.RequestDate < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                    filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                    (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                    (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                    (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                    (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                    (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                    (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                    (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                    (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                    (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                    if (!filter.IsComplete)
                    {
                        query.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                            c.ORD_GroupProduct.ORD_Order.RequestDate >= filter.DateFrom && c.ORD_GroupProduct.ORD_Order.RequestDate < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting &&
                            filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                            (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                            (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                            (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                            (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                            (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                            (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                            (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                            (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList());
                    }
                }
                #endregion

                #region Lấy theo ngày ATD chuyến
                if (filter.TypeOfDate == 3)
                {
                    query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                    c.OPS_DITOMaster.ATD >= filter.DateFrom && c.OPS_DITOMaster.ATD < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                    filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                    (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                    (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                    (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                    (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                    (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                    (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                    (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                    (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                    (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                    if (!filter.IsComplete)
                    {
                        query.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                            c.DITOMasterID > 0 && c.OPS_DITOMaster.ATD >= filter.DateFrom && c.OPS_DITOMaster.ATD < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting &&
                            filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                            (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                            (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                            (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                            (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                            (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                            (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                            (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                            (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList());
                    }
                }
                #endregion

                #region Lấy theo ngày ATA chuyến
                if (filter.TypeOfDate == 4)
                {
                    query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                    c.OPS_DITOMaster.ATA >= filter.DateFrom && c.OPS_DITOMaster.ATA < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                    filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                    (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                    (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                    (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                    (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                    (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                    (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                    (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                    (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                    (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                    if (!filter.IsComplete)
                    {
                        query.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                            c.DITOMasterID > 0 && c.OPS_DITOMaster.ATA >= filter.DateFrom && c.OPS_DITOMaster.ATA < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting &&
                            filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                            (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                            (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                            (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                            (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                            (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                            (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                            (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                            (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList());
                    }
                }
                #endregion

                #region Lấy theo ngày ETD chuyến
                if (filter.TypeOfDate == 5)
                {
                    query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                    c.OPS_DITOMaster.ETD >= filter.DateFrom && c.OPS_DITOMaster.ETD < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                    filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                    (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                    (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                    (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                    (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                    (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                    (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                    (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                    (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                    (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                    if (!filter.IsComplete)
                    {
                        query.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                            c.DITOMasterID > 0 && c.OPS_DITOMaster.ETD >= filter.DateFrom && c.OPS_DITOMaster.ETD < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting &&
                            filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                            (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                            (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                            (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                            (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                            (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                            (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                            (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                            (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList());
                    }
                }
                #endregion

                #region Lấy theo ngày ETA chuyến
                if (filter.TypeOfDate == 6)
                {
                    query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                    c.OPS_DITOMaster.ETA >= filter.DateFrom && c.OPS_DITOMaster.ETA < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                    filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                    (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                    (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                    (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                    (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                    (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                    (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                    (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                    (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                    (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                    if (!filter.IsComplete)
                    {
                        query.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                            c.DITOMasterID > 0 && c.OPS_DITOMaster.ETA >= filter.DateFrom && c.OPS_DITOMaster.ETA < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting &&
                            filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                            (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                            (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                            (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                            (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                            (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                            (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                            (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                            (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList());
                    }
                }
                #endregion

                #region Lấy theo ngày ETD đơn
                if (filter.TypeOfDate == 7)
                {
                    query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                    c.ORD_GroupProduct.ORD_Order.ETD >= filter.DateFrom && c.ORD_GroupProduct.ORD_Order.ETD < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                    filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                    (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                    (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                    (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                    (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                    (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                    (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                    (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                    (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                    (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                    if (!filter.IsComplete)
                    {
                        query.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                            c.ORD_GroupProduct.ORD_Order.ETD >= filter.DateFrom && c.ORD_GroupProduct.ORD_Order.ETD < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting &&
                            filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                            (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                            (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                            (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                            (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                            (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                            (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                            (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                            (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList());
                    }
                }
                #endregion

                #region Lấy theo ngày ETA đơn
                if (filter.TypeOfDate == 8)
                {
                    query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                    c.ORD_GroupProduct.ORD_Order.ETA >= filter.DateFrom && c.ORD_GroupProduct.ORD_Order.ETA < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                    filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                    (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                    (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                    (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                    (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                    (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                    (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                    (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                    (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                    (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                    if (!filter.IsComplete)
                    {
                        query.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                            c.ORD_GroupProduct.ORD_Order.ETA >= filter.DateFrom && c.ORD_GroupProduct.ORD_Order.ETA < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting &&
                            filter.ListCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                            (IsStock ? filter.ListStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                            (IsGroupLocation ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 && filter.ListGroupProductID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID.Value) : true) &&
                            (IsGroupPartner ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID > 0 && filter.ListGroupOfPartnerID.Contains(c.ORD_GroupProduct.CUS_Partner.CAT_Partner.GroupOfPartnerID.Value) : true) &&
                            (IsProvince ? filter.ListProvinceID.Contains(c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && filter.ListVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true) &&
                            (IsOrderRouting ? c.ORD_GroupProduct.CUSRoutingID > 0 && filter.ListOrderRoutingID.Contains(c.ORD_GroupProduct.CUS_Routing.RoutingID) : true) &&
                            (IsOPSRouting ? c.CATRoutingID > 0 && filter.ListOPSRoutingID.Contains(c.CATRoutingID.Value) : true) &&
                            (IsPartner ? c.ORD_GroupProduct.PartnerID > 0 && filter.ListPartnerID.Contains(c.ORD_GroupProduct.PartnerID.Value) : true) &&
                            (filter.IsReceived == true ? c.ORD_GroupProduct.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete : true)).Select(c => new { DITOGroupProductID = c.ID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList());
                    }
                }
                #endregion

                if (query != null && query.Count > 0)
                {
                    result.ListDITOGroupProductID = query.Select(c => c.DITOGroupProductID).Distinct().ToList();
                    result.ListOrderGroupProductID = query.Select(c => c.OrderGroupProductID).Distinct().ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region REPDIPivotOrder
        public List<REPDIPivotOrder> REPDIPivotOrder_List(List<int> lstid, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<REPDIPivotOrder>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new REPDIPivotOrder
                        {
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            VehicleID = c.OPS_DITOMaster.VehicleID,
                            VehicleCode = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_DITOMaster.VendorOfVehicleID,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà",
                            VendorName = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? !string.IsNullOrEmpty(c.OPS_DITOMaster.CUS_Customer.ShortName) ? c.OPS_DITOMaster.CUS_Customer.ShortName : c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà",
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN
                        }).ToList();

                    result.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new REPDIPivotOrder
                        {
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                        }).ToList());

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate < dtto &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.GroupOfProductID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.QuantityMOQ,
                            c.RefUnitPrice
                        }).ToList();

                    foreach (var item in result)
                    {
                        if (string.IsNullOrEmpty(item.DNCode))
                            item.DNCode = "";
                        if (string.IsNullOrEmpty(item.SOCode))
                            item.SOCode = "";

                        var val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOFreightCredit);
                        if (val != null)
                        {
                            item.IncomeUnitPrice = val.UnitPrice;
                            item.IncomeQuantity = val.Quantity;
                            item.IncomeQuantityMOQ = val.QuantityMOQ;
                            item.Income = val.UnitPrice * (decimal)val.Quantity;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                        if (val != null)
                        {
                            item.IncomeUnLoadUnitPrice = val.UnitPrice;
                            item.IncomeUnLoadQuantity = val.Quantity;
                            item.IncomeUnLoad = val.UnitPrice * (decimal)val.Quantity;
                        }

                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOFreightDebit);
                        if (val != null)
                        {
                            item.CostUnitPrice = val.UnitPrice;
                            item.CostQuantity = val.Quantity;
                            item.CostQuantityMOQ = val.QuantityMOQ;
                            item.Cost = val.UnitPrice * (decimal)val.Quantity;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                        if (val != null)
                        {
                            item.CostUnLoadUnitPrice = val.UnitPrice;
                            item.CostUnLoadQuantity = val.Quantity;
                            item.CostUnLoad = val.UnitPrice * (decimal)val.Quantity;
                        }

                        item.TotalIncome = item.Income + item.IncomeUnLoad;
                        item.TotalCost = item.Cost + item.CostUnLoad;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        if (item.TotalIncome > 0)
                            item.PercentPLIncome = (double)(item.TotalPL / item.TotalIncome) * 100;
                        else if (item.TotalPL > 0)
                            item.TotalPL = 100;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOREPTRPL_Detail> REPDIPivotOrder_Read(List<int> lstid, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<DTOREPTRPL_Detail>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                using (var model = new DataEntities())
                {
                    if (lstid.Count == 0)
                    {
                        lstid = Account.ListCustomerID.ToList();
                    }
                    CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                    filter.ListCustomerID = lstid;
                    filter.ListGroupOfLocationID = new List<int>();
                    filter.ListGroupOfPartnerID = new List<int>();
                    filter.ListGroupProductID = new List<int>();
                    filter.ListProvinceID = new List<int>();
                    filter.ListStockID = new List<int>();
                    filter.Request = string.Empty;
                    filter.DateFrom = dtfrom;
                    filter.DateTo = dtto;
                    result = REPDIPL_DetailData(filter);
                    result = result.Where(c => c.DITOMasterID > 0).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public REPDIPLPivot_Template REPDIPivotOrder_GetTemplate(int functionID)
        {
            try
            {
                REPDIPLPivot_Template result = new REPDIPLPivot_Template();
                using (var model = new DataEntities())
                {
                    var template = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.ReferID == functionID && c.Key == SYSUserSettingKey.REPDIPivotOrder_Template.ToString());
                    if (template != null)
                    {
                        result.ID = template.ID;
                        result.UserID = template.UserID;
                        result.Key = template.Key;
                        result.ReferID = template.ReferID;
                        result.ReferKey = template.ReferKey;
                        result.lstTemplate = new List<REPDIPLPivot_TemplateDetail>();
                        if (!string.IsNullOrEmpty(template.Setting))
                        {
                            try
                            {
                                result.lstTemplate = Newtonsoft.Json.JsonConvert.DeserializeObject<List<REPDIPLPivot_TemplateDetail>>(template.Setting);
                            }
                            catch
                            {
                                template.Setting = string.Empty;
                                model.SaveChanges();
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void REPDIPivotOrder_SaveTemplate(REPDIPLPivot_TemplateDetail item, int functionID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (Account.UserID.HasValue)
                    {
                        if (item.lstColumn != null && item.lstMeasure != null && item.lstRow != null)
                        {
                            if (item.lstColumn.Count > 0 || item.lstMeasure.Count > 0 || item.lstRow.Count > 0)
                            {
                                item.ID = 1;
                                if (string.IsNullOrEmpty(item.Name))
                                    throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập tên Template");

                                List<REPDIPLPivot_TemplateDetail> lstTemplate = new List<REPDIPLPivot_TemplateDetail>();
                                var template = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.ReferID == functionID && c.Key == SYSUserSettingKey.REPDIPivotOrder_Template.ToString());
                                if (template == null)
                                {
                                    template = new SYS_UserSetting();
                                    template.CreatedBy = Account.UserName;
                                    template.CreatedDate = DateTime.Now;
                                    template.UserID = Account.UserID.Value;
                                    template.Key = SYSUserSettingKey.REPDIPivotOrder_Template.ToString();
                                    template.ReferID = functionID;
                                    template.ReferKey = string.Empty;
                                    model.SYS_UserSetting.Add(template);
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(template.Setting))
                                        lstTemplate = Newtonsoft.Json.JsonConvert.DeserializeObject<List<REPDIPLPivot_TemplateDetail>>(template.Setting);
                                }

                                if (lstTemplate.Count > 0)
                                    item.ID = lstTemplate.OrderByDescending(c => c.ID).FirstOrDefault().ID + 1;

                                lstTemplate.Add(item);

                                // Convert to string
                                template.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(lstTemplate);

                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void REPDIPivotOrder_DeleteTemplate(int functionID, List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (Account.UserID.HasValue)
                    {
                        var template = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.ReferID == functionID && c.Key == SYSUserSettingKey.REPDIPivotOrder_Template.ToString());
                        if (template != null)
                        {
                            if (!string.IsNullOrEmpty(template.Setting))
                            {
                                var lstTemplate = Newtonsoft.Json.JsonConvert.DeserializeObject<List<REPDIPLPivot_TemplateDetail>>(template.Setting);
                                if (lstTemplate.Count > 0)
                                {
                                    foreach (var templateID in lstid)
                                    {
                                        var detailTemplate = lstTemplate.FirstOrDefault(c => c.ID == templateID);
                                        if (detailTemplate != null)
                                            lstTemplate.Remove(detailTemplate);
                                    }
                                }
                                // Convert to string
                                template.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(lstTemplate);
                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region REPCOPivotOrder

        public REPCOPLPivot_Template REPCOPivotOrder_GetTemplate(int functionID)
        {
            try
            {
                REPCOPLPivot_Template result = new REPCOPLPivot_Template();
                using (var model = new DataEntities())
                {
                    var template = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.ReferID == functionID && c.Key == SYSUserSettingKey.REPCOPivotOrder_Template.ToString());
                    if (template != null)
                    {
                        result.ID = template.ID;
                        result.UserID = template.UserID;
                        result.Key = template.Key;
                        result.ReferID = template.ReferID;
                        result.ReferKey = template.ReferKey;
                        result.lstTemplate = new List<REPCOPLPivot_TemplateDetail>();
                        if (!string.IsNullOrEmpty(template.Setting))
                        {
                            try
                            {
                                result.lstTemplate = Newtonsoft.Json.JsonConvert.DeserializeObject<List<REPCOPLPivot_TemplateDetail>>(template.Setting);
                            }
                            catch
                            {
                                template.Setting = string.Empty;
                                model.SaveChanges();
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void REPCOPivotOrder_SaveTemplate(REPCOPLPivot_TemplateDetail item, int functionID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (Account.UserID.HasValue)
                    {
                        if (item.lstColumn != null && item.lstMeasure != null && item.lstRow != null)
                        {
                            if (item.lstColumn.Count > 0 || item.lstMeasure.Count > 0 || item.lstRow.Count > 0)
                            {
                                item.ID = 1;
                                if (string.IsNullOrEmpty(item.Name))
                                    throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập tên Template");

                                List<REPCOPLPivot_TemplateDetail> lstTemplate = new List<REPCOPLPivot_TemplateDetail>();
                                var template = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.ReferID == functionID && c.Key == SYSUserSettingKey.REPCOPivotOrder_Template.ToString());
                                if (template == null)
                                {
                                    template = new SYS_UserSetting();
                                    template.CreatedBy = Account.UserName;
                                    template.CreatedDate = DateTime.Now;
                                    template.UserID = Account.UserID.Value;
                                    template.Key = SYSUserSettingKey.REPCOPivotOrder_Template.ToString();
                                    template.ReferID = functionID;
                                    template.ReferKey = string.Empty;
                                    model.SYS_UserSetting.Add(template);
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(template.Setting))
                                        lstTemplate = Newtonsoft.Json.JsonConvert.DeserializeObject<List<REPCOPLPivot_TemplateDetail>>(template.Setting);
                                }

                                if (lstTemplate.Count > 0)
                                    item.ID = lstTemplate.OrderByDescending(c => c.ID).FirstOrDefault().ID + 1;

                                lstTemplate.Add(item);

                                // Convert to string
                                template.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(lstTemplate);

                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void REPCOPivotOrder_DeleteTemplate(int functionID, List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (Account.UserID.HasValue)
                    {
                        var template = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.ReferID == functionID && c.Key == SYSUserSettingKey.REPCOPivotOrder_Template.ToString());
                        if (template != null)
                        {
                            if (!string.IsNullOrEmpty(template.Setting))
                            {
                                var lstTemplate = Newtonsoft.Json.JsonConvert.DeserializeObject<List<REPCOPLPivot_TemplateDetail>>(template.Setting);
                                if (lstTemplate.Count > 0)
                                {
                                    foreach (var templateID in lstid)
                                    {
                                        var detailTemplate = lstTemplate.FirstOrDefault(c => c.ID == templateID);
                                        if (detailTemplate != null)
                                            lstTemplate.Remove(detailTemplate);
                                    }
                                }
                                // Convert to string
                                template.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(lstTemplate);
                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region REPDIPivotPOD
        public List<REPDIPivotPOD> REPDIPivotPOD_List(List<int> lstid, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<REPDIPivotPOD>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                         c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                         lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new REPDIPivotPOD
                         {
                             DITOGroupProductID = c.ID,
                             OrderID = c.ORD_GroupProduct.OrderID,
                             OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                             DNCode = c.DNCode,
                             SOCode = c.ORD_GroupProduct.SOCode,
                             RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                             StockID = c.ORD_GroupProduct.LocationFromID,
                             StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                             StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                             StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                             PartnerID = c.ORD_GroupProduct.PartnerID,
                             PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                             PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                             Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                             CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                             CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                             CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                             GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                             GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                             GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                             VehicleID = c.OPS_DITOMaster.VehicleID,
                             VehicleCode = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                             VendorID = c.OPS_DITOMaster.VendorOfVehicleID,
                             VendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                             VendorName = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                             CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                             CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                             CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                             IsOrigin = c.IsOrigin,
                             IntCompleteInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? 1 : 0,
                             IntWaitInvoice = 1,
                             InvoiceBy = c.InvoiceBy,
                             InvoiceDate = c.InvoiceDate,
                             InvoiceNote = c.InvoiceNote,
                             Note = c.Note,
                             Note1 = c.Note1,
                             Note2 = c.Note2,
                             DateFromCome = c.DateFromCome,
                             DateFromLeave = c.DateFromLeave,
                             DateFromLoadStart = c.DateFromLoadStart,
                             DateFromLoadEnd = c.DateFromLoadEnd,
                             DateToCome = c.DateToCome,
                             DateToLeave = c.DateToLeave,
                             DateToLoadStart = c.DateToLoadStart,
                             DateToLoadEnd = c.DateToLoadEnd,

                             Ton = c.Ton,
                             CBM = c.CBM,
                             Quantity = c.Quantity,
                             TonTranfer = c.TonTranfer,
                             CBMTranfer = c.CBMTranfer,
                             QuantityTranfer = c.QuantityTranfer,
                             TonBBGN = c.TonBBGN,
                             CBMBBGN = c.CBMBBGN,
                             QuantityBBGN = c.QuantityBBGN,

                             IntKPIOPS = 0,
                             IntKPIPOD = 0,
                             WaitKPIPOD = 0,
                             FailKPIPOD = 0
                         }).ToList();

                    var lstOrderID = result.Select(c => c.OrderID).Distinct();
                    var lstKPI = model.KPI_KPITime.Where(c => lstOrderID.Contains(c.OrderID)).Select(c => new { c.DITOGroupProductID, c.KPIDate, c.IsKPI, c.KPIID }).ToList();
                    foreach (var item in result)
                    {
                        item.IntRemainInvoice = item.IntWaitInvoice - item.IntCompleteInvoice;

                        var kpi = lstKPI.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.KPIID == (int)KPICode.OPS);
                        if (kpi != null)
                        {
                            item.KPIOPSDate = kpi.KPIDate;
                            if (kpi.IsKPI == true)
                                item.IntKPIOPS = 1;
                            item.WaitKPIPOD = 1;
                        }
                        kpi = lstKPI.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.KPIID == (int)KPICode.POD);
                        if (kpi != null)
                        {
                            item.KPIPODDate = kpi.KPIDate;
                            if (kpi.IsKPI == true)
                                item.IntKPIPOD = 1;
                            else if (kpi.IsKPI == false)
                                item.FailKPIPOD = 1;
                            else
                            {
                                item.WaitKPIPOD = 1;
                                if (item.IntCompleteInvoice == 0 && item.KPIPODDate != null && item.InvoiceDate == null)
                                {
                                    if (item.KPIPODDate.Value.Date.CompareTo(DateTime.Now.Date) < 0)
                                    {
                                        item.WaitFailKPIPOD = 1;
                                        item.WaitKPIPOD = 0;
                                    }
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region REPDISchedulePivot
        public List<REPDISchedulePivot> REPDISchedulePivot_Data(List<int> lstid, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<REPDISchedulePivot>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new REPDISchedulePivot
                        {
                            DITOMasterID = c.DITOMasterID,
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            VehicleID = c.OPS_DITOMaster.VehicleID,
                            VehicleCode = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_DITOMaster.VendorOfVehicleID,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                            TotalLocation = c.OPS_DITOMaster.TotalLocation,
                            TotalReturn = 0,
                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                        }).ToList();

                    var lstOrderGroupProductID = result.Select(c => c.OrderGroupProductID.Value).Distinct().ToList();
                    var lstReturn = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.IsReturn == true && c.ORD_GroupProduct.ReturnID > 0 && lstOrderGroupProductID.Contains(c.ORD_GroupProduct.ReturnID.Value)).Select(c => new
                    {
                        c.DITOMasterID,
                        ReturnID = c.ORD_GroupProduct.ReturnID.Value,
                        c.TonTranfer,
                        c.CBMTranfer,
                        c.QuantityTranfer
                    }).ToList();
                    foreach (var item in result)
                    {
                        var query = lstReturn.Where(c => c.DITOMasterID == item.DITOMasterID && c.ReturnID == item.OrderGroupProductID);
                        item.IntReturn = query.Count() > 0 ? 1 : 0;
                        if (item.IntReturn > 0)
                        {
                            item.TonReturn = query.Sum(c => c.TonTranfer);
                            item.CBMReturn = query.Sum(c => c.CBMTranfer);
                            item.QuantityReturn = query.Sum(c => c.QuantityTranfer);
                        }

                        item.TotalReturn = lstReturn.Where(c => c.DITOMasterID == item.DITOMasterID).Count();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region REPDIOPSPlan
        public List<DTOREPOPSPlan_Detail> REPDIOPSPlan_DetailData(List<int> lstid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID)
        {
            try
            {
                List<DTOREPOPSPlan_Detail> result = new List<DTOREPOPSPlan_Detail>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    DateTime? dtNull = null;
                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();
                    if (lstgroupid == null || lstgroupid.Count == 0)
                    {
                        lstgroupid = new List<int>();
                        lstgroupid = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => c.ID).Distinct().ToList();
                    }
                    if (statusID == 1)
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new DTOREPOPSPlan_Detail
                        {
                            TOMasterID = c.DITOMasterID,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode != null ? c.DNCode : "",
                            SOCode = c.ORD_GroupProduct.SOCode == null ? c.ORD_GroupProduct.SOCode : "",
                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            Description = c.ORD_GroupProduct.Description,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,

                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            Note1 = c.Note1,
                            Note2 = c.Note2,

                            TransportModeCost = c.DITOMasterID > 0 && c.OPS_DITOMaster.TransportModeID > 0 ? c.OPS_DITOMaster.CAT_TransportMode.Name : "",
                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();
                    }

                    if (statusID == 2)
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new DTOREPOPSPlan_Detail
                        {
                            TOMasterID = c.DITOMasterID,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode != null ? c.DNCode : "",
                            SOCode = c.ORD_GroupProduct.SOCode == null ? c.ORD_GroupProduct.SOCode : "",
                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            Description = c.ORD_GroupProduct.Description,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,

                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            Note1 = c.Note1,
                            Note2 = c.Note2,

                            TransportModeCost = c.DITOMasterID > 0 && c.OPS_DITOMaster.TransportModeID > 0 ? c.OPS_DITOMaster.CAT_TransportMode.Name : "",
                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();
                    }

                    if (statusID == 3)
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new DTOREPOPSPlan_Detail
                        {
                            TOMasterID = c.DITOMasterID,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode != null ? c.DNCode : "",
                            SOCode = c.ORD_GroupProduct.SOCode == null ? c.ORD_GroupProduct.SOCode : "",
                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            Description = c.ORD_GroupProduct.Description,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,

                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            Note1 = c.Note1,
                            Note2 = c.Note2,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            TransportModeCost = c.DITOMasterID > 0 && c.OPS_DITOMaster.TransportModeID > 0 ? c.OPS_DITOMaster.CAT_TransportMode.Name : "",
                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();
                    }

                    var lstProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID &&
                         c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtto && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                         lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                         {
                             c.DITOGroupProductID,
                             c.ORD_Product.CUS_Product.Code,
                             c.ORD_Product.CUS_Product.ProductName,
                             Description = c.ORD_Product.CUS_Product.Description != null ? c.ORD_Product.CUS_Product.Description : ""
                         }).ToList();

                    if (statusID == 1 || statusID == 3)
                    {
                        lstProduct.AddRange(model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.DITOMasterID == null && c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                         c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                         lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                         {
                             c.DITOGroupProductID,
                             c.ORD_Product.CUS_Product.Code,
                             c.ORD_Product.CUS_Product.ProductName,
                             Description = c.ORD_Product.CUS_Product.Description != null ? c.ORD_Product.CUS_Product.Description : ""
                         }).ToList());
                    }

                    lstProduct = lstProduct.Distinct().ToList();

                    foreach (var item in result)
                    {
                        var itemVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.GroupOfProductCUSID == item.GroupOfProductID && c.VendorID == item.VendorID);
                        if (itemVENGroupProduct != null)
                        {
                            item.GroupOfProductVendorCode = itemVENGroupProduct.Code;
                            item.GroupOfProductVendorName = itemVENGroupProduct.GroupName;
                        }

                        item.ProductCode = item.ProductName = item.ProductDescription = "";

                        var lstDIProduct = lstProduct.Where(c => c.DITOGroupProductID == item.DITOGroupProductID);
                        if (lstDIProduct.Count() > 0)
                        {
                            item.ProductCode = string.Join(",", lstDIProduct.Select(c => c.Code).Distinct().ToList());
                            item.ProductName = string.Join(",", lstDIProduct.Select(c => c.ProductName).Distinct().ToList());
                            item.ProductDescription = string.Join(",", lstDIProduct.Select(c => c.Description).Distinct().ToList());
                        }
                    }
                }

                result = result.OrderBy(c => c.TOMasterID).ThenBy(c => c.ETD).ThenBy(c => c.OrderID).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPOPSPlan_ColumnDetail REPDIOPSPlan_ColumnDetailData(List<int> lstid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID)
        {
            try
            {
                DateTime? dtNull = null;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPOPSPlan_ColumnDetail();
                result.ListData = new List<DTOREPOPSPlan_Detail>();
                result.ListColumn = new List<DTOREPOPSPlan_ColumnDetail_Group>();
                using (var model = new DataEntities())
                {
                    if (lstgroupid == null || lstgroupid.Count == 0)
                    {
                        lstgroupid = new List<int>();
                        lstgroupid = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => c.ID).Distinct().ToList();
                    }
                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    var ListData = model.OPS_DITOGroupProduct.Where(c => c.ID == -1).Select(c => new
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationToID = c.ORD_GroupProduct.LocationToID,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,

                        }).ToList();
                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.ID == -1).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            c.OrderGroupProductID,
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            OrderID = c.ORD_GroupProduct.OrderID,

                            StockID = c.ORD_GroupProduct.LocationFromID,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                        }).ToList();

                    var lstDIProduct = model.OPS_DITOProduct.Where(c => c.ID == -1).Select(c => new
                        {
                            c.DITOGroupProductID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();

                    if (statusID == 1)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            LocationToID = c.ORD_GroupProduct.LocationToID,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,

                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            c.OrderGroupProductID,
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            OrderID = c.ORD_GroupProduct.OrderID,

                            StockID = c.ORD_GroupProduct.LocationFromID,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                        }).ToList();

                        lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.OPS_DITOGroupProduct.DITOMasterID.HasValue && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtto) || (c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();
                    }

                    if (statusID == 2)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            LocationToID = c.ORD_GroupProduct.LocationToID,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            c.OrderGroupProductID,
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            OrderID = c.ORD_GroupProduct.OrderID,

                            StockID = c.ORD_GroupProduct.LocationFromID,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                        }).ToList();

                        lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID.HasValue &&
                        c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtto && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();
                    }

                    if (statusID == 3)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            LocationToID = c.ORD_GroupProduct.LocationToID,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            c.OrderGroupProductID,
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            OrderID = c.ORD_GroupProduct.OrderID,

                            StockID = c.ORD_GroupProduct.LocationFromID,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                        }).ToList();

                        lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID == null &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();
                    }

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductName, c.GroupOfProductCode }).Distinct().ToList();

                    foreach (var itemData in ListData)
                    {
                        DTOREPOPSPlan_Detail item = new DTOREPOPSPlan_Detail
                        {
                            TOMasterID = itemData.TOMasterID,
                            TOMasterCode = itemData.TOMasterCode,
                            TOMasterStatus = itemData.TOMasterStatus,

                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            StockID = itemData.StockID,
                            StockCode = itemData.StockCode,
                            StockName = itemData.StockName,
                            StockAddress = itemData.StockAddress,
                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            PartnerCodeName = itemData.PartnerCodeName,

                            LocationToID = itemData.LocationToID.Value,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,

                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,

                            VehicleID = itemData.VehicleID,
                            VehicleCode = itemData.VehicleCode,
                            VendorID = itemData.VendorID,
                            VendorCode = itemData.VendorCode,
                            VendorName = itemData.VendorName,
                            VendorShortName = itemData.VendorShortName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            TransportModeIncome = itemData.TransportModeIncome,
                            TransportModeCost = itemData.TransportModeCost,

                            TotalLocation = itemData.TotalLocation,

                            KM = itemData.KM,
                            KMStart = itemData.KMStart,
                            KMEnd = itemData.KMEnd,
                            ETD = itemData.ETD,
                            ETA = itemData.ETA,
                        };

                        result.ListData.Add(item);

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        if (item.TOMasterID > 0)
                        {
                            item.ScheduleTonTranfer = result.ListData.Where(c => c.TOMasterID == item.TOMasterID).Sum(c => c.TonTranfer);
                            item.ScheduleCBMTranfer = result.ListData.Where(c => c.TOMasterID == item.TOMasterID).Sum(c => c.CBMTranfer);
                            item.ScheduleQuantityTranfer = result.ListData.Where(c => c.TOMasterID == item.TOMasterID).Sum(c => c.QuantityTranfer);
                        }

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.TOMasterID == item.TOMasterID && c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;

                                    item.DriverName = first.DriverName;
                                    item.TelNo = first.TelNo;
                                    item.DrivingLicense = first.DrivingLicense;
                                    item.CardNumber = first.CardNumber;
                                }
                                var lstDITOGroupProductID = queryDITOGroup.Select(c => c.DITOGroupProductID).ToList();

                                var col = new DTOREPOPSPlan_ColumnDetail_Group();
                                col.TOMasterID = item.TOMasterID.Value;
                                col.OrderID = item.OrderID > 0 ? item.OrderID.Value : -1;
                                col.GroupOfProductID = itemGroup.GroupOfProductID != null ? itemGroup.GroupOfProductID.Value : 0;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.StockID = item.StockID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.KeyCode = itemGroup.GroupOfProductCode;

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);
                                col.Ton = queryDITOGroup.Sum(c => c.Ton);
                                col.CBM = queryDITOGroup.Sum(c => c.CBM);
                                col.Quantity = queryDITOGroup.Sum(c => c.Quantity);

                                var lstTemp = queryDITOGroup.Select(c => new { c.OrderGroupProductID, c.TonOrder, c.CBMOrder, c.QuantityOrder }).Distinct().ToList();
                                col.TonOrder = lstTemp.Sum(c => c.TonOrder);
                                col.CBMOrder = lstTemp.Sum(c => c.CBMOrder);
                                col.QuantityOrder = lstTemp.Sum(c => c.QuantityOrder);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryProduct = lstDIProduct.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                }

                                var itemVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.GroupOfProductCUSID == col.GroupOfProductID && c.VendorID == item.VendorID);
                                if (itemVENGroupProduct != null)
                                {
                                    col.GroupOfProductVendorCode = itemVENGroupProduct.Code;
                                    col.GroupOfProductVendorName = itemVENGroupProduct.GroupName;
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;

                                item.Ton += col.Ton;
                                item.CBM += col.CBM;
                                item.Quantity += col.Quantity;

                                item.TonOrder += col.TonOrder;
                                item.CBMOrder += col.CBMOrder;
                                item.QuantityOrder += col.QuantityOrder;
                            }
                        }
                    }

                    result.ListData = result.ListData.OrderBy(c => c.TOMasterID).ThenBy(c => c.ETD).ThenBy(c => c.OrderID).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPOPSPlan_ColumnDetail REPDIOPSPlan_ColumnDetailGroupStockData(List<int> lstid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID)
        {
            try
            {
                DateTime? dtNull = null;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPOPSPlan_ColumnDetail();
                result.ListData = new List<DTOREPOPSPlan_Detail>();
                result.ListColumn = new List<DTOREPOPSPlan_ColumnDetail_Group>();
                using (var model = new DataEntities())
                {
                    if (lstgroupid == null || lstgroupid.Count == 0)
                    {
                        lstgroupid = new List<int>();
                        lstgroupid = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => c.ID).Distinct().ToList();
                    }
                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    #region Get data

                    var ListData = model.OPS_DITOGroupProduct.Where(c => c.ID == -1).Select(c => new
                    {
                        TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                        TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                        PartnerID = c.ORD_GroupProduct.PartnerID,
                        PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                        PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                        PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                        LocationToID = c.ORD_GroupProduct.LocationToID,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                        VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                        VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                        VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,

                        KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                        KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                        KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                    }).ToList();
                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.ID == -1).Select(c => new
                    {
                        DITOGroupProductID = c.ID,
                        c.OrderGroupProductID,
                        TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                        OrderID = c.ORD_GroupProduct.OrderID,

                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                        LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        InvoiceNote = c.InvoiceNote,
                        InvoiceReturnNote = c.InvoiceReturnNote,
                        InvoiceDate = c.InvoiceDate,
                        InvoiceReturnDate = c.InvoiceReturnDate,

                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,

                        TonOrder = c.ORD_GroupProduct.Ton,
                        CBMOrder = c.ORD_GroupProduct.CBM,
                        QuantityOrder = c.ORD_GroupProduct.Quantity,

                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                        CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                        DrivingLicense = string.Empty,

                    }).ToList();

                    var lstDIProduct = model.OPS_DITOProduct.Where(c => c.ID == -1).Select(c => new
                    {
                        c.DITOGroupProductID,
                        ProductCode = c.ORD_Product.CUS_Product.Code,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                    }).ToList();

                    if (statusID == 1)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            LocationToID = c.ORD_GroupProduct.LocationToID,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            c.OrderGroupProductID,
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            OrderID = c.ORD_GroupProduct.OrderID,

                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                        }).ToList();

                        lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.OPS_DITOGroupProduct.DITOMasterID.HasValue && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtto) || (c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            c.DITOGroupProductID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();
                    }

                    if (statusID == 2)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            LocationToID = c.ORD_GroupProduct.LocationToID,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            c.OrderGroupProductID,
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            OrderID = c.ORD_GroupProduct.OrderID,

                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                        }).ToList();

                        lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID.HasValue &&
                        c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtto && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            c.DITOGroupProductID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();
                    }

                    if (statusID == 3)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            LocationToID = c.ORD_GroupProduct.LocationToID,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,
                            c.OrderGroupProductID,
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            OrderID = c.ORD_GroupProduct.OrderID,

                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                        }).ToList();

                        lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID == null &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            c.DITOGroupProductID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();
                    }
                    #endregion

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductName, c.GroupOfProductCode, c.StockID, c.StockCode }).Distinct().ToList();

                    foreach (var itemData in ListData)
                    {
                        DTOREPOPSPlan_Detail item = new DTOREPOPSPlan_Detail
                        {
                            TOMasterID = itemData.TOMasterID,
                            TOMasterCode = itemData.TOMasterCode,
                            TOMasterStatus = itemData.TOMasterStatus,

                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            PartnerCodeName = itemData.PartnerCodeName,

                            LocationToID = itemData.LocationToID.Value,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,

                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,

                            VehicleID = itemData.VehicleID,
                            VehicleCode = itemData.VehicleCode,
                            VendorID = itemData.VendorID,
                            VendorCode = itemData.VendorCode,
                            VendorName = itemData.VendorName,
                            VendorShortName = itemData.VendorShortName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            TransportModeIncome = itemData.TransportModeIncome,
                            TransportModeCost = itemData.TransportModeCost,

                            TotalLocation = itemData.TotalLocation,

                            KM = itemData.KM,
                            KMStart = itemData.KMStart,
                            KMEnd = itemData.KMEnd,
                            ETD = itemData.ETD,
                            ETA = itemData.ETA,
                        };

                        result.ListData.Add(item);

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        if (item.TOMasterID > 0)
                        {
                            item.ScheduleTonTranfer = result.ListData.Where(c => c.TOMasterID == item.TOMasterID).Sum(c => c.TonTranfer);
                            item.ScheduleCBMTranfer = result.ListData.Where(c => c.TOMasterID == item.TOMasterID).Sum(c => c.CBMTranfer);
                            item.ScheduleQuantityTranfer = result.ListData.Where(c => c.TOMasterID == item.TOMasterID).Sum(c => c.QuantityTranfer);
                        }

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.TOMasterID == item.TOMasterID && c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;

                                    item.DriverName = first.DriverName;
                                    item.TelNo = first.TelNo;
                                    item.DrivingLicense = first.DrivingLicense;
                                    item.CardNumber = first.CardNumber;
                                }
                                var lstDITOGroupProductID = queryDITOGroup.Select(c => c.DITOGroupProductID).ToList();

                                var col = new DTOREPOPSPlan_ColumnDetail_Group();
                                col.TOMasterID = item.TOMasterID.Value;
                                col.OrderID = item.OrderID > 0 ? item.OrderID.Value : -1;
                                col.GroupOfProductID = itemGroup.GroupOfProductID != null ? itemGroup.GroupOfProductID.Value : 0;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.StockID = itemGroup.StockID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.KeyCode = itemGroup.StockCode + "-" + itemGroup.GroupOfProductCode;

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);

                                col.Ton = queryDITOGroup.Sum(c => c.Ton);
                                col.CBM = queryDITOGroup.Sum(c => c.CBM);
                                col.Quantity = queryDITOGroup.Sum(c => c.Quantity);

                                var lstTemp = queryDITOGroup.Select(c => new { c.OrderGroupProductID, c.TonOrder, c.CBMOrder, c.QuantityOrder }).Distinct().ToList();
                                col.TonOrder = lstTemp.Sum(c => c.TonOrder);
                                col.CBMOrder = lstTemp.Sum(c => c.CBMOrder);
                                col.QuantityOrder = lstTemp.Sum(c => c.QuantityOrder);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryProduct = lstDIProduct.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                }

                                var itemVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.GroupOfProductCUSID == col.GroupOfProductID && c.VendorID == item.VendorID);
                                if (itemVENGroupProduct != null)
                                {
                                    col.GroupOfProductVendorCode = itemVENGroupProduct.Code;
                                    col.GroupOfProductVendorName = itemVENGroupProduct.GroupName;
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;
                                item.Ton += col.Ton;
                                item.CBM += col.CBM;
                                item.Quantity += col.Quantity;

                                item.TonOrder += col.TonOrder;
                                item.CBMOrder += col.CBMOrder;
                                item.QuantityOrder += col.QuantityOrder;
                            }
                        }
                    }

                    result.ListData = result.ListData.OrderBy(c => c.TOMasterID).ThenBy(c => c.ETD).ThenBy(c => c.OrderID).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOREPOPSPlan_Order> REPDIOPSPlan_OrderData(List<int> lstid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID)
        {
            try
            {
                List<DTOREPOPSPlan_Order> result = new List<DTOREPOPSPlan_Order>();
                List<DTOREPOPSPlan_Order> lstTemp = new List<DTOREPOPSPlan_Order>();
                using (var model = new DataEntities())
                {
                    DateTime? dtNull = null;
                    dtfrom = dtfrom.Date;
                    dtto = dtto.Date.AddDays(1);
                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();
                    if (lstgroupid == null || lstgroupid.Count == 0)
                    {
                        lstgroupid = new List<int>();
                        lstgroupid = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => c.ID).Distinct().ToList();
                    }
                    if (statusID == 1)
                    {
                        lstTemp = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new DTOREPOPSPlan_Order
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode != null ? c.DNCode : "",
                            SOCode = c.ORD_GroupProduct.SOCode == null ? c.ORD_GroupProduct.SOCode : "",
                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            Description = c.ORD_GroupProduct.Description,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,
                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,

                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            Note1 = c.Note1,
                            Note2 = c.Note2,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();
                    }

                    if (statusID == 2)
                    {
                        lstTemp = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new DTOREPOPSPlan_Order
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode != null ? c.DNCode : "",
                            SOCode = c.ORD_GroupProduct.SOCode == null ? c.ORD_GroupProduct.SOCode : "",
                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            Description = c.ORD_GroupProduct.Description,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,
                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,

                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            Note1 = c.Note1,
                            Note2 = c.Note2,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();
                    }

                    if (statusID == 3)
                    {
                        lstTemp = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new DTOREPOPSPlan_Order
                        {
                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode != null ? c.DNCode : "",
                            SOCode = c.ORD_GroupProduct.SOCode == null ? c.ORD_GroupProduct.SOCode : "",
                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            Description = c.ORD_GroupProduct.Description,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : null,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,
                            VendorCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 1,
                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            KMStart = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMStart : null,
                            KMEnd = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KMEnd : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,

                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            Note1 = c.Note1,
                            Note2 = c.Note2,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();
                    }

                    var lstGroup = lstTemp.GroupBy(c => c.OrderGroupProductID);



                    foreach (var itemGroup in lstGroup)
                    {
                        var itemDefault = itemGroup.FirstOrDefault();
                        DTOREPOPSPlan_Order item = new DTOREPOPSPlan_Order();
                        item.TOMasterCode = string.Join(",", itemGroup.Select(c => c.TOMasterCode).Distinct().ToList());
                        item.TOMasterStatus = string.Join(",", itemGroup.Select(c => c.TOMasterStatus).Distinct().ToList());
                        item.OrderID = itemDefault.OrderID;
                        item.OrderCode = itemDefault.OrderCode;
                        item.DNCode = string.Join(",", itemGroup.Select(c => c.DNCode).Distinct().ToList());
                        item.SOCode = itemDefault.SOCode;
                        item.DateConfig = item.DateConfig;
                        item.RequestDate = item.RequestDate;
                        item.StockID = item.StockID;
                        item.StockCode = item.StockCode;
                        item.StockName = item.StockName;
                        item.StockAddress = item.StockAddress;
                        item.PartnerID = item.PartnerID;
                        item.PartnerCode = item.PartnerCode;
                        item.PartnerName = item.PartnerName;
                        item.PartnerCodeName = item.PartnerCodeName;
                        item.Address = item.Address;
                        item.LocationToProvince = item.LocationToProvince;
                        item.LocationToDistrict = item.LocationToDistrict;
                        item.CUSRoutingID = item.CUSRoutingID;
                        item.CUSRoutingCode = item.CUSRoutingCode;
                        item.CUSRoutingName = item.CUSRoutingName;
                        item.OrderGroupProductID = item.OrderGroupProductID;
                        item.GroupOfProductID = item.GroupOfProductID;
                        item.GroupOfProductCode = item.GroupOfProductCode;
                        item.GroupOfProductName = item.GroupOfProductName;
                        item.Description = item.Description;

                        item.DriverName = itemDefault.DriverName;
                        item.TelNo = itemDefault.TelNo;
                        item.DrivingLicense = itemDefault.DrivingLicense;
                        item.CardNumber = itemDefault.CardNumber;

                        item.VehicleCode = string.Join(",", itemGroup.Select(c => c.VehicleCode).Distinct().ToList());
                        item.VendorCode = string.Join(",", itemGroup.Select(c => c.VendorCode).Distinct().ToList());
                        item.VendorName = string.Join(",", itemGroup.Select(c => c.VendorName).Distinct().ToList());
                        item.CustomerID = item.CustomerID;
                        item.CustomerCode = item.CustomerCode;
                        item.CustomerName = item.CustomerName;

                        item.TonTranfer = itemGroup.Sum(c => c.TonTranfer);
                        item.CBMTranfer = itemGroup.Sum(c => c.CBMTranfer);
                        item.QuantityTranfer = itemGroup.Sum(c => c.QuantityTranfer);
                        item.TonBBGN = itemGroup.Sum(c => c.TonBBGN);
                        item.CBMBBGN = itemGroup.Sum(c => c.CBMBBGN);
                        item.QuantityBBGN = itemGroup.Sum(c => c.QuantityBBGN);
                        item.TonReturn = itemGroup.Sum(c => c.TonReturn);
                        item.CBMReturn = itemGroup.Sum(c => c.CBMReturn);
                        item.QuantityReturn = itemGroup.Sum(c => c.QuantityReturn);
                        item.KgTranfer = itemGroup.Sum(c => c.KgTranfer);
                        item.KgBBGN = itemGroup.Sum(c => c.KgBBGN);
                        item.KgReturn = itemGroup.Sum(c => c.KgReturn);
                        item.TonOrder = itemDefault.TonOrder;
                        item.CBMOrder = itemDefault.CBMOrder;
                        item.QuantityOrder = itemDefault.QuantityOrder;

                        item.ETD = itemGroup.OrderBy(c => c.ETD).FirstOrDefault().ETD;
                        item.ETA = itemGroup.OrderBy(c => c.ETA).FirstOrDefault().ETA;

                        item.Note1 = string.Join(",", itemGroup.Select(c => c.Note1).Distinct().ToList());
                        item.Note2 = string.Join(",", itemGroup.Select(c => c.Note2).Distinct().ToList());

                        item.TransportModeCost = itemDefault.TransportModeCost;
                        item.TransportModeIncome = itemDefault.TransportModeIncome;

                        item.Ton = itemGroup.Sum(c => c.Ton);
                        item.CBM = itemGroup.Sum(c => c.CBM);
                        item.Quantity = itemGroup.Sum(c => c.Quantity);

                        var itemVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.GroupOfProductCUSID == item.GroupOfProductID && c.VendorID == item.VendorID);
                        if (itemVENGroupProduct != null)
                        {
                            item.GroupOfProductVendorCode = itemVENGroupProduct.Code;
                            item.GroupOfProductVendorName = itemVENGroupProduct.GroupName;
                        }
                        result.Add(item);
                    }
                }

                result = result.OrderBy(c => c.TOMasterID).ThenBy(c => c.ETD).ThenBy(c => c.OrderID).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPOPSPlan_ColumnOrder REPDIOPSPlan_ColumnOrderData(List<int> lstid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID)
        {
            try
            {
                DateTime? dtNull = null;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPOPSPlan_ColumnOrder();
                result.ListData = new List<DTOREPOPSPlan_Order>();
                result.ListColumn = new List<DTOREPOPSPlan_ColumnOrder_Group>();
                using (var model = new DataEntities())
                {
                    if (lstgroupid == null || lstgroupid.Count == 0)
                    {
                        lstgroupid = new List<int>();
                        lstgroupid = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => c.ID).Distinct().ToList();
                    }
                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    #region Get data
                    var ListData = model.OPS_DITOGroupProduct.Where(c => c.ID == -1).Select(c => new
                        {
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        }).ToList();

                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.ID == -1).Select(c => new
                    {
                        DITOGroupProductID = c.ID,

                        TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                        TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",

                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderGroupProductID = c.OrderGroupProductID,
                        StockID = c.ORD_GroupProduct.LocationFromID,

                        LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        InvoiceNote = c.InvoiceNote,
                        InvoiceReturnNote = c.InvoiceReturnNote,
                        InvoiceDate = c.InvoiceDate,
                        InvoiceReturnDate = c.InvoiceReturnDate,

                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                        VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,

                        TonOrder = c.ORD_GroupProduct.Ton,
                        CBMOrder = c.ORD_GroupProduct.CBM,
                        QuantityOrder = c.ORD_GroupProduct.Quantity,

                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                        TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                        DrivingLicense = string.Empty,
                        CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                    }).ToList();

                    var lstDIProduct = model.OPS_DITOProduct.Where(c => c.ID == -1).Select(c => new
                    {
                        OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID,
                        ProductCode = c.ORD_Product.CUS_Product.Code,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                    }).ToList();

                    if (statusID == 1)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,

                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",

                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID,
                            StockID = c.ORD_GroupProduct.LocationFromID,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();

                        lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.OPS_DITOGroupProduct.DITOMasterID.HasValue && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtto) || (c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();
                    }

                    if (statusID == 2)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,

                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",

                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID,
                            StockID = c.ORD_GroupProduct.LocationFromID,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();

                        lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID.HasValue &&
                        c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtto && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();
                    }

                    if (statusID == 3)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                            StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,

                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",

                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID,
                            StockID = c.ORD_GroupProduct.LocationFromID,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();

                        lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID == null &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName,
                        }).ToList();
                    }
                    #endregion

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductName, c.GroupOfProductCode }).Distinct().ToList();

                    foreach (var itemData in ListData)
                    {
                        DTOREPOPSPlan_Order item = new DTOREPOPSPlan_Order
                        {
                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            StockID = itemData.StockID,
                            StockCode = itemData.StockCode,
                            StockName = itemData.StockName,
                            StockAddress = itemData.StockAddress,
                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            PartnerCodeName = itemData.PartnerCodeName,

                            LocationToID = itemData.LocationToID,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,

                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            TransportModeIncome = itemData.TransportModeIncome,
                        };

                        result.ListData.Add(item);

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.TransportModeCost = first.TransportModeCost;
                                    item.VendorID = first.VendorID;
                                    item.DriverName = first.DriverName;
                                    item.TelNo = first.TelNo;
                                    item.DrivingLicense = first.DrivingLicense;
                                    item.CardNumber = first.CardNumber;
                                }
                                var lstOrderGroupProductID = queryDITOGroup.Select(c => c.OrderGroupProductID).ToList();

                                var col = new DTOREPOPSPlan_ColumnOrder_Group();
                                col.OrderID = item.OrderID > 0 ? item.OrderID.Value : -1;
                                col.GroupOfProductID = itemGroup.GroupOfProductID != null ? itemGroup.GroupOfProductID.Value : 0;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.StockID = item.StockID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.KeyCode = itemGroup.GroupOfProductCode;

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);
                                col.Ton = queryDITOGroup.Sum(c => c.Ton);
                                col.CBM = queryDITOGroup.Sum(c => c.CBM);
                                col.Quantity = queryDITOGroup.Sum(c => c.Quantity);

                                var lstTemp = queryDITOGroup.Select(c => new { c.OrderGroupProductID, c.TonOrder, c.CBMOrder, c.QuantityOrder }).Distinct().ToList();
                                col.TonOrder = lstTemp.Sum(c => c.TonOrder);
                                col.CBMOrder = lstTemp.Sum(c => c.CBMOrder);
                                col.QuantityOrder = lstTemp.Sum(c => c.QuantityOrder);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryProduct = lstDIProduct.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                }

                                var itemVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.GroupOfProductCUSID == col.GroupOfProductID && c.VendorID == item.VendorID);
                                if (itemVENGroupProduct != null)
                                {
                                    col.GroupOfProductVendorCode = itemVENGroupProduct.Code;
                                    col.GroupOfProductVendorName = itemVENGroupProduct.GroupName;
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;
                                item.Ton += col.Ton;
                                item.CBM += col.CBM;
                                item.Quantity += col.Quantity;

                                item.TonOrder += col.TonOrder;
                                item.CBMOrder += col.CBMOrder;
                                item.QuantityOrder += col.QuantityOrder;
                            }
                        }
                    }

                    result.ListData = result.ListData.OrderBy(c => c.TOMasterID).ThenBy(c => c.ETD).ThenBy(c => c.OrderID).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPOPSPlan_ColumnOrder REPDIOPSPlan_ColumnOrderGroupStockData(List<int> lstid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID)
        {
            try
            {
                DateTime? dtNull = null;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPOPSPlan_ColumnOrder();
                result.ListData = new List<DTOREPOPSPlan_Order>();
                result.ListColumn = new List<DTOREPOPSPlan_ColumnOrder_Group>();
                using (var model = new DataEntities())
                {
                    if (lstgroupid == null || lstgroupid.Count == 0)
                    {
                        lstgroupid = new List<int>();
                        lstgroupid = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => c.ID).Distinct().ToList();
                    }

                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    #region Get data
                    var ListData = model.OPS_DITOGroupProduct.Where(c => c.ID == -1).Select(c => new
                    {
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                        DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                        PartnerID = c.ORD_GroupProduct.PartnerID,
                        PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                        PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                        PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                        Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                        LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                        GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                    }).ToList();

                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.ID == -1).Select(c => new
                    {
                        DITOGroupProductID = c.ID,

                        TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                        TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",

                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderGroupProductID = c.OrderGroupProductID,
                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.CUS_Location.Code,

                        LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        InvoiceNote = c.InvoiceNote,
                        InvoiceReturnNote = c.InvoiceReturnNote,
                        InvoiceDate = c.InvoiceDate,
                        InvoiceReturnDate = c.InvoiceReturnDate,

                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                        VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,

                        TonOrder = c.ORD_GroupProduct.Ton,
                        CBMOrder = c.ORD_GroupProduct.CBM,
                        QuantityOrder = c.ORD_GroupProduct.Quantity,

                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                        TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                        DrivingLicense = string.Empty,
                        CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                    }).ToList();

                    var lstDIProduct = model.OPS_DITOProduct.Where(c => c.ID == -1).Select(c => new
                    {
                        OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID,
                        ProductCode = c.ORD_Product.CUS_Product.Code,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                    }).ToList();

                    if (statusID == 1)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                        }).ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.DITOMasterID.HasValue && c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto) || (c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,

                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",

                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();
                    }

                    if (statusID == 2)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID.HasValue &&
                        c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,

                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",

                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();
                    }

                    if (statusID == 3)
                    {
                        ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                            DateConfig = c.ORD_GroupProduct.DateConfig.HasValue ? c.ORD_GroupProduct.DateConfig : dtNull,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                        }).Distinct().ToList();

                        lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null &&
                        c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        c.ORD_GroupProduct.IsReturn != true &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            DITOGroupProductID = c.ID,

                            TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterStatus = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.SYS_Var.ValueOfVar : "",

                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.CUS_Location.Code,

                            LocationToID = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceReturnDate = c.InvoiceReturnDate,

                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : null,

                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            TelNo = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,
                            CardNumber = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                        }).ToList();
                    }
                    #endregion

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductName, c.GroupOfProductCode, c.StockID, c.StockCode }).Distinct().ToList();

                    foreach (var itemData in ListData)
                    {
                        DTOREPOPSPlan_Order item = new DTOREPOPSPlan_Order
                        {
                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            PartnerCodeName = itemData.PartnerCodeName,

                            LocationToID = itemData.LocationToID,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,

                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,

                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            TransportModeCost = itemData.TransportModeCost,
                            TransportModeIncome = itemData.TransportModeIncome,
                        };

                        result.ListData.Add(item);

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.TransportModeCost = first.TransportModeCost;
                                    item.VendorID = first.VendorID;
                                    item.DriverName = first.DriverName;
                                    item.TelNo = first.TelNo;
                                    item.DrivingLicense = first.DrivingLicense;
                                    item.CardNumber = first.CardNumber;
                                }
                                var lstOrderGroupProductID = queryDITOGroup.Select(c => c.OrderGroupProductID).ToList();

                                var col = new DTOREPOPSPlan_ColumnOrder_Group();
                                col.OrderID = item.OrderID > 0 ? item.OrderID.Value : -1;
                                col.GroupOfProductID = itemGroup.GroupOfProductID != null ? itemGroup.GroupOfProductID.Value : 0;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.StockID = itemGroup.StockID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.KeyCode = itemGroup.StockCode + "-" + itemGroup.GroupOfProductCode;

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);
                                col.Ton = queryDITOGroup.Sum(c => c.Ton);
                                col.CBM = queryDITOGroup.Sum(c => c.CBM);
                                col.Quantity = queryDITOGroup.Sum(c => c.Quantity);

                                var lstTemp = queryDITOGroup.Select(c => new { c.OrderGroupProductID, c.TonOrder, c.CBMOrder, c.QuantityOrder }).Distinct().ToList();
                                col.TonOrder = lstTemp.Sum(c => c.TonOrder);
                                col.CBMOrder = lstTemp.Sum(c => c.CBMOrder);
                                col.QuantityOrder = lstTemp.Sum(c => c.QuantityOrder);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryProduct = lstDIProduct.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                }

                                var itemVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.GroupOfProductCUSID == col.GroupOfProductID && c.VendorID == item.VendorID);
                                if (itemVENGroupProduct != null)
                                {
                                    col.GroupOfProductVendorCode = itemVENGroupProduct.Code;
                                    col.GroupOfProductVendorName = itemVENGroupProduct.GroupName;
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;

                                item.Ton += col.Ton;
                                item.CBM += col.CBM;
                                item.Quantity += col.Quantity;

                                item.TonOrder += col.TonOrder;
                                item.CBMOrder += col.CBMOrder;
                                item.QuantityOrder += col.QuantityOrder;
                            }
                        }
                    }

                    result.ListData = result.ListData.OrderBy(c => c.TOMasterID).ThenBy(c => c.ETD).ThenBy(c => c.OrderID).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region REPDIPL
        public List<DTOREPTRPL_Detail> REPDIPL_DetailData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.ManualFixCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.ManualFixDebit);
                #endregion

                DateTime? dtNull = null;

                var result = new List<DTOREPTRPL_Detail>();
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    //LTL
                    result = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new DTOREPTRPL_Detail
                    {
                        DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : 0,
                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,
                        DITOGroupProductID = c.ID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,
                        DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                        StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                        StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                        StockNote = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                        StockNote1 = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                        PartnerID = c.ORD_GroupProduct.PartnerID,
                        PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                        PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                        PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                        Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                        LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : "",
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : "",

                        DateDN = c.DateDN,

                        GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                        CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        lstProductCode = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                        lstProductName = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                        ProductDescription = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description,
                        FINSort = c.FINSort,

                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                        VehicleID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.VehicleID : 0,
                        VehicleCode = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VehicleID > 0) ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0) ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                        VendorCode = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0) ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0) ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID > 0 ? (c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "") : "",

                        DriverName = c.DITOMasterID > 0 ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                        KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,
                        DateFromCome = c.DateFromCome,
                        DateFromLeave = c.DateFromLeave,
                        DateFromLoadStart = c.DateFromLoadStart,
                        DateFromLoadEnd = c.DateFromLoadEnd,
                        DateToCome = c.DateToCome,
                        DateToLeave = c.DateToLeave,
                        DateToLoadStart = c.DateToLoadStart,
                        DateToLoadEnd = c.DateToLoadEnd,
                        InvoiceDate = c.InvoiceDate,
                        InvoiceNote = c.InvoiceNote,
                        InvoiceReturnDate = c.InvoiceReturnDate,
                        InvoiceReturnNote = c.InvoiceReturnNote,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        OPSGroupNote1 = c.Note1,
                        OPSGroupNote2 = c.Note2,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = (c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue) ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                        OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                        OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                        OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                        OrderGroupProductRouting = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                        AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        OPSDateConfig = c.DITOMasterID > 0 ? c.OPS_DITOMaster.DateConfig : null,
                        OPSGroupProductDateConfig = c.DateConfig,
                        OPSContract = (c.DITOMasterID > 0 && c.OPS_DITOMaster.ContractID > 0) ? c.OPS_DITOMaster.CAT_Contract.DisplayName : string.Empty,
                        OPSRouting = (c.DITOMasterID > 0 && c.OPS_DITOMaster.CATRoutingID > 0) ? c.OPS_DITOMaster.CAT_Routing.RoutingName : string.Empty,
                        OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                        OrderCreatedBy = c.ORD_GroupProduct.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,

                        ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        PODStatus = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,
                        HasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? "x" : "") : "",
                        ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                        ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                        MinWeight = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VehicleID > 0) ? c.OPS_DITOMaster.CAT_Vehicle.MinWeight : null,
                        MaxWeightCal = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VehicleID > 0) ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VehicleID > 0) ? c.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,

                        MinCapacity = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VehicleID > 0) ? c.OPS_DITOMaster.CAT_Vehicle.MinCapacity : null,
                        MaxCapacity = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VehicleID > 0) ? c.OPS_DITOMaster.CAT_Vehicle.MaxCapacity : null,
                        RegCapacity = (c.DITOMasterID > 0 && c.OPS_DITOMaster.VehicleID > 0) ? c.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                        TonOrder = c.ORD_GroupProduct.Ton,
                        CBMOrder = c.ORD_GroupProduct.CBM,
                        QuantityOrder = c.ORD_GroupProduct.Quantity,

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,

                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,
                    }).ToList();

                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => data.Filter.ListCusID.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            DITOGroupProductID = c.GroupOfProductID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.QuantityMOQ,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                            c.FIN_PLDetails.CAT_Cost.CostName,
                            c.FIN_PLDetails.Note,
                        }).ToList();

                    foreach (var item in result)
                    {
                        item.ProductCode = string.Join(",", item.lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(",", item.lstProductName.Distinct().ToList());
                        if (item.DITOMasterID > 0)
                        {
                            item.ScheduleTonTranfer = result.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.TonTranfer);
                            item.ScheduleCBMTranfer = result.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.CBMTranfer);
                            item.ScheduleQuantityTranfer = result.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.QuantityTranfer);
                        }

                        var val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOFreightCredit);
                        if (val != null)
                        {
                            item.IncomeUnitPrice = val.UnitPrice;
                            item.IncomeQuantity = val.Quantity;
                            item.Income = val.Credit;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                        if (val != null)
                        {
                            item.IncomeUnLoadUnitPrice = val.UnitPrice;
                            item.IncomeUnLoadQuantity = val.Quantity;
                            item.IncomeUnLoad = val.Credit;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOLoadCredit);
                        if (val != null)
                        {
                            item.IncomeLoadUnitPrice = val.UnitPrice;
                            item.IncomeLoadQuantity = val.Quantity;
                            item.IncomeLoad = val.Credit;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOReturnCredit);
                        if (val != null)
                        {
                            item.IncomeReturnUnitPrice = val.UnitPrice;
                            item.IncomeReturnQuantity = val.Quantity;
                            item.IncomeReturn = val.Credit;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                        if (val != null)
                        {
                            item.IncomeReturnUnLoadUnitPrice = val.UnitPrice;
                            item.IncomeReturnUnLoadQuantity = val.Quantity;
                            item.IncomeReturnUnLoad = val.Credit;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                        if (val != null)
                        {
                            item.IncomeReturnLoadUnitPrice = val.UnitPrice;
                            item.IncomeReturnLoadQuantity = val.Quantity;
                            item.IncomeReturnLoad = val.Credit;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOExCredit);
                        if (val != null)
                        {
                            item.IncomeExUnitPrice = val.UnitPrice;
                            item.IncomeExQuantity = val.Quantity;
                            item.IncomeEx = val.Credit;
                            item.IncomeExCostName = val.CostName;
                            item.IncomeExNote = val.Note;
                        }

                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOFreightDebit);
                        if (val != null)
                        {
                            item.CostUnitPrice = val.UnitPrice;
                            item.CostQuantity = val.Quantity;
                            item.Cost = val.Debit;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                        if (val != null)
                        {
                            item.CostUnLoadUnitPrice = val.UnitPrice;
                            item.CostUnLoadQuantity = val.Quantity;
                            item.CostUnLoad = val.Debit;
                            item.CostUnLoadVendorCode = val.VendorCode;
                            item.CostUnLoadVendorName = val.VendorName;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOLoadDebit);
                        if (val != null)
                        {
                            item.CostLoadUnitPrice = val.UnitPrice;
                            item.CostLoadQuantity = val.Quantity;
                            item.CostLoad = val.Debit;
                            item.CostLoadVendorCode = val.VendorCode;
                            item.CostLoadVendorName = val.VendorName;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOReturnDebit);
                        if (val != null)
                        {
                            item.CostReturnUnitPrice = val.UnitPrice;
                            item.CostReturnQuantity = val.Quantity;
                            item.CostReturn = val.Debit;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                        if (val != null)
                        {
                            item.CostReturnUnLoadUnitPrice = val.UnitPrice;
                            item.CostReturnUnLoadQuantity = val.Quantity;
                            item.CostReturnUnLoad = val.Debit;
                            item.CostReturnUnLoadVendorCode = val.VendorCode;
                            item.CostReturnUnLoadVendorName = val.VendorName;
                        }
                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                        if (val != null)
                        {
                            item.CostReturnLoadUnitPrice = val.UnitPrice;
                            item.CostReturnLoadQuantity = val.Quantity;
                            item.CostReturnLoad = val.Debit;
                            item.CostReturnLoadVendorCode = val.VendorCode;
                            item.CostReturnLoadVendorName = val.VendorName;
                        }

                        val = lstFIN.FirstOrDefault(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOExDebit);
                        if (val != null)
                        {
                            item.CostExUnitPrice = val.UnitPrice;
                            item.CostExQuantity = val.Quantity;
                            item.CostEx = val.Debit;
                        }

                        var lstTrouble = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.TroubleCredit);
                        if (lstTrouble != null && lstTrouble.Count() > 0)
                        {
                            item.IncomeTrouble = lstTrouble.Sum(c => c.Credit);
                        }

                        lstTrouble = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.TroubleDebit);
                        if (lstTrouble != null && lstTrouble.Count() > 0)
                        {
                            item.CostTrouble = lstTrouble.Sum(c => c.Debit);
                        }

                        // Phí xe nhà
                        var lstOwner = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.FLMDepreciation);
                        if (lstOwner != null && lstOwner.Count() > 0)
                        {
                            item.CostDepreciation = lstOwner.Sum(c => c.Debit);
                        }

                        lstOwner = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.FLMScheduleFee);
                        if (lstOwner != null && lstOwner.Count() > 0)
                        {
                            item.CostSchedule = lstOwner.Sum(c => c.Debit);
                        }

                        lstOwner = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.FLMDriverFee);
                        if (lstOwner != null && lstOwner.Count() > 0)
                        {
                            item.CostDriver = lstOwner.Sum(c => c.Debit);
                        }

                        lstOwner = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.StationDebit);
                        if (lstOwner != null && lstOwner.Count() > 0)
                        {
                            item.CostStation = lstOwner.Sum(c => c.Debit);
                        }

                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeEx + item.IncomeTrouble;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                    }

                    //Other
                    result.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Detail
                        {
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.DITOMasterID.Value : 0,
                            TOMasterCode = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.Code : string.Empty,
                            TotalLocation = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.TotalLocation : 0,
                            ETD = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : dtNull,
                            DITOGroupProductID = c.ID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.OPS_DITOGroupProduct.DNCode,
                            SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                            DateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID,
                            StockCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            StockNote = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                            StockNote1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                            PartnerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            LocationToNote = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                            LocationToNote1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",
                            LocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.Code : "",
                            LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName : "",

                            DateDN = c.OPS_DITOGroupProduct.DateDN,
                            GroupOfLocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            FINSort = c.OPS_DITOGroupProduct.FINSort,
                            GroupOfVehicleCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            GroupOfVehicleCodeVEN = c.OPS_DITOGroupProduct.DITOMasterID.HasValue && c.OPS_DITOGroupProduct.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.OPS_DITOGroupProduct.DITOMasterID.HasValue && c.OPS_DITOGroupProduct.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                            VehicleID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID,
                            VehicleCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            DriverName = c.OPS_DITOGroupProduct.OPS_DITOMaster.DriverName1,

                            CustomerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            IncomeExCostName = c.FIN_PLDetails.CAT_Cost.CostName,
                            IncomeExNote = c.FIN_PLDetails.Note,
                            IncomeExQuantity = c.FIN_PLDetails.CostID != (int)CATCostType.DITOFreightNoGroupCredit ? c.FIN_PLDetails.Quantity : 0,
                            IncomeExUnitPrice = c.FIN_PLDetails.CostID != (int)CATCostType.DITOFreightNoGroupCredit ? c.FIN_PLDetails.UnitPrice : 0,
                            IncomeEx = c.FIN_PLDetails.CostID != (int)CATCostType.DITOFreightNoGroupCredit ? c.FIN_PLDetails.Credit : 0,
                            Income = c.FIN_PLDetails.CostID == (int)CATCostType.DITOFreightNoGroupCredit ? c.FIN_PLDetails.Credit : 0,
                            CostEx = c.FIN_PLDetails.Debit,

                            OrderDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderGroupProductDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig,
                            OrderContract = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            AreaToCodeCredit = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                            AreaToNameCredit = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                            OPSDateConfig = c.OPS_DITOGroupProduct.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.OPS_DITOGroupProduct.DateConfig,
                            OPSContract = c.OPS_DITOGroupProduct.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.OPS_DITOGroupProduct.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                            OPSGroupProductRouting = c.OPS_DITOGroupProduct.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.CAT_Routing.RoutingName : "",

                            TotalCost = c.FIN_PLDetails.Debit,
                            TotalIncome = c.FIN_PLDetails.Credit,
                            TotalPL = c.FIN_PLDetails.Credit - c.FIN_PLDetails.Debit,
                            OrderCreatedBy = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedDate,

                            OPSGroupNote1 = c.OPS_DITOGroupProduct.Note1,
                            OPSGroupNote2 = c.OPS_DITOGroupProduct.Note2,

                            TransportModeIncome = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.OPS_DITOGroupProduct.DITOMasterID.HasValue && c.OPS_DITOGroupProduct.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            ExternalCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine2,

                            TOMasterNote1 = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.Note1 : string.Empty,
                            TOMasterNote2 = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.Note2 : string.Empty,

                            PODStatus = c.OPS_DITOGroupProduct.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,
                            HasCashCollect = c.OPS_DITOGroupProduct.ORD_GroupProduct.HasCashCollect.HasValue ? (c.OPS_DITOGroupProduct.ORD_GroupProduct.HasCashCollect.Value ? "x" : "") : "",
                            ORDGroupNote1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.OPS_DITOGroupProduct.ORD_GroupProduct.Note2,

                            MaxWeightCal = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                            RegWeight = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                            RegCapacity = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                            TonOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.Ton,
                            CBMOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.CBM,
                            QuantityOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.Quantity,

                            SortConfigOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SortConfig,
                            SortConfigMaster = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.SortConfig : 0,
                            OrderContractID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID,
                            OPSContractID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ContractID : null,
                        }).ToList());

                    result.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Detail
                        {
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.DITOMasterID.Value : 0,
                            TOMasterCode = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.Code : string.Empty,
                            TotalLocation = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.TotalLocation : 0,
                            ETD = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : dtNull,
                            DITOGroupProductID = c.ID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.OPS_DITOGroupProduct.DNCode,
                            SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                            DateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID,
                            StockCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            StockNote = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                            StockNote1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                            PartnerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            LocationToNote = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                            LocationToNote1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",
                            LocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.Code : "",
                            LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName : "",

                            DateDN = c.OPS_DITOGroupProduct.DateDN,
                            GroupOfLocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            FINSort = c.OPS_DITOGroupProduct.FINSort,

                            GroupOfVehicleCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            GroupOfVehicleCodeVEN = c.OPS_DITOGroupProduct.DITOMasterID.HasValue && c.OPS_DITOGroupProduct.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.OPS_DITOGroupProduct.DITOMasterID.HasValue && c.OPS_DITOGroupProduct.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                            VehicleID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID,
                            VehicleCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            DriverName = c.OPS_DITOGroupProduct.OPS_DITOMaster.DriverName1,

                            CustomerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            CostExCostName = c.FIN_PLDetails.CAT_Cost.CostName,
                            CostExNote = c.FIN_PLDetails.Note,
                            CostExQuantity = c.FIN_PLDetails.CostID != (int)CATCostType.DITOFreightNoGroupDebit ? c.FIN_PLDetails.Quantity : 0,
                            CostExUnitPrice = c.FIN_PLDetails.CostID != (int)CATCostType.DITOFreightNoGroupDebit ? c.FIN_PLDetails.UnitPrice : 0,
                            CostEx = c.FIN_PLDetails.CostID != (int)CATCostType.DITOFreightNoGroupDebit ? c.FIN_PLDetails.Debit : 0,
                            Cost = c.FIN_PLDetails.CostID == (int)CATCostType.DITOFreightNoGroupDebit ? c.FIN_PLDetails.Debit : 0,
                            IncomeEx = c.FIN_PLDetails.Credit,

                            OrderDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderGroupProductDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig,
                            OrderContract = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            AreaToCodeCredit = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                            AreaToNameCredit = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                            OPSDateConfig = c.OPS_DITOGroupProduct.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.OPS_DITOGroupProduct.DateConfig,
                            OPSContract = c.OPS_DITOGroupProduct.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.OPS_DITOGroupProduct.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                            OPSGroupProductRouting = c.OPS_DITOGroupProduct.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.CAT_Routing.RoutingName : "",

                            TotalCost = c.FIN_PLDetails.Debit,
                            TotalIncome = c.FIN_PLDetails.Credit,
                            TotalPL = c.FIN_PLDetails.Credit - c.FIN_PLDetails.Debit,
                            OrderCreatedBy = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedDate,

                            OPSGroupNote1 = c.OPS_DITOGroupProduct.Note1,
                            OPSGroupNote2 = c.OPS_DITOGroupProduct.Note2,

                            TransportModeIncome = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.OPS_DITOGroupProduct.DITOMasterID.HasValue && c.OPS_DITOGroupProduct.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            ExternalCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine2,

                            TOMasterNote1 = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.Note1 : string.Empty,
                            TOMasterNote2 = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.Note2 : string.Empty,

                            PODStatus = c.OPS_DITOGroupProduct.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,
                            HasCashCollect = c.OPS_DITOGroupProduct.ORD_GroupProduct.HasCashCollect.HasValue ? (c.OPS_DITOGroupProduct.ORD_GroupProduct.HasCashCollect.Value ? "x" : "") : "",

                            ORDGroupNote1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.OPS_DITOGroupProduct.ORD_GroupProduct.Note2,

                            MaxWeightCal = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                            RegWeight = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                            RegCapacity = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                            TonOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.Ton,
                            CBMOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.CBM,
                            QuantityOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.Quantity,

                            SortConfigOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SortConfig,
                            SortConfigMaster = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.SortConfig : 0,
                            OrderContractID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID,
                            OPSContractID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ContractID : null,
                        }).ToList());

                    var lstMasterID = result.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = result.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();
                    var lstContractOrderID = result.Where(c => c.OrderContractID > 0).Select(c => c.OrderContractID.Value).Distinct().ToList();
                    var lstContractMasterID = result.Where(c => c.OPSContractID > 0).Select(c => c.OPSContractID.Value).Distinct().ToList();

                    var objSortConfigDateStart = model.CAT_ContractTerm.Where(c => lstContractOrderID.Contains(c.ContractID) && c.SortConfigDateStart.HasValue).FirstOrDefault();

                    foreach (var item in result)
                    {
                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        var objVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.CustomerID == item.CustomerID && c.VendorID == item.VendorID && c.GroupOfProductCUSID == item.GroupOfProductID);
                        if (objVENGroupProduct != null)
                        {
                            item.GroupOfProductVendorCode = objVENGroupProduct.Code;
                            item.GroupOfProductVendorName = objVENGroupProduct.GroupName;
                        }

                        if (item.TotalIncome > 0)
                            item.PercentPLIncome = (double)(item.TotalPL / item.TotalIncome) * 100;
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result = result.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPTRPL_ColumnDetail REPDIPL_ColumnDetailData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                #endregion

                DateTime? dtNull = null;

                var result = new DTOREPTRPL_ColumnDetail();
                result.ListData = new List<DTOREPTRPL_Detail>();
                result.ListColumn = new List<DTOREPTRPL_ColumnDetail_Group>();
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    //LTL
                    var lstData = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                        TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                        DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                        StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                        StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                        StockNote = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                        StockNote1 = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                        PartnerID = c.ORD_GroupProduct.PartnerID,
                        PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                        PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                        LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                        LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : "",
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : "",

                        GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                        VehicleID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID.Value : -1,
                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                        VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                        OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                        OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                        OPSDateConfig = c.DITOMasterID.HasValue && c.OPS_DITOMaster.DateConfig.HasValue ? c.OPS_DITOMaster.DateConfig : dtNull,
                        OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                        OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                        //OPSGroupProductRouting = c.CATRoutingID.HasValue ? c.CAT_Routing.RoutingName : "",
                        AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        OrderCreatedBy = c.ORD_GroupProduct.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,

                        ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        //OPSGroupNote1 = c.Note1,
                        //OPSGroupNote2 = c.Note2,

                        ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                        ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                        MaxWeightCal = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,
                    }).Distinct().ToList();

                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                        TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                        DITOGroupProductID = c.ID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : "",
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : "",

                        DateDN = c.DateDN,
                        CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",
                        FINSort = c.FINSort,

                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        c.InvoiceNote,
                        c.InvoiceReturnNote,
                        c.InvoiceDate,
                        c.InvoiceReturnDate,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                        IsHasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? true : false) : false,

                        OPSGroupNote1 = c.Note1,
                        OPSGroupNote2 = c.Note2,

                        ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                        ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,
                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,
                        OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                    }).ToList();

                    var lstDIProduct = model.OPS_DITOProduct.Where(c => data.ListDITOGroupProductID.Contains(c.DITOGroupProductID)).Select(c => new
                    {
                        DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID,
                        GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                        LocationToID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationID,
                        OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                        DITOGroupProductID = c.DITOGroupProductID,
                        ProductCode = c.ORD_Product.CUS_Product.Code,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                        ProductDescription = c.ORD_Product.CUS_Product.Description,
                    }).Distinct().ToList();

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            PLGroupID = c.ID,
                            c.PLDetailID,
                            DITOGroupProductID = c.GroupOfProductID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.QuantityMOQ,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.FIN_PLDetails.Note,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                        }).ToList();

                    //Other
                    var lstFINOther = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Detail
                        {
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.DITOMasterID.Value : 0,
                            DITOGroupProductID = c.GroupOfProductID,

                            IncomeEx = c.FIN_PLDetails.Credit,
                            CostEx = c.FIN_PLDetails.Debit,
                        }).ToList();

                    lstFINOther.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Detail
                        {
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.DITOMasterID.Value : 0,
                            DITOGroupProductID = c.GroupOfProductID,

                            CostEx = c.FIN_PLDetails.Debit,
                            IncomeEx = c.FIN_PLDetails.Credit,
                        }).ToList());

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductName, c.GroupOfProductCode }).Distinct().ToList();

                    var lstMasterID = lstDIGroupProduct.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = lstDIGroupProduct.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    foreach (var itemData in lstData)
                    {
                        DTOREPTRPL_Detail item = new DTOREPTRPL_Detail
                        {
                            DITOMasterID = itemData.DITOMasterID,
                            TOMasterCode = itemData.TOMasterCode,
                            TotalLocation = itemData.TotalLocation,

                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            StockID = itemData.StockID,
                            StockCode = itemData.StockCode,
                            StockName = itemData.StockName,
                            StockAddress = itemData.StockAddress,
                            StockNote = itemData.StockNote,
                            StockNote1 = itemData.StockNote1,

                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            PartnerCodeName = itemData.PartnerCode + "-" + itemData.PartnerName,

                            LocationToID = itemData.LocationToID,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            LocationToNote = itemData.LocationToNote,
                            LocationToNote1 = itemData.LocationToNote1,
                            LocationToCode = itemData.LocationToCode,
                            LocationToName = itemData.LocationToName,

                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,

                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,
                            GroupOfVehicleCodeVEN = itemData.GroupOfVehicleCodeVEN,
                            GroupOfVehicleNameVEN = itemData.GroupOfVehicleNameVEN,

                            VehicleID = itemData.VehicleID,
                            VehicleCode = itemData.VehicleCode,
                            VendorID = itemData.VendorID,
                            VendorCode = itemData.VendorCode,
                            VendorName = itemData.VendorName,
                            VendorShortName = itemData.VendorShortName,

                            DriverName = itemData.DriverName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            TransportModeIncome = itemData.TransportModeIncome,
                            TransportModeCost = itemData.TransportModeCost,

                            OrderDateConfig = itemData.OrderDateConfig,
                            OrderContract = itemData.OrderContract,
                            OrderRouting = itemData.OrderRouting,
                            OPSDateConfig = itemData.OPSDateConfig,
                            OPSContract = itemData.OPSContract,
                            OPSRouting = itemData.OPSRouting,
                            //OPSGroupProductRouting = itemData.OPSGroupProductRouting,
                            AreaToCodeCredit = itemData.AreaToCodeCredit,
                            AreaToNameCredit = itemData.AreaToNameCredit,
                            OrderCreatedBy = itemData.OrderCreatedBy,
                            OrderCreatedDate = itemData.OrderCreatedDate,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,

                            TOMasterNote1 = itemData.TOMasterNote1,
                            TOMasterNote2 = itemData.TOMasterNote2,

                            //OPSGroupNote1 = itemData.OPSGroupNote1,
                            //OPSGroupNote2 = itemData.OPSGroupNote1,

                            ORDGroupNote1 = itemData.ORDGroupNote1,
                            ORDGroupNote2 = itemData.ORDGroupNote2,
                            HasCashCollect = "",

                            MaxWeightCal = itemData.MaxWeightCal,
                            RegWeight = itemData.RegWeight,
                            RegCapacity = itemData.RegCapacity,
                        };

                        result.ListData.Add(item);

                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        item.Income = item.IncomeLoad = item.IncomeUnLoad = item.IncomeReturn = item.IncomeReturnLoad = item.IncomeReturnLoad = item.IncomeEx =
                            item.Cost = item.CostLoad = item.CostUnLoad = item.CostReturn = item.CostReturnLoad = item.CostReturnUnLoad = item.CostEx =
                            item.IncomeManual = item.IncomeManualUnitPrice = 0;
                        item.PODStatus = sPODStatusNotComplete;
                        List<int> lstStatusID = new List<int>();
                        List<string> lstVendorCodeLoad = new List<string>();
                        List<string> lstVendorNameLoad = new List<string>();
                        List<string> lstVendorCodeUnLoad = new List<string>();
                        List<string> lstVendorNameUnLoad = new List<string>();
                        List<string> lstVendorCodeReturnLoad = new List<string>();
                        List<string> lstVendorNameReturnLoad = new List<string>();
                        List<string> lstVendorCodeReturnUnLoad = new List<string>();
                        List<string> lstVendorNameReturnUnLoad = new List<string>();
                        List<string> lstHasCashCollect = new List<string>();
                        List<int> lstGroupProductID = new List<int>();

                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.DITOMasterID == item.DITOMasterID && c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.FINSort = first.FINSort;
                                    if (first.ETA != null)
                                        item.ETA = first.ETA;
                                    if (first.ETD != null)
                                        item.ETD = first.ETD;

                                    if (first.ATA != null)
                                        item.ATA = first.ATA;
                                    if (first.ATD != null)
                                        item.ATD = first.ATD;

                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.OPSGroupProductRouting = first.OPSGroupProductRouting;
                                    item.OPSGroupNote1 = first.OPSGroupNote1;
                                    item.OPSGroupNote2 = first.OPSGroupNote2;

                                    item.DNCode = first.DNCode;
                                    item.SOCode = first.SOCode;
                                    item.DateDN = first.DateDN;
                                    item.SortConfigOrder = first.SortConfigOrder;
                                    item.SortConfigMaster = first.SortConfigMaster;
                                    item.OrderContractID = first.OrderContractID;
                                    item.OPSContractID = first.OrderContractID;
                                    item.OrderGroupProductDateConfig = first.OrderGroupProductDateConfig;
                                }
                                var lstDITOGroupProductID = queryDITOGroup.Select(c => c.DITOGroupProductID).ToList();
                                lstGroupProductID.AddRange(lstDITOGroupProductID);

                                var col = new DTOREPTRPL_ColumnDetail_Group();
                                col.TOMasterID = item.DITOMasterID;
                                col.OrderID = item.OrderID > 0 ? item.OrderID.Value : -1;
                                col.GroupOfProductID = itemGroup.GroupOfProductID != null ? itemGroup.GroupOfProductID.Value : 0;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.StockID = item.StockID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = itemData.LocationToProvince;
                                col.LocationToDistrict = itemData.LocationToDistrict;
                                col.KeyCode = itemGroup.GroupOfProductCode;
                                col.PODStatusID = 1;

                                if (queryDITOGroup.Count(c => c.IsInvoice) > 0)
                                {
                                    col.PODStatusID = 2;
                                    if (queryDITOGroup.Count(c => c.IsInvoice) == queryDITOGroup.Count())
                                        col.PODStatusID = 3;
                                }
                                switch (col.PODStatusID)
                                {
                                    case 1: col.PODStatus = sPODStatusNotComplete; break;
                                    case 2: col.PODStatus = sPODStatusPart; break;
                                    case 3: col.PODStatus = sPODStatusComplete; break;
                                }
                                lstStatusID.Add(col.PODStatusID);

                                col.HasCashCollect = queryDITOGroup.Count(c => c.IsHasCashCollect) == queryDITOGroup.Count() ? "x" : "";
                                lstHasCashCollect.Add(col.HasCashCollect);

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryProduct = lstDIProduct.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                    col.ProductDescription = queryProduct.FirstOrDefault().ProductDescription;
                                }

                                var queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOFreightCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Income = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturn = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnLoad = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.ManualFixCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeManual = queryFIN.Sum(c => c.Credit);
                                    col.IncomeManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOFreightDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Cost = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturn = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.ManualFixDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostManual = queryFIN.Sum(c => c.Debit);
                                    col.CostManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.TroubleCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeTrouble += queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.TroubleDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostTrouble += queryFIN.Sum(c => c.Debit);
                                }

                                var queryFINOther = lstFINOther.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID));
                                if (queryFINOther.Count() > 0)
                                {
                                    col.IncomeEx += queryFINOther.Sum(c => c.IncomeEx);
                                    col.CostEx += queryFINOther.Sum(c => c.CostEx);
                                }

                                // Xe nhà
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.FLMDepreciation);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDepreciation += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.FLMScheduleFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostSchedule += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.FLMDriverFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDriver += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.StationDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostStation += queryFIN.Sum(c => c.Debit);
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;

                                item.Income += col.Income;
                                item.IncomeLoad += col.IncomeLoad;
                                item.IncomeUnLoad += col.IncomeUnLoad;
                                item.IncomeReturn += col.IncomeReturn;
                                item.IncomeReturnLoad += col.IncomeReturnLoad;
                                item.IncomeReturnUnLoad += col.IncomeReturnUnLoad;
                                item.IncomeEx += col.IncomeEx;
                                item.IncomeTrouble += col.IncomeTrouble;
                                item.IncomeManual += col.IncomeManual;
                                item.IncomeManualQuantity += col.IncomeManualQuantity;
                                item.IncomeManualUnitPrice += col.IncomeManualUnitPrice;
                                item.IncomeManualNote = col.IncomeManualNote != null ? (col.IncomeManualNote.Trim() != "" ? item.IncomeManualNote + ", " + col.IncomeManualNote : col.IncomeManualNote) : item.IncomeManualNote;

                                item.Cost += col.Cost;
                                item.CostLoad += col.CostLoad;
                                item.CostUnLoad += col.CostUnLoad;
                                item.CostReturn += col.CostReturn;
                                item.CostReturnLoad += col.CostReturnLoad;
                                item.CostReturnUnLoad += col.CostReturnUnLoad;
                                item.CostEx += col.CostEx;
                                item.CostTrouble += col.CostTrouble;
                                item.CostDepreciation += col.CostDepreciation;
                                item.CostSchedule += col.CostSchedule;
                                item.CostDriver += col.CostDriver;
                                item.CostStation += col.CostStation;
                                item.CostManual += col.CostManual;
                                item.CostManualQuantity += col.CostManualQuantity;
                                item.CostManualUnitPrice += col.CostManualUnitPrice;
                                item.CostManualNote = col.CostManualNote != null ? (col.CostManualNote.Trim() != "" ? item.CostManualNote + ", " + col.CostManualNote : col.IncomeManualNote) : item.CostManualNote;
                            }
                        }

                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeEx + item.IncomeTrouble;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                        if (lstStatusID.Count(c => c == 3) == lstStatusID.Count)
                            item.PODStatus = sPODStatusComplete;
                        else if (lstStatusID.Count(c => c >= 2) > 0)
                            item.PODStatus = sPODStatusPart;

                        item.CostLoadVendorCode = string.Join(", ", lstVendorCodeLoad.Distinct().ToList());
                        item.CostLoadVendorName = string.Join(", ", lstVendorNameLoad.Distinct().ToList());
                        item.CostUnLoadVendorCode = string.Join(", ", lstVendorCodeUnLoad.Distinct().ToList());
                        item.CostUnLoadVendorName = string.Join(", ", lstVendorNameUnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorCode = string.Join(", ", lstVendorCodeReturnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorName = string.Join(", ", lstVendorNameReturnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorCode = string.Join(", ", lstVendorCodeReturnUnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorName = string.Join(", ", lstVendorNameReturnUnLoad.Distinct().ToList());

                        if (lstHasCashCollect.Count(c => c == "x") > 0)
                        {
                            item.HasCashCollect = "x";
                        }

                        lstGroupProductID = lstGroupProductID.Distinct().ToList();
                        var queryDIProduct = lstDIProduct.Where(c => lstGroupProductID.Contains(c.DITOGroupProductID));
                        if (queryDIProduct.Count() > 0)
                        {
                            item.ProductCode = string.Join(",", queryDIProduct.Select(c => c.ProductCode).Distinct().ToList());
                            item.ProductName = string.Join(",", queryDIProduct.Select(c => c.ProductName).Distinct().ToList());
                            item.ProductDescription = queryDIProduct.FirstOrDefault().ProductDescription;
                        }

                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.ListData.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPTRPL_ColumnDetail REPDIPL_ColumnDetailGroupStockData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                #endregion

                DateTime? dtNull = null;

                var result = new DTOREPTRPL_ColumnDetail();
                result.ListData = new List<DTOREPTRPL_Detail>();
                result.ListColumn = new List<DTOREPTRPL_ColumnDetail_Group>();
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    //LTL
                    var lstData = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                        TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                        KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,
                        DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                        StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                        StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                        StockNote = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                        StockNote1 = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                        PartnerID = c.ORD_GroupProduct.PartnerID,
                        PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                        PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                        LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                        LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : "",
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : "",

                        Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                        GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                        OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                        OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                        OPSDateConfig = c.DITOMasterID.HasValue && c.OPS_DITOMaster.DateConfig.HasValue ? c.OPS_DITOMaster.DateConfig : dtNull,
                        OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                        OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                        AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        VehicleID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID : -1,
                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                        VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                        OrderCreatedBy = c.ORD_GroupProduct.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                        ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        //OPSGroupNote1 = c.Note1,
                        //OPSGroupNote2 = c.Note2,

                        ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                        ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                        MaxWeightCal = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                    }).Distinct().ToList();

                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                        //TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,

                        DITOGroupProductID = c.ID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : "",
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : "",
                        DateDN = c.DateDN,
                        CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                        StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                        StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                        InvoiceDate = c.InvoiceDate,
                        InvoiceReturnDate = c.InvoiceReturnDate,
                        InvoiceNote = c.InvoiceNote,
                        InvoiceReturnNote = c.InvoiceReturnNote,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        OPSGroupNote1 = c.Note1,
                        OPSGroupNote2 = c.Note2,

                        //TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        //TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                        FINSort = c.FINSort,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,
                        IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                        IsHasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? true : false) : false,

                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,
                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,
                        OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                    }).ToList();

                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => data.Filter.ListCusID.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    var lstDIProduct = model.OPS_DITOProduct.Where(c => data.ListDITOGroupProductID.Contains(c.DITOGroupProductID)).Select(c => new
                    {
                        DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID,
                        GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                        LocationToID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationID,
                        OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                        DITOGroupProductID = c.DITOGroupProductID,
                        ProductCode = c.ORD_Product.CUS_Product.Code,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                        ProductDescription = c.ORD_Product.CUS_Product.Description,
                    }).Distinct().ToList();

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            DITOGroupProductID = c.GroupOfProductID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.FIN_PLDetails.Note,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                        }).ToList();

                    //Other
                    var lstFINOther = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Detail
                        {
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.DITOMasterID.Value : 0,
                            DITOGroupProductID = c.GroupOfProductID,

                            IncomeEx = c.FIN_PLDetails.Credit,
                            CostEx = c.FIN_PLDetails.Debit,
                        }).ToList();

                    lstFINOther.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Detail
                        {
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.DITOMasterID.Value : 0,
                            DITOGroupProductID = c.GroupOfProductID,

                            CostEx = c.FIN_PLDetails.Debit,
                            IncomeEx = c.FIN_PLDetails.Credit,
                        }).ToList());

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductName, c.GroupOfProductCode, c.StockID, c.StockCode }).Distinct().ToList();

                    var lstMasterID = lstDIGroupProduct.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = lstDIGroupProduct.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    foreach (var itemData in lstData)
                    {
                        DTOREPTRPL_Detail item = new DTOREPTRPL_Detail
                        {
                            DITOMasterID = itemData.DITOMasterID,
                            TOMasterCode = itemData.TOMasterCode,
                            TotalLocation = itemData.TotalLocation,

                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            StockID = itemData.StockID,
                            StockCode = itemData.StockCode,
                            StockName = itemData.StockName,
                            StockAddress = itemData.StockAddress,
                            StockNote = itemData.StockNote,
                            StockNote1 = itemData.StockNote1,

                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            PartnerCodeName = itemData.PartnerCode + "-" + itemData.PartnerName,

                            LocationToID = itemData.LocationToID,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            LocationToNote = itemData.LocationToNote,
                            LocationToNote1 = itemData.LocationToNote1,
                            LocationToCode = itemData.LocationToCode,
                            LocationToName = itemData.LocationToName,

                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,

                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,
                            GroupOfVehicleCodeVEN = itemData.GroupOfVehicleCodeVEN,
                            GroupOfVehicleNameVEN = itemData.GroupOfVehicleNameVEN,

                            VehicleID = itemData.VehicleID,
                            VehicleCode = itemData.VehicleCode,
                            VendorID = itemData.VendorID,
                            VendorCode = itemData.VendorCode,
                            VendorName = itemData.VendorName,
                            VendorShortName = itemData.VendorShortName,

                            DriverName = itemData.DriverName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            TransportModeIncome = itemData.TransportModeIncome,
                            TransportModeCost = itemData.TransportModeCost,

                            OrderDateConfig = itemData.OrderDateConfig,
                            OrderContract = itemData.OrderContract,
                            OrderRouting = itemData.OrderRouting,
                            OPSDateConfig = itemData.OPSDateConfig,
                            OPSContract = itemData.OPSContract,
                            OPSRouting = itemData.OPSRouting,
                            AreaToCodeCredit = itemData.AreaToCodeCredit,
                            AreaToNameCredit = itemData.AreaToNameCredit,
                            OrderCreatedBy = itemData.OrderCreatedBy,
                            OrderCreatedDate = itemData.OrderCreatedDate,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,

                            TOMasterNote1 = itemData.TOMasterNote1,
                            TOMasterNote2 = itemData.TOMasterNote2,

                            //OPSGroupNote1 = itemData.OPSGroupNote1,
                            //OPSGroupNote2 = itemData.OPSGroupNote2,

                            ORDGroupNote1 = itemData.ORDGroupNote1,
                            ORDGroupNote2 = itemData.ORDGroupNote2,
                            HasCashCollect = "",

                            MaxWeightCal = itemData.MaxWeightCal,
                            RegWeight = itemData.RegWeight,
                            RegCapacity = itemData.RegCapacity,

                            ETA = itemData.ETA,
                            ETD = itemData.ETD,
                            ATA = itemData.ATA,
                            ATD = itemData.ATD,
                        };

                        result.ListData.Add(item);

                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        item.Income = item.IncomeLoad = item.IncomeUnLoad = item.IncomeReturn = item.IncomeReturnLoad = item.IncomeReturnLoad = item.IncomeEx =
                            item.Cost = item.CostLoad = item.CostUnLoad = item.CostReturn = item.CostReturnLoad = item.CostReturnUnLoad = item.CostEx = 0;

                        item.PODStatus = sPODStatusNotComplete;
                        List<int> lstStatusID = new List<int>();
                        List<string> lstVendorCodeLoad = new List<string>();
                        List<string> lstVendorNameLoad = new List<string>();
                        List<string> lstVendorCodeUnLoad = new List<string>();
                        List<string> lstVendorNameUnLoad = new List<string>();
                        List<string> lstVendorCodeReturnLoad = new List<string>();
                        List<string> lstVendorNameReturnLoad = new List<string>();
                        List<string> lstVendorCodeReturnUnLoad = new List<string>();
                        List<string> lstVendorNameReturnUnLoad = new List<string>();
                        List<string> lstHasCashCollect = new List<string>();
                        List<int> lstGroupProductID = new List<int>();

                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.DITOMasterID == item.DITOMasterID && c.OrderID == item.OrderID && c.StockID == itemGroup.StockID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.FINSort = first.FINSort;
                                    if (first.ETA != null)
                                        item.ETA = first.ETA;
                                    if (first.ETD != null)
                                        item.ETD = first.ETD;
                                    if (first.ATA != null)
                                        item.ATA = first.ATA;
                                    if (first.ATD != null)
                                        item.ATD = first.ATD;

                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.OPSGroupNote1 = first.OPSGroupNote1;
                                    item.OPSGroupNote2 = first.OPSGroupNote2;

                                    item.DNCode = first.DNCode;
                                    item.SOCode = first.SOCode;
                                    item.DateDN = first.DateDN;
                                    item.SortConfigOrder = first.SortConfigOrder;
                                    item.SortConfigMaster = first.SortConfigMaster;
                                    item.OrderContractID = first.OrderContractID;
                                    item.OPSContractID = first.OrderContractID;
                                    item.OrderGroupProductDateConfig = first.OrderGroupProductDateConfig;
                                }
                                var lstDITOGroupProductID = queryDITOGroup.Select(c => c.DITOGroupProductID).ToList();
                                lstGroupProductID.AddRange(lstDITOGroupProductID);

                                var col = new DTOREPTRPL_ColumnDetail_Group();
                                col.TOMasterID = item.DITOMasterID;
                                col.OrderID = item.OrderID > 0 ? item.OrderID.Value : -1;
                                col.GroupOfProductID = itemGroup.GroupOfProductID != null ? itemGroup.GroupOfProductID.Value : 0;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.StockID = itemGroup.StockID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = itemData.LocationToProvince;
                                col.LocationToDistrict = itemData.LocationToDistrict;
                                col.KeyCode = itemGroup.StockCode + "-" + itemGroup.GroupOfProductCode;
                                col.PODStatusID = 1;

                                if (queryDITOGroup.Count(c => c.IsInvoice) > 0)
                                {
                                    col.PODStatusID = 2;
                                    if (queryDITOGroup.Count(c => c.IsInvoice) == queryDITOGroup.Count())
                                        col.PODStatusID = 3;
                                }
                                switch (col.PODStatusID)
                                {
                                    case 1: col.PODStatus = sPODStatusNotComplete; break;
                                    case 2: col.PODStatus = sPODStatusPart; break;
                                    case 3: col.PODStatus = sPODStatusComplete; break;
                                }
                                lstStatusID.Add(col.PODStatusID);

                                col.HasCashCollect = queryDITOGroup.Count(c => c.IsHasCashCollect) == queryDITOGroup.Count() ? "x" : "";
                                lstHasCashCollect.Add(col.HasCashCollect);

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryProduct = lstDIProduct.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                    col.ProductDescription = queryProduct.FirstOrDefault().ProductDescription;
                                }

                                var queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOFreightCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Income = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturn = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnLoad = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.ManualFixCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeManual = queryFIN.Sum(c => c.Credit);
                                    col.IncomeManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOFreightDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Cost = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturn = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.ManualFixDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostManual = queryFIN.Sum(c => c.Debit);
                                    col.CostManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.TroubleCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeTrouble += queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.TroubleDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostTrouble += queryFIN.Sum(c => c.Debit);
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOExCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeEx += queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOExDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostEx += queryFIN.Sum(c => c.Debit);
                                }

                                var queryFINOther = lstFINOther.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID));
                                if (queryFINOther.Count() > 0)
                                {
                                    col.IncomeEx += queryFINOther.Sum(c => c.IncomeEx);
                                    col.CostEx += queryFINOther.Sum(c => c.CostEx);
                                }

                                // Xe nhà
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.FLMDepreciation);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDepreciation += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.FLMScheduleFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostSchedule += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.FLMDriverFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDriver += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.StationDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostStation += queryFIN.Sum(c => c.Debit);
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;

                                item.Income += col.Income;
                                item.IncomeLoad += col.IncomeLoad;
                                item.IncomeUnLoad += col.IncomeUnLoad;
                                item.IncomeReturn += col.IncomeReturn;
                                item.IncomeReturnLoad += col.IncomeReturnLoad;
                                item.IncomeReturnUnLoad += col.IncomeReturnUnLoad;
                                item.IncomeEx += col.IncomeEx;
                                item.IncomeTrouble += col.IncomeTrouble;
                                item.IncomeManual += col.IncomeManual;

                                item.Cost += col.Cost;
                                item.CostLoad += col.CostLoad;
                                item.CostUnLoad += col.CostUnLoad;
                                item.CostReturn += col.CostReturn;
                                item.CostReturnLoad += col.CostReturnLoad;
                                item.CostReturnUnLoad += col.CostReturnUnLoad;
                                item.CostManual += col.CostManual;
                                item.CostEx += col.CostEx;
                                item.CostTrouble += col.CostTrouble;
                                item.CostDepreciation += col.CostDepreciation;
                                item.CostSchedule += col.CostSchedule;
                                item.CostDriver += col.CostDriver;
                                item.CostStation += col.CostStation;

                            }
                        }

                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeEx + item.IncomeTrouble + item.IncomeManual;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostManual + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;

                        if (lstStatusID.Count(c => c == 3) == lstStatusID.Count)
                            item.PODStatus = sPODStatusComplete;
                        else if (lstStatusID.Count(c => c >= 2) > 0)
                            item.PODStatus = sPODStatusPart;

                        item.CostLoadVendorCode = string.Join(", ", lstVendorCodeLoad.Distinct().ToList());
                        item.CostLoadVendorName = string.Join(", ", lstVendorNameLoad.Distinct().ToList());
                        item.CostUnLoadVendorCode = string.Join(", ", lstVendorCodeUnLoad.Distinct().ToList());
                        item.CostUnLoadVendorName = string.Join(", ", lstVendorNameUnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorCode = string.Join(", ", lstVendorCodeReturnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorName = string.Join(", ", lstVendorNameReturnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorCode = string.Join(", ", lstVendorCodeReturnUnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorName = string.Join(", ", lstVendorNameReturnUnLoad.Distinct().ToList());

                        if (lstHasCashCollect.Count(c => c == "x") > 0)
                        {
                            item.HasCashCollect = "x";
                        }

                        lstGroupProductID = lstGroupProductID.Distinct().ToList();
                        var queryDIProduct = lstDIProduct.Where(c => lstGroupProductID.Contains(c.DITOGroupProductID));
                        if (queryDIProduct.Count() > 0)
                        {
                            item.ProductCode = string.Join(",", queryDIProduct.Select(c => c.ProductCode).Distinct().ToList());
                            item.ProductName = string.Join(",", queryDIProduct.Select(c => c.ProductName).Distinct().ToList());
                            item.ProductDescription = queryDIProduct.FirstOrDefault().ProductDescription;
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.ListData.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPTRPL_ColumnDetail REPDIPL_ColumnDetailMOQData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExCredit);
                lstNoGroupCredit.Add((int)CATCostType.ManualFixCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExDebit);
                lstNoGroupDebit.Add((int)CATCostType.ManualFixDebit);
                #endregion

                DateTime? dtNull = null;
                var result = new DTOREPTRPL_ColumnDetail();
                result.ListColumnMOQ = new List<DTOREPTRPL_ColumnDetail_MOQ>();
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    result.ListData = new List<DTOREPTRPL_Detail>();

                    result.ListData.AddRange(model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new DTOREPTRPL_Detail
                    {
                        DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                        DITOGroupProductID = c.ID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderGroupProductID = c.OrderGroupProductID.Value,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,
                        DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                        StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                        StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                        StockNote = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                        StockNote1 = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                        PartnerID = c.ORD_GroupProduct.PartnerID,
                        PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                        PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                        Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                        LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                        LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : "",
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : "",

                        DateDN = c.DateDN,
                        GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                        CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        lstProductCode = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                        lstProductName = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                        ProductDescription = c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description : "",
                        FINSort = c.FINSort,

                        OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.ContractNo : string.Empty,
                        OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID.HasValue ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.RoutingName : string.Empty,
                        OrderGroupProductRouting = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                        OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID.HasValue ? c.OPS_DITOMaster.CAT_Contract.ContractNo : string.Empty,
                        OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID.HasValue ? c.OPS_DITOMaster.CAT_Routing.RoutingName : string.Empty,
                        OPSGroupProductRouting = c.CATRoutingID.HasValue ? c.CAT_Routing.RoutingName : string.Empty,
                        AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                        TonOrder = c.ORD_GroupProduct.Ton,
                        CBMOrder = c.ORD_GroupProduct.CBM,
                        QuantityOrder = c.ORD_GroupProduct.Quantity,

                        KgOrder = c.ORD_GroupProduct.Ton * 1000,

                        OrderCreatedBy = c.ORD_GroupProduct.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,

                        KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,

                        DateFromCome = c.DateFromCome,
                        DateFromLeave = c.DateFromLeave,
                        DateFromLoadStart = c.DateFromLoadStart,
                        DateFromLoadEnd = c.DateFromLoadEnd,
                        DateToCome = c.DateToCome,
                        DateToLeave = c.DateToLeave,
                        DateToLoadStart = c.DateToLoadStart,
                        DateToLoadEnd = c.DateToLoadEnd,
                        InvoiceDate = c.InvoiceDate,
                        InvoiceNote = c.InvoiceNote,
                        InvoiceReturnDate = c.InvoiceReturnDate,
                        InvoiceReturnNote = c.InvoiceReturnNote,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                        VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                        ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        OPSGroupNote1 = c.Note1,
                        OPSGroupNote2 = c.Note2,

                        ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                        ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                        PODStatus = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,
                        HasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? "x" : "") : "",

                        MaxWeightCal = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                        OPSDateConfig = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DateConfig : null,
                        OPSGroupProductDateConfig = c.DateConfig,
                        OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,
                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,
                    }).ToList());

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            DITOGroupProductID = c.GroupOfProductID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.PLDetailID,
                            c.FIN_PLDetails.TypeOfPriceDIExCode,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                            Note = c.FIN_PLDetails.Note,
                        }).ToList();

                    //Other
                    var lstFINOther = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order_Other
                        {
                            DITOGroupProductID = c.GroupOfProductID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            KeyCode = c.FIN_PLDetails.TypeOfPriceDIExCode,

                            CostID = c.FIN_PLDetails.CostID,
                            Quantity = c.FIN_PLDetails.Quantity.HasValue ? c.FIN_PLDetails.Quantity.Value : 0,
                            UnitPrice = c.FIN_PLDetails.UnitPrice.HasValue ? c.FIN_PLDetails.UnitPrice.Value : 0,
                            Price = c.FIN_PLDetails.Credit,
                            Note = c.FIN_PLDetails.Note
                        }).ToList();

                    lstFINOther.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order_Other
                        {
                            DITOGroupProductID = c.GroupOfProductID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            KeyCode = c.FIN_PLDetails.TypeOfPriceDIExCode,

                            CostID = c.FIN_PLDetails.CostID,
                            Quantity = c.FIN_PLDetails.Quantity.HasValue ? c.FIN_PLDetails.Quantity.Value : 0,
                            UnitPrice = c.FIN_PLDetails.UnitPrice.HasValue ? c.FIN_PLDetails.UnitPrice.Value : 0,
                            Price = c.FIN_PLDetails.Debit,
                            Note = c.FIN_PLDetails.Note
                        }).ToList());

                    var lstMasterID = result.ListData.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = result.ListData.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    foreach (var item in result.ListData)
                    {
                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.ProductCode = string.Join(",", item.lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(",", item.lstProductName.Distinct().ToList());
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        if (item.DITOMasterID > 0)
                        {
                            item.ScheduleTonTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.TonTranfer);
                            item.ScheduleCBMTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.CBMTranfer);
                            item.ScheduleQuantityTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.QuantityTranfer);
                        }

                        var queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOFreightCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                            item.Income = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeUnLoad = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOLoadCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeLoad = queryFIN.Sum(c => c.Credit);
                        }

                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOReturnCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeReturnQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeReturn = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeReturnUnLoad = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeReturnLoad = queryFIN.Sum(c => c.Credit);
                        }

                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOFreightDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostQuantity = queryFIN.Sum(c => c.Quantity);
                            item.Cost = queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostUnLoad = queryFIN.Sum(c => c.Debit);
                            item.CostUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }
                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOLoadDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostLoad = queryFIN.Sum(c => c.Debit);
                            item.CostLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }

                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOReturnDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostReturnQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostReturn = queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostReturnUnLoad = queryFIN.Sum(c => c.Debit);
                            item.CostReturnUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostReturnUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostReturnLoad = queryFIN.Sum(c => c.Debit);
                            item.CostReturnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostReturnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }

                        // Xe nhà
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.FLMDepreciation);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostDepreciation += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.FLMScheduleFee);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostSchedule += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.FLMDriverFee);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostDriver += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.StationDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostStation += queryFIN.Sum(c => c.Debit);
                        }

                        // List MOQ
                        decimal incomeEx = 0;
                        decimal costEx = 0;
                        var queryGroupFINOtherInCome = lstFINOther.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && lstNoGroupCredit.Contains(c.CostID)).GroupBy(c => new { c.CostID, c.KeyCode });
                        if (queryGroupFINOtherInCome.Count() > 0)
                        {
                            foreach (var itemGroupFINOther in queryGroupFINOtherInCome)
                            {
                                DTOREPTRPL_ColumnDetail_MOQ itemColumnMOQ = new DTOREPTRPL_ColumnDetail_MOQ();
                                itemColumnMOQ.KeyCode = itemGroupFINOther.Key.KeyCode;
                                itemColumnMOQ.IncomeUnitPrice = itemGroupFINOther.Sum(c => c.UnitPrice) / (decimal)itemGroupFINOther.Count();
                                itemColumnMOQ.IncomeQuantity = itemGroupFINOther.Sum(c => c.Quantity);
                                itemColumnMOQ.Income = itemGroupFINOther.Sum(c => c.Price);
                                itemColumnMOQ.DITOGroupProductID = item.DITOGroupProductID;
                                itemColumnMOQ.Note += string.Join(", ", itemGroupFINOther.Select(c => c.Note).Distinct().ToList());
                                result.ListColumnMOQ.Add(itemColumnMOQ);

                                incomeEx += itemColumnMOQ.Income;
                            }
                        }

                        var queryGroupFINOtherCost = lstFINOther.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && lstNoGroupDebit.Contains(c.CostID)).GroupBy(c => new { c.CostID, c.KeyCode });
                        if (queryGroupFINOtherCost.Count() > 0)
                        {
                            foreach (var itemGroupFINOther in queryGroupFINOtherCost)
                            {
                                var itemColumnMOQ = result.ListColumnMOQ.FirstOrDefault(c => c.KeyCode == itemGroupFINOther.Key.KeyCode && c.DITOGroupProductID == item.DITOGroupProductID);
                                if (itemColumnMOQ == null)
                                {
                                    itemColumnMOQ = new DTOREPTRPL_ColumnDetail_MOQ();
                                    itemColumnMOQ.KeyCode = itemGroupFINOther.Key.KeyCode;
                                    itemColumnMOQ.DITOGroupProductID = item.DITOGroupProductID;
                                    result.ListColumnMOQ.Add(itemColumnMOQ);
                                }
                                itemColumnMOQ.CostUnitPrice = itemGroupFINOther.Sum(c => c.UnitPrice) / (decimal)itemGroupFINOther.Count();
                                itemColumnMOQ.CostQuantity = itemGroupFINOther.Sum(c => c.Quantity);
                                itemColumnMOQ.Cost = itemGroupFINOther.Sum(c => c.Price);
                                itemColumnMOQ.Note += !string.IsNullOrEmpty(itemColumnMOQ.Note) ? " , " + string.Join(", ", itemGroupFINOther.Select(c => c.Note).Distinct().ToList()) : string.Join(", ", itemGroupFINOther.Select(c => c.Note).Distinct().ToList());

                                costEx += itemColumnMOQ.Cost;
                            }
                        }

                        decimal incomeTrouble = 0;
                        decimal costTrouble = 0;
                        // Trouble
                        var queryTrouble = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.TroubleCredit).GroupBy(c => new { c.CostID, c.TypeOfPriceDIExCode });
                        if (queryTrouble != null && queryTrouble.Count() > 0)
                        {
                            foreach (var itemTrouble in queryTrouble)
                            {
                                DTOREPTRPL_ColumnDetail_MOQ itemColumnMOQ = new DTOREPTRPL_ColumnDetail_MOQ();
                                itemColumnMOQ.KeyCode = "Trouble-" + itemTrouble.Key.TypeOfPriceDIExCode;
                                itemColumnMOQ.Income = itemTrouble.Sum(c => c.Credit);
                                itemColumnMOQ.DITOGroupProductID = item.DITOGroupProductID;
                                itemColumnMOQ.Note = string.Join(", ", itemTrouble.Select(c => c.Note).Distinct().ToList());
                                result.ListColumnMOQ.Add(itemColumnMOQ);
                                incomeTrouble += itemColumnMOQ.Income;
                            }
                        }

                        queryTrouble = lstFIN.Where(c => c.DITOGroupProductID == item.DITOGroupProductID && c.CostID == (int)CATCostType.TroubleDebit).GroupBy(c => new { c.CostID, c.TypeOfPriceDIExCode });
                        if (queryTrouble != null && queryTrouble.Count() > 0)
                        {
                            foreach (var itemTrouble in queryTrouble)
                            {
                                var itemColumnMOQ = result.ListColumnMOQ.FirstOrDefault(c => c.KeyCode == "Trouble-" + itemTrouble.Key.TypeOfPriceDIExCode && c.DITOGroupProductID == item.DITOGroupProductID);
                                if (itemColumnMOQ == null)
                                {
                                    itemColumnMOQ = new DTOREPTRPL_ColumnDetail_MOQ();
                                    itemColumnMOQ.KeyCode = "Trouble-" + itemTrouble.Key.TypeOfPriceDIExCode;
                                    itemColumnMOQ.DITOGroupProductID = item.DITOGroupProductID;
                                    result.ListColumnMOQ.Add(itemColumnMOQ);
                                }
                                itemColumnMOQ.Cost = itemTrouble.Sum(c => c.Debit);
                                itemColumnMOQ.Note = !string.IsNullOrEmpty(itemColumnMOQ.Note) ? " , " + string.Join(", ", itemTrouble.Select(c => c.Note).Distinct().ToList()) : string.Join(", ", itemTrouble.Select(c => c.Note).Distinct().ToList());

                                costTrouble += itemColumnMOQ.Cost;
                            }
                        }
                        item.IncomeTrouble = incomeTrouble;
                        item.CostTrouble = costTrouble;
                        item.IncomeEx = incomeEx;
                        item.CostEx = costEx;
                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeTrouble + item.IncomeEx;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;

                        item.TotalPL = item.TotalIncome - item.TotalCost;
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.ListData.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPTRPL_ColumnDetail REPDIPL_ColumnDetailGroupProductData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                #endregion

                DateTime? dtNull = null;

                var result = new DTOREPTRPL_ColumnDetail();
                result.ListData = new List<DTOREPTRPL_Detail>();
                result.ListColumn = new List<DTOREPTRPL_ColumnDetail_Group>();
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    //LTL
                    var lstData = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,

                        KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,
                        DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                        PartnerID = c.ORD_GroupProduct.PartnerID,
                        PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                        PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                        LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                        LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : "",
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : "",

                        Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                        GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                        OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.ContractNo : string.Empty,
                        OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID.HasValue ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.RoutingName : string.Empty,
                        OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID.HasValue ? c.OPS_DITOMaster.CAT_Contract.ContractNo : string.Empty,
                        OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID.HasValue ? c.OPS_DITOMaster.CAT_Routing.RoutingName : string.Empty,
                        OPSDateConfig = c.DITOMasterID.HasValue && c.OPS_DITOMaster.DateConfig.HasValue ? c.OPS_DITOMaster.DateConfig : dtNull,
                        AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        VehicleID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID : -1,
                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                        VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                        OrderCreatedBy = c.ORD_GroupProduct.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                        ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        //OPSGroupNote1 = c.Note1,
                        //OPSGroupNote2 = c.Note2,

                        ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                        ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                        MaxWeightCal = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                    }).Distinct().ToList();

                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new DTOREPTRPL_Detail
                    {
                        DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : 0,
                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                        DITOGroupProductID = c.ID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : "",
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : "",
                        LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                        LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",

                        DateDN = c.DateDN,
                        CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                        StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                        StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                        StockNote = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                        StockNote1 = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                        IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                        IsHasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? true : false) : false,

                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,
                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,
                        OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                    }).ToList();

                    var lstDIProduct = model.OPS_DITOProduct.Where(c => data.ListDITOGroupProductID.Contains(c.DITOGroupProductID)).Select(c => new
                    {
                        ProductCode = c.ORD_Product.CUS_Product.Code,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                        c.DITOGroupProductID,
                        ProductDescription = c.ORD_Product.CUS_Product.Description,
                    }).Distinct().ToList();

                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => data.Filter.ListCusID.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            DITOGroupProductID = c.GroupOfProductID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.FIN_PLDetails.Note,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                        }).ToList();

                    //Other
                    var lstFINOther = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Detail
                        {
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.DITOMasterID.Value : 0,
                            DITOGroupProductID = c.GroupOfProductID,

                            IncomeEx = c.FIN_PLDetails.Credit,
                            CostEx = c.FIN_PLDetails.Debit,
                        }).ToList();

                    lstFINOther.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Detail
                        {
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.DITOMasterID.Value : 0,
                            DITOGroupProductID = c.GroupOfProductID,

                            CostEx = c.FIN_PLDetails.Debit,
                            IncomeEx = c.FIN_PLDetails.Credit,
                        }).ToList());

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductCode, c.GroupOfProductName }).Distinct().ToList();

                    var lstMasterID = lstDIGroupProduct.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = lstDIGroupProduct.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    foreach (var itemData in lstData)
                    {
                        DTOREPTRPL_Detail item = new DTOREPTRPL_Detail
                        {
                            DITOMasterID = itemData.DITOMasterID,
                            TOMasterCode = itemData.TOMasterCode,
                            TotalLocation = itemData.TotalLocation,

                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            PartnerCodeName = itemData.PartnerCode + "-" + itemData.PartnerName,

                            LocationToID = itemData.LocationToID,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            LocationToNote = itemData.LocationToNote,
                            LocationToNote1 = itemData.LocationToNote1,
                            LocationToCode = itemData.LocationToCode,
                            LocationToName = itemData.LocationToName,

                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,

                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,
                            GroupOfVehicleCodeVEN = itemData.GroupOfVehicleCodeVEN,
                            GroupOfVehicleNameVEN = itemData.GroupOfVehicleNameVEN,

                            VehicleID = itemData.VehicleID,
                            VehicleCode = itemData.VehicleCode,
                            VendorID = itemData.VendorID,
                            VendorCode = itemData.VendorCode,
                            VendorName = itemData.VendorName,
                            VendorShortName = itemData.VendorShortName,

                            DriverName = itemData.DriverName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            TransportModeIncome = itemData.TransportModeIncome,
                            TransportModeCost = itemData.TransportModeCost,

                            OrderDateConfig = itemData.OrderDateConfig,
                            OrderContract = itemData.OrderContract,
                            OrderRouting = itemData.OrderRouting,
                            OPSDateConfig = itemData.OPSDateConfig,
                            OPSContract = itemData.OPSContract,
                            OPSRouting = itemData.OPSRouting,
                            AreaToCodeCredit = itemData.AreaToCodeCredit,
                            AreaToNameCredit = itemData.AreaToNameCredit,
                            OrderCreatedBy = itemData.OrderCreatedBy,
                            OrderCreatedDate = itemData.OrderCreatedDate,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,

                            TOMasterNote1 = itemData.TOMasterNote1,
                            TOMasterNote2 = itemData.TOMasterNote2,
                            HasCashCollect = "",

                            //OPSGroupNote1 = itemData.OPSGroupNote1,
                            //OPSGroupNote2 = itemData.OPSGroupNote2,

                            ORDGroupNote1 = itemData.ORDGroupNote1,
                            ORDGroupNote2 = itemData.ORDGroupNote2,

                            MaxWeightCal = itemData.MaxWeightCal,
                            RegWeight = itemData.RegWeight,
                            RegCapacity = itemData.RegCapacity,

                            ETA = itemData.ETA,
                            ETD = itemData.ETD,
                            ATA = itemData.ATA,
                            ATD = itemData.ATD,
                        };

                        result.ListData.Add(item);

                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        item.Income = item.IncomeLoad = item.IncomeUnLoad = item.IncomeReturn = item.IncomeReturnLoad = item.IncomeReturnLoad = item.IncomeEx =
                            item.Cost = item.CostLoad = item.CostUnLoad = item.CostReturn = item.CostReturnLoad = item.CostReturnUnLoad = item.CostEx =
                            item.IncomeManual = item.IncomeManualUnitPrice = 0;

                        item.PODStatus = sPODStatusNotComplete;
                        List<int> lstStatusID = new List<int>();
                        List<string> lstVendorCodeLoad = new List<string>();
                        List<string> lstVendorNameLoad = new List<string>();
                        List<string> lstVendorCodeUnLoad = new List<string>();
                        List<string> lstVendorNameUnLoad = new List<string>();
                        List<string> lstVendorCodeReturnLoad = new List<string>();
                        List<string> lstVendorNameReturnLoad = new List<string>();
                        List<string> lstVendorCodeReturnUnLoad = new List<string>();
                        List<string> lstVendorNameReturnUnLoad = new List<string>();
                        List<string> lstHasCashCollect = new List<string>();
                        List<int> lstGroupProductID = new List<int>();

                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.DITOMasterID == item.DITOMasterID && c.OrderID == item.OrderID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.FINSort = first.FINSort;
                                    if (first.ETA != null)
                                        item.ETA = first.ETA;
                                    if (first.ETD != null)
                                        item.ETD = first.ETD;
                                    if (first.ATA != null)
                                        item.ATA = first.ATA;
                                    if (first.ATD != null)
                                        item.ATD = first.ATD;

                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.OPSGroupNote1 = first.OPSGroupNote1;
                                    item.OPSGroupNote2 = first.OPSGroupNote2;

                                    item.DNCode = first.DNCode;
                                    item.SOCode = first.SOCode;
                                    item.DateDN = first.DateDN;
                                    item.StockCode = first.StockCode;
                                    item.StockName = first.StockName;
                                    item.StockAddress = first.StockAddress;
                                    item.StockNote = first.StockNote;
                                    item.StockNote1 = first.StockNote1;
                                    item.SortConfigOrder = first.SortConfigOrder;
                                    item.SortConfigMaster = first.SortConfigMaster;
                                    item.OrderContractID = first.OrderContractID;
                                    item.OPSContractID = first.OrderContractID;
                                    item.OrderGroupProductDateConfig = first.OrderGroupProductDateConfig;
                                }
                                var lstDITOGroupID = queryDITOGroup.Select(c => c.DITOGroupProductID).Distinct().ToList();
                                lstGroupProductID.AddRange(lstDITOGroupID);

                                var col = new DTOREPTRPL_ColumnDetail_Group();
                                col.TOMasterID = item.DITOMasterID;
                                col.OrderID = item.OrderID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.GroupOfProductID = itemGroup.GroupOfProductID.Value;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.KeyCode = itemGroup.GroupOfProductCode;
                                col.PODStatusID = 1;

                                if (queryDITOGroup.Count(c => c.IsInvoice) > 0)
                                {
                                    col.PODStatusID = 2;
                                    if (queryDITOGroup.Count(c => c.IsInvoice) == queryDITOGroup.Count())
                                        col.PODStatusID = 3;
                                }
                                switch (col.PODStatusID)
                                {
                                    case 1: col.PODStatus = sPODStatusNotComplete; break;
                                    case 2: col.PODStatus = sPODStatusPart; break;
                                    case 3: col.PODStatus = sPODStatusComplete; break;
                                }
                                lstStatusID.Add(col.PODStatusID);

                                col.HasCashCollect = queryDITOGroup.Count(c => c.IsHasCashCollect) == queryDITOGroup.Count() ? "x" : "";
                                lstHasCashCollect.Add(col.HasCashCollect);

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryDITOProduct = lstDIProduct.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID));
                                if (queryDITOProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryDITOProduct.Select(c => c.ProductCode).Distinct().ToArray());
                                    col.ProductName = string.Join(",", queryDITOProduct.Select(c => c.ProductName).Distinct().ToArray());
                                    col.ProductDescription = queryDITOProduct.FirstOrDefault().ProductDescription;
                                }

                                var queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOFreightCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Income = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeLoad = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturn = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnLoad = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.ManualFixCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeManual = queryFIN.Sum(c => c.Credit);
                                    col.IncomeManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOExCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeEx += queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOFreightDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Cost = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturn = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.ManualFixDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostManual = queryFIN.Sum(c => c.Debit);
                                    col.CostManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.DITOExDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostEx += queryFIN.Sum(c => c.Debit);
                                }

                                var queryFINOther = lstFINOther.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID));
                                if (queryFINOther.Count() > 0)
                                {
                                    col.IncomeEx += queryFINOther.Sum(c => c.IncomeEx);
                                    col.CostEx += queryFINOther.Sum(c => c.CostEx);
                                }

                                var lstTrouble = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.TroubleCredit);
                                if (lstTrouble != null && lstTrouble.Count() > 0)
                                {
                                    col.IncomeTrouble = lstTrouble.Sum(c => c.Credit);
                                }

                                lstTrouble = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.TroubleDebit);
                                if (lstTrouble != null && lstTrouble.Count() > 0)
                                {
                                    col.CostTrouble = lstTrouble.Sum(c => c.Debit);
                                }

                                // Xe nhà
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.FLMDepreciation);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDepreciation += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.FLMScheduleFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostSchedule += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.FLMDriverFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDriver += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstDITOGroupID.Contains(c.DITOGroupProductID) && c.CostID == (int)CATCostType.StationDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostStation += queryFIN.Sum(c => c.Debit);
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;

                                item.Income += col.Income;
                                item.IncomeLoad += col.IncomeLoad;
                                item.IncomeUnLoad += col.IncomeUnLoad;
                                item.IncomeReturn += col.IncomeReturn;
                                item.IncomeReturnLoad += col.IncomeReturnLoad;
                                item.IncomeReturnUnLoad += col.IncomeReturnUnLoad;
                                item.IncomeEx += col.IncomeEx;
                                item.IncomeTrouble += col.IncomeTrouble;
                                item.IncomeManual += col.IncomeManual;
                                item.IncomeManualQuantity += col.IncomeManualQuantity;
                                item.IncomeManualUnitPrice += col.IncomeManualUnitPrice;
                                item.IncomeManualNote = col.IncomeManualNote != null ? (col.IncomeManualNote.Trim() != "" ? item.IncomeManualNote + ", " + col.IncomeManualNote : col.IncomeManualNote) : item.IncomeManualNote;

                                item.Cost += col.Cost;
                                item.CostLoad += col.CostLoad;
                                item.CostUnLoad += col.CostUnLoad;
                                item.CostReturn += col.CostReturn;
                                item.CostReturnLoad += col.CostReturnLoad;
                                item.CostReturnUnLoad += col.CostReturnUnLoad;
                                item.CostEx += col.CostEx;
                                item.CostTrouble += col.CostTrouble;
                                item.CostDepreciation += col.CostDepreciation;
                                item.CostSchedule += col.CostSchedule;
                                item.CostDriver += col.CostDriver;
                                item.CostStation += col.CostStation;
                                item.CostManual += col.CostManual;
                                item.CostManualQuantity += col.CostManualQuantity;
                                item.CostManualUnitPrice += col.CostManualUnitPrice;
                                item.CostManualNote = col.CostManualNote != null ? (col.CostManualNote.Trim() != "" ? item.CostManualNote + ", " + col.CostManualNote : col.CostManualNote) : item.CostManualNote;
                            }
                        }

                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeEx + item.IncomeTrouble + item.IncomeManual;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostManual + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;

                        if (lstStatusID.Count(c => c == 3) == lstStatusID.Count)
                            item.PODStatus = sPODStatusComplete;
                        else if (lstStatusID.Count(c => c >= 2) > 0)
                            item.PODStatus = sPODStatusPart;

                        item.CostLoadVendorCode = string.Join(", ", lstVendorCodeLoad.Distinct().ToList());
                        item.CostLoadVendorName = string.Join(", ", lstVendorNameLoad.Distinct().ToList());
                        item.CostUnLoadVendorCode = string.Join(", ", lstVendorCodeUnLoad.Distinct().ToList());
                        item.CostUnLoadVendorName = string.Join(", ", lstVendorNameUnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorCode = string.Join(", ", lstVendorCodeReturnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorName = string.Join(", ", lstVendorNameReturnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorCode = string.Join(", ", lstVendorCodeReturnUnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorName = string.Join(", ", lstVendorNameReturnUnLoad.Distinct().ToList());

                        if (lstHasCashCollect.Count(c => c == "x") > 0)
                        {
                            item.HasCashCollect = "x";
                        }

                        lstGroupProductID = lstGroupProductID.Distinct().ToList();
                        var queryDIProduct = lstDIProduct.Where(c => lstGroupProductID.Contains(c.DITOGroupProductID));
                        if (queryDIProduct.Count() > 0)
                        {
                            item.ProductCode = string.Join(",", queryDIProduct.Select(c => c.ProductCode).Distinct().ToList());
                            item.ProductName = string.Join(",", queryDIProduct.Select(c => c.ProductName).Distinct().ToList());
                            item.ProductDescription = queryDIProduct.FirstOrDefault().ProductDescription;
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.ListData.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOREPTRPL_Order> REPDIPL_OrderData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.ManualFixCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.ManualFixDebit);
                #endregion

                var result = new List<DTOREPTRPL_Order>();

                DateTime? dtNull = null;
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    //LTL
                    result = model.ORD_GroupProduct.Where(c => data.ListOrderGroupProductID.Contains(c.ID)).Select(c => new DTOREPTRPL_Order
                    {
                        OrderID = c.OrderID,
                        OrderGroupProductID = c.ID,
                        OrderCode = c.ORD_Order.Code,
                        DNCode = c.DNCode,
                        SOCode = c.SOCode,
                        DateConfig = c.ORD_Order.DateConfig,
                        RequestDate = c.ORD_Order.RequestDate,
                        StockID = c.LocationFromID,
                        StockCode = c.LocationFromID > 0 ? c.CUS_Location.Code : "",
                        StockName = c.LocationFromID > 0 ? c.CUS_Location.LocationName : "",
                        StockAddress = c.LocationFromID > 0 ? c.CUS_Location.CAT_Location.Address : "",
                        PartnerID = c.PartnerID,
                        PartnerCode = c.PartnerID > 0 ? c.CUS_Partner.PartnerCode : "",
                        PartnerName = c.PartnerID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : "",
                        Address = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.Address : "",
                        LocationToProvince = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToCode = c.LocationToID > 0 ? c.CUS_Location1.Code : "",
                        LocationToName = c.LocationToID > 0 ? c.CUS_Location1.LocationName : "",
                        GroupOfLocationToCode = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                        CUSRoutingID = c.CUSRoutingID,
                        CUSRoutingCode = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.RoutingName : "",
                        GroupOfProductID = c.GroupOfProductID,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        ProductDescription = c.ORD_Product.FirstOrDefault().CUS_Product.Description,
                        GroupOfVehicleCode = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        FINSort = c.FINSort,
                        AreaToCodeCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        CustomerID = c.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Order.CUS_Customer.CustomerName : c.ORD_Order.CUS_Customer.ShortName,

                        TonOrder = c.Ton,
                        CBMOrder = c.CBM,
                        QuantityOrder = c.Quantity,

                        KgOrder = c.Ton * 1000,

                        OrderCreatedBy = c.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_Order.CreatedDate,

                        TransportModeIncome = c.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = string.Empty,

                        ExternalCode = c.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_Order.UserDefine2,

                        PODStatus = sPODStatusNotComplete,
                        HasCashCollect = "",

                        ORDGroupNote1 = c.Note1,
                        ORDGroupNote2 = c.Note2,

                        SortConfigOrder = c.ORD_Order.SortConfig,
                    }).ToList();

                    var lstDITOGroup = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderGroupProductID = c.OrderGroupProductID.Value,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,
                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        VehicleID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID : -1,
                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                        VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",
                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        InvoiceDate = c.InvoiceDate,
                        InvoiceNote = c.InvoiceNote,
                        InvoiceReturnDate = c.InvoiceReturnDate,
                        InvoiceReturnNote = c.InvoiceReturnNote,

                        IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                        IsHasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? true : false) : false,

                        OPSGroupNote1 = c.Note1,
                        OPSGroupNote2 = c.Note2,

                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,
                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,

                        OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                    }).ToList();

                    var lstORDProduct = model.ORD_Product.Where(c => data.ListOrderGroupProductID.Contains(c.GroupProductID)).Select(c => new
                    {
                        OrderGroupProductID = c.GroupProductID,
                        ProductCode = c.CUS_Product.Code,
                        ProductName = c.CUS_Product.ProductName,
                        ProductDescription = c.CUS_Product.Description,
                    }).ToList();

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.FIN_PLDetails.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.PLDetailID,
                            c.FIN_PLDetails.Note,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                            c.FIN_PLDetails.CAT_Cost.CostName,
                        }).ToList();

                    //Other
                    var lstFINOther = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order
                        {
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,

                            IncomeExQuantity = c.FIN_PLDetails.Quantity,
                            IncomeEx = c.FIN_PLDetails.Credit,
                            CostEx = c.FIN_PLDetails.Debit,
                            CostExQuantity = 0,
                            IncomeExCostName = c.FIN_PLDetails.CAT_Cost.CostName,
                        }).ToList();

                    lstFINOther.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order
                        {
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,

                            IncomeExQuantity = 0,
                            IncomeEx = c.FIN_PLDetails.Credit,
                            CostEx = c.FIN_PLDetails.Debit,
                            CostExQuantity = c.FIN_PLDetails.Quantity,
                            CostExCostName = c.FIN_PLDetails.CAT_Cost.CostName,
                        }).ToList());

                    var lstOrderID = lstDITOGroup.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    var lstMasterID = lstDITOGroup.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                        MaxWeightCal = c.VehicleID > 0 ? c.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = c.VehicleID > 0 ? c.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.VehicleID > 0 ? c.CAT_Vehicle.RegCapacity : null,
                    }).ToList();


                    foreach (var item in result)
                    {
                        List<string> lstIncomeExCostName = new List<string>();
                        List<string> lstCostExCostName = new List<string>();

                        var queryDITOGroup = lstDITOGroup.Where(c => c.OrderGroupProductID == item.OrderGroupProductID);
                        if (queryDITOGroup.Count() > 0)
                        {
                            var queryMasterID = queryDITOGroup.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                            var queryMaster = lstMaster.Where(c => queryMasterID.Contains(c.ID)).Select(c => new
                            {
                                ID = c.ID,
                                TotalLocation = c.TotalLocation,
                                TotalLocationDelivery = c.TotalLocationDelivery,
                                MaxWeightCal = c.MaxWeightCal,
                                RegWeight = c.RegWeight,
                                RegCapacity = c.RegCapacity,
                            }).FirstOrDefault();

                            item.MaxWeightCal = queryMaster != null ? queryMaster.MaxWeightCal : null;
                            item.RegWeight = queryMaster != null ? queryMaster.RegWeight : null;
                            item.RegCapacity = queryMaster != null ? queryMaster.RegCapacity : null;
                            item.TotalLocationMaster = queryMaster != null ? queryMaster.TotalLocation : 0;
                            item.TotalLocationMasterDelivery = queryMaster != null ? queryMaster.TotalLocationDelivery : 0;

                            var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);
                            item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                            item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                            if (queryDITOGroup.Count(c => c.IsInvoice) > 0)
                            {
                                item.PODStatus = sPODStatusPart;
                            }
                            if (queryDITOGroup.Count(c => c.IsInvoice) == queryDITOGroup.Count())
                                item.PODStatus = sPODStatusComplete;

                            if (queryDITOGroup.Count(c => c.IsHasCashCollect) == queryDITOGroup.Count())
                            {
                                item.HasCashCollect = "x";
                            }

                            item.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                            item.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                            item.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                            item.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                            item.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                            item.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                            item.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                            item.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                            item.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                            item.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                            item.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);
                            item.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                            item.ETD = queryDITOGroup.FirstOrDefault().ETD;
                            item.ETA = queryDITOGroup.FirstOrDefault().ETA;
                            item.ATD = queryDITOGroup.FirstOrDefault().ATD;
                            item.ATA = queryDITOGroup.FirstOrDefault().ATA;
                            item.TOMasterCode = queryDITOGroup.FirstOrDefault().TOMasterCode;
                            item.VehicleCode = queryDITOGroup.FirstOrDefault().VehicleCode;
                            item.VendorCode = queryDITOGroup.FirstOrDefault().VendorCode;
                            item.VendorName = queryDITOGroup.FirstOrDefault().VendorName;
                            item.VendorShortName = queryDITOGroup.FirstOrDefault().VendorShortName;
                            item.DriverName = queryDITOGroup.FirstOrDefault().DriverName;
                            item.SOCode = queryDITOGroup.FirstOrDefault().SOCode;
                            item.DNCode = queryDITOGroup.FirstOrDefault().DNCode;
                            item.SortConfigMaster = queryDITOGroup.FirstOrDefault().SortConfigMaster;
                            item.OrderContractID = queryDITOGroup.FirstOrDefault().OrderContractID;
                            item.OPSContractID = queryDITOGroup.FirstOrDefault().OPSContractID;
                            item.OrderGroupProductDateConfig = queryDITOGroup.FirstOrDefault().OrderGroupProductDateConfig;

                            item.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                            item.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                            if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                item.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                            if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                item.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                            item.OPSGroupNote1 = string.Join(",", queryDITOGroup.Select(c => c.OPSGroupNote1).Distinct().ToList());
                            item.OPSGroupNote2 = string.Join(",", queryDITOGroup.Select(c => c.OPSGroupNote2).Distinct().ToList());
                        }

                        var queryORDProduct = lstORDProduct.Where(c => c.OrderGroupProductID == item.OrderGroupProductID);
                        if (queryORDProduct.Count() > 0)
                        {
                            item.ProductCode = string.Join(",", queryORDProduct.Select(c => c.ProductCode).Distinct().ToList());
                            item.ProductName = string.Join(",", queryORDProduct.Select(c => c.ProductName).Distinct().ToList());
                            item.ProductDescription = queryORDProduct.FirstOrDefault().ProductDescription;
                        }

                        var queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOFreightCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.Income = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeUnLoadQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.IncomeUnLoad = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOLoadCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeLoadQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.IncomeLoad = queryFIN.Sum(c => c.Credit);
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOReturnCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeReturnQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.IncomeReturn = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeReturnUnLoadQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.IncomeReturnUnLoad = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeReturnLoadQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.IncomeReturnLoad = queryFIN.Sum(c => c.Credit);
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.ManualFixCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeManual = queryFIN.Sum(c => c.Debit);
                            item.IncomeManualQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.IncomeManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                            item.IncomeManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOExCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeExQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.IncomeEx = queryFIN.Sum(c => c.Credit);
                            lstIncomeExCostName.AddRange(queryFIN.Select(c => c.CostName).Distinct().ToList());
                        }
                        else
                        {
                            item.IncomeExQuantity = 0;
                            item.IncomeEx = 0;
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOFreightDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.Cost = queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostUnLoadQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.CostUnLoad = queryFIN.Sum(c => c.Debit);
                            item.CostUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOLoadDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostLoadQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.CostLoad = queryFIN.Sum(c => c.Debit);
                            item.CostLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOReturnDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostReturnQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.CostReturn = queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostReturnUnLoadQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.CostReturnUnLoad = queryFIN.Sum(c => c.Debit);
                            item.CostReturnUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostReturnUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostReturnLoadQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.CostReturnLoad = queryFIN.Sum(c => c.Debit);
                            item.CostReturnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostReturnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.ManualFixDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostManual = queryFIN.Sum(c => c.Credit);
                            item.CostManualQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.CostManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                            item.CostManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOExDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostExQuantity = queryFIN.Where(c => c.Quantity.HasValue).Sum(c => c.Quantity.Value);
                            item.CostEx = queryFIN.Sum(c => c.Debit);
                            lstCostExCostName.AddRange(queryFIN.Select(c => c.CostName).Distinct().ToList());
                        }
                        else
                        {
                            item.CostExQuantity = 0;
                            item.CostEx = 0;
                        }

                        var queryFINOther = lstFINOther.Where(c => c.OrderGroupProductID == item.OrderGroupProductID);
                        if (queryFINOther.Count() > 0)
                        {
                            item.IncomeExQuantity += queryFINOther.Where(c => c.IncomeExQuantity.HasValue).Sum(c => c.IncomeExQuantity.Value);
                            item.CostExQuantity += queryFINOther.Where(c => c.CostExQuantity.HasValue).Sum(c => c.CostExQuantity.Value);
                            item.IncomeEx += queryFINOther.Sum(c => c.IncomeEx);
                            item.CostEx += queryFINOther.Sum(c => c.CostEx);
                            lstIncomeExCostName.AddRange(queryFINOther.Select(c => c.IncomeExCostName).Distinct().ToList());
                            lstCostExCostName.AddRange(queryFINOther.Select(c => c.CostExCostName).Distinct().ToList());
                        }

                        var lstTrouble = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.TroubleCredit);
                        if (lstTrouble != null && lstTrouble.Count() > 0)
                        {
                            item.IncomeTrouble = lstTrouble.Sum(c => c.Credit);
                        }

                        lstTrouble = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.TroubleDebit);
                        if (lstTrouble != null && lstTrouble.Count() > 0)
                        {
                            item.CostTrouble = lstTrouble.Sum(c => c.Debit);
                        }

                        // Xe nhà
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.FLMDepreciation);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostDepreciation += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.FLMScheduleFee);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostSchedule += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.FLMDriverFee);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostDriver += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.StationDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostStation += queryFIN.Sum(c => c.Debit);
                        }

                        if (item.IncomeExQuantity > 0)
                        {
                            item.IncomeExUnitPrice = item.IncomeEx / (decimal)item.IncomeExQuantity;
                        }

                        if (item.CostExQuantity > 0)
                        {
                            item.CostExUnitPrice = item.CostEx / (decimal)item.CostExQuantity;
                        }
                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeEx + item.IncomeTrouble;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        item.IncomeExCostName = string.Join(", ", lstIncomeExCostName.Distinct().ToList());
                        item.CostExCostName = string.Join(", ", lstCostExCostName.Distinct().ToList());
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result = result.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Order>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPTRPL_ColumnOrder REPDIPL_ColumnOrderData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                #endregion

                DateTime? dtNull = null;

                var result = new DTOREPTRPL_ColumnOrder();
                result.ListData = new List<DTOREPTRPL_Order>();
                result.ListColumn = new List<DTOREPTRPL_ColumnOrder_Group>();
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    //LTL
                    var ListData = model.ORD_GroupProduct.Where(c => data.ListOrderGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        OrderID = c.OrderID,
                        OrderCode = c.ORD_Order.Code,
                        DateConfig = c.ORD_Order.DateConfig,
                        RequestDate = c.ORD_Order.RequestDate,
                        StockID = c.LocationFromID,
                        StockCode = c.LocationFromID > 0 ? c.CUS_Location.Code : "",
                        StockName = c.LocationFromID > 0 ? c.CUS_Location.LocationName : "",
                        StockAddress = c.LocationFromID > 0 ? c.CUS_Location.CAT_Location.Address : "",
                        PartnerID = c.PartnerID,
                        PartnerCode = c.PartnerID > 0 ? c.CUS_Partner.PartnerCode : "",
                        PartnerName = c.PartnerID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : "",
                        Address = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.Address : "",
                        LocationToProvince = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToCode = c.LocationToID > 0 ? c.CUS_Location1.Code : "",
                        LocationToName = c.LocationToID > 0 ? c.CUS_Location1.LocationName : "",
                        GroupOfLocationToCode = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                        LocationToID = c.LocationToID > 0 ? c.LocationToID.Value : -1,
                        AreaToCodeCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        CustomerID = c.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Order.CUS_Customer.CustomerName : c.ORD_Order.CUS_Customer.ShortName,

                        OrderCreatedBy = c.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_Order.CreatedDate,

                        TransportModeIncome = c.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = string.Empty,

                        GroupOfVehicleCode = c.ORD_Order.GroupOfVehicleID > 0 ? c.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_Order.GroupOfVehicleID > 0 ? c.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                        OrderDateConfig = c.ORD_Order.DateConfig,
                        OrderContract = c.ORD_Order.ContractID > 0 ? c.ORD_Order.CAT_Contract.DisplayName : "",
                        OrderRouting = c.ORD_Order.CUSRoutingID > 0 ? c.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",

                        ExternalCode = c.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_Order.UserDefine2,

                        //ORDGroupNote1 = c.Note1,
                        //ORDGroupNote2 = c.Note2,

                        SortConfigOrder = c.ORD_Order.SortConfig,
                    }).Distinct().ToList();

                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID,
                        c.FINSort,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        StockID = c.ORD_GroupProduct.LocationFromID,
                        LocationToID = c.ORD_GroupProduct.LocationToID,
                        OrderGroupProductID = c.OrderGroupProductID.Value,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,
                        TonOrder = c.ORD_GroupProduct.Ton,
                        CBMOrder = c.ORD_GroupProduct.CBM,
                        QuantityOrder = c.ORD_GroupProduct.Quantity,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                        TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,
                        CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",

                        c.InvoiceNote,
                        c.InvoiceReturnNote,
                        c.InvoiceDate,
                        c.InvoiceReturnDate,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,

                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        VehicleID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID : -1,
                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                        VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",
                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                        IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                        IsHasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? true : false) : false,

                        OPSGroupNote1 = c.Note1,
                        OPSGroupNote2 = c.Note2,

                        ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                        ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,
                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,
                        OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                    }).ToList();

                    var lstORDProduct = model.ORD_Product.Where(c => data.ListOrderGroupProductID.Contains(c.GroupProductID)).Select(c => new
                    {
                        OrderGroupProductID = c.GroupProductID,
                        ProductCode = c.CUS_Product.Code,
                        ProductName = c.CUS_Product.ProductName,
                        ProductDescription = c.CUS_Product.Description,
                    }).ToList();

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.FIN_PLDetails.Note,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                        }).ToList();

                    //Other
                    var lstFINOther = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order
                        {
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,

                            IncomeEx = c.FIN_PLDetails.Credit,
                            CostEx = c.FIN_PLDetails.Debit,
                        }).ToList();

                    lstFINOther.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order
                        {
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,

                            CostEx = c.FIN_PLDetails.Debit,
                            IncomeEx = c.FIN_PLDetails.Credit,
                        }).ToList());

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductName, c.GroupOfProductCode }).Distinct().ToList();

                    var lstOrderID = lstDIGroupProduct.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    var lstMasterID = lstDIGroupProduct.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                        MaxWeightCal = c.VehicleID > 0 ? c.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = c.VehicleID > 0 ? c.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.VehicleID > 0 ? c.CAT_Vehicle.RegCapacity : null,
                    }).ToList();
                    foreach (var itemData in ListData)
                    {
                        DTOREPTRPL_Order item = new DTOREPTRPL_Order
                        {
                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            StockID = itemData.StockID,
                            StockCode = itemData.StockCode,
                            StockName = itemData.StockName,
                            StockAddress = itemData.StockAddress,
                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            LocationToID = itemData.LocationToID,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            LocationToCode = itemData.LocationToCode,
                            LocationToName = itemData.LocationToName,
                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,
                            AreaToCodeCredit = itemData.AreaToCodeCredit,
                            AreaToNameCredit = itemData.AreaToNameCredit,
                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            TransportModeIncome = itemData.TransportModeIncome,
                            TransportModeCost = itemData.TransportModeCost,

                            OrderDateConfig = itemData.OrderDateConfig,
                            OrderContract = itemData.OrderContract,
                            OrderRouting = itemData.OrderRouting,

                            OrderCreatedBy = itemData.OrderCreatedBy,
                            OrderCreatedDate = itemData.OrderCreatedDate,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,

                            //ORDGroupNote1 = itemData.ORDGroupNote1,
                            //ORDGroupNote2 = itemData.ORDGroupNote2,

                            HasCashCollect = "",
                            SortConfigOrder = itemData.SortConfigOrder,
                        };

                        result.ListData.Add(item);

                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        item.Income = item.IncomeLoad = item.IncomeUnLoad = item.IncomeReturn = item.IncomeReturnLoad = item.IncomeReturnLoad = item.IncomeEx =
                            item.Cost = item.CostLoad = item.CostUnLoad = item.CostReturn = item.CostReturnLoad = item.CostReturnUnLoad = item.CostEx =
                            item.IncomeManual = item.IncomeManualUnitPrice = 0;

                        item.PODStatus = sPODStatusNotComplete;
                        List<int> lstStatusID = new List<int>();
                        List<string> lstVendorCodeLoad = new List<string>();
                        List<string> lstVendorNameLoad = new List<string>();
                        List<string> lstVendorCodeUnLoad = new List<string>();
                        List<string> lstVendorNameUnLoad = new List<string>();
                        List<string> lstVendorCodeReturnLoad = new List<string>();
                        List<string> lstVendorNameReturnLoad = new List<string>();
                        List<string> lstVendorCodeReturnUnLoad = new List<string>();
                        List<string> lstVendorNameReturnUnLoad = new List<string>();
                        List<string> lstHasCashCollect = new List<string>();
                        List<string> lstOPSGroupNote1 = new List<string>();
                        List<string> lstOPSGroupNote2 = new List<string>();
                        List<string> lstProductCode = new List<string>();
                        List<string> lstProductName = new List<string>();
                        string ProductDescription = string.Empty;
                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.FINSort = first.FINSort;
                                    if (first.ETA != null)
                                        item.ETA = first.ETA;
                                    if (first.ETD != null)
                                        item.ETD = first.ETD;
                                    if (first.ATA != null)
                                        item.ATA = first.ATA;
                                    if (first.ATD != null)
                                        item.ATD = first.ATD;

                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.TOMasterCode = first.TOMasterCode;
                                    item.TotalLocation = first.TotalLocation;
                                    item.TOMasterNote1 = first.TOMasterNote1;
                                    item.TOMasterNote2 = first.TOMasterNote2;
                                    item.VehicleCode = first.VehicleCode;
                                    item.VendorCode = first.VendorCode;
                                    item.VendorName = first.VendorName;
                                    item.VendorShortName = first.VendorShortName;
                                    item.DriverName = first.DriverName;
                                    item.ORDGroupNote1 = first.ORDGroupNote1;
                                    item.ORDGroupNote2 = first.ORDGroupNote2;

                                    item.DNCode = first.DNCode;
                                    item.SOCode = first.SOCode;
                                    item.SortConfigMaster = first.SortConfigMaster;
                                    item.OrderContractID = first.OrderContractID;
                                    item.OPSContractID = first.OPSContractID;
                                    item.OrderGroupProductDateConfig = first.OrderGroupProductDateConfig;
                                }

                                var lstOrderGroupProductID = queryDITOGroup.Select(c => c.OrderGroupProductID).Distinct().ToList();

                                var col = new DTOREPTRPL_ColumnOrder_Group();
                                col.OrderGroupProductID = item.OrderGroupProductID;
                                col.KeyCode = itemGroup.GroupOfProductCode;
                                col.StockID = item.StockID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.TonOrder = item.TonOrder;
                                col.CBMOrder = item.CBMOrder;
                                col.QuantityOrder = item.QuantityOrder;
                                col.KgOrder = item.KgOrder;
                                col.OrderID = item.OrderID;
                                col.PODStatusID = 1;

                                if (queryDITOGroup.Count(c => c.IsInvoice) > 0)
                                {
                                    col.PODStatusID = 2;
                                    if (queryDITOGroup.Count(c => c.IsInvoice) == queryDITOGroup.Count())
                                        col.PODStatusID = 3;
                                }
                                switch (col.PODStatusID)
                                {
                                    case 1: col.PODStatus = sPODStatusNotComplete; break;
                                    case 2: col.PODStatus = sPODStatusPart; break;
                                    case 3: col.PODStatus = sPODStatusComplete; break;
                                }
                                lstStatusID.Add(col.PODStatusID);

                                col.HasCashCollect = queryDITOGroup.Count(c => c.IsHasCashCollect) == queryDITOGroup.Count() ? "x" : "";
                                lstHasCashCollect.Add(col.HasCashCollect);

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());

                                lstOPSGroupNote1.AddRange(queryDITOGroup.Select(c => c.OPSGroupNote1).Distinct().ToList());
                                lstOPSGroupNote2.AddRange(queryDITOGroup.Select(c => c.OPSGroupNote2).Distinct().ToList());

                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryProduct = lstORDProduct.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                    col.ProductDescription = queryProduct.FirstOrDefault().ProductDescription;

                                    lstProductCode.AddRange(queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    lstProductName.AddRange(queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                    ProductDescription = queryProduct.FirstOrDefault().ProductDescription;
                                }

                                var queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOFreightCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Income = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeLoad = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturn = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnLoad = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.ManualFixCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeManual = queryFIN.Sum(c => c.Credit);
                                    col.IncomeManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOExCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeEx = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOFreightDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Cost = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturn = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.ManualFixDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostManual = queryFIN.Sum(c => c.Debit);
                                    col.CostManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOExDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostEx = queryFIN.Sum(c => c.Debit);
                                }

                                var queryFINOther = lstFINOther.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID));
                                if (queryFINOther.Count() > 0)
                                {
                                    col.IncomeEx += queryFINOther.Sum(c => c.IncomeEx);
                                    col.CostEx += queryFINOther.Sum(c => c.CostEx);
                                }

                                var lstTrouble = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.TroubleCredit);
                                if (lstTrouble != null && lstTrouble.Count() > 0)
                                {
                                    col.IncomeTrouble = lstTrouble.Sum(c => c.Credit);
                                }

                                lstTrouble = lstFIN.Where(c => lstOrderGroupProductID.Contains(item.OrderGroupProductID) && c.CostID == (int)CATCostType.TroubleDebit);
                                if (lstTrouble != null && lstTrouble.Count() > 0)
                                {
                                    col.CostTrouble = lstTrouble.Sum(c => c.Debit);
                                }

                                // Xe nhà
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.FLMDepreciation);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDepreciation += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.FLMScheduleFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostSchedule += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.FLMDriverFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDriver += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.StationDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostStation += queryFIN.Sum(c => c.Debit);
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;

                                item.Income += col.Income;
                                item.IncomeLoad += col.IncomeLoad;
                                item.IncomeUnLoad += col.IncomeUnLoad;
                                item.IncomeReturn += col.IncomeReturn;
                                item.IncomeReturnLoad += col.IncomeReturnLoad;
                                item.IncomeReturnUnLoad += col.IncomeReturnUnLoad;
                                item.IncomeEx += col.IncomeEx;
                                item.IncomeTrouble += col.IncomeTrouble;
                                item.IncomeManual += col.IncomeManual;
                                item.IncomeManualQuantity += col.IncomeManualQuantity;
                                item.IncomeManualUnitPrice += col.IncomeManualUnitPrice;
                                item.IncomeManualNote = col.IncomeManualNote != null ? (col.IncomeManualNote.Trim() != "" ? item.IncomeManualNote + ", " + col.IncomeManualNote : col.IncomeManualNote) : item.IncomeManualNote;

                                item.Cost += col.Cost;
                                item.CostLoad += col.CostLoad;
                                item.CostUnLoad += col.CostUnLoad;
                                item.CostReturn += col.CostReturn;
                                item.CostReturnLoad += col.CostReturnLoad;
                                item.CostReturnUnLoad += col.CostReturnUnLoad;
                                item.CostEx += col.CostEx;
                                item.CostTrouble += col.CostTrouble;
                                item.CostDepreciation += col.CostDepreciation;
                                item.CostSchedule += col.CostSchedule;
                                item.CostDriver += col.CostDriver;
                                item.CostStation += col.CostStation;
                                item.CostManual += col.CostManual;
                                item.CostManualQuantity += col.CostManualQuantity;
                                item.CostManualUnitPrice += col.CostManualUnitPrice;
                                item.CostManualNote = col.CostManualNote != null ? (col.CostManualNote.Trim() != "" ? item.CostManualNote + ", " + col.CostManualNote : col.CostManualNote) : item.CostManualNote;

                                var queryMasterID = queryDITOGroup.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                                var queryMaster = lstMaster.Where(c => queryMasterID.Contains(c.ID)).Select(c => new
                                {
                                    ID = c.ID,
                                    TotalLocation = c.TotalLocation,
                                    TotalLocationDelivery = c.TotalLocationDelivery,
                                    MaxWeightCal = c.MaxWeightCal,
                                    RegWeight = c.RegWeight,
                                    RegCapacity = c.RegCapacity,
                                }).FirstOrDefault();

                                item.MaxWeightCal = queryMaster != null ? queryMaster.MaxWeightCal : null;
                                item.RegWeight = queryMaster != null ? queryMaster.RegWeight : null;
                                item.RegCapacity = queryMaster != null ? queryMaster.RegCapacity : null;
                                item.TotalLocationMaster = queryMaster != null ? queryMaster.TotalLocation : 0;
                                item.TotalLocationMasterDelivery = queryMaster != null ? queryMaster.TotalLocationDelivery : 0;
                            }
                        }

                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeEx + item.IncomeTrouble + item.IncomeManual;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostManual + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                        if (lstStatusID.Count(c => c == 3) == lstStatusID.Count)
                            item.PODStatus = sPODStatusComplete;
                        else if (lstStatusID.Count(c => c >= 2) > 0)
                            item.PODStatus = sPODStatusPart;

                        item.CostLoadVendorCode = string.Join(", ", lstVendorCodeLoad.Distinct().ToList());
                        item.CostLoadVendorName = string.Join(", ", lstVendorNameLoad.Distinct().ToList());
                        item.CostUnLoadVendorCode = string.Join(", ", lstVendorCodeUnLoad.Distinct().ToList());
                        item.CostUnLoadVendorName = string.Join(", ", lstVendorNameUnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorCode = string.Join(", ", lstVendorCodeReturnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorName = string.Join(", ", lstVendorNameReturnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorCode = string.Join(", ", lstVendorCodeReturnUnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorName = string.Join(", ", lstVendorNameReturnUnLoad.Distinct().ToList());
                        item.ProductCode = string.Join(", ", lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(", ", lstProductName.Distinct().ToList());
                        item.ProductDescription = ProductDescription;

                        item.OPSGroupNote1 = string.Join(", ", lstOPSGroupNote1.Distinct().ToList());
                        item.OPSGroupNote2 = string.Join(", ", lstOPSGroupNote2.Distinct().ToList());

                        if (lstHasCashCollect.Count(c => c == "x") > 0)
                        {
                            item.HasCashCollect = "x";
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Order>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.ListData.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPTRPL_ColumnOrder REPDIPL_ColumnOrderGroupStockData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                #endregion

                DateTime? dtNull = null;

                var result = new DTOREPTRPL_ColumnOrder();
                result.ListData = new List<DTOREPTRPL_Order>();
                result.ListColumn = new List<DTOREPTRPL_ColumnOrder_Group>();
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    //LTL
                    var ListData = model.ORD_GroupProduct.Where(c => data.ListOrderGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        OrderID = c.OrderID,

                        OrderCode = c.ORD_Order.Code,
                        DateConfig = c.ORD_Order.DateConfig,
                        RequestDate = c.ORD_Order.RequestDate,
                        PartnerID = c.PartnerID,
                        PartnerCode = c.PartnerID > 0 ? c.CUS_Partner.PartnerCode : "",
                        PartnerName = c.PartnerID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : "",
                        LocationToID = c.LocationToID > 0 ? c.LocationToID.Value : -1,
                        LocationToProvince = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToCode = c.LocationToID > 0 ? c.CUS_Location1.Code : "",
                        LocationToName = c.LocationToID > 0 ? c.CUS_Location1.LocationName : "",
                        Address = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.Address : "",
                        GroupOfLocationToCode = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                        ProductDescription = c.ORD_Product.FirstOrDefault().CUS_Product.Description,
                        GroupOfVehicleCode = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        //FINSort = c.FINSort,
                        StockID = c.LocationFromID,
                        AreaToCodeCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        CustomerID = c.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Order.CUS_Customer.CustomerName : c.ORD_Order.CUS_Customer.ShortName,

                        OrderCreatedBy = c.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_Order.CreatedDate,

                        TransportModeIncome = c.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = string.Empty,

                        OrderDateConfig = c.ORD_Order.DateConfig,
                        OrderContract = c.ORD_Order.ContractID > 0 ? c.ORD_Order.CAT_Contract.DisplayName : "",
                        OrderRouting = c.ORD_Order.CUSRoutingID > 0 ? c.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",

                        ExternalCode = c.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_Order.UserDefine2,

                        //ORDGroupNote1 = c.Note1,
                        //ORDGroupNote2 = c.Note2,
                        SortConfigOrder = c.ORD_Order.SortConfig
                    }).Distinct().ToList();

                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderGroupProductID = c.OrderGroupProductID.Value,

                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                        StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                        StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                        PartnerID = c.ORD_GroupProduct.PartnerID,
                        LocationToID = c.ORD_GroupProduct.LocationToID,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : "",
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : "",
                        CUSRoutingID = c.CUSRoutingID,
                        CUSRoutingCode = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.RoutingName : "",
                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        //ProductDescription = c.ORD_Product.FirstOrDefault().CUS_Product.Description,
                        GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                        ETD = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ETD : dtNull,
                        ETA = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ETA : dtNull,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,
                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        c.InvoiceDate,
                        c.InvoiceNote,
                        c.InvoiceReturnDate,
                        c.InvoiceReturnNote,
                        c.ORD_GroupProduct.FINSort,

                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        VehicleID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID : -1,
                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                        VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",
                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                        IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                        IsHasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? true : false) : false,

                        OPSGroupNote1 = c.Note1,
                        OPSGroupNote2 = c.Note2,
                        ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                        ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,
                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,
                        OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                    }).ToList();

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.FIN_PLDetails.Note,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                        }).ToList();

                    //Other
                    var lstFINOther = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order
                        {
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,

                            IncomeEx = c.FIN_PLDetails.Credit,
                            CostEx = c.FIN_PLDetails.Debit,
                        }).ToList();

                    lstFINOther.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order
                        {
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,

                            CostEx = c.FIN_PLDetails.Debit,
                            IncomeEx = c.FIN_PLDetails.Credit,
                        }).ToList());

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductName, c.GroupOfProductCode, c.StockID, c.StockCode }).Distinct().ToList();

                    var lstOrderID = lstDIGroupProduct.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    var lstMasterID = lstDIGroupProduct.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                        MaxWeightCal = c.VehicleID > 0 ? c.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = c.VehicleID > 0 ? c.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.VehicleID > 0 ? c.CAT_Vehicle.RegCapacity : null,
                    }).ToList();

                    var lstORDProduct = model.ORD_Product.Where(c => data.ListOrderGroupProductID.Contains(c.GroupProductID)).Select(c => new
                    {
                        OrderGroupProductID = c.GroupProductID,
                        ProductCode = c.CUS_Product.Code,
                        ProductName = c.CUS_Product.ProductName,
                        ProductDescription = c.CUS_Product.Description,
                    }).ToList();

                    foreach (var itemData in ListData)
                    {
                        DTOREPTRPL_Order item = new DTOREPTRPL_Order
                        {
                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            LocationToID = itemData.LocationToID,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            LocationToCode = itemData.LocationToCode,
                            LocationToName = itemData.LocationToName,
                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,
                            AreaToCodeCredit = itemData.AreaToCodeCredit,
                            AreaToNameCredit = itemData.AreaToNameCredit,
                            StockID = itemData.StockID,

                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            TransportModeIncome = itemData.TransportModeIncome,
                            TransportModeCost = itemData.TransportModeCost,

                            OrderDateConfig = itemData.OrderDateConfig,
                            OrderContract = itemData.OrderContract,
                            OrderRouting = itemData.OrderRouting,

                            OrderCreatedBy = itemData.OrderCreatedBy,
                            OrderCreatedDate = itemData.OrderCreatedDate,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,

                            //ORDGroupNote1 = itemData.ORDGroupNote1,
                            //ORDGroupNote2 = itemData.ORDGroupNote2,

                            HasCashCollect = "",
                            SortConfigOrder = itemData.SortConfigOrder,
                        };

                        result.ListData.Add(item);

                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        item.Income = item.IncomeLoad = item.IncomeUnLoad = item.IncomeReturn = item.IncomeReturnLoad = item.IncomeReturnLoad = item.IncomeEx =
                            item.Cost = item.CostLoad = item.CostUnLoad = item.CostReturn = item.CostReturnLoad = item.CostReturnUnLoad = item.CostEx =
                            item.IncomeManual = item.IncomeManualUnitPrice = 0;

                        item.PODStatus = sPODStatusNotComplete;
                        List<int> lstStatusID = new List<int>();
                        List<string> lstVendorCodeLoad = new List<string>();
                        List<string> lstVendorNameLoad = new List<string>();
                        List<string> lstVendorCodeUnLoad = new List<string>();
                        List<string> lstVendorNameUnLoad = new List<string>();
                        List<string> lstVendorCodeReturnLoad = new List<string>();
                        List<string> lstVendorNameReturnLoad = new List<string>();
                        List<string> lstVendorCodeReturnUnLoad = new List<string>();
                        List<string> lstVendorNameReturnUnLoad = new List<string>();
                        List<string> lstHasCashCollect = new List<string>();
                        List<string> lstOPSGroupNote1 = new List<string>();
                        List<string> lstOPSGroupNote2 = new List<string>();
                        List<string> lstProductCode = new List<string>();
                        List<string> lstProductName = new List<string>();
                        string ProductDescription = string.Empty;
                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.OrderID == item.OrderID && c.StockID == itemGroup.StockID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.FINSort = first.FINSort;
                                    if (first.ETA != null)
                                        item.ETA = first.ETA;
                                    if (first.ETD != null)
                                        item.ETD = first.ETD;
                                    if (first.ATA != null)
                                        item.ATA = first.ATA;
                                    if (first.ATD != null)
                                        item.ATD = first.ATD;

                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.TOMasterCode = first.TOMasterCode;
                                    item.TotalLocation = first.TotalLocation;
                                    item.TOMasterNote1 = first.TOMasterNote1;
                                    item.TOMasterNote2 = first.TOMasterNote2;
                                    item.VehicleCode = first.VehicleCode;
                                    item.VendorCode = first.VendorCode;
                                    item.VendorName = first.VendorName;
                                    item.VendorShortName = first.VendorShortName;
                                    item.DriverName = first.DriverName;
                                    item.ORDGroupNote1 = first.ORDGroupNote1;
                                    item.ORDGroupNote2 = first.ORDGroupNote2;

                                    item.DNCode = first.DNCode;
                                    item.SOCode = first.SOCode;
                                    item.SortConfigMaster = first.SortConfigMaster;
                                    item.OrderContractID = first.OrderContractID;
                                    item.OPSContractID = first.OPSContractID;
                                    item.OrderGroupProductDateConfig = first.OrderGroupProductDateConfig;
                                }
                                var lstOrderGroupProductID = queryDITOGroup.Select(c => c.OrderGroupProductID).ToList();

                                var col = new DTOREPTRPL_ColumnOrder_Group();
                                //col.TOMasterID = item.DITOMasterID;
                                col.OrderID = item.OrderID;
                                col.GroupOfProductID = itemGroup.GroupOfProductID != null ? itemGroup.GroupOfProductID.Value : 0;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.StockID = itemGroup.StockID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.KeyCode = itemGroup.StockCode + "-" + itemGroup.GroupOfProductCode;
                                col.PODStatusID = 1;

                                if (queryDITOGroup.Count(c => c.IsInvoice) > 0)
                                {
                                    col.PODStatusID = 2;
                                    if (queryDITOGroup.Count(c => c.IsInvoice) == queryDITOGroup.Count())
                                        col.PODStatusID = 3;
                                }
                                switch (col.PODStatusID)
                                {
                                    case 1: col.PODStatus = sPODStatusNotComplete; break;
                                    case 2: col.PODStatus = sPODStatusPart; break;
                                    case 3: col.PODStatus = sPODStatusComplete; break;
                                }
                                lstStatusID.Add(col.PODStatusID);

                                col.HasCashCollect = queryDITOGroup.Count(c => c.IsHasCashCollect) == queryDITOGroup.Count() ? "x" : "";
                                lstHasCashCollect.Add(col.HasCashCollect);

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);

                                lstOPSGroupNote1.AddRange(queryDITOGroup.Select(c => c.OPSGroupNote1).Distinct().ToList());
                                lstOPSGroupNote2.AddRange(queryDITOGroup.Select(c => c.OPSGroupNote2).Distinct().ToList());

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryProduct = lstORDProduct.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                    col.ProductDescription = queryProduct.FirstOrDefault().ProductDescription;

                                    lstProductCode.AddRange(queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    lstProductName.AddRange(queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                    ProductDescription = queryProduct.FirstOrDefault().ProductDescription;
                                }

                                var queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOFreightCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Income = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturn = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnLoad = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.ManualFixCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeManual = queryFIN.Sum(c => c.Credit);
                                    col.IncomeManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOFreightDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Cost = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturn = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.ManualFixDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostManual = queryFIN.Sum(c => c.Debit);
                                    col.CostManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.TroubleCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeTrouble += queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.TroubleDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostTrouble += queryFIN.Sum(c => c.Debit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOExCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeEx += queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOExDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostEx += queryFIN.Sum(c => c.Debit);
                                }

                                var queryFINOther = lstFINOther.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID));
                                if (queryFINOther.Count() > 0)
                                {
                                    col.IncomeEx += queryFINOther.Sum(c => c.IncomeEx);
                                    col.CostEx += queryFINOther.Sum(c => c.CostEx);
                                }

                                // Xe nhà
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.FLMDepreciation);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDepreciation += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.FLMScheduleFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostSchedule += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.FLMDriverFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDriver += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.StationDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostStation += queryFIN.Sum(c => c.Debit);
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;

                                item.Income += col.Income;
                                item.IncomeLoad += col.IncomeLoad;
                                item.IncomeUnLoad += col.IncomeUnLoad;
                                item.IncomeReturn += col.IncomeReturn;
                                item.IncomeReturnLoad += col.IncomeReturnLoad;
                                item.IncomeReturnUnLoad += col.IncomeReturnUnLoad;
                                item.IncomeEx += col.IncomeEx;
                                item.IncomeTrouble += col.IncomeTrouble;
                                item.IncomeManual += col.IncomeManual;
                                item.IncomeManualQuantity += col.IncomeManualQuantity;
                                item.IncomeManualUnitPrice += col.IncomeManualUnitPrice;
                                item.IncomeManualNote = col.IncomeManualNote != null ? (col.IncomeManualNote.Trim() != "" ? item.IncomeManualNote + ", " + col.IncomeManualNote : col.IncomeManualNote) : item.IncomeManualNote;

                                item.Cost += col.Cost;
                                item.CostLoad += col.CostLoad;
                                item.CostUnLoad += col.CostUnLoad;
                                item.CostReturn += col.CostReturn;
                                item.CostReturnLoad += col.CostReturnLoad;
                                item.CostReturnUnLoad += col.CostReturnUnLoad;
                                item.CostEx += col.CostEx;
                                item.CostTrouble += col.CostTrouble;
                                item.CostDepreciation += col.CostDepreciation;
                                item.CostSchedule += col.CostSchedule;
                                item.CostDriver += col.CostDriver;
                                item.CostStation += col.CostStation;
                                item.CostManual += col.CostManual;
                                item.CostManualQuantity += col.CostManualQuantity;
                                item.CostManualUnitPrice += col.CostManualUnitPrice;
                                item.CostManualNote = col.CostManualNote != null ? (col.CostManualNote.Trim() != "" ? item.CostManualNote + ", " + col.CostManualNote : col.CostManualNote) : item.CostManualNote;

                                var queryMasterID = queryDITOGroup.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                                var queryMaster = lstMaster.Where(c => queryMasterID.Contains(c.ID)).Select(c => new
                                {
                                    ID = c.ID,
                                    TotalLocation = c.TotalLocation,
                                    TotalLocationDelivery = c.TotalLocationDelivery,
                                    MaxWeightCal = c.MaxWeightCal,
                                    RegWeight = c.RegWeight,
                                    RegCapacity = c.RegCapacity,
                                }).FirstOrDefault();

                                item.MaxWeightCal = queryMaster != null ? queryMaster.MaxWeightCal : null;
                                item.RegWeight = queryMaster != null ? queryMaster.RegWeight : null;
                                item.RegCapacity = queryMaster != null ? queryMaster.RegCapacity : null;
                                item.TotalLocationMaster = queryMaster != null ? queryMaster.TotalLocation : 0;
                                item.TotalLocationMasterDelivery = queryMaster != null ? queryMaster.TotalLocationDelivery : 0;
                            }
                        }

                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeEx + item.IncomeTrouble + item.IncomeManual;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostManual + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                        if (lstStatusID.Count(c => c == 3) == lstStatusID.Count)
                            item.PODStatus = sPODStatusComplete;
                        else if (lstStatusID.Count(c => c >= 2) > 0)
                            item.PODStatus = sPODStatusPart;

                        item.CostLoadVendorCode = string.Join(", ", lstVendorCodeLoad.Distinct().ToList());
                        item.CostLoadVendorName = string.Join(", ", lstVendorNameLoad.Distinct().ToList());
                        item.CostUnLoadVendorCode = string.Join(", ", lstVendorCodeUnLoad.Distinct().ToList());
                        item.CostUnLoadVendorName = string.Join(", ", lstVendorNameUnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorCode = string.Join(", ", lstVendorCodeReturnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorName = string.Join(", ", lstVendorNameReturnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorCode = string.Join(", ", lstVendorCodeReturnUnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorName = string.Join(", ", lstVendorNameReturnUnLoad.Distinct().ToList());
                        item.ProductCode = string.Join(", ", lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(", ", lstProductName.Distinct().ToList());
                        item.ProductDescription = ProductDescription;

                        item.OPSGroupNote1 = string.Join(", ", lstOPSGroupNote1.Distinct().ToList());
                        item.OPSGroupNote2 = string.Join(", ", lstOPSGroupNote2.Distinct().ToList());

                        if (lstHasCashCollect.Count(c => c == "x") > 0)
                        {
                            item.HasCashCollect = "x";
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Order>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.ListData.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPTRPL_ColumnOrder REPDIPL_ColumnOrderMOQData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExCredit);
                lstNoGroupCredit.Add((int)CATCostType.ManualFixCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExDebit);
                lstNoGroupDebit.Add((int)CATCostType.ManualFixDebit);
                #endregion

                var result = new DTOREPTRPL_ColumnOrder();
                result.ListColumn = new List<DTOREPTRPL_ColumnOrder_Group>();
                result.ListColumnMOQ = new List<DTOREPTRPL_ColumnOrder_MOQ>();
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    //LTL
                    result.ListData = new List<DTOREPTRPL_Order>();
                    result.ListData.AddRange(model.ORD_GroupProduct.Where(c => data.ListOrderGroupProductID.Contains(c.ID)).Select(c => new DTOREPTRPL_Order
                    {
                        OrderID = c.OrderID,
                        OrderGroupProductID = c.ID,
                        OrderCode = c.ORD_Order.Code,
                        DNCode = c.DNCode,
                        SOCode = c.SOCode,
                        DateConfig = c.ORD_Order.DateConfig,
                        OrderDateConfig = c.ORD_Order.DateConfig,
                        OrderGroupProductDateConfig = c.DateConfig,
                        RequestDate = c.ORD_Order.RequestDate,
                        StockID = c.LocationFromID,
                        StockCode = c.LocationFromID > 0 ? c.CUS_Location.Code : "",
                        StockName = c.LocationFromID > 0 ? c.CUS_Location.LocationName : "",
                        StockAddress = c.LocationFromID > 0 ? c.CUS_Location.CAT_Location.Address : "",
                        PartnerID = c.PartnerID,
                        PartnerCode = c.PartnerID > 0 ? c.CUS_Partner.PartnerCode : "",
                        PartnerName = c.PartnerID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : "",
                        Address = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.Address : "",
                        LocationToProvince = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToCode = c.LocationToID > 0 ? c.CUS_Location1.Code : "",
                        LocationToName = c.LocationToID > 0 ? c.CUS_Location1.LocationName : "",
                        GroupOfLocationToCode = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                        CUSRoutingID = c.CUSRoutingID,
                        CUSRoutingCode = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.RoutingName : "",
                        GroupOfProductID = c.GroupOfProductID,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        ProductDescription = c.ORD_Product.FirstOrDefault().CUS_Product.Description,
                        GroupOfVehicleCode = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        FINSort = c.FINSort,
                        AreaToCodeCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        CustomerID = c.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Order.CUS_Customer.CustomerName : c.ORD_Order.CUS_Customer.ShortName,

                        TonOrder = c.Ton,
                        CBMOrder = c.CBM,
                        QuantityOrder = c.Quantity,

                        KgOrder = c.Ton * 1000,

                        OrderCreatedBy = c.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_Order.CreatedDate,

                        ExternalCode = c.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_Order.UserDefine2,

                        PODStatus = sPODStatusNotComplete,
                        HasCashCollect = "",
                        ORDGroupNote1 = c.Note1,
                        ORDGroupNote2 = c.Note2,

                        SortConfigOrder = c.ORD_Order.SortConfig,
                    }).ToList());

                    var lstDITOGroup = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderGroupProductID = c.OrderGroupProductID.Value,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : null,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : null,
                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        VehicleID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID : -1,
                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                        VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",
                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                        IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                        IsHasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? true : false) : false,
                        OPSGroupNote1 = c.Note1,
                        OPSGroupNote2 = c.Note2,

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,
                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,
                    }).ToList();

                    var lstORDProduct = model.ORD_Product.Where(c => data.ListOrderGroupProductID.Contains(c.GroupProductID)).Select(c => new
                    {
                        OrderGroupProductID = c.GroupProductID,
                        ProductCode = c.CUS_Product.Code,
                        ProductName = c.CUS_Product.ProductName,
                        ProductDescription = c.CUS_Product.Description,
                    }).ToList();

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            DITOGroupProductID = c.GroupOfProductID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.PLDetailID,
                            c.FIN_PLDetails.TypeOfPriceDIExCode,
                            c.FIN_PLDetails.Note,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                        }).ToList();

                    //Other
                    var lstFINOther = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order_Other
                        {
                            DITOGroupProductID = c.GroupOfProductID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            KeyCode = c.FIN_PLDetails.TypeOfPriceDIExCode,

                            CostID = c.FIN_PLDetails.CostID,
                            Quantity = c.FIN_PLDetails.Quantity.HasValue ? c.FIN_PLDetails.Quantity.Value : 0,
                            UnitPrice = c.FIN_PLDetails.UnitPrice.HasValue ? c.FIN_PLDetails.UnitPrice.Value : 0,
                            Price = c.FIN_PLDetails.Credit,
                        }).ToList();

                    lstFINOther.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order_Other
                        {
                            DITOGroupProductID = c.GroupOfProductID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            KeyCode = c.FIN_PLDetails.TypeOfPriceDIExCode,

                            CostID = c.FIN_PLDetails.CostID,
                            Quantity = c.FIN_PLDetails.Quantity.HasValue ? c.FIN_PLDetails.Quantity.Value : 0,
                            UnitPrice = c.FIN_PLDetails.UnitPrice.HasValue ? c.FIN_PLDetails.UnitPrice.Value : 0,
                            Price = c.FIN_PLDetails.Debit,
                        }).ToList());

                    var lstOrderID = lstDITOGroup.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    var lstMasterID = lstDITOGroup.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                        MaxWeightCal = c.VehicleID > 0 ? c.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = c.VehicleID > 0 ? c.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.VehicleID > 0 ? c.CAT_Vehicle.RegCapacity : null,
                    }).ToList();
                    foreach (var item in result.ListData)
                    {
                        var queryDITOGroup = lstDITOGroup.Where(c => c.OrderGroupProductID == item.OrderGroupProductID);
                        if (queryDITOGroup.Count() > 0)
                        {
                            var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                            item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                            item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                            var queryMasterID = queryDITOGroup.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                            var queryMaster = lstMaster.Where(c => queryMasterID.Contains(c.ID)).Select(c => new
                            {
                                ID = c.ID,
                                TotalLocation = c.TotalLocation,
                                TotalLocationDelivery = c.TotalLocationDelivery,
                                MaxWeightCal = c.MaxWeightCal,
                                RegWeight = c.RegWeight,
                                RegCapacity = c.RegCapacity,
                            }).FirstOrDefault();

                            item.MaxWeightCal = queryMaster != null ? queryMaster.MaxWeightCal : null;
                            item.RegWeight = queryMaster != null ? queryMaster.RegWeight : null;
                            item.RegCapacity = queryMaster != null ? queryMaster.RegCapacity : null;
                            item.TotalLocationMaster = queryMaster != null ? queryMaster.TotalLocation : 0;
                            item.TotalLocationMasterDelivery = queryMaster != null ? queryMaster.TotalLocationDelivery : 0;

                            if (queryDITOGroup.Count(c => c.IsInvoice) > 0)
                                item.PODStatus = sPODStatusPart;
                            if (queryDITOGroup.Count(c => c.IsInvoice) == queryDITOGroup.Count())
                                item.PODStatus = sPODStatusComplete;

                            if (queryDITOGroup.Count(c => c.IsHasCashCollect) == queryDITOGroup.Count())
                                item.HasCashCollect = "x";

                            item.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                            item.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                            item.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                            item.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                            item.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                            item.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                            item.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                            item.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                            item.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                            item.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                            item.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);
                            item.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                            item.ETD = queryDITOGroup.FirstOrDefault().ETD;
                            item.ETA = queryDITOGroup.FirstOrDefault().ETA;
                            item.ATD = queryDITOGroup.FirstOrDefault().ATD;
                            item.ATA = queryDITOGroup.FirstOrDefault().ATA;

                            item.TOMasterCode = queryDITOGroup.FirstOrDefault().TOMasterCode;
                            item.TotalLocation = queryDITOGroup.FirstOrDefault().TotalLocation;
                            item.TOMasterNote1 = queryDITOGroup.FirstOrDefault().TOMasterNote1;
                            item.TOMasterNote2 = queryDITOGroup.FirstOrDefault().TOMasterNote2;
                            item.VehicleCode = queryDITOGroup.FirstOrDefault().VehicleCode;
                            item.VendorCode = queryDITOGroup.FirstOrDefault().VendorCode;
                            item.VendorName = queryDITOGroup.FirstOrDefault().VendorName;
                            item.VendorShortName = queryDITOGroup.FirstOrDefault().VendorShortName;
                            item.DriverName = queryDITOGroup.FirstOrDefault().DriverName;
                            item.SortConfigMaster = queryDITOGroup.FirstOrDefault().SortConfigMaster;
                            item.OrderContractID = queryDITOGroup.FirstOrDefault().OrderContractID;
                            item.OPSContractID = queryDITOGroup.FirstOrDefault().OPSContractID;

                            item.OPSGroupNote1 = string.Join(",", queryDITOGroup.Select(c => c.OPSGroupNote1).Distinct().ToList());
                            item.OPSGroupNote2 = string.Join(",", queryDITOGroup.Select(c => c.OPSGroupNote2).Distinct().ToList());
                        }

                        var queryORDProduct = lstORDProduct.Where(c => c.OrderGroupProductID == item.OrderGroupProductID);
                        if (queryORDProduct.Count() > 0)
                        {
                            item.ProductCode = string.Join(",", queryORDProduct.Select(c => c.ProductCode).Distinct().ToList());
                            item.ProductName = string.Join(",", queryORDProduct.Select(c => c.ProductName).Distinct().ToList());
                            item.ProductDescription = queryORDProduct.FirstOrDefault().ProductDescription;
                        }

                        var queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOFreightCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                            item.Income = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeUnLoad = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOLoadCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeLoad = queryFIN.Sum(c => c.Credit);
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOReturnCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeReturnQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeReturn = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeReturnUnLoad = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeReturnLoad = queryFIN.Sum(c => c.Credit);
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOFreightDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostQuantity = queryFIN.Sum(c => c.Quantity);
                            item.Cost = queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostUnLoad = queryFIN.Sum(c => c.Debit);
                            item.CostUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOLoadDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostLoad = queryFIN.Sum(c => c.Debit);
                            item.CostLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }

                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOReturnDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostReturnQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostReturn = queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostReturnUnLoad = queryFIN.Sum(c => c.Debit);
                            item.CostReturnUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostReturnUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostReturnLoad = queryFIN.Sum(c => c.Debit);
                            item.CostReturnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                            item.CostReturnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                        }

                        // Xe nhà
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.FLMDepreciation);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostDepreciation += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.FLMScheduleFee);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostSchedule += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.FLMDriverFee);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostDriver += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.StationDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostStation += queryFIN.Sum(c => c.Debit);
                        }

                        decimal incomeEx = 0;
                        decimal costEx = 0;

                        var queryGroupFINOtherInCome = lstFINOther.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && lstNoGroupCredit.Contains(c.CostID)).GroupBy(c => new { c.CostID, c.KeyCode });
                        if (queryGroupFINOtherInCome.Count() > 0)
                        {
                            foreach (var itemGroupFINOther in queryGroupFINOtherInCome)
                            {
                                DTOREPTRPL_ColumnOrder_MOQ itemColumnMOQ = new DTOREPTRPL_ColumnOrder_MOQ();
                                itemColumnMOQ.KeyCode = itemGroupFINOther.Key.KeyCode;
                                itemColumnMOQ.IncomeUnitPrice = itemGroupFINOther.Sum(c => c.UnitPrice) / (decimal)itemGroupFINOther.Count();
                                itemColumnMOQ.IncomeQuantity = itemGroupFINOther.Sum(c => c.Quantity);
                                itemColumnMOQ.Income = itemGroupFINOther.Sum(c => c.Price);
                                itemColumnMOQ.OrderGroupProductID = item.OrderGroupProductID;
                                result.ListColumnMOQ.Add(itemColumnMOQ);

                                incomeEx += itemColumnMOQ.Income;
                            }
                        }

                        var queryGroupFINOtherCost = lstFINOther.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && lstNoGroupDebit.Contains(c.CostID)).GroupBy(c => new { c.CostID, c.KeyCode });
                        if (queryGroupFINOtherCost.Count() > 0)
                        {
                            foreach (var itemGroupFINOther in queryGroupFINOtherCost)
                            {
                                var itemColumnMOQ = result.ListColumnMOQ.FirstOrDefault(c => c.KeyCode == itemGroupFINOther.Key.KeyCode && c.OrderGroupProductID == item.OrderGroupProductID);
                                if (itemColumnMOQ == null)
                                {
                                    itemColumnMOQ = new DTOREPTRPL_ColumnOrder_MOQ();
                                    itemColumnMOQ.KeyCode = itemGroupFINOther.Key.KeyCode;
                                    itemColumnMOQ.OrderGroupProductID = item.OrderGroupProductID;
                                    result.ListColumnMOQ.Add(itemColumnMOQ);
                                }
                                itemColumnMOQ.CostUnitPrice = itemGroupFINOther.Sum(c => c.UnitPrice) / (decimal)itemGroupFINOther.Count();
                                itemColumnMOQ.CostQuantity = itemGroupFINOther.Sum(c => c.Quantity);
                                itemColumnMOQ.Cost = itemGroupFINOther.Sum(c => c.Price);

                                costEx += itemColumnMOQ.Cost;
                            }
                        }

                        decimal incomeTrouble = 0;
                        decimal costTrouble = 0;
                        // Trouble
                        var queryTrouble = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.TroubleCredit).GroupBy(c => new { c.CostID, c.TypeOfPriceDIExCode });
                        if (queryTrouble != null && queryTrouble.Count() > 0)
                        {
                            foreach (var itemTrouble in queryTrouble)
                            {
                                DTOREPTRPL_ColumnOrder_MOQ itemColumnMOQ = new DTOREPTRPL_ColumnOrder_MOQ();
                                itemColumnMOQ.KeyCode = "Trouble-" + itemTrouble.Key.TypeOfPriceDIExCode;
                                itemColumnMOQ.Income = itemTrouble.Sum(c => c.Credit);
                                itemColumnMOQ.OrderGroupProductID = item.OrderGroupProductID;
                                itemColumnMOQ.Note = string.Join(", ", itemTrouble.Select(c => c.Note).Distinct().ToList());
                                result.ListColumnMOQ.Add(itemColumnMOQ);

                                incomeTrouble += itemColumnMOQ.Income;
                            }
                        }

                        queryTrouble = lstFIN.Where(c => c.OrderGroupProductID == item.OrderGroupProductID && c.CostID == (int)CATCostType.TroubleDebit).GroupBy(c => new { c.CostID, c.TypeOfPriceDIExCode });
                        if (queryTrouble != null && queryTrouble.Count() > 0)
                        {
                            foreach (var itemTrouble in queryTrouble)
                            {
                                var itemColumnMOQ = result.ListColumnMOQ.FirstOrDefault(c => c.KeyCode == "Trouble-" + itemTrouble.Key.TypeOfPriceDIExCode && c.OrderGroupProductID == item.OrderGroupProductID);
                                if (itemColumnMOQ == null)
                                {
                                    itemColumnMOQ = new DTOREPTRPL_ColumnOrder_MOQ();
                                    itemColumnMOQ.KeyCode = "Trouble-" + itemTrouble.Key.TypeOfPriceDIExCode;
                                    itemColumnMOQ.OrderGroupProductID = item.OrderGroupProductID;
                                    itemColumnMOQ.Note = string.Join(", ", itemTrouble.Select(c => c.Note).Distinct().ToList());
                                    result.ListColumnMOQ.Add(itemColumnMOQ);
                                }
                                itemColumnMOQ.Cost = itemTrouble.Sum(c => c.Debit);

                                costTrouble += itemColumnMOQ.Cost;
                            }
                        }
                        item.IncomeTrouble = incomeTrouble;
                        item.CostTrouble = costTrouble;
                        item.IncomeEx = incomeEx;
                        item.CostEx = costEx;
                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeEx + item.IncomeTrouble;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Order>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.ListData.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPTRPL_ColumnOrder REPDIPL_ColumnOrderGroupProductData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCredit.Add((int)CATCostType.DITOExNoGroupCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebit.Add((int)CATCostType.DITOExNoGroupDebit);
                #endregion

                var result = new DTOREPTRPL_ColumnOrder();
                result.ListData = new List<DTOREPTRPL_Order>();
                result.ListColumn = new List<DTOREPTRPL_ColumnOrder_Group>();
                using (var model = new DataEntities())
                {
                    var data = REPDI_GetDataByFilter(model, filter);

                    //LTL
                    var lstData = model.ORD_GroupProduct.Where(c => data.ListOrderGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        OrderID = c.OrderID,

                        OrderCode = c.ORD_Order.Code,
                        DateConfig = c.ORD_Order.DateConfig,
                        RequestDate = c.ORD_Order.RequestDate,
                        PartnerID = c.PartnerID,
                        PartnerCode = c.PartnerID > 0 ? c.CUS_Partner.PartnerCode : "",
                        PartnerName = c.PartnerID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : "",
                        LocationToID = c.LocationToID > 0 ? c.LocationToID.Value : -1,
                        LocationToProvince = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        LocationToDistrict = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        LocationToCode = c.LocationToID > 0 ? c.CUS_Location1.Code : "",
                        LocationToName = c.LocationToID > 0 ? c.CUS_Location1.LocationName : "",
                        Address = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.Address : "",
                        GroupOfLocationToCode = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                        GroupOfLocationToName = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                        ProductDescription = c.ORD_Product.FirstOrDefault().CUS_Product.Description,
                        GroupOfVehicleCode = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        AreaToCodeCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                        AreaToNameCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                        CustomerID = c.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Order.CUS_Customer.CustomerName : c.ORD_Order.CUS_Customer.ShortName,

                        OrderCreatedBy = c.ORD_Order.CreatedBy,
                        OrderCreatedDate = c.ORD_Order.CreatedDate,

                        TransportModeIncome = c.ORD_Order.CAT_TransportMode.Name,
                        TransportModeCost = string.Empty,

                        ExternalCode = c.ORD_Order.ExternalCode,
                        ExternalDate = c.ORD_Order.ExternalDate,
                        UserDefine1 = c.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_Order.UserDefine2,

                        //ORDGroupNote1 = c.Note1,
                        //ORDGroupNote2 = c.Note2,
                        OrderDateConfig = c.ORD_Order.DateConfig,
                    }).Distinct().ToList();

                    var lstDITOGroupProduct = model.OPS_DITOGroupProduct.Where(c => data.ListDITOGroupProductID.Contains(c.ID)).Select(c => new
                    {
                        DITOMasterID = c.DITOMasterID,
                        OrderGroupProductID = c.OrderGroupProductID.Value,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                        ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : null,
                        ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : null,

                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonBBGN = c.TonBBGN,
                        CBMBBGN = c.CBMBBGN,
                        QuantityBBGN = c.QuantityBBGN,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,

                        KgTranfer = c.TonTranfer * 1000,
                        KgBBGN = c.TonBBGN * 1000,
                        KgReturn = c.TonReturn * 1000,

                        DITOGroupProductID = c.ID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                        CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                        CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                        CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",

                        OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                        GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,

                        c.FINSort,
                        c.InvoiceDate,
                        c.InvoiceNote,
                        c.InvoiceReturnDate,
                        c.InvoiceReturnNote,

                        TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                        TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                        TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                        VehicleID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID : -1,
                        VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                        VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                        VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                        VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",
                        DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                        IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                        IsHasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? true : false) : false,
                        OPSGroupNote1 = c.Note1,
                        OPSGroupNote2 = c.Note2,
                        ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                        ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,

                        StockID = c.ORD_GroupProduct.LocationFromID,
                        StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                        StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                        StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                        StockNote = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                        StockNote1 = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                        SortConfigOrder = c.ORD_GroupProduct.ORD_Order.SortConfig,
                        SortConfigMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.SortConfig : 0,
                        OrderContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                        OPSContractID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ContractID : null,
                        OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                    }).ToList();

                    var lstORDProduct = model.ORD_Product.Where(c => data.ListOrderGroupProductID.Contains(c.GroupProductID)).Select(c => new
                    {
                        ProductCode = c.CUS_Product.Code,
                        ProductName = c.CUS_Product.ProductName,
                        OrderGroupProductID = c.GroupProductID,
                        ProductDescription = c.CUS_Product.Description,
                    }).ToList();

                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new
                        {
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.FIN_PLDetails.Note,
                            VendorCode = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.Code : "",
                            VendorName = c.FIN_PLDetails.FIN_PL.VendorID > 0 ? c.FIN_PLDetails.FIN_PL.CUS_Customer1.CustomerName : "",
                        }).ToList();

                    //Other
                    var lstFINOther = model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order
                        {
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,

                            IncomeEx = c.FIN_PLDetails.Credit,
                            CostEx = c.FIN_PLDetails.Debit,
                        }).ToList();

                    lstFINOther.AddRange(model.FIN_PLGroupOfProduct.Where(c => data.ListDITOGroupProductID.Contains(c.GroupOfProductID) &&
                        lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL).Select(c => new DTOREPTRPL_Order
                        {
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,

                            CostEx = c.FIN_PLDetails.Debit,
                            IncomeEx = c.FIN_PLDetails.Credit,
                        }).ToList());

                    var lstGroup = lstDITOGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductCode }).Distinct().ToList();

                    var lstOrderID = lstDITOGroupProduct.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    var lstMasterID = lstDITOGroupProduct.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                        MaxWeightCal = c.VehicleID > 0 ? c.CAT_Vehicle.MaxWeightCal : null,
                        RegWeight = c.VehicleID > 0 ? c.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.VehicleID > 0 ? c.CAT_Vehicle.RegCapacity : null,
                    }).ToList();

                    foreach (var itemData in lstData)
                    {
                        DTOREPTRPL_Order item = new DTOREPTRPL_Order
                        {
                            OrderID = itemData.OrderID,

                            OrderCode = itemData.OrderCode,
                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,
                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            LocationToID = itemData.LocationToID,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            LocationToCode = itemData.LocationToCode,
                            LocationToName = itemData.LocationToName,
                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,
                            ProductDescription = itemData.ProductDescription,
                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,
                            AreaToCodeCredit = itemData.AreaToCodeCredit,
                            AreaToNameCredit = itemData.AreaToNameCredit,
                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            OrderCreatedBy = itemData.OrderCreatedBy,
                            OrderCreatedDate = itemData.OrderCreatedDate,

                            TransportModeIncome = itemData.TransportModeIncome,
                            TransportModeCost = itemData.TransportModeCost,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,

                            //ORDGroupNote1 = itemData.ORDGroupNote1,
                            //ORDGroupNote2 = itemData.ORDGroupNote2,

                            HasCashCollect = "",
                            OrderDateConfig = itemData.OrderDateConfig,
                        };

                        result.ListData.Add(item);

                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;

                        item.Income = item.IncomeLoad = item.IncomeUnLoad = item.IncomeReturn = item.IncomeReturnLoad = item.IncomeReturnLoad = item.IncomeEx =
                            item.Cost = item.CostLoad = item.CostUnLoad = item.CostReturn = item.CostReturnLoad = item.CostReturnUnLoad = item.CostEx =
                            item.IncomeManual = item.IncomeManualUnitPrice = 0;

                        var finSort = lstDITOGroupProduct.Where(c => c.OrderID == item.OrderID && c.LocationToID == item.LocationToID).OrderBy(c => c.FINSort).FirstOrDefault();
                        if (finSort != null)
                        {
                            item.FINSort = finSort.FINSort;
                            item.ETA = finSort.ETA;
                            item.ETD = finSort.ETD;
                            item.ATA = finSort.ATA;
                            item.ATD = finSort.ATD;
                        }

                        item.PODStatus = sPODStatusNotComplete;
                        List<int> lstStatusID = new List<int>();
                        List<string> lstVendorCodeLoad = new List<string>();
                        List<string> lstVendorNameLoad = new List<string>();
                        List<string> lstVendorCodeUnLoad = new List<string>();
                        List<string> lstVendorNameUnLoad = new List<string>();
                        List<string> lstVendorCodeReturnLoad = new List<string>();
                        List<string> lstVendorNameReturnLoad = new List<string>();
                        List<string> lstVendorCodeReturnUnLoad = new List<string>();
                        List<string> lstVendorNameReturnUnLoad = new List<string>();
                        List<string> lstHasCashCollect = new List<string>();
                        List<string> lstOPSGroupNote1 = new List<string>();
                        List<string> lstOPSGroupNote2 = new List<string>();
                        List<string> lstProductCode = new List<string>();
                        List<string> lstProductName = new List<string>();
                        string ProductDescription = string.Empty;
                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDITOGroupProduct.Where(c => c.OrderID == item.OrderID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    item.FINSort = first.FINSort;
                                    if (first.ETA != null)
                                        item.ETA = first.ETA;
                                    if (first.ETD != null)
                                        item.ETD = first.ETD;
                                    if (first.ATA != null)
                                        item.ATA = first.ATA;
                                    if (first.ATD != null)
                                        item.ATD = first.ATD;

                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.TOMasterCode = first.TOMasterCode;
                                    item.TotalLocation = first.TotalLocation;
                                    item.TOMasterNote1 = first.TOMasterNote1;
                                    item.TOMasterNote2 = first.TOMasterNote2;
                                    item.VehicleCode = first.VehicleCode;
                                    item.VendorCode = first.VendorCode;
                                    item.VendorName = first.VendorName;
                                    item.VendorShortName = first.VendorShortName;
                                    item.DriverName = first.DriverName;
                                    item.ORDGroupNote1 = first.ORDGroupNote1;
                                    item.ORDGroupNote2 = first.ORDGroupNote2;

                                    item.DNCode = first.DNCode;
                                    item.SOCode = first.SOCode;
                                    item.StockCode = first.StockCode;
                                    item.StockName = first.StockName;
                                    item.StockAddress = first.StockAddress;

                                    item.SortConfigMaster = first.SortConfigMaster;
                                    item.SortConfigOrder = first.SortConfigOrder;
                                    item.OrderContractID = first.OrderContractID;
                                    item.OPSContractID = first.OPSContractID;
                                    item.OrderGroupProductDateConfig = first.OrderGroupProductDateConfig;
                                }

                                var lstDITOGroupID = queryDITOGroup.Select(c => c.DITOGroupProductID).Distinct().ToList();
                                var lstOrderGroupProductID = queryDITOGroup.Select(c => c.OrderGroupProductID).Distinct().ToList();

                                var col = new DTOREPTRPL_ColumnOrder_Group();
                                col.OrderID = item.OrderID;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.GroupOfProductID = itemGroup.GroupOfProductID.Value;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.KeyCode = itemGroup.GroupOfProductCode;
                                col.PODStatusID = 1;

                                if (queryDITOGroup.Count(c => c.IsInvoice) > 0)
                                {
                                    col.PODStatusID = 2;
                                    if (queryDITOGroup.Count(c => c.IsInvoice) == queryDITOGroup.Count())
                                        col.PODStatusID = 3;
                                }
                                switch (col.PODStatusID)
                                {
                                    case 1: col.PODStatus = sPODStatusNotComplete; break;
                                    case 2: col.PODStatus = sPODStatusPart; break;
                                    case 3: col.PODStatus = sPODStatusComplete; break;
                                }
                                lstStatusID.Add(col.PODStatusID);

                                col.HasCashCollect = queryDITOGroup.Count(c => c.IsHasCashCollect) == queryDITOGroup.Count() ? "x" : "";
                                lstHasCashCollect.Add(col.HasCashCollect);

                                lstOPSGroupNote1.AddRange(queryDITOGroup.Select(c => c.OPSGroupNote1).Distinct().ToList());
                                lstOPSGroupNote2.AddRange(queryDITOGroup.Select(c => c.OPSGroupNote2).Distinct().ToList());

                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());

                                var queryProduct = lstORDProduct.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                    col.ProductDescription = queryProduct.FirstOrDefault().ProductDescription;

                                    lstProductCode.AddRange(queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    lstProductName.AddRange(queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                    ProductDescription = queryProduct.FirstOrDefault().ProductDescription;
                                }

                                var queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOFreightCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Income = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeLoad = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturn = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnUnLoad = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeReturnLoad = queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.ManualFixCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeManual = queryFIN.Sum(c => c.Credit);
                                    col.IncomeManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.IncomeManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOExCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeEx += queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOFreightDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Cost = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostReturnQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturn = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOUnLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnUnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostReturnUnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnUnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnUnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnUnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnUnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOLoadReturnDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostReturnLoadUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostReturnLoadQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostReturnLoad = queryFIN.Sum(c => c.Debit);
                                    col.CostReturnLoadVendorCode = string.Join(", ", queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    col.CostReturnLoadVendorName = string.Join(", ", queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                    lstVendorCodeReturnLoad.AddRange(queryFIN.Select(c => c.VendorCode).Distinct().ToList());
                                    lstVendorNameReturnLoad.AddRange(queryFIN.Select(c => c.VendorName).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.ManualFixDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostManual = queryFIN.Sum(c => c.Debit);
                                    col.CostManualQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.CostManualUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostManualNote = string.Join(", ", queryFIN.Select(c => c.Note).Distinct().ToList());
                                }

                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.DITOExDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostEx += queryFIN.Sum(c => c.Debit);
                                }

                                var queryFINOther = lstFINOther.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID));
                                if (queryFINOther.Count() > 0)
                                {
                                    col.IncomeEx += queryFINOther.Sum(c => c.IncomeEx);
                                    col.CostEx += queryFINOther.Sum(c => c.CostEx);
                                }

                                var lstTrouble = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.TroubleCredit);
                                if (lstTrouble != null && lstTrouble.Count() > 0)
                                {
                                    col.IncomeTrouble = lstTrouble.Sum(c => c.Credit);
                                }

                                lstTrouble = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.TroubleDebit);
                                if (lstTrouble != null && lstTrouble.Count() > 0)
                                {
                                    col.CostTrouble = lstTrouble.Sum(c => c.Debit);
                                }

                                // Xe nhà
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.FLMDepreciation);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDepreciation += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.FLMScheduleFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostSchedule += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.FLMDriverFee);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostDriver += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOrderGroupProductID.Contains(c.OrderGroupProductID) && c.CostID == (int)CATCostType.StationDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostStation += queryFIN.Sum(c => c.Debit);
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;

                                item.Income += col.Income;
                                item.IncomeLoad += col.IncomeLoad;
                                item.IncomeUnLoad += col.IncomeUnLoad;
                                item.IncomeReturn += col.IncomeReturn;
                                item.IncomeReturnLoad += col.IncomeReturnLoad;
                                item.IncomeReturnUnLoad += col.IncomeReturnUnLoad;
                                item.IncomeEx += col.IncomeEx;
                                item.IncomeTrouble += col.IncomeTrouble;
                                item.IncomeManual += col.IncomeManual;
                                item.IncomeManualQuantity += col.IncomeManualQuantity;
                                item.IncomeManualUnitPrice += col.IncomeManualUnitPrice;
                                item.IncomeManualNote = col.IncomeManualNote != null ? (col.IncomeManualNote.Trim() != "" ? item.IncomeManualNote + ", " + col.IncomeManualNote : col.IncomeManualNote) : item.IncomeManualNote;

                                item.Cost += col.Cost;
                                item.CostLoad += col.CostLoad;
                                item.CostUnLoad += col.CostUnLoad;
                                item.CostReturn += col.CostReturn;
                                item.CostReturnLoad += col.CostReturnLoad;
                                item.CostReturnUnLoad += col.CostReturnUnLoad;
                                item.CostEx += col.CostEx;
                                item.CostTrouble += col.CostTrouble;
                                item.CostDepreciation += col.CostDepreciation;
                                item.CostSchedule += col.CostSchedule;
                                item.CostDriver += col.CostDriver;
                                item.CostStation += col.CostStation;
                                item.CostManual += col.CostManual;
                                item.CostManualQuantity += col.CostManualQuantity;
                                item.CostManualUnitPrice += col.CostManualUnitPrice;
                                item.CostManualNote = col.CostManualNote != null ? (col.CostManualNote.Trim() != "" ? item.CostManualNote + ", " + col.CostManualNote : col.CostManualNote) : item.CostManualNote;

                                var queryMasterID = queryDITOGroup.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                                var queryMaster = lstMaster.Where(c => queryMasterID.Contains(c.ID)).Select(c => new
                                {
                                    ID = c.ID,
                                    TotalLocation = c.TotalLocation,
                                    TotalLocationDelivery = c.TotalLocationDelivery,
                                    MaxWeightCal = c.MaxWeightCal,
                                    RegWeight = c.RegWeight,
                                    RegCapacity = c.RegCapacity,
                                }).FirstOrDefault();

                                item.MaxWeightCal = queryMaster != null ? queryMaster.MaxWeightCal : null;
                                item.RegWeight = queryMaster != null ? queryMaster.RegWeight : null;
                                item.RegCapacity = queryMaster != null ? queryMaster.RegCapacity : null;
                                item.TotalLocationMaster = queryMaster != null ? queryMaster.TotalLocation : 0;
                                item.TotalLocationMasterDelivery = queryMaster != null ? queryMaster.TotalLocationDelivery : 0;
                            }
                        }

                        item.TotalIncome = item.Income + item.IncomeLoad + item.IncomeUnLoad + item.IncomeReturn + item.IncomeReturnLoad + item.IncomeReturnUnLoad + item.IncomeEx + item.IncomeTrouble + item.IncomeManual;
                        item.TotalCost = item.Cost + item.CostLoad + item.CostUnLoad + item.CostReturn + item.CostReturnLoad + item.CostReturnUnLoad + item.CostEx + item.CostTrouble + item.CostManual + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                        if (lstStatusID.Count(c => c == 3) == lstStatusID.Count)
                            item.PODStatus = sPODStatusComplete;
                        else if (lstStatusID.Count(c => c >= 2) > 0)
                            item.PODStatus = sPODStatusPart;

                        item.CostLoadVendorCode = string.Join(", ", lstVendorCodeLoad.Distinct().ToList());
                        item.CostLoadVendorName = string.Join(", ", lstVendorNameLoad.Distinct().ToList());
                        item.CostUnLoadVendorCode = string.Join(", ", lstVendorCodeUnLoad.Distinct().ToList());
                        item.CostUnLoadVendorName = string.Join(", ", lstVendorNameUnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorCode = string.Join(", ", lstVendorCodeReturnLoad.Distinct().ToList());
                        item.CostReturnLoadVendorName = string.Join(", ", lstVendorNameReturnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorCode = string.Join(", ", lstVendorCodeReturnUnLoad.Distinct().ToList());
                        item.CostReturnUnLoadVendorName = string.Join(", ", lstVendorNameReturnUnLoad.Distinct().ToList());
                        item.ProductCode = string.Join(", ", lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(", ", lstProductName.Distinct().ToList());
                        item.ProductDescription = ProductDescription;

                        item.OPSGroupNote1 = string.Join(", ", lstOPSGroupNote1.Distinct().ToList());
                        item.OPSGroupNote2 = string.Join(", ", lstOPSGroupNote2.Distinct().ToList());

                        if (lstHasCashCollect.Count(c => c == "x") > 0)
                        {
                            item.HasCashCollect = "x";
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Order>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    int sort = 1;
                    foreach (var group in result.ListData.GroupBy(c => c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOREPTRPL_Spotrate> REPDIPL_SpotrateData(CUSSettingsReport_Filter filter)
        {
            try
            {
                DateTime? dtNull = null;
                filter.DateFrom = filter.DateFrom.Date;
                filter.DateTo = filter.DateTo.AddDays(1).Date;
                var result = new List<DTOREPTRPL_Spotrate>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    bool IsGroupLocation = false;
                    bool IsGroupPartner = false;
                    bool IsProvince = false;
                    bool IsServiceOfOrder = false;

                    if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                        filter.ListGroupProductID = new List<int>();
                    if (filter.ListGroupProductID.Count > 0)
                        IsGroup = true;

                    if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                        filter.ListStockID = new List<int>();
                    if (filter.ListStockID.Count > 0)
                        IsStock = true;

                    if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                        filter.ListGroupOfPartnerID = new List<int>();
                    if (filter.ListGroupOfPartnerID.Count > 0)
                        IsGroupPartner = true;

                    if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                        filter.ListGroupOfLocationID = new List<int>();
                    if (filter.ListGroupOfLocationID.Count > 0)
                        IsGroupLocation = true;

                    if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                        filter.ListProvinceID = new List<int>();
                    if (filter.ListProvinceID.Count > 0)
                        IsProvince = true;

                    if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                        filter.ListServiceOfOrderID = new List<int>();
                    if (filter.ListServiceOfOrderID.Count > 0)
                        IsServiceOfOrder = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    //LTL
                    result = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                        c.ORD_GroupProduct.DateConfig >= filter.DateFrom && c.ORD_GroupProduct.DateConfig < filter.DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete &&
                        c.ORD_GroupProduct.IsReturn != null &&
                        lstCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && (IsGroup ? filter.ListGroupProductID.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true)).Select(c => new DTOREPTRPL_Spotrate
                        {
                            DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : 0,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            PartnerCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,

                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            lstProductCode = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                            lstProductName = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                            ProductDescription = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description,
                            FINSort = c.FINSort,

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : 0,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.DITOMasterID.HasValue ? (c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "") : "",

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : "",

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                            ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : dtNull,
                            ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : dtNull,

                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateFromLoadStart = c.DateFromLoadStart,
                            DateFromLoadEnd = c.DateFromLoadEnd,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            DateToLoadStart = c.DateToLoadStart,
                            DateToLoadEnd = c.DateToLoadEnd,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnDate = c.InvoiceReturnDate,
                            InvoiceReturnNote = c.InvoiceReturnNote,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            OPSGroupNote = c.Note,
                            OPSGroupNote1 = c.Note1,
                            OPSGroupNote2 = c.Note2,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                            OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductRouting = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DateConfig : null,
                            OPSGroupProductDateConfig = c.DateConfig,
                            OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                            OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.ORD_GroupProduct.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,

                            ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                            TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                            TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                            PODStatus = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,
                            HasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? "x" : "") : "",
                            ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.ORD_GroupProduct.Note2,
                            Price = c.ORD_GroupProduct.Price.HasValue ? c.ORD_GroupProduct.Price.Value : 0,
                            PriceOfGOPID = c.ORD_GroupProduct.PriceOfGOPID,
                            TotalPrice = 0,
                        }).ToList();

                    var lstMasterID = result.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = result.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    foreach (var item in result)
                    {
                        item.ProductCode = string.Join(",", item.lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(",", item.lstProductName.Distinct().ToList());

                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        if (item.PriceOfGOPID != null)
                        {
                            if (item.PriceOfGOPID == -(int)SYSVarType.PriceOfGOPTon)
                            {
                                item.TotalPrice = (decimal)item.TonTranfer * item.Price;
                            }
                            else if (item.PriceOfGOPID == -(int)SYSVarType.PriceOfGOPCBM)
                            {
                                item.TotalPrice = (decimal)item.CBMTranfer * item.Price;
                            }
                            else if (item.PriceOfGOPID == -(int)SYSVarType.PriceOfGOPTU)
                            {
                                item.TotalPrice = (decimal)item.QuantityTranfer * item.Price;
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result = result.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPTRPL_Spotrate>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    //if (result.Count > 0)
                    //{
                    //    var preCode = result.FirstOrDefault().OrderCode;
                    //    int sort = 1;
                    //    foreach (var item in result)
                    //    {
                    //        if (item.OrderCode != preCode)
                    //        {
                    //            sort++;
                    //            preCode = item.OrderCode;
                    //        }
                    //        item.SortOrder = sort;
                    //    }
                    //}
                    int sort = 1;
                    foreach (var group in result.GroupBy(c=>c.OrderCode))
                    {
                        foreach (var item in group)
                        {
                            item.SortOrder = sort;
                        }
                        sort++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCUSStock> REPDIPL_StockList(List<int> lstCusID)
        {
            try
            {
                List<DTOCUSStock> result = new List<DTOCUSStock>();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => lstCusID.Contains(c.CustomerID) && c.CusPartID == null).Select(c => new DTOCUSStock
                    {
                        Code = c.Code,
                        LocationName = c.LocationName,
                        ID = c.ID,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region REPDIPOD

        /// <summary>
        /// Báo cáo chi tiết chứng từ
        /// </summary>
        /// <param name="lstid"></param>
        /// <param name="lstgroupid"></param>
        /// <param name="dtfrom"></param>
        /// <param name="dtto"></param>
        /// <param name="statusID">1: Tất cả, 2: Đã nhận, 3: 1 phần, 4: Chưa nhận</param>
        /// <returns></returns>
        public List<DTOREPDIPOD_Detail> REPDIPOD_DetailData(List<int> lstid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID)
        {
            try
            {
                List<DTOREPDIPOD_Detail> result = new List<DTOREPDIPOD_Detail>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    if (lstgroupid == null || lstgroupid.Count == 0)
                    {
                        lstgroupid = new List<int>();
                        lstgroupid = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => c.ID).Distinct().ToList();
                    }
                    result = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered &&
                         c.ORD_GroupProduct.DateConfig >= dtfrom && c.ORD_GroupProduct.DateConfig < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                         lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && lstgroupid.Contains(c.ORD_GroupProduct.GroupOfProductID.Value)).Select(c => new DTOREPDIPOD_Detail
                         {
                             DITOGroupProductID = c.ID,
                             DITOGroupProductStatusID = c.DITOGroupProductStatusID,
                             DITOGroupProductStatusPODID = c.DITOGroupProductStatusPODID,
                             DITOGroupProductStatusPODName = c.SYS_Var1.ValueOfVar,

                             TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                             TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                             OrderID = c.ORD_GroupProduct.OrderID,
                             OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                             DNCode = c.DNCode,
                             SOCode = c.ORD_GroupProduct.SOCode,
                             RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                             StockID = c.ORD_GroupProduct.LocationFromID,
                             StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                             StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                             StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                             PartnerID = c.ORD_GroupProduct.PartnerID,
                             PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                             PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                             Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                             CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                             CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                             CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                             GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                             GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                             GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                             GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                             GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                             GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                             GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                             GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                             GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                             DriverName = c.OPS_DITOMaster.DriverName1,
                             DriverTel = c.OPS_DITOMaster.DriverTel1,
                             DriverCard = c.OPS_DITOMaster.DriverCard1,

                             VehicleID = c.OPS_DITOMaster.VehicleID,
                             VehicleCode = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                             VendorID = c.OPS_DITOMaster.VendorOfVehicleID,
                             VendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                             VendorName = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                             CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                             CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                             CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                             IsOrigin = c.IsOrigin,
                             IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                             InvoiceBy = c.InvoiceBy,
                             InvoiceDate = c.InvoiceDate,
                             InvoiceNo = c.InvoiceNote,
                             InvoiceNote = c.InvoiceNote,
                             InvoiceReturnDate = c.InvoiceReturnDate,
                             InvoiceReturnNote = c.InvoiceReturnNote,
                             OPSGroupNote = c.Note,
                             OPSGroupNote1 = c.Note1,
                             OPSGroupNote2 = c.Note2,
                             DateFromCome = c.DateFromCome,
                             DateFromLeave = c.DateFromLeave,
                             DateFromLoadStart = c.DateFromLoadStart,
                             DateFromLoadEnd = c.DateFromLoadEnd,
                             DateToCome = c.DateToCome,
                             DateToLeave = c.DateToLeave,
                             DateToLoadStart = c.DateToLoadStart,
                             DateToLoadEnd = c.DateToLoadEnd,

                             Ton = c.Ton,
                             CBM = c.CBM,
                             Quantity = c.Quantity,
                             TonTranfer = c.TonTranfer,
                             CBMTranfer = c.CBMTranfer,
                             QuantityTranfer = c.QuantityTranfer,
                             TonBBGN = c.TonBBGN,
                             CBMBBGN = c.CBMBBGN,
                             QuantityBBGN = c.QuantityBBGN,
                             TonReturn = c.TonReturn,
                             CBMReturn = c.CBMReturn,
                             QuantityReturn = c.QuantityReturn,

                             KgBBGN = c.TonBBGN * 1000,
                             KgTranfer = c.TonTranfer * 1000,
                             KgReturn = c.TonReturn * 1000,

                             OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                             OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                             OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                             OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                             OrderGroupProductRouting = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                             OPSDateConfig = c.OPS_DITOMaster.DateConfig,
                             OPSGroupProductDateConfig = c.DateConfig,
                             OPSContract = c.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                             OPSRouting = c.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                             OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                             ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                             ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                             UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                             UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                             TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                             TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                             PODStatus = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,

                             AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                             AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",

                             lstProductCode = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                             lstProductName = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                             ProductDescription = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description,
                             ReasonCancelNote = c.ReasonCancelNote,
                             OrderNote = c.ORD_GroupProduct.ORD_Order.Note,
                             ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                             ORDGroupNote2 = c.ORD_GroupProduct.Note2,
                             ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                             ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                             ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : null,
                             ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : null,
                         }).ToList();

                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    if (statusID == 2 || statusID == 3)
                        result = result.Where(c => c.IsInvoice).ToList();
                    if (statusID == 4)
                        result = result.Where(c => !c.IsInvoice).ToList();

                    foreach (var item in result)
                    {
                        item.ProductCode = string.Join(",", item.lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(",", item.lstProductName.Distinct().ToList());

                        var objVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.CustomerID == item.CustomerID && c.VendorID == item.VendorID && c.GroupOfProductCUSID == item.GroupOfProductID);
                        if (objVENGroupProduct != null)
                        {
                            item.GroupOfProductVendorCode = objVENGroupProduct.Code;
                            item.GroupOfProductVendorName = objVENGroupProduct.GroupName;
                        }
                    }
                    result = result.OrderBy(c => c.TOMasterID).ThenBy(c => c.OrderGroupProductDateConfig).ThenBy(c => c.OrderCode).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPDIPOD_ColumnDetail REPDIPOD_ColumnDetailData(List<int> lstid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID)
        {
            try
            {
                DateTime? dtNull = null;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPDIPOD_ColumnDetail();
                result.ListData = new List<DTOREPDIPOD_Detail>();
                result.ListColumn = new List<DTOREPDIPOD_ColumnDetail_Group>();
                using (var model = new DataEntities())
                {
                    if (lstgroupid == null || lstgroupid.Count == 0)
                    {
                        lstgroupid = new List<int>();
                        lstgroupid = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => c.ID).Distinct().ToList();
                    }

                    string sStatusPODWaitName = model.SYS_Var.FirstOrDefault(c => c.ID == -(int)SYSVarType.DITOGroupProductStatusPODWait).ValueOfVar;
                    string sStatusPODPartName = model.SYS_Var.FirstOrDefault(c => c.ID == -(int)SYSVarType.DITOGroupProductStatusPODPart).ValueOfVar;
                    string sStatusPODCompleteName = model.SYS_Var.FirstOrDefault(c => c.ID == -(int)SYSVarType.DITOGroupProductStatusPODComplete).ValueOfVar;

                    //LTL
                    var lstData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered &&
                        c.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && lstgroupid.Contains(c.ORD_GroupProduct.GroupOfProductID.Value)).Select(c => new
                        {
                            TOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,

                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            SOCode = c.ORD_GroupProduct.SOCode,

                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                            VehicleID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID.Value : -1,
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            DriverName = c.OPS_DITOMaster.DriverName1,
                            DriverTel = c.OPS_DITOMaster.DriverTel1,
                            DriverCard = c.OPS_DITOMaster.DriverCard1,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.DITOMasterID.HasValue && c.OPS_DITOMaster.DateConfig.HasValue ? c.OPS_DITOMaster.DateConfig : dtNull,
                            OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOMaster.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.ORD_GroupProduct.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,

                            ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                            TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                            TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,
                        }).Distinct().ToList();


                    var lstDIGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered &&
                        c.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && lstgroupid.Contains(c.ORD_GroupProduct.GroupOfProductID.Value)).Select(c => new
                        {
                            TOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,

                            DITOGroupProductID = c.ID,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            DNCode = c.DNCode,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            StockID = c.ORD_GroupProduct.LocationFromID,

                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",
                            FINSort = c.FINSort,

                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            c.InvoiceNote,
                            c.InvoiceReturnNote,
                            c.InvoiceDate,
                            c.InvoiceBy,
                            c.InvoiceReturnDate,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,

                            OPSGroupNote = c.Note,
                            OPSGroupNote1 = c.Note1,
                            OPSGroupNote2 = c.Note2,

                            c.DateFromCome,
                            c.DateFromLeave,
                            c.DateFromLoadEnd,
                            c.DateFromLoadStart,
                            c.DateToCome,
                            c.DateToLeave,
                            c.DateToLoadEnd,
                            c.DateToLoadStart,
                            c.DITOGroupProductStatusID,
                            c.DITOGroupProductStatusPODID,
                            IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,

                            AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                            AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",

                            lstProductCode = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                            lstProductName = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                            ProductDescription = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description,
                            ReasonCancelNote = c.ReasonCancelNote,
                            OrderNote = c.ORD_GroupProduct.ORD_Order.Note,
                            ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                            ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : null,
                            ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : null,
                        }).ToList();

                    var lstDIProduct = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig < dtto && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                        lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID) && lstgroupid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID.Value)).Select(c => new
                        {
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID,
                            GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                            LocationToID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            DITOGroupProductID = c.DITOGroupProductID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            ProductName = c.ORD_Product.CUS_Product.ProductName
                        }).Distinct().ToList();

                    var lstGroup = lstDIGroupProduct.Select(c => new { c.GroupOfProductID, c.GroupOfProductName, c.GroupOfProductCode }).Distinct().ToList();

                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    foreach (var itemData in lstData)
                    {
                        DTOREPDIPOD_Detail item = new DTOREPDIPOD_Detail
                        {
                            TOMasterID = itemData.TOMasterID,
                            TOMasterCode = itemData.TOMasterCode,

                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,
                            SOCode = itemData.SOCode,

                            RequestDate = itemData.RequestDate,

                            StockID = itemData.StockID,
                            StockCode = itemData.StockCode,
                            StockName = itemData.StockName,
                            StockAddress = itemData.StockAddress,
                            PartnerID = itemData.PartnerID,
                            PartnerCode = itemData.PartnerCode,
                            PartnerName = itemData.PartnerName,
                            LocationToID = itemData.LocationToID,
                            Address = itemData.Address,
                            GroupOfLocationToCode = itemData.GroupOfLocationToCode,
                            GroupOfLocationToName = itemData.GroupOfLocationToName,

                            GroupOfVehicleCode = itemData.GroupOfVehicleCode,
                            GroupOfVehicleName = itemData.GroupOfVehicleName,
                            GroupOfVehicleCodeVEN = itemData.GroupOfVehicleCodeVEN,
                            GroupOfVehicleNameVEN = itemData.GroupOfVehicleNameVEN,

                            VehicleID = itemData.VehicleID,
                            VehicleCode = itemData.VehicleCode,
                            VendorID = itemData.VendorID,
                            VendorCode = itemData.VendorCode,
                            VendorName = itemData.VendorName,
                            VendorShortName = itemData.VendorShortName,

                            DriverName = itemData.DriverName,
                            DriverTel = itemData.DriverTel,
                            DriverCard = itemData.DriverCard,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            OrderDateConfig = itemData.OrderDateConfig,
                            OrderContract = itemData.OrderContract,
                            OrderRouting = itemData.OrderRouting,
                            OPSDateConfig = itemData.OPSDateConfig,
                            OPSContract = itemData.OPSContract,
                            OPSRouting = itemData.OPSRouting,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,

                            TOMasterNote1 = itemData.TOMasterNote1,
                            TOMasterNote2 = itemData.TOMasterNote2,
                        };

                        result.ListData.Add(item);

                        var objVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.CustomerID == item.CustomerID && c.VendorID == item.VendorID && c.GroupOfProductCUSID == item.GroupOfProductID);
                        if (objVENGroupProduct != null)
                        {
                            item.GroupOfProductVendorCode = objVENGroupProduct.Code;
                            item.GroupOfProductVendorName = objVENGroupProduct.GroupName;
                        }

                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;
                        item.TonTranfer = item.CBMTranfer = item.QuantityTranfer = item.TonBBGN = item.CBMBBGN = item.QuantityBBGN =
                            item.TonReturn = item.CBMReturn = item.QuantityReturn = item.KgTranfer = item.KgBBGN = item.KgReturn = 0;
                        item.PODStatus = sPODStatusNotComplete;
                        List<int> lstStatusID = new List<int>();
                        #region Group động
                        foreach (var itemGroup in lstGroup)
                        {
                            var queryDITOGroup = lstDIGroupProduct.Where(c => c.TOMasterID == item.TOMasterID && c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.GroupOfProductID == itemGroup.GroupOfProductID);
                            if (queryDITOGroup.Count() > 0)
                            {
                                var lstDITOGroupProductID = queryDITOGroup.Select(c => c.DITOGroupProductID).ToList();
                                var col = new DTOREPDIPOD_ColumnDetail_Group();

                                var first = queryDITOGroup.FirstOrDefault();
                                if (first != null)
                                {
                                    if (first.ETA != null)
                                        item.ETA = first.ETA;
                                    if (first.ETD != null)
                                        item.ETD = first.ETD;
                                    if (first.ATA != null)
                                        item.ATA = first.ATA;
                                    if (first.ATD != null)
                                        item.ATD = first.ATD;

                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.DateFromCome = col.DateFromCome = first.DateFromCome;
                                    item.DateFromLeave = col.DateFromLeave = first.DateFromLeave;
                                    item.DateFromLoadEnd = col.DateFromLoadEnd = first.DateFromLoadEnd;
                                    item.DateFromLoadStart = col.DateFromLoadStart = first.DateFromLoadStart;
                                    item.DateToCome = col.DateToCome = first.DateToCome;
                                    item.DateToLeave = col.DateToLeave = first.DateToLeave;
                                    item.DateToLoadEnd = col.DateToLoadEnd = first.DateToLoadEnd;
                                    item.DateToLoadStart = col.DateToLoadStart = first.DateToLoadStart;
                                    item.DNCode = first.DNCode;
                                    col.SOCode = first.SOCode;
                                    col.DNCode = first.DNCode;
                                    col.DITOGroupProductStatusID = first.DITOGroupProductStatusID;
                                    col.DITOGroupProductStatusPODID = first.DITOGroupProductStatusPODID;

                                    item.AreaToCodeCredit = first.AreaToCodeCredit;
                                    item.AreaToNameCredit = first.AreaToNameCredit;
                                    item.OPSGroupNote = first.OPSGroupNote;
                                    item.OPSGroupNote1 = first.OPSGroupNote1;
                                    item.OPSGroupNote2 = first.OPSGroupNote2;
                                    item.InvoiceDate = first.InvoiceDate;
                                    item.InvoiceReturnDate = first.InvoiceReturnDate;
                                    item.InvoiceBy = first.InvoiceBy;

                                    item.ProductCode = string.Join(",", first.lstProductCode.Distinct().ToList());
                                    item.ProductName = string.Join(",", first.lstProductName.Distinct().ToList());
                                    item.ProductDescription = first.ProductDescription;
                                    item.ReasonCancelNote = first.ReasonCancelNote;

                                    item.OrderNote = first.OrderNote;
                                    item.ORDGroupNote1 = first.ORDGroupNote1;
                                    item.ORDGroupNote2 = first.ORDGroupNote2;
                                }

                                col.TOMasterID = item.TOMasterID;
                                col.OrderID = item.OrderID > 0 ? item.OrderID.Value : -1;
                                col.GroupOfProductID = itemGroup.GroupOfProductID != null ? itemGroup.GroupOfProductID.Value : 0;
                                col.GroupOfProductCode = itemGroup.GroupOfProductCode;
                                col.StockID = item.StockID.Value;
                                col.LocationToID = item.LocationToID;
                                col.KeyCode = itemGroup.GroupOfProductCode;

                                col.PODStatusID = 1;

                                if (queryDITOGroup.Count(c => c.IsInvoice) > 0)
                                {
                                    col.PODStatusID = 2;
                                    if (queryDITOGroup.Count(c => c.IsInvoice) == queryDITOGroup.Count())
                                        col.PODStatusID = 3;
                                }
                                switch (col.PODStatusID)
                                {
                                    case 1: col.PODStatus = sPODStatusNotComplete; break;
                                    case 2: col.PODStatus = sPODStatusPart; break;
                                    case 3: col.PODStatus = sPODStatusComplete; break;
                                }
                                lstStatusID.Add(col.PODStatusID);

                                col.GroupOfProductName = itemGroup.GroupOfProductName;
                                col.TonTranfer = queryDITOGroup.Sum(c => c.TonTranfer);
                                col.CBMTranfer = queryDITOGroup.Sum(c => c.CBMTranfer);
                                col.QuantityTranfer = queryDITOGroup.Sum(c => c.QuantityTranfer);
                                col.TonBBGN = queryDITOGroup.Sum(c => c.TonBBGN);
                                col.CBMBBGN = queryDITOGroup.Sum(c => c.CBMBBGN);
                                col.QuantityBBGN = queryDITOGroup.Sum(c => c.QuantityBBGN);
                                col.TonReturn = queryDITOGroup.Sum(c => c.TonReturn);
                                col.CBMReturn = queryDITOGroup.Sum(c => c.CBMReturn);
                                col.QuantityReturn = queryDITOGroup.Sum(c => c.QuantityReturn);
                                col.KgTranfer = queryDITOGroup.Sum(c => c.KgTranfer);
                                col.KgBBGN = queryDITOGroup.Sum(c => c.KgBBGN);
                                col.KgReturn = queryDITOGroup.Sum(c => c.KgReturn);

                                col.InvoiceNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceNote).Distinct().ToList());
                                col.InvoiceBy = string.Join(",", queryDITOGroup.Select(c => c.InvoiceBy).Distinct().ToList());
                                col.InvoiceReturnNote = string.Join(",", queryDITOGroup.Select(c => c.InvoiceReturnNote).Distinct().ToList());
                                if (queryDITOGroup.Count(c => c.InvoiceDate.HasValue) > 0)
                                    col.InvoiceDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceDate.HasValue).Select(c => c.InvoiceDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                else
                                    col.InvoiceDate = "";
                                if (queryDITOGroup.Count(c => c.InvoiceReturnDate.HasValue) > 0)
                                    col.InvoiceReturnDate = string.Join(",", queryDITOGroup.Where(c => c.InvoiceReturnDate.HasValue).Select(c => c.InvoiceReturnDate.Value.ToString("dd/MM/yyyy")).Distinct().ToList());
                                else
                                    col.InvoiceReturnDate = "";

                                var queryProduct = lstDIProduct.Where(c => lstDITOGroupProductID.Contains(c.DITOGroupProductID));
                                if (queryProduct.Count() > 0)
                                {
                                    col.ProductCode = string.Join(",", queryProduct.Select(c => c.ProductCode).Distinct().ToList());
                                    col.ProductName = string.Join(",", queryProduct.Select(c => c.ProductName).Distinct().ToList());
                                }

                                result.ListColumn.Add(col);

                                item.TonTranfer += col.TonTranfer;
                                item.CBMTranfer += col.CBMTranfer;
                                item.QuantityTranfer += col.QuantityTranfer;
                                item.TonBBGN += col.TonBBGN;
                                item.CBMBBGN += col.CBMBBGN;
                                item.QuantityBBGN += col.QuantityBBGN;
                                item.TonReturn += col.TonReturn;
                                item.CBMReturn += col.CBMReturn;
                                item.QuantityReturn += col.QuantityReturn;
                                item.KgTranfer += col.KgTranfer;
                                item.KgBBGN += col.KgBBGN;
                                item.KgReturn += col.KgReturn;
                                item.InvoiceReturnNote += col.InvoiceReturnNote != "" ? "' " + col.InvoiceReturnNote : item.InvoiceReturnNote;
                                item.InvoiceNo += col.InvoiceNote != "" ? "' " + col.InvoiceNote : item.InvoiceNote;
                                item.InvoiceNote += col.InvoiceNote != "" ? "' " + col.InvoiceNote : item.InvoiceNote;
                            }
                        }
                        #endregion

                        if (lstStatusID.Count(c => c == 3) == lstStatusID.Count)
                            item.PODStatus = sPODStatusComplete;
                        else if (lstStatusID.Count(c => c >= 2) > 0)
                            item.PODStatus = sPODStatusPart;

                        // Check status POD
                        var lstGroupData = result.ListColumn.Where(c => c.TOMasterID == item.TOMasterID && c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID);
                        if (lstGroupData.Count() > 0)
                        {
                            item.DITOGroupProductStatusPODName = sStatusPODWaitName;
                            item.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                            var totalComplete = lstGroupData.Count(c => c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete);
                            if (totalComplete > 0)
                            {
                                item.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODPart;
                                item.DITOGroupProductStatusPODName = sStatusPODPartName;
                            }

                            if (totalComplete == lstGroupData.Count())
                            {
                                item.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODComplete;
                                item.DITOGroupProductStatusPODName = sStatusPODCompleteName;
                            }

                        }
                    }

                    if (statusID == 2)
                        result.ListData = result.ListData.Where(c => c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete).ToList();
                    if (statusID == 3)
                        result.ListData = result.ListData.Where(c => c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODPart).ToList();
                    if (statusID == 4)
                        result.ListData = result.ListData.Where(c => c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODWait).ToList();

                    result.ListData = result.ListData.OrderBy(c => c.TOMasterID).ThenBy(c => c.OrderGroupProductDateConfig).ThenBy(c => c.OrderCode).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOREPDIPOD_Detail> REPDIPOD_DetailPODData(List<int> lstid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID)
        {
            try
            {
                List<DTOREPDIPOD_Detail> result = new List<DTOREPDIPOD_Detail>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    if (lstgroupid == null || lstgroupid.Count == 0)
                    {
                        lstgroupid = new List<int>();
                        lstgroupid = model.CUS_GroupOfProduct.Where(c => lstid.Contains(c.CustomerID)).Select(c => c.ID).Distinct().ToList();
                    }
                    var ListData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered &&
                         c.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOMaster.ETD < dtto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                         lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && lstgroupid.Contains(c.ORD_GroupProduct.GroupOfProductID.Value)).Select(c => new DTOREPDIPOD_Detail
                         {
                             DITOGroupProductID = c.ID,
                             DITOGroupProductStatusID = c.DITOGroupProductStatusID,
                             DITOGroupProductStatusPODID = c.DITOGroupProductStatusPODID,
                             DITOGroupProductStatusPODName = c.SYS_Var1.ValueOfVar,

                             TOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                             TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                             OrderID = c.ORD_GroupProduct.OrderID,
                             OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                             DNCode = c.DNCode,
                             SOCode = c.ORD_GroupProduct.SOCode,
                             RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                             StockID = c.ORD_GroupProduct.LocationFromID,
                             StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                             StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                             StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                             PartnerID = c.ORD_GroupProduct.PartnerID,
                             PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                             PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                             Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                             CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                             CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                             CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                             GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                             GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                             GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                             GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                             GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                             GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                             GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                             GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                             GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                             DriverName = c.OPS_DITOMaster.DriverName1,
                             DriverTel = c.OPS_DITOMaster.DriverTel1,
                             DriverCard = c.OPS_DITOMaster.DriverCard1,

                             VehicleID = c.OPS_DITOMaster.VehicleID,
                             VehicleCode = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                             VendorID = c.OPS_DITOMaster.VendorOfVehicleID,
                             VendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                             VendorName = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                             CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                             CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                             CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,

                             IsOrigin = c.IsOrigin,
                             IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                             InvoiceBy = c.InvoiceBy,
                             InvoiceDate = c.InvoiceDate,
                             InvoiceNote = c.InvoiceNote,
                             InvoiceNo = c.InvoiceNote,
                             InvoiceReturnDate = c.InvoiceReturnDate,
                             InvoiceReturnNote = c.InvoiceReturnNote,
                             OPSGroupNote = c.Note,
                             OPSGroupNote1 = c.Note1,
                             OPSGroupNote2 = c.Note2,
                             DateFromCome = c.DateFromCome,
                             DateFromLeave = c.DateFromLeave,
                             DateFromLoadStart = c.DateFromLoadStart,
                             DateFromLoadEnd = c.DateFromLoadEnd,
                             DateToCome = c.DateToCome,
                             DateToLeave = c.DateToLeave,
                             DateToLoadStart = c.DateToLoadStart,
                             DateToLoadEnd = c.DateToLoadEnd,

                             Ton = c.Ton,
                             CBM = c.CBM,
                             Quantity = c.Quantity,
                             TonTranfer = c.TonTranfer,
                             CBMTranfer = c.CBMTranfer,
                             QuantityTranfer = c.QuantityTranfer,
                             TonBBGN = c.TonBBGN,
                             CBMBBGN = c.CBMBBGN,
                             QuantityBBGN = c.QuantityBBGN,
                             TonReturn = c.TonReturn,
                             CBMReturn = c.CBMReturn,
                             QuantityReturn = c.QuantityReturn,

                             KgBBGN = c.TonBBGN * 1000,
                             KgTranfer = c.TonTranfer * 1000,
                             KgReturn = c.TonReturn * 1000,

                             OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                             OrderGroupProductDateConfig = c.ORD_GroupProduct.DateConfig,
                             OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                             OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                             OrderGroupProductRouting = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                             OPSDateConfig = c.OPS_DITOMaster.DateConfig,
                             OPSGroupProductDateConfig = c.DateConfig,
                             OPSContract = c.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                             OPSRouting = c.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                             OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                             ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                             ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                             UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                             UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                             TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                             TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                             PODStatus = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,

                             AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                             AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                             lstProductCode = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                             lstProductName = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                             ProductDescription = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description,
                             ReasonCancelNote = c.ReasonCancelNote,

                             OrderNote = c.ORD_GroupProduct.ORD_Order.Note,
                             ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                             ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                             ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                             ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                             ATA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATA : null,
                             ATD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ATD : null,
                         }).ToList();

                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    var ListPOD = model.OPS_DITOProductPOD.Where(c => c.OPS_DITOProduct.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOProduct.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOProduct.OPS_DITOGroupProduct.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered &&
                         c.OPS_DITOProduct.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtfrom && c.OPS_DITOProduct.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtto && c.OPS_DITOProduct.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel &&
                         lstid.Contains(c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID) && lstgroupid.Contains(c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID.Value)).Select(c => new
                         {
                             DITOGroupProductID = c.OPS_DITOProduct.DITOGroupProductID,
                             c.ShipmentNo,
                             c.InvoiceNo,
                             c.BillingNo
                         }).ToList();

                    foreach (var item in ListData)
                    {
                        var objVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.CustomerID == item.CustomerID && c.VendorID == item.VendorID && c.GroupOfProductCUSID == item.GroupOfProductID);
                        if (objVENGroupProduct != null)
                        {
                            item.GroupOfProductVendorCode = objVENGroupProduct.Code;
                            item.GroupOfProductVendorName = objVENGroupProduct.GroupName;
                        }
                        var lstPOD = ListPOD.Where(c => c.DITOGroupProductID == item.DITOGroupProductID);
                        if (lstPOD.Count() > 0)
                        {
                            foreach (var itemPOD in lstPOD)
                            {
                                DTOREPDIPOD_Detail obj = new DTOREPDIPOD_Detail
                                {
                                    DITOGroupProductID = item.DITOGroupProductID,
                                    DITOGroupProductStatusID = item.DITOGroupProductStatusID,
                                    DITOGroupProductStatusPODID = item.DITOGroupProductStatusPODID,
                                    DITOGroupProductStatusPODName = item.DITOGroupProductStatusPODName,

                                    TOMasterID = item.TOMasterID,
                                    TOMasterCode = item.TOMasterCode,
                                    OrderID = item.OrderID,
                                    OrderCode = item.OrderCode,
                                    DNCode = item.DNCode,
                                    SOCode = item.SOCode,
                                    RequestDate = item.RequestDate,
                                    StockID = item.StockID,
                                    StockCode = item.StockCode,
                                    StockName = item.StockName,
                                    StockAddress = item.StockAddress,
                                    PartnerID = item.PartnerID,
                                    PartnerCode = item.PartnerCode,
                                    PartnerName = item.PartnerName,
                                    Address = item.Address,
                                    CUSRoutingID = item.CUSRoutingID,
                                    CUSRoutingCode = item.CUSRoutingCode,
                                    CUSRoutingName = item.CUSRoutingName,
                                    GroupOfProductID = item.GroupOfProductID,
                                    GroupOfProductCode = item.GroupOfProductCode,
                                    GroupOfProductName = item.GroupOfProductName,

                                    GroupOfLocationToCode = item.GroupOfLocationToCode,
                                    GroupOfLocationToName = item.GroupOfLocationToName,

                                    GroupOfVehicleCode = item.GroupOfVehicleCode,
                                    GroupOfVehicleName = item.GroupOfVehicleName,
                                    GroupOfVehicleCodeVEN = item.GroupOfVehicleCodeVEN,
                                    GroupOfVehicleNameVEN = item.GroupOfVehicleNameVEN,

                                    DriverName = item.DriverName,
                                    DriverTel = item.DriverTel,
                                    DriverCard = item.DriverCard,

                                    VehicleID = item.VehicleID,
                                    VehicleCode = item.VehicleCode,
                                    VendorID = item.VendorID,
                                    VendorCode = item.VendorCode,
                                    VendorName = item.VendorName,
                                    CustomerID = item.CustomerID,
                                    CustomerCode = item.CustomerCode,
                                    CustomerName = item.CustomerName,

                                    IsOrigin = item.IsOrigin,
                                    IsInvoice = item.IsInvoice,
                                    InvoiceBy = item.InvoiceBy,
                                    InvoiceDate = item.InvoiceDate,
                                    InvoiceNote = item.InvoiceNote,
                                    InvoiceReturnDate = item.InvoiceReturnDate,
                                    InvoiceReturnNote = item.InvoiceReturnNote,
                                    OPSGroupNote = item.OPSGroupNote,
                                    OPSGroupNote1 = item.OPSGroupNote1,
                                    OPSGroupNote2 = item.OPSGroupNote2,
                                    DateFromCome = item.DateFromCome,
                                    DateFromLeave = item.DateFromLeave,
                                    DateFromLoadStart = item.DateFromLoadStart,
                                    DateFromLoadEnd = item.DateFromLoadEnd,
                                    DateToCome = item.DateToCome,
                                    DateToLeave = item.DateToLeave,
                                    DateToLoadStart = item.DateToLoadStart,
                                    DateToLoadEnd = item.DateToLoadEnd,

                                    Ton = item.Ton,
                                    CBM = item.CBM,
                                    Quantity = item.Quantity,
                                    TonTranfer = item.TonTranfer,
                                    CBMTranfer = item.CBMTranfer,
                                    QuantityTranfer = item.QuantityTranfer,
                                    TonBBGN = item.TonBBGN,
                                    CBMBBGN = item.CBMBBGN,
                                    QuantityBBGN = item.QuantityBBGN,
                                    TonReturn = item.TonReturn,
                                    CBMReturn = item.CBMReturn,
                                    QuantityReturn = item.QuantityReturn,

                                    KgBBGN = item.TonBBGN * 1000,
                                    KgTranfer = item.TonTranfer * 1000,
                                    KgReturn = item.TonReturn * 1000,

                                    OrderDateConfig = item.OrderDateConfig,
                                    OrderGroupProductDateConfig = item.OrderGroupProductDateConfig,
                                    OrderContract = item.OrderContract,
                                    OrderRouting = item.OrderRouting,
                                    OrderGroupProductRouting = item.OrderGroupProductRouting,
                                    OPSDateConfig = item.OPSDateConfig,
                                    OPSGroupProductDateConfig = item.OPSGroupProductDateConfig,
                                    OPSContract = item.OPSContract,
                                    OPSRouting = item.OPSRouting,
                                    OPSGroupProductRouting = item.OPSGroupProductRouting,

                                    ExternalCode = item.ExternalCode,
                                    ExternalDate = item.ExternalDate,
                                    UserDefine1 = item.UserDefine1,
                                    UserDefine2 = item.UserDefine2,

                                    TOMasterNote1 = item.TOMasterNote1,
                                    TOMasterNote2 = item.TOMasterNote2,

                                    PODStatus = item.PODStatus,
                                    AreaToCodeCredit = item.AreaToCodeCredit,
                                    AreaToNameCredit = item.AreaToNameCredit,

                                    BillingNo = itemPOD.BillingNo,
                                    ShipmentNo = itemPOD.ShipmentNo,
                                    InvoiceNo = itemPOD.InvoiceNo,

                                    ProductCode = string.Join(",", item.lstProductCode.Distinct().ToList()),
                                    ProductName = string.Join(",", item.lstProductName.Distinct().ToList()),
                                    ProductDescription = item.ProductDescription,

                                    OrderNote = item.OrderNote,
                                    ORDGroupNote1 = item.ORDGroupNote1,
                                    ORDGroupNote2 = item.ORDGroupNote2,

                                    GroupOfProductVendorCode = item.GroupOfProductVendorCode,
                                    GroupOfProductVendorName = item.GroupOfProductVendorName,
                                    ETA = item.ETA,
                                    ETD = item.ETD,
                                    ATA = item.ATA,
                                    ATD = item.ATD,
                                };
                                result.Add(obj);
                            }
                        }
                        else
                        {
                            result.Add(item);
                        }
                    }

                    if (statusID == 2 || statusID == 3)
                        result = result.Where(c => c.IsInvoice).ToList();
                    if (statusID == 4)
                        result = result.Where(c => !c.IsInvoice).ToList();

                    result = result.OrderBy(c => c.TOMasterID).ThenBy(c => c.OrderGroupProductDateConfig).ThenBy(c => c.OrderCode).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region REPDIReturn (Công nợ trả về)
        public List<DTOREPDIReturn_Detail> REPDIReturn_DetailData(List<int> lstid, DateTime dtfrom, DateTime dtto, string request)
        {
            try
            {
                List<DTOREPDIReturn_Detail> result = new List<DTOREPDIReturn_Detail>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    result = model.OPS_ExtReturnDetail.Where(c => c.OPS_ExtReturn.SYSCustomerID == Account.SYSCustomerID &&
                        c.OPS_DITOProduct.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtfrom &&
                        c.OPS_DITOProduct.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtto
                        && lstid.Contains(c.OPS_ExtReturn.CustomerID)).Select(c => new DTOREPDIReturn_Detail
                        {
                            ID = c.ID,
                            CustomerID = c.OPS_ExtReturn.CustomerID,
                            CustomerCode = c.OPS_ExtReturn.CUS_Customer.Code,
                            CustomerName = c.OPS_ExtReturn.CUS_Customer.CustomerName,
                            VehicleID = c.OPS_ExtReturn.VehicleID > 0 ? c.OPS_ExtReturn.VehicleID.Value : -1,
                            VehicleNo = c.OPS_ExtReturn.VehicleID > 0 ? c.OPS_ExtReturn.CAT_Vehicle.RegNo : string.Empty,
                            VendorID = c.OPS_ExtReturn.VendorID > 0 ? c.OPS_ExtReturn.VendorID.Value : -1,
                            VendorCode = c.OPS_ExtReturn.VendorID > 0 ? c.OPS_ExtReturn.CUS_Customer1.Code : string.Empty,
                            VendorName = c.OPS_ExtReturn.VendorID > 0 ? c.OPS_ExtReturn.CUS_Customer1.CustomerName : string.Empty,
                            DriverID = c.OPS_ExtReturn.DriverID > 0 ? c.OPS_ExtReturn.DriverID.Value : -1,
                            DriverName = c.OPS_ExtReturn.DriverID > 0 ? c.OPS_ExtReturn.FLM_Driver.CAT_Driver.LastName + " " + c.OPS_ExtReturn.FLM_Driver.CAT_Driver.FirstName : string.Empty,
                            DriverTel = c.OPS_ExtReturn.DriverID > 0 ? c.OPS_ExtReturn.FLM_Driver.CAT_Driver.Cellphone : string.Empty,
                            DriverCard = c.OPS_ExtReturn.DriverID > 0 ? c.OPS_ExtReturn.FLM_Driver.CAT_Driver.CardNumber : string.Empty,
                            InvoiceDate = c.OPS_ExtReturn.InvoiceDate,
                            InvoiceNo = c.OPS_ExtReturn.InvoiceNo,
                            ProductID = c.OPS_ExtReturn.ProductID,
                            ProductCode = c.OPS_ExtReturn.CUS_Product.Code,
                            Quantity = c.OPS_ExtReturn.Quantity,
                            IsApproved = c.OPS_ExtReturn.IsApproved,
                            DITOMasterID = c.OPS_ExtReturn.DITOMasterID > 0 ? c.OPS_ExtReturn.DITOMasterID.Value : -1,
                            DITOMasterCode = c.OPS_ExtReturn.DITOMasterID > 0 ? c.OPS_ExtReturn.OPS_DITOMaster.Code : string.Empty,
                            ExtReturnStatusName = c.OPS_ExtReturn.SYS_Var.ValueOfVar,

                            GroupProductID = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.ID,
                            GroupProductCode = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            Note = c.OPS_ExtReturn.Note,

                            TOMasterID = c.OPS_ExtReturn.DITOMasterID.HasValue ? c.OPS_ExtReturn.DITOMasterID.Value : -1,
                            TOMasterCode = c.OPS_ExtReturn.DITOMasterID.HasValue ? c.OPS_ExtReturn.OPS_DITOMaster.Code : string.Empty,
                            OrderCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.DNCode,
                            SOCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                            RequestDate = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID,
                            StockCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            CUSRoutingID = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,

                            GroupOfLocationToCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",

                            GroupOfVehicleCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            GroupOfVehicleCodeVEN = c.OPS_ExtReturn.DITOMasterID.HasValue && c.OPS_ExtReturn.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_ExtReturn.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.OPS_ExtReturn.DITOMasterID.HasValue && c.OPS_ExtReturn.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_ExtReturn.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,
                            OPSGroupNote = c.OPS_DITOProduct.OPS_DITOGroupProduct.Note,
                            OPSGroupNote1 = c.OPS_DITOProduct.OPS_DITOGroupProduct.Note1,
                            OPSGroupNote2 = c.OPS_DITOProduct.OPS_DITOGroupProduct.Note2,

                            OrderDateConfig = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderGroupProductDateConfig = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig,
                            OrderContract = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductRouting = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",

                            ExternalCode = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_DITOProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine2,

                            TOMasterNote1 = c.OPS_ExtReturn.DITOMasterID.HasValue ? c.OPS_ExtReturn.OPS_DITOMaster.Note1 : string.Empty,
                            TOMasterNote2 = c.OPS_ExtReturn.DITOMasterID.HasValue ? c.OPS_ExtReturn.OPS_DITOMaster.Note2 : string.Empty,

                            OrderNote = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.Note,
                            ORDGroupNote1 = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.Note2,

                            ETD = c.OPS_ExtReturn.DITOMasterID.HasValue ? c.OPS_ExtReturn.OPS_DITOMaster.ETD : null,
                            ETA = c.OPS_ExtReturn.DITOMasterID.HasValue ? c.OPS_ExtReturn.OPS_DITOMaster.ETA : null,
                            ATD = c.OPS_ExtReturn.DITOMasterID.HasValue ? c.OPS_ExtReturn.OPS_DITOMaster.ATD : null,
                            ATA = c.OPS_ExtReturn.DITOMasterID.HasValue ? c.OPS_ExtReturn.OPS_DITOMaster.ATA : null,
                        }).ToList();

                    var lstVENGroupProduct = model.CUS_GroupOfProductMapping.Where(c => lstid.Contains(c.CustomerID)).Select(c => new { c.CustomerID, c.VendorID, c.GroupOfProductCUSID, c.CUS_GroupOfProduct1.Code, c.CUS_GroupOfProduct1.GroupName }).ToList();

                    foreach (var item in result)
                    {
                        var objVENGroupProduct = lstVENGroupProduct.FirstOrDefault(c => c.CustomerID == item.CustomerID && c.VendorID == item.VendorID && c.GroupOfProductCUSID == item.GroupOfProductID);
                        if (objVENGroupProduct != null)
                        {
                            item.GroupOfProductVendorCode = objVENGroupProduct.Code;
                            item.GroupOfProductVendorName = objVENGroupProduct.GroupName;
                        }
                    }

                    if (string.IsNullOrEmpty(request))
                        result = result.OrderBy(c => c.InvoiceDate).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPDIReturn_Detail>().OrderBy(c => c.InvoiceDate).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region REPDIKPI
        public DTOREPDIKPI_Time REPDIKPI_TimeData(List<int> lstid, List<int> lstgroupid, List<int> lstStockID, DateTime dtfrom, DateTime dtto, bool isKPI, int? typeOfFilter, string request)
        {
            try
            {
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPDIKPI_Time();
                result.ListData = new List<DTOREPDIKPI_Time_Detail>();
                result.ListColumn = new List<DTOREPDIKPI_Time_KPI>();
                result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    if (lstgroupid == null || lstgroupid.Count == 0)
                        lstgroupid = new List<int>();
                    if (lstgroupid.Count > 0)
                        IsGroup = true;

                    if (lstStockID == null || lstStockID.Count == 0)
                        lstStockID = new List<int>();
                    if (lstStockID.Count > 0)
                        IsStock = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => lstid.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => lstid.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    result.ListData.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                        c.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                        (IsGroup ? lstgroupid.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                        (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new DTOREPDIKPI_Time_Detail
                        {
                            DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            StockNote = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                            StockNote1 = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                            LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",

                            DateDN = c.DateDN,
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            lstProductCode = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                            lstProductName = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                            ProductDescription = c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description : "",
                            FINSort = c.FINSort,

                            OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.ContractNo : string.Empty,
                            OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID.HasValue ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.RoutingName : string.Empty,
                            OrderGroupProductRouting = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                            OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID.HasValue ? c.OPS_DITOMaster.CAT_Contract.ContractNo : string.Empty,
                            OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID.HasValue ? c.OPS_DITOMaster.CAT_Routing.RoutingName : string.Empty,
                            OPSGroupProductRouting = c.CATRoutingID.HasValue ? c.CAT_Routing.RoutingName : string.Empty,
                            AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                            AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            KgOrder = c.ORD_GroupProduct.Ton * 1000,

                            OrderCreatedBy = c.ORD_GroupProduct.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,

                            KM = c.OPS_DITOMaster.KM,
                            ETD = c.OPS_DITOMaster.ETD,
                            ETA = c.OPS_DITOMaster.ETA,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateFromLoadStart = c.DateFromLoadStart,
                            DateFromLoadEnd = c.DateFromLoadEnd,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            DateToLoadStart = c.DateToLoadStart,
                            DateToLoadEnd = c.DateToLoadEnd,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnDate = c.InvoiceReturnDate,
                            InvoiceReturnNote = c.InvoiceReturnNote,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            VehicleCode = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                            TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                            TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                            OPSGroupNote1 = c.Note1,
                            OPSGroupNote2 = c.Note2,

                            ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                            PODStatus = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,
                            HasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? "x" : "") : "",

                            MaxWeightCal = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                            RegWeight = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                            RegCapacity = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                            OPSDateConfig = c.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.DateConfig,
                        }).ToList());

                    var lstKPIData = model.KPI_KPITime.Where(c => c.DITOGroupProductID > 0 && lstid.Contains(c.CustomerID) && c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID > 0 &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                        (IsGroup ? lstgroupid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID.Value) : true) &&
                        (IsVen ? c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new
                        {
                            ID = c.ID,
                            c.DITOGroupProductID,
                            c.DateData,
                            c.KPIDate,
                            c.KPIID,
                            KPICode = c.KPI_KPI.Code,
                            c.IsKPI,
                            c.Zone,
                            c.LeadTime,
                            c.ReasonID,
                            ReasonName = c.ReasonID > 0 ? c.KPI_Reason.ReasonName : "",
                            c.DateDN,
                            c.DateToCome,
                            c.DateToLeave,
                            c.DateToLoadEnd,
                            c.DateToLoadStart,
                            c.DateTOMasterATA,
                            c.DateTOMasterATD,
                            c.DateTOMasterETA,
                            c.DateTOMasterETD,
                            c.DateFromCome,
                            c.DateFromLeave,
                            c.DateFromLoadEnd,
                            c.DateFromLoadStart,
                            c.DateInvoice,
                            c.Note,
                        }).ToList();

                    //var lstKPIData = model.KPI_TimeDate.Where(c => c.DITOGroupProductID > 0 && lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID) && c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID > 0 &&
                    //    c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                    //    (IsGroup ? lstgroupid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    //    (IsStock ? lstStockID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    //    (IsVen ? c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new
                    //    {
                    //        ID = c.ID,
                    //        c.DITOGroupProductID,
                    //        c.DateData,
                    //        c.KPIDate,
                    //        KPIID = c.TypeOfKPIID,
                    //        KPICode = c.KPI_TypeOfKPI.Code,
                    //        c.IsKPI,
                    //        c.Zone,
                    //        c.LeadTime,
                    //        c.ReasonID,
                    //        ReasonName = c.ReasonID > 0 ? c.KPI_Reason.ReasonName : "",
                    //        c.DateDN,
                    //        c.DateToCome,
                    //        c.DateToLeave,
                    //        c.DateToLoadEnd,
                    //        c.DateToLoadStart,
                    //        c.DateTOMasterATA,
                    //        c.DateTOMasterATD,
                    //        c.DateTOMasterETA,
                    //        c.DateTOMasterETD,
                    //        c.DateFromCome,
                    //        c.DateFromLeave,
                    //        c.DateFromLoadEnd,
                    //        c.DateFromLoadStart,
                    //        c.DateInvoice,
                    //        c.Note,
                    //    }).ToList();

                    var lstMasterID = result.ListData.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = result.ListData.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    result.ListColumnKey = lstKPIData.Select(c => new DTOREPDIKPI_Time_KPI { KeyCode = c.KPICode, KPIID = c.KPIID }).Distinct().ToList();

                    foreach (var item in result.ListData)
                    {
                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.ProductCode = string.Join(",", item.lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(",", item.lstProductName.Distinct().ToList());
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        if (item.DITOMasterID > 0)
                        {
                            item.ScheduleTonTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.TonTranfer);
                            item.ScheduleCBMTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.CBMTranfer);
                            item.ScheduleQuantityTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.QuantityTranfer);
                        }

                        var queryKPI = lstKPIData.Where(c => c.DITOGroupProductID == item.DITOGroupProductID);
                        if (queryKPI.Count() > 0)
                        {
                            var first = queryKPI.FirstOrDefault();
                            item.DateDN = first.DateDN;
                            item.DateToCome = first.DateToCome;
                            item.DateToLeave = first.DateToLeave;
                            item.DateToLoadEnd = first.DateToLoadEnd;
                            item.DateToLoadStart = first.DateToLoadStart;
                            item.DateTOMasterATA = first.DateTOMasterATA;
                            item.DateTOMasterATD = first.DateTOMasterATD;
                            item.DateTOMasterETA = first.DateTOMasterETA;
                            item.DateTOMasterETD = first.DateTOMasterETD;
                            item.DateFromCome = first.DateFromCome;
                            item.DateFromLeave = first.DateFromLeave;
                            item.DateFromLoadEnd = first.DateFromLoadEnd;
                            item.DateFromLoadStart = first.DateFromLoadStart;
                            item.DateData = first.DateData;

                            var queryKPIGroup = queryKPI.GroupBy(c => new { c.KPICode, c.KPIID }).ToList();
                            foreach (var itemKPIGroup in queryKPIGroup)
                            {
                                DTOREPDIKPI_Time_KPI itemColumn = new DTOREPDIKPI_Time_KPI();
                                itemColumn.DITOGroupProductID = item.DITOGroupProductID;
                                itemColumn.KeyCode = itemKPIGroup.Key.KPICode;
                                itemColumn.KPIID = itemKPIGroup.Key.KPIID;
                                itemColumn.IsKPI = itemKPIGroup.FirstOrDefault().IsKPI;
                                itemColumn.KPIDate = itemKPIGroup.FirstOrDefault().KPIDate;
                                itemColumn.LeadTime = itemKPIGroup.FirstOrDefault().LeadTime;
                                itemColumn.Zone = itemKPIGroup.FirstOrDefault().Zone;
                                itemColumn.ReasonID = itemKPIGroup.FirstOrDefault().ReasonID;
                                itemColumn.ReasonName = itemKPIGroup.FirstOrDefault().ReasonName;
                                itemColumn.Note = itemKPIGroup.FirstOrDefault().Note;
                                result.ListColumn.Add(itemColumn);
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPDIKPI_Time_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    if (isKPI)
                    {
                        var lstData = result.ListColumn.Where(c => c.IsKPI == true).Select(c => c.DITOGroupProductID).Distinct().ToList();
                        result.ListData = result.ListData.Where(c => lstData.Contains(c.DITOGroupProductID)).ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPDIKPI_Time REPDIKPI_Time_OrderData(List<int> lstid, List<int> lstgroupid, List<int> lstStockID, DateTime dtfrom, DateTime dtto, bool isKPI, int? typeOfFilter, string request)
        {
            try
            {
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPDIKPI_Time();
                result.ListData = new List<DTOREPDIKPI_Time_Detail>();
                result.ListColumn = new List<DTOREPDIKPI_Time_KPI>();
                result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    if (lstgroupid == null || lstgroupid.Count == 0)
                        lstgroupid = new List<int>();
                    if (lstgroupid.Count > 0)
                        IsGroup = true;

                    if (lstStockID == null || lstStockID.Count == 0)
                        lstStockID = new List<int>();
                    if (lstStockID.Count > 0)
                        IsStock = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => lstid.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => lstid.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    result.ListData.AddRange(model.ORD_GroupProduct.Where(c => c.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.ORD_Order.StatusOfOrderID >= -(int)SYSVarType.StatusOfOrderPlaning &&
                        c.ORD_Order.DateConfig >= dtfrom && c.ORD_Order.DateConfig < dtto && lstid.Contains(c.ORD_Order.CustomerID) &&
                        (IsGroup ? lstgroupid.Contains(c.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.LocationFromID.Value) : true)).Select(c => new DTOREPDIKPI_Time_Detail
                        {
                            OrderID = c.OrderID,
                            OrderGroupProductID = c.ID,
                            OrderCode = c.ORD_Order.Code,
                            DNCode = c.DNCode,
                            SOCode = c.SOCode,
                            DateConfig = c.ORD_Order.DateConfig,
                            RequestDate = c.ORD_Order.RequestDate,
                            StockID = c.LocationFromID,
                            StockCode = c.LocationFromID > 0 ? c.CUS_Location.Code : "",
                            StockName = c.LocationFromID > 0 ? c.CUS_Location.LocationName : "",
                            StockAddress = c.LocationFromID > 0 ? c.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.PartnerID,
                            PartnerCode = c.PartnerID > 0 ? c.CUS_Partner.PartnerCode : "",
                            PartnerName = c.PartnerID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            GroupOfLocationToCode = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.CUSRoutingID,
                            CUSRoutingCode = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.GroupOfProductID,
                            GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                            ProductDescription = c.ORD_Product.FirstOrDefault().CUS_Product.Description,
                            GroupOfVehicleCode = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            FINSort = c.FINSort,
                            AreaToCodeCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                            AreaToNameCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                            CustomerID = c.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Order.CUS_Customer.CustomerName : c.ORD_Order.CUS_Customer.ShortName,

                            TonOrder = c.Ton,
                            CBMOrder = c.CBM,
                            QuantityOrder = c.Quantity,

                            KgOrder = c.Ton * 1000,

                            OrderCreatedBy = c.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.ORD_Order.CreatedDate,

                            ExternalCode = c.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_Order.UserDefine2,

                            PODStatus = sPODStatusNotComplete,
                            HasCashCollect = "",
                            ORDGroupNote1 = c.Note1,
                            ORDGroupNote2 = c.Note2,

                            lstProductCode = c.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                            lstProductName = c.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                        }).ToList());

                    var lstData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                        c.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                        (IsGroup ? lstgroupid.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                        (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new DTOREPDIKPI_Time_Detail
                        {
                            DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID.Value,

                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,

                            DateDN = c.DateDN,

                            OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID.HasValue ? c.OPS_DITOMaster.CAT_Contract.ContractNo : string.Empty,
                            OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID.HasValue ? c.OPS_DITOMaster.CAT_Routing.RoutingName : string.Empty,
                            OPSGroupProductRouting = c.CATRoutingID.HasValue ? c.CAT_Routing.RoutingName : string.Empty,

                            GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                            KM = c.OPS_DITOMaster.KM,
                            ETD = c.OPS_DITOMaster.ETD,
                            ETA = c.OPS_DITOMaster.ETA,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateFromLoadStart = c.DateFromLoadStart,
                            DateFromLoadEnd = c.DateFromLoadEnd,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            DateToLoadStart = c.DateToLoadStart,
                            DateToLoadEnd = c.DateToLoadEnd,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnDate = c.InvoiceReturnDate,
                            InvoiceReturnNote = c.InvoiceReturnNote,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            VehicleCode = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                            TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                            TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                            OPSGroupNote1 = c.Note1,
                            OPSGroupNote2 = c.Note2,


                            PODStatus = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,
                            HasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? "x" : "") : "",

                            MaxWeightCal = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                            RegWeight = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                            RegCapacity = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                            OPSDateConfig = c.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.DateConfig,
                        }).ToList();

                    var lstKPIData = model.KPI_KPITime.Where(c => c.DITOGroupProductID > 0 && lstid.Contains(c.CustomerID) && c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID > 0 &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                        (IsGroup ? lstgroupid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID.Value) : true) &&
                        (IsVen ? c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new
                        {
                            ID = c.ID,
                            c.OPS_DITOGroupProduct.OrderGroupProductID,
                            c.DITOGroupProductID,
                            c.DateData,
                            c.KPIDate,
                            c.KPIID,
                            KPICode = c.KPI_KPI.Code,
                            c.IsKPI,
                            c.Zone,
                            c.LeadTime,
                            c.ReasonID,
                            ReasonName = c.ReasonID > 0 ? c.KPI_Reason.ReasonName : "",
                            c.DateDN,
                            c.DateToCome,
                            c.DateToLeave,
                            c.DateToLoadEnd,
                            c.DateToLoadStart,
                            c.DateTOMasterATA,
                            c.DateTOMasterATD,
                            c.DateTOMasterETA,
                            c.DateTOMasterETD,
                            c.DateFromCome,
                            c.DateFromLeave,
                            c.DateFromLoadEnd,
                            c.DateFromLoadStart,
                            c.DateInvoice,
                            c.Note,
                        }).ToList();

                    //var lstKPIData = model.KPI_TimeDate.Where(c => c.DITOGroupProductID > 0 && lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID) && c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID > 0 &&
                    //    c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                    //    (IsGroup ? lstgroupid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                    //    (IsStock ? lstStockID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID.Value) : true) &&
                    //    (IsVen ? c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new
                    //    {
                    //        ID = c.ID,
                    //        c.OPS_DITOGroupProduct.OrderGroupProductID,
                    //        c.DITOGroupProductID,
                    //        c.DateData,
                    //        c.KPIDate,
                    //        KPIID = c.TypeOfKPIID,
                    //        KPICode = c.KPI_TypeOfKPI.Code,
                    //        c.IsKPI,
                    //        c.Zone,
                    //        c.LeadTime,
                    //        c.ReasonID,
                    //        ReasonName = c.ReasonID > 0 ? c.KPI_Reason.ReasonName : "",
                    //        c.DateDN,
                    //        c.DateToCome,
                    //        c.DateToLeave,
                    //        c.DateToLoadEnd,
                    //        c.DateToLoadStart,
                    //        c.DateTOMasterATA,
                    //        c.DateTOMasterATD,
                    //        c.DateTOMasterETA,
                    //        c.DateTOMasterETD,
                    //        c.DateFromCome,
                    //        c.DateFromLeave,
                    //        c.DateFromLoadEnd,
                    //        c.DateFromLoadStart,
                    //        c.DateInvoice,
                    //        c.Note,
                    //    }).ToList();

                    var lstMasterID = result.ListData.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = result.ListData.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    result.ListColumnKey = lstKPIData.Select(c => new DTOREPDIKPI_Time_KPI { KeyCode = c.KPICode, KPIID = c.KPIID }).Distinct().ToList();

                    foreach (var item in result.ListData)
                    {
                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.ProductCode = string.Join(",", item.lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(",", item.lstProductName.Distinct().ToList());
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        if (item.DITOMasterID > 0)
                        {
                            item.ScheduleTonTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.TonTranfer);
                            item.ScheduleCBMTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.CBMTranfer);
                            item.ScheduleQuantityTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.QuantityTranfer);
                        }

                        var queryOPS = lstData.Where(c => c.OrderGroupProductID == item.OrderGroupProductID);
                        if (queryOPS.Count() > 0)
                        {
                            var first = queryOPS.FirstOrDefault();
                            item.DateDN = first.DateDN;
                            item.DateToCome = first.DateToCome;
                            item.DateToLeave = first.DateToLeave;
                            item.DateToLoadEnd = first.DateToLoadEnd;
                            item.DateToLoadStart = first.DateToLoadStart;
                            item.DateTOMasterATA = first.DateTOMasterATA;
                            item.DateTOMasterATD = first.DateTOMasterATD;
                            item.DateTOMasterETA = first.DateTOMasterETA;
                            item.DateTOMasterETD = first.DateTOMasterETD;
                            item.DateFromCome = first.DateFromCome;
                            item.DateFromLeave = first.DateFromLeave;
                            item.DateFromLoadEnd = first.DateFromLoadEnd;
                            item.DateFromLoadStart = first.DateFromLoadStart;
                            item.DateData = first.DateData;

                            item.DITOMasterID = first.DITOMasterID;
                            item.TOMasterCode = first.TOMasterCode;
                            item.TotalLocation = first.TotalLocation;
                            item.OPSContract = first.OPSContract;
                            item.OPSDateConfig = first.OPSDateConfig;
                            item.OPSGroupNote1 = first.OPSGroupNote1;
                            item.OPSGroupNote2 = first.OPSGroupNote2;
                            item.OPSGroupProductDateConfig = first.OPSGroupProductDateConfig;
                            item.OPSGroupProductRouting = first.OPSGroupProductRouting;
                            item.OPSRouting = first.OPSRouting;
                            item.GroupOfProductVendorCode = first.GroupOfProductVendorCode;
                            item.GroupOfProductVendorName = first.GroupOfProductVendorName;
                            item.GroupOfVehicleCode = first.GroupOfVehicleCode;
                            item.GroupOfVehicleCodeVEN = first.GroupOfVehicleCodeVEN;
                            item.InvoiceDate = first.InvoiceDate;
                            item.InvoiceNote = first.InvoiceNote;
                            item.InvoiceReturnDate = first.InvoiceReturnDate;
                            item.InvoiceReturnNote = first.InvoiceReturnNote;
                            item.KM = first.KM;
                            item.ETA = first.ETA;
                            item.ETD = first.ETD;
                            item.DriverName = first.DriverName;
                            item.VehicleCode = first.VehicleCode;
                            item.VehicleID = first.VehicleID;
                            item.VendorCode = first.VendorCode;
                            item.VendorID = first.VendorID;
                            item.VendorName = first.VendorName;
                            item.VendorShortName = first.VendorShortName;
                            item.RegCapacity = first.RegCapacity;
                            item.RegWeight = first.RegWeight;
                            item.MaxWeightCal = first.MaxWeightCal;
                            item.TransportModeCost = first.TransportModeCost;
                            item.TransportModeIncome = first.TransportModeIncome;
                            item.TOMasterCode = first.TOMasterCode;
                            item.TOMasterNote1 = first.TOMasterNote1;
                            item.TOMasterNote2 = first.TOMasterNote2;

                            item.TonTranfer = queryOPS.Sum(c => c.TonTranfer);
                            item.CBMTranfer = queryOPS.Sum(c => c.CBMTranfer);
                            item.QuantityTranfer = queryOPS.Sum(c => c.QuantityTranfer);
                            item.KgTranfer = item.TonTranfer * 1000;
                            item.TonBBGN = queryOPS.Sum(c => c.TonBBGN);
                            item.CBMBBGN = queryOPS.Sum(c => c.CBMBBGN);
                            item.QuantityBBGN = queryOPS.Sum(c => c.QuantityBBGN);
                            item.KgBBGN = item.TonBBGN * 1000;
                            item.TonReturn = queryOPS.Sum(c => c.TonReturn);
                            item.CBMReturn = queryOPS.Sum(c => c.CBMReturn);
                            item.QuantityReturn = queryOPS.Sum(c => c.QuantityReturn);
                            item.KgReturn = item.TonReturn * 1000;
                        }
                        var queryKPI = lstKPIData.Where(c => c.OrderGroupProductID == item.OrderGroupProductID);
                        if (queryKPI.Count() > 0)
                        {
                            var first = queryKPI.FirstOrDefault();
                            item.DateDN = first.DateDN;
                            item.DateToCome = first.DateToCome;
                            item.DateToLeave = first.DateToLeave;
                            item.DateToLoadEnd = first.DateToLoadEnd;
                            item.DateToLoadStart = first.DateToLoadStart;
                            item.DateTOMasterATA = first.DateTOMasterATA;
                            item.DateTOMasterATD = first.DateTOMasterATD;
                            item.DateTOMasterETA = first.DateTOMasterETA;
                            item.DateTOMasterETD = first.DateTOMasterETD;
                            item.DateFromCome = first.DateFromCome;
                            item.DateFromLeave = first.DateFromLeave;
                            item.DateFromLoadEnd = first.DateFromLoadEnd;
                            item.DateFromLoadStart = first.DateFromLoadStart;
                            item.DateData = first.DateData;

                            var queryKPIGroup = queryKPI.GroupBy(c => new { c.KPICode, c.KPIID }).ToList();
                            foreach (var itemKPIGroup in queryKPIGroup)
                            {
                                DTOREPDIKPI_Time_KPI itemColumn = new DTOREPDIKPI_Time_KPI();
                                itemColumn.OrderGroupProductID = item.OrderGroupProductID;
                                itemColumn.KeyCode = itemKPIGroup.Key.KPICode;
                                itemColumn.KPIID = itemKPIGroup.Key.KPIID;
                                itemColumn.IsKPI = itemKPIGroup.FirstOrDefault().IsKPI;
                                itemColumn.KPIDate = itemKPIGroup.FirstOrDefault().KPIDate;
                                itemColumn.LeadTime = itemKPIGroup.FirstOrDefault().LeadTime;
                                itemColumn.Zone = itemKPIGroup.FirstOrDefault().Zone;
                                itemColumn.ReasonID = itemKPIGroup.FirstOrDefault().ReasonID;
                                itemColumn.ReasonName = itemKPIGroup.FirstOrDefault().ReasonName;
                                itemColumn.Note = itemKPIGroup.FirstOrDefault().Note;
                                result.ListColumn.Add(itemColumn);
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPDIKPI_Time_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    if (isKPI)
                    {
                        var lstDataKPI = result.ListColumn.Where(c => c.IsKPI == true).Select(c => c.DITOGroupProductID).Distinct().ToList();
                        result.ListData = result.ListData.Where(c => lstDataKPI.Contains(c.DITOGroupProductID)).ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOREPDIKPI_Time REPDIKPI_TimeDate_Data(List<int> lstid, List<int> lstgroupid, List<int> lstStockID, DateTime dtfrom, DateTime dtto, bool isKPI, int? typeOfFilter, string request)
        {
            try
            {
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPDIKPI_Time();
                result.ListData = new List<DTOREPDIKPI_Time_Detail>();
                result.ListColumn = new List<DTOREPDIKPI_Time_KPI>();
                result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    if (lstgroupid == null || lstgroupid.Count == 0)
                        lstgroupid = new List<int>();
                    if (lstgroupid.Count > 0)
                        IsGroup = true;

                    if (lstStockID == null || lstStockID.Count == 0)
                        lstStockID = new List<int>();
                    if (lstStockID.Count > 0)
                        IsStock = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => lstid.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => lstid.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    result.ListData.AddRange(model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                        c.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                        (IsGroup ? lstgroupid.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                        (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new DTOREPDIKPI_Time_Detail
                        {
                            DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            StockNote = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note : "",
                            StockNote1 = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Note1 : "",

                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.LocationToID.Value : -1,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : "",
                            LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : "",

                            DateDN = c.DateDN,
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            lstProductCode = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                            lstProductName = c.ORD_GroupProduct.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                            ProductDescription = c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description : "",
                            FINSort = c.FINSort,

                            OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.ContractNo : string.Empty,
                            OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID.HasValue ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.RoutingName : string.Empty,
                            OrderGroupProductRouting = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                            OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID.HasValue ? c.OPS_DITOMaster.CAT_Contract.ContractNo : string.Empty,
                            OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID.HasValue ? c.OPS_DITOMaster.CAT_Routing.RoutingName : string.Empty,
                            OPSGroupProductRouting = c.CATRoutingID.HasValue ? c.CAT_Routing.RoutingName : string.Empty,
                            AreaToCodeCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                            AreaToNameCredit = c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TonOrder = c.ORD_GroupProduct.Ton,
                            CBMOrder = c.ORD_GroupProduct.CBM,
                            QuantityOrder = c.ORD_GroupProduct.Quantity,

                            KgOrder = c.ORD_GroupProduct.Ton * 1000,

                            OrderCreatedBy = c.ORD_GroupProduct.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,

                            KM = c.OPS_DITOMaster.KM,
                            ETD = c.OPS_DITOMaster.ETD,
                            ETA = c.OPS_DITOMaster.ETA,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateFromLoadStart = c.DateFromLoadStart,
                            DateFromLoadEnd = c.DateFromLoadEnd,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            DateToLoadStart = c.DateToLoadStart,
                            DateToLoadEnd = c.DateToLoadEnd,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnDate = c.InvoiceReturnDate,
                            InvoiceReturnNote = c.InvoiceReturnNote,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            VehicleCode = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                            TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                            TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                            OPSGroupNote1 = c.Note1,
                            OPSGroupNote2 = c.Note2,

                            ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.ORD_GroupProduct.Note2,

                            PODStatus = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,
                            HasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? "x" : "") : "",

                            MaxWeightCal = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                            RegWeight = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                            RegCapacity = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                            OPSDateConfig = c.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.DateConfig,
                        }).ToList());

                    var lstKPIData = model.KPI_TimeDate.Where(c => c.DITOGroupProductID > 0 && lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID) && c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID > 0 &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                        (IsGroup ? lstgroupid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID.Value) : true) &&
                        (IsVen ? c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new
                        {
                            ID = c.ID,
                            c.DITOGroupProductID,
                            c.DateData,
                            c.KPIDate,
                            KPIID = c.TypeOfKPIID,
                            KPICode = c.KPI_TypeOfKPI.Code,
                            c.IsKPI,
                            c.Zone,
                            c.LeadTime,
                            c.ReasonID,
                            ReasonName = c.ReasonID > 0 ? c.KPI_Reason.ReasonName : "",
                            c.DateDN,
                            c.DateToCome,
                            c.DateToLeave,
                            c.DateToLoadEnd,
                            c.DateToLoadStart,
                            c.DateTOMasterATA,
                            c.DateTOMasterATD,
                            c.DateTOMasterETA,
                            c.DateTOMasterETD,
                            c.DateFromCome,
                            c.DateFromLeave,
                            c.DateFromLoadEnd,
                            c.DateFromLoadStart,
                            c.DateInvoice,
                            c.Note,
                        }).ToList();

                    var lstMasterID = result.ListData.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = result.ListData.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    result.ListColumnKey = lstKPIData.Select(c => new DTOREPDIKPI_Time_KPI { KeyCode = c.KPICode, KPIID = c.KPIID }).Distinct().ToList();

                    foreach (var item in result.ListData)
                    {
                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.ProductCode = string.Join(",", item.lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(",", item.lstProductName.Distinct().ToList());
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        if (item.DITOMasterID > 0)
                        {
                            item.ScheduleTonTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.TonTranfer);
                            item.ScheduleCBMTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.CBMTranfer);
                            item.ScheduleQuantityTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.QuantityTranfer);
                        }

                        var queryKPI = lstKPIData.Where(c => c.DITOGroupProductID == item.DITOGroupProductID);
                        if (queryKPI.Count() > 0)
                        {
                            var first = queryKPI.FirstOrDefault();
                            item.DateDN = first.DateDN;
                            item.DateToCome = first.DateToCome;
                            item.DateToLeave = first.DateToLeave;
                            item.DateToLoadEnd = first.DateToLoadEnd;
                            item.DateToLoadStart = first.DateToLoadStart;
                            item.DateTOMasterATA = first.DateTOMasterATA;
                            item.DateTOMasterATD = first.DateTOMasterATD;
                            item.DateTOMasterETA = first.DateTOMasterETA;
                            item.DateTOMasterETD = first.DateTOMasterETD;
                            item.DateFromCome = first.DateFromCome;
                            item.DateFromLeave = first.DateFromLeave;
                            item.DateFromLoadEnd = first.DateFromLoadEnd;
                            item.DateFromLoadStart = first.DateFromLoadStart;
                            item.DateData = first.DateData;

                            var queryKPIGroup = queryKPI.GroupBy(c => new { c.KPICode, c.KPIID }).ToList();
                            foreach (var itemKPIGroup in queryKPIGroup)
                            {
                                DTOREPDIKPI_Time_KPI itemColumn = new DTOREPDIKPI_Time_KPI();
                                itemColumn.DITOGroupProductID = item.DITOGroupProductID;
                                itemColumn.KeyCode = itemKPIGroup.Key.KPICode;
                                itemColumn.KPIID = itemKPIGroup.Key.KPIID;
                                itemColumn.IsKPI = itemKPIGroup.FirstOrDefault().IsKPI;
                                itemColumn.KPIDate = itemKPIGroup.FirstOrDefault().KPIDate;
                                itemColumn.LeadTime = itemKPIGroup.FirstOrDefault().LeadTime;
                                itemColumn.Zone = itemKPIGroup.FirstOrDefault().Zone;
                                itemColumn.ReasonID = itemKPIGroup.FirstOrDefault().ReasonID;
                                itemColumn.ReasonName = itemKPIGroup.FirstOrDefault().ReasonName;
                                itemColumn.Note = itemKPIGroup.FirstOrDefault().Note;
                                result.ListColumn.Add(itemColumn);
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPDIKPI_Time_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    if (isKPI)
                    {
                        var lstData = result.ListColumn.Where(c => c.IsKPI == true).Select(c => c.DITOGroupProductID).Distinct().ToList();
                        result.ListData = result.ListData.Where(c => lstData.Contains(c.DITOGroupProductID)).ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPDIKPI_Time REPDIKPI_TimeDate_OrderData(List<int> lstid, List<int> lstgroupid, List<int> lstStockID, DateTime dtfrom, DateTime dtto, bool isKPI, int? typeOfFilter, string request)
        {
            try
            {
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPDIKPI_Time();
                result.ListData = new List<DTOREPDIKPI_Time_Detail>();
                result.ListColumn = new List<DTOREPDIKPI_Time_KPI>();
                result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    if (lstgroupid == null || lstgroupid.Count == 0)
                        lstgroupid = new List<int>();
                    if (lstgroupid.Count > 0)
                        IsGroup = true;

                    if (lstStockID == null || lstStockID.Count == 0)
                        lstStockID = new List<int>();
                    if (lstStockID.Count > 0)
                        IsStock = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => lstid.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => lstid.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    result.ListData.AddRange(model.ORD_GroupProduct.Where(c => c.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.ORD_Order.StatusOfOrderID >= -(int)SYSVarType.StatusOfOrderPlaning &&
                        c.ORD_Order.DateConfig >= dtfrom && c.ORD_Order.DateConfig < dtto && lstid.Contains(c.ORD_Order.CustomerID) &&
                        (IsGroup ? lstgroupid.Contains(c.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.LocationFromID.Value) : true)).Select(c => new DTOREPDIKPI_Time_Detail
                        {
                            OrderID = c.OrderID,
                            OrderGroupProductID = c.ID,
                            OrderCode = c.ORD_Order.Code,
                            DNCode = c.DNCode,
                            SOCode = c.SOCode,
                            DateConfig = c.ORD_Order.DateConfig,
                            RequestDate = c.ORD_Order.RequestDate,
                            StockID = c.LocationFromID,
                            StockCode = c.LocationFromID > 0 ? c.CUS_Location.Code : "",
                            StockName = c.LocationFromID > 0 ? c.CUS_Location.LocationName : "",
                            StockAddress = c.LocationFromID > 0 ? c.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.PartnerID,
                            PartnerCode = c.PartnerID > 0 ? c.CUS_Partner.PartnerCode : "",
                            PartnerName = c.PartnerID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            GroupOfLocationToCode = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.LocationToID > 0 && c.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.CUSRoutingID,
                            CUSRoutingCode = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.CUSRoutingID > 0 ? c.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.GroupOfProductID,
                            GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                            ProductDescription = c.ORD_Product.FirstOrDefault().CUS_Product.Description,
                            GroupOfVehicleCode = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            FINSort = c.FINSort,
                            AreaToCodeCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.Code : "",
                            AreaToNameCredit = c.CUSRoutingID > 0 && c.CUS_Routing.CAT_Routing.RoutingAreaToID > 0 ? c.CUS_Routing.CAT_Routing.CAT_RoutingArea1.AreaName : "",
                            CustomerID = c.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Order.CUS_Customer.CustomerName : c.ORD_Order.CUS_Customer.ShortName,

                            TonOrder = c.Ton,
                            CBMOrder = c.CBM,
                            QuantityOrder = c.Quantity,

                            KgOrder = c.Ton * 1000,

                            OrderCreatedBy = c.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.ORD_Order.CreatedDate,

                            ExternalCode = c.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_Order.UserDefine2,

                            PODStatus = sPODStatusNotComplete,
                            HasCashCollect = "",
                            ORDGroupNote1 = c.Note1,
                            ORDGroupNote2 = c.Note2,

                            lstProductCode = c.ORD_Product.Select(d => d.CUS_Product.Code).ToList(),
                            lstProductName = c.ORD_Product.Select(d => d.CUS_Product.ProductName).ToList(),
                        }).ToList());

                    var lstData = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 &&
                        c.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                        lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) &&
                        (IsGroup ? lstgroupid.Contains(c.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.ORD_GroupProduct.LocationFromID.Value) : true) &&
                        (IsVen ? c.DITOMasterID > 0 && c.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new DTOREPDIKPI_Time_Detail
                        {
                            DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                            TotalLocation = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.TotalLocation : 0,

                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID.Value,

                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,

                            DateDN = c.DateDN,

                            OPSContract = c.DITOMasterID.HasValue && c.OPS_DITOMaster.ContractID.HasValue ? c.OPS_DITOMaster.CAT_Contract.ContractNo : string.Empty,
                            OPSRouting = c.DITOMasterID.HasValue && c.OPS_DITOMaster.CATRoutingID.HasValue ? c.OPS_DITOMaster.CAT_Routing.RoutingName : string.Empty,
                            OPSGroupProductRouting = c.CATRoutingID.HasValue ? c.CAT_Routing.RoutingName : string.Empty,

                            GroupOfVehicleCodeVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleNameVEN = c.DITOMasterID.HasValue && c.OPS_DITOMaster.GroupOfVehicleID.HasValue ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : string.Empty,

                            KM = c.OPS_DITOMaster.KM,
                            ETD = c.OPS_DITOMaster.ETD,
                            ETA = c.OPS_DITOMaster.ETA,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateFromLoadStart = c.DateFromLoadStart,
                            DateFromLoadEnd = c.DateFromLoadEnd,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            DateToLoadStart = c.DateToLoadStart,
                            DateToLoadEnd = c.DateToLoadEnd,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnDate = c.InvoiceReturnDate,
                            InvoiceReturnNote = c.InvoiceReturnNote,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            VehicleCode = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_DITOMaster.VendorOfVehicleID.HasValue ? c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : string.Empty,

                            ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                            TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : string.Empty,
                            TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : string.Empty,

                            OPSGroupNote1 = c.Note1,
                            OPSGroupNote2 = c.Note2,


                            PODStatus = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? sPODStatusComplete : sPODStatusNotComplete,
                            HasCashCollect = c.ORD_GroupProduct.HasCashCollect.HasValue ? (c.ORD_GroupProduct.HasCashCollect.Value ? "x" : "") : "",

                            MaxWeightCal = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null,
                            RegWeight = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegWeight : null,
                            RegCapacity = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegCapacity : null,

                            OPSDateConfig = c.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.DateConfig,
                        }).ToList();

                    var lstKPIData = model.KPI_TimeDate.Where(c => c.DITOGroupProductID > 0 && lstid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID) && c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.DITOMasterID > 0 &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto &&
                        (IsGroup ? lstgroupid.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID.Value) : true) &&
                        (IsStock ? lstStockID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID.Value) : true) &&
                        (IsVen ? c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 && lstVenID.Contains(c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value) : true)).Select(c => new
                        {
                            ID = c.ID,
                            c.OPS_DITOGroupProduct.OrderGroupProductID,
                            c.DITOGroupProductID,
                            c.DateData,
                            c.KPIDate,
                            KPIID = c.TypeOfKPIID,
                            KPICode = c.KPI_TypeOfKPI.Code,
                            c.IsKPI,
                            c.Zone,
                            c.LeadTime,
                            c.ReasonID,
                            ReasonName = c.ReasonID > 0 ? c.KPI_Reason.ReasonName : "",
                            c.DateDN,
                            c.DateToCome,
                            c.DateToLeave,
                            c.DateToLoadEnd,
                            c.DateToLoadStart,
                            c.DateTOMasterATA,
                            c.DateTOMasterATD,
                            c.DateTOMasterETA,
                            c.DateTOMasterETD,
                            c.DateFromCome,
                            c.DateFromLeave,
                            c.DateFromLoadEnd,
                            c.DateFromLoadStart,
                            c.DateInvoice,
                            c.Note,
                        }).ToList();

                    var lstMasterID = result.ListData.Where(c => c.DITOMasterID > 0).Select(c => c.DITOMasterID).Distinct().ToList();
                    var lstMaster = model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.TotalLocation > 0 ? c.TotalLocation.Value : 1,
                        TotalLocationDelivery = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || d.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery).Count(),
                    }).ToList();
                    var lstOrderID = result.ListData.Where(c => c.OrderID > 0).Select(c => c.OrderID).Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        TotalLocation = c.ORD_GroupProduct.Select(d => d.CUS_Location.LocationID).Distinct().Count() + c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                        TotalLocationDelivery = c.ORD_GroupProduct.Select(d => d.CUS_Location1.LocationID).Distinct().Count(),
                    }).ToList();

                    result.ListColumnKey = lstKPIData.Select(c => new DTOREPDIKPI_Time_KPI { KeyCode = c.KPICode, KPIID = c.KPIID }).Distinct().ToList();

                    foreach (var item in result.ListData)
                    {
                        var master = lstMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        var order = lstOrder.FirstOrDefault(c => c.ID == item.OrderID);

                        item.TotalLocationMaster = master != null ? master.TotalLocation : 0;
                        item.TotalLocationMasterDelivery = master != null ? master.TotalLocationDelivery : 0;
                        item.TotalLocationOrder = order != null ? order.TotalLocation : 0;
                        item.TotalLocationOrderDelivery = order != null ? order.TotalLocationDelivery : 0;

                        item.ProductCode = string.Join(",", item.lstProductCode.Distinct().ToList());
                        item.ProductName = string.Join(",", item.lstProductName.Distinct().ToList());
                        item.PartnerCodeName = item.PartnerCode + "-" + item.PartnerName;

                        if (item.DITOMasterID > 0)
                        {
                            item.ScheduleTonTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.TonTranfer);
                            item.ScheduleCBMTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.CBMTranfer);
                            item.ScheduleQuantityTranfer = result.ListData.Where(c => c.DITOMasterID == item.DITOMasterID).Sum(c => c.QuantityTranfer);
                        }

                        var queryOPS = lstData.Where(c => c.OrderGroupProductID == item.OrderGroupProductID);
                        if (queryOPS.Count() > 0)
                        {
                            var first = queryOPS.FirstOrDefault();
                            item.DateDN = first.DateDN;
                            item.DateToCome = first.DateToCome;
                            item.DateToLeave = first.DateToLeave;
                            item.DateToLoadEnd = first.DateToLoadEnd;
                            item.DateToLoadStart = first.DateToLoadStart;
                            item.DateTOMasterATA = first.DateTOMasterATA;
                            item.DateTOMasterATD = first.DateTOMasterATD;
                            item.DateTOMasterETA = first.DateTOMasterETA;
                            item.DateTOMasterETD = first.DateTOMasterETD;
                            item.DateFromCome = first.DateFromCome;
                            item.DateFromLeave = first.DateFromLeave;
                            item.DateFromLoadEnd = first.DateFromLoadEnd;
                            item.DateFromLoadStart = first.DateFromLoadStart;
                            item.DateData = first.DateData;

                            item.DITOMasterID = first.DITOMasterID;
                            item.TOMasterCode = first.TOMasterCode;
                            item.TotalLocation = first.TotalLocation;
                            item.OPSContract = first.OPSContract;
                            item.OPSDateConfig = first.OPSDateConfig;
                            item.OPSGroupNote1 = first.OPSGroupNote1;
                            item.OPSGroupNote2 = first.OPSGroupNote2;
                            item.OPSGroupProductDateConfig = first.OPSGroupProductDateConfig;
                            item.OPSGroupProductRouting = first.OPSGroupProductRouting;
                            item.OPSRouting = first.OPSRouting;
                            item.GroupOfProductVendorCode = first.GroupOfProductVendorCode;
                            item.GroupOfProductVendorName = first.GroupOfProductVendorName;
                            item.GroupOfVehicleCode = first.GroupOfVehicleCode;
                            item.GroupOfVehicleCodeVEN = first.GroupOfVehicleCodeVEN;
                            item.InvoiceDate = first.InvoiceDate;
                            item.InvoiceNote = first.InvoiceNote;
                            item.InvoiceReturnDate = first.InvoiceReturnDate;
                            item.InvoiceReturnNote = first.InvoiceReturnNote;
                            item.KM = first.KM;
                            item.ETA = first.ETA;
                            item.ETD = first.ETD;
                            item.DriverName = first.DriverName;
                            item.VehicleCode = first.VehicleCode;
                            item.VehicleID = first.VehicleID;
                            item.VendorCode = first.VendorCode;
                            item.VendorID = first.VendorID;
                            item.VendorName = first.VendorName;
                            item.VendorShortName = first.VendorShortName;
                            item.RegCapacity = first.RegCapacity;
                            item.RegWeight = first.RegWeight;
                            item.MaxWeightCal = first.MaxWeightCal;
                            item.TransportModeCost = first.TransportModeCost;
                            item.TransportModeIncome = first.TransportModeIncome;
                            item.TOMasterCode = first.TOMasterCode;
                            item.TOMasterNote1 = first.TOMasterNote1;
                            item.TOMasterNote2 = first.TOMasterNote2;

                            item.TonTranfer = queryOPS.Sum(c => c.TonTranfer);
                            item.CBMTranfer = queryOPS.Sum(c => c.CBMTranfer);
                            item.QuantityTranfer = queryOPS.Sum(c => c.QuantityTranfer);
                            item.KgTranfer = item.TonTranfer * 1000;
                            item.TonBBGN = queryOPS.Sum(c => c.TonBBGN);
                            item.CBMBBGN = queryOPS.Sum(c => c.CBMBBGN);
                            item.QuantityBBGN = queryOPS.Sum(c => c.QuantityBBGN);
                            item.KgBBGN = item.TonBBGN * 1000;
                            item.TonReturn = queryOPS.Sum(c => c.TonReturn);
                            item.CBMReturn = queryOPS.Sum(c => c.CBMReturn);
                            item.QuantityReturn = queryOPS.Sum(c => c.QuantityReturn);
                            item.KgReturn = item.TonReturn * 1000;
                        }
                        var queryKPI = lstKPIData.Where(c => c.OrderGroupProductID == item.OrderGroupProductID);
                        if (queryKPI.Count() > 0)
                        {
                            var first = queryKPI.FirstOrDefault();
                            item.DateDN = first.DateDN;
                            item.DateToCome = first.DateToCome;
                            item.DateToLeave = first.DateToLeave;
                            item.DateToLoadEnd = first.DateToLoadEnd;
                            item.DateToLoadStart = first.DateToLoadStart;
                            item.DateTOMasterATA = first.DateTOMasterATA;
                            item.DateTOMasterATD = first.DateTOMasterATD;
                            item.DateTOMasterETA = first.DateTOMasterETA;
                            item.DateTOMasterETD = first.DateTOMasterETD;
                            item.DateFromCome = first.DateFromCome;
                            item.DateFromLeave = first.DateFromLeave;
                            item.DateFromLoadEnd = first.DateFromLoadEnd;
                            item.DateFromLoadStart = first.DateFromLoadStart;
                            item.DateData = first.DateData;

                            var queryKPIGroup = queryKPI.GroupBy(c => new { c.KPICode, c.KPIID }).ToList();
                            foreach (var itemKPIGroup in queryKPIGroup)
                            {
                                DTOREPDIKPI_Time_KPI itemColumn = new DTOREPDIKPI_Time_KPI();
                                itemColumn.OrderGroupProductID = item.OrderGroupProductID;
                                itemColumn.KeyCode = itemKPIGroup.Key.KPICode;
                                itemColumn.KPIID = itemKPIGroup.Key.KPIID;
                                itemColumn.IsKPI = itemKPIGroup.FirstOrDefault().IsKPI;
                                itemColumn.KPIDate = itemKPIGroup.FirstOrDefault().KPIDate;
                                itemColumn.LeadTime = itemKPIGroup.FirstOrDefault().LeadTime;
                                itemColumn.Zone = itemKPIGroup.FirstOrDefault().Zone;
                                itemColumn.ReasonID = itemKPIGroup.FirstOrDefault().ReasonID;
                                itemColumn.ReasonName = itemKPIGroup.FirstOrDefault().ReasonName;
                                itemColumn.Note = itemKPIGroup.FirstOrDefault().Note;
                                result.ListColumn.Add(itemColumn);
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPDIKPI_Time_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.FINSort).ThenBy(c => c.OrderCode).ToList();

                    if (isKPI)
                    {
                        var lstDataKPI = result.ListColumn.Where(c => c.IsKPI == true).Select(c => c.DITOGroupProductID).Distinct().ToList();
                        result.ListData = result.ListData.Where(c => lstDataKPI.Contains(c.DITOGroupProductID)).ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region REPCOOPSPlan
        public List<DTOREPCOOPSPlan_Detail> REPCOOPSPlan_DetailData(List<int> lstid, DateTime dtfrom, DateTime dtto, int statusID, List<int> listServiceOfOrderID)
        {
            try
            {
                DateTime? dtNull = null;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new List<DTOREPCOOPSPlan_Detail>();
                var IsServiceOfOrder = false;
                if (listServiceOfOrderID == null || listServiceOfOrderID.Count == 0)
                    listServiceOfOrderID = new List<int>();
                if (listServiceOfOrderID.Count > 0)
                    IsServiceOfOrder = true;

                using (var model = new DataEntities())
                {
                    #region Tất cả
                    if (statusID == 1)
                    {
                        result = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= dtfrom && c.OPS_COTOMaster.ETD < dtto) || (c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtfrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtto)) &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => new DTOREPCOOPSPlan_Detail
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : "",
                            OPSContainerID = c.ID,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            OrderContainerNote = c.OPS_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.DateConfig.HasValue ? c.OPS_Container.ORD_Container.DateConfig : dtNull,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,
                            CUSRoutingCode = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",
                            PackingID = c.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,

                            DriverName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverName1 : string.Empty,
                            TelNo = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : null,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID : null,
                            VendorCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "Xe nhà" : "",
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,
                            UserDefine4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4,
                            UserDefine5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5,
                            UserDefine6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6,
                            UserDefine7 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine7,
                            UserDefine8 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine8,
                            UserDefine9 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine9,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETD : null,
                            ETA = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETA : null,

                            StatusOfCOContainerID = c.StatusOfCOContainerID,
                            StatusOfCOContainerCode = c.SYS_Var.Code,
                            StatusOfCOContainerName = c.SYS_Var.ValueOfVar,

                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code: string.Empty,
                            VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            TypeOfWAInspectionStatus = c.OPS_Container.ORD_Container.TypeOfWAInspectionID > 0 ? (c.OPS_Container.ORD_Container.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : "") : (c.OPS_Container.ORD_Container.ORD_Order.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : ""),
                            InspectionDate = c.OPS_Container.ORD_Container.DateInspect.HasValue ? c.OPS_Container.ORD_Container.DateInspect : c.OPS_Container.ORD_Container.ORD_Order.DateInspect,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            OrderContainerETD = c.OPS_Container.ORD_Container.ETD,
                            OrderContainerETA = c.OPS_Container.ORD_Container.ETA,
                            OrderContainerETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                            OrderContainerETARequest = c.OPS_Container.ORD_Container.ETARequest,

                            ORDContainerTon = c.OPS_Container.ORD_Container.Ton,
                            ORDContainerID = c.OPS_Container.ContainerID,
                        }).ToList();
                    }
                    #endregion

                    #region Đã lập
                    if (statusID == 2)
                    {
                        result = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= dtfrom && c.OPS_COTOMaster.ETD < dtto &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => new DTOREPCOOPSPlan_Detail
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : "",
                            OPSContainerID = c.ID,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            OrderContainerNote = c.OPS_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.DateConfig.HasValue ? c.OPS_Container.ORD_Container.DateConfig : dtNull,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,
                            CUSRoutingCode = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",
                            PackingID = c.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,

                            DriverName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverName1 : string.Empty,
                            TelNo = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : null,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID : null,
                            VendorCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "Xe nhà" : "",
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,
                            UserDefine4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4,
                            UserDefine5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5,
                            UserDefine6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6,
                            UserDefine7 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine7,
                            UserDefine8 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine8,
                            UserDefine9 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine9,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETD : null,
                            ETA = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETA : null,

                            StatusOfCOContainerID = c.StatusOfCOContainerID,
                            StatusOfCOContainerCode = c.SYS_Var.Code,
                            StatusOfCOContainerName = c.SYS_Var.ValueOfVar,

                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            TypeOfWAInspectionStatus = c.OPS_Container.ORD_Container.TypeOfWAInspectionID > 0 ? (c.OPS_Container.ORD_Container.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : "") : (c.OPS_Container.ORD_Container.ORD_Order.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : ""),
                            InspectionDate = c.OPS_Container.ORD_Container.DateInspect.HasValue ? c.OPS_Container.ORD_Container.DateInspect : c.OPS_Container.ORD_Container.ORD_Order.DateInspect,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            OrderContainerETD = c.OPS_Container.ORD_Container.ETD,
                            OrderContainerETA = c.OPS_Container.ORD_Container.ETA,
                            OrderContainerETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                            OrderContainerETARequest = c.OPS_Container.ORD_Container.ETARequest,

                            ORDContainerTon = c.OPS_Container.ORD_Container.Ton,
                            ORDContainerID = c.OPS_Container.ContainerID,
                        }).ToList();
                    }
                    #endregion

                    #region Chưa lập
                    if (statusID == 3)
                    {
                        result = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.COTOMasterID == null && c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtfrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtto &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => new DTOREPCOOPSPlan_Detail
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : "",
                            OPSContainerID = c.ID,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            OrderContainerNote = c.OPS_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.DateConfig.HasValue ? c.OPS_Container.ORD_Container.DateConfig : dtNull,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,
                            CUSRoutingCode = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",
                            PackingID = c.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,

                            DriverName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverName1 : string.Empty,
                            TelNo = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : null,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID : null,
                            VendorCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "Xe nhà" : "",
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,
                            UserDefine4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4,
                            UserDefine5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5,
                            UserDefine6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6,
                            UserDefine7 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine7,
                            UserDefine8 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine8,
                            UserDefine9 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine9,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETD : null,
                            ETA = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETA : null,

                            StatusOfCOContainerID = c.StatusOfCOContainerID,
                            StatusOfCOContainerCode = c.SYS_Var.Code,
                            StatusOfCOContainerName = c.SYS_Var.ValueOfVar,

                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            TypeOfWAInspectionStatus = c.OPS_Container.ORD_Container.TypeOfWAInspectionID > 0 ? (c.OPS_Container.ORD_Container.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : "") : (c.OPS_Container.ORD_Container.ORD_Order.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : ""),
                            InspectionDate = c.OPS_Container.ORD_Container.DateInspect.HasValue ? c.OPS_Container.ORD_Container.DateInspect : c.OPS_Container.ORD_Container.ORD_Order.DateInspect,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            OrderContainerETD = c.OPS_Container.ORD_Container.ETD,
                            OrderContainerETA = c.OPS_Container.ORD_Container.ETA,
                            OrderContainerETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                            OrderContainerETARequest = c.OPS_Container.ORD_Container.ETARequest,

                            ORDContainerTon = c.OPS_Container.ORD_Container.Ton,
                            ORDContainerID = c.OPS_Container.ContainerID,
                        }).ToList();
                    }
                    #endregion

                    var lstOrderID = result.Select(c => c.OrderID).Distinct();
                    var lstGroupOfProduct = model.ORD_GroupProduct.Where(c => lstOrderID.Contains(c.OrderID)).Select(c => new
                    {
                        OrderID = c.OrderID,
                        Code = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.Code : "",
                        Name = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.GroupName : "",
                        Description = c.Description,
                        OrderContainerID = c.ContainerID,
                    });

                    foreach (var item in result)
                    {
                        var lstGOP = lstGroupOfProduct.Where(c => c.OrderID == item.OrderID && c.OrderContainerID == item.ORDContainerID);
                        if (lstGOP != null && lstGOP.Count() > 0)
                        {
                            item.GroupOfProductCode = string.Join(", ", lstGOP.Select(c => c.Code));
                            item.GroupOfProductName = string.Join(", ", lstGOP.Select(c => c.Name));
                            item.GroupOfProductDescription = lstGOP.FirstOrDefault().Description;
                        }
                    }
                }

                result = result.OrderBy(c => c.COTOMasterID).ThenBy(c => c.ETD).ThenBy(c => c.OrderID).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPCOOPSPlan_ColumnDetail REPCOOPSPlan_ColumnDetailData(List<int> lstid, DateTime dtfrom, DateTime dtto, int statusID, List<int> listServiceOfOrderID)
        {
            try
            {
                DateTime? dtNull = null;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new DTOREPCOOPSPlan_ColumnDetail();
                result.ListData = new List<DTOREPCOOPSPlan_ColumnDetail_Data>();
                result.ListColumn = new List<DTOREPCOOPSPlan_ColumnDetail_Container>();

                var IsServiceOfOrder = false;
                if (listServiceOfOrderID == null || listServiceOfOrderID.Count == 0)
                    listServiceOfOrderID = new List<int>();
                if (listServiceOfOrderID.Count > 0)
                    IsServiceOfOrder = true;

                using (var model = new DataEntities())
                {
                    #region Tất cả
                    var ListData = model.OPS_COTOContainer.Where(c => c.ID == -1).Select(c => new
                    {
                        COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                        COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : "",
                        OrderID = c.OPS_Container.ORD_Container.OrderID,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        SealNo1 = c.OPS_Container.SealNo1,
                        SealNo2 = c.OPS_Container.SealNo2,
                        ContainerNo = c.OPS_Container.ContainerNo,
                        OrderContainerNote = c.OPS_Container.Note,
                        DateConfig = c.OPS_Container.ORD_Container.DateConfig.HasValue ? c.OPS_Container.ORD_Container.DateConfig : dtNull,
                        RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                        LocationFromID = c.LocationFromID,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromName = c.CAT_Location.Location,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationToID = c.LocationToID,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToName = c.CAT_Location1.Location,
                        LocationToAddress = c.CAT_Location1.Address,
                        LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                        LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,

                        DriverName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverName1 : string.Empty,
                        TelNo = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverTel1 : string.Empty,
                        DrivingLicense = string.Empty,

                        VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : null,
                        VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                        VendorID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID : null,
                        VendorCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà" : "",
                        VendorName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                        VendorShortName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "Xe nhà" : "",
                        CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                        CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                        CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                        ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                        ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                        UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                        UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                        UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,
                        UserDefine4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4,
                        UserDefine5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5,
                        UserDefine6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6,
                        UserDefine7 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine7,
                        UserDefine8 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine8,
                        UserDefine9 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine9,

                        KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                        ETD = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETD : null,
                        ETA = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETA : null,
                        OrderContainerETD = c.OPS_Container.ORD_Container.ETD,
                        OrderContainerETA = c.OPS_Container.ORD_Container.ETA,
                        OrderContainerETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                        OrderContainerETARequest = c.OPS_Container.ORD_Container.ETARequest,

                        StatusOfCOContainerID = c.StatusOfCOContainerID,
                        StatusOfCOContainerCode = c.SYS_Var.Code,
                        StatusOfCOContainerName = c.SYS_Var.ValueOfVar,

                        CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                        Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                        Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                        ETARequest = c.OPS_Container.ORD_Container.ETA,
                        TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                        CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                        CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                        LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                        LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                        LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                        LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                        TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                        VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                        VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                        TypeOfWAInspectionStatus = c.OPS_Container.ORD_Container.TypeOfWAInspectionID > 0 ? (c.OPS_Container.ORD_Container.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : "") : (c.OPS_Container.ORD_Container.ORD_Order.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : ""),
                        InspectionDate = c.OPS_Container.ORD_Container.DateInspect.HasValue ? c.OPS_Container.ORD_Container.DateInspect : c.OPS_Container.ORD_Container.ORD_Order.DateInspect,
                        ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                        ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                        ORDContainerTon = c.OPS_Container.ORD_Container.Ton,
                        ORDContainerID = c.OPS_Container.ContainerID,
                    }).Distinct().ToList();

                    var ListOPS = model.OPS_COTOContainer.Where(c => c.ID == -1).Select(c => new
                    {
                        COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                        OrderID = c.OPS_Container.ORD_Container.OrderID,
                        LocationFromID = c.LocationFromID,
                        LocationToID = c.LocationToID,
                        PackingID = c.OPS_Container.ORD_Container.PackingID,
                        PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                    }).Distinct().ToList();

                    if (statusID == 1)
                    {
                        ListData = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= dtfrom && c.OPS_COTOMaster.ETD < dtto) || (c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtfrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtto)) &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => new
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : "",
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            OrderContainerNote = c.OPS_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.DateConfig.HasValue ? c.OPS_Container.ORD_Container.DateConfig : dtNull,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,

                            DriverName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverName1 : string.Empty,
                            TelNo = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : null,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID : null,
                            VendorCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "Xe nhà" : "",
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,
                            UserDefine4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4,
                            UserDefine5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5,
                            UserDefine6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6,
                            UserDefine7 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine7,
                            UserDefine8 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine8,
                            UserDefine9 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine9,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETD : null,
                            ETA = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETA : null,
                            OrderContainerETD = c.OPS_Container.ORD_Container.ETD,
                            OrderContainerETA = c.OPS_Container.ORD_Container.ETA,
                            OrderContainerETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                            OrderContainerETARequest = c.OPS_Container.ORD_Container.ETARequest,

                            StatusOfCOContainerID = c.StatusOfCOContainerID,
                            StatusOfCOContainerCode = c.SYS_Var.Code,
                            StatusOfCOContainerName = c.SYS_Var.ValueOfVar,

                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            TypeOfWAInspectionStatus = c.OPS_Container.ORD_Container.TypeOfWAInspectionID > 0 ? (c.OPS_Container.ORD_Container.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : "") : (c.OPS_Container.ORD_Container.ORD_Order.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : ""),
                            InspectionDate = c.OPS_Container.ORD_Container.DateInspect.HasValue ? c.OPS_Container.ORD_Container.DateInspect : c.OPS_Container.ORD_Container.ORD_Order.DateInspect,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,

                            ORDContainerTon = c.OPS_Container.ORD_Container.Ton,
                            ORDContainerID = c.OPS_Container.ContainerID,
                        }).Distinct().ToList();

                        ListOPS = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= dtfrom && c.OPS_COTOMaster.ETD < dtto) || (c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtfrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtto)) &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => new
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            PackingID = c.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                        }).ToList();
                    }
                    #endregion

                    #region Đã lập
                    if (statusID == 2)
                    {
                        ListData = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= dtfrom && c.OPS_COTOMaster.ETD < dtto &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => new
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : "",
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            OrderContainerNote = c.OPS_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.DateConfig.HasValue ? c.OPS_Container.ORD_Container.DateConfig : dtNull,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,

                            DriverName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverName1 : string.Empty,
                            TelNo = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : null,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID : null,
                            VendorCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "Xe nhà" : "",
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,
                            UserDefine4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4,
                            UserDefine5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5,
                            UserDefine6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6,
                            UserDefine7 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine7,
                            UserDefine8 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine8,
                            UserDefine9 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine9,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETD : null,
                            ETA = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETA : null,
                            OrderContainerETD = c.OPS_Container.ORD_Container.ETD,
                            OrderContainerETA = c.OPS_Container.ORD_Container.ETA,
                            OrderContainerETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                            OrderContainerETARequest = c.OPS_Container.ORD_Container.ETARequest,

                            StatusOfCOContainerID = c.StatusOfCOContainerID,
                            StatusOfCOContainerCode = c.SYS_Var.Code,
                            StatusOfCOContainerName = c.SYS_Var.ValueOfVar,

                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            TypeOfWAInspectionStatus = c.OPS_Container.ORD_Container.TypeOfWAInspectionID > 0 ? (c.OPS_Container.ORD_Container.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : "") : (c.OPS_Container.ORD_Container.ORD_Order.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : ""),
                            InspectionDate = c.OPS_Container.ORD_Container.DateInspect.HasValue ? c.OPS_Container.ORD_Container.DateInspect : c.OPS_Container.ORD_Container.ORD_Order.DateInspect,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,

                            ORDContainerTon = c.OPS_Container.ORD_Container.Ton,
                            ORDContainerID = c.OPS_Container.ContainerID,
                        }).Distinct().ToList();

                        ListOPS = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= dtfrom && c.OPS_COTOMaster.ETD < dtto &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => new
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            PackingID = c.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                        }).ToList();
                    }
                    #endregion

                    #region Chưa lập
                    if (statusID == 3)
                    {
                        ListData = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.COTOMasterID == null && c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtfrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtto &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => new
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : "",
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            OrderContainerNote = c.OPS_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.DateConfig.HasValue ? c.OPS_Container.ORD_Container.DateConfig : dtNull,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,

                            DriverName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverName1 : string.Empty,
                            TelNo = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : null,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID : null,
                            VendorCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "Xe nhà" : "",
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,
                            UserDefine4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4,
                            UserDefine5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5,
                            UserDefine6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6,
                            UserDefine7 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine7,
                            UserDefine8 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine8,
                            UserDefine9 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine9,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETD : null,
                            ETA = c.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOMaster.ETA : null,
                            OrderContainerETD = c.OPS_Container.ORD_Container.ETD,
                            OrderContainerETA = c.OPS_Container.ORD_Container.ETA,
                            OrderContainerETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                            OrderContainerETARequest = c.OPS_Container.ORD_Container.ETARequest,

                            StatusOfCOContainerID = c.StatusOfCOContainerID,
                            StatusOfCOContainerCode = c.SYS_Var.Code,
                            StatusOfCOContainerName = c.SYS_Var.ValueOfVar,

                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            TypeOfWAInspectionStatus = c.OPS_Container.ORD_Container.TypeOfWAInspectionID > 0 ? (c.OPS_Container.ORD_Container.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : "") : (c.OPS_Container.ORD_Container.ORD_Order.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : ""),
                            InspectionDate = c.OPS_Container.ORD_Container.DateInspect.HasValue ? c.OPS_Container.ORD_Container.DateInspect : c.OPS_Container.ORD_Container.ORD_Order.DateInspect,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,

                            ORDContainerTon = c.OPS_Container.ORD_Container.Ton,
                            ORDContainerID = c.OPS_Container.ContainerID,
                        }).Distinct().ToList();

                        ListOPS = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.COTOMasterID == null && c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtfrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtto &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => new
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            PackingID = c.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                        }).ToList();
                    }
                    #endregion

                    var lstContainer = ListOPS.Select(c => new { c.PackingID, c.PackingCode }).Distinct().ToList();

                    var lstOrderID = ListData.Select(c => c.OrderID).Distinct();
                    var lstGroupOfProduct = model.ORD_GroupProduct.Where(c => lstOrderID.Contains(c.OrderID)).Select(c => new
                    {
                        OrderID = c.OrderID,
                        Code = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.Code : "",
                        Name = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.GroupName : "",
                        Description = c.Description,
                        OrderContainerID = c.ContainerID,
                    });

                    foreach (var itemData in ListData)
                    {
                        DTOREPCOOPSPlan_ColumnDetail_Data item = new DTOREPCOOPSPlan_ColumnDetail_Data
                        {
                            COTOMasterID = itemData.COTOMasterID,
                            COMasterCode = itemData.COMasterCode,

                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            SealNo1 = itemData.SealNo1,
                            SealNo2 = itemData.SealNo2,
                            ContainerNo = itemData.ContainerNo,
                            OrderContainerNote = itemData.OrderContainerNote,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            LocationFromID = itemData.LocationFromID,
                            LocationFromCode = itemData.LocationFromCode,
                            LocationFromName = itemData.LocationFromName,
                            LocationFromAddress = itemData.LocationFromAddress,
                            LocationToID = itemData.LocationToID,
                            LocationToCode = itemData.LocationToCode,
                            LocationToName = itemData.LocationToName,
                            LocationToAddress = itemData.LocationToAddress,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,

                            VehicleID = itemData.VehicleID,
                            VehicleCode = itemData.VehicleCode,
                            VendorID = itemData.VendorID,
                            VendorCode = itemData.VendorCode,
                            VendorName = itemData.VendorName,
                            VendorShortName = itemData.VendorShortName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,
                            UserDefine3 = itemData.UserDefine3,
                            UserDefine4 = itemData.UserDefine4,
                            UserDefine5 = itemData.UserDefine5,
                            UserDefine6 = itemData.UserDefine6,
                            UserDefine7 = itemData.UserDefine7,
                            UserDefine8 = itemData.UserDefine8,
                            UserDefine9 = itemData.UserDefine9,

                            ETA = itemData.ETA,
                            ETD = itemData.ETD,
                            OrderContainerETA = itemData.OrderContainerETA,
                            OrderContainerETD = itemData.OrderContainerETD,
                            OrderContainerETARequest = itemData.OrderContainerETARequest,
                            OrderContainerETDRequest = itemData.OrderContainerETDRequest,
                            KM = itemData.KM,

                            DriverName = itemData.DriverName,
                            DrivingLicense = itemData.DrivingLicense,
                            TelNo = itemData.TelNo,

                            StatusOfCOContainerID = itemData.StatusOfCOContainerID,
                            StatusOfCOContainerCode = itemData.StatusOfCOContainerCode,
                            StatusOfCOContainerName = itemData.StatusOfCOContainerName,

                            CutOffTime = itemData.CutOffTime,
                            Date_TimeGetEmpty = itemData.Date_TimeGetEmpty,
                            Date_TimeReturnEmpty = itemData.Date_TimeReturnEmpty,
                            ETARequest = itemData.ETARequest,
                            TypeOfContainerName = itemData.TypeOfContainerName,
                            CarrierCode = itemData.CarrierCode,
                            CarrierName = itemData.CarrierName,
                            LocationDepotCode = itemData.LocationDepotCode,
                            LocationDepotName = itemData.LocationDepotName,
                            LocationReturnCode = itemData.LocationReturnCode,
                            LocationReturnName = itemData.LocationReturnName,
                            TripNo = itemData.TripNo,
                            VesselNo = itemData.VesselNo,
                            VesselName = itemData.VesselName,
                            TypeOfWAInspectionStatus = itemData.TypeOfWAInspectionStatus,
                            InspectionDate = itemData.InspectionDate,
                            ServiceOfOrderIncome = itemData.ServiceOfOrderIncome,
                            ServiceOfOrderCost = itemData.ServiceOfOrderCost,

                            ORDContainerTon = itemData.ORDContainerTon,
                        };

                        var lstGOP = lstGroupOfProduct.Where(c => c.OrderID == item.OrderID && c.OrderContainerID == itemData.ORDContainerID);
                        if (lstGOP != null && lstGOP.Count() > 0)
                        {
                            item.GroupOfProductCode = string.Join(", ", lstGOP.Select(c => c.Code));
                            item.GroupOfProductName = string.Join(", ", lstGOP.Select(c => c.Name));
                            item.GroupOfProductDescription = lstGOP.FirstOrDefault().Description;
                        }

                        result.ListData.Add(item);

                        foreach (var itemContainer in lstContainer)
                        {
                            var queryOPSContainer = ListOPS.Where(c => c.COTOMasterID == item.COTOMasterID && c.OrderID == item.OrderID && c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID && c.PackingID == itemContainer.PackingID);
                            if (queryOPSContainer.Count() > 0)
                            {
                                var col = new DTOREPCOOPSPlan_ColumnDetail_Container();
                                col.COTOMasterID = item.COTOMasterID;
                                col.OrderID = item.OrderID > 0 ? item.OrderID.Value : -1;
                                col.PackingID = itemContainer.PackingID;
                                col.PackingCode = itemContainer.PackingCode;
                                col.LocationFromID = item.LocationFromID.Value;
                                col.LocationToID = item.LocationToID;
                                col.KeyCode = itemContainer.PackingCode;
                                col.Quantity = queryOPSContainer.Count();

                                result.ListColumn.Add(col);
                            }
                        }
                    }
                }

                result.ListData = result.ListData.OrderBy(c => c.COTOMasterID).ThenBy(c => c.ETD).ThenBy(c => c.OrderID).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOREPCOOPSPlan_Order> REPCOOPSPlan_OrderData(List<int> lstid, DateTime dtfrom, DateTime dtto, int statusID, List<int> listServiceOfOrderID)
        {
            try
            {
                DateTime? dtNull = null;
                DateTime dtNow = new DateTime();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                var result = new List<DTOREPCOOPSPlan_Order>();
                var IsServiceOfOrder = false;
                if (listServiceOfOrderID == null || listServiceOfOrderID.Count == 0)
                    listServiceOfOrderID = new List<int>();
                if (listServiceOfOrderID.Count > 0)
                    IsServiceOfOrder = true;

                List<int> lstOPSContainerID = new List<int>();
                using (var model = new DataEntities())
                {
                    #region Tất cả
                    if (statusID == 1)
                    {
                        lstOPSContainerID = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        ((c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= dtfrom && c.OPS_COTOMaster.ETD < dtto) || (c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtfrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtto)) &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => c.OPSContainerID).Distinct().ToList();
                    }
                    #endregion

                    #region Đã lập
                    if (statusID == 2)
                    {
                        lstOPSContainerID = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= dtfrom && c.OPS_COTOMaster.ETD < dtto &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => c.OPSContainerID).Distinct().ToList();
                    }
                    #endregion

                    #region Chưa lập
                    if (statusID == 3)
                    {
                        lstOPSContainerID = model.OPS_COTOContainer.Where(c => c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.COTOMasterID == null && c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtfrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtto &&
                        lstid.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && listServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)).Select(c => c.OPSContainerID).Distinct().ToList();
                    }
                    #endregion

                    result = model.OPS_Container.Where(c => lstOPSContainerID.Contains(c.ID)).Select(c => new DTOREPCOOPSPlan_Order
                        {
                            OrderID = c.ORD_Container.OrderID,
                            OPSContainerID = c.ID,
                            ORDContainerID = c.ContainerID,
                            OrderCode = c.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.SealNo1,
                            SealNo2 = c.SealNo2,
                            PackingID = c.ORD_Container.PackingID,
                            PackingCode = c.ORD_Container.CAT_Packing.Code,
                            OrderContainerNote = c.Note,
                            ContainerNo = c.ContainerNo,
                            DateConfig = c.ORD_Container.ORD_Order.DateConfig,
                            RequestDate = c.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.ORD_Container.LocationFromID,
                            LocationFromCode = c.ORD_Container.LocationFromID > 0 ? c.ORD_Container.CUS_Location.Code : "",
                            LocationFromName = c.ORD_Container.LocationFromID > 0 ? c.ORD_Container.CUS_Location.LocationName : "",
                            LocationFromAddress = c.ORD_Container.LocationFromID > 0 ? c.ORD_Container.CUS_Location.CAT_Location.Address : "",
                            LocationToID = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.LocationToID.Value : -1,
                            LocationToCode = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.Code : "",
                            LocationToName = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.LocationName : "",
                            LocationToAddress = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            CUSRoutingCode = c.ORD_Container.CUSRoutingID > 0 ? c.ORD_Container.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_Container.CUSRoutingID > 0 ? c.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",

                            CustomerID = c.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_Container.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Container.ORD_Order.CUS_Customer.CustomerName : c.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            OrderDateConfig = c.ORD_Container.ORD_Order.DateConfig,
                            OrderContract = c.ORD_Container.ORD_Order.ContractID > 0 ? c.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.ORD_Container.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.ORD_Container.ORD_Order.CreatedDate,

                            ExternalCode = c.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_Container.ORD_Order.UserDefine2,

                            UserDefine3 = c.ORD_Container.ORD_Order.UserDefine3,

                            CutOffTime = c.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.ORD_Container.DateReturnEmpty,
                            ETARequest = c.ORD_Container.ETA,
                            TypeOfContainerName = c.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.ORD_Container.ORD_Order.PartnerID > 0 ? c.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.ORD_Container.ORD_Order.PartnerID > 0 ? c.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.ORD_Container.LocationDepotID > 0 ? c.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.ORD_Container.LocationDepotID > 0 ? c.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.ORD_Container.LocationDepotReturnID > 0 ? c.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.ORD_Container.LocationDepotReturnID > 0 ? c.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.ORD_Container.VesselMasterCode,
                            VesselNo = c.ORD_Container.VesselID > 0 ? c.ORD_Container.CAT_Vessel.Code : string.Empty,
                        }).ToList();

                    var lstOPSContainer = model.OPS_COTOContainer.Where(c=> lstOPSContainerID.Contains(c.OPSContainerID)).Select(c => new
                        {
                            OPSContainerID = c.OPSContainerID,
                            ORDContainerID = c.OPS_Container.ContainerID,
                            COTOMasterID = c.COTOMasterID,
                            COTOMasterCode = c.COTOMasterID > 0 ? c.OPS_COTOMaster.Code : "",
                            ETD = c.COTOMasterID > 0 ? c.OPS_COTOMaster.ETD : dtNow,
                            ETA = c.COTOMasterID > 0 ? c.OPS_COTOMaster.ETA : dtNow,
                            VehicleCode = c.COTOMasterID > 0 && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorCode = c.COTOMasterID > 0 && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "",
                            VendorName = c.COTOMasterID > 0 && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.COTOMasterID > 0 && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "",
                            c.DateFromCome,
                            c.DateFromLeave,
                            c.DateToCome,
                            c.DateToLeave,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ContractTermIncome = c.OPS_Container.ORD_Container.ORD_Order.ContractTermID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ContractTerm.Code : string.Empty,
                            ContractTermCost = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                            RegWeight = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegWeight : null) : null,
                            RegCapacity = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegCapacity : null) : null,
                            StatusOfCOContainerName = c.StatusOfCOContainerID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                        }).ToList();

                    var lstOrderID = result.Select(c => c.OrderID).Distinct().ToList();
                    var lstGroupOfProduct = model.ORD_GroupProduct.Where(c => lstOrderID.Contains(c.OrderID)).Select(c => new
                    {
                        OrderID = c.OrderID,
                        Code = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.Code : "",
                        Name = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.GroupName : "",
                        Description = c.Description,
                        OrderContainerID = c.ContainerID,
                    });

                    foreach (var item in result)
                    {
                        var lstGOP = lstGroupOfProduct.Where(c => c.OrderID == item.OrderID && c.OrderContainerID == item.ORDContainerID);
                        if (lstGOP != null && lstGOP.Count() > 0)
                        {
                            item.GroupOfProductCode = string.Join(", ", lstGOP.Select(c => c.Code));
                            item.GroupOfProductName = string.Join(", ", lstGOP.Select(c => c.Name));
                            item.GroupOfProductDescription = lstGOP.FirstOrDefault().Description;
                        }

                        var master = lstOPSContainer.Where(c => c.COTOMasterID > 0 && c.OPSContainerID == item.OPSContainerID).FirstOrDefault();
                        if (master != null)
                        {
                            item.COTOMasterID = master.COTOMasterID.Value;
                            item.COMasterCode = master.COTOMasterCode;
                            item.ETD = master.ETD;
                            item.ETA = master.ETA;
                            item.VehicleCode = master.VehicleCode;
                            item.VendorCode = master.VendorCode;
                            item.VendorName = master.VendorName;
                            item.VendorShortName = master.VendorShortName;
                            item.DateFromCome = master.DateFromCome;
                            item.DateFromLeave = master.DateFromLeave;
                            item.DateToCome = master.DateToCome;
                            item.DateToLeave = master.DateToLeave;
                            item.RegCapacity = master.RegCapacity;
                            item.RegWeight = master.RegWeight;
                        }
                    }
                }

                result = result.OrderBy(c => c.COTOMasterID).ThenBy(c => c.ETD).ThenBy(c => c.OrderID).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region REPCOPL
        public List<DTOREPCOPL_Detail> REPCOPL_DetailData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.ManualFixCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.ManualFixDebit);

                var lstStatusCon = new List<int>();
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerEXEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerEXLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerIMLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerIMEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOGetEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOReturnEmpty);
                #endregion

                DateTime? dtNull = null;
                filter.DateFrom = filter.DateFrom.Date;
                filter.DateTo = filter.DateTo.AddDays(1).Date;
                DateTime dtNow = DateTime.Now;
                var result = new List<DTOREPCOPL_Detail>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    bool IsGroupLocation = false;
                    bool IsGroupPartner = false;
                    bool IsProvince = false;
                    bool IsServiceOfOrder = false;

                    if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                        filter.ListGroupProductID = new List<int>();
                    if (filter.ListGroupProductID.Count > 0)
                        IsGroup = true;

                    if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                        filter.ListStockID = new List<int>();
                    if (filter.ListStockID.Count > 0)
                        IsStock = true;

                    if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                        filter.ListGroupOfPartnerID = new List<int>();
                    if (filter.ListGroupOfPartnerID.Count > 0)
                        IsGroupPartner = true;

                    if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                        filter.ListGroupOfLocationID = new List<int>();
                    if (filter.ListGroupOfLocationID.Count > 0)
                        IsGroupLocation = true;

                    if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                        filter.ListProvinceID = new List<int>();
                    if (filter.ListProvinceID.Count > 0)
                        IsProvince = true;

                    if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                        filter.ListServiceOfOrderID = new List<int>();
                    if (filter.ListServiceOfOrderID.Count > 0)
                        IsServiceOfOrder = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    result = model.OPS_COTOContainer.Where(c => c.ParentID == null && c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.COTOMasterID > 0 &&
                        c.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo &&
                        lstCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) && lstStatusCon.Contains(c.StatusOfCOContainerID) &&
                        (IsProvince ? c.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        (filter.IsComplete ? c.OPS_Container.OPSContainerTypeID == -(int)SYSVarType.OPSContainerTypeComplete : true)).Select(c => new DTOREPCOPL_Detail
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : string.Empty,
                            OPSContainerID = c.ID,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            PackingID = c.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            OrderContainerNote = c.OPS_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,
                            CUSRoutingCode = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.Code : string.Empty,
                            CUSRoutingName = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : string.Empty,

                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID.Value : -1,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "",
                            VendorName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName == null ? c.OPS_COTOMaster.CUS_Customer.CustomerName : c.OPS_COTOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName : c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETD : dtNow,
                            ETA = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETA : dtNow,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,

                            OrderDateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            OrderContainerDateConfig = c.OPS_Container.ORD_Container.DateConfig,
                            OrderContract = c.OPS_Container.ORD_Container.ORD_Order.ContractID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_Container.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderContainerRouting = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DateConfig : dtNull,
                            OPSContract = c.COTOMasterID.HasValue && c.OPS_COTOMaster.ContractID > 0 ? c.OPS_COTOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.COTOMasterID.HasValue && c.OPS_COTOMaster.RoutingID > 0 ? c.OPS_COTOMaster.CAT_Routing.RoutingName : "",
                            OPSContainerRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.OPS_Container.ORD_Container.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_Container.ORD_Container.ORD_Order.CreatedDate,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ContractTermIncome = c.OPS_Container.ORD_Container.ORD_Order.ContractTermID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ContractTerm.Code : string.Empty,
                            ContractTermCost = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,

                            ContainerNo = c.OPS_Container.ContainerNo,

                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,

                            RegWeight = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegWeight : null) : null,
                            RegCapacity = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegCapacity : null) : null,

                            StatusOfCOContainerName = c.StatusOfCOContainerID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                            ORDContainerID = c.OPS_Container.ContainerID,
                        }).ToList();

                    if (!filter.IsComplete)
                    {
                        result.AddRange(model.OPS_COTOContainer.Where(c => c.ParentID == null && c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.COTOMasterID == null &&
                            c.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo && lstStatusCon.Contains(c.StatusOfCOContainerID) &&
                            (IsProvince ? c.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            lstCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new DTOREPCOPL_Detail
                            {
                                COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                                COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : string.Empty,
                                OPSContainerID = c.ID,
                                OrderID = c.OPS_Container.ORD_Container.OrderID,
                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                SealNo1 = c.OPS_Container.SealNo1,
                                SealNo2 = c.OPS_Container.SealNo2,
                                PackingID = c.OPS_Container.ORD_Container.PackingID,
                                PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                                OrderContainerNote = c.OPS_Container.Note,
                                DateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                                RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                                LocationFromID = c.LocationFromID,
                                LocationFromCode = c.CAT_Location.Code,
                                LocationFromName = c.CAT_Location.Location,
                                LocationFromAddress = c.CAT_Location.Address,
                                LocationToID = c.LocationToID,
                                LocationToCode = c.CAT_Location1.Code,
                                LocationToName = c.CAT_Location1.Location,
                                LocationToAddress = c.CAT_Location1.Address,
                                LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                                LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,
                                CUSRoutingCode = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.Code : string.Empty,
                                CUSRoutingName = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : string.Empty,

                                VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID.Value : -1,
                                VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                                VendorID = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                                VendorCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "",
                                VendorName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                                VendorShortName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "",

                                CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                                CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                                CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                                KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                                ETD = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETD : dtNow,
                                ETA = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETA : dtNow,
                                DateFromCome = c.DateFromCome,
                                DateFromLeave = c.DateFromLeave,
                                DateToCome = c.DateToCome,
                                DateToLeave = c.DateToLeave,

                                OrderDateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                                OrderContainerDateConfig = c.OPS_Container.ORD_Container.DateConfig,
                                OrderContract = c.OPS_Container.ORD_Container.ORD_Order.ContractID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                                OrderRouting = c.OPS_Container.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                                OrderContainerRouting = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",
                                OPSDateConfig = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DateConfig : dtNull,
                                OPSContract = c.COTOMasterID.HasValue && c.OPS_COTOMaster.ContractID > 0 ? c.OPS_COTOMaster.CAT_Contract.DisplayName : "",
                                OPSRouting = c.COTOMasterID.HasValue && c.OPS_COTOMaster.RoutingID > 0 ? c.OPS_COTOMaster.CAT_Routing.RoutingName : "",
                                OPSContainerRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                                OrderCreatedBy = c.OPS_Container.ORD_Container.ORD_Order.CreatedBy,
                                OrderCreatedDate = c.OPS_Container.ORD_Container.ORD_Order.CreatedDate,

                                ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                                ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                                UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                                UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                                UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,

                                ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                ContractTermIncome = c.OPS_Container.ORD_Container.ORD_Order.ContractTermID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ContractTerm.Code : string.Empty,
                                ContractTermCost = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,

                                ContainerNo = c.OPS_Container.ContainerNo,

                                CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                                Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                                Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                                ETARequest = c.OPS_Container.ORD_Container.ETA,
                                TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                                CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                                CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                                LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                                LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                                LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                                LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                                TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                                VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                                VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,

                                RegWeight = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegWeight : null) : null,
                                RegCapacity = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegCapacity : null) : null,

                                StatusOfCOContainerName = c.StatusOfCOContainerID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                                ORDContainerID = c.OPS_Container.ContainerID,
                            }).ToList());
                    }

                    var lstFIN = model.FIN_PLContainer.Where(c => c.COTOContainerID > 0 && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL &&
                        c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo &&
                        (IsProvince ? c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new
                        {
                            OPSContainerID = c.COTOContainerID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit
                        }).ToList();

                    var lstGroupProduct = model.ORD_GroupProduct.Where(c => (c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL || c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLCL) && c.ORD_Order.DateConfig >= filter.DateFrom && c.ORD_Order.DateConfig < filter.DateTo && c.ORD_Order.SYSCustomerID == Account.SYSCustomerID).Select(c => new
                        {
                            c.OrderID,
                            GroupOfProductName = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.GroupName : string.Empty,
                            c.Description,
                            OrderContainerID = c.ContainerID,
                        }).ToList();

                    foreach (var item in result)
                    {
                        var val = lstFIN.FirstOrDefault(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.COTOFreightCredit);
                        if (val != null)
                        {
                            item.IncomeUnitPrice = val.UnitPrice;
                            item.IncomeQuantity = val.Quantity;
                            item.Income = val.Credit;
                        }
                        var queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && (c.CostID == (int)CATCostType.ORDContainerServiceCredit || c.CostID == (int)CATCostType.ORDDocumentCredit));
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.IncomeServiceQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeService = queryFIN.Sum(c => c.Credit);
                            item.IncomeServiceUnitPrice = item.IncomeServiceQuantity > 0 ? item.IncomeService / (decimal)item.IncomeServiceQuantity.Value : 0;
                        }

                        queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.COTOExCredit);
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.IncomeExQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeEx = queryFIN.Sum(c => c.Credit);
                            item.IncomeExUnitPrice = item.IncomeExQuantity > 0 ? item.IncomeEx / (decimal)item.IncomeExQuantity.Value : 0;
                        }

                        val = lstFIN.FirstOrDefault(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.COTOFreightDebit);
                        if (val != null)
                        {
                            item.CostUnitPrice = val.UnitPrice;
                            item.CostQuantity = val.Quantity;
                            item.Cost = val.Debit;
                        }
                        queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && (c.CostID == (int)CATCostType.ORDContainerServiceDebit || c.CostID == (int)CATCostType.ORDDocumentDebit));
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.CostServiceQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostService = queryFIN.Sum(c => c.Debit);
                            item.CostServiceUnitPrice = item.CostServiceQuantity > 0 ? item.CostService / (decimal)item.CostServiceQuantity.Value : 0;
                        }

                        queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.COTOExDebit);
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.CostExQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostEx = queryFIN.Sum(c => c.Debit);
                            item.CostExUnitPrice = item.CostExQuantity > 0 ? item.CostEx / (decimal)item.CostExQuantity.Value : 0;
                        }

                        queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.TroubleCredit);
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.IncomeTrouble = queryFIN.Sum(c => c.Credit);
                        }

                        queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.TroubleDebit);
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.CostTrouble = queryFIN.Sum(c => c.Debit);
                        }

                        // Xe nhà
                        queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.FLMDepreciation);
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.CostDepreciation += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.FLMScheduleFee);
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.CostSchedule += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.FLMDriverFee);
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.CostDriver += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.OPSContainerID == item.OPSContainerID && c.CostID == (int)CATCostType.StationDebit);
                        if (queryFIN != null && queryFIN.Count() > 0)
                        {
                            item.CostStation += queryFIN.Sum(c => c.Debit);
                        }

                        item.TotalIncome = item.Income + item.IncomeEx + item.IncomeTrouble + item.IncomeService;
                        item.TotalCost = item.Cost + item.CostEx + item.CostTrouble + item.CostService + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                    }

                    //Other
                    result.AddRange(model.FIN_PLContainer.Where(c => c.OPS_COTOContainer.OPSContainerID > 0 && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_COTOContainer.COTOMasterID > 0 &&
                        c.FIN_PLDetails.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PLDetails.FIN_PL.Effdate < filter.DateTo && lstNoGroupCredit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL &&
                        (IsProvince ? c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new DTOREPCOPL_Detail
                        {
                            COTOMasterID = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.COTOMasterID.Value : -1,
                            COMasterCode = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.Code : string.Empty,
                            OPSContainerID = c.COTOContainerID,
                            OrderID = c.OPS_COTOContainer.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_COTOContainer.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_COTOContainer.OPS_Container.SealNo2,
                            PackingID = c.OPS_COTOContainer.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Packing.Code,
                            OrderContainerNote = c.OPS_COTOContainer.OPS_Container.Note,
                            DateConfig = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            RequestDate = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.OPS_COTOContainer.LocationFromID,
                            LocationFromCode = c.OPS_COTOContainer.CAT_Location.Code,
                            LocationFromName = c.OPS_COTOContainer.CAT_Location.Location,
                            LocationFromAddress = c.OPS_COTOContainer.CAT_Location.Address,
                            LocationToID = c.OPS_COTOContainer.LocationToID,
                            LocationToCode = c.OPS_COTOContainer.CAT_Location1.Code,
                            LocationToName = c.OPS_COTOContainer.CAT_Location1.Location,
                            LocationToAddress = c.OPS_COTOContainer.CAT_Location1.Address,
                            LocationToProvince = c.OPS_COTOContainer.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.OPS_COTOContainer.CAT_Location1.CAT_District.DistrictName,
                            VehicleID = c.OPS_COTOContainer.OPS_COTOMaster.VehicleID,
                            VehicleCode = c.OPS_COTOContainer.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_COTOContainer.COTOMasterID.HasValue && c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName : c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            KM = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.KM : null,
                            ETD = c.OPS_COTOContainer.OPS_COTOMaster.ETD,
                            ETA = c.OPS_COTOContainer.OPS_COTOMaster.ETA,
                            DateFromCome = c.OPS_COTOContainer.DateFromCome,
                            DateFromLeave = c.OPS_COTOContainer.DateFromLeave,
                            DateToCome = c.OPS_COTOContainer.DateToCome,
                            DateToLeave = c.OPS_COTOContainer.DateToLeave,

                            OrderDateConfig = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            OrderContainerDateConfig = c.OPS_COTOContainer.OPS_Container.ORD_Container.DateConfig,
                            OrderContract = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ContractID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderContainerRouting = c.OPS_COTOContainer.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.OPS_COTOContainer.OPS_COTOMaster.DateConfig,
                            OPSContract = c.OPS_COTOContainer.OPS_COTOMaster.ContractID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.OPS_COTOContainer.OPS_COTOMaster.RoutingID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Routing.RoutingName : "",
                            OPSContainerRouting = c.OPS_COTOContainer.CATRoutingID > 0 ? c.OPS_COTOContainer.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CreatedDate,

                            ExternalCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine3,

                            IncomeExCostName = c.FIN_PLDetails.CAT_Cost.CostName,
                            IncomeExNote = c.FIN_PLDetails.Note,
                            IncomeExQuantity = c.Quantity,
                            IncomeExUnitPrice = c.UnitPrice,
                            IncomeEx = c.FIN_PLDetails.Credit,
                            Income = c.FIN_PLDetails.Credit,

                            TotalCost = c.FIN_PLDetails.Debit,
                            TotalIncome = c.FIN_PLDetails.Credit,
                            TotalPL = c.FIN_PLDetails.Credit - c.FIN_PLDetails.Debit,

                            ServiceOfOrderIncome = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ContractTermIncome = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ContractTermID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_ContractTerm.Code : string.Empty,
                            ContractTermCost = c.OPS_COTOContainer.ContractTermID > 0 ? c.OPS_COTOContainer.CAT_ContractTerm.Code : string.Empty,

                            ContainerNo = c.OPS_COTOContainer.OPS_Container.ContainerNo,

                            CutOffTime = c.OPS_COTOContainer.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_COTOContainer.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_COTOContainer.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_COTOContainer.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_COTOContainer.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_COTOContainer.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_COTOContainer.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,

                            RegWeight = c.OPS_COTOContainer.COTOMasterID > 0 ? (c.OPS_COTOContainer.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Vehicle.RegWeight : null) : null,
                            RegCapacity = c.OPS_COTOContainer.COTOMasterID > 0 ? (c.OPS_COTOContainer.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Vehicle.RegCapacity : null) : null,

                            StatusOfCOContainerName = c.OPS_COTOContainer.StatusOfCOContainerID > 0 ? c.OPS_COTOContainer.SYS_Var.ValueOfVar : string.Empty,
                            ORDContainerID = c.OPS_COTOContainer.OPS_Container.ContainerID,
                        }).ToList());

                    result.AddRange(model.FIN_PLContainer.Where(c => c.OPS_COTOContainer.OPSContainerID > 0 && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_COTOContainer.COTOMasterID > 0 &&
                        c.FIN_PLDetails.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PLDetails.FIN_PL.Effdate < filter.DateTo && lstNoGroupDebit.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL &&
                        (IsProvince ? c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new DTOREPCOPL_Detail
                        {
                            COTOMasterID = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.COTOMasterID.Value : -1,
                            COMasterCode = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.Code : string.Empty,
                            OPSContainerID = c.COTOContainerID,
                            OrderID = c.OPS_COTOContainer.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_COTOContainer.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_COTOContainer.OPS_Container.SealNo2,
                            PackingID = c.OPS_COTOContainer.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Packing.Code,
                            OrderContainerNote = c.OPS_COTOContainer.OPS_Container.Note,
                            DateConfig = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            RequestDate = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.OPS_COTOContainer.LocationFromID,
                            LocationFromCode = c.OPS_COTOContainer.CAT_Location.Code,
                            LocationFromName = c.OPS_COTOContainer.CAT_Location.Location,
                            LocationFromAddress = c.OPS_COTOContainer.CAT_Location.Address,
                            LocationToID = c.OPS_COTOContainer.LocationToID,
                            LocationToCode = c.OPS_COTOContainer.CAT_Location1.Code,
                            LocationToName = c.OPS_COTOContainer.CAT_Location1.Location,
                            LocationToAddress = c.OPS_COTOContainer.CAT_Location1.Address,
                            LocationToProvince = c.OPS_COTOContainer.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.OPS_COTOContainer.CAT_Location1.CAT_District.DistrictName,
                            VehicleID = c.OPS_COTOContainer.OPS_COTOMaster.VehicleID,
                            VehicleCode = c.OPS_COTOContainer.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_COTOContainer.COTOMasterID.HasValue && c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName : c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            KM = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.KM : null,
                            ETD = c.OPS_COTOContainer.OPS_COTOMaster.ETD,
                            ETA = c.OPS_COTOContainer.OPS_COTOMaster.ETA,
                            DateFromCome = c.OPS_COTOContainer.DateFromCome,
                            DateFromLeave = c.OPS_COTOContainer.DateFromLeave,
                            DateToCome = c.OPS_COTOContainer.DateToCome,
                            DateToLeave = c.OPS_COTOContainer.DateToLeave,

                            OrderDateConfig = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            OrderContainerDateConfig = c.OPS_COTOContainer.OPS_Container.ORD_Container.DateConfig,
                            OrderContract = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ContractID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderContainerRouting = c.OPS_COTOContainer.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.OPS_COTOContainer.OPS_COTOMaster.DateConfig,
                            OPSContract = c.OPS_COTOContainer.OPS_COTOMaster.ContractID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.OPS_COTOContainer.OPS_COTOMaster.RoutingID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Routing.RoutingName : "",
                            OPSContainerRouting = c.OPS_COTOContainer.CATRoutingID > 0 ? c.OPS_COTOContainer.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CreatedDate,

                            ExternalCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine3,

                            CostExCostName = c.FIN_PLDetails.CAT_Cost.CostName,
                            CostExNote = c.FIN_PLDetails.Note,
                            CostExQuantity = c.Quantity,
                            CostExUnitPrice = c.UnitPrice,
                            CostEx = c.FIN_PLDetails.Debit,
                            Cost = c.FIN_PLDetails.Debit,

                            TotalCost = c.FIN_PLDetails.Debit,
                            TotalIncome = c.FIN_PLDetails.Credit,
                            TotalPL = c.FIN_PLDetails.Credit - c.FIN_PLDetails.Debit,

                            ServiceOfOrderIncome = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ContractTermIncome = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ContractTermID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_ContractTerm.Code : string.Empty,
                            ContractTermCost = c.OPS_COTOContainer.ContractTermID > 0 ? c.OPS_COTOContainer.CAT_ContractTerm.Code : string.Empty,

                            ContainerNo = c.OPS_COTOContainer.OPS_Container.ContainerNo,

                            CutOffTime = c.OPS_COTOContainer.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_COTOContainer.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_COTOContainer.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_COTOContainer.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_COTOContainer.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_COTOContainer.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_COTOContainer.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            RegWeight = c.OPS_COTOContainer.COTOMasterID > 0 ? (c.OPS_COTOContainer.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Vehicle.RegWeight : null) : null,
                            RegCapacity = c.OPS_COTOContainer.COTOMasterID > 0 ? (c.OPS_COTOContainer.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Vehicle.RegCapacity : null) : null,
                            StatusOfCOContainerName = c.OPS_COTOContainer.StatusOfCOContainerID > 0 ? c.OPS_COTOContainer.SYS_Var.ValueOfVar : string.Empty,
                            ORDContainerID = c.OPS_COTOContainer.OPS_Container.ContainerID,
                        }).ToList());

                    foreach (var item in result)
                    {
                        var groupProduct = lstGroupProduct.Where(c => c.OrderID == item.OrderID && c.OrderContainerID == item.ORDContainerID);
                        if (groupProduct.Count() > 0)
                        {
                            item.GroupOfProductName = string.Join(", ", groupProduct.Select(c => c.GroupOfProductName).Distinct().ToList());
                            item.Description = string.Join(", ", groupProduct.Select(c => c.Description).Distinct().ToList());
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result = result.OrderBy(c => c.DateConfig).ThenBy(c => c.COMasterCode).ThenBy(c => c.OrderCode).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPCOPL_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.COMasterCode).ThenBy(c => c.OrderCode).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPCOPL_ColumnDetail REPCOPL_ColumnDetailData(CUSSettingsReport_Filter filter)
        {
            try
            {
                DateTime dtNow = DateTime.Now;
                DateTime? dtNull = null;
                filter.DateFrom = filter.DateFrom.Date;
                filter.DateTo = filter.DateTo.AddDays(1).Date;
                var result = new DTOREPCOPL_ColumnDetail();
                result.ListData = new List<DTOREPCOPL_Detail>();
                result.ListColumn = new List<DTOREPCOPL_ColumnDetail_Container>();

                var lstStatusCon = new List<int>();
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerEXEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerEXLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerIMLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerIMEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOGetEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOReturnEmpty);
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    bool IsGroupLocation = false;
                    bool IsGroupPartner = false;
                    bool IsProvince = false;
                    bool IsServiceOfOrder = false;

                    if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                        filter.ListGroupProductID = new List<int>();
                    if (filter.ListGroupProductID.Count > 0)
                        IsGroup = true;

                    if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                        filter.ListStockID = new List<int>();
                    if (filter.ListStockID.Count > 0)
                        IsStock = true;

                    if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                        filter.ListGroupOfPartnerID = new List<int>();
                    if (filter.ListGroupOfPartnerID.Count > 0)
                        IsGroupPartner = true;

                    if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                        filter.ListGroupOfLocationID = new List<int>();
                    if (filter.ListGroupOfLocationID.Count > 0)
                        IsGroupLocation = true;

                    if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                        filter.ListProvinceID = new List<int>();
                    if (filter.ListProvinceID.Count > 0)
                        IsProvince = true;

                    if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                        filter.ListServiceOfOrderID = new List<int>();
                    if (filter.ListServiceOfOrderID.Count > 0)
                        IsServiceOfOrder = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    var lstData = model.OPS_COTOContainer.Where(c => c.ParentID == null && c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.COTOMasterID > 0 &&
                        c.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo &&
                        lstCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) && lstStatusCon.Contains(c.StatusOfCOContainerID) &&
                        (IsProvince ? c.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        (filter.IsComplete ? c.OPS_Container.OPSContainerTypeID == -(int)SYSVarType.OPSContainerTypeComplete : true)).Select(c => new
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : string.Empty,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            OrderContainerNote = c.OPS_Container.ORD_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,
                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : -1,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "",
                            VendorName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName == null ? c.OPS_COTOMaster.CUS_Customer.CustomerName : c.OPS_COTOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName : c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETD : dtNow,
                            ETA = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETA : dtNow,

                            OrderDateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            OrderContract = c.OPS_Container.ORD_Container.ORD_Order.ContractID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_Container.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DateConfig : dtNull,
                            OPSContract = c.COTOMasterID.HasValue && c.OPS_COTOMaster.ContractID > 0 ? c.OPS_COTOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.COTOMasterID.HasValue && c.OPS_COTOMaster.RoutingID > 0 ? c.OPS_COTOMaster.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.OPS_Container.ORD_Container.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_Container.ORD_Container.ORD_Order.CreatedDate,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,

                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ContractTermIncome = c.OPS_Container.ORD_Container.ORD_Order.ContractTermID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ContractTerm.Code : string.Empty,
                            ContractTermCost = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,

                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,

                            ContainerNo = c.OPS_Container.ContainerNo,

                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,

                            RegWeight = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegWeight : null) : null,
                            RegCapacity = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegCapacity : null) : null,
                            ORDContainerID = c.OPS_Container.ContainerID,
                        }).Distinct().ToList();

                    if (!filter.IsComplete)
                    {
                        lstData.AddRange(model.OPS_COTOContainer.Where(c => c.ParentID == null && c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.COTOMasterID == null &&
                        c.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo && lstStatusCon.Contains(c.StatusOfCOContainerID) &&
                        (IsProvince ? c.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : string.Empty,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            OrderContainerNote = c.OPS_Container.ORD_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,
                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : -1,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "",
                            VendorName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETD : dtNow,
                            ETA = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETA : dtNow,

                            OrderDateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            OrderContract = c.OPS_Container.ORD_Container.ORD_Order.ContractID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_Container.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DateConfig : dtNull,
                            OPSContract = c.COTOMasterID.HasValue && c.OPS_COTOMaster.ContractID > 0 ? c.OPS_COTOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.COTOMasterID.HasValue && c.OPS_COTOMaster.RoutingID > 0 ? c.OPS_COTOMaster.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.OPS_Container.ORD_Container.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_Container.ORD_Container.ORD_Order.CreatedDate,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.ExternalDate : dtNull,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,

                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ContractTermIncome = c.OPS_Container.ORD_Container.ORD_Order.ContractTermID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ContractTerm.Code : string.Empty,
                            ContractTermCost = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,

                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            UserDefine3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3,

                            ContainerNo = c.OPS_Container.ContainerNo,

                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode,
                            VesselNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,

                            RegWeight = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegWeight : null) : null,
                            RegCapacity = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegCapacity : null) : null,
                            ORDContainerID = c.OPS_Container.ContainerID,
                        }).Distinct().ToList());
                    }

                    var lstOPSContainer = model.OPS_COTOContainer.Where(c => c.ParentID == null && c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.COTOMasterID > 0 &&
                        c.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo && lstStatusCon.Contains(c.StatusOfCOContainerID) &&
                        (IsProvince ? c.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new DTOREPCOPL_Detail
                        {
                            COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : string.Empty,
                            OPSContainerID = c.ID,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            PackingID = c.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            OrderContainerNote = c.OPS_Container.Note,
                            DateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,
                            CUSRoutingCode = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.Code : string.Empty,
                            CUSRoutingName = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : string.Empty,

                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID.Value : -1,
                            VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "",
                            VendorName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                            ETD = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETD : dtNow,
                            ETA = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETA : dtNow,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,

                            OrderDateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                            OrderContainerDateConfig = c.OPS_Container.ORD_Container.DateConfig,
                            OrderContract = c.OPS_Container.ORD_Container.ORD_Order.ContractID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_Container.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderContainerRouting = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DateConfig : dtNull,
                            OPSContract = c.COTOMasterID.HasValue && c.OPS_COTOMaster.ContractID > 0 ? c.OPS_COTOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.COTOMasterID.HasValue && c.OPS_COTOMaster.RoutingID > 0 ? c.OPS_COTOMaster.CAT_Routing.RoutingName : "",
                            OPSContainerRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.OPS_Container.ORD_Container.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_Container.ORD_Container.ORD_Order.CreatedDate,

                            ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            StatusOfCOContainerName = c.StatusOfCOContainerID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                        }).ToList();

                    if (!filter.IsComplete)
                    {
                        lstOPSContainer.AddRange(model.OPS_COTOContainer.Where(c => c.ParentID == null && c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.COTOMasterID == null &&
                            c.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo && lstStatusCon.Contains(c.StatusOfCOContainerID) &&
                            (IsProvince ? c.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                            (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                            lstCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new DTOREPCOPL_Detail
                            {
                                COTOMasterID = c.COTOMasterID.HasValue ? c.COTOMasterID.Value : -1,
                                COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : string.Empty,
                                OPSContainerID = c.ID,
                                OrderID = c.OPS_Container.ORD_Container.OrderID,
                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                SealNo1 = c.OPS_Container.SealNo1,
                                SealNo2 = c.OPS_Container.SealNo2,
                                PackingID = c.OPS_Container.ORD_Container.PackingID,
                                PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                                OrderContainerNote = c.OPS_Container.Note,
                                DateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                                RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                                LocationFromID = c.LocationFromID,
                                LocationFromCode = c.CAT_Location.Code,
                                LocationFromName = c.CAT_Location.Location,
                                LocationFromAddress = c.CAT_Location.Address,
                                LocationToID = c.LocationToID,
                                LocationToCode = c.CAT_Location1.Code,
                                LocationToName = c.CAT_Location1.Location,
                                LocationToAddress = c.CAT_Location1.Address,
                                LocationToProvince = c.CAT_Location1.CAT_Province.ProvinceName,
                                LocationToDistrict = c.CAT_Location1.CAT_District.DistrictName,
                                CUSRoutingCode = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.Code : string.Empty,
                                CUSRoutingName = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : string.Empty,

                                VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID.Value : -1,
                                VehicleCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                                VendorID = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                                VendorCode = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "",
                                VendorName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                                VendorShortName = c.COTOMasterID.HasValue && c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "",

                                CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                                CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                                CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                                KM = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.KM : null,
                                ETD = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETD : dtNow,
                                ETA = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.ETA : dtNow,
                                DateFromCome = c.DateFromCome,
                                DateFromLeave = c.DateFromLeave,
                                DateToCome = c.DateToCome,
                                DateToLeave = c.DateToLeave,

                                OrderDateConfig = c.OPS_Container.ORD_Container.ORD_Order.DateConfig,
                                OrderContainerDateConfig = c.OPS_Container.ORD_Container.DateConfig,
                                OrderContract = c.OPS_Container.ORD_Container.ORD_Order.ContractID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                                OrderRouting = c.OPS_Container.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                                OrderContainerRouting = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",
                                OPSDateConfig = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.DateConfig : dtNull,
                                OPSContract = c.COTOMasterID.HasValue && c.OPS_COTOMaster.ContractID > 0 ? c.OPS_COTOMaster.CAT_Contract.DisplayName : "",
                                OPSRouting = c.COTOMasterID.HasValue && c.OPS_COTOMaster.RoutingID > 0 ? c.OPS_COTOMaster.CAT_Routing.RoutingName : "",
                                OPSContainerRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                                OrderCreatedBy = c.OPS_Container.ORD_Container.ORD_Order.CreatedBy,
                                OrderCreatedDate = c.OPS_Container.ORD_Container.ORD_Order.CreatedDate,

                                ExternalCode = c.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                                ExternalDate = c.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                                UserDefine1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                                UserDefine2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2,

                                StatusOfCOContainerName = c.StatusOfCOContainerID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                            }).ToList());
                    }

                    var lstFIN = model.FIN_PLContainer.Where(c => c.COTOContainerID > 0 && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL &&
                        c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo &&
                        (IsProvince ? c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new
                        {
                            PLContainerID = c.ID,
                            c.PLDetailID,
                            OPSContainerID = c.COTOContainerID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit
                        }).ToList();

                    var lstGroupProduct = model.ORD_GroupProduct.Where(c => (c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL || c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLCL) && c.ORD_Order.DateConfig >= filter.DateFrom && c.ORD_Order.DateConfig < filter.DateTo && c.ORD_Order.SYSCustomerID == Account.SYSCustomerID).Select(c => new
                    {
                        c.OrderID,
                        GroupOfProductName = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.GroupName : string.Empty,
                        c.Description,
                        OrderContainerID = c.ContainerID,
                    }).ToList();

                    var lstContainer = lstOPSContainer.Select(c => new { PackingID = c.PackingID, PackingCode = c.PackingCode }).Distinct().ToList();

                    foreach (var itemData in lstData)
                    {
                        DTOREPCOPL_Detail item = new DTOREPCOPL_Detail
                        {
                            COTOMasterID = itemData.COTOMasterID,
                            COMasterCode = itemData.COMasterCode,

                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            LocationFromID = itemData.LocationFromID,
                            LocationFromCode = itemData.LocationFromCode,
                            LocationFromName = itemData.LocationFromName,
                            LocationFromAddress = itemData.LocationFromAddress,
                            LocationToID = itemData.LocationToID,
                            LocationToCode = itemData.LocationToCode,
                            LocationToName = itemData.LocationToName,
                            LocationToAddress = itemData.LocationToAddress,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            VehicleID = itemData.VehicleID,
                            VehicleCode = itemData.VehicleCode,
                            VendorID = itemData.VendorID,
                            VendorCode = itemData.VendorCode,
                            VendorName = itemData.VendorName,
                            VendorShortName = itemData.VendorShortName,

                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            OrderDateConfig = itemData.OrderDateConfig,
                            OrderContract = itemData.OrderContract,
                            OrderRouting = itemData.OrderRouting,
                            OPSDateConfig = itemData.OPSDateConfig,
                            OPSContract = itemData.OPSContract,
                            OPSRouting = itemData.OPSRouting,

                            OrderCreatedBy = itemData.OrderCreatedBy,
                            OrderCreatedDate = itemData.OrderCreatedDate,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,

                            ServiceOfOrderIncome = itemData.ServiceOfOrderIncome,
                            ServiceOfOrderCost = itemData.ServiceOfOrderCost,
                            ContractTermIncome = itemData.ContractTermIncome,
                            ContractTermCost = itemData.ContractTermCost,

                            SealNo1 = itemData.SealNo1,
                            SealNo2 = itemData.SealNo2,
                            UserDefine3 = itemData.UserDefine3,

                            ContainerNo = itemData.ContainerNo,

                            CutOffTime = itemData.CutOffTime,
                            Date_TimeGetEmpty = itemData.Date_TimeGetEmpty,
                            Date_TimeReturnEmpty = itemData.Date_TimeReturnEmpty,
                            ETARequest = itemData.ETARequest,
                            TypeOfContainerName = itemData.TypeOfContainerName,
                            CarrierCode = itemData.CarrierCode,
                            CarrierName = itemData.CarrierName,
                            LocationDepotCode = itemData.LocationDepotCode,
                            LocationDepotName = itemData.LocationDepotName,
                            LocationReturnCode = itemData.LocationReturnCode,
                            LocationReturnName = itemData.LocationReturnName,
                            TripNo = itemData.TripNo,
                            VesselNo = itemData.VesselNo,
                            VesselName = itemData.VesselName,

                            RegWeight = itemData.RegWeight,
                            RegCapacity = itemData.RegCapacity,
                        };

                        result.ListData.Add(item);

                        item.Income = item.IncomeEx = item.Cost = item.CostEx = 0;

                        foreach (var itemContainer in lstContainer)
                        {
                            var queryOPSContainer = lstOPSContainer.Where(c => c.COTOMasterID == item.COTOMasterID && c.OrderID == item.OrderID && c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID && c.PackingID == itemContainer.PackingID);
                            if (queryOPSContainer.Count() > 0)
                            {
                                var first = queryOPSContainer.FirstOrDefault();
                                if (first != null)
                                {
                                    if (first.ETA != null)
                                        item.ETA = first.ETA;
                                    if (first.ETD != null)
                                        item.ETD = first.ETD;
                                    item.KM = first.KM;
                                    item.ETA = first.ETA;
                                    item.ETD = first.ETD;
                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.DateFromCome = first.DateFromCome;
                                    item.DateFromLeave = first.DateFromLeave;
                                    item.DateToCome = first.DateToCome;
                                    item.DateToLeave = first.DateToLeave;
                                    item.StatusOfCOContainerName = first.StatusOfCOContainerName;
                                }
                                var lstOPSContainerID = queryOPSContainer.Select(c => c.OPSContainerID).ToList();

                                var col = new DTOREPCOPL_ColumnDetail_Container();
                                col.COTOMasterID = item.COTOMasterID;
                                col.OrderID = item.OrderID > 0 ? item.OrderID.Value : -1;
                                col.PackingID = itemContainer.PackingID;
                                col.PackingCode = itemContainer.PackingCode;
                                col.LocationFromID = item.LocationFromID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.KeyCode = itemContainer.PackingCode;

                                var groupProduct = lstGroupProduct.Where(c => c.OrderID == col.OrderID && c.OrderContainerID == itemData.ORDContainerID);
                                if (groupProduct.Count() > 0)
                                {
                                    col.GroupOfProductName = string.Join(", ", lstGroupProduct.Select(c => c.GroupOfProductName).Distinct().ToList());
                                    col.Description = string.Join(", ", lstGroupProduct.Select(c => c.Description).Distinct().ToList());
                                }

                                var queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.COTOFreightCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Income = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.COTOFreightDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice);
                                    col.CostQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Cost = queryFIN.Sum(c => c.Debit);
                                }

                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.TroubleCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeTrouble += queryFIN.Sum(c => c.Credit);
                                }

                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.TroubleDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostTrouble += queryFIN.Sum(c => c.Debit);
                                }

                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && (c.CostID == (int)CATCostType.ORDDocumentCredit || c.CostID == (int)CATCostType.ORDContainerServiceCredit));
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeService += queryFIN.Sum(c => c.Credit);
                                    col.IncomeServiceQuantity += queryFIN.Sum(c => c.Quantity);
                                    col.IncomeServiceUnitPrice += col.IncomeServiceQuantity > 0 ? col.IncomeService / (decimal)col.IncomeServiceQuantity : 0;
                                }
                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && (c.CostID == (int)CATCostType.ORDDocumentDebit || c.CostID == (int)CATCostType.ORDContainerServiceDebit));
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostService += queryFIN.Sum(c => c.Debit);
                                    col.CostServiceQuantity += queryFIN.Sum(c => c.Quantity);
                                    col.CostServiceUnitPrice += col.CostServiceQuantity > 0 ? col.CostService / (decimal)col.CostServiceQuantity : 0;
                                }

                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.COTOExCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeEx += queryFIN.Sum(c => c.Credit);
                                    col.IncomeExQuantity += queryFIN.Sum(c => c.Quantity);
                                    col.IncomeExUnitPrice += col.IncomeExQuantity > 0 ? col.IncomeEx / (decimal)col.IncomeExQuantity : 0;
                                }
                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.COTOExDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostEx += queryFIN.Sum(c => c.Debit);
                                    col.CostExQuantity += queryFIN.Sum(c => c.Quantity);
                                    col.CostExUnitPrice += col.CostExQuantity > 0 ? col.CostEx / (decimal)col.CostExQuantity : 0;
                                }

                                // Xe nhà
                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.FLMDepreciation);
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostDepreciation += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.FLMScheduleFee);
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostSchedule += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.FLMDriverFee);
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostDriver += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstOPSContainerID.Contains(c.OPSContainerID) && c.CostID == (int)CATCostType.StationDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostStation += queryFIN.Sum(c => c.Debit);
                                }

                                result.ListColumn.Add(col);

                                item.Income += col.Income;
                                item.IncomeEx += col.IncomeEx;
                                item.IncomeTrouble += col.IncomeTrouble;
                                item.IncomeService += col.IncomeService;
                                item.Cost += col.Cost;
                                item.CostEx += col.CostEx;
                                item.CostTrouble += col.CostTrouble;
                                item.CostService += col.CostService;
                                item.CostDepreciation += col.CostDepreciation;
                                item.CostSchedule += col.CostSchedule;
                                item.CostDriver += col.CostDriver;
                                item.CostStation += col.CostStation;
                            }
                        }

                        item.TotalIncome = item.Income + item.IncomeEx + item.IncomeTrouble + item.IncomeService;
                        item.TotalCost = item.Cost + item.CostEx + item.CostTrouble + item.CostService + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.COMasterCode).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPCOPL_Detail>().OrderBy(c => c.DateConfig).ThenBy(c => c.COMasterCode).ThenBy(c => c.OrderCode).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOREPCOPL_Order> REPCOPL_OrderData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                var lstStatusCon = new List<int>();
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerEXEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerEXLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerIMLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerIMEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOGetEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOReturnEmpty);
                #endregion

                var result = new List<DTOREPCOPL_Order>();
                DateTime? dtNull = null;
                filter.DateFrom = filter.DateFrom.Date;
                filter.DateTo = filter.DateTo.AddDays(1).Date;
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    bool IsGroupLocation = false;
                    bool IsGroupPartner = false;
                    bool IsProvince = false;
                    bool IsServiceOfOrder = false;

                    if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                        filter.ListGroupProductID = new List<int>();
                    if (filter.ListGroupProductID.Count > 0)
                        IsGroup = true;

                    if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                        filter.ListStockID = new List<int>();
                    if (filter.ListStockID.Count > 0)
                        IsStock = true;

                    if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                        filter.ListGroupOfPartnerID = new List<int>();
                    if (filter.ListGroupOfPartnerID.Count > 0)
                        IsGroupPartner = true;

                    if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                        filter.ListGroupOfLocationID = new List<int>();
                    if (filter.ListGroupOfLocationID.Count > 0)
                        IsGroupLocation = true;

                    if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                        filter.ListProvinceID = new List<int>();
                    if (filter.ListProvinceID.Count > 0)
                        IsProvince = true;

                    if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                        filter.ListServiceOfOrderID = new List<int>();
                    if (filter.ListServiceOfOrderID.Count > 0)
                        IsServiceOfOrder = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    result = model.OPS_Container.Where(c => c.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.ORD_Container.ORD_Order.DateConfig < filter.DateTo && lstCusID.Contains(c.ORD_Container.ORD_Order.CustomerID) &&
                        (IsProvince ? c.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        (filter.IsComplete ? c.OPSContainerTypeID == -(int)SYSVarType.OPSContainerTypeComplete : true)).Select(c => new DTOREPCOPL_Order
                        {
                            OrderID = c.ORD_Container.OrderID,
                            ORDContainerID = c.ContainerID,
                            OrderCode = c.ORD_Container.ORD_Order.Code,
                            SealNo1 = c.SealNo1,
                            SealNo2 = c.SealNo2,
                            PackingID = c.ORD_Container.PackingID,
                            PackingCode = c.ORD_Container.CAT_Packing.Code,
                            OrderContainerNote = c.Note,
                            ContainerNo = c.ContainerNo,
                            DateConfig = c.ORD_Container.ORD_Order.DateConfig,
                            RequestDate = c.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.ORD_Container.LocationFromID,
                            LocationFromCode = c.ORD_Container.LocationFromID > 0 ? c.ORD_Container.CUS_Location.Code : "",
                            LocationFromName = c.ORD_Container.LocationFromID > 0 ? c.ORD_Container.CUS_Location.LocationName : "",
                            LocationFromAddress = c.ORD_Container.LocationFromID > 0 ? c.ORD_Container.CUS_Location.CAT_Location.Address : "",
                            LocationToID = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.LocationToID.Value : -1,
                            LocationToCode = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.Code : "",
                            LocationToName = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.LocationName : "",
                            LocationToAddress = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",

                            CUSRoutingCode = c.ORD_Container.CUSRoutingID > 0 ? c.ORD_Container.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_Container.CUSRoutingID > 0 ? c.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",

                            CustomerID = c.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_Container.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Container.ORD_Order.CUS_Customer.CustomerName : c.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            OrderDateConfig = c.ORD_Container.ORD_Order.DateConfig,
                            OrderContract = c.ORD_Container.ORD_Order.ContractID > 0 ? c.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.ORD_Container.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.ORD_Container.ORD_Order.CreatedDate,

                            ExternalCode = c.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_Container.ORD_Order.UserDefine2,

                            UserDefine3 = c.ORD_Container.ORD_Order.UserDefine3,

                            CutOffTime = c.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.ORD_Container.DateReturnEmpty,
                            ETARequest = c.ORD_Container.ETA,
                            TypeOfContainerName = c.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.ORD_Container.ORD_Order.PartnerID > 0 ? c.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.ORD_Container.ORD_Order.PartnerID > 0 ? c.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.ORD_Container.LocationDepotID > 0 ? c.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.ORD_Container.LocationDepotID > 0 ? c.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.ORD_Container.LocationDepotReturnID > 0 ? c.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.ORD_Container.LocationDepotReturnID > 0 ? c.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.ORD_Container.VesselMasterCode,
                            VesselNo = c.ORD_Container.VesselID > 0 ? c.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.ORD_Container.VesselID > 0 ? c.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                        }).ToList();

                    var lstOPSContainer = model.OPS_COTOContainer.Where(c => c.ParentID == null && c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.COTOMasterID > 0 &&
                        c.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo &&
                        (IsProvince ? c.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new
                        {
                            ORDContainerID = c.OPS_Container.ContainerID,
                            ETD = c.OPS_COTOMaster.ETD,
                            ETA = c.OPS_COTOMaster.ETA,
                            VehicleCode = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorCode = c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer.ShortName : "",
                            c.DateFromCome,
                            c.DateFromLeave,
                            c.DateToCome,
                            c.DateToLeave,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ContractTermIncome = c.OPS_Container.ORD_Container.ORD_Order.ContractTermID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ContractTerm.Code : string.Empty,
                            ContractTermCost = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                            RegWeight = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegWeight : null) : null,
                            RegCapacity = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegCapacity : null) : null,
                            StatusOfCOContainerName = c.StatusOfCOContainerID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                        }).ToList();

                    var lstFIN = model.FIN_PLContainer.Where(c => c.COTOContainerID > 0 && c.OPS_COTOContainer.OPS_Container.ContainerID > 0 && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL &&
                        c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo &&
                        (IsProvince ? c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new
                        {
                            ORDContainerID = c.OPS_COTOContainer.OPS_Container.ContainerID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit,
                            c.PLDetailID,
                        }).ToList();

                    var lstGroupProduct = model.ORD_GroupProduct.Where(c => (c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL || c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLCL) && c.ORD_Order.DateConfig >= filter.DateFrom && c.ORD_Order.DateConfig < filter.DateTo && c.ORD_Order.SYSCustomerID == Account.SYSCustomerID).Select(c => new
                    {
                        c.OrderID,
                        GroupOfProductName = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.GroupName : string.Empty,
                        c.Description,
                        OrderContainerID = c.ContainerID,
                    }).ToList();

                    foreach (var item in result)
                    {
                        var queryOPSContainer = lstOPSContainer.Where(c => c.ORDContainerID == item.ORDContainerID);
                        if (queryOPSContainer.Count() > 0)
                        {
                            item.ETD = queryOPSContainer.FirstOrDefault().ETD;
                            item.ETA = queryOPSContainer.FirstOrDefault().ETA;
                            item.DateFromCome = queryOPSContainer.FirstOrDefault().DateFromCome;
                            item.DateFromLeave = queryOPSContainer.FirstOrDefault().DateFromLeave;
                            item.DateToCome = queryOPSContainer.FirstOrDefault().DateToCome;
                            item.DateToLeave = queryOPSContainer.FirstOrDefault().DateToLeave;
                            item.ServiceOfOrderIncome = queryOPSContainer.FirstOrDefault().ServiceOfOrderIncome;
                            item.ServiceOfOrderCost = queryOPSContainer.FirstOrDefault().ServiceOfOrderCost;
                            item.ContractTermIncome = queryOPSContainer.FirstOrDefault().ContractTermIncome;
                            item.ContractTermCost = queryOPSContainer.FirstOrDefault().ContractTermCost;
                            item.RegWeight = queryOPSContainer.FirstOrDefault().RegWeight;
                            item.RegCapacity = queryOPSContainer.FirstOrDefault().RegCapacity;
                            item.VehicleCode = queryOPSContainer.FirstOrDefault().VehicleCode;
                            item.VendorCode = queryOPSContainer.FirstOrDefault().VendorCode;
                            item.VendorName = queryOPSContainer.FirstOrDefault().VendorName;
                            item.VendorShortName = queryOPSContainer.FirstOrDefault().VendorShortName;
                            item.StatusOfCOContainerName = queryOPSContainer.FirstOrDefault().StatusOfCOContainerName;
                        }

                        var queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.COTOFreightCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                            item.Income = queryFIN.Sum(c => c.Credit);
                        }
                        queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && (c.CostID == (int)CATCostType.ORDContainerServiceCredit || c.CostID == (int)CATCostType.ORDDocumentCredit));
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeService = queryFIN.Sum(c => c.Credit);
                            item.IncomeServiceQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeServiceUnitPrice = item.IncomeServiceQuantity > 0 ? item.IncomeService / (decimal)item.IncomeServiceQuantity : 0;
                        }
                        queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.COTOExCredit);
                        if (queryFIN.Count() > 0)
                        {
                            item.IncomeEx = queryFIN.Sum(c => c.Credit);
                            item.IncomeExQuantity = queryFIN.Sum(c => c.Quantity);
                            item.IncomeExUnitPrice = item.IncomeExQuantity > 0 ? item.IncomeEx / (decimal)item.IncomeExQuantity : 0;
                        }

                        queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.COTOFreightDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                            item.CostQuantity = queryFIN.Sum(c => c.Quantity);
                            item.Cost = queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && (c.CostID == (int)CATCostType.ORDContainerServiceDebit || c.CostID == (int)CATCostType.ORDDocumentDebit));
                        if (queryFIN.Count() > 0)
                        {
                            item.CostService = queryFIN.Sum(c => c.Debit);
                            item.CostServiceQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostServiceUnitPrice = item.CostServiceQuantity > 0 ? item.CostService / (decimal)item.CostServiceQuantity : 0;
                        }
                        queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.COTOExDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostEx = queryFIN.Sum(c => c.Debit);
                            item.CostExQuantity = queryFIN.Sum(c => c.Quantity);
                            item.CostExUnitPrice = item.CostExQuantity > 0 ? item.CostEx / (decimal)item.CostExQuantity : 0;
                        }

                        var lstTrouble = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.TroubleCredit);
                        if (lstTrouble != null && lstTrouble.Count() > 0)
                        {
                            item.IncomeTrouble = lstTrouble.Sum(c => c.Credit);
                        }

                        lstTrouble = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.TroubleDebit);
                        if (lstTrouble != null && lstTrouble.Count() > 0)
                        {
                            item.CostTrouble = lstTrouble.Sum(c => c.Debit);
                        }
                        // Xe nhà
                        queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.FLMDepreciation);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostDepreciation += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.FLMScheduleFee);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostSchedule += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.FLMDriverFee);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostDriver += queryFIN.Sum(c => c.Debit);
                        }
                        queryFIN = lstFIN.Where(c => c.ORDContainerID == item.ORDContainerID && c.CostID == (int)CATCostType.StationDebit);
                        if (queryFIN.Count() > 0)
                        {
                            item.CostStation += queryFIN.Sum(c => c.Debit);
                        }

                        item.TotalIncome = item.Income + item.IncomeEx + item.IncomeTrouble + item.IncomeService;
                        item.TotalCost = item.Cost + item.CostEx + item.CostTrouble +item.CostService + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                    }

                    foreach (var item in result)
                    {
                        var groupProduct = lstGroupProduct.Where(c => c.OrderID == item.OrderID && c.OrderContainerID == item.ORDContainerID);
                        if (groupProduct.Count() > 0)
                        {
                            item.GroupOfProductName = string.Join(", ", groupProduct.Select(c => c.GroupOfProductName).Distinct().ToList());
                            item.Description = string.Join(", ", groupProduct.Select(c => c.Description).Distinct().ToList());
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result = result.OrderBy(c => c.DateConfig).ThenBy(c => c.OrderCode).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPCOPL_Order>().OrderBy(c => c.DateConfig).ThenBy(c => c.OrderCode).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPCOPL_ColumnOrder REPCOPL_ColumnOrderData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupCredit = new List<int>();
                lstNoGroupCredit.Add((int)CATCostType.ManualFixCredit);
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.ManualFixDebit);

                var lstStatusCon = new List<int>();
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerEXEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerEXLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerIMLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerIMEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOGetEmpty);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOLaden);
                lstStatusCon.Add(-(int)SYSVarType.StatusOfCOContainerLOReturnEmpty);
                #endregion

                DateTime? dtNull = null;
                filter.DateFrom = filter.DateFrom.Date;
                filter.DateTo = filter.DateTo.AddDays(1).Date;
                var result = new DTOREPCOPL_ColumnOrder();
                result.ListColumn = new List<DTOREPCOPL_ColumnOrder_Container>();
                result.ListData = new List<DTOREPCOPL_Order>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    bool IsGroupLocation = false;
                    bool IsGroupPartner = false;
                    bool IsProvince = false;
                    bool IsServiceOfOrder = false;

                    if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                        filter.ListGroupProductID = new List<int>();
                    if (filter.ListGroupProductID.Count > 0)
                        IsGroup = true;

                    if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                        filter.ListStockID = new List<int>();
                    if (filter.ListStockID.Count > 0)
                        IsStock = true;

                    if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                        filter.ListGroupOfPartnerID = new List<int>();
                    if (filter.ListGroupOfPartnerID.Count > 0)
                        IsGroupPartner = true;

                    if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                        filter.ListGroupOfLocationID = new List<int>();
                    if (filter.ListGroupOfLocationID.Count > 0)
                        IsGroupLocation = true;

                    if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                        filter.ListProvinceID = new List<int>();
                    if (filter.ListProvinceID.Count > 0)
                        IsProvince = true;

                    if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                        filter.ListServiceOfOrderID = new List<int>();
                    if (filter.ListServiceOfOrderID.Count > 0)
                        IsServiceOfOrder = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    var ListData = model.OPS_Container.Where(c => c.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID &&
                        c.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.ORD_Container.ORD_Order.DateConfig < filter.DateTo && lstCusID.Contains(c.ORD_Container.ORD_Order.CustomerID) &&
                        (IsProvince ? c.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        (filter.IsComplete ? c.OPSContainerTypeID == -(int)SYSVarType.OPSContainerTypeComplete : true)).Select(c => new DTOREPCOPL_Order
                        {
                            OrderID = c.ORD_Container.OrderID,
                            OrderCode = c.ORD_Container.ORD_Order.Code,
                            DateConfig = c.ORD_Container.ORD_Order.DateConfig,
                            RequestDate = c.ORD_Container.ORD_Order.RequestDate,
                            LocationFromID = c.ORD_Container.LocationFromID,
                            LocationFromCode = c.ORD_Container.LocationFromID > 0 ? c.ORD_Container.CUS_Location.Code : "",
                            LocationFromName = c.ORD_Container.LocationFromID > 0 ? c.ORD_Container.CUS_Location.LocationName : "",
                            LocationFromAddress = c.ORD_Container.LocationFromID > 0 ? c.ORD_Container.CUS_Location.CAT_Location.Address : "",
                            LocationToID = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.LocationToID.Value : -1,
                            LocationToCode = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.Code : "",
                            LocationToName = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.LocationName : "",
                            LocationToAddress = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_Container.LocationToID > 0 ? c.ORD_Container.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            CustomerID = c.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_Container.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_Container.ORD_Order.CUS_Customer.CustomerName : c.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            OrderDateConfig = c.ORD_Container.ORD_Order.DateConfig,
                            OrderContract = c.ORD_Container.ORD_Order.ContractID > 0 ? c.ORD_Container.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.ORD_Container.ORD_Order.CUSRoutingID > 0 ? c.ORD_Container.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.ORD_Container.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.ORD_Container.ORD_Order.CreatedDate,

                            ExternalCode = c.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_Container.ORD_Order.UserDefine2,

                            UserDefine3 = c.ORD_Container.ORD_Order.UserDefine3,

                            ContainerNo = c.ContainerNo,

                            CutOffTime = c.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.ORD_Container.DateReturnEmpty,
                            ETARequest = c.ORD_Container.ETA,
                            TypeOfContainerName = c.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.ORD_Container.ORD_Order.PartnerID > 0 ? c.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.ORD_Container.ORD_Order.PartnerID > 0 ? c.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.ORD_Container.LocationDepotID > 0 ? c.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.ORD_Container.LocationDepotID > 0 ? c.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.ORD_Container.LocationDepotReturnID > 0 ? c.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.ORD_Container.LocationDepotReturnID > 0 ? c.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.ORD_Container.VesselMasterCode,
                            VesselNo = c.ORD_Container.VesselID > 0 ? c.ORD_Container.CAT_Vessel.Code : string.Empty,
                            VesselName = c.ORD_Container.VesselID > 0 ? c.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            SealNo1 = c.SealNo1,
                            SealNo2 = c.SealNo2,
                            ORDContainerID = c.ContainerID,
                        }).Distinct().ToList();

                    var lstOPSContainer = model.OPS_COTOContainer.Where(c => c.ParentID == null && c.OPSContainerID > 0 && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.COTOMasterID > 0 &&
                        c.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo &&
                        (IsProvince ? c.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new
                        {
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            ORDContainerID = c.OPS_Container.ContainerID,
                            LocationFromID = c.OPS_Container.ORD_Container.LocationFromID,
                            LocationToID = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.LocationToID.Value : -1,
                            PackingID = c.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            OrderContainerNote = c.OPS_Container.Note,
                            c.DateFromCome,
                            c.DateFromLeave,
                            c.DateToCome,
                            c.DateToLeave,
                            c.COTOMasterID,
                            COMasterCode = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.Code : string.Empty,
                            ETA = c.OPS_COTOMaster.ETA,
                            ETD = c.OPS_COTOMaster.ETD,
                            CUSRoutingCode = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.Code : string.Empty,
                            CUSRoutingName = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : string.Empty,
                            ServiceOfOrderIncome = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ContractTermIncome = c.OPS_Container.ORD_Container.ORD_Order.ContractTermID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ContractTerm.Code : string.Empty,
                            ContractTermCost = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                            RegWeight = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegWeight : null) : null,
                            RegCapacity = c.COTOMasterID > 0 ? (c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegCapacity : null) : null,
                            StatusOfCOContainerName = c.StatusOfCOContainerID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                        }).ToList();

                    var lstFIN = model.FIN_PLContainer.Where(c => c.COTOContainerID > 0 && c.OPS_COTOContainer.OPS_Container.ContainerID > 0 && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_COTOContainer.COTOMasterID > 0 &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL &&
                        c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig >= filter.DateFrom && c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateConfig < filter.DateTo &&
                        (IsProvince ? c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationToID > 0 && filter.ListProvinceID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID) : true) &&
                        (IsServiceOfOrder ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 && filter.ListServiceOfOrderID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) &&
                        lstCusID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new
                        {
                            ORDContainerID = c.OPS_COTOContainer.OPS_Container.ContainerID,
                            c.FIN_PLDetails.CostID,
                            c.UnitPrice,
                            c.Quantity,
                            c.RefUnitPrice,
                            c.FIN_PLDetails.Credit,
                            c.FIN_PLDetails.Debit
                        }).ToList();

                    var lstGroupProduct = model.ORD_GroupProduct.Where(c => (c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL || c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLCL) && c.ORD_Order.DateConfig >= filter.DateFrom && c.ORD_Order.DateConfig < filter.DateTo && c.ORD_Order.SYSCustomerID == Account.SYSCustomerID).Select(c => new
                    {
                        c.OrderID,
                        GroupOfProductName = c.GroupOfProductID > 0 ? c.CUS_GroupOfProduct.GroupName : string.Empty,
                        c.Description,
                        OrderContainerID = c.ContainerID,
                    }).ToList();

                    var lstContainer = lstOPSContainer.Select(c => new { PackingID = c.PackingID, PackingCode = c.PackingCode }).Distinct().ToList();

                    foreach (var itemData in ListData)
                    {
                        DTOREPCOPL_Order item = new DTOREPCOPL_Order
                        {
                            OrderID = itemData.OrderID,
                            OrderCode = itemData.OrderCode,

                            DateConfig = itemData.DateConfig,
                            RequestDate = itemData.RequestDate,

                            LocationFromID = itemData.LocationFromID,
                            LocationFromCode = itemData.LocationFromCode,
                            LocationFromName = itemData.LocationFromName,
                            LocationFromAddress = itemData.LocationFromAddress,
                            LocationToID = itemData.LocationToID,
                            LocationToCode = itemData.LocationToCode,
                            LocationToName = itemData.LocationToName,
                            LocationToAddress = itemData.LocationToAddress,
                            LocationToProvince = itemData.LocationToProvince,
                            LocationToDistrict = itemData.LocationToDistrict,
                            CustomerID = itemData.CustomerID,
                            CustomerCode = itemData.CustomerCode,
                            CustomerName = itemData.CustomerName,
                            CustomerShortName = itemData.CustomerShortName,

                            OrderDateConfig = itemData.OrderDateConfig,
                            OrderContract = itemData.OrderContract,
                            OrderRouting = itemData.OrderRouting,

                            OrderCreatedBy = itemData.OrderCreatedBy,
                            OrderCreatedDate = itemData.OrderCreatedDate,

                            ExternalCode = itemData.ExternalCode,
                            ExternalDate = itemData.ExternalDate,
                            UserDefine1 = itemData.UserDefine1,
                            UserDefine2 = itemData.UserDefine2,

                            UserDefine3 = itemData.UserDefine3,

                            ContainerNo = itemData.ContainerNo,

                            CutOffTime = itemData.CutOffTime,
                            Date_TimeGetEmpty = itemData.Date_TimeGetEmpty,
                            Date_TimeReturnEmpty = itemData.Date_TimeReturnEmpty,
                            ETARequest = itemData.ETARequest,
                            TypeOfContainerName = itemData.TypeOfContainerName,
                            CarrierCode = itemData.CarrierCode,
                            CarrierName = itemData.CarrierName,
                            LocationDepotCode = itemData.LocationDepotCode,
                            LocationDepotName = itemData.LocationDepotName,
                            LocationReturnCode = itemData.LocationReturnCode,
                            LocationReturnName = itemData.LocationReturnName,
                            TripNo = itemData.TripNo,
                            VesselNo = itemData.VesselNo,
                            VesselName = itemData.VesselName,
                            SealNo1 = itemData.SealNo1,
                            SealNo2 = itemData.SealNo2,
                        };

                        result.ListData.Add(item);

                        item.Income = item.IncomeEx = item.Cost = item.CostEx = 0;

                        foreach (var itemContainer in lstContainer)
                        {
                            var queryOPSContainer = lstOPSContainer.Where(c => c.OrderID == item.OrderID && c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID && c.PackingID == itemContainer.PackingID);
                            if (queryOPSContainer.Count() > 0)
                            {
                                var first = queryOPSContainer.FirstOrDefault();
                                if (first != null)
                                {
                                    if (first.ETA != null)
                                        item.ETA = first.ETA;
                                    if (first.ETD != null)
                                        item.ETD = first.ETD;
                                    item.CUSRoutingCode = first.CUSRoutingCode;
                                    item.CUSRoutingName = first.CUSRoutingName;
                                    item.COMasterCode = first.COMasterCode;
                                    item.DateFromCome = first.DateFromCome;
                                    item.DateFromLeave = first.DateFromLeave;
                                    item.DateToCome = first.DateToCome;
                                    item.DateToLeave = first.DateToLeave;
                                    item.ServiceOfOrderIncome = first.ServiceOfOrderIncome;
                                    item.ServiceOfOrderCost = first.ServiceOfOrderCost;
                                    item.ContractTermIncome = first.ContractTermIncome;
                                    item.ContractTermCost = first.ContractTermCost;
                                    item.RegWeight = first.RegWeight;
                                    item.RegCapacity = first.RegCapacity;
                                    item.StatusOfCOContainerName = first.StatusOfCOContainerName;
                                }

                                var lstORDContainerID = queryOPSContainer.Select(c => c.ORDContainerID).Distinct().ToList();

                                var col = new DTOREPCOPL_ColumnOrder_Container();
                                col.OrderID = item.OrderID.HasValue ? item.OrderID.Value : -1;
                                col.KeyCode = itemContainer.PackingCode;
                                col.LocationFromID = item.LocationFromID.Value;
                                col.LocationToID = item.LocationToID;
                                col.LocationToProvince = item.LocationToProvince;
                                col.LocationToDistrict = item.LocationToDistrict;
                                col.PackingID = itemContainer.PackingID;
                                col.PackingCode = itemContainer.PackingCode;

                                var groupProduct = lstGroupProduct.Where(c => c.OrderID == col.OrderID && c.OrderContainerID == item.ORDContainerID);
                                if (groupProduct.Count() > 0)
                                {
                                    col.GroupOfProductName = string.Join(", ", lstGroupProduct.Select(c => c.GroupOfProductName).Distinct().ToList());
                                    col.Description = string.Join(", ", lstGroupProduct.Select(c => c.Description).Distinct().ToList());
                                }

                                var queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.COTOFreightCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.IncomeUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.IncomeQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Income = queryFIN.Sum(c => c.Credit);
                                }
                                queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && (c.CostID == (int)CATCostType.ORDContainerServiceCredit || c.CostID == (int)CATCostType.ORDDocumentCredit));
                                if (queryFIN.Count() > 0)
                                {
                                    item.IncomeService = queryFIN.Sum(c => c.Credit);
                                    item.IncomeServiceQuantity = queryFIN.Sum(c => c.Quantity);
                                    item.IncomeServiceUnitPrice = item.IncomeServiceQuantity > 0 ? item.IncomeService / (decimal)item.IncomeServiceQuantity : 0;
                                }
                                queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.COTOExCredit);
                                if (queryFIN.Count() > 0)
                                {
                                    item.IncomeEx = queryFIN.Sum(c => c.Credit);
                                    item.IncomeExQuantity = queryFIN.Sum(c => c.Quantity);
                                    item.IncomeExUnitPrice = item.IncomeExQuantity > 0 ? item.IncomeEx / (decimal)item.IncomeExQuantity : 0;
                                }

                                queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.COTOFreightDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    col.CostUnitPrice = queryFIN.Sum(c => c.UnitPrice) / (decimal)queryFIN.Count();
                                    col.CostQuantity = queryFIN.Sum(c => c.Quantity);
                                    col.Cost = queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && (c.CostID == (int)CATCostType.ORDContainerServiceDebit || c.CostID == (int)CATCostType.ORDDocumentDebit));
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostService = queryFIN.Sum(c => c.Debit);
                                    item.CostServiceQuantity = queryFIN.Sum(c => c.Quantity);
                                    item.CostServiceUnitPrice = item.CostServiceQuantity > 0 ? item.CostService / (decimal)item.CostServiceQuantity : 0;
                                }
                                queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.COTOExDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostEx = queryFIN.Sum(c => c.Debit);
                                    item.CostExQuantity = queryFIN.Sum(c => c.Quantity);
                                    item.CostExUnitPrice = item.CostExQuantity > 0 ? item.CostEx / (decimal)item.CostExQuantity : 0;
                                }

                                var lstTrouble = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.TroubleCredit);
                                if (lstTrouble != null && lstTrouble.Count() > 0)
                                {
                                    col.IncomeTrouble = lstTrouble.Sum(c => c.Credit);
                                }

                                lstTrouble = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.TroubleDebit);
                                if (lstTrouble != null && lstTrouble.Count() > 0)
                                {
                                    col.CostTrouble = lstTrouble.Sum(c => c.Debit);
                                }

                                // Xe nhà
                                queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.FLMDepreciation);
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostDepreciation += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.FLMScheduleFee);
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostSchedule += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.FLMDriverFee);
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostDriver += queryFIN.Sum(c => c.Debit);
                                }
                                queryFIN = lstFIN.Where(c => lstORDContainerID.Contains(c.ORDContainerID) && c.CostID == (int)CATCostType.StationDebit);
                                if (queryFIN.Count() > 0)
                                {
                                    item.CostStation += queryFIN.Sum(c => c.Debit);
                                }

                                result.ListColumn.Add(col);

                                item.Income += col.Income;
                                item.IncomeEx += col.IncomeEx;
                                item.IncomeTrouble += col.IncomeTrouble;
                                item.IncomeService += col.IncomeService;
                                item.Cost += col.Cost;
                                item.CostEx += col.CostEx;
                                item.CostTrouble += col.CostTrouble;
                                item.CostService += col.CostService;
                                item.CostDepreciation += col.CostDepreciation;
                                item.CostSchedule += col.CostSchedule;
                                item.CostDriver += col.CostDriver;
                                item.CostStation += col.CostStation;
                            }
                        }

                        item.TotalIncome = item.Income + item.IncomeEx + item.IncomeTrouble + item.IncomeService;
                        item.TotalCost = item.Cost + item.CostEx + item.CostTrouble + item.CostService + item.CostDepreciation + item.CostSchedule + item.CostDriver + item.CostStation;
                        item.TotalPL = item.TotalIncome - item.TotalCost;
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.DateConfig).ThenBy(c => c.OrderCode).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPCOPL_Order>().OrderBy(c => c.DateConfig).ThenBy(c => c.OrderCode).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region MAP
        public DTOCartoDB CartoDB_List(string request, List<int> dataCusID, DateTime DateFrom, DateTime DateTo, int provinceID)
        {
            try
            {
                const int iTon = -(int)SYSVarType.PriceOfGOPTon;
                const int iCBM = -(int)SYSVarType.PriceOfGOPCBM;
                //const int iTU = -(int)SYSVarType.PriceOfGOPTU;

                DTOCartoDB result = new DTOCartoDB();
                result.lstDetail = new List<DTOCartoDB_Detail>();
                using (var model = new DataEntities())
                {
                    DateFrom = DateFrom.Date;
                    DateTo = DateTo.AddDays(1).Date;

                    var queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && (c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived) &&
                    c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && ((c.ORD_GroupProduct.ORD_Order.DateConfig >= DateFrom && c.ORD_GroupProduct.ORD_Order.DateConfig < DateTo) || (c.ORD_GroupProduct.DateConfig >= DateFrom && c.ORD_GroupProduct.DateConfig < DateTo)) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OPS_DITOMaster.VehicleID.HasValue).Select(c => new DTOCartoDB_Detail
                    {
                        ID = c.ID,
                        DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                        DITOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                        VehicleID = c.OPS_DITOMaster.VehicleID.Value,
                        KM = c.DITOMasterID.HasValue && c.OPS_DITOMaster.KM.HasValue ? c.OPS_DITOMaster.KM.Value : 0,
                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        OrderGroupProductID = c.OrderGroupProductID.Value,
                        SOCode = c.ORD_GroupProduct.SOCode,
                        DNCode = c.ORD_GroupProduct.DNCode,
                        PriceOfGOPID = c.ORD_GroupProduct.PriceOfGOPID.HasValue ? c.ORD_GroupProduct.PriceOfGOPID.Value : -1,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                        ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                        ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : null,
                        DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                        TonTranfer = c.TonTranfer,
                        CBMTranfer = c.CBMTranfer,
                        QuantityTranfer = c.QuantityTranfer,
                        TonReturn = c.TonReturn,
                        CBMReturn = c.CBMReturn,
                        QuantityReturn = c.QuantityReturn,
                        DITOGroupProductStatusPODID = c.DITOGroupProductStatusPODID,
                        StockCode = c.ORD_GroupProduct.CUS_Location.CAT_Location.Code,
                        StockName = c.ORD_GroupProduct.CUS_Location.CAT_Location.Location,
                        StockAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                        StockProvinceID = c.ORD_GroupProduct.CUS_Location.CAT_Location.ProvinceID,
                        StockDistrictID = c.ORD_GroupProduct.CUS_Location.CAT_Location.DistrictID,
                        DistributorCode = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Code,
                        DistributorName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Location,
                        DistributorProvinceID = c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID,
                        DistributorDistrictID = c.ORD_GroupProduct.CUS_Location1.CAT_Location.DistrictID,
                        DistributorAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                        DistributorLat = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Lat > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Lat : null,
                        DistributorLng = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Lng > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Lng : null,
                        DateFromLoadStart = c.DateFromLoadStart,
                        DateFromLoadEnd = c.DateFromLoadEnd,
                        DateToLoadStart = c.DateToLoadStart,
                        DateToLoadEnd = c.DateToLoadEnd,
                        IsReturn = c.ORD_GroupProduct.IsReturn.HasValue ? c.ORD_GroupProduct.IsReturn.Value : false,
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.lstDetail.AddRange(queryLTL.Data.Cast<DTOCartoDB_Detail>().ToList());

                    var lstVehicle = model.CAT_Vehicle.Select(c => new
                    {
                        c.ID,
                        c.MaxCapacity,
                        c.MaxWeightCal
                    }).ToList();

                    var lstLoading = model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig >= DateFrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig < DateTo && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL &&
                        (c.FIN_PLDetails.CostID == (int)CATCostType.DITOLoadCredit || c.FIN_PLDetails.CostID == (int)CATCostType.DITOUnLoadCredit)).Select(c => new
                        {
                            c.GroupOfProductID,
                            c.Quantity,
                            c.UnitPrice,
                            c.FIN_PLDetails.CostID
                        }).ToList();

                    foreach (var item in result.lstDetail)
                    {
                        item.RequestDateString = item.RequestDate.ToString("yyyy-MM-dd");
                        if (item.ETA.HasValue)
                            item.ETAString = item.ETA.Value.ToString("yyyy-MM-dd");
                        if (item.ETD.HasValue)
                            item.ETDString = item.ETD.Value.ToString("yyyy-MM-dd");
                        if (item.DateConfig.HasValue)
                            item.DateConfigString = item.DateConfig.Value.ToString("yyyy-MM-dd");
                        if (item.DistributorLat.HasValue && item.DistributorLng.HasValue)
                            item.TheGeo = "CDB_LatLng(" + item.DistributorLat.Value.ToString() + "," + item.DistributorLng.Value.ToString() + ")";
                        else
                            item.TheGeo = string.Empty;

                        var vehicle = lstVehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                        if (vehicle != null)
                        {
                            item.VehicleTon = vehicle.MaxWeightCal.HasValue ? vehicle.MaxWeightCal.Value : 0;
                            item.VehicleCBM = vehicle.MaxCapacity.HasValue ? vehicle.MaxCapacity.Value : 0;
                        }

                        if (item.DateConfig.HasValue) item.DateConfig = item.DateConfig.Value.Date;

                        // Bốc xếp
                        var lstLoadingGroup = lstLoading.Where(c => c.GroupOfProductID == item.ID && c.Quantity > 0);
                        if (lstLoadingGroup != null && lstLoadingGroup.Count() > 0)
                        {
                            var lstMyLoading = lstLoadingGroup.Where(c => c.CostID == (int)CATCostType.DITOLoadCredit);
                            var lstMyUnLoading = lstLoadingGroup.Where(c => c.CostID == (int)CATCostType.DITOUnLoadCredit);

                            switch (item.PriceOfGOPID)
                            {
                                case iTon:
                                    item.TonLoading = lstMyLoading != null ? lstMyLoading.Sum(c => c.Quantity) : 0;
                                    item.TonUnLoading = lstMyUnLoading != null ? lstMyUnLoading.Sum(c => c.Quantity) : 0;
                                    break;
                                case iCBM:
                                    item.CBMLoading = lstMyLoading != null ? lstMyLoading.Sum(c => c.Quantity) : 0;
                                    item.CBMUnLoading = lstMyUnLoading != null ? lstMyUnLoading.Sum(c => c.Quantity) : 0;
                                    break;
                            }
                        }

                        // Thời gian bốc xếp
                        if (item.DateFromLoadStart.HasValue && item.DateFromLoadEnd.HasValue)
                            item.TimeLoading = (item.DateFromLoadEnd.Value - item.DateFromLoadStart.Value).TotalHours;

                        if (item.DateToLoadStart.HasValue && item.DateToLoadEnd.HasValue)
                            item.TimeUnLoading = (item.DateToLoadEnd.Value - item.DateToLoadStart.Value).TotalHours;
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<string> CartoDB_Vehicle_List(DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<string>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Vehicle.Where(c => c.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => c.RegNo).Distinct().ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Đội xe
        // Lương tài xế
        public List<DTOREPOwner_DriverFee> REPOwner_DriverFee(int scheduleID, string request)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.FLMDriverFeeNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.FLMScheduleFeeNoGroup);

                List<int> lstGroupDebit = new List<int>();
                lstGroupDebit.Add((int)CATCostType.FLMDriverFee);
                lstGroupDebit.Add((int)CATCostType.FLMScheduleFee);

                #endregion

                DateTime? dtNull = null;
                var result = new List<DTOREPOwner_DriverFee>();
                using (var model = new DataEntities())
                {
                    if (scheduleID > 0)
                    {
                        var schedule = model.FLM_Schedule.FirstOrDefault(c => c.ID == scheduleID);
                        DateTime dtfrom = schedule.DateFrom.Date;
                        DateTime dtto = schedule.DateTo.Date.AddDays(1);

                        result = model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID > 0 && c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PLDetails.FIN_PL.ScheduleID == scheduleID &&
                            c.FIN_PLDetails.FIN_PL.Effdate >= dtfrom && c.FIN_PLDetails.FIN_PL.Effdate < dtto && c.FIN_PLDetails.FIN_PL.DriverID > 0 && lstGroupDebit.Contains(c.FIN_PLDetails.CostID)).Select(c => new DTOREPOwner_DriverFee
                            {
                                DITOMasterID = c.FIN_PLDetails.FIN_PL.DITOMasterID,
                                TOMasterCode = c.FIN_PLDetails.FIN_PL.DITOMasterID.HasValue ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                                DITOGroupProductID = c.ID,
                                OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                                OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                                DNCode = c.OPS_DITOGroupProduct.DNCode,
                                SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                                DateConfig = c.FIN_PLDetails.FIN_PL.Effdate,
                                RequestDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                                StockID = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID,
                                StockCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code : "",
                                StockName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName : "",
                                StockAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                                PartnerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID,
                                PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                                GroupOfLocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                                GroupOfLocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                                CUSRoutingID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                                CUSRoutingName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                                GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                                GroupOfProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                GroupOfProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                FINSort = c.OPS_DITOGroupProduct.ORD_GroupProduct.FINSort,

                                GroupOfVehicleCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                                GroupOfVehicleName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                                VehicleID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID,
                                VehicleCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                                VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                                VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.Code : "",
                                VendorName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                                VendorShortName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName : "",

                                CustomerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CustomerShortName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                                KM = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.KM : null,
                                ETD = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : dtNull,
                                ETA = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA : dtNull,

                                TonTranfer = c.OPS_DITOGroupProduct.TonTranfer,
                                CBMTranfer = c.OPS_DITOGroupProduct.CBMTranfer,
                                QuantityTranfer = c.OPS_DITOGroupProduct.QuantityTranfer,
                                TonBBGN = c.OPS_DITOGroupProduct.TonBBGN,
                                CBMBBGN = c.OPS_DITOGroupProduct.CBMBBGN,
                                QuantityBBGN = c.OPS_DITOGroupProduct.QuantityBBGN,
                                TonReturn = c.OPS_DITOGroupProduct.TonReturn,
                                CBMReturn = c.OPS_DITOGroupProduct.CBMReturn,
                                QuantityReturn = c.OPS_DITOGroupProduct.QuantityReturn,

                                KgTranfer = c.OPS_DITOGroupProduct.TonTranfer * 1000,
                                KgBBGN = c.OPS_DITOGroupProduct.TonBBGN * 1000,
                                KgReturn = c.OPS_DITOGroupProduct.TonReturn * 1000,

                                OrderDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                                OrderGroupProductDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig,
                                OrderContract = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                                OrderRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                                OrderGroupProductRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                                OPSDateConfig = c.OPS_DITOGroupProduct.OPS_DITOMaster.DateConfig,
                                OPSGroupProductDateConfig = c.OPS_DITOGroupProduct.DateConfig,
                                OPSContract = c.OPS_DITOGroupProduct.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                                OPSRouting = c.OPS_DITOGroupProduct.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                                OPSGroupProductRouting = c.OPS_DITOGroupProduct.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.CAT_Routing.RoutingName : "",

                                OrderCreatedBy = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedBy,
                                OrderCreatedDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedDate,

                                Cost = c.FIN_PLDetails.Debit,
                                CostQuantity = c.Quantity == 0 ? (c.FIN_PLDetails.Quantity > 0 ? c.FIN_PLDetails.Quantity.Value : 0) : c.Quantity,
                                CostUnitPrice = c.UnitPrice == 0 ? (c.FIN_PLDetails.UnitPrice > 0 ? c.FIN_PLDetails.UnitPrice.Value : 0) : c.UnitPrice,
                                CostName = c.FIN_PLDetails.CAT_Cost.CostName,
                                Note = c.FIN_PLDetails.Note,
                                Note1 = c.FIN_PLDetails.Note1,
                                Note2 = c.FIN_PLDetails.Note2,
                                TotalCost = c.FIN_PLDetails.Debit,

                                DriverID = c.FIN_PLDetails.FIN_PL.DriverID.Value,
                                DriverCode = c.FIN_PLDetails.FIN_PL.FLM_Driver.Code,
                                DriverName = c.FIN_PLDetails.FIN_PL.FLM_Driver.CAT_Driver.LastName + " " + c.FIN_PLDetails.FIN_PL.FLM_Driver.CAT_Driver.FirstName
                            }).ToList();

                        result.AddRange(model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.ScheduleID == schedule.ID && c.FIN_PL.DriverID > 0 && c.FIN_PL.Effdate >= dtfrom && c.FIN_PL.Effdate < dtto && lstNoGroupDebit.Contains(c.CostID)).Select(c => new DTOREPOwner_DriverFee
                        {
                            DITOMasterID = c.FIN_PL.DITOMasterID,
                            TOMasterCode = c.FIN_PL.DITOMasterID.HasValue ? c.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                            DateConfig = c.FIN_PL.Effdate,
                            CostName = c.CAT_Cost.CostName,
                            Cost = c.Debit,
                            CostQuantity = c.Quantity.HasValue ? c.Quantity.Value : 0,
                            CostUnitPrice = c.UnitPrice.HasValue ? c.UnitPrice.Value : 0,
                            Note = c.Note,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            TotalCost = c.Debit,
                            DriverID = c.FIN_PL.DriverID.Value,
                            DriverCode = c.FIN_PL.FLM_Driver.Code,
                            DriverName = c.FIN_PL.FLM_Driver.CAT_Driver.LastName + " " + c.FIN_PL.FLM_Driver.CAT_Driver.FirstName
                        }).ToList());

                        result.AddRange(model.FLM_ScheduleDriver.Where(c => c.ScheduleID == schedule.ID).Select(c => new DTOREPOwner_DriverFee
                        {
                            DriverID = c.DriverID,
                            DriverCode = c.FLM_Driver.Code,
                            DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                            DaysAllowOff = c.DaysAllowOff,
                            DaysAllowOffRemain = c.DaysAllowOffRemain,
                            DaysWorkInOff = c.DaysWorkInOff,
                            DaysWorkInOn = c.DaysWorkInOn,
                            DaysWorkInHoliday = c.DaysWorkInHoliday,
                        }).ToList());

                        result.AddRange(model.FLM_ScheduleFee.Where(c => c.ScheduleID == schedule.ID && c.DriverID.HasValue && c.Day.HasValue).Select(c => new DTOREPOwner_DriverFee
                        {
                            DriverID = c.DriverID.Value,
                            DriverCode = c.FLM_Driver.Code,
                            DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                            TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                            TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                            TypeOfScheduleFeeDay = c.Day.Value,
                        }).ToList());

                        if (string.IsNullOrEmpty(request))
                            result = result.OrderBy(c => c.DriverName).ThenBy(c => c.DateConfig).ThenBy(c => c.DITOMasterID).ToList();
                        else
                            result = result.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPOwner_DriverFee>().OrderBy(c => c.DriverName).ThenBy(c => c.DateConfig).ThenBy(c => c.DITOMasterID).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPOwner_DriverFee_ColumnDetail REPOwner_DriverFee_ColumnDetailData(int scheduleID, string request)
        {
            try
            {
                #region Temp Cost
                List<int> lstDriverFee = new List<int>();
                List<int> lstScheduleFee = new List<int>();
                lstDriverFee.Add((int)CATCostType.FLMDriverFeeNoGroup);
                lstDriverFee.Add((int)CATCostType.FLMDriverFee);
                lstScheduleFee.Add((int)CATCostType.FLMScheduleFeeNoGroup);
                lstScheduleFee.Add((int)CATCostType.FLMScheduleFee);
                #endregion

                var result = new DTOREPOwner_DriverFee_ColumnDetail();
                result.ListHeader = new List<DTOREPOwner_DriverFee_ColumnDetail_Header>();
                result.ListData = new List<DTOREPOwner_DriverFee_ColumnDetail_Data>();
                result.ListDate = new List<DTOREPOwner_DriverFee_ColumnDetail_Date>();
                result.ListSalary = new List<DTOREPOwner_DriverFee_ColumnDetail_Salary>();

                using (var model = new DataEntities())
                {
                    if (scheduleID > 0)
                    {
                        #region Lấy setting hệ thống
                        DTOSYSSetting setting = new DTOSYSSetting();
                        string sKey = SYSSettingKey.System.ToString();
                        var objSetting = model.SYS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == Account.SYSCustomerID);
                        if (objSetting != null)
                        {
                            if (!string.IsNullOrEmpty(objSetting.Setting))
                            {
                                var data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(objSetting.Setting);
                                if (data != null && data.Count > 0)
                                    setting = data.FirstOrDefault();
                            }
                        }
                        #endregion

                        var schedule = model.FLM_Schedule.FirstOrDefault(c => c.ID == scheduleID);
                        DateTime dtfrom = schedule.DateFrom.Date;
                        DateTime dtto = schedule.DateTo.Date.AddDays(1);
                        DateTime dtnow = DateTime.Now;
                        while (dtfrom <= schedule.DateTo.Date)
                        {
                            DTOREPOwner_DriverFee_ColumnDetail_Header itemDate = new DTOREPOwner_DriverFee_ColumnDetail_Header();
                            itemDate.Date = dtfrom;
                            itemDate.DateName = dtfrom.ToString("dd/MM/yyyy");
                            itemDate.DateString = "D" + dtfrom.ToString("ddMMyyyy");
                            result.ListHeader.Add(itemDate);
                            dtfrom = dtfrom.AddDays(1);
                        }

                        var driverMain = model.SYS_Var.FirstOrDefault(c => c.ID == -(int)SYSVarType.TypeOfDriverMain);
                        var driverEx = model.SYS_Var.FirstOrDefault(c => c.ID == -(int)SYSVarType.TypeOfDriverEx);

                        result.ListData.AddRange(model.FLM_ScheduleDriver.Where(c => c.ScheduleID == scheduleID).Select(c => new DTOREPOwner_DriverFee_ColumnDetail_Data
                        {
                            DriverID = c.DriverID,
                            DriverCode = c.FLM_Driver.Code,
                            DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                            FeeBase = c.FeeBase,
                            DaysAllowOff = c.DaysAllowOff,
                            DaysAllowOffRemain = c.DaysAllowOffRemain > 0 ? c.DaysAllowOffRemain.Value : 0,
                            DaysWorkInOn = c.DaysWorkInOn > 0 ? c.DaysWorkInOn.Value : 0,
                            DaysWorkInOff = c.DaysWorkInOff > 0 ? c.DaysWorkInOff.Value : 0,
                            DaysWorkInHoliday = c.DaysWorkInHoliday > 0 ? c.DaysWorkInHoliday.Value : 0,
                            IsAssistant = c.IsAssistant,
                            TypeOfDriverID = c.IsAssistant ? driverEx.ID : driverMain.ID,
                            TypeOfDriverCode = c.IsAssistant ? driverEx.Code : driverMain.Code,
                            TypeOfDriverName = c.IsAssistant ? driverEx.ValueOfVar : driverMain.ValueOfVar,
                        }).OrderBy(c => c.DriverCode).ToList());

                        result.ListDate.AddRange(model.FLM_ScheduleDateDetail.Where(c => c.FLM_ScheduleDate.ScheduleID == scheduleID).Select(c => new DTOREPOwner_DriverFee_ColumnDetail_Date
                        {
                            DriverID = c.DriverID,
                            Date = c.FLM_ScheduleDate.Date,
                            TypeScheduleDateID = c.FLM_ScheduleDate.TypeScheduleDateID,
                            TypeScheduleDateCode = c.FLM_ScheduleDate.SYS_Var.Code,
                            TypeScheduleDateName = c.FLM_ScheduleDate.SYS_Var.ValueOfVar,
                        }).ToList());

                        result.ListSalary.AddRange(model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.DriverID.HasValue && c.FIN_PL.ScheduleID == scheduleID && (lstScheduleFee.Contains(c.CostID) || lstDriverFee.Contains(c.CostID))).Select(c => new DTOREPOwner_DriverFee_ColumnDetail_Salary
                        {
                            DriverID = c.FIN_PL.DriverID.Value,
                            CostID = c.CostID,
                            Value = c.Debit,
                            TypeOfSalaryCode = lstScheduleFee.Contains(c.CostID) ? "ScheduleFee" : "DriverFee",
                            SalaryCode = c.TypeOfPriceDIExCode,
                            KeyCode = lstScheduleFee.Contains(c.CostID) ? ("ScheduleFee-" + c.TypeOfPriceDIExCode) : ("DriverFee-" + c.TypeOfPriceDIExCode),
                        }).ToList());

                        var lstFIN = model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.DriverID.HasValue && c.FIN_PL.ScheduleID == scheduleID && c.CostID == (int)CATCostType.TroubleDebit).Select(c => new DTOREPOwner_DriverFee_ColumnDetail_Salary
                        {
                            DriverID = c.FIN_PL.DriverID.Value,
                            CostID = c.CostID,
                            Value = c.Debit,
                        }).ToList();

                        var lstMaster = model.OPS_DITOMaster.Where(c => c.ID == -1).Select(c => new
                        {
                            c.ID,
                            c.VehicleID,
                            DriverID = c.DriverID1.HasValue ? c.DriverID1.Value : c.DriverID2.HasValue ? c.DriverID2.Value : c.DriverID3.HasValue ? c.DriverID3.Value : -1,
                            TypeOfDriverID = c.TypeOfDriverID1.HasValue ? c.TypeOfDriverID1.Value : c.TypeOfDriverID2.HasValue ? c.TypeOfDriverID2.Value : c.TypeOfDriverID3.HasValue ? c.TypeOfDriverID3.Value : -1,
                            DateConfig = c.ETD.HasValue ? c.ETD.Value : dtnow,
                        }).ToList();

                        if (!setting.IsPHT)
                        {
                            lstMaster = model.OPS_DITOMaster.Where(c => c.ETD.HasValue && c.ScheduleID == scheduleID && c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.VehicleID > 0 && (c.DriverID1.HasValue || c.DriverID2.HasValue || c.DriverID3.HasValue || c.DriverID4.HasValue || c.DriverID5.HasValue) && c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived).Select(c => new
                            {
                                c.ID,
                                c.VehicleID,
                                DriverID = c.DriverID1.HasValue ? c.DriverID1.Value : c.DriverID2.HasValue ? c.DriverID2.Value : c.DriverID3.HasValue ? c.DriverID3.Value : c.DriverID4.HasValue ? c.DriverID4.Value : c.DriverID5.HasValue ? c.DriverID5.Value : -1,
                                TypeOfDriverID = c.TypeOfDriverID1.HasValue ? c.TypeOfDriverID1.Value : c.TypeOfDriverID2.HasValue ? c.TypeOfDriverID2.Value : c.TypeOfDriverID3.HasValue ? c.TypeOfDriverID3.Value : -1,
                                DateConfig = c.ETD.HasValue ? c.ETD.Value : dtnow,
                            }).ToList();

                            lstMaster.AddRange(model.OPS_COTOMaster.Where(c => c.ScheduleID == scheduleID && c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.VehicleID > 0 && (c.DriverID1.HasValue || c.DriverID2.HasValue || c.DriverID3.HasValue || c.DriverID4.HasValue || c.DriverID5.HasValue) && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived).Select(c => new
                            {
                                c.ID,
                                c.VehicleID,
                                DriverID = c.DriverID1.HasValue ? c.DriverID1.Value : c.DriverID2.HasValue ? c.DriverID2.Value : c.DriverID3.HasValue ? c.DriverID3.Value : c.DriverID4.HasValue ? c.DriverID4.Value : c.DriverID5.HasValue ? c.DriverID5.Value : -1,
                                TypeOfDriverID = c.TypeOfDriverID1.HasValue ? c.TypeOfDriverID1.Value : c.TypeOfDriverID2.HasValue ? c.TypeOfDriverID2.Value : c.TypeOfDriverID3.HasValue ? c.TypeOfDriverID3.Value : -1,
                                DateConfig = c.ETD
                            }).ToList());
                        }
                        else
                        {
                            lstMaster = model.OPS_DITOMaster.Where(c => c.DateConfig.HasValue && c.ScheduleID == scheduleID && c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.VehicleID > 0 && (c.DriverID1.HasValue || c.DriverID2.HasValue || c.DriverID3.HasValue || c.DriverID4.HasValue || c.DriverID5.HasValue) && c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPHT).Select(c => new
                            {
                                c.ID,
                                c.VehicleID,
                                DriverID = c.DriverID1.HasValue ? c.DriverID1.Value : c.DriverID2.HasValue ? c.DriverID2.Value : c.DriverID3.HasValue ? c.DriverID3.Value : c.DriverID4.HasValue ? c.DriverID4.Value : c.DriverID5.HasValue ? c.DriverID5.Value : -1,
                                TypeOfDriverID = c.TypeOfDriverID1.HasValue ? c.TypeOfDriverID1.Value : c.TypeOfDriverID2.HasValue ? c.TypeOfDriverID2.Value : c.TypeOfDriverID3.HasValue ? c.TypeOfDriverID3.Value : -1,
                                DateConfig = c.ETD.HasValue ? c.ETD.Value : dtnow,
                            }).ToList();

                            lstMaster.AddRange(model.OPS_COTOMaster.Where(c => c.ScheduleID == scheduleID && c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.VehicleID > 0 && (c.DriverID1.HasValue || c.DriverID2.HasValue || c.DriverID3.HasValue || c.DriverID4.HasValue || c.DriverID5.HasValue) && c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPHT).Select(c => new
                            {
                                c.ID,
                                c.VehicleID,
                                DriverID = c.DriverID1.HasValue ? c.DriverID1.Value : c.DriverID2.HasValue ? c.DriverID2.Value : c.DriverID3.HasValue ? c.DriverID3.Value : c.DriverID4.HasValue ? c.DriverID4.Value : c.DriverID5.HasValue ? c.DriverID5.Value : -1,
                                TypeOfDriverID = c.TypeOfDriverID1.HasValue ? c.TypeOfDriverID1.Value : c.TypeOfDriverID2.HasValue ? c.TypeOfDriverID2.Value : c.TypeOfDriverID3.HasValue ? c.TypeOfDriverID3.Value : -1,
                                DateConfig = c.ETD
                            }).ToList());
                        }


                        foreach (var item in result.ListData)
                        {
                            item.TotalSchedule = lstMaster.Where(c => c.DriverID == item.DriverID).Select(c => c.ID).Distinct().Count();
                            var lstFINDriver = result.ListSalary.Where(c => lstDriverFee.Contains(c.CostID) && c.DriverID == item.DriverID);
                            if (lstFINDriver.Count() > 0)
                                item.TotalDriverFee = lstFINDriver.Sum(c => c.Value);
                            var lstFINSchedule = result.ListSalary.Where(c => lstScheduleFee.Contains(c.CostID) && c.DriverID == item.DriverID);
                            if (lstFINSchedule.Count() > 0)
                                item.TotalScheduleFee = lstFINSchedule.Sum(c => c.Value);
                            var lstFINTrouble = lstFIN.Where(c => c.DriverID == item.DriverID && c.CostID == (int)CATCostType.TroubleDebit);
                            if (lstFINTrouble.Count() > 0)
                                item.TotalTrouble = lstFINTrouble.Sum(c => c.Value);

                            item.TotalInCome = item.TotalScheduleFee + item.TotalDriverFee + item.TotalOther + item.TotalEx + item.TotalTrouble;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Phiếu lương
        public List<DTOREPOwner_DriverSalary> REPOwner_DriverSalary(int scheduleID, List<int> lstDriverID)
        {
            try
            {
                #region Temp Cost
                List<int> lstDriverFee = new List<int>();
                List<int> lstScheduleFee = new List<int>();
                lstDriverFee.Add((int)CATCostType.FLMDriverFeeNoGroup);
                lstDriverFee.Add((int)CATCostType.FLMDriverFee);
                lstScheduleFee.Add((int)CATCostType.FLMScheduleFeeNoGroup);
                lstScheduleFee.Add((int)CATCostType.FLMScheduleFee);
                #endregion

                var result = new List<DTOREPOwner_DriverSalary>();
                using (var model = new DataEntities())
                {
                    if (scheduleID > 0 && lstDriverID.Count > 0)
                    {
                        var lstFINDetail = model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.DriverID.HasValue && c.FIN_PL.ScheduleID == scheduleID && lstDriverFee.Contains(c.CostID) && lstDriverID.Contains(c.FIN_PL.DriverID.Value)).Select(c => new
                        {
                            Date = c.FIN_PL.Effdate,
                            VehicleID = c.FIN_PL.VehicleID > 0 ? c.FIN_PL.VehicleID.Value : -1,
                            VehicleCode = c.FIN_PL.VehicleID > 0 ? c.FIN_PL.CAT_Vehicle.RegNo : string.Empty,
                            MasterSort = c.FIN_PL.DITOMasterID > 0 ? c.FIN_PL.OPS_DITOMaster.SortOrder : 1,
                            DriverID = c.FIN_PL.DriverID.Value,
                            Debit = c.Debit,
                            Note = c.Note1
                        }).ToList();

                        var lstFINDay = model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.DriverID.HasValue && c.FIN_PL.ScheduleID == scheduleID && lstScheduleFee.Contains(c.CostID) && lstDriverID.Contains(c.FIN_PL.DriverID.Value)).Select(c => new
                        {
                            DriverID = c.FIN_PL.DriverID.Value,
                            Debit = c.Debit,
                        }).ToList();

                        var lstFINOther = model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.DriverID.HasValue && c.FIN_PL.ScheduleID == scheduleID && c.CostID == (int)CATCostType.TroubleDebit && lstDriverID.Contains(c.FIN_PL.DriverID.Value)).Select(c => new
                        {
                            DriverID = c.FIN_PL.DriverID.Value,
                            Debit = c.Debit,
                        }).ToList();

                        foreach (var itemDriverID in lstDriverID)
                        {
                            DTOREPOwner_DriverSalary item = new DTOREPOwner_DriverSalary();
                            item.DriverID = itemDriverID;
                            item.ListDetail = new List<DTOREPOwner_DriverSalary_Detail>();

                            item.ListDetail.AddRange(lstFINDetail.Where(c => c.DriverID == itemDriverID).Select(c => new DTOREPOwner_DriverSalary_Detail
                                {
                                    Date = c.Date,
                                    Debit = c.Debit,
                                    MasterSort = c.MasterSort,
                                    Note = c.Note,
                                    VehicleCode = c.VehicleCode,
                                    VehicleID = c.VehicleID
                                }).ToList());

                            item.FeeDetail = item.ListDetail.Count > 0 ? item.ListDetail.Sum(c => c.Debit) : 0;

                            var queryFINDay = lstFINDay.Where(c => c.DriverID == itemDriverID);
                            if (queryFINDay.Count() > 0)
                                item.FeeDay = queryFINDay.Sum(c => c.Debit);

                            queryFINDay = lstFINOther.Where(c => c.DriverID == itemDriverID);
                            if (queryFINDay.Count() > 0)
                                item.FeeOther = queryFINDay.Sum(c => c.Debit);

                            result.Add(item);
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Lợi nhuận xe
        public List<DTOREPOwner_Vehicle> REPOwner_VehicleFee(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupDebitPL = new List<int>();
                lstNoGroupDebitPL.Add((int)CATCostType.DITOFreightNoGroupDebit);
                lstNoGroupDebitPL.Add((int)CATCostType.DITOMOQNoGroupDebit);
                lstNoGroupDebitPL.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstNoGroupDebitPL.Add((int)CATCostType.DITOMOQUnLoadNoGroupDebit);
                lstNoGroupDebitPL.Add((int)CATCostType.DITOExNoGroupDebit);
                List<int> lstNoGroupDebitDriver = new List<int>();
                lstNoGroupDebitDriver.Add((int)CATCostType.StationDebit);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMScheduleFeeNoGroup);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMDriverFeeNoGroup);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptRegistry);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptMaintence);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptRepairLarge);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptRepairSmall);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptMaterial);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMDepreciationNoGroup);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMDepreciationReceiptNoGroup);
                lstNoGroupDebitDriver.Add((int)CATCostType.TroubleDebit);
                List<int> lstNoGroupCreditPL = new List<int>();
                lstNoGroupCreditPL.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstNoGroupCreditPL.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstNoGroupCreditPL.Add((int)CATCostType.DITOMOQLoadNoGroupCredit);
                lstNoGroupCreditPL.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstNoGroupCreditPL.Add((int)CATCostType.DITOExNoGroupCredit);
                List<int> lstGroupDebitPL = new List<int>();
                lstGroupDebitPL.Add((int)CATCostType.DITOFreightDebit);
                lstGroupDebitPL.Add((int)CATCostType.DITOUnLoadDebit);
                lstGroupDebitPL.Add((int)CATCostType.DITOLoadDebit);
                lstGroupDebitPL.Add((int)CATCostType.DITOReturnDebit);
                lstGroupDebitPL.Add((int)CATCostType.DITOUnLoadReturnDebit);
                lstGroupDebitPL.Add((int)CATCostType.DITOLoadReturnDebit);
                lstGroupDebitPL.Add((int)CATCostType.DITOExDebit);
                lstGroupDebitPL.Add((int)CATCostType.ManualFixDebit);
                lstGroupDebitPL.Add((int)CATCostType.TroubleDebit);
                List<int> lstGroupDebitDriver = new List<int>();
                lstGroupDebitDriver.Add((int)CATCostType.FLMScheduleFee);
                lstGroupDebitDriver.Add((int)CATCostType.FLMDriverFee);
                lstGroupDebitDriver.Add((int)CATCostType.FLMDepreciation);
                lstGroupDebitDriver.Add((int)CATCostType.FLMDepreciationReceipt);
                List<int> lstGroupCreditPL = new List<int>();
                lstGroupCreditPL.Add((int)CATCostType.ManualFixCredit);
                lstGroupCreditPL.Add((int)CATCostType.DITOFreightCredit);
                lstGroupCreditPL.Add((int)CATCostType.DITOUnLoadCredit);
                lstGroupCreditPL.Add((int)CATCostType.DITOLoadCredit);
                lstGroupCreditPL.Add((int)CATCostType.DITOReturnCredit);
                lstGroupCreditPL.Add((int)CATCostType.DITOUnLoadReturnCredit);
                lstGroupCreditPL.Add((int)CATCostType.DITOLoadReturnCredit);
                lstGroupCreditPL.Add((int)CATCostType.DITOExCredit);
                lstGroupCreditPL.Add((int)CATCostType.TroubleCredit);
                #endregion

                DateTime? dtNull = null;
                var result = new List<DTOREPOwner_Vehicle>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    bool IsGroupLocation = false;
                    bool IsGroupPartner = false;
                    bool IsProvince = false;
                    bool IsServiceOfOrder = false;

                    if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                        filter.ListGroupProductID = new List<int>();
                    if (filter.ListGroupProductID.Count > 0)
                        IsGroup = true;

                    if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                        filter.ListStockID = new List<int>();
                    if (filter.ListStockID.Count > 0)
                        IsStock = true;

                    if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                        filter.ListGroupOfPartnerID = new List<int>();
                    if (filter.ListGroupOfPartnerID.Count > 0)
                        IsGroupPartner = true;

                    if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                        filter.ListGroupOfLocationID = new List<int>();
                    if (filter.ListGroupOfLocationID.Count > 0)
                        IsGroupLocation = true;

                    if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                        filter.ListProvinceID = new List<int>();
                    if (filter.ListProvinceID.Count > 0)
                        IsProvince = true;

                    if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                        filter.ListServiceOfOrderID = new List<int>();
                    if (filter.ListServiceOfOrderID.Count > 0)
                        IsServiceOfOrder = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    result = model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID > 0 && lstCusID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID) && c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && ((c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL && lstGroupDebitPL.Contains(c.FIN_PLDetails.CostID)) || (c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && lstGroupDebitDriver.Contains(c.FIN_PLDetails.CostID))) &&
                        c.FIN_PLDetails.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PLDetails.FIN_PL.Effdate < filter.DateTo && c.FIN_PLDetails.FIN_PL.VehicleID > 0 && c.FIN_PLDetails.FIN_PL.VendorID == Account.SYSCustomerID).Select(c => new DTOREPOwner_Vehicle
                        {
                            DITOMasterID = c.FIN_PLDetails.FIN_PL.DITOMasterID,
                            TOMasterCode = c.FIN_PLDetails.FIN_PL.DITOMasterID.HasValue ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                            DITOGroupProductID = c.ID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.OPS_DITOGroupProduct.DNCode,
                            SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                            DateConfig = c.FIN_PLDetails.FIN_PL.Effdate,
                            RequestDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID,
                            StockCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfLocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            FINSort = c.OPS_DITOGroupProduct.ORD_GroupProduct.FINSort,

                            GroupOfVehicleCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            VehicleID = c.FIN_PLDetails.FIN_PL.VehicleID,
                            VehicleCode = c.FIN_PLDetails.FIN_PL.VehicleID > 0 ? c.FIN_PLDetails.FIN_PL.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            KM = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.KM : null,
                            ETD = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : dtNull,
                            ETA = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA : dtNull,

                            TonTranfer = c.OPS_DITOGroupProduct.TonTranfer,
                            CBMTranfer = c.OPS_DITOGroupProduct.CBMTranfer,
                            QuantityTranfer = c.OPS_DITOGroupProduct.QuantityTranfer,
                            TonBBGN = c.OPS_DITOGroupProduct.TonBBGN,
                            CBMBBGN = c.OPS_DITOGroupProduct.CBMBBGN,
                            QuantityBBGN = c.OPS_DITOGroupProduct.QuantityBBGN,
                            TonReturn = c.OPS_DITOGroupProduct.TonReturn,
                            CBMReturn = c.OPS_DITOGroupProduct.CBMReturn,
                            QuantityReturn = c.OPS_DITOGroupProduct.QuantityReturn,

                            KgTranfer = c.OPS_DITOGroupProduct.TonTranfer * 1000,
                            KgBBGN = c.OPS_DITOGroupProduct.TonBBGN * 1000,
                            KgReturn = c.OPS_DITOGroupProduct.TonReturn * 1000,

                            OrderDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderGroupProductDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig,
                            OrderContract = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.OPS_DITOGroupProduct.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.OPS_DITOGroupProduct.DateConfig,
                            OPSContract = c.OPS_DITOGroupProduct.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.OPS_DITOGroupProduct.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                            OPSGroupProductRouting = c.OPS_DITOGroupProduct.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedDate,

                            CostName = c.FIN_PLDetails.CAT_Cost.CostName,
                            Cost = c.FIN_PLDetails.Debit,
                            CostQuantity = c.Quantity == 0 ? (c.FIN_PLDetails.Quantity > 0 ? c.FIN_PLDetails.Quantity.Value : 0) : c.Quantity,
                            CostUnitPrice = c.UnitPrice == 0 ? (c.FIN_PLDetails.UnitPrice > 0 ? c.FIN_PLDetails.UnitPrice.Value : 0) : c.UnitPrice,
                            Note = c.FIN_PLDetails.Note,
                            Note1 = c.FIN_PLDetails.Note1,
                            Note2 = c.FIN_PLDetails.Note2,
                            TotalCost = c.FIN_PLDetails.Debit,
                        }).ToList();

                    result.AddRange(model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID > 0 && lstCusID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID) && c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL &&
                       c.FIN_PLDetails.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PLDetails.FIN_PL.Effdate < filter.DateTo && c.FIN_PLDetails.FIN_PL.VehicleID > 0 && lstGroupCreditPL.Contains(c.FIN_PLDetails.CostID) && c.FIN_PLDetails.FIN_PL.VendorID == Account.SYSCustomerID).Select(c => new DTOREPOwner_Vehicle
                       {
                           DITOMasterID = c.FIN_PLDetails.FIN_PL.DITOMasterID,
                           TOMasterCode = c.FIN_PLDetails.FIN_PL.DITOMasterID.HasValue ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                           DITOGroupProductID = c.ID,
                           OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                           OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                           DNCode = c.OPS_DITOGroupProduct.DNCode,
                           SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                           DateConfig = c.FIN_PLDetails.FIN_PL.Effdate,
                           RequestDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                           StockID = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID,
                           StockCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code : "",
                           StockName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName : "",
                           StockAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                           PartnerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID,
                           PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                           PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                           Address = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                           GroupOfLocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                           GroupOfLocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                           CUSRoutingID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID,
                           CUSRoutingCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                           CUSRoutingName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                           GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                           GroupOfProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                           GroupOfProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                           FINSort = c.OPS_DITOGroupProduct.ORD_GroupProduct.FINSort,

                           GroupOfVehicleCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                           GroupOfVehicleName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                           VehicleID = c.FIN_PLDetails.FIN_PL.VehicleID,
                           VehicleCode = c.FIN_PLDetails.FIN_PL.VehicleID > 0 ? c.FIN_PLDetails.FIN_PL.CAT_Vehicle.RegNo : "",
                           VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                           VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.Code : "",
                           VendorName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                           VendorShortName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName : "",

                           CustomerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID,
                           CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                           CustomerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                           CustomerShortName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                           KM = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.KM : null,
                           ETD = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : dtNull,
                           ETA = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA : dtNull,

                           TonTranfer = c.OPS_DITOGroupProduct.TonTranfer,
                           CBMTranfer = c.OPS_DITOGroupProduct.CBMTranfer,
                           QuantityTranfer = c.OPS_DITOGroupProduct.QuantityTranfer,
                           TonBBGN = c.OPS_DITOGroupProduct.TonBBGN,
                           CBMBBGN = c.OPS_DITOGroupProduct.CBMBBGN,
                           QuantityBBGN = c.OPS_DITOGroupProduct.QuantityBBGN,
                           TonReturn = c.OPS_DITOGroupProduct.TonReturn,
                           CBMReturn = c.OPS_DITOGroupProduct.CBMReturn,
                           QuantityReturn = c.OPS_DITOGroupProduct.QuantityReturn,

                           KgTranfer = c.OPS_DITOGroupProduct.TonTranfer * 1000,
                           KgBBGN = c.OPS_DITOGroupProduct.TonBBGN * 1000,
                           KgReturn = c.OPS_DITOGroupProduct.TonReturn * 1000,

                           OrderDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                           OrderGroupProductDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig,
                           OrderContract = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                           OrderRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                           OrderGroupProductRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                           OPSDateConfig = c.OPS_DITOGroupProduct.OPS_DITOMaster.DateConfig,
                           OPSGroupProductDateConfig = c.OPS_DITOGroupProduct.DateConfig,
                           OPSContract = c.OPS_DITOGroupProduct.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                           OPSRouting = c.OPS_DITOGroupProduct.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                           OPSGroupProductRouting = c.OPS_DITOGroupProduct.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.CAT_Routing.RoutingName : "",

                           OrderCreatedBy = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedBy,
                           OrderCreatedDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedDate,

                           IncomeName = c.FIN_PLDetails.CAT_Cost.CostName,
                           Income = c.FIN_PLDetails.Credit,
                           IncomeQuantity = c.Quantity == 0 ? (c.FIN_PLDetails.Quantity > 0 ? c.FIN_PLDetails.Quantity.Value : 0) : c.Quantity,
                           IncomeUnitPrice = c.UnitPrice == 0 ? (c.FIN_PLDetails.UnitPrice > 0 ? c.FIN_PLDetails.UnitPrice.Value : 0) : c.UnitPrice,
                           Note = c.FIN_PLDetails.Note,
                           Note1 = c.FIN_PLDetails.Note1,
                           Note2 = c.FIN_PLDetails.Note2,
                           TotalIncome = c.FIN_PLDetails.Credit,
                       }).ToList());

                    result.AddRange(model.FIN_PLDetails.Where(c => ((c.FIN_PL.CustomerID > 0 && lstCusID.Contains(c.FIN_PL.CustomerID.Value)) || c.FIN_PL.CustomerID == null) && c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && ((c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL && lstNoGroupDebitPL.Contains(c.CostID)) || (c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && lstNoGroupDebitDriver.Contains(c.CostID))) && c.FIN_PL.VehicleID > 0 && c.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PL.Effdate < filter.DateTo && c.FIN_PL.VendorID == Account.SYSCustomerID).Select(c => new DTOREPOwner_Vehicle
                    {
                        DITOMasterID = c.FIN_PL.DITOMasterID,
                        TOMasterCode = c.FIN_PL.DITOMasterID.HasValue ? c.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                        DateConfig = c.FIN_PL.Effdate,
                        CostName = c.CAT_Cost.CostName,
                        Cost = c.Debit,
                        CostQuantity = c.Quantity.HasValue ? c.Quantity.Value : 0,
                        CostUnitPrice = c.UnitPrice.HasValue ? c.UnitPrice.Value : 0,
                        Note = c.Note,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        TotalCost = c.Debit,
                        VehicleID = c.FIN_PL.VehicleID,
                        VehicleCode = c.FIN_PL.VehicleID > 0 ? c.FIN_PL.CAT_Vehicle.RegNo : "",
                    }).ToList());

                    result.AddRange(model.FIN_PLDetails.Where(c => ((c.FIN_PL.CustomerID > 0 && lstCusID.Contains(c.FIN_PL.CustomerID.Value)) || c.FIN_PL.CustomerID == null) && c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL && c.FIN_PL.VehicleID > 0 && c.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PL.Effdate < filter.DateTo && lstNoGroupCreditPL.Contains(c.CostID) && c.FIN_PL.VendorID == Account.SYSCustomerID).Select(c => new DTOREPOwner_Vehicle
                    {
                        DITOMasterID = c.FIN_PL.DITOMasterID,
                        TOMasterCode = c.FIN_PL.DITOMasterID.HasValue ? c.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                        DateConfig = c.FIN_PL.Effdate,
                        IncomeName = c.CAT_Cost.CostName,
                        Income = c.Credit,
                        IncomeQuantity = c.Quantity.HasValue ? c.Quantity.Value : 0,
                        IncomeUnitPrice = c.UnitPrice.HasValue ? c.UnitPrice.Value : 0,
                        Note = c.Note,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        TotalIncome = c.Credit,
                        VehicleID = c.FIN_PL.VehicleID,
                        VehicleCode = c.FIN_PL.VehicleID > 0 ? c.FIN_PL.CAT_Vehicle.RegNo : "",
                    }).ToList());

                    if (string.IsNullOrEmpty(filter.Request))
                        result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.DITOMasterID).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPOwner_Vehicle>().OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.DITOMasterID).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPOwner_VehicleFee_PL_ColumnDetail REPOwner_VehicleFee_ColumnDetailData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstDepreciation = new List<int>(); // khấu hao xe
                lstDepreciation.Add((int)CATCostType.FLMDepreciation);
                lstDepreciation.Add((int)CATCostType.FLMDepreciationNoGroup);

                List<int> lstDepreciationReceipt = new List<int>(); // khấu hao phiếu
                lstDepreciationReceipt.Add((int)CATCostType.FLMDepreciationReceipt);
                lstDepreciationReceipt.Add((int)CATCostType.FLMDepreciationReceiptNoGroup);

                List<int> lstReceipt = new List<int>(); // phiếu
                lstReceipt.Add((int)CATCostType.FLMReceiptRegistry);
                lstReceipt.Add((int)CATCostType.FLMReceiptMaintence);
                lstReceipt.Add((int)CATCostType.FLMReceiptRepairLarge);
                lstReceipt.Add((int)CATCostType.FLMReceiptRepairSmall);
                lstReceipt.Add((int)CATCostType.FLMReceiptMaterial);

                List<int> lstStation = new List<int>(); // chi phí trạm
                lstStation.Add((int)CATCostType.StationDebit);

                List<int> lstTroubleDebit = new List<int>(); // chi phí phát sinh
                lstTroubleDebit.Add((int)CATCostType.TroubleDebit);

                List<int> lstTroubleCredit = new List<int>(); // thu phát sinh
                lstTroubleCredit.Add((int)CATCostType.TroubleCredit);

                List<int> lstScheduleFee = new List<int>(); // chi phí cố định
                lstScheduleFee.Add((int)CATCostType.FLMScheduleFeeNoGroup);
                lstScheduleFee.Add((int)CATCostType.FLMScheduleFee);

                List<int> lstDriver = new List<int>(); // chi phí tài xế
                lstDriver.Add((int)CATCostType.FLMDriverFeeNoGroup);
                lstDriver.Add((int)CATCostType.FLMDriverFee);

                List<int> lstTransfer = new List<int>(); // Thu
                lstTransfer.Add((int)CATCostType.DITOFreightNoGroupCredit);
                lstTransfer.Add((int)CATCostType.DITOMOQNoGroupCredit);
                lstTransfer.Add((int)CATCostType.DITOMOQLoadNoGroupDebit);
                lstTransfer.Add((int)CATCostType.DITOMOQUnLoadNoGroupCredit);
                lstTransfer.Add((int)CATCostType.DITOExNoGroupCredit);
                lstTransfer.Add((int)CATCostType.DITOFreightCredit);
                lstTransfer.Add((int)CATCostType.DITOUnLoadCredit);
                lstTransfer.Add((int)CATCostType.DITOLoadCredit);
                lstTransfer.Add((int)CATCostType.DITOReturnCredit);
                lstTransfer.Add((int)CATCostType.DITOUnLoadReturnCredit);
                lstTransfer.Add((int)CATCostType.DITOLoadReturnCredit);
                lstTransfer.Add((int)CATCostType.DITOExCredit);
                lstTransfer.Add((int)CATCostType.ManualFixCredit);
                #endregion

                var result = new DTOREPOwner_VehicleFee_PL_ColumnDetail();
                result.ListData = new List<DTOREPOwner_VehicleFee_PL_ColumnDetail_Data>();
                result.ListPrice = new List<DTOREPOwner_VehicleFee_PL_ColumnDetail_Price>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    bool IsGroupLocation = false;
                    bool IsGroupPartner = false;
                    bool IsProvince = false;
                    bool IsServiceOfOrder = false;

                    if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                        filter.ListGroupProductID = new List<int>();
                    if (filter.ListGroupProductID.Count > 0)
                        IsGroup = true;

                    if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                        filter.ListStockID = new List<int>();
                    if (filter.ListStockID.Count > 0)
                        IsStock = true;

                    if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                        filter.ListGroupOfPartnerID = new List<int>();
                    if (filter.ListGroupOfPartnerID.Count > 0)
                        IsGroupPartner = true;

                    if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                        filter.ListGroupOfLocationID = new List<int>();
                    if (filter.ListGroupOfLocationID.Count > 0)
                        IsGroupLocation = true;

                    if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                        filter.ListProvinceID = new List<int>();
                    if (filter.ListProvinceID.Count > 0)
                        IsProvince = true;

                    if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                        filter.ListServiceOfOrderID = new List<int>();
                    if (filter.ListServiceOfOrderID.Count > 0)
                        IsServiceOfOrder = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    var lstVehicle = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && (c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor || c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck) && c.IsDisposal == false).Select(c => new DTOREPOwner_VehicleFee_PL_ColumnDetail_Data
                    {
                        VehicleID = c.VehicleID.Value,
                        VehicleCode = c.CAT_Vehicle.RegNo,
                    }).ToList();

                    var lstFIN = model.FIN_PLDetails.Where(c => ((c.FIN_PL.CustomerID > 0 && lstCusID.Contains(c.FIN_PL.CustomerID.Value)) || c.FIN_PL.CustomerID == null) && c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && (c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL || c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver) && c.FIN_PL.VehicleID > 0 && c.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PL.Effdate < filter.DateTo).Select(c => new
                    {
                        VehicleID = c.FIN_PL.VehicleID.Value,
                        DateConfig = c.FIN_PL.Effdate,
                        Credit = c.Credit,
                        Debit = c.Debit,
                        CostID = c.CostID,
                        c.FIN_PL.FINPLTypeID,
                    }).ToList();

                    foreach (var itemVehicle in lstVehicle)
                    {
                        var DateConfig = filter.DateFrom;
                        while (DateConfig < filter.DateTo)
                        {
                            DTOREPOwner_VehicleFee_PL_ColumnDetail_Data item = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Data();
                            item.VehicleID = itemVehicle.VehicleID;
                            item.VehicleCode = itemVehicle.VehicleCode;
                            item.DateConfig = DateConfig;

                            DTOREPOwner_VehicleFee_PL_ColumnDetail_Price itemIncome = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Price();
                            itemIncome.VehicleID = itemVehicle.VehicleID;
                            itemIncome.DateConfig = DateConfig;
                            itemIncome.KeyCode = "Income";

                            DTOREPOwner_VehicleFee_PL_ColumnDetail_Price itemCost = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Price();
                            itemCost.VehicleID = itemVehicle.VehicleID;
                            itemCost.DateConfig = DateConfig;
                            itemCost.KeyCode = "Cost";

                            var queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstDepreciation.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.Depreciation = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstDepreciationReceipt.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.DepreciationReceipt = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstReceipt.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.Receipt = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstStation.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.Station = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstTroubleDebit.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.Trouble = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstScheduleFee.Contains(c.CostID) && c.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver);
                            if (queryFIN.Count() > 0)
                                itemCost.ScheduleFee = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstDriver.Contains(c.CostID) && c.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver);
                            if (queryFIN.Count() > 0)
                                itemCost.Driver = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstTransfer.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemIncome.Transfer = queryFIN.Sum(c => c.Credit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstTroubleCredit.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemIncome.Trouble = queryFIN.Sum(c => c.Credit);

                            if (itemCost.Depreciation > 0 || itemCost.Driver > 0 || itemCost.ScheduleFee > 0 || itemCost.Station > 0 || itemCost.Receipt > 0 || itemCost.Transfer > 0 || itemCost.Trouble > 0
                                || itemIncome.Depreciation > 0 || itemIncome.Driver > 0 || itemIncome.ScheduleFee > 0 || itemIncome.Station > 0 || itemIncome.Receipt > 0 || itemIncome.Transfer > 0 || itemIncome.Trouble > 0)
                            {
                                result.ListData.Add(item);
                                result.ListPrice.Add(itemCost);
                                result.ListPrice.Add(itemIncome);
                            }

                            DateConfig = DateConfig.AddDays(1);
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPOwner_VehicleFee_PL_ColumnDetail_Data>().OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOREPOwner_Vehicle> REPOwner_VehiclePriceData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupDebitDriver = new List<int>();
                lstNoGroupDebitDriver.Add((int)CATCostType.StationDebit);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMScheduleFeeNoGroup);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptRegistry);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptMaintence);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptRepairLarge);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptRepairSmall);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMReceiptMaterial);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMDepreciationNoGroup);
                lstNoGroupDebitDriver.Add((int)CATCostType.FLMDepreciationReceiptNoGroup);
                lstNoGroupDebitDriver.Add((int)CATCostType.TroubleDebit);
                List<int> lstNoGroupCreditPL = new List<int>();
                lstNoGroupCreditPL.Add((int)CATCostType.FLMDIFreightNoGroupCredit);
                lstNoGroupCreditPL.Add((int)CATCostType.FLMDIMOQNoGroupCredit);
                lstNoGroupCreditPL.Add((int)CATCostType.FLMDIMOQLoadNoGroupCredit);
                lstNoGroupCreditPL.Add((int)CATCostType.FLMDIMOQUnLoadNoGroupCredit);
                lstNoGroupCreditPL.Add((int)CATCostType.FLMDIExNoGroupCredit);
                List<int> lstGroupDebitDriver = new List<int>();
                lstGroupDebitDriver.Add((int)CATCostType.FLMScheduleFee);
                lstGroupDebitDriver.Add((int)CATCostType.FLMDepreciation);
                lstGroupDebitDriver.Add((int)CATCostType.FLMDepreciationReceipt);
                List<int> lstGroupCreditPL = new List<int>();
                lstGroupCreditPL.Add((int)CATCostType.FLMManualFixCredit);
                lstGroupCreditPL.Add((int)CATCostType.FLMDIFreightCredit);
                lstGroupCreditPL.Add((int)CATCostType.FLMDIUnLoadCredit);
                lstGroupCreditPL.Add((int)CATCostType.FLMDILoadCredit);
                lstGroupCreditPL.Add((int)CATCostType.FLMDIReturnCredit);
                lstGroupCreditPL.Add((int)CATCostType.FLMDIUnLoadReturnCredit);
                lstGroupCreditPL.Add((int)CATCostType.FLMDILoadReturnCredit);
                lstGroupCreditPL.Add((int)CATCostType.FLMDIExCredit);
                lstGroupCreditPL.Add((int)CATCostType.FLMTroubleCredit);
                #endregion

                DateTime? dtNull = null;
                var result = new List<DTOREPOwner_Vehicle>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    bool IsGroupLocation = false;
                    bool IsGroupPartner = false;
                    bool IsProvince = false;
                    bool IsServiceOfOrder = false;

                    if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                        filter.ListGroupProductID = new List<int>();
                    if (filter.ListGroupProductID.Count > 0)
                        IsGroup = true;

                    if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                        filter.ListStockID = new List<int>();
                    if (filter.ListStockID.Count > 0)
                        IsStock = true;

                    if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                        filter.ListGroupOfPartnerID = new List<int>();
                    if (filter.ListGroupOfPartnerID.Count > 0)
                        IsGroupPartner = true;

                    if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                        filter.ListGroupOfLocationID = new List<int>();
                    if (filter.ListGroupOfLocationID.Count > 0)
                        IsGroupLocation = true;

                    if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                        filter.ListProvinceID = new List<int>();
                    if (filter.ListProvinceID.Count > 0)
                        IsProvince = true;

                    if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                        filter.ListServiceOfOrderID = new List<int>();
                    if (filter.ListServiceOfOrderID.Count > 0)
                        IsServiceOfOrder = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    result = model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID > 0 && lstCusID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID) && c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && ((c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL && lstGroupCreditPL.Contains(c.FIN_PLDetails.CostID)) || (c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && lstGroupDebitDriver.Contains(c.FIN_PLDetails.CostID))) &&
                        c.FIN_PLDetails.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PLDetails.FIN_PL.Effdate < filter.DateTo && c.FIN_PLDetails.FIN_PL.VehicleID > 0 && c.FIN_PLDetails.FIN_PL.VendorID == Account.SYSCustomerID).Select(c => new DTOREPOwner_Vehicle
                        {
                            DITOMasterID = c.FIN_PLDetails.FIN_PL.DITOMasterID,
                            TOMasterCode = c.FIN_PLDetails.FIN_PL.DITOMasterID.HasValue ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                            DITOGroupProductID = c.ID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.OPS_DITOGroupProduct.DNCode,
                            SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                            DateConfig = c.FIN_PLDetails.FIN_PL.Effdate,
                            RequestDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID,
                            StockCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfLocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            FINSort = c.OPS_DITOGroupProduct.ORD_GroupProduct.FINSort,

                            GroupOfVehicleCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            VehicleID = c.FIN_PLDetails.FIN_PL.VehicleID,
                            VehicleCode = c.FIN_PLDetails.FIN_PL.VehicleID > 0 ? c.FIN_PLDetails.FIN_PL.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            KM = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.KM : null,
                            ETD = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : dtNull,
                            ETA = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA : dtNull,

                            TonTranfer = c.OPS_DITOGroupProduct.TonTranfer,
                            CBMTranfer = c.OPS_DITOGroupProduct.CBMTranfer,
                            QuantityTranfer = c.OPS_DITOGroupProduct.QuantityTranfer,
                            TonBBGN = c.OPS_DITOGroupProduct.TonBBGN,
                            CBMBBGN = c.OPS_DITOGroupProduct.CBMBBGN,
                            QuantityBBGN = c.OPS_DITOGroupProduct.QuantityBBGN,
                            TonReturn = c.OPS_DITOGroupProduct.TonReturn,
                            CBMReturn = c.OPS_DITOGroupProduct.CBMReturn,
                            QuantityReturn = c.OPS_DITOGroupProduct.QuantityReturn,

                            KgTranfer = c.OPS_DITOGroupProduct.TonTranfer * 1000,
                            KgBBGN = c.OPS_DITOGroupProduct.TonBBGN * 1000,
                            KgReturn = c.OPS_DITOGroupProduct.TonReturn * 1000,

                            OrderDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderGroupProductDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig,
                            OrderContract = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.OPS_DITOGroupProduct.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.OPS_DITOGroupProduct.DateConfig,
                            OPSContract = c.OPS_DITOGroupProduct.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.OPS_DITOGroupProduct.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                            OPSGroupProductRouting = c.OPS_DITOGroupProduct.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedDate,

                            CostName = c.FIN_PLDetails.CAT_Cost.CostName,
                            Cost = c.FIN_PLDetails.Debit,
                            CostQuantity = c.Quantity == 0 ? (c.FIN_PLDetails.Quantity > 0 ? c.FIN_PLDetails.Quantity.Value : 0) : c.Quantity,
                            CostUnitPrice = c.UnitPrice == 0 ? (c.FIN_PLDetails.UnitPrice > 0 ? c.FIN_PLDetails.UnitPrice.Value : 0) : c.UnitPrice,
                            Note = c.FIN_PLDetails.Note,
                            Note1 = c.FIN_PLDetails.Note1,
                            Note2 = c.FIN_PLDetails.Note2,
                            TotalCost = c.FIN_PLDetails.Debit,
                        }).ToList();

                    result.AddRange(model.FIN_PLDetails.Where(c => ((c.FIN_PL.CustomerID > 0 && lstCusID.Contains(c.FIN_PL.CustomerID.Value)) || c.FIN_PL.CustomerID == null) && c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && ((c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL && lstNoGroupCreditPL.Contains(c.CostID)) || (c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && lstNoGroupDebitDriver.Contains(c.CostID))) && c.FIN_PL.VehicleID > 0 && c.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PL.Effdate < filter.DateTo && c.FIN_PL.VendorID == Account.SYSCustomerID).Select(c => new DTOREPOwner_Vehicle
                    {
                        DITOMasterID = c.FIN_PL.DITOMasterID,
                        TOMasterCode = c.FIN_PL.DITOMasterID.HasValue ? c.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                        DateConfig = c.FIN_PL.Effdate,
                        CostName = c.CAT_Cost.CostName,
                        Cost = c.Debit,
                        CostQuantity = c.Quantity.HasValue ? c.Quantity.Value : 0,
                        CostUnitPrice = c.UnitPrice.HasValue ? c.UnitPrice.Value : 0,
                        Note = c.Note,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        TotalCost = c.Debit,
                        VehicleID = c.FIN_PL.VehicleID,
                        VehicleCode = c.FIN_PL.VehicleID > 0 ? c.FIN_PL.CAT_Vehicle.RegNo : "",
                    }).ToList());

                    if (string.IsNullOrEmpty(filter.Request))
                        result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.DITOMasterID).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPOwner_Vehicle>().OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.DITOMasterID).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOREPOwner_VehicleFee_PL_ColumnDetail REPOwner_VehiclePrice_ColumnDetailData(CUSSettingsReport_Filter filter)
        {
            try
            {
                #region Temp Cost
                List<int> lstDepreciation = new List<int>(); // khấu hao xe
                lstDepreciation.Add((int)CATCostType.FLMDepreciation);
                lstDepreciation.Add((int)CATCostType.FLMDepreciationNoGroup);

                List<int> lstDepreciationReceipt = new List<int>(); // khấu hao phiếu
                lstDepreciationReceipt.Add((int)CATCostType.FLMDepreciationReceipt);
                lstDepreciationReceipt.Add((int)CATCostType.FLMDepreciationReceiptNoGroup);

                List<int> lstReceipt = new List<int>(); // phiếu
                lstReceipt.Add((int)CATCostType.FLMReceiptRegistry);
                lstReceipt.Add((int)CATCostType.FLMReceiptMaintence);
                lstReceipt.Add((int)CATCostType.FLMReceiptRepairLarge);
                lstReceipt.Add((int)CATCostType.FLMReceiptRepairSmall);
                lstReceipt.Add((int)CATCostType.FLMReceiptMaterial);

                List<int> lstStation = new List<int>(); // chi phí trạm
                lstStation.Add((int)CATCostType.StationDebit);

                List<int> lstTroubleDebit = new List<int>(); // chi phí phát sinh
                lstTroubleDebit.Add((int)CATCostType.TroubleDebit);

                List<int> lstTroubleCredit = new List<int>(); // thu phát sinh
                lstTroubleCredit.Add((int)CATCostType.FLMTroubleCredit);

                List<int> lstScheduleFee = new List<int>(); // chi phí cố định
                lstScheduleFee.Add((int)CATCostType.FLMScheduleFeeNoGroup);
                lstScheduleFee.Add((int)CATCostType.FLMScheduleFee);

                List<int> lstDriver = new List<int>(); // chi phí tài xế
                lstDriver.Add((int)CATCostType.FLMDriverFeeNoGroup);
                lstDriver.Add((int)CATCostType.FLMDriverFee);

                List<int> lstTransfer = new List<int>(); // Thu
                lstTransfer.Add((int)CATCostType.FLMDIFreightNoGroupCredit);
                lstTransfer.Add((int)CATCostType.FLMDIMOQNoGroupCredit);
                lstTransfer.Add((int)CATCostType.FLMDIMOQLoadNoGroupCredit);
                lstTransfer.Add((int)CATCostType.FLMDIMOQUnLoadNoGroupCredit);
                lstTransfer.Add((int)CATCostType.FLMDIExNoGroupCredit);
                lstTransfer.Add((int)CATCostType.FLMDIFreightCredit);
                lstTransfer.Add((int)CATCostType.FLMDIUnLoadCredit);
                lstTransfer.Add((int)CATCostType.FLMDILoadCredit);
                lstTransfer.Add((int)CATCostType.FLMDIReturnCredit);
                lstTransfer.Add((int)CATCostType.FLMDIUnLoadReturnCredit);
                lstTransfer.Add((int)CATCostType.FLMDILoadReturnCredit);
                lstTransfer.Add((int)CATCostType.FLMDIExCredit);
                lstTransfer.Add((int)CATCostType.FLMManualFixCredit);
                #endregion

                var result = new DTOREPOwner_VehicleFee_PL_ColumnDetail();
                result.ListData = new List<DTOREPOwner_VehicleFee_PL_ColumnDetail_Data>();
                result.ListPrice = new List<DTOREPOwner_VehicleFee_PL_ColumnDetail_Price>();
                using (var model = new DataEntities())
                {
                    #region Điều kiện lọc
                    bool IsGroup = false;
                    bool IsStock = false;
                    bool IsGroupLocation = false;
                    bool IsGroupPartner = false;
                    bool IsProvince = false;
                    bool IsServiceOfOrder = false;

                    if (filter.ListGroupProductID == null || filter.ListGroupProductID.Count == 0)
                        filter.ListGroupProductID = new List<int>();
                    if (filter.ListGroupProductID.Count > 0)
                        IsGroup = true;

                    if (filter.ListStockID == null || filter.ListStockID.Count == 0)
                        filter.ListStockID = new List<int>();
                    if (filter.ListStockID.Count > 0)
                        IsStock = true;

                    if (filter.ListGroupOfPartnerID == null || filter.ListGroupOfPartnerID.Count == 0)
                        filter.ListGroupOfPartnerID = new List<int>();
                    if (filter.ListGroupOfPartnerID.Count > 0)
                        IsGroupPartner = true;

                    if (filter.ListGroupOfLocationID == null || filter.ListGroupOfLocationID.Count == 0)
                        filter.ListGroupOfLocationID = new List<int>();
                    if (filter.ListGroupOfLocationID.Count > 0)
                        IsGroupLocation = true;

                    if (filter.ListProvinceID == null || filter.ListProvinceID.Count == 0)
                        filter.ListProvinceID = new List<int>();
                    if (filter.ListProvinceID.Count > 0)
                        IsProvince = true;

                    if (filter.ListServiceOfOrderID == null || filter.ListServiceOfOrderID.Count == 0)
                        filter.ListServiceOfOrderID = new List<int>();
                    if (filter.ListServiceOfOrderID.Count > 0)
                        IsServiceOfOrder = true;

                    bool IsVen = false;
                    var lstCusID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    var lstVenID = model.CUS_Customer.Where(c => filter.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).Distinct().ToList();
                    if (lstVenID.Count > 0)
                        IsVen = true;
                    #endregion

                    var lstVehicle = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && (c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor || c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck) && c.IsDisposal == false).Select(c => new DTOREPOwner_VehicleFee_PL_ColumnDetail_Data
                    {
                        VehicleID = c.VehicleID.Value,
                        VehicleCode = c.CAT_Vehicle.RegNo,
                    }).ToList();

                    var lstFIN = model.FIN_PLDetails.Where(c => ((c.FIN_PL.CustomerID > 0 && lstCusID.Contains(c.FIN_PL.CustomerID.Value)) || c.FIN_PL.CustomerID == null) && c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && (c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL || c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver) && c.FIN_PL.VehicleID > 0 && c.FIN_PL.Effdate >= filter.DateFrom && c.FIN_PL.Effdate < filter.DateTo).Select(c => new
                    {
                        VehicleID = c.FIN_PL.VehicleID.Value,
                        DateConfig = c.FIN_PL.Effdate,
                        Credit = c.Credit,
                        Debit = c.Debit,
                        CostID = c.CostID,
                        c.FIN_PL.FINPLTypeID,
                    }).ToList();

                    foreach (var itemVehicle in lstVehicle)
                    {
                        var DateConfig = filter.DateFrom;
                        while (DateConfig < filter.DateTo)
                        {
                            DTOREPOwner_VehicleFee_PL_ColumnDetail_Data item = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Data();
                            item.VehicleID = itemVehicle.VehicleID;
                            item.VehicleCode = itemVehicle.VehicleCode;
                            item.DateConfig = DateConfig;

                            DTOREPOwner_VehicleFee_PL_ColumnDetail_Price itemIncome = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Price();
                            itemIncome.VehicleID = itemVehicle.VehicleID;
                            itemIncome.DateConfig = DateConfig;
                            itemIncome.KeyCode = "Income";

                            DTOREPOwner_VehicleFee_PL_ColumnDetail_Price itemCost = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Price();
                            itemCost.VehicleID = itemVehicle.VehicleID;
                            itemCost.DateConfig = DateConfig;
                            itemCost.KeyCode = "Cost";

                            var queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstDepreciation.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.Depreciation = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstDepreciationReceipt.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.DepreciationReceipt = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstReceipt.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.Receipt = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstStation.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.Station = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstTroubleDebit.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemCost.Trouble = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstScheduleFee.Contains(c.CostID) && c.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver);
                            if (queryFIN.Count() > 0)
                                itemCost.ScheduleFee = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstDriver.Contains(c.CostID) && c.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver);
                            if (queryFIN.Count() > 0)
                                itemCost.Driver = queryFIN.Sum(c => c.Debit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstTransfer.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemIncome.Transfer = queryFIN.Sum(c => c.Credit);

                            queryFIN = lstFIN.Where(c => c.VehicleID == itemVehicle.VehicleID && c.DateConfig == DateConfig && lstTroubleCredit.Contains(c.CostID));
                            if (queryFIN.Count() > 0)
                                itemIncome.Trouble = queryFIN.Sum(c => c.Credit);

                            if (itemCost.Depreciation > 0 || itemCost.Driver > 0 || itemCost.ScheduleFee > 0 || itemCost.Station > 0 || itemCost.Receipt > 0 || itemCost.Transfer > 0 || itemCost.Trouble > 0
                                || itemIncome.Depreciation > 0 || itemIncome.Driver > 0 || itemIncome.ScheduleFee > 0 || itemIncome.Station > 0 || itemIncome.Receipt > 0 || itemIncome.Transfer > 0 || itemIncome.Trouble > 0)
                            {
                                result.ListData.Add(item);
                                result.ListPrice.Add(itemCost);
                                result.ListPrice.Add(itemIncome);
                            }

                            DateConfig = DateConfig.AddDays(1);
                        }
                    }

                    if (string.IsNullOrEmpty(filter.Request))
                        result.ListData = result.ListData.OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ToList();
                    else
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(filter.Request)).Data.Cast<DTOREPOwner_VehicleFee_PL_ColumnDetail_Data>().OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        
        #region Chi phí xe
        // Chi phí xe tải
        public List<DTOREPOwner_Vehicle> REPOwner_VehicleFee_Cost(DateTime dtfrom, DateTime dtto, string request)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.FLMScheduleFeeNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.FLMDriverFeeNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptRegistry);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptMaintence);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptRepairLarge);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptRepairSmall);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptMaterial);
                lstNoGroupDebit.Add((int)CATCostType.FLMDepreciationNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.FLMDepreciationReceiptNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.StationDebit);
                lstNoGroupDebit.Add((int)CATCostType.TroubleDebit);
                List<int> lstGroupDebit = new List<int>();
                lstGroupDebit.Add((int)CATCostType.FLMScheduleFee);
                lstGroupDebit.Add((int)CATCostType.FLMDriverFee);
                lstGroupDebit.Add((int)CATCostType.FLMDepreciation);
                lstGroupDebit.Add((int)CATCostType.FLMDepreciationReceipt);
                #endregion

                DateTime? dtNull = null;
                var result = new List<DTOREPOwner_Vehicle>();
                using (var model = new DataEntities())
                {
                    dtfrom = dtfrom.Date;
                    dtto = dtto.Date.AddDays(1);

                    result = model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID > 0 && c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver &&
                        c.FIN_PLDetails.FIN_PL.Effdate >= dtfrom && c.FIN_PLDetails.FIN_PL.Effdate < dtto && c.FIN_PLDetails.FIN_PL.VehicleID > 0 && lstGroupDebit.Contains(c.FIN_PLDetails.CostID)).Select(c => new DTOREPOwner_Vehicle
                        {
                            DITOMasterID = c.FIN_PLDetails.FIN_PL.DITOMasterID,
                            TOMasterCode = c.FIN_PLDetails.FIN_PL.DITOMasterID.HasValue ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                            DITOGroupProductID = c.ID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.OPS_DITOGroupProduct.DNCode,
                            SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                            DateConfig = c.FIN_PLDetails.FIN_PL.Effdate,
                            RequestDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID,
                            StockCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            Address = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            GroupOfLocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            FINSort = c.OPS_DITOGroupProduct.ORD_GroupProduct.FINSort,

                            GroupOfVehicleCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,

                            VehicleID = c.FIN_PLDetails.FIN_PL.VehicleID,
                            VehicleCode = c.FIN_PLDetails.FIN_PL.VehicleID > 0 ? c.FIN_PLDetails.FIN_PL.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value : Account.SYSCustomerID,
                            VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            CustomerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            KM = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.KM : null,
                            ETD = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : dtNull,
                            ETA = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA : dtNull,

                            TonTranfer = c.OPS_DITOGroupProduct.TonTranfer,
                            CBMTranfer = c.OPS_DITOGroupProduct.CBMTranfer,
                            QuantityTranfer = c.OPS_DITOGroupProduct.QuantityTranfer,
                            TonBBGN = c.OPS_DITOGroupProduct.TonBBGN,
                            CBMBBGN = c.OPS_DITOGroupProduct.CBMBBGN,
                            QuantityBBGN = c.OPS_DITOGroupProduct.QuantityBBGN,
                            TonReturn = c.OPS_DITOGroupProduct.TonReturn,
                            CBMReturn = c.OPS_DITOGroupProduct.CBMReturn,
                            QuantityReturn = c.OPS_DITOGroupProduct.QuantityReturn,

                            KgTranfer = c.OPS_DITOGroupProduct.TonTranfer * 1000,
                            KgBBGN = c.OPS_DITOGroupProduct.TonBBGN * 1000,
                            KgReturn = c.OPS_DITOGroupProduct.TonReturn * 1000,

                            OrderDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderGroupProductDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig,
                            OrderContract = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductRouting = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            OPSDateConfig = c.OPS_DITOGroupProduct.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.OPS_DITOGroupProduct.DateConfig,
                            OPSContract = c.OPS_DITOGroupProduct.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.OPS_DITOGroupProduct.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                            OPSGroupProductRouting = c.OPS_DITOGroupProduct.CATRoutingID > 0 ? c.OPS_DITOGroupProduct.CAT_Routing.RoutingName : "",

                            OrderCreatedBy = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedBy,
                            OrderCreatedDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CreatedDate,

                            CostName = c.FIN_PLDetails.CAT_Cost.CostName,
                            Cost = c.FIN_PLDetails.Debit,
                            CostQuantity = c.Quantity == 0 ? (c.FIN_PLDetails.Quantity > 0 ? c.FIN_PLDetails.Quantity.Value : 0) : c.Quantity,
                            CostUnitPrice = c.UnitPrice == 0 ? (c.FIN_PLDetails.UnitPrice > 0 ? c.FIN_PLDetails.UnitPrice.Value : 0) : c.UnitPrice,
                            Note = c.FIN_PLDetails.Note,
                            Note1 = c.FIN_PLDetails.Note1,
                            Note2 = c.FIN_PLDetails.Note2,
                            TotalCost = c.FIN_PLDetails.Debit,
                        }).ToList();

                    result.AddRange(model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.VehicleID > 0 && c.FIN_PL.Effdate >= dtfrom && c.FIN_PL.Effdate < dtto && lstNoGroupDebit.Contains(c.CostID) && c.FIN_PL.VehicleID > 0 && c.FIN_PL.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOREPOwner_Vehicle
                    {
                        DITOMasterID = c.FIN_PL.DITOMasterID,
                        TOMasterCode = c.FIN_PL.DITOMasterID.HasValue ? c.FIN_PL.OPS_DITOMaster.Code : string.Empty,
                        DateConfig = c.FIN_PL.Effdate,
                        CostName = c.CAT_Cost.CostName,
                        Cost = c.Debit,
                        CostQuantity = c.Quantity.HasValue ? c.Quantity.Value : 0,
                        CostUnitPrice = c.UnitPrice.HasValue ? c.UnitPrice.Value : 0,
                        Note = c.Note,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        TotalCost = c.Debit,
                        VehicleID = c.FIN_PL.VehicleID,
                        VehicleCode = c.FIN_PL.VehicleID > 0 ? c.FIN_PL.CAT_Vehicle.RegNo : "",
                    }).ToList());

                    if (string.IsNullOrEmpty(request))
                        result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.DITOMasterID).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPOwner_Vehicle>().OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.DITOMasterID).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Chi phí xe cont
        public List<DTOREPOwner_Vehicle_Container> REPOwner_VehicleFee_Cost_Container(DateTime dtfrom, DateTime dtto, string request)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.FLMScheduleFeeNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.FLMDriverFeeNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptRegistry);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptMaintence);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptRepairLarge);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptRepairSmall);
                lstNoGroupDebit.Add((int)CATCostType.FLMReceiptMaterial);
                lstNoGroupDebit.Add((int)CATCostType.FLMDepreciationNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.FLMDepreciationReceiptNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.StationDebit);
                lstNoGroupDebit.Add((int)CATCostType.TroubleDebit);
                List<int> lstGroupDebit = new List<int>();
                lstGroupDebit.Add((int)CATCostType.FLMScheduleFee);
                lstGroupDebit.Add((int)CATCostType.FLMDriverFee);
                lstGroupDebit.Add((int)CATCostType.FLMDepreciation);
                lstGroupDebit.Add((int)CATCostType.FLMDepreciationReceipt);
                #endregion

                DateTime? dtNull = null;
                var result = new List<DTOREPOwner_Vehicle_Container>();
                using (var model = new DataEntities())
                {
                    dtfrom = dtfrom.Date;
                    dtto = dtto.Date.AddDays(1);

                    result = model.FIN_PLContainer.Where(c => c.COTOContainerID > 0 && c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver &&
                        c.FIN_PLDetails.FIN_PL.Effdate >= dtfrom && c.FIN_PLDetails.FIN_PL.Effdate < dtto && c.FIN_PLDetails.FIN_PL.VehicleID > 0 && lstGroupDebit.Contains(c.FIN_PLDetails.CostID)).Select(c => new DTOREPOwner_Vehicle_Container
                        {
                            COTOMasterID = c.FIN_PLDetails.FIN_PL.COTOMasterID.HasValue ? c.FIN_PLDetails.FIN_PL.COTOMasterID.Value : -1,
                            COMasterCode = c.FIN_PLDetails.FIN_PL.COTOMasterID.HasValue ? c.FIN_PLDetails.FIN_PL.OPS_COTOMaster.Code : string.Empty,
                            OPSContainerID = c.OPS_COTOContainer.OPSContainerID,
                            ORDContainerID = c.OPS_COTOContainer.OPS_Container.ContainerID,
                            OrderID = c.OPS_COTOContainer.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.Code,
                            PackingID = c.OPS_COTOContainer.OPS_Container.ORD_Container.PackingID,
                            PackingCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Packing.Code,
                            DateConfig = c.FIN_PLDetails.FIN_PL.Effdate,
                            RequestDate = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                            
                            ContainerNo = c.OPS_COTOContainer.OPS_Container.ContainerNo,
                            SealNo1 = c.OPS_COTOContainer.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_COTOContainer.OPS_Container.SealNo2,
                            OrderContainerNote = c.OPS_COTOContainer.OPS_Container.ORD_Container.Note,

                            LocationFromID = c.OPS_COTOContainer.LocationFromID,
                            LocationFromCode = c.OPS_COTOContainer.CAT_Location.Code,
                            LocationFromName = c.OPS_COTOContainer.CAT_Location.Location,
                            LocationFromAddress = c.OPS_COTOContainer.CAT_Location.Address,
                            LocationToID = c.OPS_COTOContainer.LocationToID,
                            LocationToCode = c.OPS_COTOContainer.CAT_Location1.Code,
                            LocationToName = c.OPS_COTOContainer.CAT_Location1.Location,
                            LocationToAddress = c.OPS_COTOContainer.CAT_Location1.Address,
                            LocationToProvince = c.OPS_COTOContainer.CAT_Location1.CAT_Province.ProvinceName,
                            LocationToDistrict = c.OPS_COTOContainer.CAT_Location1.CAT_District.DistrictName,
                            CUSRoutingCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.OPS_COTOContainer.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Routing.CAT_Routing.RoutingName : "",

                            DriverName = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.DriverName1 : string.Empty,
                            TelNo = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.DriverTel1 : string.Empty,
                            DrivingLicense = string.Empty,

                            VehicleID = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.VehicleID : null,
                            VehicleCode = c.OPS_COTOContainer.COTOMasterID.HasValue && c.OPS_COTOContainer.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CAT_Vehicle.RegNo : "",
                            VendorID = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID : null,
                            VendorCode = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà" : "",
                            VendorName = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CUS_Customer.CustomerName : "Xe nhà" : "",
                            VendorShortName = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOContainer.OPS_COTOMaster.CUS_Customer.ShortName : "Xe nhà" : "",
                            CustomerID = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,

                            ExternalCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ExternalCode,
                            ExternalDate = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ExternalDate,
                            UserDefine1 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine1,
                            UserDefine2 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine2,
                            UserDefine3 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine3,
                            UserDefine4 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine4,
                            UserDefine5 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine5,
                            UserDefine6 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine6,
                            UserDefine7 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine7,
                            UserDefine8 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine8,
                            UserDefine9 = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.UserDefine9,

                            KM = c.OPS_COTOContainer.COTOMasterID.HasValue ? c.OPS_COTOContainer.OPS_COTOMaster.KM : null,
                            ETD = c.OPS_COTOContainer.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOContainer.OPS_COTOMaster.ETD : null,
                            ETA = c.OPS_COTOContainer.COTOMasterID.HasValue ? (DateTime?)c.OPS_COTOContainer.OPS_COTOMaster.ETA : null,

                            StatusOfCOContainerID = c.OPS_COTOContainer.StatusOfCOContainerID,
                            StatusOfCOContainerCode = c.OPS_COTOContainer.SYS_Var.Code,
                            StatusOfCOContainerName = c.OPS_COTOContainer.SYS_Var.ValueOfVar,

                            CutOffTime = c.OPS_COTOContainer.OPS_Container.ORD_Container.CutOffTime,
                            Date_TimeGetEmpty = c.OPS_COTOContainer.OPS_Container.ORD_Container.DateGetEmpty,
                            Date_TimeReturnEmpty = c.OPS_COTOContainer.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETARequest = c.OPS_COTOContainer.OPS_Container.ORD_Container.ETA,
                            TypeOfContainerName = c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CarrierCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            LocationDepotCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.OPS_COTOContainer.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                            TripNo = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.TripNo,
                            VesselNo = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.VesselNo,
                            VesselName = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.VesselName,
                            TypeOfWAInspectionStatus = c.OPS_COTOContainer.OPS_Container.ORD_Container.TypeOfWAInspectionID > 0 ? (c.OPS_COTOContainer.OPS_Container.ORD_Container.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : "") : (c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo ? "x" : ""),
                            InspectionDate = c.OPS_COTOContainer.OPS_Container.ORD_Container.DateInspect.HasValue ? c.OPS_COTOContainer.OPS_Container.ORD_Container.DateInspect : c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.DateInspect,
                            ServiceOfOrderIncome = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ServiceOfOrderCost = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,

                            CostName = c.FIN_PLDetails.CAT_Cost.CostName,
                            Cost = c.FIN_PLDetails.Debit,
                            CostQuantity = c.Quantity == 0 ? (c.FIN_PLDetails.Quantity > 0 ? c.FIN_PLDetails.Quantity.Value : 0) : c.Quantity,
                            CostUnitPrice = c.UnitPrice == 0 ? (c.FIN_PLDetails.UnitPrice > 0 ? c.FIN_PLDetails.UnitPrice.Value : 0) : c.UnitPrice,
                            Note = c.FIN_PLDetails.Note,
                            Note2 = c.FIN_PLDetails.Note2,
                            TotalCost = c.FIN_PLDetails.Debit,
                        }).ToList();

                    result.AddRange(model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.VehicleID > 0 && c.FIN_PL.Effdate >= dtfrom && c.FIN_PL.Effdate < dtto && lstNoGroupDebit.Contains(c.CostID) && c.FIN_PL.VehicleID > 0 && c.FIN_PL.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOREPOwner_Vehicle_Container
                    {
                        COTOMasterID = c.FIN_PL.COTOMasterID.HasValue ? c.FIN_PL.COTOMasterID.Value : -1,
                        COMasterCode = c.FIN_PL.COTOMasterID.HasValue ? c.FIN_PL.OPS_COTOMaster.Code : string.Empty,
                        DateConfig = c.FIN_PL.Effdate,
                        CostName = c.CAT_Cost.CostName,
                        Cost = c.Debit,
                        CostQuantity = c.Quantity.HasValue ? c.Quantity.Value : 0,
                        CostUnitPrice = c.UnitPrice.HasValue ? c.UnitPrice.Value : 0,
                        Note = c.Note,
                        Note2 = c.Note2,
                        TotalCost = c.Debit,
                        VehicleID = c.FIN_PL.VehicleID,
                        VehicleCode = c.FIN_PL.VehicleID > 0 ? c.FIN_PL.CAT_Vehicle.RegNo : "",
                    }).ToList());

                    if (string.IsNullOrEmpty(request))
                        result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.COTOMasterID).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPOwner_Vehicle_Container>().OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.COTOMasterID).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Chi phí theo cột (dùng cho tải và cont)
        public DTOREPOwner_VehicleFee_ColumnDetail REPOwner_VehicleFee_Cost_ColumnDetailData(DateTime dtfrom, DateTime dtto, string request)
        {
            try
            {
                #region Temp Cost
                List<int> lstNoGroupDebit = new List<int>();
                lstNoGroupDebit.Add((int)CATCostType.FLMScheduleFeeNoGroup);
                lstNoGroupDebit.Add((int)CATCostType.FLMDriverFeeNoGroup);
                List<int> lstGroupDebit = new List<int>();
                lstGroupDebit.Add((int)CATCostType.FLMScheduleFee);
                lstGroupDebit.Add((int)CATCostType.FLMDriverFee);
                List<int> lstFINDebit = new List<int>();
                lstFINDebit.Add((int)CATCostType.FLMReceiptRegistry);
                lstFINDebit.Add((int)CATCostType.FLMReceiptMaintence);
                lstFINDebit.Add((int)CATCostType.FLMReceiptRepairLarge);
                lstFINDebit.Add((int)CATCostType.FLMReceiptRepairSmall);
                lstFINDebit.Add((int)CATCostType.FLMReceiptMaterial);
                lstFINDebit.Add((int)CATCostType.FLMDepreciationNoGroup);
                lstFINDebit.Add((int)CATCostType.FLMDepreciationReceiptNoGroup);
                lstFINDebit.Add((int)CATCostType.StationDebit);
                lstFINDebit.Add((int)CATCostType.TroubleDebit);
                List<int> lstFINGroupDebit = new List<int>();
                lstFINGroupDebit.Add((int)CATCostType.FLMDepreciation);
                lstFINGroupDebit.Add((int)CATCostType.FLMDepreciationReceipt);
                lstFINGroupDebit.Add((int)CATCostType.COTOMaterialQuota);

                #endregion

                var result = new DTOREPOwner_VehicleFee_ColumnDetail();
                result.ListData = new List<DTOREPOwner_VehicleFee_ColumnDetail_Data>();
                result.ListCost = new List<DTOREPOwner_VehicleFee_ColumnDetail_Cost>();
                using (var model = new DataEntities())
                {
                    dtfrom = dtfrom.Date;
                    dtto = dtto.Date.AddDays(1);

                    var lstVehicle = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && (c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor || c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck) && c.IsDisposal == false).Select(c => new DTOREPOwner_VehicleFee_ColumnDetail_Data
                        {
                            VehicleID = c.VehicleID.Value,
                            VehicleCode = c.CAT_Vehicle.RegNo,
                        }).ToList();

                    result.ListCost.AddRange(model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.VehicleID > 0 && c.FIN_PL.Effdate >= dtfrom && c.FIN_PL.Effdate < dtto && lstNoGroupDebit.Contains(c.CostID)).Select(c => new DTOREPOwner_VehicleFee_ColumnDetail_Cost
                    {
                        Cost = c.Debit,
                        CostQuantity = c.Quantity.HasValue ? c.Quantity.Value : 0,
                        CostUnitPrice = c.UnitPrice.HasValue ? c.UnitPrice.Value : 0,
                        CostID = c.CostID,
                        CostCode = c.CostID == (int)CATCostType.FLMScheduleFeeNoGroup ? "ScheduleFee" : "DriverFee",
                        TypeOfCostCode = c.TypeOfPriceDIExCode,
                        KeyCode = c.CostID == (int)CATCostType.FLMScheduleFeeNoGroup ? "ScheduleFee-" + c.TypeOfPriceDIExCode : "DriverFee-" + c.TypeOfPriceDIExCode,
                        VehicleID = c.FIN_PL.VehicleID.Value,
                        DateConfig = c.FIN_PL.Effdate
                    }).ToList());

                    result.ListCost.AddRange(model.FIN_PLGroupOfProduct.Where(c => c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PLDetails.FIN_PL.VehicleID > 0 && c.FIN_PLDetails.FIN_PL.Effdate >= dtfrom && c.FIN_PLDetails.FIN_PL.Effdate < dtto && lstGroupDebit.Contains(c.FIN_PLDetails.CostID)).Select(c => new DTOREPOwner_VehicleFee_ColumnDetail_Cost
                    {
                        Cost = c.FIN_PLDetails.Debit,
                        CostQuantity = c.Quantity,
                        CostUnitPrice = c.UnitPrice,
                        CostID = c.FIN_PLDetails.CostID,
                        CostCode = c.FIN_PLDetails.CostID == (int)CATCostType.FLMScheduleFee ? "ScheduleFee" : "DriverFee",
                        TypeOfCostCode = c.FIN_PLDetails.TypeOfPriceDIExCode,
                        KeyCode = c.FIN_PLDetails.CostID == (int)CATCostType.FLMScheduleFee ? "ScheduleFee-" + c.FIN_PLDetails.TypeOfPriceDIExCode : "DriverFee-" + c.FIN_PLDetails.TypeOfPriceDIExCode,
                        VehicleID = c.FIN_PLDetails.FIN_PL.VehicleID.Value,
                        DateConfig = c.FIN_PLDetails.FIN_PL.Effdate
                    }).ToList());

                    var lstFIN = model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PL.VehicleID > 0 && c.FIN_PL.Effdate >= dtfrom && c.FIN_PL.Effdate < dtto && lstFINDebit.Contains(c.CostID)).Select(c => new DTOREPOwner_VehicleFee_ColumnDetail_Cost
                    {
                        Cost = c.Debit,
                        CostQuantity = c.Quantity.HasValue ? c.Quantity.Value : 0,
                        CostUnitPrice = c.UnitPrice.HasValue ? c.UnitPrice.Value : 0,
                        CostID = c.CostID,
                        CostCode = c.CAT_Cost.Code,
                        TypeOfCostCode = c.TypeOfPriceDIExCode,
                        KeyCode = c.CAT_Cost.Code + "-" + c.TypeOfPriceDIExCode,
                        VehicleID = c.FIN_PL.VehicleID.Value,
                        DateConfig = c.FIN_PL.Effdate
                    }).ToList();

                    lstFIN.AddRange(model.FIN_PLGroupOfProduct.Where(c => c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PLDetails.FIN_PL.VehicleID > 0 && c.FIN_PLDetails.FIN_PL.Effdate >= dtfrom && c.FIN_PLDetails.FIN_PL.Effdate < dtto && lstFINGroupDebit.Contains(c.FIN_PLDetails.CostID)).Select(c => new DTOREPOwner_VehicleFee_ColumnDetail_Cost
                    {
                        Cost = c.FIN_PLDetails.Debit,
                        CostQuantity = c.Quantity,
                        CostUnitPrice = c.UnitPrice,
                        CostID = c.FIN_PLDetails.CostID,
                        CostCode = c.FIN_PLDetails.CAT_Cost.Code,
                        TypeOfCostCode = c.FIN_PLDetails.TypeOfPriceDIExCode,
                        KeyCode = c.FIN_PLDetails.CAT_Cost.Code + "-" + c.FIN_PLDetails.TypeOfPriceDIExCode,
                        VehicleID = c.FIN_PLDetails.FIN_PL.VehicleID.Value,
                        DateConfig = c.FIN_PLDetails.FIN_PL.Effdate
                    }).ToList());

                    lstFIN.AddRange(model.FIN_PLContainer.Where(c => c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypeDriver && c.FIN_PLDetails.FIN_PL.VehicleID > 0 && c.FIN_PLDetails.FIN_PL.Effdate >= dtfrom && c.FIN_PLDetails.FIN_PL.Effdate < dtto && lstFINGroupDebit.Contains(c.FIN_PLDetails.CostID)).Select(c => new DTOREPOwner_VehicleFee_ColumnDetail_Cost
                    {
                        Cost = c.FIN_PLDetails.Debit,
                        CostQuantity = c.Quantity,
                        CostUnitPrice = c.UnitPrice,
                        CostID = c.FIN_PLDetails.CostID,
                        CostCode = c.FIN_PLDetails.CAT_Cost.Code,
                        TypeOfCostCode = c.FIN_PLDetails.TypeOfPriceDIExCode,
                        KeyCode = c.FIN_PLDetails.CAT_Cost.Code + "-" + c.FIN_PLDetails.TypeOfPriceDIExCode,
                        VehicleID = c.FIN_PLDetails.FIN_PL.VehicleID.Value,
                        DateConfig = c.FIN_PLDetails.FIN_PL.Effdate
                    }).ToList());

                    foreach (var itemVehicle in lstVehicle)
                    {
                        var DateFrom = dtfrom.Date;
                        while (DateFrom < dtto)
                        {
                            DTOREPOwner_VehicleFee_ColumnDetail_Data item = new DTOREPOwner_VehicleFee_ColumnDetail_Data
                            {
                                VehicleID = itemVehicle.VehicleID,
                                VehicleCode = itemVehicle.VehicleCode,
                                DateConfig = DateFrom.Date,
                            };

                            var queryFIN = lstFIN.Where(c => c.VehicleID == item.VehicleID && c.DateConfig == item.DateConfig);
                            if (queryFIN.Count() > 0)
                            {
                                var queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.FLMReceiptMaintence);
                                if (queryFINCost.Count() > 0)
                                    item.CostReceiptMaintence = queryFINCost.Sum(c => c.Cost);

                                queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.FLMReceiptMaterial);
                                if (queryFINCost.Count() > 0)
                                    item.CostReceiptMaterial = queryFINCost.Sum(c => c.Cost);

                                queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.FLMReceiptRegistry);
                                if (queryFINCost.Count() > 0)
                                    item.CostReceiptRegistry = queryFINCost.Sum(c => c.Cost);

                                queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.FLMReceiptRepairLarge);
                                if (queryFINCost.Count() > 0)
                                    item.CostReceiptRepairLarge = queryFINCost.Sum(c => c.Cost);

                                queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.FLMReceiptRepairSmall);
                                if (queryFINCost.Count() > 0)
                                    item.CostReceiptRepairSmall = queryFINCost.Sum(c => c.Cost);

                                queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.FLMDepreciationNoGroup || c.CostID == (int)CATCostType.FLMDepreciation);
                                if (queryFINCost.Count() > 0)
                                    item.CostDepreciation = queryFINCost.Sum(c => c.Cost);

                                queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.FLMDepreciationReceipt || c.CostID == (int)CATCostType.FLMDepreciationReceiptNoGroup);
                                if (queryFINCost.Count() > 0)
                                    item.CostDepreciationReceipt = queryFINCost.Sum(c => c.Cost);

                                queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.StationDebit);
                                if (queryFINCost.Count() > 0)
                                    item.CostStationDebit = queryFINCost.Sum(c => c.Cost);

                                queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.TroubleDebit);
                                if (queryFINCost.Count() > 0)
                                    item.CostTrouble = queryFINCost.Sum(c => c.Cost);

                                queryFINCost = queryFIN.Where(c => c.CostID == (int)CATCostType.COTOMaterialQuota);
                                if (queryFINCost.Count() > 0)
                                    item.CostQuota = queryFINCost.Sum(c => c.Cost);
                            }

                            var queryOther = result.ListCost.Where(c => c.VehicleID == item.VehicleID && c.DateConfig == item.DateConfig);
                            if (queryOther.Count() > 0 || queryFIN.Count() > 0)
                                result.ListData.Add(item);

                            DateFrom = DateFrom.AddDays(1);
                        }
                    }

                    if (!string.IsNullOrEmpty(request))
                        result.ListData = result.ListData.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPOwner_VehicleFee_ColumnDetail_Data>().ToList();
                    else
                        result.ListData = result.ListData.OrderBy(c => c.VehicleCode).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Định mức xăng dầu hàng tháng
        public List<DTOREPOwner_MaterialQuota> REPOwner_MaterialQuota(DateTime dtfrom, DateTime dtto, string request)
        {
            try
            {
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPOwner_MaterialQuota>();
                using (var model = new DataEntities())
                {
                    result = model.FIN_PLContainer.Where(c => c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PLDetails.FIN_PL.Effdate >= dtfrom && c.FIN_PLDetails.FIN_PL.Effdate <= dtto && c.FIN_PLDetails.CostID == (int)CATCostType.COTOMaterialQuota).Select(c => new DTOREPOwner_MaterialQuota
                    {
                        ID = c.ID,
                        DateConfig = c.FIN_PLDetails.FIN_PL.Effdate,
                        VehicleID = c.FIN_PLDetails.FIN_PL.VehicleID,
                        VehicleCode = c.FIN_PLDetails.FIN_PL.VehicleID > 0 ? c.FIN_PLDetails.FIN_PL.CAT_Vehicle.RegNo : "",
                        DITOMasterID = c.FIN_PLDetails.FIN_PL.DITOMasterID,
                        COTOMasterID = c.FIN_PLDetails.FIN_PL.COTOMasterID,
                        TOMasterCode = c.FIN_PLDetails.FIN_PL.DITOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.Code : c.FIN_PLDetails.FIN_PL.COTOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_COTOMaster.Code : "",
                        DriverID = c.FIN_PLDetails.FIN_PL.DriverID,
                        DriverName = c.FIN_PLDetails.FIN_PL.DriverID > 0 ? c.FIN_PLDetails.FIN_PL.FLM_Driver.CAT_Driver.LastName + " " + c.FIN_PLDetails.FIN_PL.FLM_Driver.CAT_Driver.FirstName : "",
                        ETD = c.FIN_PLDetails.FIN_PL.DITOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.ETD.Value : c.FIN_PLDetails.FIN_PL.COTOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_COTOMaster.ETD : dtfrom,
                        ETA = c.FIN_PLDetails.FIN_PL.DITOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.ETA.Value : c.FIN_PLDetails.FIN_PL.COTOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_COTOMaster.ETA : dtfrom,
                        ATD = c.FIN_PLDetails.FIN_PL.DITOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.ATD : c.FIN_PLDetails.FIN_PL.COTOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_COTOMaster.ATD : null,
                        ATA = c.FIN_PLDetails.FIN_PL.DITOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_DITOMaster.ATA : c.FIN_PLDetails.FIN_PL.COTOMasterID > 0 ? c.FIN_PLDetails.FIN_PL.OPS_COTOMaster.ATA : null,
                        TypeOfPriceDIExCode = c.FIN_PLDetails.TypeOfPriceDIExCode,
                        Note = c.FIN_PLDetails.Note,
                        Note1 = c.FIN_PLDetails.Note1,
                        Note2 = c.FIN_PLDetails.Note2,
                        Note3 = c.FIN_PLDetails.Note3,
                        Note4 = c.FIN_PLDetails.Note4,
                        Note5 = c.FIN_PLDetails.Note5,
                        Quantity = c.FIN_PLDetails.Quantity.HasValue ? c.FIN_PLDetails.Quantity.Value : 0,
                        UnitPrice = c.FIN_PLDetails.UnitPrice.HasValue ? c.FIN_PLDetails.UnitPrice.Value : 0,
                        Total = c.FIN_PLDetails.Debit,
                        OrderCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.Code,
                        ContainerNo = c.OPS_COTOContainer.OPS_Container.ContainerNo,
                        PackingCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Packing.Code,
                    }).ToList();

                    if (string.IsNullOrEmpty(request))
                        result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.COTOMasterID).ThenBy(c => c.DITOMasterID).ToList();
                    else
                        result = result.ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOREPOwner_MaterialQuota>().OrderBy(c => c.VehicleCode).ThenBy(c => c.DateConfig).ThenBy(c => c.COTOMasterID).ThenBy(c => c.DITOMasterID).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        // Quay đầu xe
        public DTOREPOwner_TotalSchedule REPOwner_TotalSchedule(DateTime dtfrom, DateTime dtto, List<int?> lstVendorid)
        {
            try
            {
                int? iNull = null;
                var result = new DTOREPOwner_TotalSchedule();
                result.lstVehicle = new List<DTOREPOwner_VehicleSchedule>();
                result.lstVehicleDetail = new List<DTOREPOwner_VehicleScheduleDetail>();
                result.lstDate = new List<DTOREPOwner_Date>();
                using (var model = new DataEntities())
                {
                    var dateFrom = dtfrom.Date;
                    var dateTo = dtto.Date;
                    dtfrom = dtfrom.Date;
                    dtto = dtto.Date.AddDays(1);

                    if (lstVendorid == null || lstVendorid.Count == 0)
                    {
                        lstVendorid = model.CUS_Customer.Where(c => c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN && !c.IsSystem && Account.ListCustomerID.Contains(c.ID)).Select(c => (int?)c.ID).Distinct().ToList();
                        lstVendorid.Add(Account.SYSCustomerID);
                        lstVendorid.Add(iNull);
                    }

                    var query = model.CUS_Vehicle.Where(c => lstVendorid.Contains(c.CustomerID) && c.VehicleID > 2).Select(c => new
                    {
                        VehicleID = c.VehicleID,
                        VehicleCode = c.CAT_Vehicle.RegNo,
                        VendorID = c.CustomerID,
                        VendorCode = c.CUS_Customer.Code,
                        VendorName = c.CUS_Customer.CustomerName
                    }).Distinct().ToList();

                    result.lstVehicle = query.Select(c => new DTOREPOwner_VehicleSchedule
                    {
                        VehicleID = c.VehicleID,
                        VehicleCode = c.VehicleCode,
                        VendorID = c.VendorID,
                        VendorCode = c.VendorCode,
                        VendorName = c.VendorName
                    }).ToList();

                    var querySchedule = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived && c.VehicleID > 2 && c.ETD.HasValue && c.ETD >= dtfrom && c.ETD < dtto && lstVendorid.Contains(c.VendorOfVehicleID)).Select(c => new
                    {
                        VehicleID = c.VehicleID.Value,
                        VendorID = c.VendorOfVehicleID == null ? Account.SYSCustomerID : c.VendorOfVehicleID.Value,
                        DateSchedule = c.ETD.Value,
                        DITOMasterID = c.ID,
                    }).ToList();

                    foreach (var itemVehicle in result.lstVehicle)
                    {
                        DTOREPOwner_VehicleScheduleDetail itemDetail = new DTOREPOwner_VehicleScheduleDetail();
                        itemDetail.VehicleID = itemVehicle.VehicleID;
                        itemDetail.VendorID = itemVehicle.VendorID;
                        itemDetail.VehicleCode = itemVehicle.VehicleCode;
                        itemDetail.VendorCode = itemVehicle.VendorCode;
                        itemDetail.VendorName = itemVehicle.VendorName;
                        itemDetail.lstDate = new List<DTOREPOwner_Date>();
                        result.lstVehicleDetail.Add(itemDetail);
                        dateFrom = dtfrom.Date;
                        while (dateFrom <= dateTo)
                        {
                            DTOREPOwner_Date itemDate = new DTOREPOwner_Date();
                            itemDate.Date = dateFrom;
                            itemDate.DateString = "D" + dateFrom.ToString("ddMMyyyy");
                            itemDate.DateName = dateFrom.ToString("dd/MM/yyyy");
                            var lstSchedule = querySchedule.Where(c => c.VehicleID == itemVehicle.VehicleID && c.VendorID == itemVehicle.VendorID && c.DateSchedule.Date == dateFrom);
                            if (lstSchedule.Count() > 0)
                                itemDate.TotalSchedule = lstSchedule.Select(c => c.DITOMasterID).Distinct().Count();

                            itemDetail.lstDate.Add(itemDate);

                            if (!result.lstDate.Any(c => c.Date == dateFrom))
                                result.lstDate.Add(itemDate);

                            dateFrom = dateFrom.AddDays(1);
                        }
                        itemDetail.TotalSchedule = itemDetail.lstDate.Sum(c => c.TotalSchedule);
                    }
                }

                result.lstVehicle = result.lstVehicle.OrderBy(c => c.VendorID).ThenBy(c => c.VendorCode).ToList();
                result.lstVehicleDetail = result.lstVehicleDetail.OrderBy(c => c.VendorID).ThenBy(c => c.VendorCode).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult REPOwner_Schedule()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Schedule.OrderByDescending(c => c.Year).ThenByDescending(c => c.Month).Select(c => new DTOREPOwner_Schedule
                    {
                        ID = c.ID,
                        ScheduleName = string.Empty,
                        Month = c.Month,
                        Year = c.Year
                    }).ToList();

                    foreach (var item in query)
                        item.ScheduleName = item.Month.ToString("00") + "/" + item.Year.ToString("0000");

                    DTOREPOwner_Schedule itemNull = new DTOREPOwner_Schedule();
                    itemNull.ID = -1;
                    itemNull.ScheduleName = "";
                    query.Insert(0, itemNull);

                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Vai trò tài xế
        public List<DTOREPFLMVehiclePlan> REPFLMDriverRole_PlanData(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                List<DTOREPFLMVehiclePlan> result = new List<DTOREPFLMVehiclePlan>();
                using (var model = new DataEntities())
                {
                    var dateFrom = dtfrom.Date;
                    var dateTo = dtto.Date;
                    var query = model.FLM_VehiclePlan.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.DateFrom >= dateFrom && c.DateFrom <= dateTo).Select(c => new DTOREPFLMVehiclePlan
                        {
                            ID = c.ID,
                            DriverID = c.DriverID,
                            VehicleNo = c.CAT_Vehicle.RegNo,
                            DateFrom = c.DateFrom,
                            DateTo = c.DateTo,
                            TypeOfDriverID = c.TypeOfDriverID,
                            TypeOfDriverName = c.SYS_Var.ValueOfVar,
                            TypeDriver = c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2,
                        }).ToList();
                    result.AddRange(query);
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOREPFLMVehicleActual> REPFLMDriverRole_ActualData(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                List<DTOREPFLMVehicleActual> result = new List<DTOREPFLMVehicleActual>();
                using (var model = new DataEntities())
                {
                    var dateFrom = dtfrom.Date;
                    var dateTo = dtto.Date;
                    var listDI = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered).Select(c => new
                    {
                        DITOMasterID = c.ID,
                        DriverID1 = c.DriverID1,
                        DriverID2 = c.DriverID2,
                        DriverID3 = c.DriverID3,
                        DriverID4 = c.DriverID4,
                        DriverID5 = c.DriverID5,
                        TypeOfDriverID1 = c.TypeOfDriverID1,
                        TypeOfDriverID2 = c.TypeOfDriverID2,
                        TypeOfDriverID3 = c.TypeOfDriverID3,
                        TypeOfDriverID4 = c.TypeOfDriverID4,
                        TypeOfDriverID5 = c.TypeOfDriverID5,
                        ETA = c.ETA,
                        ETD = c.ETD
                    }).ToList();

                    foreach (var item in listDI)
                    {
                        if (item.DriverID1 > 0)
                        {
                            DTOREPFLMVehicleActual obj1 = new DTOREPFLMVehicleActual();
                            obj1.DITOMasterID = item.DITOMasterID;
                            obj1.COTOMasterID = -1;
                            obj1.DriverID = item.DriverID1.Value;
                            obj1.DateFrom = item.ETD.Value;
                            obj1.DateTo = item.ETA.Value;
                            obj1.TypeOfDriverID = item.TypeOfDriverID1 > 0 ? item.TypeOfDriverID1.Value : -1;
                            obj1.TypeDriver = item.TypeOfDriverID1 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj1);
                        }
                        if (item.DriverID2 > 0)
                        {
                            DTOREPFLMVehicleActual obj2 = new DTOREPFLMVehicleActual();
                            obj2.DITOMasterID = item.DITOMasterID;
                            obj2.COTOMasterID = -1;
                            obj2.DriverID = item.DriverID2.Value;
                            obj2.DateFrom = item.ETD.Value;
                            obj2.DateTo = item.ETA.Value;
                            obj2.TypeOfDriverID = item.TypeOfDriverID2 > 0 ? item.TypeOfDriverID2.Value : -1;
                            obj2.TypeDriver = item.TypeOfDriverID2 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj2);
                        }
                        if (item.DriverID3 > 0)
                        {
                            DTOREPFLMVehicleActual obj3 = new DTOREPFLMVehicleActual();
                            obj3.DITOMasterID = item.DITOMasterID;
                            obj3.COTOMasterID = -1;
                            obj3.DriverID = item.DriverID3.Value;
                            obj3.DateFrom = item.ETD.Value;
                            obj3.DateTo = item.ETA.Value;
                            obj3.TypeOfDriverID = item.TypeOfDriverID3 > 0 ? item.TypeOfDriverID3.Value : -1;
                            obj3.TypeDriver = item.TypeOfDriverID3 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj3);
                        }
                        if (item.DriverID4 > 0)
                        {
                            DTOREPFLMVehicleActual obj4 = new DTOREPFLMVehicleActual();
                            obj4.DITOMasterID = item.DITOMasterID;
                            obj4.COTOMasterID = -1;
                            obj4.DriverID = item.DriverID4.Value;
                            obj4.DateFrom = item.ETD.Value;
                            obj4.DateTo = item.ETA.Value;
                            obj4.TypeOfDriverID = item.TypeOfDriverID4 > 0 ? item.TypeOfDriverID4.Value : -1;
                            obj4.TypeDriver = item.TypeOfDriverID4 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj4);
                        }
                        if (item.DriverID5 > 0)
                        {
                            DTOREPFLMVehicleActual obj5 = new DTOREPFLMVehicleActual();
                            obj5.DITOMasterID = item.DITOMasterID;
                            obj5.COTOMasterID = -1;
                            obj5.DriverID = item.DriverID5.Value;
                            obj5.DateFrom = item.ETD.Value;
                            obj5.DateTo = item.ETA.Value;
                            obj5.TypeOfDriverID = item.TypeOfDriverID5 > 0 ? item.TypeOfDriverID5.Value : -1;
                            obj5.TypeDriver = item.TypeOfDriverID5 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj5);
                        }
                    }

                    var listCO = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered).Select(c => new
                    {
                        COTOMasterID = c.ID,
                        DriverID1 = c.DriverID1,
                        DriverID2 = c.DriverID2,
                        DriverID3 = c.DriverID3,
                        DriverID4 = c.DriverID4,
                        DriverID5 = c.DriverID5,
                        TypeOfDriverID1 = c.TypeOfDriverID1,
                        TypeOfDriverID2 = c.TypeOfDriverID2,
                        TypeOfDriverID3 = c.TypeOfDriverID3,
                        TypeOfDriverID4 = c.TypeOfDriverID4,
                        TypeOfDriverID5 = c.TypeOfDriverID5,
                        ETA = c.ETA,
                        ETD = c.ETD
                    }).ToList();
                    foreach (var item in listCO)
                    {
                        if (item.DriverID1 > 0)
                        {
                            DTOREPFLMVehicleActual obj1 = new DTOREPFLMVehicleActual();
                            obj1.DITOMasterID = -1;
                            obj1.COTOMasterID = item.COTOMasterID;
                            obj1.DriverID = item.DriverID1.Value;
                            obj1.DateFrom = item.ETD;
                            obj1.DateTo = item.ETA;
                            obj1.TypeOfDriverID = item.TypeOfDriverID1 > 0 ? item.TypeOfDriverID1.Value : -1;
                            obj1.TypeDriver = item.TypeOfDriverID1 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj1);
                        }
                        if (item.DriverID2 > 0)
                        {
                            DTOREPFLMVehicleActual obj2 = new DTOREPFLMVehicleActual();
                            obj2.DITOMasterID = -1;
                            obj2.COTOMasterID = item.COTOMasterID;
                            obj2.DriverID = item.DriverID2.Value;
                            obj2.DateFrom = item.ETD;
                            obj2.DateTo = item.ETA;
                            obj2.TypeOfDriverID = item.TypeOfDriverID2 > 0 ? item.TypeOfDriverID2.Value : -1;
                            obj2.TypeDriver = item.TypeOfDriverID2 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj2);
                        }
                        if (item.DriverID3 > 0)
                        {
                            DTOREPFLMVehicleActual obj3 = new DTOREPFLMVehicleActual();
                            obj3.DITOMasterID = -1;
                            obj3.COTOMasterID = item.COTOMasterID;
                            obj3.DriverID = item.DriverID3.Value;
                            obj3.DateFrom = item.ETD;
                            obj3.DateTo = item.ETA;
                            obj3.TypeOfDriverID = item.TypeOfDriverID3 > 0 ? item.TypeOfDriverID3.Value : -1;
                            obj3.TypeDriver = item.TypeOfDriverID3 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj3);
                        }
                        if (item.DriverID4 > 0)
                        {
                            DTOREPFLMVehicleActual obj4 = new DTOREPFLMVehicleActual();
                            obj4.DITOMasterID = -1;
                            obj4.COTOMasterID = item.COTOMasterID;
                            obj4.DateFrom = item.ETD;
                            obj4.DriverID = item.DriverID4.Value;
                            obj4.DateTo = item.ETA;
                            obj4.TypeOfDriverID = item.TypeOfDriverID4 > 0 ? item.TypeOfDriverID4.Value : -1;
                            obj4.TypeDriver = item.TypeOfDriverID4 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj4);
                        }
                        if (item.DriverID5 > 0)
                        {
                            DTOREPFLMVehicleActual obj5 = new DTOREPFLMVehicleActual();
                            obj5.DITOMasterID = -1;
                            obj5.COTOMasterID = item.COTOMasterID;
                            obj5.DateFrom = item.ETD;
                            obj5.DriverID = item.DriverID5.Value;
                            obj5.DateTo = item.ETA;
                            obj5.TypeOfDriverID = item.TypeOfDriverID5 > 0 ? item.TypeOfDriverID5.Value : -1;
                            obj5.TypeDriver = item.TypeOfDriverID5 == -(int)SYSVarType.TypeOfDriverMain ? 1 : 2;
                            result.Add(obj5);
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Phiếu
        public DTOREPOwner_Receipt REPOwner_Receipt(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new DTOREPOwner_Receipt();
                result.ListData = new List<DTOREPOwner_Receipt_Data>();
                result.ListColumn = new List<DTOREPOwner_Receipt_Detail>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    result.ListData = model.FLM_ReceiptCost.Where(c => c.ReceiptID > 0 && c.FLM_Receipt.SYSCustomerID == Account.SYSCustomerID && c.FLM_Receipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptMaterial && c.FLM_Receipt.DateReceipt >= dtfrom && c.FLM_Receipt.DateReceipt < dtto && c.AssetID > 0 && c.FLM_Asset.VehicleID > 0).Select(c => new DTOREPOwner_Receipt_Data
                    {
                        ReceiptID = c.ReceiptID,
                        ReceiptCode = c.FLM_Receipt.Code,
                        VehicleID = c.AssetID.Value,
                        VehicleCode = c.FLM_Asset.CAT_Vehicle.RegNo,
                        DriverCode = c.FLM_Asset.CAT_Vehicle.DriverID > 0 ? c.FLM_Asset.CAT_Vehicle.FLM_Driver.Code : string.Empty,
                        DriverName = c.FLM_Asset.CAT_Vehicle.DriverID > 0 ? c.FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.FirstName : string.Empty,
                        Date = c.FLM_Receipt.DateReceipt,
                        SupplierCode = c.FLM_Receipt.SupplierID > 0 ? c.FLM_Receipt.FLM_Supplier.Code : string.Empty,
                        SupplierName = c.FLM_Receipt.SupplierID > 0 ? c.FLM_Receipt.FLM_Supplier.SupplierName : string.Empty,
                        KMStart = c.KMStart,
                        KMEnd = c.KMEnd,
                    }).ToList();

                    var query = model.FLM_ReceiptDetail.Where(c => c.MaterialID > 0 && c.FLM_ReceiptCost.ReceiptID > 0 && c.FLM_ReceiptCost.FLM_Receipt.SYSCustomerID == Account.SYSCustomerID && c.FLM_ReceiptCost.FLM_Receipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptMaterial && c.FLM_ReceiptCost.FLM_Receipt.DateReceipt >= dtfrom && c.FLM_ReceiptCost.FLM_Receipt.DateReceipt <= dtto && c.FLM_ReceiptCost.AssetID > 0 && c.FLM_ReceiptCost.FLM_Asset.VehicleID > 0).Select(c => new DTOREPOwner_Receipt_Detail
                    {
                        ReceiptID = c.FLM_ReceiptCost.ReceiptID,
                        MaterialID = c.MaterialID.Value,
                        MaterialCode = c.FLM_Material.Code,
                        Note = c.Note,
                        Quantity = c.Quantity,
                        UnitPrice = c.Price,
                        Total = c.Amount,
                    }).ToList();

                    foreach (var itemGroup in query.GroupBy(c => new { c.ReceiptID, c.MaterialID, c.MaterialCode }))
                    {
                        DTOREPOwner_Receipt_Detail item = new DTOREPOwner_Receipt_Detail();
                        item.ReceiptID = itemGroup.Key.ReceiptID;
                        item.MaterialID = itemGroup.Key.MaterialID;
                        item.MaterialCode = itemGroup.Key.MaterialCode;
                        item.Note = string.Join(", ", itemGroup.Select(c => c.Note).Distinct().ToList());
                        item.Quantity = itemGroup.Sum(c => c.Quantity);
                        item.UnitPrice = itemGroup.Sum(c => c.UnitPrice);
                        item.Total = itemGroup.Sum(c => c.Total);
                        result.ListColumn.Add(item);

                        var data = result.ListData.FirstOrDefault(c => c.ReceiptID == item.ReceiptID);
                        if (data != null)
                            data.Total += item.Total;
                    }
                }

                result.ListData = result.ListData.OrderBy(c => c.VehicleCode).ThenBy(c => c.Date).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOREPOwner_ReceiptMaterial> REPOwner_Receipt_Detail(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<DTOREPOwner_ReceiptMaterial>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    result = model.FLM_ReceiptDetail.Where(c => c.MaterialID > 0 && c.FLM_ReceiptCost.ReceiptID > 0 && c.FLM_ReceiptCost.FLM_Receipt.SYSCustomerID == Account.SYSCustomerID && c.FLM_ReceiptCost.FLM_Receipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptMaterial && c.FLM_ReceiptCost.FLM_Receipt.DateReceipt >= dtfrom && c.FLM_ReceiptCost.FLM_Receipt.DateReceipt < dtto && c.FLM_ReceiptCost.AssetID > 0 && c.FLM_ReceiptCost.FLM_Asset.VehicleID > 0).Select(c => new DTOREPOwner_ReceiptMaterial
                    {
                        VehicleID = c.FLM_ReceiptCost.AssetID.Value,
                        VehicleCode = c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.RegNo,
                        DriverCode = c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.DriverID > 0 ? c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.FLM_Driver.Code : string.Empty,
                        DriverName = c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.DriverID > 0 ? c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.FirstName : string.Empty,
                        Date = c.FLM_ReceiptCost.FLM_Receipt.DateReceipt,
                        ReceiptCode = c.FLM_ReceiptCost.FLM_Receipt.Code,
                        SupplierCode = c.FLM_ReceiptCost.FLM_Receipt.SupplierID > 0 ? c.FLM_ReceiptCost.FLM_Receipt.FLM_Supplier.Code : string.Empty,
                        SupplierName = c.FLM_ReceiptCost.FLM_Receipt.SupplierID > 0 ? c.FLM_ReceiptCost.FLM_Receipt.FLM_Supplier.SupplierName : string.Empty,
                        MaterialCode = c.MaterialID > 0 ? c.FLM_Material.Code : string.Empty,
                        MaterialName = c.MaterialID > 0 ? c.FLM_Material.MaterialName : string.Empty,
                        Quantity = c.Quantity,
                        UnitPrice = c.Price,
                    }).ToList();
                }

                result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.Date).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOREPOwner_Repair> REPOwner_Repair(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<DTOREPOwner_Repair>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    result = model.FLM_ReceiptDetail.Where(c => (c.MaterialID > 0 || c.CostID > 0) && c.FLM_ReceiptCost.ReceiptID > 0 && c.FLM_ReceiptCost.FLM_Receipt.SYSCustomerID == Account.SYSCustomerID && c.FLM_ReceiptCost.FLM_Receipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptRepairSmall && c.FLM_ReceiptCost.FLM_Receipt.DateReceipt >= dtfrom && c.FLM_ReceiptCost.FLM_Receipt.DateReceipt < dtto && c.FLM_ReceiptCost.FLM_Asset.VehicleID > 0).Select(c => new DTOREPOwner_Repair
                    {
                        VehicleID = c.FLM_ReceiptCost.AssetID.Value,
                        VehicleCode = c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.RegNo,
                        DriverCode = c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.DriverID > 0 ? c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.FLM_Driver.Code : string.Empty,
                        DriverName = c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.DriverID > 0 ? c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.FirstName : string.Empty,
                        Date = c.FLM_ReceiptCost.FLM_Receipt.DateReceipt,
                        ReceiptCode = c.FLM_ReceiptCost.FLM_Receipt.Code,
                        SupplierCode = c.FLM_ReceiptCost.FLM_Receipt.SupplierID > 0 ? c.FLM_ReceiptCost.FLM_Receipt.FLM_Supplier.Code : string.Empty,
                        SupplierName = c.FLM_ReceiptCost.FLM_Receipt.SupplierID > 0 ? c.FLM_ReceiptCost.FLM_Receipt.FLM_Supplier.SupplierName : string.Empty,
                        KMStart = c.FLM_ReceiptCost.KMStart,
                        KMEnd = c.FLM_ReceiptCost.KMEnd,
                        MaterialID = c.MaterialID > 0 ? c.MaterialID.Value : -1,
                        MaterialCode = c.MaterialID > 0 ? c.FLM_Material.Code : string.Empty,
                        CostID = c.CostID > 0 ? c.CostID.Value : -1,
                        CostName = c.CostID > 0 ? c.CAT_Cost.CostName : string.Empty,
                        Note = c.Note,
                        Quantity = c.Quantity,
                        UnitPrice = c.Price,
                        Total = c.Amount,
                    }).ToList();
                }

                result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.Date).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Lịch sử Thiêt bị
        public List<DTOREPOwner_Equipment> REPOwner_Equipment(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<DTOREPOwner_Equipment>();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    result = model.FLM_TransferHistory.Where(c => c.DateTranfer >= dtfrom && c.DateTranfer < dtto && c.FLM_Asset1.SYSCustomerID == Account.SYSCustomerID && c.IsCurrent && (c.StockID > 0 || c.AssetToID > 0)).Select(c => new DTOREPOwner_Equipment
                    {
                        AssetID = c.AssetOwnID,
                        Code = c.FLM_Asset1.Code,
                        Name = c.FLM_Asset1.Name,
                        Date = c.DateTranfer,
                        BaseValue = c.FLM_Asset1.BaseValue > 0 ? c.FLM_Asset1.BaseValue.Value : 0,
                        CurrentValue = c.FLM_Asset1.CurrentValue > 0 ? c.FLM_Asset1.CurrentValue.Value : 0,
                        DepreciationPeriod = c.FLM_Asset1.DepreciationPeriod > 0 ? c.FLM_Asset1.DepreciationPeriod.Value : 0,
                        GroupOfEquipmentName = c.FLM_Asset1.GroupOfEquipmentID > 0 ? c.FLM_Asset1.CAT_GroupOfEquipment.GroupName : string.Empty,
                        CurrentStatus = c.AssetToID > 0 ? (c.FLM_Asset2.VehicleID > 0 ? c.FLM_Asset2.CAT_Vehicle.RegNo : c.FLM_Asset2.RomoocID > 0 ? c.FLM_Asset2.CAT_Romooc.RegNo : c.FLM_Asset2.ContainerID > 0 ? c.FLM_Asset2.CAT_Container.ContainerNo : c.FLM_Asset2.Code) : c.StockID > 0 ? c.FLM_Stock.Code : string.Empty,
                    }).ToList();
                }

                result = result.OrderBy(c => c.Date).ThenBy(c => c.Code).ToList();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // chi tiết phân lệnh và từ chối lệnh (REPOwnerDriverRole)
        public List<DTOREPOwnerDriverRole> REPOwner_DriverRole(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<DTOREPOwnerDriverRole>();
                dtfrom = dtfrom.Date;
                dtto = dtto.AddDays(1).Date;
                using (var model = new DataEntities())
                {
                    var query = model.FLM_AssetTimeSheetDriver.Where(c => c.FLM_AssetTimeSheet.DateFrom >= dtfrom && c.FLM_AssetTimeSheet.DateTo < dtto &&
                        (c.FLM_AssetTimeSheet.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster || c.FLM_AssetTimeSheet.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster)).Select(c => new DTOREPOwnerDriverRole
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        DriverCode = c.FLM_Driver.Code,
                        DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                        MasterCode = string.Empty,
                        MasterID = c.FLM_AssetTimeSheet.ReferID,
                        IsMain = c.IsMain,
                        IsReject = c.IsReject,
                        DateFrom = c.FLM_AssetTimeSheet.DateFrom,
                        DateTo = c.FLM_AssetTimeSheet.DateTo,
                        StatusOfAssetTimeSheetID = c.FLM_AssetTimeSheet.StatusOfAssetTimeSheetID,
                        StatusOfAssetTimeSheetName = c.FLM_AssetTimeSheet.SYS_Var.ValueOfVar,
                        ReasonID = c.ReasonID > 0 ? c.ReasonID.Value : -1,
                        ReasonCode = string.Empty,
                        ReasonName = c.ReasonID > 0 ? c.CAT_Reason.ReasonName : string.Empty,
                        Note = c.Note,
                        LocationFromID = -1,
                        LocationFromAddress = string.Empty,
                        LocationFromCode = string.Empty,
                        LocationFromName = string.Empty,
                        LocationToAddress = string.Empty,
                        LocationToCode = string.Empty,
                        LocationToID = -1,
                        LocationToName = string.Empty
                    }).ToList();

                    var listDI = query.Where(c => c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster).Select(c => c.MasterID).ToList();

                    var listDIData = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && listDI.Contains(c.ID)).Select(c => new
                        {
                            MasterID = c.ID,
                            MasterCode = c.Code,
                            LocationFrom = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID != -(int)SYSVarType.TypeOfTOLocationEmpty).OrderBy(d => d.SortOrder).FirstOrDefault(),
                            LocationTo = c.OPS_DITOLocation.Where(d => d.TypeOfTOLocationID != -(int)SYSVarType.TypeOfTOLocationEmpty).OrderByDescending(d => d.SortOrder).FirstOrDefault(),
                        }).ToList();
                    var listCO = query.Where(c => c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster).Select(c => c.MasterID).ToList();

                    var listCOData = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && listDI.Contains(c.ID)).Select(c => new
                    {
                        MasterID = c.ID,
                        MasterCode = c.Code,
                        LocationFrom = c.OPS_COTOLocation.Where(d => d.TypeOfTOLocationID != -(int)SYSVarType.TypeOfTOLocationEmpty).OrderBy(d => d.SortOrder).FirstOrDefault(),
                        LocationTo = c.OPS_COTOLocation.Where(d => d.TypeOfTOLocationID != -(int)SYSVarType.TypeOfTOLocationEmpty).OrderByDescending(d => d.SortOrder).FirstOrDefault(),
                    }).ToList();

                    foreach (var item in query)
                    {
                        switch (item.StatusOfAssetTimeSheetID)
                        {
                            default:
                                break;
                            case -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster:
                                var check = listDIData.FirstOrDefault(c => c.MasterID == item.MasterID);
                                if (check != null)
                                {
                                    item.MasterCode = check.MasterCode;
                                    item.LocationFromID = check.LocationFrom != null ? check.LocationFrom.LocationID.Value : -1;
                                    item.LocationFromCode = check.LocationFrom != null ? check.LocationFrom.CAT_Location.Code : string.Empty;
                                    item.LocationFromName = check.LocationFrom != null ? check.LocationFrom.CAT_Location.Location : string.Empty;
                                    item.LocationFromAddress = check.LocationFrom != null ? check.LocationFrom.CAT_Location.Address : string.Empty;
                                    item.LocationToID = check.LocationTo != null ? check.LocationTo.LocationID.Value : -1;
                                    item.LocationToCode = check.LocationTo != null ? check.LocationTo.CAT_Location.Code : string.Empty;
                                    item.LocationToName = check.LocationTo != null ? check.LocationTo.CAT_Location.Location : string.Empty;
                                    item.LocationToAddress = check.LocationTo != null ? check.LocationTo.CAT_Location.Address : string.Empty;
                                    result.Add(item);
                                }
                                break;
                            case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster:
                                var checkCO = listCOData.FirstOrDefault(c => c.MasterID == item.MasterID);
                                if (checkCO != null)
                                {
                                    item.MasterCode = checkCO.MasterCode;
                                    item.LocationFromID = checkCO.LocationFrom != null ? checkCO.LocationFrom.LocationID.Value : -1;
                                    item.LocationFromCode = checkCO.LocationFrom != null ? checkCO.LocationFrom.CAT_Location.Code : string.Empty;
                                    item.LocationFromName = checkCO.LocationFrom != null ? checkCO.LocationFrom.CAT_Location.Location : string.Empty;
                                    item.LocationFromAddress = checkCO.LocationFrom != null ? checkCO.LocationFrom.CAT_Location.Address : string.Empty;
                                    item.LocationToID = checkCO.LocationTo != null ? checkCO.LocationTo.LocationID.Value : -1;
                                    item.LocationToCode = checkCO.LocationTo != null ? checkCO.LocationTo.CAT_Location.Code : string.Empty;
                                    item.LocationToName = checkCO.LocationTo != null ? checkCO.LocationTo.CAT_Location.Location : string.Empty;
                                    item.LocationToAddress = checkCO.LocationTo != null ? checkCO.LocationTo.CAT_Location.Address : string.Empty;
                                    result.Add(item);
                                }
                                break;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //REPOwnerMaintenance
        public List<DTOREPOwnerMaintenance> REPOwner_Maintenance_Detail(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<DTOREPOwnerMaintenance>();
                using (var model = new DataEntities())
                {
                    dtfrom = dtfrom.Date;
                    dtto = dtto.AddDays(1).Date;

                    result = model.FLM_AssetTimeSheet.Where(c => (c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetMaintence
                    || c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetRegistry) && c.DateFrom >= dtfrom && c.DateFrom < dtto).Select(c => new DTOREPOwnerMaintenance
                    {
                        VehicleCode = c.FLM_Asset.CAT_Vehicle.RegNo,
                        DriverName = c.FLM_Asset.CAT_Vehicle.FLM_Driver != null ?
                            c.FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.FirstName : "",
                        StatusName = c.SYS_Var.ValueOfVar,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        DateFromActual = c.DateFromActual,
                        DateToActual = c.DateToActual,
                        Note = c.Note,
                        TypeOfAsset = c.SYS_Var1.ValueOfVar,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Thiết bị
        public List<DTOREPOwner_Asset> REPOwner_Asset(int typeOfAssetID)
        {
            try
            {
                var result = new List<DTOREPOwner_Asset>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == typeOfAssetID).Select(c => new DTOREPOwner_Asset
                    {
                        ID = c.ID,
                        SYSCustomerID = c.SYSCustomerID,
                        VehicleID = c.VehicleID,
                        RomoocID = c.RomoocID,
                        ContainerID = c.ContainerID,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        TypeOfAssetID = c.TypeOfAssetID,
                        TypeOfAssetName = c.TypeOfAssetID > 0 ? c.SYS_Var.ValueOfVar : "",
                        Code = c.Code,
                        Name = c.Name,
                        GroupOfEquipmentID = c.GroupOfEquipmentID,
                        GroupOfEquipmentName = c.GroupOfEquipmentID > 0 ? c.CAT_GroupOfEquipment.GroupName : "",
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        IsDisposal = c.IsDisposal,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        RemainValue = c.RemainValue,
                        TotalKMScore = c.TotalKMScore,

                        RegNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : c.RomoocID > 0 ? c.CAT_Romooc.RegNo : c.ContainerID > 0 ? c.CAT_Container.ContainerNo : "",
                        MaxWeight = c.VehicleID > 0 ? c.CAT_Vehicle.MaxWeight : c.RomoocID > 0 ? c.CAT_Romooc.MaxWeight : null,
                        MaxCapacity = c.VehicleID > 0 ? c.CAT_Vehicle.MaxCapacity : null,
                        MinCapacity = c.VehicleID > 0 ? c.CAT_Vehicle.MinCapacity : null,
                        RegWeight = c.VehicleID > 0 ? c.CAT_Vehicle.RegWeight : null,
                        RegCapacity = c.VehicleID > 0 ? c.CAT_Vehicle.RegCapacity : c.RomoocID > 0 ? c.CAT_Romooc.RegCapacity : null,
                        MaxWeightCal = c.VehicleID > 0 ? c.CAT_Vehicle.MaxWeightCal : null,
                        TempMin = c.VehicleID > 0 ? c.CAT_Vehicle.TempMin : null,
                        TempMax = c.VehicleID > 0 ? c.CAT_Vehicle.TempMax : null,
                        EmptyWeight = c.VehicleID > 0 ? c.CAT_Vehicle.EmptyWeight : null,
                        GPSCode = c.VehicleID > 0 ? c.CAT_Vehicle.GPSCode : "",
                        MinWeight = c.VehicleID > 0 ? c.CAT_Vehicle.MinWeight : null,
                        NoOfDelivery = c.RomoocID > 0 ? c.CAT_Romooc.NoOfDelivery : null,
                        IsFloor = c.RomoocID > 0 ? c.CAT_Romooc.IsFloor : null,
                        HasContainer = c.RomoocID > 0 ? c.CAT_Romooc.HasContainer : false,

                        Lat = c.VehicleID > 0 ? c.CAT_Vehicle.Lat : c.RomoocID > 0 ? c.CAT_Romooc.Lat : null,
                        Lng = c.VehicleID >0 ?c.CAT_Vehicle.Lng : c.RomoocID > 0 ? c.CAT_Romooc.Lng : null,
                        LocationCode = c.VehicleID > 0 && c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Code : c.RomoocID > 0 && c.CAT_Romooc.LocationID > 0 ? c.CAT_Romooc.CAT_Location.Code : "",
                        LocationAddress = c.VehicleID > 0 && c.CAT_Vehicle.LocationID > 0 ?c.CAT_Vehicle.CAT_Location.Address : c.RomoocID > 0 && c.CAT_Romooc.LocationID > 0 ? c.CAT_Romooc.CAT_Location.Address : "",
                        LocationDistrictName = c.VehicleID > 0 && c.CAT_Vehicle.CAT_Location.DistrictID > 0 ? c.CAT_Vehicle.CAT_Location.CAT_District.DistrictName : c.RomoocID > 0 && c.CAT_Romooc.CAT_Location.DistrictID > 0 ? c.CAT_Romooc.CAT_Location.CAT_District.DistrictName : "",
                        LocationProvinceName = c.VehicleID > 0 && c.CAT_Vehicle.CAT_Location.ProvinceID > 0 ? c.CAT_Vehicle.CAT_Location.CAT_Province.ProvinceName : c.RomoocID > 0 && c.CAT_Romooc.CAT_Location.ProvinceID > 0 ? c.CAT_Romooc.CAT_Location.CAT_Province.ProvinceName : "",
                    }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Định mức xe
        public DTOREPOwner_Quota REPOwner_AssetQuota(int typeOfAssetID)
        {
            try
            {
                var result = new DTOREPOwner_Quota();
                result.ListAsset = new List<DTOREPOwner_Quota_Asset>();
                result.ListQuota = new List<DTOREPOwner_Quota_Material>();
                using (var model = new DataEntities())
                {
                    result.ListAsset = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == typeOfAssetID).Select(c => new DTOREPOwner_Quota_Asset
                    {
                        ID = c.ID,
                        RegNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : "",
                        TypeOfAssetName = c.TypeOfAssetID > 0 ? c.SYS_Var.ValueOfVar : "",
                        VehicleID = c.VehicleID,
                    }).ToList();

                    result.ListQuota = model.FLM_MaterialQuota.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.TypeOfAssetID == typeOfAssetID).Select(c => new DTOREPOwner_Quota_Material
                    {
                        AssetID = c.VehicleID,
                        MaterialID = c.MaterialID,
                        MaterialCode = c.FLM_Material.Code,
                        QuantityPerKM = c.QuantityPerKM,
                        KMCurrent = c.KMCurrent,
                        KMStart = c.KMStart,
                        KMWarning = c.KMWarning,
                        IsWarning = c.IsWarning
                    }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }



        #endregion

        #region CUSSettingsReport
        public List<CUSSettingsReport> CUSSettingsReport_List(int referid)
        {
            try
            {
                List<CUSSettingsReport> result = new List<CUSSettingsReport>();
                using (var model = new DataEntities())
                {
                    result = HelperCUSSetting.CUSSettingsReport_List(model, Account, referid);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CUSSettingsReport_Save(CUSSettingsReport item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CUSSettingsReport_Delete(List<int> lst)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    HelperCUSSetting.CUSSettingsReport_Delete(model, Account, lst);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_CustomerNotInList(List<CUSSettingsReport_Customer> lstCus, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var notIds = lstCus.Select(c => c.CustomerID);
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && !notIds.Contains(c.ID)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = c.CAT_Ward.WardName,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        TelNo = c.TelNo,
                        Fax = c.Fax,
                        Email = c.Email,
                        BillingName = c.BillingName,
                        BillingAddress = c.BillingAddress,
                        TaxCode = c.TaxCode,
                        Note = c.Note,
                        BiddingID = c.BiddingID,
                        TypeOfCustomerID = c.TypeOfCustomerID,
                        ParentID = c.ParentID,
                        IsFinance = c.IsFinance,
                        TypeBusiness = c.TypeBusiness,
                        Scale = c.Scale,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        IsApproved = c.IsApproved,
                        Field = c.Field,
                        BiddingCode = c.BiddingCode,
                        Image = c.Image,
                        IsSystem = c.IsSystem
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSCustomer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_CustomerNotInSave(CUSSettingsReport item, List<int> lstCusId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_Customer> lstCus = model.CUS_Customer.Where(c => !c.IsSystem && lstCusId.Contains(c.ID)).Select(c => new CUSSettingsReport_Customer
                    {
                        CustomerID = c.ID,
                        CustomerCode = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    if (item.ListCustomer == null)
                    {
                        item.ListCustomer = new List<CUSSettingsReport_Customer>();
                    }
                    foreach (var cus in lstCus)
                    {
                        item.ListCustomer.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_CustomerDeleteList(CUSSettingsReport item, List<int> lstCusId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstCusId)
                    {
                        var obj = item.ListCustomer.FirstOrDefault(c => c.CustomerID == id);
                        if (obj != null)
                        {
                            item.ListCustomer.Remove(obj);
                            if (item.ListGroupProduct != null)
                                item.ListGroupProduct.RemoveAll(c => c.CustomerID == id);
                        }

                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_GroupOfProductNotInList(List<CUSSettingsReport_Customer> lstCus, List<CUSSettingsReport_GroupProduct> lstGOP, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var notIds = lstGOP.Select(c => c.GroupProductID);
                    var hasIds = lstCus.Select(c => c.CustomerID);
                    var query = model.CUS_GroupOfProduct.Where(c => !notIds.Contains(c.ID) && hasIds.Contains(c.CustomerID)).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        CustomerID = c.CustomerID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_GroupOfProductNotInSave(CUSSettingsReport item, List<int> lstGOPId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_GroupProduct> lstGOP = model.CUS_GroupOfProduct.Where(c => lstGOPId.Contains(c.ID)).Select(c => new CUSSettingsReport_GroupProduct
                    {
                        GroupProductID = c.ID,
                        GroupProductCode = c.Code,
                        GroupProductName = c.GroupName,
                        CustomerID = c.CustomerID
                    }).ToList();
                    if (item.ListGroupProduct == null)
                    {
                        item.ListGroupProduct = new List<CUSSettingsReport_GroupProduct>();
                    }
                    foreach (var cus in lstGOP)
                    {
                        item.ListGroupProduct.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_GroupOfProductDeleteList(CUSSettingsReport item, List<int> lstGOPId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstGOPId)
                    {
                        var obj = item.ListGroupProduct.FirstOrDefault(c => c.GroupProductID == id);
                        if (obj != null)
                            item.ListGroupProduct.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_StockNotInList(List<CUSSettingsReport_Customer> lstCus, List<CUSSettingsReport_Stock> lstStock, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var notIds = lstStock.Select(c => c.StockID);
                    var hasIds = lstCus.Select(c => c.CustomerID);
                    var query = model.CUS_Location.Where(c => !notIds.Contains(c.ID) && hasIds.Contains(c.CustomerID) && c.CusPartID == null).Select(c => new DTOCUSStock
                    {
                        LocationName = c.LocationName,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        Address = c.CAT_Location.Address,
                        Code = c.Code,
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSStock>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_StockNotInSave(CUSSettingsReport item, List<int> lstStockId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_Stock> lstStock = model.CUS_Location.Where(c => lstStockId.Contains(c.ID)).Select(c => new CUSSettingsReport_Stock
                    {
                        StockID = c.ID,
                        StockCode = c.Code,
                        StockLocationName = c.LocationName,
                        CustomerID = c.CustomerID,
                        StockCountryName = c.CAT_Location.CAT_Country.CountryName,
                        StockProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        StockDistrictName = c.CAT_Location.CAT_District.DistrictName,
                    }).ToList();
                    if (item.ListStock == null)
                    {
                        item.ListStock = new List<CUSSettingsReport_Stock>();
                    }
                    foreach (var cus in lstStock)
                    {
                        item.ListStock.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_StockDeleteList(CUSSettingsReport item, List<int> lstStockId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstStockId)
                    {
                        var obj = item.ListStock.FirstOrDefault(c => c.StockID == id);
                        if (obj != null)
                            item.ListStock.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_ProvinceNotInList(List<CUSSettingsReport_Province> lstProvince, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var notIds = lstProvince.Select(c => c.ProvinceID);
                    var query = model.CAT_Province.Where(c => !notIds.Contains(c.ID)).Select(c => new CATProvince
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ProvinceName = c.ProvinceName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_ProvinceNotInSave(CUSSettingsReport item, List<int> lstProvinceID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_Province> LstProvince = model.CAT_Province.Where(c => lstProvinceID.Contains(c.ID)).Select(c => new CUSSettingsReport_Province
                    {
                        ProvinceCode = c.Code,
                        ProvinceID = c.ID,
                        ProvinceName = c.ProvinceName,
                    }).ToList();
                    if (item.ListProvince == null)
                    {
                        item.ListProvince = new List<CUSSettingsReport_Province>();
                    }
                    foreach (var cus in LstProvince)
                    {
                        item.ListProvince.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_ProvinceDeleteList(CUSSettingsReport item, List<int> lstProvinceID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstProvinceID)
                    {
                        var obj = item.ListProvince.FirstOrDefault(c => c.ProvinceID == id);
                        if (obj != null)
                            item.ListProvince.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_GroupOfLocationNotInList(List<CUSSettingsReport_GroupOfLocation> lstGroupOfLocation, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var notIds = lstGroupOfLocation.Select(c => c.GroupOfLocationID);
                    var query = model.CAT_GroupOfLocation.Where(c => !notIds.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        
        public CUSSettingsReport CUSSettingReport_GroupOfLocationNotInSave(CUSSettingsReport item, List<int> lstGroupOfLocationID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_GroupOfLocation> LstGroupOfLocation = model.CAT_GroupOfLocation.Where(c => lstGroupOfLocationID.Contains(c.ID)).Select(c => new CUSSettingsReport_GroupOfLocation
                    {
                        GroupOfLocationID = c.ID,
                        GroupOfLocationCode = c.Code,
                        GroupOfLocationName = c.GroupName,
                    }).ToList();
                    if (item.ListGroupOfLocation == null)
                    {
                        item.ListGroupOfLocation = new List<CUSSettingsReport_GroupOfLocation>();
                    }
                    foreach (var cus in LstGroupOfLocation)
                    {
                        item.ListGroupOfLocation.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_GroupOfLocationDeleteList(CUSSettingsReport item, List<int> lstGroupOfLocationID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstGroupOfLocationID)
                    {
                        var obj = item.ListGroupOfLocation.FirstOrDefault(c => c.GroupOfLocationID == id);
                        if (obj != null)
                            item.ListGroupOfLocation.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_GroupOfPartnerNotInList(List<CUSSettingsReport_GroupOfPartner> lstGroupOfPartner, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var notIds = lstGroupOfPartner.Select(c => c.GroupOfPartnerID);
                    var query = model.CAT_GroupOfPartner.Where(c => !notIds.Contains(c.ID)).Select(c => new CATGroupOfPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        
        public CUSSettingsReport CUSSettingReport_GroupOfPartnerNotInSave(CUSSettingsReport item, List<int> lstGroupOfPartnerID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_GroupOfPartner> LstGroupOfPartner = model.CAT_GroupOfPartner.Where(c => lstGroupOfPartnerID.Contains(c.ID)).Select(c => new CUSSettingsReport_GroupOfPartner
                    {
                       GroupOfPartnerID=c.ID,
                       GroupOfPartnerCode=c.Code,
                       GroupOfPartnerName=c.GroupName,

                    }).ToList();
                    if (item.ListGroupOfPartner == null)
                    {
                        item.ListGroupOfPartner = new List<CUSSettingsReport_GroupOfPartner>();
                    }
                    foreach (var cus in LstGroupOfPartner)
                    {
                        item.ListGroupOfPartner.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_GroupOfPartnerDeleteList(CUSSettingsReport item, List<int> lstGroupOfPartnerID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstGroupOfPartnerID)
                    {
                        var obj = item.ListGroupOfPartner.FirstOrDefault(c => c.GroupOfPartnerID == id);
                        if (obj != null)
                            item.ListGroupOfPartner.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_ServiceOfOrderNotInList(List<CUSSettingsReport_ServiceOfOrder> lstServiceOfOrder, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var notIds = lstServiceOfOrder.Select(c => c.ServiceOfOrderID);
                    var query = model.CAT_ServiceOfOrder.Where(c => !notIds.Contains(c.ID)).Select(c => new CATServiceOfOrder
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATServiceOfOrder>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_ServiceOfOrderNotInSave(CUSSettingsReport item, List<int> lstServiceOfOrderID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_ServiceOfOrder> LstServiceOfOrder = model.CAT_ServiceOfOrder.Where(c => lstServiceOfOrderID.Contains(c.ID)).Select(c => new CUSSettingsReport_ServiceOfOrder
                    {
                        ServiceOfOrderID = c.ID,
                        ServiceOfOrderCode = c.Code,
                        ServiceOfOrderName = c.Name,
                        SYSServiceOfOrderName = c.SYS_Var.ValueOfVar

                    }).ToList();
                    if (item.ListServiceOfOrder == null)
                    {
                        item.ListServiceOfOrder = new List<CUSSettingsReport_ServiceOfOrder>();
                    }
                    foreach (var cus in LstServiceOfOrder)
                    {
                        item.ListServiceOfOrder.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_ServiceOfOrderDeleteList(CUSSettingsReport item, List<int> lstServiceOfOrderID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstServiceOfOrderID)
                    {
                        var obj = item.ListServiceOfOrder.FirstOrDefault(c => c.ServiceOfOrderID == id);
                        if (obj != null)
                            item.ListServiceOfOrder.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_OrderRoutingNotInList(List<CUSSettingsReport_Customer> lstCus, List<CUSSettingsReport_Routing> lstOrderRouting, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstCurrentID = lstOrderRouting.Select(c => c.RoutingID).Distinct().ToList();
                    var lstCusID = lstCus.Select(c => c.CustomerID).Distinct().ToList();
                    var lstCustomerID = model.CUS_Customer.Where(c => c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS && lstCusID.Contains(c.ID)).Select(c => c.ID).ToList();
                    var query = model.CUS_Routing.Where(c => !lstCurrentID.Contains(c.RoutingID) && lstCustomerID.Contains(c.CustomerID) && !string.IsNullOrEmpty(c.Code)).Select(c => new CUSSettingsReport_Routing
                    {
                        RoutingID = c.RoutingID,
                        RoutingCode = c.Code,
                        RoutingName = c.RoutingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSSettingsReport_Routing>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_OrderRoutingNotInSave(CUSSettingsReport item, List<int> lstOrderRoutingID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_Routing> lstRouting = model.CAT_Routing.Where(c => lstOrderRoutingID.Contains(c.ID)).Select(c => new CUSSettingsReport_Routing
                    {
                        RoutingID = c.ID,
                        RoutingCode = c.Code,
                        RoutingName = c.RoutingName,
                    }).ToList();
                    if (item.ListOrderRouting == null)
                    {
                        item.ListOrderRouting = new List<CUSSettingsReport_Routing>();
                    }
                    foreach (var cus in lstRouting)
                    {
                        item.ListOrderRouting.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_OrderRoutingDeleteList(CUSSettingsReport item, List<int> lstOrderRoutingID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstOrderRoutingID)
                    {
                        var obj = item.ListOrderRouting.FirstOrDefault(c => c.RoutingID == id);
                        if (obj != null)
                            item.ListOrderRouting.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_OPSRoutingNotInList(List<CUSSettingsReport_Customer> lstCus, List<CUSSettingsReport_Routing> lstOPSRouting, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstCurrentID = lstOPSRouting.Select(c => c.RoutingID).Distinct().ToList();
                    var lstCusID = lstCus.Select(c => c.CustomerID).Distinct().ToList();
                    var lstCustomerID = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && lstCusID.Contains(c.ID)).Select(c => c.ID).ToList();
                    var query = model.CUS_Routing.Where(c => !lstCurrentID.Contains(c.RoutingID) && lstCustomerID.Contains(c.CustomerID) && !string.IsNullOrEmpty(c.Code)).Select(c => new CUSSettingsReport_Routing
                    {
                        RoutingID = c.RoutingID,
                        RoutingCode = c.Code,
                        RoutingName = c.RoutingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSSettingsReport_Routing>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_OPSRoutingNotInSave(CUSSettingsReport item, List<int> lstOPSRoutingID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_Routing> lstRouting = model.CAT_Routing.Where(c => lstOPSRoutingID.Contains(c.ID)).Select(c => new CUSSettingsReport_Routing
                    {
                        RoutingID = c.ID,
                        RoutingCode = c.Code,
                        RoutingName = c.RoutingName,
                    }).ToList();
                    if (item.ListOPSRouting == null)
                    {
                        item.ListOPSRouting = new List<CUSSettingsReport_Routing>();
                    }
                    foreach (var cus in lstRouting)
                    {
                        item.ListOPSRouting.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_OPSRoutingDeleteList(CUSSettingsReport item, List<int> lstOPSRoutingID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstOPSRoutingID)
                    {
                        var obj = item.ListOPSRouting.FirstOrDefault(c => c.RoutingID == id);
                        if (obj != null)
                            item.ListOPSRouting.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOResult CUSSettingReport_PartnerNotInList(List<CUSSettingsReport_Customer> lstCus, List<CUSSettingsReport_Partner> lstPartner, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstCurrentID = lstPartner.Select(c => c.PartnerID).Distinct().ToList();
                    var lstCusID = lstCus.Select(c => c.CustomerID).Distinct().ToList();
                    var lstCustomerID = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && lstCusID.Contains(c.ID)).Select(c => c.ID).ToList();
                    var query = model.CUS_Partner.Where(c => !lstCurrentID.Contains(c.ID) && lstCustomerID.Contains(c.CustomerID)).Select(c => new CUSSettingsReport_Partner
                    {
                        PartnerID = c.ID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerAddress = c.CAT_Partner.Address,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSSettingsReport_Partner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_PartnerNotInSave(CUSSettingsReport item, List<int> lstPartnerID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_Partner> lstPartner = model.CUS_Partner.Where(c => lstPartnerID.Contains(c.ID)).Select(c => new CUSSettingsReport_Partner
                    {
                        PartnerID = c.ID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerAddress = c.CAT_Partner.Address,
                    }).ToList();
                    if (item.ListPartner == null)
                    {
                        item.ListPartner = new List<CUSSettingsReport_Partner>();
                    }
                    foreach (var cus in lstPartner)
                    {
                        item.ListPartner.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingReport_PartnerDeleteList(CUSSettingsReport item, List<int> lstPartnerID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstPartnerID)
                    {
                        var obj = item.ListPartner.FirstOrDefault(c => c.PartnerID == id);
                        if (obj != null)
                            item.ListPartner.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsReport_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region CUSSettingsPlan
        public List<CUSSettingsReport> CUSSettingsPlan_List(int referid)
        {
            try
            {
                List<CUSSettingsReport> result = new List<CUSSettingsReport>();
                using (var model = new DataEntities())
                {
                    result = HelperCUSSetting.CUSSettingsPlan_List(model, Account, referid);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CUSSettingsPlan_Save(CUSSettingsReport item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    HelperCUSSetting.CUSSettingsPlan_Save(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CUSSettingsPlan_Delete(List<int> lst)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    HelperCUSSetting.CUSSettingsPlan_Delete(model, Account, lst);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult CUSSettingPlan_CustomerNotInList(List<CUSSettingsReport_Customer> lstCus, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var notIds = lstCus.Select(c => c.CustomerID);
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && !notIds.Contains(c.ID)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = c.CAT_Ward.WardName,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        TelNo = c.TelNo,
                        Fax = c.Fax,
                        Email = c.Email,
                        BillingName = c.BillingName,
                        BillingAddress = c.BillingAddress,
                        TaxCode = c.TaxCode,
                        Note = c.Note,
                        BiddingID = c.BiddingID,
                        TypeOfCustomerID = c.TypeOfCustomerID,
                        ParentID = c.ParentID,
                        IsFinance = c.IsFinance,
                        TypeBusiness = c.TypeBusiness,
                        Scale = c.Scale,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        IsApproved = c.IsApproved,
                        Field = c.Field,
                        BiddingCode = c.BiddingCode,
                        Image = c.Image,
                        IsSystem = c.IsSystem
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSCustomer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingPlan_CustomerNotInSave(CUSSettingsReport item, List<int> lstCusId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_Customer> lstCus = model.CUS_Customer.Where(c => !c.IsSystem && lstCusId.Contains(c.ID)).Select(c => new CUSSettingsReport_Customer
                    {
                        CustomerID = c.ID,
                        CustomerCode = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    if (item.ListCustomer == null)
                    {
                        item.ListCustomer = new List<CUSSettingsReport_Customer>();
                    }
                    foreach (var cus in lstCus)
                    {
                        item.ListCustomer.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsPlan_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingPlan_CustomerDeleteList(CUSSettingsReport item, List<int> lstCusId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstCusId)
                    {
                        var obj = item.ListCustomer.FirstOrDefault(c => c.CustomerID == id);
                        if (obj != null)
                        {
                            item.ListCustomer.Remove(obj);
                            if (item.ListGroupProduct != null)
                                item.ListGroupProduct.RemoveAll(c => c.CustomerID == id);
                        }

                    }
                    HelperCUSSetting.CUSSettingsPlan_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult CUSSettingPlan_GroupOfProductNotInList(List<CUSSettingsReport_Customer> lstCus, List<CUSSettingsReport_GroupProduct> lstGOP, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var notIds = lstGOP.Select(c => c.GroupProductID);
                    var hasIds = lstCus.Select(c => c.CustomerID);
                    var query = model.CUS_GroupOfProduct.Where(c => !notIds.Contains(c.ID) && hasIds.Contains(c.CustomerID)).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        CustomerID = c.CustomerID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingPlan_GroupOfProductNotInSave(CUSSettingsReport item, List<int> lstGOPId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    List<CUSSettingsReport_GroupProduct> lstGOP = model.CUS_GroupOfProduct.Where(c => lstGOPId.Contains(c.ID)).Select(c => new CUSSettingsReport_GroupProduct
                    {
                        GroupProductID = c.ID,
                        GroupProductCode = c.Code,
                        GroupProductName = c.GroupName,
                        CustomerID = c.CustomerID
                    }).ToList();
                    if (item.ListGroupProduct == null)
                    {
                        item.ListGroupProduct = new List<CUSSettingsReport_GroupProduct>();
                    }
                    foreach (var cus in lstGOP)
                    {
                        item.ListGroupProduct.Add(cus);
                    }
                    HelperCUSSetting.CUSSettingsPlan_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CUSSettingsReport CUSSettingPlan_GroupOfProductDeleteList(CUSSettingsReport item, List<int> lstGOPId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    foreach (var id in lstGOPId)
                    {
                        var obj = item.ListGroupProduct.FirstOrDefault(c => c.GroupProductID == id);
                        if (obj != null)
                            item.ListGroupProduct.Remove(obj);
                    }
                    HelperCUSSetting.CUSSettingsPlan_Save(model, Account, item);
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region telerik reporting

        #region rpDriverScheduleFee(luong tài xế)
        public List<DTOReportDriverSchedule> REPDriverScheduleFee_Data(List<int> lstDriverID, int month, int year)
        {
            try
            {
                List<DTOReportDriverSchedule> result = new List<DTOReportDriverSchedule>();
                using (var model = new DataEntities())
                {
                    int iNormal = -(int)SYSVarType.TypeScheduleDateOn;
                    int iOff = -(int)SYSVarType.TypeScheduleDateOff;
                    int iHoliday = -(int)SYSVarType.TypeScheduleDateHoliday;

                    result = model.FLM_Driver.Where(c => lstDriverID.Contains(c.ID)).Select(c => new DTOReportDriverSchedule
                        {
                            ID = c.ID,
                            FirstName = c.CAT_Driver.FirstName,
                            LastName = c.CAT_Driver.LastName,
                            DateJoin = c.DateStart,
                            FeeBase = c.FeeBase,
                            DayAllowOff = c.DaysAllowOff,
                        }).ToList();
                    //find scheduler
                    var schedule = model.FLM_Schedule.FirstOrDefault(c => c.Month == month && c.Year == year);
                    if (schedule == null)
                    {
                        foreach (var item in result)
                        {
                            item.ListDetailDate = new List<DTOReportFLMScheduleDate>();
                            item.ListDetailMaster = new List<DTOReportFLMScheduleFeeMaster>();
                        }
                    }
                    else
                    {
                        var listDate = model.FLM_ScheduleDate.Where(c => c.ScheduleID == schedule.ID).ToList();
                        var lisDateID = listDate != null ? listDate.Select(c => c.ID).ToList() : new List<int>();
                        var listDateDetail = model.FLM_ScheduleDateDetail.Where(c => lstDriverID.Contains(c.DriverID) && lisDateID.Contains(c.ScheduleDateID)).ToList();
                        List<DTOREPOwner_DriverSalary> listMasterFee = REPOwner_DriverSalary(schedule.ID, lstDriverID);
                        foreach (var item in result)
                        {
                            item.DateStart = schedule.DateFrom;
                            item.DateEnd = schedule.DateTo;

                            item.DateOn = new TypeDateSumary();

                            item.DateOn.TypeDate = 1;
                            item.DateOn.Total = listDateDetail.Where(c => c.DriverID == item.ID && c.FLM_ScheduleDate.TypeScheduleDateID == iNormal).Count();

                            item.DateOT = new TypeDateSumary();
                            item.DateOT.TypeDate = 2;
                            item.DateOT.Total = listDateDetail.Where(c => c.DriverID == item.ID && c.FLM_ScheduleDate.TypeScheduleDateID == iOff).Count();

                            item.DateOTHoliday = new TypeDateSumary();
                            item.DateOTHoliday.TypeDate = 3;
                            item.DateOTHoliday.Total = listDateDetail.Where(c => c.DriverID == item.ID && c.FLM_ScheduleDate.TypeScheduleDateID == iHoliday).Count();

                            item.ListDetailDate = new List<DTOReportFLMScheduleDate>();
                            var list = listDateDetail.Where(c => c.DriverID == item.ID).Select(c => new DTOReportFLMScheduleDate
                            {
                                ID = c.ID,
                                Date = c.FLM_ScheduleDate.Date,
                                DateNote = c.FLM_ScheduleDate.TypeScheduleDateID == iHoliday ? "Tăng ca lễ" : c.FLM_ScheduleDate.TypeScheduleDateID == iOff ? "Tăng ca" : string.Empty,
                            }).ToList();
                            item.ListDetailDate.AddRange(list);

                            item.ListDetailMaster = new List<DTOReportFLMScheduleFeeMaster>();
                            item.TotalFeeDay = 0;
                            item.TotalFeeDetail = 0;
                            item.TotalFeeOther = 0;

                            var MasterFee = listMasterFee.FirstOrDefault(c => c.DriverID == item.ID);
                            if (MasterFee != null)
                            {
                                item.TotalFeeDay = MasterFee.FeeDay;
                                item.TotalFeeDetail = MasterFee.FeeDetail;
                                item.TotalFeeOther = MasterFee.FeeOther;

                                item.ListDetailMaster = MasterFee.ListDetail.Select(c => new DTOReportFLMScheduleFeeMaster
                                    {
                                        ID = 1,
                                        Date = c.Date,
                                        Amount = c.Debit,
                                        RegNo = c.VehicleCode,
                                        SortOrder = c.MasterSort,
                                        Note = c.Note
                                    }).ToList();

                            }

                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region rpWorkOrder_Fuel
        public List<DTOReportWorkOrderFuel> REPWorkOrderFuel_Data(List<int> lstReceiptID)
        {
            try
            {
                List<DTOReportWorkOrderFuel> result = new List<DTOReportWorkOrderFuel>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Receipt.Where(c => lstReceiptID.Contains(c.ID)).Select(c => new DTOReportWorkOrderFuel
                    {
                        ReceiptID = c.ID,
                        ReceiptNo = c.Code,
                        KMStart = c.FLM_ReceiptCost.FirstOrDefault().KMStart,
                        KMEnd = c.FLM_ReceiptCost.FirstOrDefault().KMEnd,
                        RegNo = c.FLM_ReceiptCost.FirstOrDefault().FLM_Asset.CAT_Vehicle.RegNo,
                        DateReceipt = c.DateReceipt,
                        Note = c.Note,
                        SupplierName = c.SupplierID > 0 ? c.FLM_Supplier.SupplierName : string.Empty,
                        DriverName = c.FLM_ReceiptCost.FirstOrDefault().FLM_Asset.CAT_Vehicle.DriverID > 0 ? c.FLM_ReceiptCost.FirstOrDefault().FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_ReceiptCost.FirstOrDefault().FLM_Asset.CAT_Vehicle.FLM_Driver.CAT_Driver.FirstName : string.Empty,
                    }).ToList();

                    var listDetail = model.FLM_ReceiptDetail.Where(c => lstReceiptID.Contains(c.FLM_ReceiptCost.ReceiptID) && c.MaterialID > 0).Select(c => new
                        {
                            ID = c.ID,
                            ReceiptID = c.FLM_ReceiptCost.ReceiptID,
                            MaterialID = c.MaterialID,
                            MaterialCode = c.FLM_Material.Code,
                            MaterialName = c.FLM_Material.MaterialName,
                            PackingName = string.Empty,
                            Quantity = c.Quantity,
                            Price = c.Price,
                            Amount = c.Amount
                        }).ToList();

                    foreach (var item in result)
                    {
                        item.ListMaterial = new List<DTOReportWorkOrderFuelDetail>();
                        item.ListMaterial = listDetail.Where(c => c.ReceiptID == item.ReceiptID).Select(c => new DTOReportWorkOrderFuelDetail
                            {
                                MaterialID = c.MaterialID.Value,
                                MaterialCode = c.MaterialCode,
                                MaterialName = c.MaterialName,
                                Quantity = c.Quantity,
                                UnitPirce = c.Price,
                                Amount = c.Amount,
                                PackingName = c.PackingName
                            }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region rpOPSSotrans
        public List<DTOReportOPSSotrans> REPOPSSotrans_Data(int masterID)
        {
            try
            {
                List<DTOReportOPSSotrans> result = new List<DTOReportOPSSotrans>();
                using (var model = new DataEntities())
                {
                    DTOReportOPSSotrans item = new DTOReportOPSSotrans();
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (obj != null)
                    {
                        item.ImageUrl = string.Empty;
                        item.ReceiptNo = obj.Code;
                        item.RegNo = obj.VehicleID > 0 ? obj.CAT_Vehicle.RegNo : string.Empty;
                        item.RomoocNo = obj.RomoocID > 0 ? obj.CAT_Romooc.RegNo : string.Empty;
                        item.DriverName = obj.DriverName1;                        

                        var lstORDContID = obj.OPS_COTOContainer.Select(c => c.OPS_Container.ContainerID).Distinct().ToList();
                        var lstORDCont = model.ORD_Container.Where(c => lstORDContID.Contains(c.ID)).Select(c => new
                        {
                            ID = c.ID,
                            CustomerCode = c.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_Order.CUS_Customer.ShortName,
                            ServiceOfOrderID = c.ORD_Order.ServiceOfOrderID.HasValue ? c.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                            ServiceOfOrderName = c.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            ListGOPName = c.ORD_Order.ORD_GroupProduct.Where(d => d.GroupOfProductID > 0).Select(d => d.CUS_GroupOfProduct.GroupName).ToList(),
                            BillingNo = c.ORD_Order.Code,
                            ContainerNo = c.ContainerNo,
                            TypeContName = c.CAT_Packing.PackingName,
                            SealNo = c.SealNo1,
                            Ton = c.Ton,
                            LocationFrom = c.LocationFromID > 0 ? c.CUS_Location2.Code : string.Empty,
                            LocationTo = c.LocationToID > 0 ? c.CUS_Location3.Code : string.Empty,
                            LocationDepot = c.LocationDepotID > 0 ? c.CUS_Location.Code : string.Empty,
                            LocationDepotReturn = c.LocationDepotReturnID > 0 ? c.CUS_Location1.Code : string.Empty,
                        }).ToList();

                        if (lstORDCont.Count() > 0)
                        {
                            item.GroupProductCode = string.Join("-", lstORDCont.Where(c => !string.IsNullOrEmpty(c.ServiceOfOrderName)).Select(c => c.ServiceOfOrderName).Distinct().ToList());
                            item.ContainerNo = string.Join(",", lstORDCont.Where(c => !string.IsNullOrEmpty(c.ContainerNo)).Select(c => c.ContainerNo).Distinct().ToList());
                            item.TypeContCode = string.Join(",", lstORDCont.Where(c => !string.IsNullOrEmpty(c.TypeContName)).Select(c => c.TypeContName).Distinct().ToList());
                            item.TypeContName = string.Join(",", lstORDCont.Where(c => !string.IsNullOrEmpty(c.TypeContName)).Select(c => c.TypeContName).Distinct().ToList());
                            item.Ton = (decimal)lstORDCont.Sum(c => c.Ton);
                            item.BillingNo = string.Join(",", lstORDCont.Where(c => !string.IsNullOrEmpty(c.BillingNo)).Select(c => c.BillingNo).Distinct().ToList());
                            item.GroupProductName = string.Join(",", lstORDCont.SelectMany(c => c.ListGOPName).Distinct().ToList());
                            item.TotalContainer = lstORDCont.Count();
                            item.ServiceOfOrderCode = string.Join(",", lstORDCont.Where(c => !string.IsNullOrEmpty(c.ServiceOfOrderName)).Select(c => c.ServiceOfOrderName).Distinct().ToList());
                            item.CustomerShortName = string.Join(",", lstORDCont.Where(c => !string.IsNullOrEmpty(c.CustomerShortName)).Select(c => c.CustomerShortName).Distinct().ToList());

                            var objF = lstORDCont.FirstOrDefault();
                            if (objF != null)
                            {
                                switch (objF.ServiceOfOrderID)
                                {
                                    case -(int)SYSVarType.ServiceOfOrderImport:
                                        item.LocationFrom = objF.LocationFrom;
                                        item.LocationTo = objF.LocationTo;
                                        item.LocationReturn = objF.LocationDepotReturn;
                                        break;
                                    case -(int)SYSVarType.ServiceOfOrderExport:
                                        item.LocationFrom = objF.LocationDepot;
                                        item.LocationTo = objF.LocationFrom;
                                        item.LocationReturn = objF.LocationTo;
                                        break;
                                    default:                                        
                                        item.LocationFrom = objF.LocationFrom;
                                        item.LocationReturn = objF.LocationTo;
                                        break;
                                }
                            }
                        }
                        result.Add(item);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Báo cáo khấu hao
        public List<DTOREPOwner_FixedCost> REPOwner_FixedCost_Detail(DateTime dt)
        {
            try
            {
                var result = new List<DTOREPOwner_FixedCost>();
                using (var model = new DataEntities())
                {
                    int month = dt.Month;
                    int year = dt.Year;

                    result = model.FLM_FixedCost.Where(c => c.Month == month && c.Year == year && c.IsClosed && c.FLM_Asset.VehicleID > 0).Select(c => new DTOREPOwner_FixedCost
                    {
                        VehicleID = c.FLM_Asset.VehicleID.Value,
                        VehicleCode = c.FLM_Asset.CAT_Vehicle.RegNo,
                        Month = c.Month,
                        Year = c.Year,
                        Total = c.Value,
                        ReceiptNo = c.ReceiptID > 0 ? c.FLM_Receipt.Code : string.Empty,
                    }).ToList();

                    result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.Year).ThenBy(c => c.Month).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOREPOwner_FixedCost> REPOwner_FixedCost_Vehicle(DateTime dt)
        {
            try
            {
                var result = new List<DTOREPOwner_FixedCost>();
                using (var model = new DataEntities())
                {
                    int month = dt.Month;
                    int year = dt.Year;

                    var query = model.FLM_FixedCost.Where(c => c.Month == month && c.Year == year && c.IsClosed && c.FLM_Asset.VehicleID > 0).Select(c => new
                    {
                        VehicleID = c.FLM_Asset.VehicleID.Value,
                        VehicleCode = c.FLM_Asset.CAT_Vehicle.RegNo,
                        Month = c.Month,
                        Year = c.Year,
                        Total = c.Value,
                    }).ToList();

                    result = query.GroupBy(c => new { c.VehicleID, c.VehicleCode, c.Month, c.Year }).Select(c => new DTOREPOwner_FixedCost
                        {
                            VehicleID = c.Key.VehicleID,
                            VehicleCode = c.Key.VehicleCode,
                            Month = c.Key.Month,
                            Year = c.Key.Year,
                            Total = c.Sum(d => d.Total),
                        }).ToList();

                    result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.Year).ThenBy(c => c.Month).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Báo cáo GPS
        public List<DTOREPOwner_GPS> REPOwner_GPS_Detail(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<DTOREPOwner_GPS>();
                using (var model = new DataEntities())
                {
                    dtfrom = dtfrom.Date;
                    dtto = dtto.AddDays(1).Date;

                    result = model.OPS_DITOLocation.Where(c => c.SortOrderReal > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID && c.OPS_DITOMaster.VehicleID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived && c.LocationID > 0 && c.DateCome >= dtfrom && c.DateCome < dtto).Select(c => new DTOREPOwner_GPS
                        {
                            DITOMasterID = c.DITOMasterID,
                            DITOMasterCode = c.OPS_DITOMaster.Code,
                            DriverName1 = c.OPS_DITOMaster.DriverName1,
                            VehicleID = c.OPS_DITOMaster.VehicleID.Value,
                            VehicleCode = c.OPS_DITOMaster.CAT_Vehicle.RegNo,
                            SortOrderReal = c.SortOrderReal.Value,
                            LocationID = c.LocationID.Value,
                            LocationCode = c.CAT_Location.Code,
                            LocationName = c.CAT_Location.Location,
                            LocationAddress = c.CAT_Location.Address,
                            LocationNote = c.CAT_Location.Note,
                            LocationNote1 = c.CAT_Location.Note1,
                            ETD = c.OPS_DITOMaster.ETD.Value,
                            ETA = c.OPS_DITOMaster.ETA.Value,
                            ATD = c.OPS_DITOMaster.ATD,
                            ATA = c.OPS_DITOMaster.ATA,
                            DateCome = c.DateCome,
                            DateLeave = c.DateLeave,
                            LoadingStart = c.LoadingStart,
                            LoadingEnd = c.LoadingEnd,
                            TotalLocation = c.OPS_DITOMaster.TotalLocation > 0 ? c.OPS_DITOMaster.TotalLocation.Value : 0,
                            TypeOfTOLocationID = c.TypeOfTOLocationID,
                            TotalLocationDelivery = 0,
                            Price = 0
                        }).ToList();

                    result.AddRange(model.OPS_DITOStation.Where(c => c.DITOMasterID > 0 && (c.OPS_DITOMaster.SYSCustomerID == null || c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID) && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived && c.DateCome >= dtfrom && c.DateCome < dtto).Select(c => new DTOREPOwner_GPS
                        {
                            DITOMasterID = c.DITOMasterID,
                            DITOMasterCode = c.OPS_DITOMaster.Code,
                            DriverName1 = c.OPS_DITOMaster.DriverName1,
                            VehicleID = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID.Value : -1,
                            VehicleCode = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            SortOrderReal = -1,
                            LocationID = c.LocationID,
                            LocationCode = c.CAT_Location.Code,
                            LocationName = c.CAT_Location.Location,
                            LocationAddress = c.CAT_Location.Address,
                            LocationNote = c.CAT_Location.Note,
                            LocationNote1 = c.CAT_Location.Note1,
                            ETD = c.OPS_DITOMaster.ETD.Value,
                            ETA = c.OPS_DITOMaster.ETA.Value,
                            ATD = c.OPS_DITOMaster.ATD,
                            ATA = c.OPS_DITOMaster.ATA,
                            DateCome = c.DateCome.HasValue ? c.DateCome.Value : c.CreatedDate,
                            TotalLocation = 1,
                            TypeOfTOLocationID = -1,
                            TotalLocationDelivery = 0,
                            KM = c.KM > 0 ? c.KM.Value : 0,
                            Price = c.Price,
                        }).ToList());

                    var lstMasterID = result.Select(c => c.DITOMasterID).Distinct().ToList();
                    result.AddRange(model.CAT_Trouble.Where(c => c.DITOMasterID > 0 && lstMasterID.Contains(c.DITOMasterID.Value)).Select(c => new DTOREPOwner_GPS
                        {
                            DITOMasterID = c.DITOMasterID.Value,
                            DITOMasterCode = c.OPS_DITOMaster.Code,
                            DriverName1 = c.OPS_DITOMaster.DriverName1,
                            VehicleID = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID.Value : -1,
                            VehicleCode = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            SortOrderReal = -1,
                            LocationID = -1,
                            LocationCode = "",
                            LocationName = "",
                            LocationAddress = "",
                            ETD = c.OPS_DITOMaster.ETD.Value,
                            ETA = c.OPS_DITOMaster.ETA.Value,
                            ATD = c.OPS_DITOMaster.ATD,
                            ATA = c.OPS_DITOMaster.ATA,
                            DateCome = c.CreatedDate,
                            TotalLocation = 1,
                            TypeOfTOLocationID = -1,
                            TotalLocationDelivery = 0,
                            KM = 0,
                            Price = c.Cost,
                            GroupOfTrouble = c.CAT_GroupOfTrouble.Name,
                            TroubleNote = c.Description
                        }).ToList());

                    var lstOPSGroup = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && lstMasterID.Contains(c.DITOMasterID.Value)).Select(c => new
                    {
                        c.DITOMasterID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,
                        LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                    }).ToList();

                    foreach (var item in result)
                    {
                        item.TotalLocationDelivery = result.Count(c => c.DITOMasterID == item.DITOMasterID && (c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery));
                        var lst = lstOPSGroup.Where(c => c.DITOMasterID == item.DITOMasterID && (c.LocationToID == item.LocationID
                            || c.LocationFromID == item.LocationID)).Select(c => new
                            {
                                OrderCode = c.OrderCode,
                                CustomerCode = c.CustomerCode
                            });
                        item.OrderCode = string.Join(",", lst.Select(c => c.OrderCode).Distinct().ToList());
                        item.CustomerCode = string.Join(",", lst.Select(c => c.CustomerCode).Distinct().ToList());
                    }

                    var lstDITO = model.OPS_DITO.Where(c => lstMasterID.Contains(c.DITOMasterID) && c.KM > 0 && c.LocationFromID > 0 && c.LocationToID > 0).Select(c => new
                    {
                        c.LocationFromID,
                        c.LocationToID,
                        c.DITOMasterID,
                        KM = c.KM.Value
                    }).ToList();

                    foreach (var itemDITO in lstDITO)
                    {
                        var item = result.FirstOrDefault(c => c.DITOMasterID == itemDITO.DITOMasterID && c.LocationID == itemDITO.LocationToID);
                        if (item != null)
                            item.KM = itemDITO.KM;
                    }

                    result = result.OrderBy(c => c.VehicleCode).ThenBy(c => c.DITOMasterID).ThenBy(c => c.DateCome).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region REPTotalPriceVendor
        public List<REPTotalPriceVendor> REPTotalPriceVendor_Data(int cusId, List<int> lstVenId, int transportModeID, int typePrice, DateTime effectDate)
        {
            try
            {
                effectDate = effectDate.Date.AddDays(1);
                int iMain = -(int)SYSVarType.TypeOfContractMain;
                DateTime now = DateTime.Now.Date;

                var result = new List<REPTotalPriceVendor>();

                using (var model = new DataEntities())
                {
                    var customer = model.CUS_Customer.Where(c => c.ID == cusId).FirstOrDefault();
                    if (customer == null)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Mã khách hàng không tồn tại");
                    }

                    #region bang gia KH
                    #region get contract
                    CAT_Contract contract = new CAT_Contract();
                    //bang gia thuong
                    if (typePrice == 0)
                    {
                        contract = model.CAT_Contract.Where(c => c.CustomerID == cusId && c.TransportModeID == transportModeID && c.TypeOfContractID == iMain && c.TypeOfRunLevelID == null && (c.ExpiredDate == null || c.ExpiredDate >= now) && c.EffectDate <= effectDate).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    }
                    else if (typePrice == 1)
                    {
                        contract = model.CAT_Contract.Where(c => c.CustomerID == cusId && c.TransportModeID == transportModeID && c.TypeOfContractID == iMain && c.TypeOfRunLevelID != null && (c.ExpiredDate == null || c.ExpiredDate >= now) && c.EffectDate <= effectDate).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    }
                    #endregion
                    if (contract != null)
                    {
                        #region get term
                        var lstTerm = model.CAT_ContractTerm.Where(c => c.ContractID == contract.ID && c.IsAllRouting == false && c.IsClosed == false && c.DateEffect <= effectDate).OrderByDescending(c => c.DateEffect).Select(c => c.ID);
                        #endregion

                        if (lstTerm != null && lstTerm.Count() > 0)
                        {
                            var lstPrice = model.CAT_Price.Where(c => lstTerm.Contains(c.ContractTermID) && c.EffectDate <= effectDate).OrderByDescending(c => c.EffectDate);
                            foreach (var price in lstPrice)
                            {
                                if (price != null)
                                {
                                    var lstPriceVendor = REPTotalPriceVendor_ListPrice(price, typePrice, customer, null, model);

                                    result.AddRange(lstPriceVendor);
                                }
                            }
                        }
                    }
                    #endregion

                    #region bang gia vendor
                    foreach (var venId in lstVenId)
                    {

                        var vendor = model.CUS_Customer.Where(c => c.ID == venId).FirstOrDefault();
                        if (vendor == null)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Mã vendor không tồn tại");
                        }
                        #region get contract
                        contract = new CAT_Contract();
                        //bang gia thuong
                        if (typePrice == 0)
                        {
                            contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.CUS_Company != null && c.CUS_Company.CustomerRelateID == cusId && c.TransportModeID == transportModeID && c.TypeOfContractID == iMain && c.TypeOfRunLevelID == null && (c.ExpiredDate == null || c.ExpiredDate >= now) && c.EffectDate <= effectDate).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                        }
                        else if (typePrice == 1)
                        {
                            contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.CUS_Company != null && c.CUS_Company.CustomerRelateID == cusId && c.TransportModeID == transportModeID && c.TypeOfContractID == iMain && c.TypeOfRunLevelID != null && (c.ExpiredDate == null || c.ExpiredDate >= now) && c.EffectDate <= effectDate).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                        }
                        #endregion
                        if (contract != null)
                        {
                            #region get term
                            var lstTerm = model.CAT_ContractTerm.Where(c => c.ContractID == contract.ID && c.IsAllRouting == false && c.IsClosed == false && c.DateEffect <= effectDate).OrderByDescending(c => c.DateEffect).Select(c => c.ID);
                            #endregion

                            if (lstTerm != null && lstTerm.Count() > 0)
                            {
                                var lstPrice = model.CAT_Price.Where(c => lstTerm.Contains(c.ContractTermID) && c.EffectDate <= effectDate).OrderByDescending(c => c.EffectDate);
                                foreach (var price in lstPrice)
                                {
                                    if (price != null)
                                    {
                                        var lstPriceVendor = REPTotalPriceVendor_ListPrice(price, typePrice, customer, vendor, model);

                                        result.AddRange(lstPriceVendor);
                                    }
                                }
                            }
                        }
                    }
                    #endregion
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private List<REPTotalPriceVendor> REPTotalPriceVendor_ListPrice(CAT_Price price, int typePrice, CUS_Customer cus, CUS_Customer ven, DataEntities model)
        {
            try
            {
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;

                var result = new List<REPTotalPriceVendor>();
                var lstPriceVendor = new List<REPTotalPriceVendor>();
                var cusID = ven != null ? ven.ID : cus.ID;
                var cusCode = ven != null ? ven.Code : cus.Code;
                var cusName = ven != null ? ven.ShortName : cus.ShortName;

                var comID = cus != null ? cus.ID : -1;
                var comCode = cus != null ? cus.Code : string.Empty;
                var comName = cus != null ? cus.ShortName : string.Empty;

                #region FCL
                if (price.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFCL)
                {
                    result = model.CAT_PriceCOContainer.Where(c => c.PriceID == price.ID).Select(c => new REPTotalPriceVendor
                    {
                        PackingID = c.PackingID,
                        PackingCode = c.CAT_Packing.Code,
                        PackingName = c.CAT_Packing.PackingName,
                        Price = c.Price,
                        CustomerID = cusID,
                        CustomerCode = cusCode,
                        CustomerName = cusName,
                        CompanyID = comID,
                        CompanyCode = comCode,
                        CompanyName = comName,
                        EffectDate = price.EffectDate,
                        RoutingID = c.CAT_ContractRouting.CAT_Routing.ID,
                        RoutingName = c.CAT_ContractRouting.CAT_Routing.RoutingName,
                        RoutingCode = c.CAT_ContractRouting.CAT_Routing.Code,
                        GroupOfProductCode = string.Empty,
                        GroupOfProductName = string.Empty,
                        GroupOfVehicleCode = string.Empty,
                        GroupOfVehicleName = string.Empty,
                        LevelCode = string.Empty,
                        LevelName = string.Empty,
                    }).ToList();
                }
                #endregion

                #region FTL
                if (price.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFTL)
                {
                    #region FTL Normal
                    if (typePrice == 0)
                    {
                        result = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == price.ID).Select(c => new REPTotalPriceVendor
                        {
                            GroupOfVehicleID = c.GroupOfVehicleID,
                            GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                            GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName,
                            Price = c.Price,
                            CustomerID = cusID,
                            CustomerCode = cusCode,
                            CustomerName = cusName,
                            CompanyID = comID,
                            CompanyCode = comCode,
                            CompanyName = comName,
                            EffectDate = price.EffectDate,
                            RoutingID = c.CAT_ContractRouting.CAT_Routing.ID,
                            RoutingName = c.CAT_ContractRouting.CAT_Routing.RoutingName,
                            RoutingCode = c.CAT_ContractRouting.CAT_Routing.Code,
                            GroupOfProductCode = string.Empty,
                            GroupOfProductName = string.Empty,
                            LevelCode = string.Empty,
                            LevelName = string.Empty,
                            PackingCode = string.Empty,
                            PackingName = string.Empty,
                        }).ToList();
                    }
                    #endregion

                    #region FTL Level
                    if (typePrice == 1)
                    {
                        result = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == price.ID).Select(c => new REPTotalPriceVendor
                        {
                            LevelID = c.ContractLevelID,
                            LevelCode = c.CAT_ContractLevel.Code,
                            LevelName = c.CAT_ContractLevel.LevelName,
                            Price = c.Price,
                            CustomerID = cusID,
                            CustomerCode = cusCode,
                            CustomerName = cusName,
                            CompanyID = comID,
                            CompanyCode = comCode,
                            CompanyName = comName,
                            EffectDate = price.EffectDate,
                            RoutingID = c.CAT_ContractRouting.CAT_Routing.ID,
                            RoutingName = c.CAT_ContractRouting.CAT_Routing.RoutingName,
                            RoutingCode = c.CAT_ContractRouting.CAT_Routing.Code,
                            GroupOfProductCode = string.Empty,
                            GroupOfProductName = string.Empty,
                            PackingCode = string.Empty,
                            PackingName = string.Empty,
                            GroupOfVehicleCode = string.Empty,
                            GroupOfVehicleName = string.Empty,
                        }).ToList();
                    }
                    #endregion
                }

                #endregion

                #region LTL
                if (price.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iLTL)
                {
                    #region LTL Normal
                    if (typePrice == 0)
                    {
                        result = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == price.ID).Select(c => new REPTotalPriceVendor
                        {
                            GroupOfProductID = c.GroupOfProductID,
                            GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                            Price = c.Price,
                            CustomerID = cusID,
                            CustomerCode = cusCode,
                            CustomerName = cusName,
                            CompanyID = comID,
                            CompanyCode = comCode,
                            CompanyName = comName,
                            EffectDate = price.EffectDate,
                            RoutingID = c.CAT_ContractRouting.CAT_Routing.ID,
                            RoutingName = c.CAT_ContractRouting.CAT_Routing.RoutingName,
                            RoutingCode = c.CAT_ContractRouting.CAT_Routing.Code,
                            PackingCode = string.Empty,
                            PackingName = string.Empty,
                            GroupOfVehicleCode = string.Empty,
                            GroupOfVehicleName = string.Empty,
                            LevelCode = string.Empty,
                            LevelName = string.Empty,
                        }).ToList();
                    }
                    var lstTemp = new List<REPTotalPriceVendor>();
                    if (cus != null && ven != null)
                    {
                        foreach (var objPrice in result)
                        {
                            var lstGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.CustomerID == cus.ID && c.VendorID == ven.ID && c.GroupOfProductVENID == objPrice.GroupOfProductID);
                            if (lstGOPMapping != null && lstGOPMapping.Count() > 0)
                            {
                                foreach (var itemMapping in lstGOPMapping)
                                {
                                    var objMapping = new REPTotalPriceVendor();
                                    objMapping = objPrice;
                                    objMapping.GroupOfProductCode = itemMapping.CUS_GroupOfProduct.Code;
                                    objMapping.GroupOfProductName = itemMapping.CUS_GroupOfProduct.GroupName;
                                    lstTemp.Add(objMapping);
                                }
                            }
                            else
                            {
                                lstTemp.Add(objPrice);
                            }
                        }
                        result = lstTemp;
                    }
                    #endregion

                    #region LTL Level
                    if (typePrice == 1)
                    {
                        result = model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == price.ID).Select(c => new REPTotalPriceVendor
                        {
                            LevelID = c.ContractLevelID,
                            LevelCode = c.CAT_ContractLevel.Code,
                            LevelName = c.CAT_ContractLevel.LevelName,
                            GroupOfProductID = c.GroupOfProductID,
                            GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                            Price = c.Price,
                            CustomerID = cusID,
                            CustomerCode = cusCode,
                            CustomerName = cusName,
                            CompanyID = comID,
                            CompanyCode = comCode,
                            CompanyName = comName,
                            EffectDate = price.EffectDate,
                            RoutingID = c.CAT_ContractRouting.CAT_Routing.ID,
                            RoutingName = c.CAT_ContractRouting.CAT_Routing.RoutingName,
                            RoutingCode = c.CAT_ContractRouting.CAT_Routing.Code,
                            PackingCode = string.Empty,
                            PackingName = string.Empty,
                            GroupOfVehicleCode = string.Empty,
                            GroupOfVehicleName = string.Empty,
                        }).ToList();
                        lstTemp = new List<REPTotalPriceVendor>();
                        if (cus != null && ven != null)
                        {
                            foreach (var objPrice in result)
                            {
                                var lstGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.CustomerID == cus.ID && c.VendorID == ven.ID && c.GroupOfProductVENID == objPrice.GroupOfProductID);
                                if (lstGOPMapping != null && lstGOPMapping.Count() > 0)
                                {
                                    foreach (var itemMapping in lstGOPMapping)
                                    {
                                        var objMapping = new REPTotalPriceVendor();
                                        objMapping = objPrice;
                                        objMapping.GroupOfProductCode = itemMapping.CUS_GroupOfProduct.Code;
                                        objMapping.GroupOfProductName = itemMapping.CUS_GroupOfProduct.GroupName;
                                        lstTemp.Add(objMapping);
                                    }
                                }
                                else
                                {
                                    lstTemp.Add(objPrice);
                                }
                            }

                            result = lstTemp;
                        }
                    }
                    #endregion
                }
                #endregion
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<int> REPTotalPriceVendor_ListVendor(int cusID)
        {
            try
            {
                List<int> result = new List<int>();
                using (var model = new DataEntities())
                {
                    int type2 = -(int)SYSVarType.TypeOfCustomerBOTH;
                    int type1 = -(int)SYSVarType.TypeOfCustomerVEN;
                    result = model.CUS_Company.Where(c => c.CustomerRelateID == cusID && (c.CUS_Customer.TypeOfCustomerID == type1 || c.CUS_Customer.TypeOfCustomerID == type2)).Select(c => c.CustomerOwnID).Distinct().ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Báo cáo tổng hợp
        public List<DTOREP_TotalPL> REPTotalPL_List(DateTime dtfrom, DateTime dtto, int typeOfView)
        {
            try
            {
                var result = new List<DTOREP_TotalPL>();
                using (var model = new DataEntities())
                {
                    dtfrom = dtfrom.Date;
                    dtto = dtto.AddDays(1).Date;

                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var lstCustomerID = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).Select(c => c.ID).ToList();

                    var lstCustomer = model.CUS_Customer.Select(c => new
                    {
                        c.ID,
                        c.Code,
                        c.ShortName
                    }).ToList();

                    // Phân phối
                    var lstFIN = model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID > 0 && c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL && c.OPS_DITOGroupProduct.DITOMasterID > 0 &&
                        c.FIN_PLDetails.FIN_PL.Effdate >= dtfrom && c.FIN_PLDetails.FIN_PL.Effdate < dtto &&
                        lstCustomerID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            CustomerID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID,
                            VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID,
                            Credit = c.FIN_PLDetails.Credit,
                            Debit = c.FIN_PLDetails.Debit,
                            TypeOfTransport = "V.chuyển phân phối",
                            TransportMode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL ? "LTL" : "FTL",
                            TransportModeVEN = c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL ? "LTL" : "FTL",
                        }).ToList();

                    // Container
                    lstFIN.AddRange(model.FIN_PLContainer.Where(c => c.COTOContainerID > 0 && c.FIN_PLDetails.FIN_PL.SYSCustomerID == Account.SYSCustomerID &&
                        c.FIN_PLDetails.FIN_PL.FINPLTypeID == -(int)SYSVarType.FINPLTypePL && c.OPS_COTOContainer.COTOMasterID > 0 &&
                        c.FIN_PLDetails.FIN_PL.Effdate >= dtfrom && c.FIN_PLDetails.FIN_PL.Effdate < dtto &&
                        lstCustomerID.Contains(c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID)).Select(c => new
                        {
                            CustomerID = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            VendorID = c.OPS_COTOContainer.OPS_COTOMaster.VendorOfVehicleID,
                            Credit = c.FIN_PLDetails.Credit,
                            Debit = c.FIN_PLDetails.Debit,
                            TypeOfTransport = "V.chuyển container",
                            TransportMode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL ? "FCL" : "LCL",
                            TransportModeVEN = c.OPS_COTOContainer.OPS_COTOMaster.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL ? "FCL" : "LCL",
                        }).ToList());

                    if (typeOfView == 1)
                    {
                        foreach (var lstGroup in lstFIN.GroupBy(c => new { c.CustomerID, c.TransportMode, c.TypeOfTransport }))
                        {
                            var customer = lstCustomer.FirstOrDefault(c => c.ID == lstGroup.Key.CustomerID);
                            if (customer != null)
                            {
                                DTOREP_TotalPL item = new DTOREP_TotalPL();
                                item.CustomerID = customer.ID;
                                item.CustomerCode = customer.Code;
                                item.CustomerName = customer.ShortName;
                                item.Credit = lstGroup.Sum(c => c.Credit);
                                item.Debit = lstGroup.Sum(c => c.Debit);
                                item.PL = item.Credit - item.Debit;
                                item.TransportMode = lstGroup.Key.TransportMode;
                                item.TypeOfTransport = lstGroup.Key.TypeOfTransport;
                                result.Add(item);
                            }
                        }
                    }
                    else
                    {
                        foreach (var lstGroup in lstFIN.GroupBy(c => new { c.VendorID, c.TransportModeVEN, c.TypeOfTransport }))
                        {
                            var customer = lstCustomer.FirstOrDefault(c => c.ID == lstGroup.Key.VendorID);
                            if (customer != null)
                            {
                                DTOREP_TotalPL item = new DTOREP_TotalPL();
                                item.CustomerID = customer.ID;
                                item.CustomerCode = customer.Code;
                                item.CustomerName = customer.ShortName;
                                item.Credit = lstGroup.Sum(c => c.Credit);
                                item.Debit = lstGroup.Sum(c => c.Debit);
                                item.PL = item.Credit - item.Debit;
                                item.TransportMode = lstGroup.Key.TransportModeVEN;
                                item.TypeOfTransport = lstGroup.Key.TypeOfTransport;
                                result.Add(item);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Báo cáo tờ khai (REPCOInspection)
        public List<DTOREPCOInspection> REPCOInspection_Detail(List<int> lstid, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var result = new List<DTOREPCOInspection>();
                using (var model = new DataEntities())
                {
                    dtfrom = dtfrom.Date;
                    dtto = dtto.AddDays(1).Date;

                    result = model.ORD_Document.Where(c => c.DateDocument >= dtfrom && c.DateDocument < dtto && lstid.Contains(c.ORD_Order.CustomerID)).Select(c => new DTOREPCOInspection
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeOfDocument = c.SYS_Var.ValueOfVar,
                        DateDocument = c.DateDocument,
                        CustomerID = c.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                        ContractCustomerID = c.ContractCustomerID > 0 ? c.ContractCustomerID.Value : -1,
                        ContractCustomerNo = c.ContractCustomerID > 0 ? c.CAT_Contract.ContractNo : string.Empty,
                        DateConfigCustomer = c.DateConfigCustomer,
                        VendorID = c.VendorID,
                        VendorCode = c.VendorID > 0 ? c.CUS_Customer.Code : string.Empty,
                        VendorName = c.VendorID > 0 ? c.CUS_Customer.CustomerName : string.Empty,
                        ContractVendorID = c.ContractVendorID > 0 ? c.ContractVendorID.Value : -1,
                        ContractVendorNo = c.ContractVendorID > 0 ? c.CAT_Contract1.ContractNo : string.Empty,
                        DateConfigVendor = c.DateConfigVendor,
                        TotalContainer = c.ORD_DocumentContainer.Select(e => e.ContainerID).Distinct().Count(),
                        TotalSerPriceCustomer = c.ORD_DocumentService.Count(e => e.PriceCustomer != null) > 0 ? c.ORD_DocumentService.Where(e => e.PriceCustomer != null).Sum(e => e.PriceCustomer) : 0,
                        TotalSerPriceVendor = c.ORD_DocumentService.Count(e => e.PriceVendor != null) > 0 ? c.ORD_DocumentService.Where(e => e.PriceVendor != null).Sum(e => e.PriceVendor) : 0,
                    }).ToList();

                    foreach (var item in result)
                    {
                        var listCont = model.ORD_DocumentContainer.Where(c => c.DocumentID == item.ID).Select(c => c.ContainerID).Distinct();
                        if (listCont != null)
                        {
                            if (item.ContractCustomerID > 0)
                            {
                                var lstService = model.FIN_PLContainer.Where(c => c.COTOContainerID > 0 && listCont.Contains(c.OPS_COTOContainer.OPS_Container.ContainerID) && (c.FIN_PLDetails.CostID == (int)CATCostType.ORDDocumentCredit || c.FIN_PLDetails.CostID == (int)CATCostType.ORDDocumentDebit)).Select(c => new
                                {
                                    c.FIN_PLDetails.Credit,
                                    c.FIN_PLDetails.Debit
                                }).ToList();

                                var lstCon = model.FIN_PLContainer.Where(c => c.COTOContainerID > 0 && listCont.Contains(c.OPS_COTOContainer.OPS_Container.ContainerID) && (c.FIN_PLDetails.CostID == (int)CATCostType.ORDContainerServiceCredit || c.FIN_PLDetails.CostID == (int)CATCostType.ORDContainerServiceDebit)).Select(c => new
                                {
                                    c.FIN_PLDetails.Credit,
                                    c.FIN_PLDetails.Debit
                                }).ToList();

                                //Chi phí Service
                                item.TotalSerPriceCustomer = lstService.Sum(c => c.Credit);
                                item.TotalSerPriceVendor = lstService.Sum(c => c.Debit);
                                //Chi phí Cont
                                item.TotalContPriceCustomer = lstCon.Sum(c => c.Credit);
                                item.TotalContPriceVendor = lstCon.Sum(c => c.Debit);
                            }
                            else
                            {
                                var lstCont = model.ORD_ContainerService.Where(c => listCont.Contains(c.ContainerID) && (c.PriceCustomer > 0 || c.PriceVendor > 0)).Select(c => new
                                {
                                    PriceCustomer = c.PriceCustomer > 0 ? c.PriceCustomer : 0,
                                    PriceVendor = c.PriceVendor > 0 ? c.PriceVendor : 0,
                                }).ToList();
                                item.TotalContPriceCustomer = lstCont.Sum(c => c.PriceCustomer);
                                item.TotalContPriceVendor = lstCont.Sum(c => c.PriceVendor);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Báo cáo trạng thái đơn hàng
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lstid"></param>
        /// <param name="dtfrom"></param>
        /// <param name="dtto"></param>
        /// <param name="typeOfFilter">1: RequestDate, 2: DateConfig</param>
        /// <param name="request"></param>
        /// <returns></returns>
        public List<DTOREPStatus_Order> REPDIStatus_OrderData(List<int> lstid, DateTime dtfrom, DateTime dtto, int typeOfFilter, int statusID)
        {
            try
            {
                dtfrom = dtfrom.Date;
                dtto = dtto.AddDays(1).Date;
                string sPlanning = "Đang lập kế hoạch"; // 1
                string sPlanned = "Đã lập chuyến"; // 2
                string sApproved = "Đã duyệt chuyến"; // 3
                string sTranfer = "Đang vận chuyển"; // 4
                string sDelivery = "Đã giao hàng"; // 5
                string sInvoice = "Đã nhận chứng từ"; // 6
                string sCancel = "Bị hủy"; // 7
                DateTime? dtNull = null;
                var result = new List<DTOREPStatus_Order>();
                using (var model = new DataEntities())
                {
                    #region Lọc theo ngày gửi
                    if (typeOfFilter == 1)
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.ORD_GroupProduct.ORD_Order.RequestDate >= dtfrom && c.ORD_GroupProduct.ORD_Order.RequestDate < dtto && lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new DTOREPStatus_Order
                            {
                                DITOGroupProductID = c.ID,
                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderGroupProductID = c.OrderGroupProductID.Value,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                                OrderStatus = c.ORD_GroupProduct.ORD_Order.SYS_Var.ValueOfVar,
                                DNCode = c.DNCode,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                StockID = c.ORD_GroupProduct.LocationFromID,
                                StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                                StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                                StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                                PartnerID = c.ORD_GroupProduct.PartnerID,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                LocationToAddress = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                                LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                                LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                                GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                                GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                                CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                                GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                                GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                ProductCode = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : "",
                                ProductName = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName : "",
                                ProductDescription = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description : "",
                                GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                                GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                                FINSort = c.FINSort,

                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                                TonOrder = c.Ton,
                                CBMOrder = c.CBM,
                                QuantityOrder = c.Quantity,
                                KgOrder = c.Ton * 1000,

                                TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : "",

                                ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                                ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                                UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                                UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                                PODStatus = sPODStatusNotComplete,

                                ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                                ORDGroupNote2 = c.ORD_GroupProduct.Note2,
                                OPSGroupNote1 = c.Note1,
                                OPSGroupNote2 = c.Note2,

                                KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                                ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                                ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                                DateFromCome = c.DateFromCome,
                                DateFromLeave = c.DateFromLeave,
                                DateFromLoadStart = c.DateFromLoadStart,
                                DateFromLoadEnd = c.DateFromLoadEnd,
                                DateToCome = c.DateToCome,
                                DateToLeave = c.DateToLeave,
                                DateToLoadStart = c.DateToLoadStart,
                                DateToLoadEnd = c.DateToLoadEnd,
                                InvoiceDate = c.InvoiceDate,
                                InvoiceNote = c.InvoiceNote,
                                InvoiceReturnDate = c.InvoiceReturnDate,
                                InvoiceReturnNote = c.InvoiceReturnNote,

                                TonTranfer = c.TonTranfer,
                                CBMTranfer = c.CBMTranfer,
                                QuantityTranfer = c.QuantityTranfer,
                                TonBBGN = c.TonBBGN,
                                CBMBBGN = c.CBMBBGN,
                                QuantityBBGN = c.QuantityBBGN,
                                TonReturn = c.TonReturn,
                                CBMReturn = c.CBMReturn,
                                QuantityReturn = c.QuantityReturn,

                                KgTranfer = c.TonTranfer * 1000,
                                KgBBGN = c.TonBBGN * 1000,
                                KgReturn = c.TonReturn * 1000,

                                OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                                OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                                OrderGroupProductRouting = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",

                                OPSContract = c.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                                OPSRouting = c.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                                OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                                DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                                TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                                TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : "",
                                TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : "",
                                VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                                VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                                VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                                VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                                DITOGroupProductStatusID = c.DITOGroupProductStatusID,
                                DITOGroupProductStatusPODID = c.DITOGroupProductStatusPODID,
                                StatusOfDITOMasterID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.StatusOfDITOMasterID : -1,
                            }).ToList();
                    }
                    #endregion

                    #region Lọc theo ngày tính giá
                    if (typeOfFilter == 2)
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.ORD_GroupProduct.ORD_Order.DateConfig >= dtfrom && c.ORD_GroupProduct.ORD_Order.DateConfig < dtto && lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new DTOREPStatus_Order
                        {
                            DITOGroupProductID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            OrderDateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderStatus = c.ORD_GroupProduct.ORD_Order.SYS_Var.ValueOfVar,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            DateConfig = c.ORD_GroupProduct.ORD_Order.DateConfig,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            StockID = c.ORD_GroupProduct.LocationFromID,
                            StockCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : "",
                            StockName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : "",
                            StockAddress = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : "",
                            PartnerID = c.ORD_GroupProduct.PartnerID,
                            PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                            PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            LocationToAddress = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            GroupOfLocationToCode = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.Code : "",
                            GroupOfLocationToName = c.ORD_GroupProduct.LocationToID > 0 && c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_GroupOfLocation.GroupName : "",
                            CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                            CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : "",
                            CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",
                            GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            ProductCode = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : "",
                            ProductName = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName : "",
                            ProductDescription = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Description : "",
                            GroupOfVehicleCode = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID.HasValue ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            FINSort = c.FINSort,

                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName == null ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName : c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,

                            TonOrder = c.Ton,
                            CBMOrder = c.CBM,
                            QuantityOrder = c.Quantity,
                            KgOrder = c.Ton * 1000,

                            TransportModeIncome = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            TransportModeCost = c.DITOMasterID.HasValue && c.OPS_DITOMaster.TransportModeID.HasValue ? c.OPS_DITOMaster.CAT_TransportMode.Name : "",

                            ExternalCode = c.ORD_GroupProduct.ORD_Order.ExternalCode,
                            ExternalDate = c.ORD_GroupProduct.ORD_Order.ExternalDate,
                            UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,

                            PODStatus = sPODStatusNotComplete,

                            ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.ORD_GroupProduct.Note2,
                            OPSGroupNote1 = c.Note1,
                            OPSGroupNote2 = c.Note2,

                            KM = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.KM : null,
                            ETD = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : dtNull,
                            ETA = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETA : dtNull,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateFromLoadStart = c.DateFromLoadStart,
                            DateFromLoadEnd = c.DateFromLoadEnd,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            DateToLoadStart = c.DateToLoadStart,
                            DateToLoadEnd = c.DateToLoadEnd,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceNote = c.InvoiceNote,
                            InvoiceReturnDate = c.InvoiceReturnDate,
                            InvoiceReturnNote = c.InvoiceReturnNote,

                            TonTranfer = c.TonTranfer,
                            CBMTranfer = c.CBMTranfer,
                            QuantityTranfer = c.QuantityTranfer,
                            TonBBGN = c.TonBBGN,
                            CBMBBGN = c.CBMBBGN,
                            QuantityBBGN = c.QuantityBBGN,
                            TonReturn = c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,

                            KgTranfer = c.TonTranfer * 1000,
                            KgBBGN = c.TonBBGN * 1000,
                            KgReturn = c.TonReturn * 1000,

                            OrderContract = c.ORD_GroupProduct.ORD_Order.ContractID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_Contract.DisplayName : "",
                            OrderRouting = c.ORD_GroupProduct.ORD_Order.CUSRoutingID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Routing.CAT_Routing.RoutingName : "",
                            OrderGroupProductRouting = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : "",

                            OPSContract = c.OPS_DITOMaster.ContractID > 0 ? c.OPS_DITOMaster.CAT_Contract.DisplayName : "",
                            OPSRouting = c.OPS_DITOMaster.CATRoutingID > 0 ? c.OPS_DITOMaster.CAT_Routing.RoutingName : "",
                            OPSGroupProductRouting = c.CATRoutingID > 0 ? c.CAT_Routing.RoutingName : "",

                            DITOMasterID = c.DITOMasterID.HasValue ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : "",
                            TOMasterNote1 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note1 : "",
                            TOMasterNote2 = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Note2 : "",
                            VehicleCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            VendorCode = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : "",
                            VendorName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "",
                            VendorShortName = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.ShortName : "",

                            DITOGroupProductStatusID = c.DITOGroupProductStatusID,
                            DITOGroupProductStatusPODID = c.DITOGroupProductStatusPODID,
                            StatusOfDITOMasterID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.StatusOfDITOMasterID : -1,

                        }).ToList();
                    }
                    #endregion

                    #region Trạng thái chi tiết
                    foreach (var item in result)
                    {
                        if (item.DITOMasterID < 1)
                        {
                            item.OrderGroupStatusID = 1;
                            item.OrderGroupStatus = sPlanning;
                        }

                        if (item.DITOMasterID > 0)
                        {
                            item.OrderGroupStatusID = 2;
                            item.OrderGroupStatus = sPlanned;

                            if (item.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered)
                            {
                                item.OrderGroupStatusID = 3;
                                item.OrderGroupStatus = sApproved;
                            }

                            if (item.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterTendered)
                            {
                                item.OrderGroupStatusID = 4;
                                item.OrderGroupStatus = sTranfer;
                            }

                            if (item.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete)
                            {
                                item.OrderGroupStatusID = 5;
                                item.OrderGroupStatus = sDelivery;
                            }

                            if (item.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete && item.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete)
                            {
                                item.OrderGroupStatusID = 6;
                                item.OrderGroupStatus = sInvoice;
                            }
                        }

                        if (item.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusCancel)
                        {
                            item.OrderGroupStatusID = 7;
                            item.OrderGroupStatus = sCancel;
                        }
                    }
                    #endregion
                }
                if (statusID > 0)
                    result = result.Where(c => c.OrderGroupStatusID == statusID).ToList();

                if (typeOfFilter == 1)
                    result = result.OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                else
                    result = result.OrderBy(c => c.DateConfig).ThenBy(c => c.OrderCode).ToList();
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        public void Account_Setting()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var lstId = model.CUS_Customer.Select(c => c.ID);
                    Account.ListCustomerID = lstId.ToArray();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
    }
}