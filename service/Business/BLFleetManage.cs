using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Kendo.Mvc.Extensions;
using Data;
using DTO;
using System.ServiceModel;
using System.Data.Entity;
using Kendo.Mvc.UI;
using Kendo.Mvc;
using OfficeOpenXml;
using System.Text.RegularExpressions;

namespace Business
{
    public class BLFleetManage : Base, IBase
    {
        const string ReceiptCodeRrefix = "FLM";
        const string ReceiptCodeNum = "000000000";
        const string DIVehicleCode = "[Xe chờ nhập]";
        const string PartNoPrefix = "PartNo";
        const string PartNoCodeNum = "000000000";
        const string PHTDICode = "PHTDI";
        const string PHTCodeNum = "000000000";
        const string PHTCOCode = "PHTCO";
        const int DefaultCountry = 1;

        private string Receipt_GetLastCode(DataEntities model)
        {
            var last = model.FLM_Receipt.OrderByDescending(c => c.Code).Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code.StartsWith("FLM")).Select(c => new { c.Code }).FirstOrDefault();
            long idx = 1;
            if (last != null)
                idx = Convert.ToInt64(last.Code.Replace(ReceiptCodeRrefix, "")) + 1;
            else
                idx = 1;
            return ReceiptCodeRrefix + idx.ToString(ReceiptCodeNum);
        }
        private string Receipt_GetLastCodeWithIndex(DataEntities model, int index)
        {
            var last = model.FLM_Receipt.OrderByDescending(c => c.Code).Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code.StartsWith("FLM")).Select(c => new { c.Code }).FirstOrDefault();
            long idx = 1;
            if (last != null)
                idx = Convert.ToInt64(last.Code.Replace(ReceiptCodeRrefix, "")) + index;
            else
                idx = index;
            return ReceiptCodeRrefix + idx.ToString(ReceiptCodeNum);
        }
        private long Receipt_GetLastIndex(DataEntities model)
        {
            var last = model.FLM_Receipt.OrderByDescending(c => c.Code).Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code.StartsWith("FLM")).Select(c => new { c.Code }).FirstOrDefault();
            long idx = 1;
            if (last != null)
                idx = Convert.ToInt64(last.Code.Replace(ReceiptCodeRrefix, "")) + 1;
            else
                idx = 1;
            return idx;
        }

        private string Equipment_GetLastPartNo(DataEntities model)
        {
            var last = model.FLM_Asset.OrderByDescending(c => c.Code).Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code.StartsWith("PartNo") && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetEquipment).Select(c => new { c.Code }).FirstOrDefault();
            long idx = 1;
            if (last != null)
                idx = Convert.ToInt64(last.Code.Replace(PartNoPrefix, "")) + 1;
            else
                idx = 1;
            return PartNoPrefix + idx.ToString(PartNoCodeNum);
        }

        #region FLMAsset

        #region common
        public DTOResult FLMAsset_Location_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        WardID = c.WardID,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        EconomicZone = c.EconomicZone,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate,
                        Note1 = c.Note1,
                        Note = c.Note,
                        GroupOfLocationID = c.GroupOfLocationID > 0 ? c.GroupOfLocationID.Value : -1,
                        GroupOfLocationName = c.GroupOfLocationID > 0 ? c.CAT_GroupOfLocation.GroupName : string.Empty,
                        LoadTimeCO = c.LoadTimeCO,
                        LoadTimeDI = c.LoadTimeDI,
                        UnLoadTimeCO = c.UnLoadTimeCO,
                        UnLoadTimeDI = c.UnLoadTimeDI
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMAsset_LocationNotIn_Save(int locationID, int assetID)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_Asset.FirstOrDefault(c => c.ID == assetID);
                    if (obj != null)
                    {
                        if (obj.VehicleID > 0)
                        {
                            var objVe = model.CAT_Vehicle.FirstOrDefault(c => c.ID == obj.VehicleID);
                            if (objVe != null)
                            {
                                objVe.ModifiedBy = Account.UserName;
                                objVe.ModifiedDate = DateTime.Now;
                                objVe.LocationID = locationID;
                                model.SaveChanges();
                            }
                        }

                        if (obj.RomoocID > 0)
                        {
                            var objVe = model.CAT_Romooc.FirstOrDefault(c => c.ID == obj.RomoocID);
                            if (objVe != null)
                            {
                                objVe.ModifiedBy = Account.UserName;
                                objVe.ModifiedDate = DateTime.Now;
                                objVe.LocationID = locationID;
                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMAsset_Location_Save(CATLocation item)
        {
            try
            {
                int result = -1;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    CAT_Location location = new CAT_Location();
                    location = HelperRouting.CATLocation_Save(model, Account, item, true);
                    if (location != null)
                        result = location.ID;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public CATLocation FLMAsset_Location_Get(int ID)
        {
            try
            {
                CATLocation result = new CATLocation { ID = 0, CountryID = 0, ProvinceID = 0, DistrictID = 0, Lat = 0, Lng = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Location.Where(c => c.ID == ID).Select(c => new CATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            WardID = c.WardID,
                            DistrictID = c.DistrictID,
                            DistrictName = c.CAT_District.DistrictName,
                            ProvinceID = c.ProvinceID,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            CountryID = c.CountryID,
                            CountryName = c.CAT_Country.CountryName,
                            EconomicZone = c.EconomicZone,
                            Lat = c.Lat,
                            Lng = c.Lng,
                            CreatedBy = c.CreatedBy,
                            CreatedDate = c.CreatedDate,
                            Note = c.Note,
                            Note1 = c.Note1,
                            GroupOfLocationID = c.GroupOfLocationID > 0 ? c.GroupOfLocationID.Value : -1,
                            GroupOfLocationName = c.GroupOfLocationID > 0 ? c.CAT_GroupOfLocation.GroupName : string.Empty,
                            LoadTimeCO = c.LoadTimeCO,
                            LoadTimeDI = c.LoadTimeDI,
                            UnLoadTimeCO = c.UnLoadTimeCO,
                            UnLoadTimeDI = c.UnLoadTimeDI
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                        result.GroupOfLocationID = 0;
                        var gol = model.CAT_GroupOfLocation.FirstOrDefault();
                        if (gol != null)
                            result.GroupOfLocationID = gol.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMAsset_Location_Delete(CATLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATLocation_Delete(model, Account, item.ID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMAsset_History_DepreciationList(string request, int assetID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {

                    var query = model.FLM_FixedCost.Where(c => c.AssetID == assetID && c.IsClosed && c.CostID == (int)CATCostType.FLMDepreciation).Select(c => new DTOFLMFixedCost
                    {
                        ID = c.ID,
                        AssetID = c.AssetID,
                        CostID = c.CostID,
                        ReceiptID = c.ReceiptID,
                        Month = c.Month,
                        Year = c.Year,
                        Value = c.Value,
                        IsClosed = c.IsClosed,
                        AssetCode = c.FLM_Asset.VehicleID.HasValue ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID.HasValue ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.Code,
                        ReceiptNo = c.ReceiptID.HasValue ? c.FLM_Receipt.Code : string.Empty
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOFLMFixedCost>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMAsset_History_OPSList(string request, int assetID, DateTime dtFrom, DateTime dtTo, bool isDI)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    dtFrom = dtFrom.Date;
                    dtTo = dtTo.AddDays(1).Date;
                    var vehicle = model.FLM_Asset.FirstOrDefault(c => c.ID == assetID);
                    if (vehicle != null)
                    {
                        if (isDI)
                        {
                            var query = model.OPS_DITOMaster.Where(c => c.VehicleID > 0 && c.VehicleID == vehicle.VehicleID && c.ETD >= dtFrom && c.ETD < dtTo &&
                            c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived).Select(c => new DTOFLMAssetHistoryOPS
                            {
                                MasterID = c.ID,
                                MasterCode = c.Code,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                TotalCostStation = c.OPS_DITOStation.Count() > 0 ? c.OPS_DITOStation.Sum(d => d.Price) : 0,
                                TotalCostTrouble = c.CAT_Trouble.Count() > 0 ? c.CAT_Trouble.Sum(d => d.Cost) : 0
                            }).ToDataSourceResult(CreateRequest(request));
                            result.Data = query.Data as IEnumerable<DTOFLMAssetHistoryOPS>;
                            result.Total = query.Total;
                        }
                        else
                        {
                            var query = model.OPS_COTOMaster.Where(c => c.VehicleID > 0 && c.VehicleID == vehicle.VehicleID && c.ETD >= dtFrom && c.ETD < dtTo &&
                            c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived).Select(c => new DTOFLMAssetHistoryOPS
                            {
                                MasterID = c.ID,
                                MasterCode = c.Code,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                TotalCostStation = c.OPS_COTOStation.Count() > 0 ? c.OPS_COTOStation.Sum(d => d.Price) : 0,
                                TotalCostTrouble = c.CAT_Trouble.Count() > 0 ? c.CAT_Trouble.Sum(d => d.Cost) : 0
                            }).ToDataSourceResult(CreateRequest(request));
                            result.Data = query.Data as IEnumerable<DTOFLMAssetHistoryOPS>;
                            result.Total = query.Total;
                        }
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMAsset_History_RepairList(string request, int assetID, DateTime dtFrom, DateTime dtTo)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    dtFrom = dtFrom.Date;
                    dtTo = dtTo.AddDays(1).Date;
                    var query = model.FLM_ReceiptCost.Where(c => c.FLM_Receipt.IsApproved && c.AssetID == assetID && c.FLM_Receipt.DateReceipt >= dtFrom && c.FLM_Receipt.DateReceipt < dtTo).Select(c => new DTOFLMAssetHistoryRepair
                            {
                                ReceiptID = c.ReceiptID,
                                ReceiptNo = c.FLM_Receipt.Code,
                                DateReceipt = c.FLM_Receipt.DateReceipt,
                                Note = c.FLM_Receipt.Note,
                                InvoiceDate = c.FLM_Receipt.InvoiceDate,
                                InvoiceNo = c.FLM_Receipt.InvoiceNo,
                                Amount = c.Amount
                            }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOFLMAssetHistoryRepair>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private bool FLMAsset_IsValidRegNo(string regNo)
        {
            regNo = regNo.Trim();
            bool result = false;
            string pnum = @"[a-zA-Z\d]{2,4}-[\s\S]{1,9}$";
            if (Regex.Match(regNo, pnum).Success) { result = true; }
            return result;
        }
        #endregion

        #region excel
        public SYSExcel FLMAsset_Truck_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var data = model.FLM_Asset.Where(c => c.VehicleID > 0 && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck).Select(c => new
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID.Value,
                            GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                            GroupOfVehicleCode = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.Code : string.Empty,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            CurrentValue = c.CurrentValue,
                            RemainValue = c.RemainValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            Specification = c.Specification,
                            IsRent = c.IsRent,
                            RentID = c.RentID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            Note = c.CAT_Vehicle.Note,
                            IsOwn = c.CAT_Vehicle.IsOwn,
                            CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                            TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                            MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                            RegWeight = c.CAT_Vehicle.RegWeight,
                            RegCapacity = c.CAT_Vehicle.RegCapacity,
                            Lat = c.CAT_Vehicle.Lat,
                            Lng = c.CAT_Vehicle.Lng,
                            MinWeight = c.CAT_Vehicle.MinWeight,
                            MinCapacity = c.CAT_Vehicle.MinCapacity,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod,
                            DriverID = c.CAT_Vehicle.DriverID,
                            DriverCode = c.CAT_Vehicle.DriverID > 0 ? c.CAT_Vehicle.FLM_Driver.Code : string.Empty,
                            AssistantID = c.CAT_Vehicle.AssistantID,
                            AssistantCode = c.CAT_Vehicle.AssistantID > 0 ? c.CAT_Vehicle.FLM_Driver1.Code : string.Empty,
                            EmptyWeight = c.CAT_Vehicle.EmptyWeight,
                            TempMax = c.CAT_Vehicle.TempMax,
                            TempMin = c.CAT_Vehicle.TempMin,
                            GPSCode = c.CAT_Vehicle.GPSCode,
                        }).ToList();

                        var lstMaterial = model.FLM_Material.Select(c => new { c.ID, c.Code, c.MaterialName }).ToList();
                        Dictionary<int, int> dicMaterial = new Dictionary<int, int>();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col, "Trọng tải", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        int colWeight = col; col += 3;
                        cells.Add(HelperExcel.NewCell(col, "Số khối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        int colCapacity = col; col += 3;
                        cells.Add(HelperExcel.NewCell(col++, "Trọng tải không chở hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Phân loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tài xế", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Phụ lái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Năm sản xuất", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Nhà sản xuất", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Giá trị ban đầu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Giá trị hiện tại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "T/g k.hao(tháng)", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "T/g bắt đầu tính KH", HelperExcel.ColorWhite, HelperExcel.ColorGreen, "@"));
                        cells.Add(HelperExcel.NewCell(col++, "T/g b.hành (tháng)", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Ngày kết thúc BH", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Thông số kỹ thuật", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Nhiệt độ thấp nhất", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Nhiệt độ cao nhất", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã GPS", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        foreach (var item in lstMaterial)
                        {
                            dicMaterial.Add(item.ID, col);
                            cells.Add(HelperExcel.NewCell(col++, item.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        }
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        cells = new List<Cell>();
                        col = colWeight;
                        cells.Add(HelperExcel.NewCell(col++, "Đăng kí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối thiểu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối Đa", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        col = colCapacity;
                        cells.Add(HelperExcel.NewCell(col++, "Đăng kí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối thiểu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối Đa", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        col = 0;
                        ws.MergedCells = new List<string>(){ 
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col+=6, 0, 1),
                            HelperExcel.AddressColumns(0, colWeight, colWeight+2),
                            HelperExcel.AddressColumns(0, colCapacity, colCapacity+2),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1)
                        };
                        foreach (var item in lstMaterial)
                        {
                            cells.Add(HelperExcel.NewCell(col++, item.MaterialName, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        }

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        var lstMaterialInVehicle = model.FLM_MaterialQuota.Select(c => new { c.VehicleID, c.MaterialID, c.QuantityPerKM }).ToList();
                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, item.RegNo));
                            cells.Add(HelperExcel.NewCell(col++, item.RegWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MinWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MaxWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.RegCapacity, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MinCapacity, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MaxCapacity, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.EmptyWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfVehicleCode));
                            cells.Add(HelperExcel.NewCell(col++, item.DriverCode));
                            cells.Add(HelperExcel.NewCell(col++, item.AssistantCode));
                            cells.Add(HelperExcel.NewCell(col++, item.YearOfProduction, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));
                            cells.Add(HelperExcel.NewCell(col++, item.Manufactor));
                            cells.Add(HelperExcel.NewCell(col++, item.BaseValue, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatMoney));
                            cells.Add(HelperExcel.NewCell(col++, item.CurrentValue, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatMoney));
                            cells.Add(HelperExcel.NewCell(col++, item.DepreciationPeriod, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));

                            if (item.DepreciationStart.HasValue)
                                cells.Add(HelperExcel.NewCell(col++, item.DepreciationStart.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));
                            else
                                cells.Add(HelperExcel.NewCell(col++, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));

                            cells.Add(HelperExcel.NewCell(col++, item.WarrantyPeriod, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));

                            if (item.WarrantyEnd.HasValue)
                                cells.Add(HelperExcel.NewCell(col++, item.WarrantyEnd.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            else
                                cells.Add(HelperExcel.NewCell(col++, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));

                            cells.Add(HelperExcel.NewCell(col++, item.Specification));
                            cells.Add(HelperExcel.NewCell(col++, item.TempMin, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.TempMax, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.GPSCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));

                            foreach (var material in lstMaterialInVehicle.Where(c => c.VehicleID == item.ID))
                            {
                                if (dicMaterial.ContainsKey(material.MaterialID))
                                    cells.Add(HelperExcel.NewCell(dicMaterial[material.MaterialID], material.QuantityPerKM, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMAsset_Truck_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colCATVehicleID = colData++;
                    int colGroupVehicleID = colData++;
                    int colDriverID = colData++;
                    int colAssistantID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new { c.ID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstCATVehicleID = model.CAT_Vehicle.Where(c => c.RegNo != null && c.RegNo != "").Select(c => new { c.ID, c.RegNo, c.TypeOfVehicleID }).ToList();
                    var lstGroupOfVehicleID = model.CAT_GroupOfVehicle.Select(c => new { c.ID, c.Code, c.GroupName }).ToList();
                    var lstDriverID = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code != null && c.Code != "").Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataRegCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMinCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataEmptyWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupVehicle = HelperExcel.GetString(checkRow, colData++);
                        string dataDriver = HelperExcel.GetString(checkRow, colData++);
                        string dataAssisstance = HelperExcel.GetString(checkRow, colData++);
                        string dataYear = HelperExcel.GetString(checkRow, colData++);
                        string dataManufactor = HelperExcel.GetString(checkRow, colData++);
                        string dataBaseValue = HelperExcel.GetString(checkRow, colData++);
                        string dataCurrentValue = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationStart = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyEnd = HelperExcel.GetString(checkRow, colData++);
                        string dataSpecification = HelperExcel.GetString(checkRow, colData++);
                        string dataTempMin = HelperExcel.GetString(checkRow, colData++);
                        string dataTempMax = HelperExcel.GetString(checkRow, colData++);
                        string dataGPSCode = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCATVehicleID.Where(c => c.RegNo == dataRegNo && c.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTruck).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, valid);
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstCATVehicleID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATVehicleID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMinWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMaxWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegCapacity, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMinCapacity, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMaxCapacity, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataEmptyWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupVehicle) && lstGroupOfVehicleID.Where(c => c.Code == dataGroupVehicle).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGroupOfVehicleID.FirstOrDefault(c => c.Code == dataGroupVehicle);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataDriver) && lstDriverID.Where(c => c.Code == dataDriver).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstDriverID.FirstOrDefault(c => c.Code == dataDriver);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataAssisstance) && lstDriverID.Where(c => c.Code == dataAssisstance).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstDriverID.FirstOrDefault(c => c.Code == dataAssisstance);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssistantID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataYear, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataManufactor, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBaseValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCurrentValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyEnd, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSpecification, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTempMin, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTempMax, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataGPSCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMAsset_Truck_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colCATVehicleID = colData++;
                    int colGroupVehicleID = colData++;
                    int colDriverID = colData++;
                    int colAssistantID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new { c.ID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstCATVehicleID = model.CAT_Vehicle.Where(c => c.RegNo != null && c.RegNo != "").Select(c => new { c.ID, c.RegNo, c.TypeOfVehicleID }).ToList();
                    var lstGroupOfVehicleID = model.CAT_GroupOfVehicle.Select(c => new { c.ID, c.Code, c.GroupName }).ToList();
                    var lstDriverID = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code != null && c.Code != "").Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataRegCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMinCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataEmptyWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupVehicle = HelperExcel.GetString(checkRow, colData++);
                        string dataDriver = HelperExcel.GetString(checkRow, colData++);
                        string dataAssisstance = HelperExcel.GetString(checkRow, colData++);
                        string dataYear = HelperExcel.GetString(checkRow, colData++);
                        string dataManufactor = HelperExcel.GetString(checkRow, colData++);
                        string dataBaseValue = HelperExcel.GetString(checkRow, colData++);
                        string dataCurrentValue = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationStart = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyEnd = HelperExcel.GetString(checkRow, colData++);
                        string dataSpecification = HelperExcel.GetString(checkRow, colData++);
                        string dataTempMin = HelperExcel.GetString(checkRow, colData++);
                        string dataTempMax = HelperExcel.GetString(checkRow, colData++);
                        string dataGPSCode = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCATVehicleID.Where(c => c.RegNo == dataRegNo && c.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTruck).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, valid);
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstCATVehicleID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATVehicleID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMinWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMaxWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegCapacity, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMinCapacity, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMaxCapacity, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataEmptyWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupVehicle) && lstGroupOfVehicleID.Where(c => c.Code == dataGroupVehicle).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGroupOfVehicleID.FirstOrDefault(c => c.Code == dataGroupVehicle);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataDriver) && lstDriverID.Where(c => c.Code == dataDriver).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstDriverID.FirstOrDefault(c => c.Code == dataDriver);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataAssisstance) && lstDriverID.Where(c => c.Code == dataAssisstance).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstDriverID.FirstOrDefault(c => c.Code == dataAssisstance);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssistantID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataYear, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataManufactor, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBaseValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCurrentValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyEnd, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSpecification, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTempMin, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTempMax, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataGPSCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMAsset_Truck_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colCATVehicleID = colData++;
                    int colGroupVehicleID = colData++;
                    int colDriverID = colData++;
                    int colAssistantID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                            string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataRegCapacity = HelperExcel.GetString(checkRow, colData++);
                            string dataMinCapacity = HelperExcel.GetString(checkRow, colData++);
                            string dataMaxCapacity = HelperExcel.GetString(checkRow, colData++);
                            string dataEmptyWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupVehicle = HelperExcel.GetString(checkRow, colData++);
                            string dataDriver = HelperExcel.GetString(checkRow, colData++);
                            string dataAssisstance = HelperExcel.GetString(checkRow, colData++);
                            string dataYear = HelperExcel.GetString(checkRow, colData++);
                            string dataManufactor = HelperExcel.GetString(checkRow, colData++);
                            string dataBaseValue = HelperExcel.GetString(checkRow, colData++);
                            string dataCurrentValue = HelperExcel.GetString(checkRow, colData++);
                            string dataDepreciationPeriod = HelperExcel.GetString(checkRow, colData++);
                            string dataDepreciationStart = HelperExcel.GetString(checkRow, colData++);
                            string dataWarrantyPeriod = HelperExcel.GetString(checkRow, colData++);
                            string dataWarrantyEnd = HelperExcel.GetString(checkRow, colData++);
                            string dataSpecification = HelperExcel.GetString(checkRow, colData++);
                            string dataTempMin = HelperExcel.GetString(checkRow, colData++);
                            string dataTempMax = HelperExcel.GetString(checkRow, colData++);
                            string dataGPSCode = HelperExcel.GetString(checkRow, colData++);

                            dataRegNo = dataRegNo.ToUpper();
                            int? assetid = Convert.ToInt32(HelperExcel.GetString(checkRow, colAssetID));
                            int? catvehicleid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCATVehicleID));
                            int? groupvehicleid = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupVehicleID));
                            int? driverid = Convert.ToInt32(HelperExcel.GetString(checkRow, colDriverID));
                            int? assistantid = Convert.ToInt32(HelperExcel.GetString(checkRow, colAssistantID));

                            var objCAT = model.CAT_Vehicle.FirstOrDefault(c => c.ID == catvehicleid);
                            if (objCAT == null)
                            {
                                objCAT = new CAT_Vehicle();
                                objCAT.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTruck;
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;
                                objCAT.IsOwn = true;
                                objCAT.RegNo = dataRegNo;
                                model.CAT_Vehicle.Add(objCAT);
                            }
                            else
                            {
                                objCAT.ModifiedBy = Account.UserName;
                                objCAT.ModifiedDate = DateTime.Now;
                            }
                            objCAT.RegWeight = !string.IsNullOrEmpty(dataRegWeight) ? Convert.ToDouble(dataRegWeight) : 0;
                            objCAT.MaxWeight = !string.IsNullOrEmpty(dataMaxWeight) ? Convert.ToDouble(dataMaxWeight) : 0;
                            objCAT.MinWeight = !string.IsNullOrEmpty(dataMinWeight) ? Convert.ToDouble(dataMinWeight) : 0;
                            objCAT.MaxWeightCal = !string.IsNullOrEmpty(dataMaxWeight) ? Convert.ToDouble(dataMaxWeight) : 0;
                            objCAT.EmptyWeight = !string.IsNullOrEmpty(dataEmptyWeight) ? Convert.ToDouble(dataEmptyWeight) : 0;
                            objCAT.RegCapacity = !string.IsNullOrEmpty(dataRegCapacity) ? Convert.ToDouble(dataRegCapacity) : 0;
                            objCAT.MaxCapacity = !string.IsNullOrEmpty(dataMaxCapacity) ? Convert.ToDouble(dataMaxCapacity) : 0;
                            objCAT.MinCapacity = !string.IsNullOrEmpty(dataMinCapacity) ? Convert.ToDouble(dataMinCapacity) : 0;
                            objCAT.TempMax = !string.IsNullOrEmpty(dataTempMax) ? Convert.ToDouble(dataTempMax) : 0;
                            objCAT.TempMin = !string.IsNullOrEmpty(dataTempMin) ? Convert.ToDouble(dataTempMin) : 0;

                            objCAT.GroupOfVehicleID = groupvehicleid > 0 ? groupvehicleid : null;
                            objCAT.DriverID = driverid > 0 ? driverid : null;
                            objCAT.AssistantID = assistantid > 0 ? assistantid : null;

                            if (driverid > 0)
                            {
                                var objDriver = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == driverid.Value).Select(c => new { c.CAT_Driver.LastName, c.CAT_Driver.FirstName, c.CAT_Driver.Cellphone }).FirstOrDefault();
                                if (objDriver != null)
                                {
                                    objCAT.DriverName = objDriver.LastName + " " + objDriver.FirstName;
                                    objCAT.Cellphone = objDriver.Cellphone;
                                }
                            }
                            objCAT.GPSCode = dataGPSCode;

                            var objFLM = model.FLM_Asset.FirstOrDefault(c => c.ID == assetid);
                            if (objFLM == null)
                            {
                                objFLM = new FLM_Asset();
                                objFLM.CAT_Vehicle = objCAT;
                                objFLM.CreatedBy = Account.UserName;
                                objFLM.CreatedDate = DateTime.Now;
                                objFLM.SYSCustomerID = Account.SYSCustomerID;
                                objFLM.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetTruck;
                                objFLM.IsDisposal = false;
                                objFLM.IsRent = false;
                                objFLM.Code = dataRegNo;
                                model.FLM_Asset.Add(objFLM);
                            }
                            else
                            {
                                objFLM.ModifiedBy = Account.UserName;
                                objFLM.ModifiedDate = DateTime.Now;
                            }
                            objFLM.YearOfProduction = dataYear;
                            objFLM.Manufactor = dataManufactor;
                            objFLM.BaseValue = !string.IsNullOrEmpty(dataBaseValue) ? Convert.ToDecimal(dataBaseValue) : 0;
                            objFLM.CurrentValue = !string.IsNullOrEmpty(dataCurrentValue) ? Convert.ToDecimal(dataCurrentValue) : 0;
                            objFLM.DepreciationPeriod = !string.IsNullOrEmpty(dataDepreciationPeriod) ? Convert.ToInt32(dataDepreciationPeriod) : 0;
                            objFLM.DepreciationStart = !string.IsNullOrEmpty(dataDepreciationStart) ? HelperExcel.ValueToDate(dataDepreciationStart) : null;
                            objFLM.Specification = dataSpecification;
                            objFLM.WarrantyEnd = !string.IsNullOrEmpty(dataWarrantyEnd) ? HelperExcel.ValueToDate(dataWarrantyEnd) : null;
                            objFLM.WarrantyPeriod = !string.IsNullOrEmpty(dataWarrantyPeriod) ? Convert.ToInt32(dataWarrantyPeriod) : 0;

                            var objCUS = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID == objCAT.ID);
                            if (objCUS == null)
                            {
                                objCUS = new CUS_Vehicle();
                                objCUS.CreatedBy = Account.UserName;
                                objCUS.CreatedDate = DateTime.Now;
                                objCUS.CustomerID = Account.SYSCustomerID;
                                objCUS.CAT_Vehicle = objCAT;
                                model.CUS_Vehicle.Add(objCUS);
                            }

                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMAsset_Tractor_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var data = model.FLM_Asset.Where(c => c.VehicleID > 0 && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new
                        {
                            ID = c.ID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                            RegWeight = c.CAT_Vehicle.RegWeight,
                            MinWeight = c.CAT_Vehicle.MinWeight,
                            EmptyWeight = c.CAT_Vehicle.EmptyWeight,
                            GroupOfVehicleCode = c.CAT_Vehicle.GroupOfVehicleID > 0 ? c.CAT_Vehicle.CAT_GroupOfVehicle.Code : string.Empty,
                            DriverCode = c.CAT_Vehicle.DriverID > 0 ? c.CAT_Vehicle.FLM_Driver.Code : string.Empty,
                            AssistantCode = c.CAT_Vehicle.AssistantID > 0 ? c.CAT_Vehicle.FLM_Driver1.Code : string.Empty,
                            RomoocDefaultRegNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            CurrentValue = c.CurrentValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod,
                            Specification = c.Specification,
                            GPSCode = c.CAT_Vehicle.GPSCode
                        }).ToList();

                        var lstMaterial = model.FLM_Material.Select(c => new { c.ID, c.Code, c.MaterialName }).ToList();
                        Dictionary<int, int> dicMaterial = new Dictionary<int, int>();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col, "Trọng tải", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        int colWeight = col; col += 3;
                        cells.Add(HelperExcel.NewCell(col++, "Trọng tải không chở hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Phân loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tài xế", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Phụ lái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Romooc mặc định", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Năm sản xuất", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Nhà sản xuất", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Giá trị ban đầu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Giá trị hiện tại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "T/g k.hao(tháng)", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "T/g bắt đầu tính KH", HelperExcel.ColorWhite, HelperExcel.ColorGreen, "@"));
                        cells.Add(HelperExcel.NewCell(col++, "T/g b.hành (tháng)", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Ngày kết thúc BH", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Thông số kỹ thuật", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã GPS", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        foreach (var item in lstMaterial)
                        {
                            dicMaterial.Add(item.ID, col);
                            cells.Add(HelperExcel.NewCell(col++, item.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        }
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        cells = new List<Cell>();
                        col = colWeight;
                        cells.Add(HelperExcel.NewCell(col++, "Đăng kí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối thiểu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối Đa", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        col = 0;
                        ws.MergedCells = new List<string>(){ 
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col+=3, 0, 1),
                            HelperExcel.AddressColumns(0, colWeight, colWeight+2),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1)
                        };
                        foreach (var item in lstMaterial)
                        {
                            cells.Add(HelperExcel.NewCell(col++, item.MaterialName, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        }

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        var lstMaterialInVehicle = model.FLM_MaterialQuota.Select(c => new { c.VehicleID, c.MaterialID, c.QuantityPerKM }).ToList();
                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, item.RegNo));
                            cells.Add(HelperExcel.NewCell(col++, item.RegWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MinWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MaxWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.EmptyWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfVehicleCode));
                            cells.Add(HelperExcel.NewCell(col++, item.DriverCode));
                            cells.Add(HelperExcel.NewCell(col++, item.AssistantCode));
                            cells.Add(HelperExcel.NewCell(col++, item.RomoocDefaultRegNo));
                            cells.Add(HelperExcel.NewCell(col++, item.YearOfProduction, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));
                            cells.Add(HelperExcel.NewCell(col++, item.Manufactor));
                            cells.Add(HelperExcel.NewCell(col++, item.BaseValue, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatMoney));
                            cells.Add(HelperExcel.NewCell(col++, item.CurrentValue, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatMoney));
                            cells.Add(HelperExcel.NewCell(col++, item.DepreciationPeriod, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));

                            if (item.DepreciationStart.HasValue)
                                cells.Add(HelperExcel.NewCell(col++, item.DepreciationStart.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));
                            else
                                cells.Add(HelperExcel.NewCell(col++, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));

                            cells.Add(HelperExcel.NewCell(col++, item.WarrantyPeriod, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));

                            if (item.WarrantyEnd.HasValue)
                                cells.Add(HelperExcel.NewCell(col++, item.WarrantyEnd.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            else
                                cells.Add(HelperExcel.NewCell(col++, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));

                            cells.Add(HelperExcel.NewCell(col++, item.Specification));
                            cells.Add(HelperExcel.NewCell(col++, item.GPSCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));

                            foreach (var material in lstMaterialInVehicle.Where(c => c.VehicleID == item.ID))
                            {
                                if (dicMaterial.ContainsKey(material.MaterialID))
                                    cells.Add(HelperExcel.NewCell(dicMaterial[material.MaterialID], material.QuantityPerKM, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            }

                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMAsset_Tractor_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colCATVehicleID = colData++;
                    int colGroupVehicleID = colData++;
                    int colDriverID = colData++;
                    int colAssistantID = colData++;
                    int colRomoocID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new { c.ID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstCATVehicleID = model.CAT_Vehicle.Where(c => c.RegNo != null && c.RegNo != "").Select(c => new { c.ID, c.RegNo, c.TypeOfVehicleID }).ToList();
                    var lstGroupOfVehicleID = model.CAT_GroupOfVehicle.Select(c => new { c.ID, c.Code, c.GroupName }).ToList();
                    var lstDriverID = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code != null && c.Code != "").Select(c => new { c.ID, c.Code }).ToList();
                    var lstRomoocID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && !string.IsNullOrEmpty(c.CAT_Romooc.RegNo) && c.RomoocID > 0 && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new { c.RomoocID, c.CAT_Romooc.RegNo }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataEmptyWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupVehicle = HelperExcel.GetString(checkRow, colData++);
                        string dataDriver = HelperExcel.GetString(checkRow, colData++);
                        string dataAssisstance = HelperExcel.GetString(checkRow, colData++);
                        string dataRomooc = HelperExcel.GetString(checkRow, colData++);
                        string dataYear = HelperExcel.GetString(checkRow, colData++);
                        string dataManufactor = HelperExcel.GetString(checkRow, colData++);
                        string dataBaseValue = HelperExcel.GetString(checkRow, colData++);
                        string dataCurrentValue = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationStart = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyEnd = HelperExcel.GetString(checkRow, colData++);
                        string dataSpecification = HelperExcel.GetString(checkRow, colData++);
                        string dataGPSCode = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCATVehicleID.Where(c => c.RegNo == dataRegNo && c.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTractor).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, valid);
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstCATVehicleID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATVehicleID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMinWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMaxWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataEmptyWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupVehicle) && lstGroupOfVehicleID.Where(c => c.Code == dataGroupVehicle).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGroupOfVehicleID.FirstOrDefault(c => c.Code == dataGroupVehicle);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataDriver) && lstDriverID.Where(c => c.Code == dataDriver).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstDriverID.FirstOrDefault(c => c.Code == dataDriver);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataAssisstance) && lstDriverID.Where(c => c.Code == dataAssisstance).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstDriverID.FirstOrDefault(c => c.Code == dataAssisstance);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssistantID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataRomooc) && lstRomoocID.Where(c => c.RegNo == dataRomooc).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstRomoocID.FirstOrDefault(c => c.RegNo == dataRomooc);
                            if (objID != null)
                                valid = objID.RomoocID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRomoocID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataYear, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataManufactor, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBaseValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCurrentValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyEnd, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSpecification, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMAsset_Tractor_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colCATVehicleID = colData++;
                    int colGroupVehicleID = colData++;
                    int colDriverID = colData++;
                    int colAssistantID = colData++;
                    int colRomoocID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new { c.ID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstCATVehicleID = model.CAT_Vehicle.Where(c => c.RegNo != null && c.RegNo != "").Select(c => new { c.ID, c.RegNo, c.TypeOfVehicleID }).ToList();
                    var lstGroupOfVehicleID = model.CAT_GroupOfVehicle.Select(c => new { c.ID, c.Code, c.GroupName }).ToList();
                    var lstDriverID = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code != null && c.Code != "").Select(c => new { c.ID, c.Code }).ToList();
                    var lstRomoocID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && !string.IsNullOrEmpty(c.CAT_Romooc.RegNo) && c.RomoocID > 0 && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new { c.RomoocID, c.CAT_Romooc.RegNo }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataEmptyWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupVehicle = HelperExcel.GetString(checkRow, colData++);
                        string dataDriver = HelperExcel.GetString(checkRow, colData++);
                        string dataAssisstance = HelperExcel.GetString(checkRow, colData++);
                        string dataRomooc = HelperExcel.GetString(checkRow, colData++);
                        string dataYear = HelperExcel.GetString(checkRow, colData++);
                        string dataManufactor = HelperExcel.GetString(checkRow, colData++);
                        string dataBaseValue = HelperExcel.GetString(checkRow, colData++);
                        string dataCurrentValue = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationStart = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyEnd = HelperExcel.GetString(checkRow, colData++);
                        string dataSpecification = HelperExcel.GetString(checkRow, colData++);
                        string dataGPSCode = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCATVehicleID.Where(c => c.RegNo == dataRegNo && c.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTractor).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, valid);
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstCATVehicleID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATVehicleID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMinWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMaxWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataEmptyWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupVehicle) && lstGroupOfVehicleID.Where(c => c.Code == dataGroupVehicle).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGroupOfVehicleID.FirstOrDefault(c => c.Code == dataGroupVehicle);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataDriver) && lstDriverID.Where(c => c.Code == dataDriver).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstDriverID.FirstOrDefault(c => c.Code == dataDriver);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataAssisstance) && lstDriverID.Where(c => c.Code == dataAssisstance).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstDriverID.FirstOrDefault(c => c.Code == dataAssisstance);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssistantID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataRomooc) && lstRomoocID.Where(c => c.RegNo == dataRomooc).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstRomoocID.FirstOrDefault(c => c.RegNo == dataRomooc);
                            if (objID != null)
                                valid = objID.RomoocID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRomoocID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataYear, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataManufactor, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBaseValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCurrentValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyEnd, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSpecification, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                        indexError++;

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMAsset_Tractor_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colCATVehicleID = colData++;
                    int colGroupVehicleID = colData++;
                    int colDriverID = colData++;
                    int colAssistantID = colData++;
                    int colRomoocID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                            string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataEmptyWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupVehicle = HelperExcel.GetString(checkRow, colData++);
                            string dataDriver = HelperExcel.GetString(checkRow, colData++);
                            string dataAssisstance = HelperExcel.GetString(checkRow, colData++);
                            string dataRomooc = HelperExcel.GetString(checkRow, colData++);
                            string dataYear = HelperExcel.GetString(checkRow, colData++);
                            string dataManufactor = HelperExcel.GetString(checkRow, colData++);
                            string dataBaseValue = HelperExcel.GetString(checkRow, colData++);
                            string dataCurrentValue = HelperExcel.GetString(checkRow, colData++);
                            string dataDepreciationPeriod = HelperExcel.GetString(checkRow, colData++);
                            string dataDepreciationStart = HelperExcel.GetString(checkRow, colData++);
                            string dataWarrantyPeriod = HelperExcel.GetString(checkRow, colData++);
                            string dataWarrantyEnd = HelperExcel.GetString(checkRow, colData++);
                            string dataSpecification = HelperExcel.GetString(checkRow, colData++);
                            string dataGPSCode = HelperExcel.GetString(checkRow, colData++);

                            dataRegNo = dataRegNo.ToUpper();
                            int? assetid = Convert.ToInt32(HelperExcel.GetString(checkRow, colAssetID));
                            int? catvehicleid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCATVehicleID));
                            int? groupvehicleid = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupVehicleID));
                            int? driverid = Convert.ToInt32(HelperExcel.GetString(checkRow, colDriverID));
                            int? assistantid = Convert.ToInt32(HelperExcel.GetString(checkRow, colAssistantID));
                            int? romoocid = Convert.ToInt32(HelperExcel.GetString(checkRow, colRomoocID));

                            var objCAT = model.CAT_Vehicle.FirstOrDefault(c => c.ID == catvehicleid);
                            if (objCAT == null)
                            {
                                objCAT = new CAT_Vehicle();
                                objCAT.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTractor;
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;
                                objCAT.IsOwn = true;
                                objCAT.RegNo = dataRegNo;
                                model.CAT_Vehicle.Add(objCAT);
                            }
                            else
                            {
                                objCAT.ModifiedBy = Account.UserName;
                                objCAT.ModifiedDate = DateTime.Now;
                            }
                            objCAT.RegWeight = !string.IsNullOrEmpty(dataRegWeight) ? Convert.ToDouble(dataRegWeight) : 0;
                            objCAT.MaxWeight = !string.IsNullOrEmpty(dataMaxWeight) ? Convert.ToDouble(dataMaxWeight) : 0;
                            objCAT.MinWeight = !string.IsNullOrEmpty(dataMinWeight) ? Convert.ToDouble(dataMinWeight) : 0;
                            objCAT.MaxWeightCal = !string.IsNullOrEmpty(dataMaxWeight) ? Convert.ToDouble(dataMaxWeight) : 0;
                            objCAT.EmptyWeight = !string.IsNullOrEmpty(dataEmptyWeight) ? Convert.ToDouble(dataEmptyWeight) : 0;
                            objCAT.GPSCode = dataGPSCode;

                            objCAT.GroupOfVehicleID = groupvehicleid > 0 ? groupvehicleid : null;
                            objCAT.DriverID = driverid > 0 ? driverid : null;
                            objCAT.AssistantID = assistantid > 0 ? assistantid : null;
                            objCAT.CurrentRomoocID = romoocid > 0 ? romoocid : null;

                            if (driverid > 0)
                            {
                                var objDriver = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == driverid.Value).Select(c => new { c.CAT_Driver.LastName, c.CAT_Driver.FirstName, c.CAT_Driver.Cellphone }).FirstOrDefault();
                                if (objDriver != null)
                                {
                                    objCAT.DriverName = objDriver.LastName + " " + objDriver.FirstName;
                                    objCAT.Cellphone = objDriver.Cellphone;
                                }
                            }

                            var objFLM = model.FLM_Asset.FirstOrDefault(c => c.ID == assetid);
                            if (objFLM == null)
                            {
                                objFLM = new FLM_Asset();
                                objFLM.CAT_Vehicle = objCAT;
                                objFLM.CreatedBy = Account.UserName;
                                objFLM.CreatedDate = DateTime.Now;
                                objFLM.SYSCustomerID = Account.SYSCustomerID;
                                objFLM.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetTractor;
                                objFLM.IsDisposal = false;
                                objFLM.IsRent = false;
                                objFLM.Code = dataRegNo;
                                model.FLM_Asset.Add(objFLM);
                            }
                            else
                            {
                                objFLM.ModifiedBy = Account.UserName;
                                objFLM.ModifiedDate = DateTime.Now;
                            }
                            objFLM.YearOfProduction = dataYear;
                            objFLM.Manufactor = dataManufactor;
                            objFLM.BaseValue = !string.IsNullOrEmpty(dataBaseValue) ? Convert.ToDecimal(dataBaseValue) : 0;
                            objFLM.CurrentValue = !string.IsNullOrEmpty(dataCurrentValue) ? Convert.ToDecimal(dataCurrentValue) : 0;
                            objFLM.DepreciationPeriod = !string.IsNullOrEmpty(dataDepreciationPeriod) ? Convert.ToInt32(dataDepreciationPeriod) : 0;
                            objFLM.DepreciationStart = !string.IsNullOrEmpty(dataDepreciationStart) ? HelperExcel.ValueToDate(dataDepreciationStart) : null;
                            objFLM.Specification = dataSpecification;
                            objFLM.WarrantyEnd = !string.IsNullOrEmpty(dataWarrantyEnd) ? HelperExcel.ValueToDate(dataWarrantyEnd) : null;
                            objFLM.WarrantyPeriod = !string.IsNullOrEmpty(dataWarrantyPeriod) ? Convert.ToInt32(dataWarrantyPeriod) : 0;

                            var objCUS = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID == objCAT.ID);
                            if (objCUS == null)
                            {
                                objCUS = new CUS_Vehicle();
                                objCUS.CreatedBy = Account.UserName;
                                objCUS.CreatedDate = DateTime.Now;
                                objCUS.CustomerID = Account.SYSCustomerID;
                                objCUS.CAT_Vehicle = objCAT;
                                model.CUS_Vehicle.Add(objCUS);
                            }

                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMAsset_Romooc_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int iRMooc = -(int)SYSVarType.TypeOfAssetRomooc;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        #region lấy dữ liệu
                        var data = model.FLM_Asset.Where(c => c.RomoocID > 0 && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iRMooc).Select(c => new
                        {
                            RegNo = c.CAT_Romooc.RegNo,
                            MaxWeight = c.CAT_Romooc.MaxWeight,
                            MinWeight = c.CAT_Vehicle.MinWeight,
                            EmptyWeight = c.CAT_Vehicle.EmptyWeight,
                            GroupOfVehicleCode = c.CAT_Romooc.GroupOfRomoocID > 0 ? c.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            CurrentValue = c.CurrentValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod,
                            Specification = c.Specification,
                        }).ToList();
                        #endregion

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[15];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 15; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Phân loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Trọng tải", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Năm sản xuất", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Nhà sản xuất", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Giá trị ban đầu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Giá trị hiện tại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("T/g k.hao(tháng)", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("T/g bắt đầu tính KH", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("T/g b.hành (tháng)", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Ngày kết thúc BH", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Thông số kỹ thuật", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        ws.MergedCells = new List<string>();
                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.RegNo));
                            cells.Add(HelperExcel.NewCell(-1, item.GroupOfVehicleCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                            cells.Add(HelperExcel.NewCell(-1, item.MaxWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(-1, item.YearOfProduction, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));
                            cells.Add(HelperExcel.NewCell(-1, item.Manufactor));
                            cells.Add(HelperExcel.NewCell(-1, item.BaseValue, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatMoney));
                            cells.Add(HelperExcel.NewCell(-1, item.CurrentValue, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatMoney));
                            cells.Add(HelperExcel.NewCell(-1, item.DepreciationPeriod, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));

                            if (item.DepreciationStart.HasValue)
                                cells.Add(HelperExcel.NewCell(-1, item.DepreciationStart.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));
                            else cells.Add(HelperExcel.NewCell(-1, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));

                            cells.Add(HelperExcel.NewCell(-1, item.WarrantyPeriod, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));

                            if (item.WarrantyEnd.HasValue)
                                cells.Add(HelperExcel.NewCell(-1, item.WarrantyEnd.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            else cells.Add(HelperExcel.NewCell(-1, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));

                            cells.Add(HelperExcel.NewCell(-1, item.Specification));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMAsset_Romooc_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colCATRomoocID = colData++;
                    int colGroupRomoocID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code != null && c.Code != null && c.RomoocID > 0).Select(c => new { c.ID, c.CAT_Romooc.RegNo }).ToList();
                    var lstCATRomoocID = model.CAT_Romooc.Where(c => c.RegNo != null && c.RegNo != "").Select(c => new { c.ID, c.RegNo }).ToList();
                    var lstGroupOfRomoocID = model.CAT_GroupOfRomooc.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfRomooc = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataYear = HelperExcel.GetString(checkRow, colData++);
                        string dataManufactor = HelperExcel.GetString(checkRow, colData++);
                        string dataBaseValue = HelperExcel.GetString(checkRow, colData++);
                        string dataCurrentValue = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationStart = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyEnd = HelperExcel.GetString(checkRow, colData++);
                        string dataSpecification = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, valid);
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstCATRomoocID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATRomoocID, valid);
                        } indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfRomooc) && lstGroupOfRomoocID.Where(c => c.Code == dataGroupOfRomooc).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGroupOfRomoocID.FirstOrDefault(c => c.Code == dataGroupOfRomooc);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupRomoocID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMaxWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataYear, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataManufactor, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBaseValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCurrentValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyEnd, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSpecification, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMAsset_Romooc_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colCATRomoocID = colData++;
                    int colGroupRomoocID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code != null && c.Code != null && c.RomoocID > 0).Select(c => new { c.ID, c.CAT_Romooc.RegNo }).ToList();
                    var lstCATRomoocID = model.CAT_Romooc.Where(c => c.RegNo != null && c.RegNo != "").Select(c => new { c.ID, c.RegNo }).ToList();
                    var lstGroupOfRomoocID = model.CAT_GroupOfRomooc.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfRomooc = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataYear = HelperExcel.GetString(checkRow, colData++);
                        string dataManufactor = HelperExcel.GetString(checkRow, colData++);
                        string dataBaseValue = HelperExcel.GetString(checkRow, colData++);
                        string dataCurrentValue = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataDepreciationStart = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyPeriod = HelperExcel.GetString(checkRow, colData++);
                        string dataWarrantyEnd = HelperExcel.GetString(checkRow, colData++);
                        string dataSpecification = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, valid);
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstCATRomoocID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATRomoocID, valid);
                        } indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfRomooc) && lstGroupOfRomoocID.Where(c => c.Code == dataGroupOfRomooc).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGroupOfRomoocID.FirstOrDefault(c => c.Code == dataGroupOfRomooc);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupRomoocID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataMaxWeight, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataYear, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataManufactor, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBaseValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCurrentValue, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepreciationStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyPeriod, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWarrantyEnd, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSpecification, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                        indexError++;

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMAsset_Romooc_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colCATRomoocID = colData++;
                    int colGroupRomoocID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupOfRomooc = HelperExcel.GetString(checkRow, colData++);
                            string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataYear = HelperExcel.GetString(checkRow, colData++);
                            string dataManufactor = HelperExcel.GetString(checkRow, colData++);
                            string dataBaseValue = HelperExcel.GetString(checkRow, colData++);
                            string dataCurrentValue = HelperExcel.GetString(checkRow, colData++);
                            string dataDepreciationPeriod = HelperExcel.GetString(checkRow, colData++);
                            string dataDepreciationStart = HelperExcel.GetString(checkRow, colData++);
                            string dataWarrantyPeriod = HelperExcel.GetString(checkRow, colData++);
                            string dataWarrantyEnd = HelperExcel.GetString(checkRow, colData++);
                            string dataSpecification = HelperExcel.GetString(checkRow, colData++);

                            dataRegNo = dataRegNo.ToUpper();
                            int? assetid = Convert.ToInt32(HelperExcel.GetString(checkRow, colAssetID));
                            int? catromoocid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCATRomoocID));
                            int? groupromoocid = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupRomoocID));

                            var objCAT = model.CAT_Romooc.FirstOrDefault(c => c.ID == catromoocid);
                            if (objCAT == null)
                            {
                                objCAT = new CAT_Romooc();
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;
                                objCAT.IsOwn = true;
                                objCAT.RegNo = dataRegNo;
                                model.CAT_Romooc.Add(objCAT);
                            }
                            else
                            {
                                objCAT.ModifiedBy = Account.UserName;
                                objCAT.ModifiedDate = DateTime.Now;
                            }
                            if (groupromoocid > 0)
                                objCAT.GroupOfRomoocID = groupromoocid.Value;
                            else
                                objCAT.GroupOfRomoocID = null;
                            objCAT.MaxWeight = !string.IsNullOrEmpty(dataMaxWeight) ? Convert.ToDouble(dataMaxWeight) : 0;

                            var objFLM = model.FLM_Asset.FirstOrDefault(c => c.ID == assetid);
                            if (objFLM == null)
                            {
                                objFLM = new FLM_Asset();
                                objFLM.CAT_Romooc = objCAT;
                                objFLM.CreatedBy = Account.UserName;
                                objFLM.CreatedDate = DateTime.Now;
                                objFLM.SYSCustomerID = Account.SYSCustomerID;
                                objFLM.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetRomooc;
                                objFLM.IsDisposal = false;
                                objFLM.IsRent = false;
                                objFLM.Code = dataRegNo;
                                model.FLM_Asset.Add(objFLM);
                            }
                            else
                            {
                                objFLM.ModifiedBy = Account.UserName;
                                objFLM.ModifiedDate = DateTime.Now;
                            }
                            objFLM.YearOfProduction = dataYear;
                            objFLM.Manufactor = dataManufactor;
                            objFLM.BaseValue = !string.IsNullOrEmpty(dataBaseValue) ? Convert.ToDecimal(dataBaseValue) : 0;
                            objFLM.CurrentValue = !string.IsNullOrEmpty(dataCurrentValue) ? Convert.ToDecimal(dataCurrentValue) : 0;
                            objFLM.DepreciationPeriod = !string.IsNullOrEmpty(dataDepreciationPeriod) ? Convert.ToInt32(dataDepreciationPeriod) : 0;
                            objFLM.DepreciationStart = !string.IsNullOrEmpty(dataDepreciationStart) ? HelperExcel.ValueToDate(dataDepreciationStart) : null;
                            objFLM.Specification = dataSpecification;
                            objFLM.WarrantyEnd = !string.IsNullOrEmpty(dataWarrantyEnd) ? HelperExcel.ValueToDate(dataWarrantyEnd) : null;
                            objFLM.WarrantyPeriod = !string.IsNullOrEmpty(dataWarrantyPeriod) ? Convert.ToInt32(dataWarrantyPeriod) : 0;

                            var objCUS = model.CUS_Romooc.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.RomoocID == objCAT.ID);
                            if (objCUS == null)
                            {
                                objCUS = new CUS_Romooc();
                                objCUS.CreatedBy = Account.UserName;
                                objCUS.CreatedDate = DateTime.Now;
                                objCUS.CustomerID = Account.SYSCustomerID;
                                objCUS.CAT_Romooc = objCAT;
                                model.CUS_Romooc.Add(objCUS);
                            }

                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Truck
        public DTOResult Truck_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTypeOfAssetTruck = -(int)SYSVarType.TypeOfAssetTruck;
                    var query = model.FLM_Asset.Where(c => c.VehicleID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iTypeOfAssetTruck).Select(c => new DTOFLMTruck
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID.Value,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        RegCapacity = c.CAT_Vehicle.RegCapacity,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MinCapacity = c.CAT_Vehicle.MinCapacity,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        ExprDay = c.ExprDay,
                        ExprInputDay = c.ExprInputDay,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMTruck>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMTruck Truck_Get(int id)
        {
            try
            {
                DTOFLMTruck result = new DTOFLMTruck();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var query = model.FLM_Asset.Where(c => c.ID == id).Select(c => new DTOFLMTruck
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                            GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            CurrentValue = c.CurrentValue,
                            RemainValue = c.RemainValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            Specification = c.Specification,
                            IsRent = c.IsRent,
                            RentID = c.RentID,
                            GPSCode = c.CAT_Vehicle.GPSCode,
                            RegNo = c.CAT_Vehicle.RegNo,
                            Note = c.CAT_Vehicle.Note,
                            IsOwn = c.CAT_Vehicle.IsOwn,
                            CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                            TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                            MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                            RegWeight = c.CAT_Vehicle.RegWeight,
                            RegCapacity = c.CAT_Vehicle.RegCapacity,
                            Lat = c.CAT_Vehicle.Lat,
                            Lng = c.CAT_Vehicle.Lng,
                            MinWeight = c.CAT_Vehicle.MinWeight,
                            MinCapacity = c.CAT_Vehicle.MinCapacity,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod,
                            DriverID = c.CAT_Vehicle.FLM_Driver.ID,
                            AssistantID = c.CAT_Vehicle.FLM_Driver1.ID,
                            ExprInputDay = c.ExprInputDay,
                            ExprDay = c.ExprDay,
                            ExprInputTOMaster = c.ExprInputTOMaster,
                            ExprTOMaster = c.ExprTOMaster,
                            HasDepreciation = c.FLM_FixedCost.Count() > 0,
                            LocationID = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.LocationID.Value : -1,
                            LocationCode = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Code : string.Empty,
                            LocationAddress = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Address : string.Empty,
                            EmptyWeight = c.CAT_Vehicle.EmptyWeight > 0 ? c.CAT_Vehicle.EmptyWeight.Value : 0,
                            TempMax = c.CAT_Vehicle.TempMax,
                            TempMin = c.CAT_Vehicle.TempMin,
                        });
                        result = query.FirstOrDefault();
                    }
                    else
                    {
                        var gov = model.CAT_GroupOfVehicle.FirstOrDefault();
                        if (gov != null) result.GroupOfVehicleID = gov.ID;
                        result.ID = 0;
                        result.LocationID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int Truck_Save(DTOFLMTruck item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int iTypeOfTruck = -(int)SYSVarType.TypeOfVehicleTruck;
                    int iTypeOfAssetTruck = -(int)SYSVarType.TypeOfAssetTruck;
                    if (model.CAT_Vehicle.Where(c => c.ID != item.VehicleID && c.RegNo.ToUpper().Trim() == item.RegNo.ToUpper().Trim()).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Số xe [" + item.RegNo + "] đã sử dụng");
                    else
                    {
                        if (!(item.RemainValue > 0))
                            item.RemainValue = 0;
                        if (!(item.BaseValue > 0))
                            item.BaseValue = 0;

                        var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                        if (obj == null)
                        {
                            obj = new CAT_Vehicle();
                            obj.TypeOfVehicleID = iTypeOfTruck;
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.IsOwn = true;
                            obj.RegNo = item.RegNo.ToUpper().Trim();
                            model.CAT_Vehicle.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }

                        obj.Note = item.Note;
                        obj.MaxWeight = item.MaxWeight;
                        obj.MaxCapacity = item.MaxCapacity;
                        obj.MaxWeightCal = item.MaxWeight;
                        obj.RegWeight = item.RegWeight;
                        obj.RegCapacity = item.RegCapacity;
                        obj.Lat = item.Lat;
                        obj.Lng = item.Lng;
                        obj.GPSCode = item.GPSCode;
                        obj.MinWeight = item.MinWeight;
                        obj.MinCapacity = item.MinCapacity;
                        obj.GroupOfVehicleID = item.GroupOfVehicleID;
                        obj.DriverID = item.DriverID;
                        obj.EmptyWeight = item.EmptyWeight > 0 ? item.EmptyWeight : null;
                        obj.TempMax = item.TempMax ?? null;
                        obj.TempMin = item.TempMin ?? null;

                        if (item.LocationID > 0)
                            obj.LocationID = item.LocationID;
                        else obj.LocationID = null;
                        if (item.DriverID.HasValue)
                        {
                            var driver = model.FLM_Driver.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == item.DriverID.Value);
                            if (driver != null)
                            {
                                obj.DriverName = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                                obj.Cellphone = driver.CAT_Driver.Cellphone;
                            }
                        }
                        obj.AssistantID = item.AssistantID;
                        var detail = model.FLM_Asset.FirstOrDefault(c => c.ID == item.ID);
                        if (detail == null)
                        {
                            detail = new FLM_Asset();
                            detail.CAT_Vehicle = obj;
                            detail.CreatedBy = Account.UserName;
                            detail.CreatedDate = DateTime.Now;
                            detail.SYSCustomerID = Account.SYSCustomerID;
                            detail.TypeOfAssetID = iTypeOfAssetTruck;
                            model.FLM_Asset.Add(detail);
                        }
                        else
                        {
                            detail.ModifiedBy = Account.UserName;
                            detail.ModifiedDate = DateTime.Now;
                        }
                        detail.YearOfProduction = item.YearOfProduction;
                        detail.Manufactor = item.Manufactor;
                        detail.BaseValue = item.BaseValue;
                        detail.CurrentValue = 0;
                        detail.RemainValue = item.RemainValue;
                        detail.CurrentValue = item.BaseValue.Value - item.RemainValue.Value;
                        //if (item.BaseValue >= 0 && item.RemainValue >= 0) detail.CurrentValue = (double)item.BaseValue.Value - (double)item.RemainValue.Value;
                        //else
                        //    detail.CurrentValue = item.RemainValue > 0 ? (double)item.CurrentValue : 0;

                        detail.DepreciationPeriod = item.DepreciationPeriod;
                        if (item.DepreciationStart.HasValue)
                            detail.DepreciationStart = item.DepreciationStart.Value.Date;
                        else
                            detail.DepreciationStart = null;
                        detail.Specification = item.Specification;
                        detail.RentID = item.RentID;
                        detail.IsDisposal = item.IsDisposal;
                        detail.WarrantyEnd = item.WarrantyEnd;
                        detail.WarrantyPeriod = item.WarrantyPeriod;
                        detail.ExprInputDay = item.ExprInputDay;
                        detail.ExprDay = item.ExprDay;
                        detail.ExprInputTOMaster = item.ExprInputTOMaster;
                        detail.ExprTOMaster = item.ExprTOMaster;
                        detail.ExprInputDay = item.ExprInputDay;
                        detail.ExprInputTOMaster = item.ExprInputTOMaster;

                        if (detail.RentID == null)
                            detail.IsRent = false;
                        else
                            detail.IsRent = true;

                        #region Lưu vào cus
                        var cus = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID == obj.ID);
                        if (cus == null)
                        {
                            cus = new CUS_Vehicle();
                            cus.CreatedBy = Account.UserName;
                            cus.CreatedDate = DateTime.Now;
                            cus.CustomerID = Account.SYSCustomerID;
                            cus.CAT_Vehicle = obj;
                            model.CUS_Vehicle.Add(cus);
                        }
                        #endregion

                        model.SaveChanges();
                        return detail.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Truck_Delete(DTOFLMTruck item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                    if (obj != null)
                    {
                        if (obj.ID <= 2)
                            throw FaultHelper.BusinessFault(null, null, "Không thể xóa xe này");
                        if (model.OPS_DITOMaster.Count(c => c.VehicleID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được phân chuyến");
                        if (model.OPS_COTOMaster.Count(c => c.VehicleID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được phân chuyến");
                        if (model.FLM_FixedCost.Count(c => c.AssetID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được vận hành");
                        if (model.FLM_ReceiptAsset.Count(c => c.AssetID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được vận hành");
                        if (model.FLM_ReceiptCost.Count(c => c.AssetID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được vận hành");
                        if (model.FLM_TransferHistory.Count(c => c.AssetOwnID == item.ID || c.AssetFromID == item.ID || c.AssetToID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được vận hành");

                        foreach (var detail in model.FLM_Asset.Where(c => c.VehicleID == obj.ID))
                        {
                            foreach (var child in model.FLM_AssetTimeSheet.Where(c => c.AssetID == detail.ID))
                                model.FLM_AssetTimeSheet.Remove(child);
                            foreach (var child in model.FLM_MaterialQuota.Where(c => c.VehicleID == detail.ID))
                                model.FLM_MaterialQuota.Remove(child);
                            foreach (var child in model.CAT_StationMonth.Where(c => c.AssetID == detail.ID))
                                model.CAT_StationMonth.Remove(child);
                            foreach (var child in model.FLM_Activity.Where(c => c.AssetID == detail.ID))
                                model.FLM_Activity.Remove(child);
                            foreach (var child in model.FLM_AssetRequire.Where(c => c.AssetID == detail.ID))
                                model.FLM_AssetRequire.Remove(child);
                            foreach (var child in model.FLM_ScheduleAsset.Where(c => c.AssetID == detail.ID))
                                model.FLM_ScheduleAsset.Remove(child);
                            foreach (var child in model.FLM_ScheduleFee.Where(c => c.AssetID == detail.ID))
                                model.FLM_ScheduleFee.Remove(child);
                            foreach (var child in model.FLM_ScheduleFeeDefault.Where(c => c.AssetID == detail.ID))
                                model.FLM_ScheduleFeeDefault.Remove(child);
                            model.FLM_Asset.Remove(detail);
                        }

                        foreach (var detail in model.FLM_VehiclePlan.Where(c => c.VehicleID == obj.ID))
                            model.FLM_VehiclePlan.Remove(detail);
                        foreach (var detail in obj.CAT_RomoocDefault.Where(c => c.VehicleID == obj.ID))
                            model.CAT_RomoocDefault.Remove(detail);
                        foreach (var detail in model.CUS_Vehicle.Where(c => c.VehicleID == obj.ID && c.CustomerID == Account.SYSCustomerID))
                            model.CUS_Vehicle.Remove(detail);
                        model.SaveChanges();

                        if (model.CUS_Vehicle.Where(c => c.VehicleID == obj.ID).Count() == 0)
                        {
                            model.CAT_Vehicle.Remove(obj);
                            model.SaveChanges();
                        }
                    }
                    else
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Truck_Import(List<DTOFLMTruckImport> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int iTypeOfTruck = -(int)SYSVarType.TypeOfVehicleTruck;
                    int iTypeOfAssetTruck = -(int)SYSVarType.TypeOfAssetTruck;
                    foreach (var item in lst.Where(c => c.ExcelSuccess))
                    {
                        if (model.CAT_Vehicle.Where(c => c.ID != item.VehicleID && c.RegNo.ToUpper().Trim() == item.RegNo.ToUpper().Trim()).Count() > 0)
                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                        else
                        {
                            #region luu Cat Vehicle
                            var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                            if (obj == null)
                            {
                                obj = new CAT_Vehicle();
                                obj.TypeOfVehicleID = iTypeOfTruck;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.IsOwn = true;
                                obj.RegNo = item.RegNo.ToUpper();
                                model.CAT_Vehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }

                            obj.Note = item.Note;
                            obj.IsOwn = item.IsOwn;
                            obj.MaxWeight = item.MaxWeight;
                            obj.MaxCapacity = item.MaxCapacity;
                            obj.MaxWeightCal = item.MaxWeight;
                            obj.RegWeight = item.RegWeight;
                            obj.RegCapacity = item.RegCapacity;
                            obj.Lat = item.Lat;
                            obj.Lng = item.Lng;
                            obj.GPSCode = item.GPSCode;
                            obj.MinWeight = item.MinWeight;
                            obj.MinCapacity = item.MinCapacity;
                            obj.GroupOfVehicleID = item.GroupOfVehicleID;
                            obj.DriverID = item.DriverID;
                            obj.AssistantID = item.AssistantID;
                            obj.EmptyWeight = item.EmptyWeight > 0 ? item.EmptyWeight : 0;
                            obj.TempMax = item.TempMax ?? null;
                            obj.TempMin = item.TempMin ?? null;

                            if (item.DriverID > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == item.DriverID.Value);
                                if (driver != null)
                                {
                                    obj.DriverName = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                                    obj.Cellphone = driver.CAT_Driver.Cellphone;
                                }
                            }
                            #endregion

                            #region luu vao FLMAsset
                            var detail = model.FLM_Asset.FirstOrDefault(c => c.ID == item.ID);
                            if (detail == null)
                            {
                                detail = new FLM_Asset();
                                detail.CAT_Vehicle = obj;
                                detail.CreatedBy = Account.UserName;
                                detail.CreatedDate = DateTime.Now;
                                detail.SYSCustomerID = Account.SYSCustomerID;
                                detail.TypeOfAssetID = iTypeOfAssetTruck;
                                model.FLM_Asset.Add(detail);
                            }
                            else
                            {
                                detail.ModifiedBy = Account.UserName;
                                detail.ModifiedDate = DateTime.Now;
                            }
                            detail.YearOfProduction = item.YearOfProduction;
                            detail.Manufactor = item.Manufactor;
                            detail.BaseValue = item.BaseValue;
                            detail.RemainValue = item.RemainValue;
                            if (!(detail.CurrentValue > 0))
                                detail.CurrentValue = item.BaseValue - item.RemainValue;
                            detail.DepreciationPeriod = item.DepreciationPeriod;
                            detail.Specification = item.Specification;
                            detail.RentID = item.RentID;
                            detail.IsDisposal = item.IsDisposal;
                            detail.WarrantyEnd = item.WarrantyEnd;
                            detail.WarrantyPeriod = item.WarrantyPeriod;
                            detail.RentID = item.RentID;
                            detail.IsRent = item.IsRent;

                            if (item.DepreciationStart.HasValue)
                                detail.DepreciationStart = item.DepreciationStart.Value.Date;
                            else
                                detail.DepreciationStart = null;
                            #endregion

                            #region Lưu vào cus
                            var cus = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID == obj.ID);
                            if (cus == null)
                            {
                                cus = new CUS_Vehicle();
                                cus.CreatedBy = Account.UserName;
                                cus.CreatedDate = DateTime.Now;
                                cus.CustomerID = Account.SYSCustomerID;
                                cus.CAT_Vehicle = obj;
                                model.CUS_Vehicle.Add(cus);
                            }
                            #endregion

                            #region lưu định mức
                            if (item.lstConsumption != null)
                            {
                                foreach (var Cons in item.lstConsumption)
                                {
                                    var objCons = model.FLM_MaterialQuota.FirstOrDefault(c => c.VehicleID == Cons.VehicleID && c.MaterialID == Cons.MaterialID);
                                    if (objCons == null)
                                    {
                                        objCons = new FLM_MaterialQuota();
                                        objCons.CreatedBy = Account.UserName;
                                        objCons.CreatedDate = DateTime.Now;
                                        objCons.MaterialID = Cons.MaterialID;
                                        objCons.FLM_Asset = detail;
                                        model.FLM_MaterialQuota.Add(objCons);
                                    }
                                    else
                                    {
                                        objCons.ModifiedBy = Account.UserName;
                                        objCons.ModifiedDate = DateTime.Now;
                                    }
                                    objCons.QuantityPerKM = Cons.QuantityPerKM;
                                }
                                List<int> lstConsNew = new List<int>();

                                lstConsNew = item.lstConsumption.Select(c => c.MaterialID).ToList();
                                var lstConsOld = model.FLM_MaterialQuota.Where(c => c.VehicleID == item.ID && !lstConsNew.Contains(c.MaterialID));
                                if (lstConsOld != null && lstConsOld.Count() > 0)
                                    model.FLM_MaterialQuota.RemoveRange(lstConsOld);
                            }



                            #endregion
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMTruckImport> Truck_Export()
        {
            try
            {
                List<DTOFLMTruckImport> result = new List<DTOFLMTruckImport>();
                using (var model = new DataEntities())
                {
                    int iTypeOfAssetTruck = -(int)SYSVarType.TypeOfAssetTruck;
                    result = model.FLM_Asset.Where(c => c.VehicleID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iTypeOfAssetTruck).Select(c => new DTOFLMTruckImport
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID.Value,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        GroupOfVehicleCode = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.Code : string.Empty,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        RemainValue = c.RemainValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        RegCapacity = c.CAT_Vehicle.RegCapacity,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MinCapacity = c.CAT_Vehicle.MinCapacity,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        DriverID = c.CAT_Vehicle.DriverID,
                        DriverCode = c.CAT_Vehicle.DriverID > 0 ? c.CAT_Vehicle.FLM_Driver.Code : string.Empty,
                        AssistantID = c.CAT_Vehicle.AssistantID,
                        AssistantCode = c.CAT_Vehicle.AssistantID > 0 ? c.CAT_Vehicle.FLM_Driver1.Code : string.Empty,
                        EmptyWeight = c.CAT_Vehicle.EmptyWeight,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).ToList();
                    foreach (var item in result)
                    {
                        item.lstConsumption = model.FLM_MaterialQuota.Where(c => c.VehicleID == item.ID).Select(c => new DTOFLMMaterialQuota
                        {
                            ID = c.ID,
                            QuantityPerKM = c.QuantityPerKM,
                            VehicleID = c.VehicleID,
                            MaterialID = c.MaterialID,
                            MaterialCode = c.FLM_Material.Code,
                            MaterialName = c.FLM_Material.MaterialName,
                            GroupOfMaterialName = c.FLM_Material.CAT_GroupOfMaterial.GroupName,
                            IsFuel = c.FLM_Material.CAT_GroupOfMaterial.IsFuel
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Tractor
        public DTOResult Tractor_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTypeOfAssetTractor = -(int)SYSVarType.TypeOfAssetTractor;
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iTypeOfAssetTractor).Select(c => new DTOFLMTractor
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        MaxWeightCal = c.CAT_Vehicle.MaxWeightCal,
                        ExprDay = c.ExprDay,
                        ExprInputDay = c.ExprInputDay,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMTractor>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMTractor Tractor_Get(int id)
        {
            try
            {
                DTOFLMTractor result = new DTOFLMTractor();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var query = model.FLM_Asset.Where(c => c.ID == id).Select(c => new DTOFLMTractor
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                            GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            RemainValue = c.RemainValue,
                            CurrentValue = c.CurrentValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            Specification = c.Specification,
                            IsRent = c.IsRent,
                            RentID = c.RentID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            Note = c.CAT_Vehicle.Note,
                            IsOwn = c.CAT_Vehicle.IsOwn,
                            CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                            TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                            MinWeight = c.CAT_Vehicle.MinWeight,
                            MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                            RegWeight = c.CAT_Vehicle.RegWeight,
                            CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                            Lat = c.CAT_Vehicle.Lat,
                            GPSCode = c.CAT_Vehicle.GPSCode,
                            Lng = c.CAT_Vehicle.Lng,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod,
                            DriverID = c.CAT_Vehicle.FLM_Driver.ID,
                            AssistantID = c.CAT_Vehicle.FLM_Driver1.ID,
                            MaxWeightCal = c.CAT_Vehicle.MaxWeightCal,
                            ExprDay = c.ExprDay,
                            ExprTOMaster = c.ExprTOMaster,
                            ExprInputDay = c.ExprInputDay,
                            ExprInputTOMaster = c.ExprInputTOMaster,
                            HasDepreciation = c.FLM_FixedCost.Count() > 0,
                            LocationID = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.LocationID.Value : -1,
                            LocationCode = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Code : string.Empty,
                            LocationAddress = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Address : string.Empty,
                            EmptyWeight = c.CAT_Vehicle.EmptyWeight > 0 ? c.CAT_Vehicle.EmptyWeight.Value : 0,
                            TempMax = c.CAT_Vehicle.TempMax,
                            TempMin = c.CAT_Vehicle.TempMin
                        });
                        result = query.FirstOrDefault();
                    }
                    else
                    {
                        var gov = model.CAT_GroupOfVehicle.FirstOrDefault();
                        if (gov != null) result.GroupOfVehicleID = gov.ID;
                        result.ID = 0;
                        result.LocationID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int Tractor_Save(DTOFLMTractor item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int iTypeOfTractor = -(int)SYSVarType.TypeOfVehicleTractor;
                    int iTypeOfAssetTractor = -(int)SYSVarType.TypeOfAssetTractor;
                    if (model.CAT_Vehicle.Where(c => c.ID != item.VehicleID && c.RegNo.ToUpper().Trim() == item.RegNo.ToUpper().Trim()).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Số xe [" + item.RegNo + "] đã sử dụng");
                    else
                    {
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                        if (obj == null)
                        {
                            obj = new CAT_Vehicle();
                            obj.TypeOfVehicleID = iTypeOfTractor;
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.IsOwn = true;
                            obj.RegNo = item.RegNo.ToUpper().Trim();
                            model.CAT_Vehicle.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }

                        obj.Note = item.Note;
                        obj.MaxWeight = item.MaxWeight;
                        obj.MinWeight = item.MinWeight;
                        obj.MaxCapacity = item.MaxCapacity;
                        obj.RegWeight = item.RegWeight;
                        obj.Lat = item.Lat;
                        obj.Lng = item.Lng;
                        obj.GPSCode = item.GPSCode;
                        obj.GroupOfVehicleID = item.GroupOfVehicleID;
                        obj.DriverID = item.DriverID;
                        obj.EmptyWeight = item.EmptyWeight > 0 ? item.EmptyWeight : null;
                        obj.TempMax = item.TempMax ?? null;
                        obj.TempMin = item.TempMin ?? null;
                        if (item.LocationID > 0)
                            obj.LocationID = item.LocationID;
                        else obj.LocationID = null;
                        if (item.DriverID.HasValue)
                        {
                            var driver = model.FLM_Driver.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == item.DriverID.Value);
                            if (driver != null)
                            {
                                obj.DriverName = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                                obj.Cellphone = driver.CAT_Driver.Cellphone;
                            }
                        }
                        obj.AssistantID = item.AssistantID;
                        obj.MaxWeightCal = item.MaxWeightCal;
                        obj.CurrentRomoocID = item.CurrentRomoocID;

                        var detail = model.FLM_Asset.FirstOrDefault(c => c.ID == item.ID);
                        if (detail == null)
                        {
                            detail = new FLM_Asset();
                            detail.CAT_Vehicle = obj;
                            detail.CreatedBy = Account.UserName;
                            detail.CreatedDate = DateTime.Now;
                            detail.SYSCustomerID = Account.SYSCustomerID;
                            detail.TypeOfAssetID = iTypeOfAssetTractor;
                            model.FLM_Asset.Add(detail);
                        }
                        else
                        {
                            detail.ModifiedBy = Account.UserName;
                            detail.ModifiedDate = DateTime.Now;
                        }
                        detail.YearOfProduction = item.YearOfProduction;
                        detail.Manufactor = item.Manufactor;
                        detail.BaseValue = item.BaseValue;
                        detail.RemainValue = item.RemainValue;
                        detail.CurrentValue = item.CurrentValue;
                        if (!(item.CurrentValue > 0))
                            detail.CurrentValue = item.BaseValue - item.RemainValue;
                        //if (item.BaseValue >= 0 && item.RemainValue >= 0) detail.CurrentValue = (double)item.BaseValue.Value - (double)item.RemainValue.Value;
                        //else
                        //    detail.CurrentValue = item.RemainValue > 0 ? (double)item.CurrentValue : 0;
                        detail.DepreciationPeriod = item.DepreciationPeriod;
                        detail.DepreciationStart = item.DepreciationStart;
                        detail.Specification = item.Specification;
                        detail.RentID = item.RentID;
                        detail.IsDisposal = item.IsDisposal;
                        detail.WarrantyEnd = item.WarrantyEnd;
                        detail.WarrantyPeriod = item.WarrantyPeriod;
                        detail.ExprDay = item.ExprDay;
                        detail.ExprTOMaster = item.ExprTOMaster;
                        detail.ExprInputTOMaster = item.ExprInputTOMaster;
                        detail.ExprInputDay = item.ExprInputDay;

                        if (item.DepreciationStart.HasValue)
                            detail.DepreciationStart = item.DepreciationStart.Value.Date;
                        else
                            detail.DepreciationStart = null;

                        if (detail.RentID == null)
                            detail.IsRent = false;
                        else
                            detail.IsRent = true;

                        #region Lưu vào cus
                        var cus = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID == obj.ID);
                        if (cus == null)
                        {
                            cus = new CUS_Vehicle();
                            cus.CreatedBy = Account.UserName;
                            cus.CreatedDate = DateTime.Now;
                            cus.CustomerID = Account.SYSCustomerID;
                            cus.CAT_Vehicle = obj;
                            model.CUS_Vehicle.Add(cus);
                        }
                        #endregion

                        model.SaveChanges();
                        return detail.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Tractor_Delete(DTOFLMTractor item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                    if (obj != null)
                    {
                        if (obj.ID <= 2)
                            throw FaultHelper.BusinessFault(null, null, "Không thể xóa xe này");
                        if (model.OPS_DITOMaster.Count(c => c.VehicleID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được phân chuyến");
                        if (model.OPS_COTOMaster.Count(c => c.VehicleID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được phân chuyến");
                        if (model.FLM_FixedCost.Count(c => c.AssetID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được vận hành");
                        if (model.FLM_ReceiptAsset.Count(c => c.AssetID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được vận hành");
                        if (model.FLM_ReceiptCost.Count(c => c.AssetID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được vận hành");
                        if (model.FLM_TransferHistory.Count(c => c.AssetOwnID == item.ID || c.AssetFromID == item.ID || c.AssetToID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được vận hành");

                        foreach (var detail in model.FLM_Asset.Where(c => c.VehicleID == obj.ID))
                        {
                            foreach (var child in model.FLM_AssetTimeSheet.Where(c => c.AssetID == detail.ID))
                                model.FLM_AssetTimeSheet.Remove(child);
                            foreach (var child in model.FLM_MaterialQuota.Where(c => c.VehicleID == detail.ID))
                                model.FLM_MaterialQuota.Remove(child);
                            foreach (var child in model.CAT_StationMonth.Where(c => c.AssetID == detail.ID))
                                model.CAT_StationMonth.Remove(child);
                            foreach (var child in model.FLM_Activity.Where(c => c.AssetID == detail.ID))
                                model.FLM_Activity.Remove(child);
                            foreach (var child in model.FLM_AssetRequire.Where(c => c.AssetID == detail.ID))
                                model.FLM_AssetRequire.Remove(child);
                            foreach (var child in model.FLM_ScheduleAsset.Where(c => c.AssetID == detail.ID))
                                model.FLM_ScheduleAsset.Remove(child);
                            foreach (var child in model.FLM_ScheduleFee.Where(c => c.AssetID == detail.ID))
                                model.FLM_ScheduleFee.Remove(child);
                            foreach (var child in model.FLM_ScheduleFeeDefault.Where(c => c.AssetID == detail.ID))
                                model.FLM_ScheduleFeeDefault.Remove(child);
                            model.FLM_Asset.Remove(detail);
                        }

                        foreach (var detail in model.FLM_VehiclePlan.Where(c => c.VehicleID == obj.ID))
                            model.FLM_VehiclePlan.Remove(detail);
                        foreach (var detail in obj.CAT_RomoocDefault.Where(c => c.VehicleID == obj.ID))
                            model.CAT_RomoocDefault.Remove(detail);
                        foreach (var detail in model.CUS_Vehicle.Where(c => c.VehicleID == obj.ID && c.CustomerID == Account.SYSCustomerID))
                            model.CUS_Vehicle.Remove(detail);
                        model.SaveChanges();

                        if (model.CUS_Vehicle.Where(c => c.VehicleID == obj.ID).Count() == 0)
                        {
                            model.CAT_Vehicle.Remove(obj);
                            model.SaveChanges();
                        }
                    }
                    else
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region CAT_RomoocDefault
        public DTOResult Tractor_RomoocDefault_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RomoocDefault.Select(c => new DTOCATRomoocDefault
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        RomoocID = c.RomoocID,
                        RomoocNo = c.CAT_Romooc.RegNo,
                        SortOrder = c.SortOrder
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRomoocDefault>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATRomoocDefault Tractor_RomoocDefault_Get(int id)
        {
            try
            {
                DTOCATRomoocDefault result = new DTOCATRomoocDefault();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_RomoocDefault.Where(c => c.ID == id).Select(c => new DTOCATRomoocDefault
                      {
                          ID = c.ID,
                          VehicleID = c.VehicleID,
                          VehicleNo = c.CAT_Vehicle.RegNo,
                          RomoocID = c.RomoocID,
                          RomoocNo = c.CAT_Romooc.RegNo,
                          SortOrder = c.SortOrder
                      }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.VehicleID = -1;
                        result.RomoocID = -1;
                        var checkV = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new { c.ID, c.VehicleID }).FirstOrDefault();
                        result.VehicleID = checkV.VehicleID.Value;
                        var checkR = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new { c.ID, c.RomoocID }).FirstOrDefault();
                        result.RomoocID = checkR.RomoocID.Value;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int Tractor_RomoocDefault_Save(DTOCATRomoocDefault item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_RomoocDefault.Where(c => c.ID != item.ID && c.VehicleID == item.VehicleID && c.RomoocID == c.RomoocID && c.SortOrder == item.SortOrder).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Xe-Romooc-Độ uu tiên đã tồn tại, Không thể thêm");
                    var objVehicle = model.FLM_Asset.Where(c => c.VehicleID > 0 && c.VehicleID == item.VehicleID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new { c.ID, c.TypeOfAssetID, c.VehicleID }).FirstOrDefault();
                    if (objVehicle == null)
                        throw FaultHelper.BusinessFault(null, null, "Xe đã chọn không phải xe nhà");
                    var objRomooc = model.FLM_Asset.Where(c => c.RomoocID > 0 && c.RomoocID == item.RomoocID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new { c.ID, c.TypeOfAssetID, c.RomoocID }).FirstOrDefault();
                    if (objRomooc == null)
                        throw FaultHelper.BusinessFault(null, null, "Romooc đã chọn không phải xe nhà");

                    var obj = model.CAT_RomoocDefault.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_RomoocDefault();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_RomoocDefault.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.VehicleID = item.VehicleID;
                    obj.RomoocID = item.RomoocID;
                    obj.SortOrder = item.SortOrder;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Tractor_RomoocDefault_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RomoocDefault.FirstOrDefault(c => c.ID == id);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");

                    model.CAT_RomoocDefault.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMTractor> Tractor_RomoocDefault_TractorList()
        {
            try
            {
                List<DTOFLMTractor> result = new List<DTOFLMTractor>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new DTOFLMTractor
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID.Value,
                            RegNo = c.CAT_Vehicle.RegNo
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMRomooc> Tractor_RomoocDefault_RomoocList()
        {
            try
            {
                List<DTOFLMRomooc> result = new List<DTOFLMRomooc>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new DTOFLMRomooc
                    {
                        ID = c.ID,
                        RomoocID = c.RomoocID.Value,
                        RegNo = c.CAT_Romooc.RegNo
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel Tractor_RomoocDefault_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        #region lấy dữ liệu
                        var data = model.CAT_RomoocDefault.Select(c => new
                        {
                            VehicleID = c.VehicleID,
                            VehicleNo = c.CAT_Vehicle.RegNo,
                            RomoocNo = c.CAT_Romooc.RegNo,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.VehicleID).ThenBy(c => c.SortOrder).ToList();
                        #endregion

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[4];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 4; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số romooc", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Độ ưu tiên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        ws.MergedCells = new List<string>();
                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.VehicleNo));
                            cells.Add(HelperExcel.NewCell(item.RomoocNo));
                            cells.Add(HelperExcel.NewCell(item.SortOrder));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row Tractor_RomoocDefault_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colVehicleID = colData++;
                    int colRomoocID = colData++;

                    int failMax = 2;
                    int failCurrent = 0;

                    var lstVehicle = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 2 && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new { c.VehicleID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstRomooc = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.RomoocID > 1 && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new { c.RomoocID, c.CAT_Romooc.RegNo }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                // lstCode.Add(eRow.Cells[colData].Value.ToString().Trim().ToUpper() + "_" + eRow.Cells[colData+1].Value.ToString().Trim().ToUpper() + "_" + eRow.Cells[colData+2].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataVehicleNo = HelperExcel.GetString(checkRow, colData++);
                        string dataRomoocNo = HelperExcel.GetString(checkRow, colData++);
                        string dataSortOrder = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;

                        dataVehicleNo = dataVehicleNo.ToUpper();
                        dataRomoocNo = dataRomoocNo.ToUpper();
                        //so xe
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataVehicleNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstVehicle.Count(c => c.RegNo.ToUpper() == dataVehicleNo) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataVehicleNo);
                            if (objID != null)
                                valid = objID.VehicleID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVehicleID, valid);
                        }
                        //romooc
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataRomoocNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstRomooc.Count(c => c.RegNo.ToUpper() == dataRomoocNo) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstRomooc.FirstOrDefault(c => c.RegNo.ToUpper() == dataRomoocNo);
                            if (objID != null)
                                valid = objID.RomoocID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRomoocID, valid);
                        }
                        //sortorder
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        //indexError++;
                        //if(flag && lstCode.Contains(dataVehicleNo+"_"+dataRomoocNo+"_"+dataSortOrder))
                        //{
                        //    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                        //    flag = false;
                        //}


                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel Tractor_RomoocDefault_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colVehicleID = colData++;
                    int colRomoocID = colData++;

                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstVehicle = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 2 && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new { c.VehicleID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstRomooc = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.RomoocID > 1 && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new { c.RomoocID, c.CAT_Romooc.RegNo }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            colData = 1;
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                // lstCode.Add(eRow.Cells[colData].Value.ToString().Trim().ToUpper() + "_" + eRow.Cells[colData + 1].Value.ToString().Trim().ToUpper() + "_" + eRow.Cells[colData + 2].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataVehicleNo = HelperExcel.GetString(checkRow, colData++);
                        string dataRomoocNo = HelperExcel.GetString(checkRow, colData++);
                        string dataSortOrder = HelperExcel.GetString(checkRow, colData++);

                        dataVehicleNo = dataVehicleNo.ToUpper();
                        dataRomoocNo = dataRomoocNo.ToUpper();
                        bool flag = true;
                        //so xe
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataVehicleNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstVehicle.Count(c => c.RegNo.ToUpper() == dataVehicleNo) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataVehicleNo);
                            if (objID != null)
                                valid = objID.VehicleID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVehicleID, valid);
                        }
                        //romooc
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataRomoocNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstRomooc.Count(c => c.RegNo.ToUpper() == dataRomoocNo) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstRomooc.FirstOrDefault(c => c.RegNo.ToUpper() == dataRomoocNo);
                            if (objID != null)
                                valid = objID.RomoocID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRomoocID, valid);
                        }
                        //sortorder
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        //indexError++;
                        //if (flag && lstCode.Contains(dataVehicleNo + "_" + dataRomoocNo + "_" + dataSortOrder))
                        //{
                        //    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                        //    flag = false;
                        //}
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool Tractor_RomoocDefault_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colVehicleID = colData++;
                    int colRomoocID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataVehicleNo = HelperExcel.GetString(checkRow, colData++);
                            string dataRomoocNo = HelperExcel.GetString(checkRow, colData++);
                            string dataSortOrder = HelperExcel.GetString(checkRow, colData++);

                            int vehicleid = Convert.ToInt32(HelperExcel.GetString(checkRow, colVehicleID));
                            int romoocid = Convert.ToInt32(HelperExcel.GetString(checkRow, colRomoocID));
                            int sortorderid = Convert.ToInt32(dataSortOrder);

                            var obj = model.CAT_RomoocDefault.FirstOrDefault(c => c.VehicleID == vehicleid && c.RomoocID == romoocid && c.SortOrder == sortorderid);
                            if (obj == null)
                            {
                                obj = new CAT_RomoocDefault();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.VehicleID = vehicleid;
                                obj.RomoocID = romoocid;
                                obj.SortOrder = sortorderid;
                                model.CAT_RomoocDefault.Add(obj);
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Romooc
        public DTOResult RomoocAll_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.RomoocID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new DTOFLMRomooc
                    {
                        ID = c.RomoocID.Value,
                        RomoocID = c.RomoocID.Value,
                        RegNo = c.CAT_Romooc.RegNo,
                        MaxWeight = c.CAT_Romooc.MaxWeight,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Vendor_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iVendor = -(int)SYSVarType.TypeOfCustomerVEN;
                    int iBoth = -(int)SYSVarType.TypeOfCustomerBOTH;
                    var query = model.CUS_Customer.Where(c => c.TypeOfCustomerID == iVendor || c.TypeOfCustomerID == iBoth).Select(c => new DTOVendor
                    {
                        ID = c.ID,
                        Code = c.Code,
                        VendorName = c.CustomerName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Romooc_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.RomoocID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new DTOFLMRomooc
                    {
                        ID = c.ID,
                        RomoocID = c.RomoocID,
                        GroupOfRomoocID = c.CAT_Romooc.GroupOfRomoocID,
                        GroupOfRomoocName = c.CAT_Romooc.GroupOfRomoocID.HasValue ? c.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RegNo = c.CAT_Romooc.RegNo,
                        IsOwn = c.CAT_Romooc.IsOwn,
                        CurrentVendorID = c.CAT_Romooc.CurrentVendorID,
                        NoOfDelivery = c.CAT_Romooc.NoOfDelivery,
                        Lat = c.CAT_Romooc.Lat,
                        Lng = c.CAT_Romooc.Lng,
                        //ContainerID = c.CAT_Romooc.ContainerID,
                        MaxWeight = c.CAT_Romooc.MaxWeight,
                        BiddingID = c.CAT_Romooc.BiddingID,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        ExprDay = c.ExprDay,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMRomooc Romooc_Get(int id)
        {
            try
            {
                DTOFLMRomooc result = new DTOFLMRomooc();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var query = model.FLM_Asset.Where(c => c.ID == id).Select(c => new DTOFLMRomooc
                        {
                            ID = c.ID,
                            RomoocID = c.RomoocID,
                            GroupOfRomoocID = c.CAT_Romooc.GroupOfRomoocID,
                            GroupOfRomoocName = c.CAT_Romooc.GroupOfRomoocID.HasValue ? c.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty,
                            // RegCapacity = c.CAT_Romooc.RegCapacity,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            CurrentValue = c.CurrentValue,
                            RemainValue = c.RemainValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            Specification = c.Specification,
                            IsRent = c.IsRent,
                            RentID = c.RentID,
                            //IsFloor = c.CAT_Romooc.IsFloor,
                            RegNo = c.CAT_Romooc.RegNo,
                            IsOwn = c.CAT_Romooc.IsOwn,
                            CurrentVendorID = c.CAT_Romooc.CurrentVendorID,
                            NoOfDelivery = c.CAT_Romooc.NoOfDelivery,
                            Lat = c.CAT_Romooc.Lat,
                            Lng = c.CAT_Romooc.Lng,
                            //ContainerID = c.CAT_Romooc.ContainerID,
                            BiddingID = c.CAT_Romooc.BiddingID,
                            MaxWeight = c.CAT_Romooc.MaxWeight,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod,
                            ExprDay = c.ExprDay,
                        });
                        result = query.FirstOrDefault();
                    }
                    else
                    {
                        var gor = model.CAT_GroupOfRomooc.FirstOrDefault();
                        if (gor != null) result.GroupOfRomoocID = gor.ID;
                        result.ID = 0;
                        // result.RegCapacity = 1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int Romooc_Save(DTOFLMRomooc item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Romooc.Where(c => c.ID != item.RomoocID && c.RegNo.ToUpper().Trim() == item.RegNo.ToUpper().Trim()).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Số xe [" + item.RegNo + "] đã sử dụng");
                    else
                    {
                        var obj = model.CAT_Romooc.FirstOrDefault(c => c.ID == item.RomoocID);
                        if (obj == null)
                        {
                            obj = new CAT_Romooc();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.IsOwn = true;
                            obj.RegNo = item.RegNo.ToUpper().Trim();
                            model.CAT_Romooc.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }

                        obj.IsOwn = item.IsOwn;
                        // obj.RegCapacity = item.RegCapacity;
                        obj.MaxWeight = item.MaxWeight;
                        obj.NoOfDelivery = item.NoOfDelivery;
                        obj.Lat = item.Lat;
                        obj.Lng = item.Lng;
                        // obj.IsFloor = item.IsFloor;
                        obj.GroupOfRomoocID = item.GroupOfRomoocID;
                        obj.BiddingID = item.BiddingID;

                        var detail = model.FLM_Asset.FirstOrDefault(c => c.ID == item.ID);
                        if (detail == null)
                        {
                            detail = new FLM_Asset();
                            detail.CAT_Romooc = obj;
                            detail.CreatedBy = Account.UserName;
                            detail.CreatedDate = DateTime.Now;
                            detail.SYSCustomerID = Account.SYSCustomerID;
                            detail.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetRomooc;
                            model.FLM_Asset.Add(detail);
                        }
                        else
                        {
                            detail.ModifiedBy = Account.UserName;
                            detail.ModifiedDate = DateTime.Now;
                        }
                        detail.YearOfProduction = item.YearOfProduction;
                        detail.Manufactor = item.Manufactor;
                        detail.BaseValue = item.BaseValue;
                        detail.CurrentValue = item.CurrentValue;
                        detail.RemainValue = item.RemainValue;
                        detail.DepreciationPeriod = item.DepreciationPeriod;
                        detail.DepreciationStart = item.DepreciationStart;
                        detail.Specification = item.Specification;
                        detail.RentID = item.RentID;
                        detail.WarrantyEnd = item.WarrantyEnd;
                        detail.WarrantyPeriod = item.WarrantyPeriod;
                        detail.ExprDay = item.ExprDay;

                        if (item.DepreciationStart.HasValue)
                            detail.DepreciationStart = item.DepreciationStart.Value.Date;
                        else
                            detail.DepreciationStart = null;

                        if (detail.RentID == null)
                            detail.IsRent = false;
                        else
                            detail.IsRent = true;

                        #region Lưu vào cus
                        var cus = model.CUS_Romooc.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.RomoocID == obj.ID);
                        if (cus == null)
                        {
                            cus = new CUS_Romooc();
                            cus.CreatedBy = Account.UserName;
                            cus.CreatedDate = DateTime.Now;
                            cus.CustomerID = Account.SYSCustomerID;
                            cus.CAT_Romooc = obj;
                            model.CUS_Romooc.Add(cus);
                        }
                        #endregion

                        model.SaveChanges();
                        return detail.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Romooc_Delete(DTOFLMRomooc item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Romooc.FirstOrDefault(c => c.ID == item.RomoocID);
                    if (obj != null)
                    {
                        if (obj.ID <= 1)
                            throw FaultHelper.BusinessFault(null, null, "Không thể xóa romooc này");
                        if (model.OPS_COTOMaster.Count(c => c.RomoocID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Romooc đã được phân chuyến");
                        if (model.OPS_COImportTOMaster.Count(c => c.RomoocID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Romooc đã được sử dụng gói excel");
                        if (model.OPS_OPTCOTOMaster.Count(c => c.RomoocID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Romooc đã được sử dụng optimize");
                        if (model.OPS_OPTRomooc.Count(c => c.RomoocID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Romooc đã được sử dụng optimize");
                        if (model.OPS_OPTVehicle.Count(c => c.RomoocID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Romooc đã được sử dụng optimize");

                        foreach (var detail in model.ORD_Container.Where(c => c.RomoocID == obj.ID))
                            detail.RomoocID = null;
                        foreach (var detail in model.OPS_Container.Where(c => c.RomoocID == obj.ID))
                            detail.RomoocID = null;
                        foreach (var detail in model.CAT_Vehicle.Where(c => c.CurrentRomoocID == obj.ID))
                            detail.CurrentRomoocID = null;
                        foreach (var detail in model.FLM_Asset.Where(c => c.RomoocID == obj.ID))
                            model.FLM_Asset.Remove(detail);
                        foreach (var detail in model.FLM_Asset.Where(c => c.RomoocID == obj.ID))
                            model.FLM_Asset.Remove(detail);
                        foreach (var detail in obj.CAT_RomoocDefault.Where(c => c.RomoocID == obj.ID))
                            model.CAT_RomoocDefault.Remove(detail);
                        foreach (var detail in model.CUS_Romooc.Where(c => c.RomoocID == obj.ID && c.CustomerID == Account.SYSCustomerID))
                            model.CUS_Romooc.Remove(detail);
                        model.SaveChanges();

                        if (model.CUS_Romooc.Where(c => c.RomoocID == obj.ID).Count() == 0)
                        {
                            model.CAT_Romooc.Remove(obj);
                            model.SaveChanges();
                        }
                    }
                    else
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Container (Vỏ con)
        public DTOResult Container_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTypeOfAssetContainer = -(int)SYSVarType.TypeOfAssetContainer;
                    var query = model.FLM_Asset.Where(c => c.ContainerID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iTypeOfAssetContainer).Select(c => new DTOFLMContainer
                    {
                        ID = c.ID,
                        ContainerID = c.ContainerID,
                        PackageID = c.CAT_Container.PackageID,
                        PackageName = c.CAT_Container.PackageID.HasValue ? c.CAT_Container.CAT_Packing.PackingName : string.Empty,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        ContainerNo = c.CAT_Container.ContainerNo,
                        Length = c.CAT_Container.Length,
                        Height = c.CAT_Container.Height,
                        Width = c.CAT_Container.Width,
                        Capacity = c.CAT_Container.Capacity,
                        Description = c.CAT_Container.Description,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMContainer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMContainer Container_Get(int id)
        {
            try
            {
                DTOFLMContainer result = new DTOFLMContainer();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var query = model.FLM_Asset.Where(c => c.ID == id).Select(c => new DTOFLMContainer
                        {
                            ID = c.ID,
                            ContainerID = c.ContainerID,
                            PackageID = c.CAT_Container.PackageID,
                            PackageName = c.CAT_Container.PackageID.HasValue ? c.CAT_Container.CAT_Packing.PackingName : string.Empty,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            RemainValue = c.RemainValue,
                            CurrentValue = c.CurrentValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            Specification = c.Specification,
                            IsRent = c.IsRent,
                            RentID = c.RentID,
                            ContainerNo = c.CAT_Container.ContainerNo,
                            Length = c.CAT_Container.Length,
                            Height = c.CAT_Container.Height,
                            Width = c.CAT_Container.Width,
                            Capacity = c.CAT_Container.Capacity,
                            Description = c.CAT_Container.Description,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod
                        });
                        result = query.FirstOrDefault();
                    }
                    else
                    {
                        var package = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).FirstOrDefault();
                        if (package != null) result.PackageID = package.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int Container_Save(DTOFLMContainer item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int iTypeOfAssetContainer = -(int)SYSVarType.TypeOfAssetContainer;
                    if (model.CAT_Container.Where(c => c.ID != item.ContainerID && c.ContainerNo.ToUpper().Trim() == item.ContainerNo.ToUpper().Trim()).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Số xe [" + item.ContainerNo + "] đã sử dụng");
                    else
                    {
                        var obj = model.CAT_Container.FirstOrDefault(c => c.ID == item.ContainerID);
                        if (obj == null)
                        {
                            obj = new CAT_Container();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContainerNo = item.ContainerNo.ToUpper().Trim();
                            model.CAT_Container.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }

                        obj.PackageID = item.PackageID;
                        obj.Length = item.Length;
                        obj.Height = item.Height;
                        obj.Width = item.Width;
                        obj.Capacity = item.Capacity;
                        obj.Description = item.Description;

                        var detail = model.FLM_Asset.FirstOrDefault(c => c.ID == item.ID);
                        if (detail == null)
                        {
                            detail = new FLM_Asset();
                            detail.CAT_Container = obj;
                            detail.CreatedBy = Account.UserName;
                            detail.CreatedDate = DateTime.Now;
                            detail.SYSCustomerID = Account.SYSCustomerID;
                            detail.TypeOfAssetID = iTypeOfAssetContainer;
                            model.FLM_Asset.Add(detail);
                        }
                        else
                        {
                            detail.ModifiedBy = Account.UserName;
                            detail.ModifiedDate = DateTime.Now;
                        }
                        detail.YearOfProduction = item.YearOfProduction;
                        detail.Manufactor = item.Manufactor;
                        detail.BaseValue = item.BaseValue;
                        detail.CurrentValue = item.CurrentValue;
                        detail.RemainValue = item.RemainValue;
                        detail.DepreciationPeriod = item.DepreciationPeriod;
                        detail.DepreciationStart = item.DepreciationStart;
                        detail.Specification = item.Specification;
                        detail.RentID = item.RentID;
                        detail.IsDisposal = item.IsDisposal;
                        detail.WarrantyEnd = item.WarrantyEnd;
                        detail.WarrantyPeriod = item.WarrantyPeriod;

                        if (item.DepreciationStart.HasValue)
                            detail.DepreciationStart = item.DepreciationStart.Value.Date;
                        else
                            detail.DepreciationStart = null;

                        if (detail.RentID == null)
                            detail.IsRent = false;
                        else
                            detail.IsRent = true;
                        if (detail.ID < 1)
                            model.FLM_Asset.Add(detail);
                        model.SaveChanges();
                        return detail.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Container_Delete(DTOFLMContainer item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Container.FirstOrDefault(c => c.ID == item.ContainerID);
                    if (obj != null)
                    {
                        foreach (var detail in model.FLM_Asset.Where(c => c.ContainerID == obj.ID))
                            model.FLM_Asset.Remove(detail);
                        model.CAT_Container.Remove(obj);
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Equipment
        public DTOResult Equipment_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    List<DTOFLMEquipment> lst = new List<DTOFLMEquipment>();
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetEquipment).Select(c => new DTOFLMEquipment
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        ContainerID = c.ContainerID,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        TypeOfAssetID = c.TypeOfAssetID,
                        Code = c.Code,
                        Name = c.Name,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RentName = c.CUS_Customer.CustomerName,
                        SYSCustomerID = c.SYSCustomerID,
                        GroupOfEquipmentID = c.GroupOfEquipmentID,
                        GroupOfEquipmentName = c.CAT_GroupOfEquipment.GroupName,
                        IsDisposal = c.IsDisposal,
                        RomoocID = c.RomoocID,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        URL = string.Empty,
                        CurrentLocation = string.Empty,
                    }).ToList();
                    if (query.Count > 0)
                    {
                        foreach (var item in query)
                        {
                            var obj = model.FLM_TransferHistory.Where(c => c.AssetOwnID == item.ID && c.IsCurrent == true).FirstOrDefault();
                            if (obj != null)
                            {

                                if (obj.AssetToID.HasValue)
                                {
                                    if (obj.FLM_Asset2.VehicleID.HasValue) item.CurrentLocation = obj.FLM_Asset2.CAT_Vehicle.RegNo;
                                    if (obj.FLM_Asset2.RomoocID.HasValue) item.CurrentLocation = obj.FLM_Asset2.CAT_Romooc.RegNo;
                                    if (obj.FLM_Asset2.ContainerID.HasValue) item.CurrentLocation = obj.FLM_Asset2.CAT_Container.ContainerNo;
                                }
                                else if (obj.StockID.HasValue) item.CurrentLocation = obj.FLM_Stock.Code;
                            }
                            lst.Add(item);
                        }
                    }
                    var lstFinal = lst.ToDataSourceResult(CreateRequest(request));
                    result.Total = lstFinal.Total;
                    result.Data = lstFinal.Data;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMEquipment Equipment_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = model.FLM_Asset.Where(c => c.ID == id).Select(c => new DTOFLMEquipment
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        ContainerID = c.ContainerID,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        RemainValue = c.RemainValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        TypeOfAssetID = c.TypeOfAssetID,
                        Code = c.Code,
                        Name = c.Name,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RentName = c.CUS_Customer.CustomerName,
                        SYSCustomerID = c.SYSCustomerID,
                        GroupOfEquipmentID = c.GroupOfEquipmentID,
                        GroupOfEquipmentName = c.CAT_GroupOfEquipment.GroupName,
                        IsDisposal = c.IsDisposal,
                        RomoocID = c.RomoocID,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        URL = string.Empty,
                        CurrentLocation = string.Empty,
                    }).FirstOrDefault();
                    if (result != null)
                    {
                        var obj = model.FLM_TransferHistory.Where(c => c.AssetOwnID == result.ID && c.IsCurrent == true).FirstOrDefault();
                        if (obj != null)
                        {

                            if (obj.AssetToID.HasValue)
                            {
                                if (obj.FLM_Asset2.VehicleID.HasValue)
                                {
                                    if (obj.FLM_Asset2.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)
                                    {
                                        result.CurrentLocation = "Xe tải: " + obj.FLM_Asset2.CAT_Vehicle.RegNo;
                                    }
                                    else result.CurrentLocation = "Đầu kéo: " + obj.FLM_Asset2.CAT_Vehicle.RegNo;
                                }
                                else if (obj.FLM_Asset2.RomoocID.HasValue) result.CurrentLocation = "Romooc: " + obj.FLM_Asset2.CAT_Romooc.RegNo;
                                else if (obj.FLM_Asset2.ContainerID.HasValue) result.CurrentLocation = obj.FLM_Asset2.CAT_Container.ContainerNo;
                            }
                            else if (obj.StockID.HasValue) { result.CurrentLocation = "Kho: " + obj.FLM_Stock.Code; result.StockID = obj.StockID; }
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOFLMEquipmentLocation Equipment_GetLocation()
        {
            try
            {
                DTOFLMEquipmentLocation result = new DTOFLMEquipmentLocation();
                result.lstTruck = new List<FLMAsset>();
                result.lstTractor = new List<FLMAsset>();
                result.lstRomooc = new List<FLMAsset>();
                result.lstStock = new List<FLMStock>();
                using (var model = new DataEntities())
                {
                    result.lstTruck = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck).Select(c => new FLMAsset
                    {
                        ID = c.ID,
                        Code = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : string.Empty,
                    }).ToList();
                    result.lstTractor = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new FLMAsset
                    {
                        ID = c.ID,
                        Code = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : string.Empty,
                    }).ToList();
                    result.lstRomooc = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new FLMAsset
                    {
                        ID = c.ID,
                        Code = c.RomoocID.HasValue ? c.CAT_Romooc.RegNo : string.Empty
                    }).ToList();
                    result.lstStock = model.FLM_Stock.Select(c => new FLMStock
                    {
                        ID = c.ID,
                        Code = c.Code,
                        StockName = c.StockName,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Equipment_ListByVehicleID(string request, int vehicleid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var newQuery = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.AssetToID == vehicleid && c.IsCurrent == true).Select(c => c.AssetOwnID).ToList(); ;
                    if (newQuery != null)
                    {
                        var lst = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && newQuery.Contains(c.ID)).Select(c => new DTOFLMEquipment
                            {
                                ID = c.ID,
                                VehicleID = c.VehicleID,
                                ContainerID = c.ContainerID,
                                YearOfProduction = c.YearOfProduction,
                                Manufactor = c.Manufactor,
                                BaseValue = c.BaseValue,
                                CurrentValue = c.CurrentValue,
                                DepreciationPeriod = c.DepreciationPeriod,
                                DepreciationStart = c.DepreciationStart,
                                Specification = c.Specification,
                                TypeOfAssetID = c.TypeOfAssetID,
                                Code = c.Code,
                                Name = c.Name,
                                IsRent = c.IsRent,
                                RentID = c.RentID,
                                RentName = c.CUS_Customer.CustomerName,
                                SYSCustomerID = c.SYSCustomerID,
                                GroupOfEquipmentID = c.GroupOfEquipmentID,
                                GroupOfEquipmentName = c.CAT_GroupOfEquipment.GroupName,
                                IsDisposal = c.IsDisposal,
                                RomoocID = c.RomoocID,
                                WarrantyEnd = c.WarrantyEnd,
                                WarrantyPeriod = c.WarrantyPeriod,
                                URL = string.Empty,
                                CurrentLocation = string.Empty,
                            }).ToDataSourceResult(CreateRequest(request));
                        result.Total = lst.Total;
                        result.Data = lst.Data as IEnumerable<DTOFLMEquipment>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Equipment_PastListByVehicleID(string request, int vehicleid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var newQuery = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.AssetToID == vehicleid).Select(c => c.AssetOwnID).ToList(); ;
                    if (newQuery != null)
                    {
                        var lst = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && newQuery.Contains(c.ID)).Select(c => new DTOFLMEquipment
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            ContainerID = c.ContainerID,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            CurrentValue = c.CurrentValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            Specification = c.Specification,
                            TypeOfAssetID = c.TypeOfAssetID,
                            Code = c.Code,
                            Name = c.Name,
                            IsRent = c.IsRent,
                            RentID = c.RentID,
                            RentName = c.CUS_Customer.CustomerName,
                            SYSCustomerID = c.SYSCustomerID,
                            GroupOfEquipmentID = c.GroupOfEquipmentID,
                            GroupOfEquipmentName = c.CAT_GroupOfEquipment.GroupName,
                            IsDisposal = c.IsDisposal,
                            RomoocID = c.RomoocID,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod,
                            URL = string.Empty,
                            CurrentLocation = string.Empty,
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = lst.Total;
                        result.Data = lst.Data as IEnumerable<DTOFLMEquipment>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int Equipment_Save(DTOFLMEquipment item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.FLM_Asset.Where(c => c.ID != item.ID && c.Code == item.Code).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã thiết bị [" + item.Code + "] đã sử dụng");
                    else
                    {
                        var obj = model.FLM_Asset.Where(c => c.ID == item.ID).FirstOrDefault();
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        else
                        {
                            obj = new FLM_Asset();
                            obj.SYSCustomerID = Account.SYSCustomerID;
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetEquipment;
                        }
                        obj.VehicleID = null;
                        obj.RomoocID = null;
                        obj.ContainerID = null;
                        obj.BaseValue = item.BaseValue;
                        obj.Code = item.Code;
                        obj.Name = item.Name;
                        obj.CurrentValue = item.CurrentValue;
                        obj.RemainValue = item.RemainValue;
                        obj.DepreciationPeriod = item.DepreciationPeriod;
                        obj.DepreciationStart = item.DepreciationStart;
                        obj.GroupOfEquipmentID = item.GroupOfEquipmentID;
                        obj.IsDisposal = item.IsDisposal;
                        obj.IsRent = item.IsRent;
                        obj.Manufactor = item.Manufactor;
                        obj.RentID = item.RentID;
                        obj.WarrantyEnd = item.WarrantyEnd;
                        obj.WarrantyPeriod = item.WarrantyPeriod;
                        obj.YearOfProduction = item.YearOfProduction;
                        obj.Specification = item.Specification;

                        if (item.DepreciationStart.HasValue)
                            obj.DepreciationStart = item.DepreciationStart.Value.Date;
                        else
                            obj.DepreciationStart = null;

                        if (obj.ID < 1)
                        {
                            #region lưu FLM Receipt
                            var objReceipt = new FLM_Receipt();
                            objReceipt.Code = Receipt_GetLastCode(model);
                            objReceipt.CreatedDate = DateTime.Now;
                            objReceipt.CreatedBy = Account.UserName;
                            objReceipt.DateReceipt = DateTime.Now;
                            objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptTranfer;
                            objReceipt.SYSCustomerID = Account.SYSCustomerID;
                            model.FLM_Receipt.Add(objReceipt);
                            #endregion

                            var objTranferHistory = new FLM_TransferHistory();
                            objTranferHistory.CreatedBy = Account.UserName;
                            objTranferHistory.CreatedDate = DateTime.Now;
                            objTranferHistory.AssetFromID = null;
                            objTranferHistory.SYSCustomerID = Account.SYSCustomerID;
                            if (item.VehicleID.HasValue)
                            {
                                objTranferHistory.AssetToID = item.VehicleID.Value;
                            }
                            else if (item.RomoocID.HasValue)
                            {
                                objTranferHistory.AssetToID = item.RomoocID.Value;
                            }
                            else if (item.StockID.HasValue)
                            {
                                objTranferHistory.AssetToID = item.StockID.Value;
                            }
                            objTranferHistory.FLM_Asset1 = obj;
                            objTranferHistory.DateTranfer = DateTime.Now;
                            objTranferHistory.IsCurrent = true;
                            objTranferHistory.Amount = item.CurrentValue.HasValue ? (decimal)item.CurrentValue.Value : 0;
                            objTranferHistory.FLM_Receipt = objReceipt;
                            model.FLM_Asset.Add(obj);
                            model.FLM_TransferHistory.Add(objTranferHistory);
                        }

                        model.SaveChanges();
                        return obj.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult EquipmentHistory_ListByID(int assetid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    //List<DTOFLMEquipmentHistory> lst=new List<DTOFLMEquipmentHistory>();
                    var query = model.FLM_TransferHistory.Where(c => c.AssetOwnID == assetid).Select(c => new DTOFLMEquipmentHistory
                        {
                            ID = c.ID,
                            DateTranfer = c.DateTranfer,
                            Amount = c.Amount,
                            AssetOwnID = c.AssetOwnID,
                            AssetFromID = c.AssetFromID,
                            AssetFromName = c.AssetFromID.HasValue ? (c.FLM_Asset.VehicleID.HasValue ? c.FLM_Asset.CAT_Vehicle.RegNo : (c.FLM_Asset.RomoocID.HasValue ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.CAT_Container.ContainerNo)) : string.Empty,
                            AssetToID = c.AssetToID,
                            AssetToName = c.AssetToID.HasValue ? (c.FLM_Asset2.VehicleID.HasValue ? c.FLM_Asset2.CAT_Vehicle.RegNo : (c.FLM_Asset2.RomoocID.HasValue ? c.FLM_Asset2.CAT_Romooc.RegNo : c.FLM_Asset2.CAT_Container.ContainerNo)) : string.Empty,
                            StockID = c.StockID,
                            StockName = c.StockID.HasValue ? c.FLM_Stock.StockName : string.Empty,
                        }).ToList();
                    if (query.Count > 0)
                    {
                        foreach (var item in query)
                        {
                            if (!item.AssetFromID.HasValue && !item.AssetToID.HasValue && item.StockID.HasValue)
                            {
                                item.LocationFromName = string.Empty;
                                item.LocationToName = item.StockName;
                            }
                            else if (!item.AssetFromID.HasValue && item.AssetToID.HasValue && item.StockID.HasValue)
                            {
                                item.LocationFromName = item.StockName;
                                item.LocationToName = item.AssetToName;
                            }
                            else if (item.AssetFromID.HasValue && item.AssetToID.HasValue && !item.StockID.HasValue)
                            {
                                item.LocationFromName = item.AssetFromName;
                                item.LocationToName = item.AssetToName;
                            }
                            else if (!item.AssetFromID.HasValue && item.AssetToID.HasValue && item.StockID.HasValue)
                            {
                                item.LocationFromName = item.AssetFromName;
                                item.LocationToName = item.StockName;
                            }
                            else if (!item.AssetFromID.HasValue && item.AssetToID.HasValue && !item.StockID.HasValue)
                            {
                                item.LocationFromName = string.Empty;
                                item.LocationToName = item.AssetToName;
                            }
                        }
                    }
                    result.Data = query;
                    result.Total = query.Count;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //public void Equipment_Delete(DTOFLMEquipment item)
        //{
        //    try
        //    {
        //        using (var model = new DataEntities())
        //        {
        //            model.EventAccount = Account; model.EventRunning = false;
        //            var obj = model.FLM_Asset.FirstOrDefault(c => c.ID == item.ID);
        //            if (obj != null)
        //            {
        //                model.FLM_Asset.Remove(obj);
        //                model.SaveChanges();
        //            }
        //            else
        //                throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists);
        //        }
        //    }
        //    catch (FaultException<DTOError> ex)
        //    {
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw FaultHelper.BusinessFault(ex);
        //    }
        //}
        #endregion

        #region FLM_ScheduleFeeDefault (phụ phí tháng trong chi tiết asset)
        public DTOResult FLMScheduleFeeDefault_List(string request, int assetID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleFeeDefault.Where(c => c.AssetID == assetID).Select(c => new DTOFLMScheduleFeeDefault
                    {
                        ID = c.ID,
                        AssetID = c.AssetID > 0 ? c.AssetID.Value : -1,
                        DriverID = c.DriverID > 0 ? c.DriverID.Value : -1,
                        TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                        TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                        TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                        ExprInputDay = c.ExprInputDay,
                        ExprInputTOMaster = c.ExprInputTOMaster,
                        ExprPriceDay = c.ExprPriceDay,
                        ExprPrice = c.ExprPrice,
                        ExprPriceTOMaster = c.ExprPriceTOMaster
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMScheduleFeeDefault>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMScheduleFeeDefault FLMScheduleFeeDefault_Get(int id)
        {
            try
            {
                DTOFLMScheduleFeeDefault result = new DTOFLMScheduleFeeDefault();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_ScheduleFeeDefault.Where(c => c.ID == id).Select(c => new DTOFLMScheduleFeeDefault
                        {
                            ID = c.ID,
                            AssetID = c.AssetID > 0 ? c.AssetID.Value : -1,
                            DriverID = c.DriverID > 0 ? c.DriverID.Value : -1,
                            ExprPrice = c.ExprPrice,
                            TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                            TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                            TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                            ExprInputDay = c.ExprInputDay,
                            ExprInputTOMaster = c.ExprInputTOMaster,
                            ExprPriceDay = c.ExprPriceDay,
                            ExprPriceTOMaster = c.ExprPriceTOMaster
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.TypeOfScheduleFeeID = -1;
                        var objType = model.FLM_TypeOfScheduleFee.FirstOrDefault();
                        if (objType != null) result.TypeOfScheduleFeeID = objType.ID;
                        result.AssetID = -1;
                        result.DriverID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMScheduleFeeDefault_Save(DTOFLMScheduleFeeDefault item, int assetID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.FLM_ScheduleFeeDefault.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_ScheduleFeeDefault();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.AssetID = assetID;
                        model.FLM_ScheduleFeeDefault.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprInputDay = item.ExprInputDay;
                    obj.ExprPriceDay = item.ExprPriceDay;
                    obj.ExprInputTOMaster = item.ExprInputTOMaster;
                    obj.ExprPriceTOMaster = item.ExprPriceTOMaster;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMScheduleFeeDefault_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_ScheduleFeeDefault.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.FLM_ScheduleFeeDefault.Remove(obj);
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chi tiết");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion


        #region Operation
        public List<DTOFLMVehicle> Operation_Vehicle()
        {
            try
            {
                var a = new DTOFLMVehicle();

                List<DTOFLMVehicle> result = new List<DTOFLMVehicle>();
                using (var model = new DataEntities())
                {
                    int iTypeOfTractor = -(int)SYSVarType.TypeOfVehicleTractor;
                    int iTypeOfTruck = -(int)SYSVarType.TypeOfVehicleTruck;
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && (c.CAT_Vehicle.TypeOfVehicleID == iTypeOfTractor || c.CAT_Vehicle.TypeOfVehicleID == iTypeOfTruck)).Select(c => new DTOFLMVehicle
                    {
                        ID = c.VehicleID.Value,
                        VehicleID = c.VehicleID,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        TypeOfVehicleName = c.CAT_Vehicle.SYS_Var.ValueOfVar,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        DriverID = c.CAT_Vehicle.DriverID,
                        AssistantID = c.CAT_Vehicle.AssistantID
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<FLMDriver> Operation_Driver()
        {
            try
            {
                List<FLMDriver> result = new List<FLMDriver>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new FLMDriver
                    {
                        ID = c.ID,
                        EmployeeCode = c.Code,
                        FirstName = c.CAT_Driver.FirstName,
                        LastName = c.CAT_Driver.LastName,
                        Cellphone = c.CAT_Driver.Cellphone
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMFleetPlanning> Operation_List(DateTime dtFrom, DateTime dtTo)
        {
            try
            {
                List<DTOFLMFleetPlanning> result = new List<DTOFLMFleetPlanning>();
                using (var model = new DataEntities())
                {
                    dtFrom = dtFrom.Date;
                    dtTo = dtTo.Date;
                    //result = model.FLM_FleetPlanning.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.PlanningDate >= dtFrom && c.PlanningDate <= dtTo).Select(c => new DTOFLMFleetPlanning
                    //{
                    //    ID = c.ID,
                    //    VehicleID = c.VehicleID,
                    //    VehicleNo = c.CAT_Vehicle.RegNo,
                    //    PlanningDate = c.PlanningDate,
                    //    DriverMainID1 = c.DriverMainID1,
                    //    DriverMainID2 = c.DriverMainID2,
                    //    DriverAssistantID1 = c.DriverAssistantID1,
                    //    DriverAssistantID2 = c.DriverAssistantID2,
                    //    DriverMainCode1 = c.DriverMainID1.HasValue ? c.FLM_Driver2.Code : string.Empty,
                    //    DriverMainCode2 = c.DriverMainID2.HasValue ? c.FLM_Driver3.Code : string.Empty,
                    //    DriverAssistantCode1 = c.DriverAssistantID1.HasValue ? c.FLM_Driver.Code : string.Empty,
                    //    DriverAssistantCode2 = c.DriverAssistantID2.HasValue ? c.FLM_Driver.Code : string.Empty,
                    //    ShiftID = c.ShiftID,
                    //    ShiftName = c.CAT_Shift.ShiftName,
                    //    CurrentTOID = c.CurrentTOID
                    //}).OrderBy(c => c.PlanningDate).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Operation_Save(List<FLMFleetPlanning> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var dt in lst.Select(c => c.PlanningDate.Date).Distinct())
                    {
                        try
                        {
                            //foreach (var item in model.FLM_FleetPlanning.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.PlanningDate >= dt && c.PlanningDate <= dt && c.CurrentTOID == null))
                            //    model.FLM_FleetPlanning.Remove(item);
                            //model.SaveChanges();
                            //foreach (var item in lst.Where(c => c.PlanningDate.Date == dt))
                            //{
                            //    if (item.VehicleID > 0 && (item.DriverMainID1 > 0 || item.DriverMainID2 > 0 || item.DriverAssistantID1 > 0 || item.DriverAssistantID2 > 0))
                            //    {
                            //        if (model.FLM_FleetPlanning.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == item.VehicleID && c.DriverMainID1 == item.DriverMainID1
                            //            && c.DriverMainID2 == item.DriverMainID2 && c.DriverAssistantID1 == item.DriverAssistantID1 && c.DriverAssistantID2 == item.DriverAssistantID2
                            //            && c.ShiftID == item.ShiftID && c.PlanningDate == dt && c.CurrentTOID == null).Count() == 0)
                            //        {
                            //            var obj = new FLM_FleetPlanning();
                            //            obj.DriverMainID1 = item.DriverMainID1 != 0 ? item.DriverMainID1 : null;
                            //            obj.DriverMainID2 = item.DriverMainID2 != 0 ? item.DriverMainID2 : null;
                            //            obj.DriverAssistantID1 = item.DriverAssistantID1 != 0 ? item.DriverAssistantID1 : null;
                            //            obj.DriverAssistantID2 = item.DriverAssistantID2 != 0 ? item.DriverAssistantID2 : null;
                            //            obj.VehicleID = item.VehicleID;
                            //            obj.PlanningDate = item.PlanningDate;
                            //            obj.ShiftID = item.ShiftID;
                            //            obj.SYSCustomerID = Account.SYSCustomerID;
                            //            obj.CreatedBy = Account.UserName;
                            //            obj.CreatedDate = DateTime.Now;
                            //            model.FLM_FleetPlanning.Add(obj);
                            //        }
                            //    }
                            //}
                            //model.SaveChanges();
                        }
                        catch (Exception ex)
                        {
                            throw FaultHelper.BusinessFault(null, null, dt.ToString("dd/MM/yyyy") + ex.Message);
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Supplier

        public DTOResult MaterialBySupplierID_List(int supplierid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var ToDate = DateTime.Now.Date;
                    var query = model.FLM_MaterialPrice.Where(c => c.SupplierID == supplierid).GroupBy(c => c.MaterialID).Select(c => new DTOFLMMaterialPrice
                    {
                        MaterialID = c.FirstOrDefault().MaterialID,
                        MaterialCode = c.FirstOrDefault().FLM_Material.Code,
                        MaterialName = c.FirstOrDefault().FLM_Material.MaterialName,
                        GroupOfMaterialName = c.FirstOrDefault().FLM_Material.CAT_GroupOfMaterial.GroupName,
                        IsFuel = c.FirstOrDefault().FLM_Material.CAT_GroupOfMaterial.IsFuel,
                        Price = c.Where(d => d.EffectDate <= ToDate).OrderByDescending(d => d.EffectDate).FirstOrDefault() != null ? c.Where(d => d.EffectDate <= ToDate).OrderByDescending(d => d.EffectDate).FirstOrDefault().Price : 0,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMMaterialPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MaterialAll_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var ToDate = DateTime.Now.Date;
                    //var query = model.FLM_MaterialPrice.GroupBy(c => c.MaterialID).Select(c => new DTOFLMMaterialPrice
                    //{
                    //    MaterialID = c.FirstOrDefault().MaterialID,
                    //    MaterialCode = c.FirstOrDefault().FLM_Material.Code,
                    //    MaterialName = c.FirstOrDefault().FLM_Material.MaterialName,
                    //    GroupOfMaterialName = c.FirstOrDefault().FLM_Material.CAT_GroupOfMaterial.GroupName,
                    //    IsFuel = c.FirstOrDefault().FLM_Material.CAT_GroupOfMaterial.IsFuel,
                    //    Price = c.Where(d => d.EffectDate <= ToDate).OrderByDescending(d => d.EffectDate).FirstOrDefault() != null ? c.Where(d => d.EffectDate <= ToDate).OrderByDescending(d => d.EffectDate).FirstOrDefault().Price : 0,
                    //}).ToList();
                    var query = model.FLM_Material.Select(c => new DTOFLMMaterialPrice
                    {
                        MaterialID = c.ID,
                        MaterialCode = c.Code,
                        MaterialName = c.MaterialName,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName,
                        IsFuel = c.CAT_GroupOfMaterial.IsFuel,
                        Price = 0,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMMaterialPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion


        #region Material in Vehicle (MaterialQuota)
        public DTOResult MaterialQuota_List(string request, int vehicleid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_MaterialQuota.Where(c => c.VehicleID == vehicleid).Select(c => new DTOFLMMaterialQuota
                    {
                        ID = c.ID,
                        QuantityPerKM = c.QuantityPerKM,
                        VehicleID = c.VehicleID,
                        MaterialID = c.MaterialID,
                        MaterialCode = c.FLM_Material.Code,
                        MaterialName = c.FLM_Material.MaterialName,
                        GroupOfMaterialName = c.FLM_Material.CAT_GroupOfMaterial.GroupName,
                        IsFuel = c.FLM_Material.CAT_GroupOfMaterial.IsFuel,
                        KMStart = c.KMStart,
                        KMCurrent = c.KMCurrent,
                        KMWarning = c.KMWarning
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMaterialQuota>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MaterialQuota_SaveList(List<DTOFLMMaterialQuota> lst, int vehicleid)
        {
            try
            {
                List<int> result = new List<int>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng
                    foreach (var item in lst)
                    {
                        var objCheck = model.FLM_MaterialQuota.FirstOrDefault(c => c.VehicleID == vehicleid && c.MaterialID == item.MaterialID && c.ID != item.ID);
                        if (objCheck != null)
                            throw FaultHelper.BusinessFault(null, null, "Vật tư đã được thiết lập định mức!");
                    }
                    #endregion

                    foreach (var item in lst)
                    {
                        var obj = model.FLM_MaterialQuota.FirstOrDefault(c => c.VehicleID == vehicleid && c.MaterialID == item.MaterialID);
                        if (obj == null)
                        {
                            obj = new FLM_MaterialQuota();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.MaterialID = item.MaterialID;
                            obj.VehicleID = vehicleid;
                            model.FLM_MaterialQuota.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.QuantityPerKM = item.QuantityPerKM;
                        obj.KMStart = item.KMStart;
                        obj.KMCurrent = item.KMCurrent;
                        obj.KMWarning = item.KMWarning;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int MaterialQuota_Save(DTOFLMMaterialQuota item, int vehicleid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng
                    var objCheck = model.FLM_MaterialQuota.FirstOrDefault(c => c.VehicleID == vehicleid && c.MaterialID == item.MaterialID && c.ID != item.ID);
                    if (objCheck != null)
                        throw FaultHelper.BusinessFault(null, null, "Vật tư đã được thiết lập định mức!");
                    #endregion

                    var obj = model.FLM_MaterialQuota.FirstOrDefault(c => c.VehicleID == vehicleid && c.MaterialID == item.MaterialID);
                    if (obj == null)
                    {
                        obj = new FLM_MaterialQuota();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.MaterialID = item.MaterialID;
                        obj.VehicleID = vehicleid;
                        model.FLM_MaterialQuota.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.QuantityPerKM = item.QuantityPerKM;
                    obj.KMStart = item.KMStart;
                    obj.KMCurrent = item.KMCurrent;
                    obj.KMWarning = item.KMWarning;

                    model.SaveChanges();

                    return obj.ID;
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MaterialQuota_Delete(DTOFLMMaterialQuota item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_MaterialQuota.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.FLM_MaterialQuota.Remove(obj);
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MaterialByVehicleID_List(int vehicleid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstMaterialID = model.FLM_MaterialQuota.Where(c => c.VehicleID == vehicleid).Select(s => s.MaterialID).ToList<int>();
                    var query = model.FLM_Material.Where(c => !lstMaterialID.Contains(c.ID)).Select(c => new DTOFLMMaterialQuota
                    {
                        ID = c.ID,
                        MaterialID = c.ID,
                        MaterialCode = c.Code,
                        MaterialName = c.MaterialName,
                        IsFuel = c.CAT_GroupOfMaterial.IsFuel,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query.ToArray<DTOFLMMaterialQuota>();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Valriable Cost (Tạo mới)
        public DTOResult VehicleAutoComplete_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOCATVehicle> lstData = new List<DTOCATVehicle>();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor)).Select(c => new DTOCATVehicle
                    {
                        ID = c.ID,
                        KMEnd = 0,
                        RegNo = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : string.Empty
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region FLMRepairLarge

        #endregion

        #region Maintenance

        public DTOFLMMaintenanceSchedulerData FLMMaintenance_Data(List<int> lstAssetID, DateTime dateFrom, DateTime dateTo)
        {
            try
            {
                DTOFLMMaintenanceSchedulerData result = new DTOFLMMaintenanceSchedulerData();
                result.ListResource = new List<DTOFLMMaintenanceSchedulerResource>();
                result.ListTask = new List<DTOFLMAssetTimeSheet>();
                using (var model = new DataEntities())
                {

                    result.ListResource = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && lstAssetID.Contains(c.ID)).Select(c => new DTOFLMMaintenanceSchedulerResource
                    {
                        AssetID = c.ID,
                        RegNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : c.RomoocID > 0 ? c.CAT_Romooc.RegNo : c.CAT_Container.ContainerNo,
                        TypeOfAssetID = c.TypeOfAssetID > 0 ? c.TypeOfAssetID.Value : -1,
                        TypeOfAssetName = c.TypeOfAssetID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                    }).ToList();

                    var query = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.DateFrom >= dateFrom && c.DateFrom < dateTo && lstAssetID.Contains(c.AssetID)).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = c.AssetID,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        StatusOfAssetTimeSheetName = c.SYS_Var.ValueOfVar,
                        StatusOfAssetTimeSheetID = c.StatusOfAssetTimeSheetID,
                        ReferID = c.ReferID,
                        TypeID = 0,
                        Note = ""
                    }).ToList();

                    foreach (var item in query)
                    {
                        switch (item.StatusOfAssetTimeSheetID)
                        {
                            default:
                                break;
                            case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster: item.TypeID = -1; break;
                            case -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster: item.TypeID = -2; break;
                            case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence: item.TypeID = 1; break;
                            case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry: item.TypeID = 2; break;
                            case -(int)SYSVarType.StatusOfAssetTimeSheetRepair: item.TypeID = 3; break;
                        }
                    }
                    result.ListTask.AddRange(query);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMActivity FLMMaintenance_VehicleTimeGet(int timeID)
        {
            try
            {
                DTOFLMActivity result = new DTOFLMActivity();
                List<int> lstTypeAsset = new List<int>();
                lstTypeAsset.Add(-(int)SYSVarType.TypeOfAssetTruck);
                lstTypeAsset.Add(-(int)SYSVarType.TypeOfAssetTractor);
                lstTypeAsset.Add(-(int)SYSVarType.TypeOfAssetRomooc);
                lstTypeAsset.Add(-(int)SYSVarType.TypeOfAssetContainer);

                using (var model = new DataEntities())
                {
                    if (timeID > 0)
                    {
                        var objTime = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == timeID);
                        if (objTime == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu TimeID:" + timeID);

                        var obj = model.FLM_Activity.FirstOrDefault(c => c.ID == objTime.ReferID);
                        if (obj == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu activity :");
                        result.ID = obj.ID;
                        result.AssetID = obj.AssetID;
                        result.TimeSheetID = objTime.ID;//id time sheet
                        result.PlanDateFrom = obj.PlanDateFrom;
                        result.PlanDateTo = obj.PlanDateTo;
                        result.EffectiveDateFrom = obj.EffectiveDateFrom;
                        result.EffectiveDateTo = obj.EffectiveDateTo;
                        result.TypeOfActivityID = obj.TypeOfActivityID;
                        result.TypeOfActivityName = obj.SYS_Var.ValueOfVar;
                        result.Note = obj.Note;
                        result.TotalRecall = obj.TotalRecall;
                        result.TotalRepeat = obj.TotalRepeat;
                        result.RegNo = obj.FLM_Asset.VehicleID > 0 ? obj.FLM_Asset.CAT_Vehicle.RegNo : obj.FLM_Asset.RomoocID > 0 ? obj.FLM_Asset.CAT_Romooc.RegNo : obj.FLM_Asset.CAT_Container.ContainerNo;
                        result.ActivityRepeatID = obj.ActivityRepeatID;

                        result.IsLessThanDay = obj.PlanDateFrom.Date == obj.PlanDateTo.Date;

                        result.IsClosed = obj.IsClosed;
                        result.LocationEndPlanID = objTime.LocationEndPlanID > 0 ? objTime.LocationEndPlanID.Value : -1;
                        result.LocationEndPlanCode = objTime.LocationEndPlanID > 0 ? objTime.CAT_Location.Code : string.Empty;
                        result.LocationEndPlanAddress = objTime.LocationEndPlanID > 0 ? objTime.CAT_Location.Address : string.Empty;
                        var status = -1;
                        switch (obj.TypeOfActivityID)
                        {
                            default:
                                break;
                            case -(int)SYSVarType.TypeOfActivityMaintence: status = -(int)SYSVarType.StatusOfAssetTimeSheetMaintence; break;
                            case -(int)SYSVarType.TypeOfActivityRegistry: status = -(int)SYSVarType.StatusOfAssetTimeSheetRegistry; break;
                            case -(int)SYSVarType.TypeOfActivityRepairLarge: status = -(int)SYSVarType.StatusOfAssetTimeSheetRepair; break;
                            case -(int)SYSVarType.TypeOfActivityRepairSmall: status = -(int)SYSVarType.StatusOfAssetTimeSheetRepair; break;
                        }

                        result.IsEditable = model.FLM_AssetTimeSheet.Where(c => c.ReferID == obj.ID && c.StatusOfAssetTimeSheetID == status).Count(c => c.TypeOfAssetTimeSheetID > -(int)SYSVarType.TypeOfAssetTimeSheetOpen) == 0;

                        result.ActivityRepeatNone = -(int)SYSVarType.ActivityRepeatNone;
                    }
                    else
                    {

                        result.ID = -1;
                        result.AssetID = -1;
                        result.RegNo = string.Empty;
                        result.TimeSheetID = -1;
                        var objAsset = model.FLM_Asset.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && lstTypeAsset.Contains(c.TypeOfAssetID.Value) && c.TypeOfAssetID > 0);
                        if (objAsset != null)
                        {
                            result.AssetID = objAsset.ID;
                            result.RegNo = objAsset.VehicleID > 0 ? objAsset.CAT_Vehicle.RegNo : objAsset.RomoocID > 0 ? objAsset.CAT_Romooc.RegNo : objAsset.CAT_Container.ContainerNo;
                        }
                        result.PlanDateFrom = DateTime.Now;
                        result.PlanDateTo = DateTime.Now.AddHours(2);

                        result.IsLessThanDay = result.PlanDateFrom.Date == result.PlanDateTo.Date;

                        result.TypeOfActivityName = string.Empty;
                        result.TypeOfActivityID = -1;
                        var objType = model.SYS_Var.FirstOrDefault(c => c.TypeOfVar == (int)SYSVarType.TypeOfActivity);
                        if (objType != null)
                        {
                            result.TypeOfActivityID = objType.ID;
                            result.TypeOfActivityName = objType.ValueOfVar;
                        }
                        result.TotalRecall = -1;
                        result.TotalRepeat = 1;
                        result.ActivityRepeatNone = -(int)SYSVarType.ActivityRepeatNone;
                        result.ActivityRepeatID = -1;
                        var objTypeRepeat = model.SYS_Var.FirstOrDefault(c => c.TypeOfVar == (int)SYSVarType.ActivityRepeat);
                        if (objTypeRepeat != null) result.ActivityRepeatID = objTypeRepeat.ID;

                        result.LocationEndPlanID = -1;
                        var objSetting = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).FirstOrDefault();
                        if (objSetting != null)
                        {
                            List<DTOSYSSetting> settings = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(objSetting.Setting.ToString());
                            if (settings.Count > 0)
                            {
                                var setting = settings[0];
                                var objLocation = model.CAT_Location.FirstOrDefault(c => c.ID == setting.LocationToID);
                                if (objLocation != null)
                                {
                                    result.LocationEndPlanID = objLocation.ID;
                                    result.LocationEndPlanCode = objLocation.Code;
                                    result.LocationEndPlanAddress = objLocation.Address;
                                }
                            }
                        }

                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void FLMMaintenance_VehicleTimeSave(DTOFLMActivity item)
        {
            try
            {
                var iMaintenance = -(int)SYSVarType.TypeOfActivityMaintence;
                var iRegistry = -(int)SYSVarType.TypeOfActivityRegistry;

                var iRepairSmall = -(int)SYSVarType.TypeOfActivityRepairSmall;
                var iRepairLarge = -(int)SYSVarType.TypeOfActivityRepairLarge;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int? activity = null;
                    int? status = null;
                    if (model.FLM_AssetTimeSheet.Count(c => c.ID != item.TimeSheetID && c.AssetID == item.AssetID && c.DateFrom <= item.PlanDateFrom && c.DateTo >= item.PlanDateTo) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Xe đã có kế hoạch trong khoảng thời gian đã chọn");

                    if (activity == iMaintenance)
                        status = -(int)SYSVarType.StatusOfAssetTimeSheetMaintence;
                    else if (activity == iRegistry)
                        status = -(int)SYSVarType.StatusOfAssetTimeSheetRegistry;
                    else if (activity == iRepairLarge || activity == iRepairSmall)
                        status = -(int)SYSVarType.StatusOfAssetTimeSheetRepair;

                    if (model.FLM_AssetTimeSheet.Count(c => c.ReferID == item.ID && c.AssetID == item.AssetID && c.StatusOfAssetTimeSheetID == status && c.TypeOfAssetTimeSheetID > -(int)SYSVarType.TypeOfAssetTimeSheetOpen) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Đã phát sinh chuyến không thể thay đổi");

                    var obj = model.FLM_Activity.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_Activity();
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;

                        obj.PlanDateFrom = item.PlanDateFrom;
                        obj.PlanDateTo = item.PlanDateTo;
                        obj.AssetID = item.AssetID;
                        obj.IsClosed = false;
                    }
                    else
                    {
                        activity = obj.TypeOfActivityID;
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ActivityRepeatID = item.ActivityRepeatID;
                    obj.TypeOfActivityID = item.TypeOfActivityID;
                    obj.EffectiveDateFrom = item.PlanDateFrom;
                    obj.EffectiveDateTo = item.PlanDateTo;
                    obj.PlanDateFrom = item.PlanDateFrom;
                    obj.PlanDateTo = item.PlanDateTo;
                    obj.TotalRecall = item.TotalRecall;
                    obj.TotalRepeat = item.TotalRepeat;
                    obj.Note = item.Note;
                    if (obj.CreatedDate.AddDays(1).CompareTo(DateTime.Now) <= 0)
                    {
                        obj.PlanDateFrom = item.PlanDateTo;
                        obj.PlanDateTo = item.PlanDateTo;
                    }

                    if (obj.ID < 1)
                        model.FLM_Activity.Add(obj);
                    model.SaveChanges();

                    if (activity == iMaintenance)
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetMaintence);
                    else if (activity == iRegistry)
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetRegistry);
                    else if (activity == iRepairLarge || activity == iRepairSmall)
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetRepair);


                    if (obj.TypeOfActivityID == iMaintenance)
                        HelperTimeSheet.FLMCreate(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetMaintence, item.LocationEndPlanID);
                    else if (obj.TypeOfActivityID == iRegistry)
                        HelperTimeSheet.FLMCreate(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetRegistry, item.LocationEndPlanID);
                    else if (obj.TypeOfActivityID == iRepairLarge || obj.TypeOfActivityID == iRepairSmall)
                        HelperTimeSheet.FLMCreate(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetRepair, item.LocationEndPlanID);

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void FLMMaintenance_VehicleTimeDelete(int actID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var iMaintenance = -(int)SYSVarType.TypeOfActivityMaintence;
                    var iRegistry = -(int)SYSVarType.TypeOfActivityRegistry;

                    var iRepairSmall = -(int)SYSVarType.TypeOfActivityRepairSmall;
                    var iRepairLarge = -(int)SYSVarType.TypeOfActivityRepairLarge;

                    var obj = model.FLM_Activity.FirstOrDefault(c => c.ID == actID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu activity ID:" + actID);
                    var status = -1;
                    if (obj.TypeOfActivityID == iMaintenance)
                        status = -(int)SYSVarType.StatusOfAssetTimeSheetMaintence;
                    else if (obj.TypeOfActivityID == iRegistry)
                        status = -(int)SYSVarType.StatusOfAssetTimeSheetRegistry;
                    else if (obj.TypeOfActivityID == iRepairLarge || obj.TypeOfActivityID == iRepairSmall)
                        status = -(int)SYSVarType.StatusOfAssetTimeSheetRepair;

                    if (status == -1)
                        throw FaultHelper.BusinessFault(null, null, "Không phải bảo trì, đang kiểm");

                    if (model.FLM_AssetTimeSheet.Where(c => c.ReferID == obj.ID && c.StatusOfAssetTimeSheetID == status && c.TypeOfAssetTimeSheetID == -(int)SYSVarType.TypeOfAssetTimeSheetComplete).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa vì có chuyến đã hoàn thành");

                    if (obj.TypeOfActivityID == iMaintenance)
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetMaintence);
                    else if (obj.TypeOfActivityID == iRegistry)
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetRegistry);
                    else if (obj.TypeOfActivityID == iRepairLarge || obj.TypeOfActivityID == iRepairSmall)
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetRepair);

                    model.FLM_Activity.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMMaintenance_AssetList()
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTrk = -(int)SYSVarType.TypeOfAssetTruck;
                    int iTrr = -(int)SYSVarType.TypeOfAssetTractor;
                    int iCo = -(int)SYSVarType.TypeOfAssetContainer;
                    int iRmc = -(int)SYSVarType.TypeOfAssetRomooc;
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == iTrk || c.TypeOfAssetID == iTrr || c.TypeOfAssetID == iRmc || c.TypeOfAssetID == iCo)).Select(c => new DTOFLMMaintenanceSchedulerResource
                    {
                        AssetID = c.ID,
                        RegNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : c.RomoocID > 0 ? c.CAT_Romooc.RegNo : c.CAT_Container.ContainerNo,
                        TypeOfAssetID = c.TypeOfAssetID == iTrk ? 1 : c.TypeOfAssetID == iTrr ? 2 : c.TypeOfAssetID == iRmc ? 3 : 4,
                        TypeOfAssetName = c.TypeOfAssetID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                    }).OrderBy(c => c.TypeOfAssetID).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMMaintenanceSchedulerResource>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMMaintenance_CostList()
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Cost.Where(c => !c.IsHidden).Select(c => new CATCost
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CostName = c.CostName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMMaintenance_LocationList(string request)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        WardID = c.WardID,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        EconomicZone = c.EconomicZone,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        Note1 = c.Note1,
                        Note = c.Note,
                        GroupOfLocationID = c.GroupOfLocationID > 0 ? c.GroupOfLocationID.Value : -1,
                        GroupOfLocationName = c.GroupOfLocationID > 0 ? c.CAT_GroupOfLocation.GroupName : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region FLMTransferReceipt

        #region new
        //danh sách kho
        public DTOResult FLMTransferReceipt_StockList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Stock.Select(c => new FLMStock
                    {
                        ID = c.ID,
                        Code = c.Code,
                        StockName = c.StockName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<FLMStock>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMTransferReceipt_EQMByStock(string request, int stockID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (stockID > 0)
                    {
                        var query = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StockID.Value == stockID && c.IsCurrent).Select(c => new DTOEquipment
                            {
                                PartID = c.FLM_Asset1.ID,
                                PartNo = c.FLM_Asset1.Code,
                                PartName = c.FLM_Asset1.Name,
                                StockID = c.StockID,
                                StockName = c.FLM_Stock.StockName,
                                GroupOfEquipmentName = c.FLM_Asset1.CAT_GroupOfEquipment.GroupName,
                                YearOfProduction = c.FLM_Asset1.YearOfProduction,
                                Manufactor = c.FLM_Asset1.Manufactor,
                                BaseValue = c.FLM_Asset1.BaseValue,
                                CurrentValue = c.FLM_Asset1.CurrentValue,
                                DepreciationPeriod = c.FLM_Asset1.DepreciationPeriod,
                                RemainValue = c.FLM_Asset1.RemainValue,
                                DepreciationStart = c.FLM_Asset1.DepreciationStart,
                                Specification = c.FLM_Asset1.Specification,
                                WarrantyEnd = c.FLM_Asset1.WarrantyEnd,
                                WarrantyPeriod = c.FLM_Asset1.WarrantyPeriod
                            }).ToDataSourceResult(CreateRequest(request));

                        result.Data = query.Data as IEnumerable<DTOEquipment>;
                        result.Total = query.Total;
                    }
                    else
                    {
                        var query = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StockID.HasValue && c.IsCurrent).Select(c => new DTOEquipment
                        {
                            PartID = c.FLM_Asset1.ID,
                            PartNo = c.FLM_Asset1.Code,
                            PartName = c.FLM_Asset1.Name,
                            StockID = c.StockID,
                            StockName = c.FLM_Stock.StockName,
                            GroupOfEquipmentName = c.FLM_Asset1.CAT_GroupOfEquipment.GroupName,
                            YearOfProduction = c.FLM_Asset1.YearOfProduction,
                            Manufactor = c.FLM_Asset1.Manufactor,
                            BaseValue = c.FLM_Asset1.BaseValue,
                            CurrentValue = c.FLM_Asset1.CurrentValue,
                            DepreciationPeriod = c.FLM_Asset1.DepreciationPeriod,
                            RemainValue = c.FLM_Asset1.RemainValue,
                            DepreciationStart = c.FLM_Asset1.DepreciationStart,
                            Specification = c.FLM_Asset1.Specification,
                            WarrantyEnd = c.FLM_Asset1.WarrantyEnd,
                            WarrantyPeriod = c.FLM_Asset1.WarrantyPeriod
                        }).ToDataSourceResult(CreateRequest(request));

                        result.Data = query.Data as IEnumerable<DTOEquipment>;
                        result.Total = query.Total;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOEquipment FLMTransferReceipt_EQMGet(int id)
        {
            try
            {
                DTOEquipment result = new DTOEquipment();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_TransferHistory.Where(c => c.AssetOwnID == id && c.IsCurrent).Select(c => new DTOEquipment
                         {
                             PartID = c.FLM_Asset1.ID,
                             PartNo = c.FLM_Asset1.Code,
                             PartName = c.FLM_Asset1.Name,
                             StockID = c.StockID,
                             StockName = c.FLM_Stock.StockName,
                             GroupOfEquipmentID = c.FLM_Asset1.GroupOfEquipmentID.HasValue ? c.FLM_Asset1.GroupOfEquipmentID.Value : 0,
                             GroupOfEquipmentName = c.FLM_Asset1.CAT_GroupOfEquipment.GroupName,
                             YearOfProduction = c.FLM_Asset1.YearOfProduction,
                             Manufactor = c.FLM_Asset1.Manufactor,
                             BaseValue = c.FLM_Asset1.BaseValue,
                             CurrentValue = c.FLM_Asset1.CurrentValue,
                             DepreciationPeriod = c.FLM_Asset1.DepreciationPeriod,
                             RemainValue = c.FLM_Asset1.RemainValue,
                             DepreciationStart = c.FLM_Asset1.DepreciationStart,
                             Specification = c.FLM_Asset1.Specification,
                             WarrantyEnd = c.FLM_Asset1.WarrantyEnd,
                             WarrantyPeriod = c.FLM_Asset1.WarrantyPeriod,
                             Quantity = 1,
                             ExprDay = c.FLM_Asset1.ExprDay
                         }).FirstOrDefault();
                    }
                    else
                    {
                        result.PartID = 0;
                        var obj = model.CAT_GroupOfEquipment.FirstOrDefault();
                        result.GroupOfEquipmentID = 0;
                        if (obj != null) result.GroupOfEquipmentID = obj.ID;
                        result.Quantity = 1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOEquipment> FLMTransferReceipt_EQMData()
        {
            try
            {
                List<DTOEquipment> result = new List<DTOEquipment>();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsCurrent).Select(c => new DTOEquipment
                    {
                        PartID = c.FLM_Asset1.ID,
                        PartNo = c.FLM_Asset1.Code,
                        PartName = c.FLM_Asset1.Name,
                        GroupOfEquipmentName = c.FLM_Asset1.CAT_GroupOfEquipment.GroupName,
                        YearOfProduction = c.FLM_Asset1.YearOfProduction,
                        Manufactor = c.FLM_Asset1.Manufactor,
                        BaseValue = c.FLM_Asset1.BaseValue,
                        CurrentValue = c.FLM_Asset1.CurrentValue,
                        DepreciationPeriod = c.FLM_Asset1.DepreciationPeriod,
                        RemainValue = c.FLM_Asset1.RemainValue,
                        DepreciationStart = c.FLM_Asset1.DepreciationStart,
                        Specification = c.FLM_Asset1.Specification,
                        WarrantyEnd = c.FLM_Asset1.WarrantyEnd,
                        WarrantyPeriod = c.FLM_Asset1.WarrantyPeriod
                    }).ToList();
                    result.AddRange(query);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        //tão mới thì add history, edit thi ko
        public void FLMTransferReceipt_EQMSave(DTOEquipment item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    //if id<0 duplicate by quantity, id>0 edit
                    if (item.PartID < 1)
                    {
                        if (item.Quantity > 0)
                        {
                            if (!item.VehicleID.HasValue && !item.StockID.HasValue)
                                throw FaultHelper.BusinessFault(null, null, "Chưa chọn kho hoạc xe");

                            #region lưu FLM Receipt
                            var objReceipt = new FLM_Receipt();
                            objReceipt.Code = Receipt_GetLastCode(model);
                            objReceipt.CreatedDate = DateTime.Now;
                            objReceipt.CreatedBy = Account.UserName;
                            objReceipt.DateReceipt = DateTime.Now;
                            objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptTranfer;
                            objReceipt.SYSCustomerID = Account.SYSCustomerID;
                            model.FLM_Receipt.Add(objReceipt);
                            model.SaveChanges();
                            #endregion

                            for (int i = 0; i < item.Quantity; i++)
                            {
                                #region luu asset
                                var obj = new FLM_Asset();
                                obj.SYSCustomerID = Account.SYSCustomerID;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.Code = string.Empty;
                                obj.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetEquipment;

                                obj.VehicleID = null;
                                obj.RomoocID = null;
                                obj.ContainerID = null;
                                obj.BaseValue = item.BaseValue;
                                obj.Name = item.PartName;
                                obj.CurrentValue = item.CurrentValue;
                                obj.RemainValue = item.RemainValue;
                                obj.DepreciationPeriod = item.DepreciationPeriod;
                                obj.DepreciationStart = item.DepreciationStart;
                                obj.GroupOfEquipmentID = item.GroupOfEquipmentID;
                                obj.Manufactor = item.Manufactor;
                                obj.IsRent = false;
                                obj.IsDisposal = false;
                                obj.WarrantyEnd = item.WarrantyEnd;
                                obj.WarrantyPeriod = item.WarrantyPeriod;
                                obj.YearOfProduction = item.YearOfProduction;
                                obj.Specification = item.Specification;
                                obj.ExprDay = item.ExprDay;
                                model.FLM_Asset.Add(obj);
                                #endregion

                                #region luu transhistory

                                var objTranferHistory = new FLM_TransferHistory();
                                objTranferHistory.CreatedBy = Account.UserName;
                                objTranferHistory.CreatedDate = DateTime.Now;
                                objTranferHistory.AssetFromID = null;
                                objTranferHistory.SYSCustomerID = Account.SYSCustomerID;
                                if (item.VehicleID.HasValue)
                                {
                                    objTranferHistory.AssetToID = item.VehicleID.Value;
                                }
                                else if (item.StockID.HasValue)
                                {
                                    objTranferHistory.StockID = item.StockID.Value;
                                }
                                objTranferHistory.FLM_Asset1 = obj;
                                objTranferHistory.DateTranfer = DateTime.Now;
                                objTranferHistory.IsCurrent = true;
                                objTranferHistory.Amount = item.CurrentValue.HasValue ? (decimal)item.CurrentValue.Value : 0;
                                objTranferHistory.ReceiptID = objReceipt.ID;

                                model.FLM_TransferHistory.Add(objTranferHistory);
                                #endregion

                                model.SaveChanges();

                                obj.Code = PartNoPrefix + obj.ID.ToString(PartNoCodeNum);
                                model.SaveChanges();
                            }


                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Số lượng không chính xác");
                    }
                    else
                    {
                        var obj = model.FLM_Asset.Where(c => c.ID == item.PartID).FirstOrDefault();
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.BaseValue = item.BaseValue;
                            obj.Name = item.PartName;
                            obj.CurrentValue = item.CurrentValue;
                            obj.RemainValue = item.RemainValue;
                            obj.DepreciationPeriod = item.DepreciationPeriod;
                            obj.DepreciationStart = item.DepreciationStart;
                            obj.GroupOfEquipmentID = item.GroupOfEquipmentID;
                            obj.Manufactor = item.Manufactor;
                            obj.WarrantyEnd = item.WarrantyEnd;
                            obj.WarrantyPeriod = item.WarrantyPeriod;
                            obj.YearOfProduction = item.YearOfProduction;
                            obj.Specification = item.Specification;
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMTransferReceipt_EQMImport(List<DTOEquipmentImport> data, int stockID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (data.Count(c => c.ExcelSuccess) > 0)
                    {
                        var objStock = model.FLM_Stock.FirstOrDefault(c => c.ID == stockID);
                        if (objStock == null) throw FaultHelper.BusinessFault(null, null, "Kho không chính xác");

                        //tao receipt 
                        #region lưu FLM Receipt
                        var objReceipt = new FLM_Receipt();
                        objReceipt.Code = Receipt_GetLastCode(model);
                        objReceipt.CreatedDate = DateTime.Now;
                        objReceipt.CreatedBy = Account.UserName;
                        objReceipt.DateReceipt = DateTime.Now;
                        objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptTranfer;
                        objReceipt.SYSCustomerID = Account.SYSCustomerID;
                        model.FLM_Receipt.Add(objReceipt);
                        #endregion

                        foreach (var item in data.Where(c => c.ExcelSuccess))
                        {
                            #region luu asset
                            var obj = new FLM_Asset();
                            obj.SYSCustomerID = Account.SYSCustomerID;
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.Code = item.PartNo;
                            obj.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetEquipment;

                            obj.VehicleID = null;
                            obj.RomoocID = null;
                            obj.ContainerID = null;
                            obj.BaseValue = item.BaseValue;
                            obj.Name = item.PartName;
                            obj.CurrentValue = item.CurrentValue;
                            obj.RemainValue = item.RemainValue;
                            obj.DepreciationPeriod = item.DepreciationPeriod;
                            obj.DepreciationStart = item.DepreciationStart;
                            if (item.GroupOfEquipmentID > 0) obj.GroupOfEquipmentID = item.GroupOfEquipmentID; else obj.GroupOfEquipmentID = null;
                            obj.Manufactor = item.Manufactor;
                            obj.IsRent = false;
                            obj.IsDisposal = false;
                            obj.WarrantyEnd = item.WarrantyEnd;
                            obj.WarrantyPeriod = item.WarrantyPeriod;
                            obj.YearOfProduction = item.YearOfProduction;
                            obj.Specification = item.Specification;
                            model.FLM_Asset.Add(obj);
                            #endregion

                            #region luu transhistory

                            var objTranferHistory = new FLM_TransferHistory();
                            objTranferHistory.CreatedBy = Account.UserName;
                            objTranferHistory.CreatedDate = DateTime.Now;
                            objTranferHistory.AssetFromID = null;
                            objTranferHistory.SYSCustomerID = Account.SYSCustomerID;

                            objTranferHistory.StockID = stockID;
                            objTranferHistory.FLM_Asset1 = obj;
                            objTranferHistory.DateTranfer = DateTime.Now;
                            objTranferHistory.IsCurrent = true;
                            objTranferHistory.Amount = item.CurrentValue.HasValue ? (decimal)item.CurrentValue.Value : 0;
                            objTranferHistory.FLM_Receipt = objReceipt;

                            model.FLM_TransferHistory.Add(objTranferHistory);
                            #endregion
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion
        public DTOResult FLMTransferReceipt_List(string request, DateTime dateFrom, DateTime dateTo)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    dateFrom = dateFrom.Date;
                    dateTo = dateTo.Date;
                    var query = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.DateTranfer >= dateFrom &&
                        c.DateTranfer < dateTo).Select(c => new DTOFLMEquipmentHistory
                    {
                        ID = c.ID,
                        DateTranfer = c.DateTranfer,
                        ReceiptNo = c.FLM_Receipt.Code,
                        EquipmentCode = c.FLM_Asset1.Code,
                        Amount = c.Amount,
                        AssetOwnID = c.AssetOwnID,
                        AssetFromID = c.AssetFromID,
                        AssetFromName = c.AssetFromID.HasValue ? (c.FLM_Asset.VehicleID.HasValue ? c.FLM_Asset.CAT_Vehicle.RegNo : (c.FLM_Asset.RomoocID.HasValue ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.CAT_Container.ContainerNo)) : string.Empty,
                        AssetToID = c.AssetToID,
                        AssetToName = c.AssetToID.HasValue ? (c.FLM_Asset2.VehicleID.HasValue ? c.FLM_Asset2.CAT_Vehicle.RegNo : (c.FLM_Asset2.RomoocID.HasValue ? c.FLM_Asset2.CAT_Romooc.RegNo : c.FLM_Asset2.CAT_Container.ContainerNo)) : string.Empty,
                        StockID = c.StockID,
                        StockName = c.StockID.HasValue ? c.FLM_Stock.StockName : string.Empty,
                        SYSCustomerID = c.SYSCustomerID
                    }).ToDataSourceResult(CreateRequest(request));

                    var lst = query.Data.Cast<DTOFLMEquipmentHistory>().ToList();
                    foreach (var item in lst)
                    {
                        if (!item.AssetFromID.HasValue && !item.AssetToID.HasValue && item.StockID.HasValue)
                        {
                            item.LocationFromName = string.Empty;
                            item.LocationToName = item.StockName;
                        }
                        else if (!item.AssetFromID.HasValue && item.AssetToID.HasValue && item.StockID.HasValue)
                        {
                            item.LocationFromName = item.StockName;
                            item.LocationToName = item.AssetToName;
                        }
                        else if (item.AssetFromID.HasValue && item.AssetToID.HasValue && !item.StockID.HasValue)
                        {
                            item.LocationFromName = item.AssetFromName;
                            item.LocationToName = item.AssetToName;
                        }
                        else if (!item.AssetFromID.HasValue && item.AssetToID.HasValue && item.StockID.HasValue)
                        {
                            item.LocationFromName = item.AssetFromName;
                            item.LocationToName = item.StockName;
                        }
                        else if (!item.AssetFromID.HasValue && item.AssetToID.HasValue && !item.StockID.HasValue)
                        {
                            item.LocationFromName = string.Empty;
                            item.LocationToName = item.AssetToName;
                        }
                    }

                    result.Data = lst.ToArray(); ;
                    result.Total = lst.Count();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMEquipmentHistory FLMTransferReceipt_Get(int id)
        {
            try
            {
                DTOFLMEquipmentHistory result = new DTOFLMEquipmentHistory();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_TransferHistory.Where(c => c.ID == id).Select(c => new DTOFLMEquipmentHistory
                                        {
                                            ID = c.ID,
                                            DateTranfer = c.DateTranfer,
                                            ReceiptNo = c.FLM_Receipt.Code,
                                            EquipmentCode = c.FLM_Asset1.Code,
                                            Amount = c.Amount,
                                            AssetOwnID = c.AssetOwnID,
                                            AssetFromID = c.AssetFromID,
                                            AssetFromName = c.AssetFromID.HasValue ? (c.FLM_Asset.VehicleID.HasValue ? c.FLM_Asset.CAT_Vehicle.RegNo : (c.FLM_Asset.RomoocID.HasValue ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.CAT_Container.ContainerNo)) : string.Empty,
                                            AssetToID = c.AssetToID,
                                            AssetToName = c.AssetToID.HasValue ? (c.FLM_Asset2.VehicleID.HasValue ? c.FLM_Asset2.CAT_Vehicle.RegNo : (c.FLM_Asset2.RomoocID.HasValue ? c.FLM_Asset2.CAT_Romooc.RegNo : c.FLM_Asset2.CAT_Container.ContainerNo)) : string.Empty,
                                            StockID = c.StockID,
                                            StockName = c.StockID.HasValue ? c.FLM_Stock.StockName : string.Empty,
                                            SYSCustomerID = c.SYSCustomerID
                                        }).FirstOrDefault();

                        if (result != null)
                        {
                            if (!result.AssetFromID.HasValue && !result.AssetToID.HasValue && result.StockID.HasValue)
                            {
                                result.LocationFromName = string.Empty;
                                result.LocationToName = result.StockName;
                            }
                            else if (!result.AssetFromID.HasValue && result.AssetToID.HasValue && result.StockID.HasValue)
                            {
                                result.LocationFromName = result.StockName;
                                result.LocationToName = result.AssetToName;
                            }
                            else if (result.AssetFromID.HasValue && result.AssetToID.HasValue && !result.StockID.HasValue)
                            {
                                result.LocationFromName = result.AssetFromName;
                                result.LocationToName = result.AssetToName;
                            }
                            else if (!result.AssetFromID.HasValue && result.AssetToID.HasValue && result.StockID.HasValue)
                            {
                                result.LocationFromName = result.AssetFromName;
                                result.LocationToName = result.StockName;
                            }
                            else if (!result.AssetFromID.HasValue && result.AssetToID.HasValue && !result.StockID.HasValue)
                            {
                                result.LocationFromName = string.Empty;
                                result.LocationToName = result.AssetToName;
                            }
                        }
                    }
                    else
                    {
                        result.ID = 0;
                        result.DateTranfer = DateTime.Now;
                        result.TypeLocation = 1;// default truck
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMEquipmentHistory FLMTransferReceipt_GetEQMHistory(int assetid)
        {
            try
            {
                DTOFLMEquipmentHistory result = new DTOFLMEquipmentHistory();
                using (var model = new DataEntities())
                {

                    var query = model.FLM_TransferHistory.Where(c => c.AssetOwnID == assetid && c.IsCurrent == true).Select(c => new DTOFLMEquipmentHistory
                    {
                        ID = c.ID,
                        DateTranfer = c.DateTranfer,
                        ReceiptNo = c.FLM_Receipt.Code,
                        EquipmentCode = c.FLM_Asset1.Code,
                        Amount = c.Amount,
                        AssetOwnID = c.AssetOwnID,
                        AssetFromID = c.AssetFromID,
                        AssetFromName = c.AssetFromID.HasValue ? (c.FLM_Asset.VehicleID.HasValue ? c.FLM_Asset.CAT_Vehicle.RegNo : (c.FLM_Asset.RomoocID.HasValue ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.CAT_Container.ContainerNo)) : string.Empty,
                        AssetToID = c.AssetToID,
                        AssetToName = c.AssetToID.HasValue ? (c.FLM_Asset2.VehicleID.HasValue ? c.FLM_Asset2.CAT_Vehicle.RegNo : (c.FLM_Asset2.RomoocID.HasValue ? c.FLM_Asset2.CAT_Romooc.RegNo : c.FLM_Asset2.CAT_Container.ContainerNo)) : string.Empty,
                        StockID = c.StockID,
                        StockName = c.StockID.HasValue ? c.FLM_Stock.StockName : string.Empty,
                        SYSCustomerID = c.SYSCustomerID,
                        TypeLocation = 1,
                    }).FirstOrDefault();
                    if (query != null)
                    {
                        if (!query.AssetFromID.HasValue && !query.AssetToID.HasValue && query.StockID.HasValue)
                        {
                            query.LocationFromName = string.Empty;
                            query.LocationToName = query.StockName;
                        }
                        else if (!query.AssetFromID.HasValue && query.AssetToID.HasValue && query.StockID.HasValue)
                        {
                            query.LocationFromName = query.StockName;
                            query.LocationToName = query.AssetToName;
                        }
                        else if (query.AssetFromID.HasValue && query.AssetToID.HasValue && !query.StockID.HasValue)
                        {
                            query.LocationFromName = query.AssetFromName;
                            query.LocationToName = query.AssetToName;
                        }
                        else if (!query.AssetFromID.HasValue && query.AssetToID.HasValue && query.StockID.HasValue)
                        {
                            query.LocationFromName = query.AssetFromName;
                            query.LocationToName = query.StockName;
                        }
                        else if (!query.AssetFromID.HasValue && query.AssetToID.HasValue && !query.StockID.HasValue)
                        {
                            query.LocationFromName = string.Empty;
                            query.LocationToName = query.AssetToName;
                        }
                    }
                    if (query != null)
                        result = query;

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMTransferReceipt_GetEQMList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetEquipment && c.IsDisposal == false).Select(c => new DTOFLMEquipment
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        ContainerID = c.ContainerID,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        TypeOfAssetID = c.TypeOfAssetID,
                        Code = c.Code,
                        Name = c.Name,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RentName = c.CUS_Customer.CustomerName,
                        SYSCustomerID = c.SYSCustomerID,
                        GroupOfEquipmentID = c.GroupOfEquipmentID,
                        GroupOfEquipmentName = c.CAT_GroupOfEquipment.GroupName,
                        IsDisposal = c.IsDisposal,
                        RomoocID = c.RomoocID,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        URL = string.Empty,
                        CurrentLocation = string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));

                    var lst = query.Data.Cast<DTOFLMEquipment>().ToList();

                    var lstid = lst.Select(c => c.ID).ToList();
                    var lstHisTory = model.FLM_TransferHistory.Where(c => lstid.Contains(c.AssetOwnID) && c.IsCurrent).ToList();
                    foreach (var item in lst)
                    {
                        var obj = lstHisTory.Where(c => c.AssetOwnID == item.ID).FirstOrDefault();
                        if (obj != null)
                        {

                            if (obj.AssetToID.HasValue)
                            {
                                if (obj.FLM_Asset2.VehicleID.HasValue)
                                {
                                    if (obj.FLM_Asset2.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)
                                    {
                                        item.CurrentLocation = "Xe tải: " + obj.FLM_Asset2.CAT_Vehicle.RegNo;
                                    }
                                    else item.CurrentLocation = "Đầu kéo: " + obj.FLM_Asset2.CAT_Vehicle.RegNo;
                                }
                                else if (obj.FLM_Asset2.RomoocID.HasValue) item.CurrentLocation = "Romooc: " + obj.FLM_Asset2.CAT_Romooc.RegNo;
                                else if (obj.FLM_Asset2.ContainerID.HasValue) item.CurrentLocation = obj.FLM_Asset2.CAT_Container.ContainerNo;
                            }
                            else if (obj.StockID.HasValue) { item.CurrentLocation = "Kho: " + obj.FLM_Stock.Code; item.StockID = obj.StockID; }
                        }
                    }

                    result.Data = lst.ToArray();
                    result.Total = lst.Count();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMTransferReceiptLocation FLMTransferReceipt_GetEQMLocation()
        {
            try
            {
                DTOFLMTransferReceiptLocation result = new DTOFLMTransferReceiptLocation();
                result.ListRomooc = new List<DTOCombobox>();
                result.ListStock = new List<DTOCombobox>();
                result.ListTractor = new List<DTOCombobox>();
                result.ListTruck = new List<DTOCombobox>();
                using (var model = new DataEntities())
                {
                    result.ListTruck = model.FLM_Asset.Where(c => c.VehicleID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck).Select(c => new DTOCombobox
                    {
                        Text = c.CAT_Vehicle.RegNo,
                        ValueInt = c.VehicleID.Value,
                    }).ToList();

                    result.ListTractor = model.FLM_Asset.Where(c => c.VehicleID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new DTOCombobox
                    {
                        Text = c.CAT_Vehicle.RegNo,
                        ValueInt = c.VehicleID.Value,
                    }).ToList();

                    result.ListStock = model.FLM_Stock.Select(c => new DTOCombobox
                    {
                        Text = c.StockName,
                        ValueInt = c.ID,
                    }).ToList();

                    result.ListRomooc = model.FLM_Asset.Where(c => c.RomoocID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new DTOCombobox
                    {
                        Text = c.CAT_Romooc.RegNo,
                        ValueInt = c.RomoocID.Value,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMTransferReceipt_Save(DTOFLMEquipmentHistory item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_TransferHistory.Where(c => c.AssetOwnID == item.AssetOwnID && c.IsCurrent == true).FirstOrDefault();

                    if (obj != null)
                    {
                        #region lưu FLM Receipt
                        var objReceipt = new FLM_Receipt();
                        objReceipt.Code = Receipt_GetLastCode(model);
                        objReceipt.CreatedDate = DateTime.Now;
                        objReceipt.CreatedBy = Account.UserName;
                        objReceipt.DateReceipt = item.DateTranfer;
                        objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptTranfer;
                        objReceipt.SYSCustomerID = Account.SYSCustomerID;
                        model.FLM_Receipt.Add(objReceipt);
                        #endregion

                        obj.IsCurrent = false;
                        FLM_TransferHistory itemnew = new FLM_TransferHistory();
                        itemnew.CreatedBy = Account.UserName;
                        itemnew.CreatedDate = DateTime.Now;
                        itemnew.AssetOwnID = obj.AssetOwnID;
                        if (item.AssetToID.HasValue) //chuyen den xe
                        {
                            if (obj.StockID.HasValue)//thiet bi dang o kho
                            {
                                itemnew.StockID = obj.StockID.Value;
                                itemnew.AssetToID = item.AssetToID.Value;
                            }
                            if (obj.AssetToID.HasValue)//thiet bi dang o tren xe
                            {
                                itemnew.AssetToID = item.AssetToID.Value;
                                itemnew.AssetFromID = obj.AssetToID;
                            }
                        }
                        else //chuyen vao kho
                        {
                            if (obj.StockID.HasValue)//dang o  kho
                            {
                                itemnew.StockID = item.StockID.Value;
                            }
                            if (obj.AssetToID.HasValue)
                            {
                                itemnew.AssetFromID = obj.AssetToID;
                                itemnew.StockID = item.StockID;
                            }
                        }
                        itemnew.Amount = item.Amount;
                        itemnew.DateTranfer = item.DateTranfer;
                        itemnew.IsCurrent = true;
                        itemnew.SYSCustomerID = Account.SYSCustomerID;
                        itemnew.FLM_Receipt = objReceipt;
                        model.FLM_TransferHistory.Add(itemnew);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMTransferReceipt_Delete(DTOFLMEquipmentHistory item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_TransferHistory.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        if (!obj.IsCurrent) throw FaultHelper.BusinessFault(null, null, "Không thể xóa phiếu cũ");
                        else
                        {
                            if (model.FLM_TransferHistory.Count(c => c.AssetOwnID == item.AssetOwnID && c.IsCurrent == false) > 0)
                                throw FaultHelper.BusinessFault(null, null, "Không thể xóa duy nhất hiện tại");

                            //lay phieu cuối cung gan nhat lam current
                            var objpast = model.FLM_TransferHistory.Where(c => c.AssetOwnID == item.AssetOwnID && c.IsCurrent == false).LastOrDefault();
                            if (objpast != null)
                            {
                                objpast.IsCurrent = true;
                                model.FLM_TransferHistory.Remove(obj);
                            }
                        }
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu");

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion



        #region Thanh lý Xe/Thiết bị
        /// <summary>
        /// Danh sách xe có thể thanh lý
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DTOResult FLMDisposal_Vehicle_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.VehicleID.HasValue && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID &&
                        (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)).Select(c => new DTOFLMDisposalVehicle
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        ContainerID = c.ContainerID,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        TypeOfAssetID = c.TypeOfAssetID,
                        Code = c.Code,
                        Name = c.Name,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        SYSCustomerID = c.SYSCustomerID,
                        GroupOfEquipmentID = c.GroupOfEquipmentID,
                        IsDisposal = c.IsDisposal,
                        RomoocID = c.RomoocID,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        RegNo = c.CAT_Vehicle.RegNo
                    }).ToList();
                    result.Total = query.Count();
                    result.Data = query as IEnumerable<DTOFLMDisposalVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        /// <summary>
        /// Danh sách thiết bị đi theo xe
        /// </summary>
        /// <param name="vehicleID"></param>
        /// <returns></returns>
        public DTOResult FLMDisposal_EQMByVehicle_List(int vehicleID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_TransferHistory.Where(c => c.FLM_Asset1.SYSCustomerID == Account.SYSCustomerID && c.AssetToID.HasValue && c.AssetToID == vehicleID && c.IsCurrent && !c.FLM_Asset1.IsDisposal).Select(c => new DTOFLMDisposalEquipment
                    {
                        ID = c.ID,
                        VehicleID = c.FLM_Asset1.VehicleID,
                        ContainerID = c.FLM_Asset1.ContainerID,
                        YearOfProduction = c.FLM_Asset1.YearOfProduction,
                        Manufactor = c.FLM_Asset1.Manufactor,
                        BaseValue = c.FLM_Asset1.BaseValue,
                        CurrentValue = c.FLM_Asset1.CurrentValue,
                        DepreciationPeriod = c.FLM_Asset1.DepreciationPeriod,
                        DepreciationStart = c.FLM_Asset1.DepreciationStart,
                        Specification = c.FLM_Asset1.Specification,
                        TypeOfAssetID = c.FLM_Asset1.TypeOfAssetID,
                        Code = c.FLM_Asset1.ContainerID.HasValue ? c.FLM_Asset1.CAT_Container.ContainerNo : c.FLM_Asset1.RomoocID.HasValue ? c.FLM_Asset1.CAT_Romooc.RegNo : c.FLM_Asset1.Code,
                        Name = c.FLM_Asset1.Name,
                        IsRent = c.FLM_Asset1.IsRent,
                        RentID = c.FLM_Asset1.RentID,
                        SYSCustomerID = c.FLM_Asset1.SYSCustomerID,
                        GroupOfEquipmentID = c.FLM_Asset1.GroupOfEquipmentID,
                        IsDisposal = c.FLM_Asset1.IsDisposal,
                        RomoocID = c.FLM_Asset1.RomoocID,
                        WarrantyEnd = c.FLM_Asset1.WarrantyEnd,
                        WarrantyPeriod = c.FLM_Asset1.WarrantyPeriod,
                        AssetOwnerID = c.AssetToID,
                        RegNo = c.FLM_Asset2.CAT_Vehicle.RegNo,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMDisposalEquipment>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        /// <summary>
        /// Danh sách thiết bị có thể thanh lý
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DTOResult FLMDisposal_EQM_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID &&
                        (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetContainer || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetEquipment)).Select(c => new DTOFLMDisposalEquipment
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        ContainerID = c.ContainerID,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        TypeOfAssetID = c.TypeOfAssetID,
                        Code = c.ContainerID.HasValue ? c.CAT_Container.ContainerNo : c.RomoocID.HasValue ? c.CAT_Romooc.RegNo : c.Code,
                        Name = c.Name,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        SYSCustomerID = c.SYSCustomerID,
                        GroupOfEquipmentID = c.GroupOfEquipmentID,
                        IsDisposal = c.IsDisposal,
                        RomoocID = c.RomoocID,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        AssetOwnerID = c.FLM_TransferHistory1.Count == 0 ? null : c.FLM_TransferHistory1.FirstOrDefault(d => d.IsCurrent && d.AssetToID.HasValue) != null ? c.FLM_TransferHistory1.FirstOrDefault(d => d.IsCurrent && d.AssetToID.HasValue).AssetToID : null,
                        RegNo = c.FLM_TransferHistory1.Count == 0 ? string.Empty : c.FLM_TransferHistory1.FirstOrDefault(d => d.IsCurrent && d.AssetToID.HasValue) != null ? c.FLM_TransferHistory1.FirstOrDefault(d => d.IsCurrent && d.AssetToID.HasValue).FLM_Asset2.CAT_Vehicle.RegNo : string.Empty,
                    }).ToList();
                    result.Total = query.Count();
                    result.Data = query as IEnumerable<DTOFLMDisposalEquipment>;

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        /// <summary>
        /// Danh sách phiếu thanh lý
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DTOResult FLMDisposal_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Receipt.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptLiquidationVehicle || c.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptLiquidationEquipment)).Select(c => new DTOFLMDisposal
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DateReceipt = c.DateReceipt,
                        //DITOMasterID = c.DITOMasterID,
                        //COTOMasterID = c.COTOMasterID,
                        TypeOfReceiptID = c.TypeOfReceiptID,
                        IsDepreciation = c.IsDepreciation,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        IsAllocationVehicle = c.IsAllocationVehicle,
                        SYSCustomerID = c.SYSCustomerID,
                        SupplierID = c.SupplierID,
                        Note = c.Note,
                        IsVehicle = c.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptLiquidationVehicle,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMDisposal>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOFLMDisposal FLMDisposal_Get(int receiptID)
        {
            try
            {
                DTOFLMDisposal result = new DTOFLMDisposal();
                using (var model = new DataEntities())
                {
                    if (receiptID > 0)
                    {
                        var obj = model.FLM_Receipt.FirstOrDefault(c => c.ID == receiptID);
                        using (var helper = new CopyHelper())
                        {
                            helper.Copy(obj, result);
                            result.IsVehicle = obj.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptLiquidationVehicle;
                            // Thanh lý theo xe
                            if (result.IsVehicle)
                            {
                                result.Vehicle = new DTOFLMDisposalVehicle();
                                result.Vehicle.lstEquipment = new List<DTOFLMDisposalEquipment>();
                                var sysVehicle = obj.FLM_ReceiptCost.FirstOrDefault(c => c.FLM_Asset.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.FLM_Asset.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck);
                                if (sysVehicle != null)
                                {
                                    var vehicle = sysVehicle.FLM_Asset;
                                    helper.Copy(vehicle, result.Vehicle);
                                    result.Vehicle.RegNo = vehicle.CAT_Vehicle.RegNo;
                                    result.Vehicle.lstEquipment = obj.FLM_ReceiptCost.Where(c => c.AssetID != vehicle.ID).Select(c => new DTOFLMDisposalEquipment
                                    {
                                        ID = c.AssetID.Value,
                                        VehicleID = c.FLM_Asset.VehicleID,
                                        ContainerID = c.FLM_Asset.ContainerID,
                                        YearOfProduction = c.FLM_Asset.YearOfProduction,
                                        Manufactor = c.FLM_Asset.Manufactor,
                                        BaseValue = c.FLM_Asset.BaseValue,
                                        CurrentValue = c.FLM_Asset.CurrentValue,
                                        DepreciationPeriod = c.FLM_Asset.DepreciationPeriod,
                                        DepreciationStart = c.FLM_Asset.DepreciationStart,
                                        Specification = c.FLM_Asset.Specification,
                                        TypeOfAssetID = c.FLM_Asset.TypeOfAssetID,
                                        Code = c.FLM_Asset.Code,
                                        Name = c.FLM_Asset.Name,
                                        IsRent = c.FLM_Asset.IsRent,
                                        RentID = c.FLM_Asset.RentID,
                                        SYSCustomerID = c.FLM_Asset.SYSCustomerID,
                                        GroupOfEquipmentID = c.FLM_Asset.GroupOfEquipmentID,
                                        IsDisposal = c.FLM_Asset.IsDisposal,
                                        RomoocID = c.FLM_Asset.RomoocID,
                                        WarrantyEnd = c.FLM_Asset.WarrantyEnd,
                                        WarrantyPeriod = c.FLM_Asset.WarrantyPeriod,
                                        AssetOwnerID = vehicle.ID,
                                        RegNo = vehicle.CAT_Vehicle.RegNo
                                    }).ToList();
                                }
                            }
                            else
                            {
                                // Thanh lý theo thiết bị
                                result.lstEquipment = new List<DTOFLMDisposalEquipment>();
                                var lstEquipment = obj.FLM_ReceiptCost.Select(c => new DTOFLMDisposalEquipment
                                {
                                    ID = c.AssetID.Value,
                                    VehicleID = c.FLM_Asset.VehicleID,
                                    ContainerID = c.FLM_Asset.ContainerID,
                                    YearOfProduction = c.FLM_Asset.YearOfProduction,
                                    Manufactor = c.FLM_Asset.Manufactor,
                                    BaseValue = c.FLM_Asset.BaseValue,
                                    CurrentValue = c.FLM_Asset.CurrentValue,
                                    DepreciationPeriod = c.FLM_Asset.DepreciationPeriod,
                                    DepreciationStart = c.FLM_Asset.DepreciationStart,
                                    Specification = c.FLM_Asset.Specification,
                                    TypeOfAssetID = c.FLM_Asset.TypeOfAssetID,
                                    Code = c.FLM_Asset.Code,
                                    Name = c.FLM_Asset.Name,
                                    IsRent = c.FLM_Asset.IsRent,
                                    RentID = c.FLM_Asset.RentID,
                                    SYSCustomerID = c.FLM_Asset.SYSCustomerID,
                                    GroupOfEquipmentID = c.FLM_Asset.GroupOfEquipmentID,
                                    IsDisposal = c.FLM_Asset.IsDisposal,
                                    RomoocID = c.FLM_Asset.RomoocID,
                                    WarrantyEnd = c.FLM_Asset.WarrantyEnd,
                                    WarrantyPeriod = c.FLM_Asset.WarrantyPeriod,
                                    AssetOwnerID = c.FLM_Asset.FLM_TransferHistory.Count == 0 ? null : c.FLM_Asset.FLM_TransferHistory.FirstOrDefault(d => d.IsCurrent && d.AssetToID.HasValue) != null ? c.FLM_Asset.FLM_TransferHistory.FirstOrDefault(d => d.IsCurrent && d.AssetToID.HasValue).AssetToID : null,
                                    RegNo = c.FLM_Asset.FLM_TransferHistory.Count == 0 ? string.Empty : c.FLM_Asset.FLM_TransferHistory.FirstOrDefault(d => d.IsCurrent && d.AssetToID.HasValue) != null ? c.FLM_Asset.FLM_TransferHistory.FirstOrDefault(d => d.IsCurrent && d.AssetToID.HasValue).FLM_Asset2.CAT_Vehicle.RegNo : string.Empty,
                                }).ToList();
                                result.lstEquipment.AddRange(lstEquipment);
                            }
                        }
                    }
                    else
                    {
                        result.IsVehicle = true;
                        result.Vehicle = new DTOFLMDisposalVehicle();
                        result.DateReceipt = DateTime.Now;
                        result.Vehicle.lstEquipment = new List<DTOFLMDisposalEquipment>();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void FLMDisposal_Save(DTOFLMDisposal item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_Receipt.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_Receipt();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.Code = Receipt_GetLastCode(model);
                        if (item.IsVehicle) // Theo xe
                        {
                            obj.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptLiquidationVehicle;
                            if (item.Vehicle != null)
                            {
                                // Xe
                                FLM_ReceiptCost vehicle = new FLM_ReceiptCost();
                                vehicle.CreatedBy = Account.UserName;
                                vehicle.CreatedDate = DateTime.Now;
                                vehicle.AssetID = item.Vehicle.ID;
                                vehicle.Amount = item.Vehicle.CurrentValue.HasValue ? (decimal)item.Vehicle.CurrentValue : 0;
                                obj.FLM_ReceiptCost.Add(vehicle);
                                // Cập nhật lại IsDiposal cho xe
                                var sysVehicle = model.FLM_Asset.FirstOrDefault(c => c.ID == vehicle.AssetID);
                                if (sysVehicle != null)
                                {
                                    sysVehicle.ModifiedBy = Account.UserName;
                                    sysVehicle.ModifiedDate = DateTime.Now;
                                    sysVehicle.IsDisposal = true;
                                    sysVehicle.CAT_Vehicle.ModifiedBy = Account.UserName;
                                    sysVehicle.CAT_Vehicle.ModifiedDate = DateTime.Now;
                                    sysVehicle.CAT_Vehicle.IsOwn = false;
                                }
                                // Thiết bị theo xe
                                if (item.Vehicle.lstEquipment != null)
                                {
                                    foreach (var equipment in item.Vehicle.lstEquipment)
                                    {
                                        FLM_ReceiptCost objEquipment = new FLM_ReceiptCost();
                                        objEquipment.CreatedBy = Account.UserName;
                                        objEquipment.CreatedDate = DateTime.Now;
                                        objEquipment.AssetID = equipment.ID;
                                        objEquipment.Amount = equipment.CurrentValue.HasValue ? (decimal)equipment.CurrentValue : 0;
                                        obj.FLM_ReceiptCost.Add(objEquipment);
                                        // Cập nhật lại IsDiposal cho thiết bị
                                        var sysEquipment = model.FLM_Asset.FirstOrDefault(c => c.ID == objEquipment.AssetID);
                                        if (sysEquipment != null)
                                        {
                                            sysEquipment.ModifiedBy = Account.UserName;
                                            sysEquipment.ModifiedDate = DateTime.Now;
                                            sysEquipment.IsDisposal = true;
                                        }
                                    }
                                }
                            }
                        }
                        else //Theo thiết bị
                        {
                            obj.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptLiquidationEquipment;
                            if (item.lstEquipment != null && item.lstEquipment.Count > 0)
                            {
                                foreach (var equipment in item.lstEquipment)
                                {
                                    FLM_ReceiptCost objEquipment = new FLM_ReceiptCost();
                                    objEquipment.CreatedBy = Account.UserName;
                                    objEquipment.CreatedDate = DateTime.Now;
                                    objEquipment.AssetID = equipment.ID;
                                    objEquipment.Amount = equipment.CurrentValue.HasValue ? (decimal)equipment.CurrentValue : 0;
                                    obj.FLM_ReceiptCost.Add(objEquipment);
                                    // Cập nhật lại IsDiposal cho thiết bị
                                    var sysEquipment = model.FLM_Asset.FirstOrDefault(c => c.ID == objEquipment.AssetID);
                                    if (sysEquipment != null)
                                    {
                                        sysEquipment.ModifiedBy = Account.UserName;
                                        sysEquipment.ModifiedDate = DateTime.Now;
                                        sysEquipment.IsDisposal = true;
                                    }
                                    // Cập nhật lại IsCurrent trong bảng TransferHistory
                                    var sysTransfer = model.FLM_TransferHistory.FirstOrDefault(c => c.AssetOwnID == objEquipment.AssetID && c.IsCurrent);
                                    if (sysTransfer != null)
                                    {
                                        sysTransfer.ModifiedBy = Account.UserName;
                                        sysTransfer.ModifiedDate = DateTime.Now;
                                        sysTransfer.IsCurrent = false;
                                    }
                                }
                            }
                        }

                        model.FLM_Receipt.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.DateReceipt = item.DateReceipt.Date;
                    obj.Note = item.Note;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region Lịch sử cấp phát vật tư
        public DTOResult FuelHistory_List(string request, int assetid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ReceiptDetail.Where(c => c.FLM_ReceiptCost.AssetID == assetid && c.FLM_ReceiptCost.FLM_Receipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptMaterial).Select(c => new DTOFLMVariableCostHistory
                    {
                        ID = c.ID,
                        Code = c.FLM_ReceiptCost.FLM_Receipt.Code,
                        DateReceipt = c.FLM_ReceiptCost.FLM_Receipt.DateReceipt,
                        Amount = c.Amount,
                        Price = c.Price,
                        Quantity = c.Quantity,
                        MaterialID = c.MaterialID.Value,
                        MaterialCode = c.MaterialID.HasValue ? c.FLM_Material.Code : string.Empty,
                        MaterialName = c.MaterialID.HasValue ? c.FLM_Material.Code : string.Empty,
                        GroupOfMaterialID = c.MaterialID.HasValue ? c.FLM_Material.GroupOfMaterialID : 0,
                        GroupOfMaterialName = c.MaterialID.HasValue ? c.FLM_Material.CAT_GroupOfMaterial.GroupName : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMVariableCostHistory>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region FLMDriver
        public DTOResult FLMDriver_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        EmployeeCode = c.Code,
                        LastName = c.CAT_Driver.LastName,
                        FirstName = c.CAT_Driver.FirstName,
                        Cellphone = c.CAT_Driver.Cellphone,
                        BiddingID = c.BiddingID,
                        SYSCustomerID = c.SYSCustomerID,
                        CardNumber = c.CAT_Driver.CardNumber,
                        Birthday = c.CAT_Driver.Birthday,
                        Note = c.Note,
                        IsUse = c.IsUse,
                        ListDrivingLicence = c.CAT_Driver.ListDrivingLicence,
                        IsAssistant = c.IsAssistant,
                        DriverName = string.Empty,
                        FeeBase = c.FeeBase,
                        Image = c.Image,
                        TypeOfVehicleID = c.TypeOfVehicleID > 0 ? c.TypeOfVehicleID : -1,
                        TypeOfVehicleName = c.TypeOfVehicleID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                        VehicleWeight = c.VehicleWeight,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMDriver_Save(DTOFLMDriver item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.FLM_Driver.Count(c => c.Code == item.EmployeeCode && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã nhân viên đã sử dụng");
                    if (model.CAT_Driver.Count(c => c.Code.Trim() == item.CardNumber.Trim() && c.ID != item.DriverID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Số CMND đã sử dụng");

                    var objCAT = model.CAT_Driver.FirstOrDefault(c => c.ID == item.DriverID);
                    #region luu cat
                    if (objCAT != null)
                    {
                        objCAT.ModifiedBy = Account.UserName;
                        objCAT.ModifiedDate = DateTime.Now;
                    }
                    else
                    {
                        objCAT = new CAT_Driver();
                        objCAT.CreatedBy = Account.UserName;
                        objCAT.CreatedDate = DateTime.Now;
                        model.CAT_Driver.Add(objCAT);
                    }
                    objCAT.Code = item.EmployeeCode;
                    objCAT.CardNumber = item.CardNumber;
                    objCAT.Cellphone = item.Cellphone;
                    objCAT.Birthday = item.Birthday;
                    objCAT.FirstName = item.FirstName;
                    objCAT.LastName = item.LastName;
                    #endregion

                    var objCUS = model.CUS_Driver.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.DriverID == item.DriverID);
                    #region luu cus
                    if (objCUS != null)
                    {
                        if (objCUS != null)
                        {
                            objCUS.ModifiedBy = Account.UserName;
                            objCUS.ModifiedDate = DateTime.Now;
                        }
                        else
                        {
                            objCUS = new CUS_Driver();
                            objCUS.CreatedBy = Account.UserName;
                            objCUS.CreatedDate = DateTime.Now;
                            objCUS.CustomerID = Account.SYSCustomerID;
                            objCUS.CAT_Driver = objCAT;
                            model.CUS_Driver.Add(objCUS);
                        }
                    }
                    #endregion

                    var objFLM = model.FLM_Driver.FirstOrDefault(c => c.ID == item.ID);
                    #region luu flm driver
                    if (objFLM == null)
                    {
                        objFLM = new FLM_Driver();
                        objFLM.SYSCustomerID = Account.SYSCustomerID;
                        objFLM.CAT_Driver = objCAT;
                        objFLM.CreatedBy = Account.UserName;
                        objFLM.CreatedDate = DateTime.Now;
                        model.FLM_Driver.Add(objFLM);
                    }
                    else
                    {
                        objFLM.ModifiedBy = Account.UserName;
                        objFLM.ModifiedDate = DateTime.Now;
                    }
                    objFLM.Code = item.EmployeeCode;
                    objFLM.IsAssistant = item.IsAssistant;
                    objFLM.IsUse = item.IsUse;
                    objFLM.Note = item.Note;
                    objFLM.FeeBase = item.FeeBase;
                    objFLM.DateEnd = item.DateEnd;
                    objFLM.DateStart = item.DateStart;
                    objFLM.DaysAllowOff = item.DaysAllowOff;
                    objFLM.TypeOfVehicleID = item.TypeOfVehicleID > 0 ? item.TypeOfVehicleID : null;
                    objFLM.VehicleWeight = item.VehicleWeight;
                    if (objFLM.ID > 0)
                    {
                        var vehicle = model.CAT_Vehicle.Where(c => c.DriverID == objFLM.ID).FirstOrDefault();
                        if (vehicle != null)
                        {
                            vehicle.DriverName = item.LastName + " " + item.FirstName;
                            vehicle.Cellphone = item.Cellphone;
                        }
                    }
                    #endregion


                    model.SaveChanges();
                    return objFLM.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMDriver FLMDriver_Get(int id)
        {
            try
            {
                DTOFLMDriver result = new DTOFLMDriver();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == id).Select(c => new DTOFLMDriver
                            {
                                ID = c.ID,
                                EmployeeCode = c.Code,
                                DriverID = c.DriverID,
                                LastName = c.CAT_Driver.LastName,
                                FirstName = c.CAT_Driver.FirstName,
                                Cellphone = c.CAT_Driver.Cellphone,
                                BiddingID = c.BiddingID,
                                SYSCustomerID = c.SYSCustomerID,
                                CardNumber = c.CAT_Driver.CardNumber,
                                Birthday = c.CAT_Driver.Birthday,
                                Note = c.Note,
                                IsUse = c.IsUse,
                                IsAssistant = c.IsAssistant,
                                DriverName = string.Empty,
                                FeeBase = c.FeeBase,
                                Image = c.Image,
                                DateStart = c.DateStart.Value,
                                DateEnd = c.DateEnd.Value,
                                TypeOfVehicleID = c.TypeOfVehicleID > 0 ? c.TypeOfVehicleID : -1,
                                VehicleWeight = c.VehicleWeight,
                                DaysAllowOff = c.DaysAllowOff > 0 ? c.DaysAllowOff.Value : 0,
                            }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.DriverID = 0;
                        result.IsUse = true;
                        result.DateStart = DateTime.Now;
                        result.DateEnd = null;
                        result.DaysAllowOff = 0;
                        result.TypeOfVehicleID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMDriver_Delete(DTOFLMDriver item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_Driver.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        // kiem tra chuyen
                        if (model.OPS_DITOMaster.Where(c => (c.DriverID1 == obj.ID || c.DriverID2 == obj.ID || c.DriverID3 == obj.ID) && c.SYSCustomerID == Account.SYSCustomerID).Count() > 0)
                            throw FaultHelper.BusinessFault(null, null, "Không thể xóa tài xế đã được phân chuyến");
                        if (model.OPS_COTOMaster.Where(c => (c.DriverID1 == obj.ID || c.DriverID2 == obj.ID) && c.SYSCustomerID == Account.SYSCustomerID).Count() > 0)
                            throw FaultHelper.BusinessFault(null, null, "Không thể xóa tài xế đã được phân chuyến");
                        //kiem tra assign vehicle
                        if (model.CAT_Vehicle.Count(c => c.DriverID == obj.ID || c.AssistantID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Không thể xóa tài xế đã được phân công cho xe");
                        var objCus = model.CUS_Driver.FirstOrDefault(c => c.DriverID == item.DriverID);
                        if (objCus != null) model.CUS_Driver.Remove(objCus);
                        model.FLM_Driver.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMDriver_TransportHistory_Read(string request, DateTime from, DateTime to, int driverID, int typeTrans)
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOFLMDriverPL> lst = new List<DTOFLMDriverPL>();
                using (var model = new DataEntities())
                {
                    from = from.Date;
                    to = to.Date.AddDays(1);

                    if (typeTrans == 1)
                    {
                        var listDI = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived
                            && (c.DriverID1 == driverID || c.DriverID2 == driverID || c.DriverID3 == driverID || c.DriverID4 == driverID || c.DriverID5 == driverID) &&
                            c.ATD >= from && c.ATD <= to).Select(c => new DTOFLMDriverPL
                            {
                                MasterCode = c.Code,
                                RegNo = c.CAT_Vehicle.RegNo,
                                EffectDate = DateTime.Now,
                                ATA = c.ATA,
                                ATD = c.ATD,
                                Debit = 0,
                                SortOrder = c.SortOrder,
                                IsDITOMaster = true,
                            }).ToList();
                        lst.AddRange(listDI);

                        var listCO = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived
                            && (c.DriverID1 == driverID || c.DriverID2 == driverID || c.DriverID3 == driverID || c.DriverID4 == driverID || c.DriverID5 == driverID) &&
                            c.ATD >= from && c.ATD <= to).Select(c => new DTOFLMDriverPL
                            {
                                MasterCode = c.Code,
                                RegNo = c.CAT_Vehicle.RegNo,
                                EffectDate = DateTime.Now,
                                ATA = c.ATA,
                                ATD = c.ATD,
                                Debit = 0,
                                SortOrder = c.SortOrder,
                                IsDITOMaster = false,
                            }).ToList();
                        lst.AddRange(listCO);
                    }
                    else if (typeTrans == 2)
                    {
                        var lstAssetTimeSheet = model.FLM_AssetTimeSheetDriver.Where(c => c.DriverID == driverID && c.FLM_AssetTimeSheet.DateFrom >= from && c.FLM_AssetTimeSheet.DateTo <= to
                        && (c.FLM_AssetTimeSheet.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster || c.FLM_AssetTimeSheet.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster)
                        && c.FLM_AssetTimeSheet.TypeOfAssetTimeSheetID == -(int)SYSVarType.TypeOfAssetTimeSheetReject).Select(c => new
                        {
                            c.FLM_AssetTimeSheet.ReferID,
                            c.FLM_AssetTimeSheet.StatusOfAssetTimeSheetID,
                            c.FLM_AssetTimeSheet.DateFrom,
                            c.FLM_AssetTimeSheet.DateTo
                        });

                        foreach (var item in lstAssetTimeSheet)
                        {
                            if (item.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster)
                            {
                                var listDI = model.OPS_DITOMaster.Where(c => c.ID == item.ReferID && c.SYSCustomerID == Account.SYSCustomerID
                                   && (c.DriverID1 == driverID || c.DriverID2 == driverID || c.DriverID3 == driverID || c.DriverID4 == driverID || c.DriverID5 == driverID)).Select(c => new DTOFLMDriverPL
                                   {
                                       MasterCode = c.Code,
                                       RegNo = c.CAT_Vehicle.RegNo,
                                       EffectDate = DateTime.Now,
                                       ATA = c.ATA,
                                       ATD = c.ATD,
                                       Debit = 0,
                                       SortOrder = c.SortOrder,
                                       IsDITOMaster = true,
                                   }).ToList();
                                lst.AddRange(listDI);
                            }
                            else if (item.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster)
                            {
                                var listCO = model.OPS_COTOMaster.Where(c => c.ID == item.ReferID && c.SYSCustomerID == Account.SYSCustomerID
                                  && (c.DriverID1 == driverID || c.DriverID2 == driverID || c.DriverID3 == driverID || c.DriverID4 == driverID || c.DriverID5 == driverID)).Select(c => new DTOFLMDriverPL
                                  {
                                      MasterCode = c.Code,
                                      RegNo = c.CAT_Vehicle.RegNo,
                                      EffectDate = DateTime.Now,
                                      ATA = c.ATA,
                                      ATD = c.ATD,
                                      Debit = 0,
                                      SortOrder = c.SortOrder,
                                      IsDITOMaster = false,
                                  }).ToList();
                                lst.AddRange(listCO);
                            }
                        }
                    }

                    var listFinal = lst.ToDataSourceResult(CreateRequest(request));
                    result.Total = listFinal.Total;
                    result.Data = listFinal.Data;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMDriverExcel> FLMDriverExport()
        {
            try
            {
                List<DTOFLMDriverExcel> result = new List<DTOFLMDriverExcel>();
                using (var model = new DataEntities())
                {
                    var data = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).ToList();
                    foreach (var driver in data)
                    {
                        DTOFLMDriverExcel obj = new DTOFLMDriverExcel();
                        obj.ID = driver.ID;
                        obj.DriverID = driver.CAT_Driver.ID;
                        obj.DriverCode = driver.Code;
                        obj.FirstName = driver.CAT_Driver.FirstName;
                        obj.LastName = driver.CAT_Driver.LastName;
                        obj.IsAssistant = driver.IsAssistant;
                        obj.Birthday = driver.CAT_Driver.Birthday;
                        obj.Note = driver.Note;
                        obj.RegNo = string.Empty;
                        obj.Cellphone = driver.CAT_Driver.Cellphone;
                        obj.CardNumber = driver.CAT_Driver.CardNumber;
                        obj.FeeBase = driver.FeeBase;
                        obj.DateStart = driver.DateStart;
                        obj.DateEnd = driver.DateEnd;
                        obj.IsUse = driver.IsUse;
                        obj.DaysAllowOff = driver.DaysAllowOff > 0 ? driver.DaysAllowOff.Value : 0;
                        obj.ListDriverLicence = new List<DTOCATDriverLicence>();
                        var vehicle = model.CAT_Vehicle.Where(c => c.DriverID == driver.DriverID || c.AssistantID == driver.DriverID).FirstOrDefault();
                        if (vehicle != null)
                        {
                            obj.RegNo = vehicle.RegNo;
                        }

                        var driverLicense = driver.CAT_Driver.CAT_DriverLicence.OrderByDescending(c => c.CreatedDate).FirstOrDefault();
                        if (driverLicense != null)
                        {
                            DTOCATDriverLicence objLicence = new DTOCATDriverLicence();
                            objLicence.ID = driverLicense.ID;
                            objLicence.DrivingLicenceID = driverLicense.DrivingLicenceID;
                            objLicence.DrivingLicenceCode = driverLicense.CAT_DrivingLicence.Code;
                            objLicence.DrivingLicenceName = driverLicense.CAT_DrivingLicence.DrivingLicenceName;
                            objLicence.DrivingLicenceNumber = driverLicense.DrivingLicenceNumber;
                            obj.ListDriverLicence.Add(objLicence);
                        }
                        result.Add(obj);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMDriverImport(List<DTOFLMDriverExcel> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (lst != null)
                    {
                        foreach (var item in lst.Where(c => c.ExcelSuccess))
                        {
                            if (model.FLM_Driver.Count(c => c.Code == item.DriverCode && c.ID != item.ID) > 0)
                                throw FaultHelper.BusinessFault(null, null, "Mã nhân viên đã sử dụng");
                            //if (model.CAT_Driver.Count(c => c.Code.Trim() == item.CardNumber.Trim() && c.ID != item.DriverID) > 0)
                            //    throw FaultHelper.BusinessFault(null, null, "Số CMND đã sử dụng");

                            var objCAT = model.CAT_Driver.FirstOrDefault(c => c.ID == item.DriverID);
                            #region luu cat
                            if (objCAT != null)
                            {
                                objCAT.ModifiedBy = Account.UserName;
                                objCAT.ModifiedDate = DateTime.Now;
                            }
                            else
                            {
                                objCAT = new CAT_Driver();
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;
                                model.CAT_Driver.Add(objCAT);
                            }
                            objCAT.Code = item.DriverCode;
                            objCAT.CardNumber = item.CardNumber;
                            objCAT.Cellphone = item.Cellphone;
                            objCAT.Birthday = item.Birthday;
                            objCAT.FirstName = item.FirstName;
                            objCAT.LastName = item.LastName;
                            if (item.ListDriverLicence != null && item.ListDriverLicence.Count > 0)
                            {
                                foreach (var licence in item.ListDriverLicence)
                                {
                                    var objLicence = objCAT.CAT_DriverLicence.FirstOrDefault(c => c.ID == licence.ID);
                                    if (objLicence == null)
                                    {
                                        objLicence = new CAT_DriverLicence();
                                        objLicence.CreatedDate = DateTime.Now;
                                        objLicence.CreatedBy = Account.UserName;
                                        objLicence.DrivingLicenceID = licence.DrivingLicenceID;
                                        objLicence.CAT_Driver = objCAT;
                                        model.CAT_DriverLicence.Add(objLicence);
                                    }
                                    else
                                    {
                                        objLicence.ModifiedDate = DateTime.Now;
                                        objLicence.ModifiedBy = Account.UserName;
                                    }
                                    objLicence.DrivingLicenceNumber = licence.DrivingLicenceNumber;
                                }
                            }
                            #endregion

                            var objCUS = model.CUS_Driver.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.DriverID == item.DriverID);
                            #region luu cus
                            if (objCUS != null)
                            {
                                if (objCUS != null)
                                {
                                    objCUS.ModifiedBy = Account.UserName;
                                    objCUS.ModifiedDate = DateTime.Now;
                                }
                                else
                                {
                                    objCUS = new CUS_Driver();
                                    objCUS.CreatedBy = Account.UserName;
                                    objCUS.CreatedDate = DateTime.Now;
                                    objCUS.CustomerID = Account.SYSCustomerID;
                                    objCUS.CAT_Driver = objCAT;
                                    model.CUS_Driver.Add(objCUS);
                                }
                            }
                            #endregion

                            var objFLM = model.FLM_Driver.FirstOrDefault(c => c.ID == item.ID);
                            #region luu flm driver
                            if (objFLM == null)
                            {
                                objFLM = new FLM_Driver();
                                objFLM.SYSCustomerID = Account.SYSCustomerID;
                                objFLM.CAT_Driver = objCAT;
                                objFLM.CreatedBy = Account.UserName;
                                objFLM.CreatedDate = DateTime.Now;
                                model.FLM_Driver.Add(objFLM);
                            }
                            else
                            {
                                objFLM.ModifiedBy = Account.UserName;
                                objFLM.ModifiedDate = DateTime.Now;
                            }
                            objFLM.Code = item.DriverCode;
                            objFLM.IsAssistant = item.IsAssistant;
                            objFLM.IsUse = item.IsUse;
                            objFLM.Note = item.Note;
                            objFLM.FeeBase = item.FeeBase;
                            objFLM.DateEnd = item.DateEnd;
                            objFLM.DateStart = item.DateStart;
                            objFLM.DaysAllowOff = item.DaysAllowOff;
                            if (!string.IsNullOrEmpty(item.RegNo))
                            {
                                var vehicle = model.CAT_Vehicle.Where(c => c.RegNo == item.RegNo).FirstOrDefault();
                                if (vehicle != null)
                                {
                                    if (item.IsAssistant == false)
                                    {
                                        vehicle.FLM_Driver = objFLM;
                                        vehicle.DriverName = item.LastName + " " + item.FirstName;
                                        vehicle.Cellphone = item.Cellphone;
                                    }
                                    else vehicle.FLM_Driver1 = objFLM;
                                }
                            }
                            #endregion

                            model.SaveChanges();
                            List<string> lstCode = new List<string>();
                            var lstID = objCAT.CAT_DriverLicence.Select(c => c.DrivingLicenceID).Distinct().ToList();
                            lstCode = model.CAT_DrivingLicence.Where(c => lstID.Contains(c.ID)).Select(c => c.Code).ToList();
                            objCAT.ListDrivingLicence = lstCode.Count > 0 ? string.Join(",", lstCode) : string.Empty;
                            model.SaveChanges();

                        }

                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOFLMDriverData FLMDriver_Data()
        {
            try
            {
                DTOFLMDriverData result = new DTOFLMDriverData();
                result.ListDriver = new List<DTOFLMDriver>();
                result.ListDriverLicence = new List<DTOCATDriverLicence>();
                result.ListDrivingLicence = new List<DTOCATDrivingLicence>();
                using (var model = new DataEntities())
                {
                    result.ListDriver = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOFLMDriver
                      {
                          ID = c.ID,
                          DriverID = c.DriverID,
                          EmployeeCode = c.Code,
                          LastName = c.CAT_Driver.LastName,
                          FirstName = c.CAT_Driver.FirstName,
                          Cellphone = c.CAT_Driver.Cellphone,
                          BiddingID = c.BiddingID,
                          SYSCustomerID = c.SYSCustomerID,
                          CardNumber = c.CAT_Driver.CardNumber,
                          Birthday = c.CAT_Driver.Birthday,
                          Note = c.Note,
                          IsUse = c.IsUse,
                          ListDrivingLicence = c.CAT_Driver.ListDrivingLicence,
                          IsAssistant = c.IsAssistant,
                          DriverName = string.Empty,
                          FeeBase = c.FeeBase,
                          Image = c.Image
                      }).ToList();
                    result.ListDrivingLicence = model.CAT_DrivingLicence.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATDrivingLicence
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DrivingLicenceName = c.DrivingLicenceName
                    }).ToList();
                    var listID = result.ListDriver.Select(c => c.DriverID).Distinct().ToList();
                    result.ListDriverLicence = model.CAT_DriverLicence.Where(c => listID.Contains(c.DriverID)).Select(c => new DTOCATDriverLicence
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        DrivingLicenceID = c.DrivingLicenceID,
                        DrivingLicenceNumber = c.DrivingLicenceNumber
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public DTOFLMTruck Truck_GetByDriver(int driverid)
        {
            try
            {
                DTOFLMTruck result = new DTOFLMTruck();
                using (var model = new DataEntities())
                {
                    if (driverid > 0)
                    {
                        var query = model.FLM_Asset.Where(c => c.CAT_Vehicle.DriverID == driverid).Select(c => new DTOFLMTruck
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                            GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            CurrentValue = c.CurrentValue,
                            RemainValue = c.RemainValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            Specification = c.Specification,
                            IsRent = c.IsRent,
                            RentID = c.RentID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            Note = c.CAT_Vehicle.Note,
                            IsOwn = c.CAT_Vehicle.IsOwn,
                            CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                            TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                            MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                            RegWeight = c.CAT_Vehicle.RegWeight,
                            RegCapacity = c.CAT_Vehicle.RegCapacity,
                            Lat = c.CAT_Vehicle.Lat,
                            Lng = c.CAT_Vehicle.Lng,
                            MinWeight = c.CAT_Vehicle.MinWeight,
                            MinCapacity = c.CAT_Vehicle.MinCapacity,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod,
                            DriverID = c.CAT_Vehicle.FLM_Driver.ID,
                            AssistantID = c.CAT_Vehicle.FLM_Driver1.ID
                        });
                        result = query.FirstOrDefault();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult FLMDriver_DrivingLicence_List(string request, int driverID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverLicence.Where(c => c.DriverID == driverID).Select(c => new DTOCATDriverLicence
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        DrivingLicenceID = c.DrivingLicenceID,
                        DrivingLicenceName = c.CAT_DrivingLicence.DrivingLicenceName,
                        Note = c.Note,
                        ExpiredDate = c.ExpiredDate,
                        IsUse = c.IsUse,
                        DrivingLicenceNumber = c.DrivingLicenceNumber
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATDriverLicence>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATDriverLicence FLMDriver_DrivingLicence_Get(int id)
        {
            try
            {
                DTOCATDriverLicence result = new DTOCATDriverLicence();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_DriverLicence.Where(c => c.ID == id).Select(c => new DTOCATDriverLicence
                        {
                            ID = c.ID,
                            DriverID = c.DriverID,
                            DrivingLicenceID = c.DrivingLicenceID,
                            DrivingLicenceName = c.CAT_DrivingLicence.DrivingLicenceName,
                            Note = c.Note,
                            ExpiredDate = c.ExpiredDate,
                            IsUse = c.IsUse,
                            DrivingLicenceNumber = c.DrivingLicenceNumber
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.IsUse = true;
                        result.DrivingLicenceID = 0;
                        var obj = model.CAT_DrivingLicence.FirstOrDefault();
                        if (obj != null) result.DrivingLicenceID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMDriver_DrivingLicence_Save(DTOCATDriverLicence item, int driverID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.CAT_DriverLicence.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    else
                    {
                        obj = new CAT_DriverLicence();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverID = driverID;
                        model.CAT_DriverLicence.Add(obj);
                    }
                    obj.DrivingLicenceID = item.DrivingLicenceID;
                    obj.DrivingLicenceNumber = item.DrivingLicenceNumber;
                    obj.ExpiredDate = item.ExpiredDate;
                    obj.IsUse = item.IsUse;
                    obj.Note = item.Note;

                    model.SaveChanges();

                    //update
                    var driver = model.CAT_Driver.FirstOrDefault(c => c.ID == driverID);
                    if (driver != null)
                    {
                        List<string> lstCode = new List<string>();
                        var lst = driver.CAT_DriverLicence.Select(c => c.DrivingLicenceID).Distinct().ToList();
                        lstCode = model.CAT_DrivingLicence.Where(c => lst.Contains(c.ID)).Select(c => c.Code).ToList();
                        driver.ListDrivingLicence = lstCode.Count > 0 ? string.Join(",", lstCode) : string.Empty;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMDriver_DrivingLicence_Delete(DTOCATDriverLicence item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.CAT_DriverLicence.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        int id = obj.DriverID;

                        model.CAT_DriverLicence.Remove(obj);
                        model.SaveChanges();
                        var driver = model.CAT_Driver.FirstOrDefault(c => c.ID == id);
                        if (driver != null)
                        {
                            driver.ListDrivingLicence = string.Join(",", driver.CAT_DriverLicence.Select(c => c.CAT_DrivingLicence.Code).ToList());
                            model.SaveChanges();
                        }
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Không thấy bằng lái của tài xế");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMDriverScheduleData FLMDriver_Schedule_Data(int month, int year, int driverID)
        {
            try
            {
                DTOFLMDriverScheduleData result = new DTOFLMDriverScheduleData();
                result.ListDetail = new List<DTOFLMScheduleDate>();
                result.ListSumaryDate = new List<TypeDateSumary>();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleDateDetail.Where(c => c.FLM_ScheduleDate.Date.Month == month && c.FLM_ScheduleDate.Date.Year == year && c.DriverID == driverID).Select(c => new DTOFLMScheduleDate
                    {
                        ID = c.ID,
                        ScheduleID = c.FLM_ScheduleDate.ScheduleID,
                        Date = c.FLM_ScheduleDate.Date,
                        TypeScheduleDateID = c.FLM_ScheduleDate.TypeScheduleDateID,
                        TypeScheduleDateName = c.FLM_ScheduleDate.SYS_Var.ValueOfVar,
                        DateName = string.Empty,
                        TypeDate = 0,
                    }).ToList();

                    result.ListDetail.AddRange(query);

                    TypeDateSumary dateOn = new TypeDateSumary { TypeDate = 1, Total = 0 };
                    TypeDateSumary dateOff = new TypeDateSumary { TypeDate = 2, Total = 0 };
                    TypeDateSumary dateHoliday = new TypeDateSumary { TypeDate = 3, Total = 0 };

                    foreach (var item in result.ListDetail)
                    {
                        switch (item.TypeScheduleDateID)
                        {
                            default: item.TypeDate = 1;
                                dateOn.Total++;
                                break;
                            case -(int)SYSVarType.TypeScheduleDateOn: item.TypeDate = 1; dateOn.Total++; break;
                            case -(int)SYSVarType.TypeScheduleDateOff: item.TypeDate = 2; dateOff.Total++; break;
                            case -(int)SYSVarType.TypeScheduleDateHoliday: item.TypeDate = 3; dateHoliday.Total++; break;
                        }
                    }
                    result.ListSumaryDate.Add(dateOn);
                    result.ListSumaryDate.Add(dateOff);
                    result.ListSumaryDate.Add(dateHoliday);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region FLM_ScheduleFeeDefault (phụ phí tháng)
        public DTOResult FLMDriver_FLMScheduleFeeDefault_List(string request, int driverID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleFeeDefault.Where(c => c.DriverID > 0 && c.DriverID == driverID).Select(c => new DTOFLMScheduleFeeDefault
                    {
                        ID = c.ID,
                        AssetID = c.AssetID > 0 ? c.AssetID.Value : -1,
                        DriverID = c.DriverID > 0 ? c.DriverID.Value : -1,
                        TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                        TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                        TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                        ExprInputDay = c.ExprInputDay,
                        ExprInputTOMaster = c.ExprInputTOMaster,
                        ExprPriceDay = c.ExprPriceDay,
                        ExprPriceTOMaster = c.ExprPriceTOMaster
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMScheduleFeeDefault>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMScheduleFeeDefault FLMDriver_FLMScheduleFeeDefault_Get(int id)
        {
            try
            {
                DTOFLMScheduleFeeDefault result = new DTOFLMScheduleFeeDefault();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_ScheduleFeeDefault.Where(c => c.ID == id).Select(c => new DTOFLMScheduleFeeDefault
                        {
                            ID = c.ID,
                            AssetID = c.AssetID > 0 ? c.AssetID.Value : -1,
                            DriverID = c.DriverID > 0 ? c.DriverID.Value : -1,
                            ExprPrice = c.ExprPrice,
                            TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                            TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                            TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                            ExprInputDay = c.ExprInputDay,
                            ExprInputTOMaster = c.ExprInputTOMaster,
                            ExprPriceDay = c.ExprPriceDay,
                            ExprPriceTOMaster = c.ExprPriceTOMaster
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.TypeOfScheduleFeeID = -1;
                        var objType = model.FLM_TypeOfScheduleFee.FirstOrDefault();
                        if (objType != null) result.TypeOfScheduleFeeID = objType.ID;
                        result.AssetID = -1;
                        result.DriverID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMDriver_FLMScheduleFeeDefault_Save(DTOFLMScheduleFeeDefault item, int driverID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.FLM_ScheduleFeeDefault.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_ScheduleFeeDefault();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverID = driverID;
                        model.FLM_ScheduleFeeDefault.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprInputDay = item.ExprInputDay;
                    obj.ExprPriceDay = item.ExprPriceDay;
                    obj.ExprInputTOMaster = item.ExprInputTOMaster;
                    obj.ExprPriceTOMaster = item.ExprPriceTOMaster;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMDriver_FLMScheduleFeeDefault_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_ScheduleFeeDefault.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.FLM_ScheduleFeeDefault.Remove(obj);
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chi tiết");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region FLM_DriverRole
        public DTOResult FLMDriver_FLMDriverRole_List(string request, int driverID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_DriverRole.Where(c => c.DriverID > 0 && c.DriverID == driverID).Select(c => new FLMDriverRole
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        EffectDate = c.EffectDate,
                        IsAssistant = c.IsAssistant,
                        TypeOfVehicleID = c.TypeOfVehicleID > 0 ? c.TypeOfVehicleID : -1,
                        TypeOfVehicleName = c.TypeOfVehicleID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                        VehicleWeight = c.VehicleWeight,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<FLMDriverRole>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public FLMDriverRole FLMDriver_FLMDriverRole_Get(int id)
        {
            try
            {
                FLMDriverRole result = new FLMDriverRole();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_DriverRole.Where(c => c.ID == id).Select(c => new FLMDriverRole
                        {
                            ID = c.ID,
                            DriverID = c.DriverID,
                            EffectDate = c.EffectDate,
                            IsAssistant = c.IsAssistant,
                            TypeOfVehicleID = c.TypeOfVehicleID > 0 ? c.TypeOfVehicleID : -1,
                            TypeOfVehicleName = c.TypeOfVehicleID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                            VehicleWeight = c.VehicleWeight,
                            Note = c.Note
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.TypeOfVehicleID = -1;
                        result.EffectDate = DateTime.Now;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMDriver_FLMDriverRole_Save(FLMDriverRole item, int driverID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    item.EffectDate = item.EffectDate.Date;
                    if (model.FLM_DriverRole.Count(c => c.DriverID == driverID && c.EffectDate == item.EffectDate && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Thiết lập bị trùng");

                    if (model.FLM_VehiclePlan.Count(c => c.DriverID == driverID && (c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain || c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverEx) &&
                        item.EffectDate >= c.DateFrom && item.EffectDate <= c.DateTo) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Tài xế đã được thiết lập kế hoạch xe");

                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.FLM_DriverRole.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_DriverRole();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverID = driverID;
                        model.FLM_DriverRole.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.EffectDate = item.EffectDate;
                    obj.IsAssistant = item.IsAssistant;
                    obj.TypeOfVehicleID = item.TypeOfVehicleID > 0 ? item.TypeOfVehicleID : null;
                    obj.VehicleWeight = item.VehicleWeight;
                    obj.Note = item.Note;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMDriver_FLMDriverRole_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_DriverRole.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.FLM_DriverRole.Remove(obj);
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chi tiết");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region excel
        public SYSExcel FLMDriver_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var data = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsUse).Select(c => new
                        {
                            Code = c.Code,
                            LastName = c.CAT_Driver.LastName,
                            FirstName = c.CAT_Driver.FirstName,
                            IsAssistant = c.IsAssistant,
                            Note = c.Note,
                            RegNo = c.CAT_Vehicle.Count > 0 ? c.CAT_Vehicle.FirstOrDefault().RegNo : c.CAT_Vehicle1.Count > 0 ? c.CAT_Vehicle1.FirstOrDefault().RegNo : string.Empty,
                            Cellphone = c.CAT_Driver.Cellphone,
                            CardNumber = c.CAT_Driver.CardNumber,
                            DrivingLicenceNumber = c.CAT_Driver.CAT_DriverLicence.Count > 0 ? c.CAT_Driver.CAT_DriverLicence.FirstOrDefault().DrivingLicenceNumber : string.Empty,
                            DrivingLicenceName = c.CAT_Driver.CAT_DriverLicence.Count > 0 ? c.CAT_Driver.CAT_DriverLicence.FirstOrDefault().CAT_DrivingLicence.DrivingLicenceName : string.Empty,
                            FeeBase = c.FeeBase,
                            DaysAllowOff = c.DaysAllowOff,
                            DateStart = c.DateStart,
                            DateEnd = c.DateEnd,
                            ExtendLevel = c.ExtendLevel,
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(0, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(1, "Mã tài xế", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(2, "Họ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(3, "Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(4, "Lái/phụ xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(5, "Ghi chú", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(6, "Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(7, "Điện thoại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(8, "Số CMND", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(9, "Loại bằng lái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(10, "Số bằng lái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(11, "Lương cơ bản", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(12, "Ngày nghỉ phép", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(13, "Ngày vào làm", HelperExcel.ColorWhite, HelperExcel.ColorGreen, "@"));
                        cells.Add(HelperExcel.NewCell(14, "Ngày thôi việc", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(15, "Phân loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        ws.MergedCells = new List<string>();
                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.LastName));
                            cells.Add(HelperExcel.NewCell(item.FirstName));
                            cells.Add(HelperExcel.NewCell(item.IsAssistant == false ? "Lái xe" : "Phụ xe"));
                            cells.Add(HelperExcel.NewCell(item.Note));
                            cells.Add(HelperExcel.NewCell(item.RegNo));
                            cells.Add(HelperExcel.NewCell(item.Cellphone));
                            cells.Add(HelperExcel.NewCell(item.CardNumber));
                            cells.Add(HelperExcel.NewCell(-1, item.DrivingLicenceName));
                            cells.Add(HelperExcel.NewCell(-1, item.DrivingLicenceNumber));
                            cells.Add(HelperExcel.NewCell(-1, item.FeeBase, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatMoney));
                            cells.Add(HelperExcel.NewCell(-1, item.DaysAllowOff, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));
                            if (item.DateStart.HasValue)
                                cells.Add(HelperExcel.NewCell(-1, item.DateStart.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));
                            else
                                cells.Add(HelperExcel.NewCell(-1, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, "@"));

                            if (item.DateEnd.HasValue)
                                cells.Add(HelperExcel.NewCell(-1, item.DateEnd.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            else
                                cells.Add(HelperExcel.NewCell(-1, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));

                            cells.Add(HelperExcel.NewCell(-1, item.ExtendLevel));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMDriver_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 20;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colFLMID = colData++;
                    int colVehicleID = colData++;
                    int colLicenceID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code != null && c.Code != null).Select(c => new { c.ID, c.Code }).ToList();
                    var lstVehicleID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0).Select(c => new { c.CAT_Vehicle.ID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstLicenceID = model.CAT_DrivingLicence.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLastName = HelperExcel.GetString(checkRow, colData++);
                        string dataFirstName = HelperExcel.GetString(checkRow, colData++);
                        string dataIsAssistance = HelperExcel.GetString(checkRow, colData++);
                        string dataNote = HelperExcel.GetString(checkRow, colData++);
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataCellPhone = HelperExcel.GetString(checkRow, colData++);
                        string dataCardNumber = HelperExcel.GetString(checkRow, colData++);
                        string dataLicenceCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLicenceNumber = HelperExcel.GetString(checkRow, colData++);
                        string dataFeeBase = HelperExcel.GetString(checkRow, colData++);
                        string dataDayAllowOff = HelperExcel.GetString(checkRow, colData++);
                        string dataDateStart = HelperExcel.GetString(checkRow, colData++);
                        string dataDateEnd = HelperExcel.GetString(checkRow, colData++);
                        string dataExtendLevel = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colFLMID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLastName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataFirstName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && (string.IsNullOrEmpty(dataIsAssistance) || (dataIsAssistance != "Lái xe" && dataIsAssistance != "Phụ xe")))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataNote, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataRegNo) && lstVehicleID.Where(c => c.RegNo == dataRegNo).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstVehicleID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVehicleID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCellPhone, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCardNumber, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataLicenceCode) && lstLicenceID.Where(c => c.Code == dataLicenceCode).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstLicenceID.FirstOrDefault(c => c.Code == dataLicenceCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLicenceID, valid);
                        }
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataLicenceCode) && !string.IsNullOrEmpty(dataLicenceNumber))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataFeeBase, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDayAllowOff, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDateStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDateEnd, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataExtendLevel, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMDriver_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {

                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 20;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colFLMID = colData++;
                    int colVehicleID = colData++;
                    int colLicenceID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Code != null && c.Code != null).Select(c => new { c.ID, c.Code }).ToList();
                    var lstVehicleID = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0).Select(c => new { c.CAT_Vehicle.ID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstLicenceID = model.CAT_DrivingLicence.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLastName = HelperExcel.GetString(checkRow, colData++);
                        string dataFirstName = HelperExcel.GetString(checkRow, colData++);
                        string dataIsAssistance = HelperExcel.GetString(checkRow, colData++);
                        string dataNote = HelperExcel.GetString(checkRow, colData++);
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataCellPhone = HelperExcel.GetString(checkRow, colData++);
                        string dataCardNumber = HelperExcel.GetString(checkRow, colData++);
                        string dataLicenceCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLicenceNumber = HelperExcel.GetString(checkRow, colData++);
                        string dataFeeBase = HelperExcel.GetString(checkRow, colData++);
                        string dataDayAllowOff = HelperExcel.GetString(checkRow, colData++);
                        string dataDateStart = HelperExcel.GetString(checkRow, colData++);
                        string dataDateEnd = HelperExcel.GetString(checkRow, colData++);
                        string dataExtendLevel = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colFLMID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLastName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataFirstName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && (string.IsNullOrEmpty(dataIsAssistance) || (dataIsAssistance != "Lái xe" && dataIsAssistance != "Phụ xe")))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataNote, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataRegNo) && lstVehicleID.Where(c => c.RegNo == dataRegNo).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstVehicleID.FirstOrDefault(c => c.RegNo == dataRegNo);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVehicleID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCellPhone, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCardNumber, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataLicenceCode) && lstLicenceID.Where(c => c.Code == dataLicenceCode).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstLicenceID.FirstOrDefault(c => c.Code == dataLicenceCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLicenceID, valid);
                        }
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataLicenceCode) && !string.IsNullOrEmpty(dataLicenceNumber))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataFeeBase, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDayAllowOff, HelperExcel.ValidType.Int32, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDateStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDateEnd, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataExtendLevel, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMDriver_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 20;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colFLMID = colData++;
                    int colVehicleID = colData++;
                    int colLicenceID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        List<CAT_Driver> lstCAT = new List<CAT_Driver>();
                        var lstCATID = new List<int>();
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataLastName = HelperExcel.GetString(checkRow, colData++);
                            string dataFirstName = HelperExcel.GetString(checkRow, colData++);
                            string dataIsAssistance = HelperExcel.GetString(checkRow, colData++);
                            string dataNote = HelperExcel.GetString(checkRow, colData++);
                            string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                            string dataCellPhone = HelperExcel.GetString(checkRow, colData++);
                            string dataCardNumber = HelperExcel.GetString(checkRow, colData++);
                            string dataLicenceCode = HelperExcel.GetString(checkRow, colData++);
                            string dataLicenceNumber = HelperExcel.GetString(checkRow, colData++);
                            string dataFeeBase = HelperExcel.GetString(checkRow, colData++);
                            string dataDayAllowOff = HelperExcel.GetString(checkRow, colData++);
                            string dataDateStart = HelperExcel.GetString(checkRow, colData++);
                            string dataDateEnd = HelperExcel.GetString(checkRow, colData++);
                            string dataExtendLevel = HelperExcel.GetString(checkRow, colData++);

                            int flmID = Convert.ToInt32(HelperExcel.GetString(checkRow, colFLMID));
                            int vehicleID = Convert.ToInt32(HelperExcel.GetString(checkRow, colVehicleID));
                            int licenceID = Convert.ToInt32(HelperExcel.GetString(checkRow, colLicenceID));

                            var objFLM = model.FLM_Driver.FirstOrDefault(c => c.ID == flmID);
                            var objCAT = default(CAT_Driver);
                            if (objFLM == null)
                            {
                                objCAT = new CAT_Driver();
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;
                                objCAT.Code = dataCode;
                                model.CAT_Driver.Add(objCAT);

                                var objCUS = new CUS_Driver();
                                objCUS.CreatedBy = Account.UserName;
                                objCUS.CreatedDate = DateTime.Now;
                                objCUS.CustomerID = Account.SYSCustomerID;
                                objCUS.CAT_Driver = objCAT;
                                model.CUS_Driver.Add(objCUS);

                                objFLM = new FLM_Driver();
                                objFLM.SYSCustomerID = Account.SYSCustomerID;
                                objFLM.CAT_Driver = objCAT;
                                objFLM.CreatedBy = Account.UserName;
                                objFLM.CreatedDate = DateTime.Now;
                                objFLM.IsUse = true;
                                objFLM.Code = dataCode;
                                model.FLM_Driver.Add(objFLM);
                            }
                            else
                            {
                                objCAT = model.CAT_Driver.FirstOrDefault(c => c.ID == objFLM.DriverID);
                            }
                            objCAT.CardNumber = dataCardNumber;
                            objCAT.Cellphone = dataCellPhone;
                            objCAT.FirstName = dataFirstName;
                            objCAT.LastName = dataLastName;

                            objFLM.IsAssistant = dataIsAssistance == "Phụ xe" ? true : false;
                            objFLM.Note = dataNote;
                            objFLM.FeeBase = !string.IsNullOrEmpty(dataFeeBase) ? Convert.ToDecimal(dataFeeBase) : 0;
                            objFLM.DateEnd = !string.IsNullOrEmpty(dataDateEnd) ? HelperExcel.ValueToDate(dataDateEnd) : null;
                            objFLM.DateStart = !string.IsNullOrEmpty(dataDateStart) ? HelperExcel.ValueToDate(dataDateStart) : null;
                            objFLM.DaysAllowOff = !string.IsNullOrEmpty(dataDayAllowOff) ? Convert.ToInt32(dataDayAllowOff) : 0;

                            if (vehicleID > 0)
                            {
                                var objVehicle = model.CAT_Vehicle.Where(c => c.ID == vehicleID).FirstOrDefault();
                                if (objVehicle != null)
                                {
                                    if (!objFLM.IsAssistant)
                                    {
                                        objVehicle.FLM_Driver = objFLM;
                                        objVehicle.DriverName = dataLastName + " " + dataFirstName;
                                        objVehicle.Cellphone = dataCellPhone;
                                    }
                                    else
                                        objVehicle.FLM_Driver1 = objFLM;
                                }
                            }
                            if (licenceID > 0)
                            {
                                var objLicence = model.CAT_DriverLicence.FirstOrDefault(c => c.DrivingLicenceID == licenceID && c.DriverID == objCAT.ID);
                                if (objLicence == null)
                                {
                                    objLicence = new CAT_DriverLicence();
                                    objLicence.CreatedBy = Account.UserName;
                                    objLicence.CreatedDate = DateTime.Now;
                                    objLicence.CAT_Driver = objCAT;
                                    objLicence.DrivingLicenceID = licenceID;
                                }
                                else
                                {
                                    objLicence.ModifiedBy = Account.UserName;
                                    objLicence.ModifiedDate = DateTime.Now;
                                }
                                objLicence.DrivingLicenceNumber = dataLicenceNumber;
                                if (objLicence.ID < 1)
                                    model.CAT_DriverLicence.Add(objLicence);
                            }

                            model.SaveChanges();
                            lstCAT.Add(objCAT);
                            lstCATID.Add(objCAT.ID);
                        }

                        var lstLicence = model.CAT_DriverLicence.Where(c => lstCATID.Contains(c.DriverID)).Select(c => new { c.DriverID, c.CAT_DrivingLicence.Code }).ToList();
                        foreach (var objCAT in lstCAT)
                        {
                            string str = string.Empty;
                            var query = lstLicence.Where(c => c.DriverID == objCAT.ID);
                            if (query.Count() > 0)
                                str = string.Join(",", query.Select(c => c.Code).ToArray());
                            if (str.Length > 1000)
                                str = str.Substring(0, 1000);
                            objCAT.ListDrivingLicence = str;
                        }
                        model.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Common
        public DTOResult FLMAsset_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)).Select(c => new FLMAsset
                    {
                        ID = c.ID,
                        Code = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : c.RomoocID.HasValue ? c.CAT_Romooc.RegNo : string.Empty,
                        TypeOfAssetID = c.TypeOfAssetID
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<FLMAsset>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult AllSupplier_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Supplier.Select(c => new FLMSupplier
                        {
                            SupplierName = c.SupplierName,
                            ID = c.ID
                        }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<FLMSupplier>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult Stock_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Stock.Select(c => new FLMStock
                    {
                        ID = c.ID,
                        Code = c.Code,
                        StockName = c.StockName,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<FLMStock>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMVehicle_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID.HasValue && (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)).Select(c => new DTOFLMVehicle
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID.Value,
                        Code = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : c.RomoocID.HasValue ? c.CAT_Romooc.RegNo : string.Empty,
                        TypeOfVehicleName = c.SYS_Var.ValueOfVar,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMReceiptAll_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Receipt.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new FLMReceipt
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeOfReceiptID = c.TypeOfReceiptID
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<FLMReceipt>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMDriverAll_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsUse).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        EmployeeCode = c.Code,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        IsAssistant = c.IsAssistant
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMRomooc_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.RomoocID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new DTOFLMRomooc
                    {
                        ID = c.ID,
                        RomoocID = c.RomoocID,
                        RegNo = c.CAT_Romooc.RegNo,
                        MaxWeight = c.CAT_Romooc.MaxWeight
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATDrivingLicence_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DrivingLicence.Select(c => new CATDrivingLicence
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DrivingLicenceName = c.DrivingLicenceName,
                        Description = c.Description,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATDrivingLicence>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATDepartment_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Department.Select(c => new CATDepartment
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DepartmentName = c.DepartmentName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATDepartment>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMMaterial_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Material.Select(c => new DTOFLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfMaterialID = c.GroupOfMaterialID,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName,
                        MaterialName = c.MaterialName,
                        IsFuel = c.CAT_GroupOfMaterial.IsFuel
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMMaterial>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATGroupOfRomooc_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfRomooc.Select(c => new CATGroupOfRomooc
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATGroupOfRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATRomooc_AllList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Romooc.Select(c => new CATRomooc
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        RegCapacity = c.RegCapacity,
                        MaxWeight = c.MaxWeight,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        IsOwn = c.IsOwn
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATGroupOfEquipment_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfEquipment.Select(c => new CATGroupOfEquipment
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATGroupOfEquipment>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Schedule - Chấm công tài xế
        //danh sach bang châm
        public DTOResult FLMSchedule_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Schedule.Select(c => new DTOFLMSchedule
                        {
                            ID = c.ID,
                            DateFrom = c.DateFrom,
                            DateTo = c.DateTo,
                            IsClosed = c.IsClosed,
                            TotalDays = c.TotalDays,
                            Note = c.Note,
                            Month = c.Month,
                            Year = c.Year
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMSchedule>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMSchedule FLMSchedule_Get(int id)
        {
            try
            {
                DTOFLMSchedule result = new DTOFLMSchedule();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_Schedule.Where(c => c.ID == id).Select(c => new DTOFLMSchedule
                        {
                            ID = c.ID,
                            DateFrom = c.DateFrom,
                            DateTo = c.DateTo,
                            IsClosed = c.IsClosed,
                            TotalDays = c.TotalDays,
                            Note = c.Note,
                            Month = c.Month,
                            Year = c.Year,
                            ExprDaysAllowOff = c.ExprDaysAllowOff,
                            ExprDaysWorkInHoliday = c.ExprDaysWorkInHoliday,
                            ExprDaysWorkInOff = c.ExprDaysWorkInOff,
                            ExprDaysWorkInOn = c.ExprDaysWorkInOn,
                            ExprTotalDays = c.ExprTotalDays,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.DateFrom = DateTime.Now;
                        result.DateTo = DateTime.Now;
                        result.Month = DateTime.Now.Month;
                        result.Year = DateTime.Now.Year;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_Save(DTOFLMSchedule item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.DateFrom.Date >= item.DateTo.Date)
                        throw FaultHelper.BusinessFault(null, null, "Ngày bắt đầu phải nhỏ hơn ngày kết thúc");
                    var obj = model.FLM_Schedule.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_Schedule();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.TotalDays = 0;
                        model.FLM_Schedule.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.DateTo = item.DateTo;
                    obj.DateFrom = item.DateFrom;
                    obj.Note = item.Note;
                    obj.IsClosed = item.IsClosed;
                    obj.Month = item.Month;
                    obj.Year = item.Year;
                    obj.ExprDaysAllowOff = item.ExprDaysAllowOff;
                    obj.ExprDaysWorkInHoliday = item.ExprDaysWorkInHoliday;
                    obj.ExprDaysWorkInOff = item.ExprDaysWorkInOff;
                    obj.ExprDaysWorkInOn = item.ExprDaysWorkInOn;
                    obj.ExprTotalDays = item.ExprTotalDays;

                    //create flm_scheduledate 
                    foreach (var detail in model.FLM_ScheduleDate.Where(c => c.ScheduleID == obj.ID))
                    {
                        if (detail.Date.Date < item.DateFrom.Date || detail.Date.Date > item.DateTo.Date)
                        {
                            foreach (var dateDetail in model.FLM_ScheduleDateDetail.Where(c => c.ScheduleDateID == detail.ID))
                                model.FLM_ScheduleDateDetail.Remove(dateDetail);
                            model.FLM_ScheduleDate.Remove(detail);
                        }
                    }

                    for (DateTime i = item.DateFrom.Date; i <= item.DateTo.Date; i = i.AddDays(1))
                    {
                        i = i.Date;
                        var objCheck = model.FLM_ScheduleDate.FirstOrDefault(c => DbFunctions.TruncateTime(c.Date) == i && c.ScheduleID == obj.ID);
                        if (objCheck == null)
                        {
                            objCheck = new FLM_ScheduleDate();
                            objCheck.CreatedBy = Account.UserName;
                            objCheck.CreatedDate = DateTime.Now;
                            objCheck.Date = i;
                            objCheck.TypeScheduleDateID = -(int)SYSVarType.TypeScheduleDateOn;
                            if (i.DayOfWeek == DayOfWeek.Sunday)
                                objCheck.TypeScheduleDateID = -(int)SYSVarType.TypeScheduleDateOff;
                            objCheck.FLM_Schedule = obj;
                            model.FLM_ScheduleDate.Add(objCheck);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMSchedule_Copy(List<int> lstId)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var id in lstId)
                    {
                        var item = model.FLM_Schedule.FirstOrDefault(c => c.ID == id);
                        if (item == null)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy kì chấm công");
                        }

                        FLM_Schedule itemNew = new FLM_Schedule();

                        itemNew.CreatedBy = Account.UserName;
                        itemNew.CreatedDate = DateTime.Now;

                        model.FLM_Schedule.Add(itemNew);

                        if (item.Month < 12)
                        {
                            itemNew.Month = item.Month + 1;
                            itemNew.Year = item.Year;
                        }
                        else
                        {
                            itemNew.Month = 1;
                            itemNew.Year = item.Year + 1;
                        }
                        itemNew.DateTo = new DateTime(itemNew.Year, itemNew.Month, DateTime.DaysInMonth(itemNew.Year, itemNew.Month));
                        itemNew.DateFrom = new DateTime(itemNew.Year, itemNew.Month, 1);
                        itemNew.TotalDays = DateTime.DaysInMonth(itemNew.Year, itemNew.Month);
                        for (int i = 1; i <= DateTime.DaysInMonth(itemNew.Year, itemNew.Month); i++)
                        {
                            var itemDate = new DateTime(itemNew.Year, itemNew.Month, i);
                            if (itemDate.Date.DayOfWeek == DayOfWeek.Sunday)
                            {
                                itemNew.TotalDays = itemNew.TotalDays - 1;
                            }
                        }
                        itemNew.ExprDaysAllowOff = item.ExprDaysAllowOff;
                        itemNew.ExprDaysWorkInHoliday = item.ExprDaysWorkInHoliday;
                        itemNew.ExprDaysWorkInOff = item.ExprDaysWorkInOff;
                        itemNew.ExprDaysWorkInOn = item.ExprDaysWorkInOn;
                        itemNew.ExprTotalDays = item.ExprTotalDays;


                        //create flm_scheduledate 
                        foreach (var detail in model.FLM_ScheduleDate.Where(c => c.ScheduleID == itemNew.ID))
                        {
                            if (detail.Date.Date < item.DateFrom.Date || detail.Date.Date > item.DateTo.Date)
                            {
                                foreach (var dateDetail in model.FLM_ScheduleDateDetail.Where(c => c.ScheduleDateID == detail.ID))
                                    model.FLM_ScheduleDateDetail.Remove(dateDetail);
                                model.FLM_ScheduleDate.Remove(detail);
                            }
                        }

                        for (DateTime i = item.DateFrom.Date; i <= item.DateTo.Date; i = i.AddDays(1))
                        {
                            i = i.Date;
                            var objCheck = model.FLM_ScheduleDate.FirstOrDefault(c => DbFunctions.TruncateTime(c.Date) == i && c.ScheduleID == itemNew.ID);
                            if (objCheck == null)
                            {
                                objCheck = new FLM_ScheduleDate();
                                objCheck.CreatedBy = Account.UserName;
                                objCheck.CreatedDate = DateTime.Now;
                                objCheck.Date = i;
                                objCheck.TypeScheduleDateID = -(int)SYSVarType.TypeScheduleDateOn;
                                if (i.DayOfWeek == DayOfWeek.Sunday)
                                    objCheck.TypeScheduleDateID = -(int)SYSVarType.TypeScheduleDateOff;
                                objCheck.FLM_Schedule = itemNew;
                                model.FLM_ScheduleDate.Add(objCheck);
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMSchedule_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_Schedule.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        //xoa schedule date
                        foreach (var date in model.FLM_ScheduleDate.Where(c => c.ScheduleID == obj.ID))
                        {
                            foreach (var detail in model.FLM_ScheduleDateDetail.Where(c => c.ScheduleDateID == date.ID))
                                model.FLM_ScheduleDateDetail.Remove(detail);
                            model.FLM_ScheduleDate.Remove(date);
                        }
                        foreach (var driver in model.FLM_ScheduleDriver.Where(c => c.ScheduleID == obj.ID))
                            model.FLM_ScheduleDriver.Remove(driver);
                        foreach (var fee in model.FLM_ScheduleFee.Where(c => c.ScheduleID == obj.ID))
                            model.FLM_ScheduleFee.Remove(fee);
                        //xoa tai chinh neu co

                        foreach (var fin in model.FIN_PL.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ScheduleID > 0 && c.ScheduleID == obj.ID))
                        {
                            foreach (var finDetail in model.FIN_PLDetails.Where(c => c.PLID == fin.ID))
                            {
                                foreach (var finGOP in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == finDetail.ID))
                                    model.FIN_PLGroupOfProduct.Remove(finGOP);
                                model.FIN_PLDetails.Remove(finDetail);
                            }
                            model.FIN_PL.Remove(fin);
                        }

                        //xoa finTemp
                        foreach (var finTemp in model.FIN_Temp.Where(c => c.ScheduleID == obj.ID))
                            model.FIN_Temp.Remove(finTemp);
                        //dieu chinh schedule opsmaster
                        foreach (var master in model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ScheduleID > 0 && c.ScheduleID == obj.ID))
                            master.ScheduleID = null;

                        model.FLM_Schedule.Remove(obj);

                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng chấm công");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        //chi tiết 1 bảng
        public DTOFLMScheduleData FLMSchedule_Detail_Data(int scheduleID)
        {
            try
            {
                DTOFLMScheduleData result = new DTOFLMScheduleData();
                result.ListDate = new List<DTOFLMScheduleDate>();
                result.ListDetail = new List<DTOFLMScheduleDetail>();
                result.ListDriver = new List<DTOFLMDriver>();
                using (var model = new DataEntities())
                {
                    result.ListDate = model.FLM_ScheduleDate.Where(c => c.ScheduleID == scheduleID).Select(c => new DTOFLMScheduleDate
                    {
                        ID = c.ID,
                        ScheduleID = c.ScheduleID,
                        Date = c.Date,
                        TypeScheduleDateID = c.TypeScheduleDateID,
                        TypeScheduleDateName = c.SYS_Var.ValueOfVar,
                        DateName = string.Empty,
                        TypeDate = 0,
                    }).ToList();

                    foreach (var item in result.ListDate)
                    {
                        switch (item.TypeScheduleDateID)
                        {
                            default: item.TypeDate = 1;
                                break;
                            case -(int)SYSVarType.TypeScheduleDateOn: item.TypeDate = 1; break;
                            case -(int)SYSVarType.TypeScheduleDateOff: item.TypeDate = 2; break;
                            case -(int)SYSVarType.TypeScheduleDateHoliday: item.TypeDate = 3; break;
                        }
                        switch (item.Date.DayOfWeek)
                        {
                            case DayOfWeek.Friday: item.DateName = "T6";
                                break;
                            case DayOfWeek.Monday: item.DateName = "T2";
                                break;
                            case DayOfWeek.Saturday: item.DateName = "T7";
                                break;
                            case DayOfWeek.Sunday: item.DateName = "CN";
                                break;
                            case DayOfWeek.Thursday: item.DateName = "T5";
                                break;
                            case DayOfWeek.Tuesday: item.DateName = "T3";
                                break;
                            case DayOfWeek.Wednesday: item.DateName = "T4";
                                break;
                            default: item.DateName = string.Empty;
                                break;
                        }
                    }
                    result.ListDriver = model.FLM_ScheduleDriver.Where(c => c.ScheduleID == scheduleID).Select(c => new DTOFLMDriver
                        {
                            ID = c.DriverID,
                            DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                            EmployeeCode = c.FLM_Driver.Code,
                            Cellphone = c.FLM_Driver.CAT_Driver.Cellphone,
                            CardNumber = c.FLM_Driver.CAT_Driver.CardNumber
                        }).ToList();
                    result.ListDetail = model.FLM_ScheduleDateDetail.Where(c => c.FLM_ScheduleDate.ScheduleID == scheduleID).Select(c => new DTOFLMScheduleDetail
                        {
                            ID = c.ID,
                            DriverID = c.DriverID,
                            ScheduleDateID = c.ScheduleDateID,
                            IsChecked = true
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_Detail_Save(List<DTOFLMScheduleDetail> lst, int scheduleID)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var detail in model.FLM_ScheduleDateDetail.Where(c => c.FLM_ScheduleDate.ScheduleID == scheduleID))
                        model.FLM_ScheduleDateDetail.Remove(detail);
                    foreach (var item in lst)
                    {
                        FLM_ScheduleDateDetail obj = new FLM_ScheduleDateDetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ScheduleDateID = item.ScheduleDateID;
                        obj.DriverID = item.DriverID;
                        model.FLM_ScheduleDateDetail.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_Detail_Import(List<DTOFLMScheduleImport> lst, int scheduleID)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (lst.Count(c => c.ExcelSuccess) > 0)
                    {
                        var listDriverClear = lst.Where(c => c.ExcelSuccess).Select(c => c.DriverID).ToList();
                        foreach (var detail in model.FLM_ScheduleDateDetail.Where(c => c.FLM_ScheduleDate.ScheduleID == scheduleID && listDriverClear.Contains(c.DriverID)))
                            model.FLM_ScheduleDateDetail.Remove(detail);
                        foreach (var item in lst.Where(c => c.ExcelSuccess))
                        {
                            foreach (var detail in item.ListDetail.Where(c => c.IsSuccess))
                            {
                                FLM_ScheduleDateDetail obj = new FLM_ScheduleDateDetail();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ScheduleDateID = detail.ScheduleDateID;
                                obj.DriverID = item.DriverID;
                                model.FLM_ScheduleDateDetail.Add(obj);
                            }
                        }
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        //tai xe cua bảng 
        public DTOResult FLMSchedule_Driver_List(string request, int scheduleID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleDriver.Where(c => c.ScheduleID == scheduleID).Select(c => new DTOFLMScheduleDriver
                    {
                        ID = c.ID,
                        ScheduleID = c.ScheduleID,
                        DriverID = c.DriverID,
                        DriverCode = c.FLM_Driver.Code,
                        DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                        FeeBase = c.FeeBase,
                        DaysAllowOff = c.DaysAllowOff,
                        //DaysFee = c.DaysFee,
                        Note = c.Note,
                        IsAssistant = c.IsAssistant,
                        DateStart = c.FLM_Driver.DateStart,
                        CardNumber = c.FLM_Driver.CAT_Driver.CardNumber,
                        AssetID = c.AssetID > 0 ? c.AssetID.Value : -1,
                        AssetNo = c.AssetID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMScheduleDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMScheduleDriver FLMSchedule_Driver_Get(int id)
        {
            try
            {
                DTOFLMScheduleDriver result = new DTOFLMScheduleDriver();
                using (var model = new DataEntities())
                {
                    result = model.FLM_ScheduleDriver.Where(c => c.ID == id).Select(c => new DTOFLMScheduleDriver
                    {
                        ID = c.ID,
                        ScheduleID = c.ScheduleID,
                        DriverID = c.DriverID,
                        DriverCode = c.FLM_Driver.Code,
                        DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                        FeeBase = c.FeeBase,
                        DaysAllowOff = c.DaysAllowOff,
                        //DaysFee = c.DaysFee,
                        Note = c.Note,
                        DaysAllowOffRemain = c.DaysAllowOffRemain,
                        DaysWorkInHoliday = c.DaysWorkInHoliday,
                        DaysWorkInOff = c.DaysWorkInOff,
                        DaysWorkInOn = c.DaysWorkInOn,
                        IsAssistant = c.IsAssistant,
                        AssetID = c.AssetID > 0 ? c.AssetID.Value : -1,
                        AssetNo = c.AssetID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : string.Empty,
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_Driver_Save(DTOFLMScheduleDriver item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_ScheduleDriver.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        obj.FeeBase = item.FeeBase;
                        //obj.DaysFee = item.DaysFee;
                        obj.DaysAllowOff = item.DaysAllowOff;
                        obj.Note = item.Note;
                        if (item.AssetID > 0)
                            obj.AssetID = item.AssetID;
                        else obj.AssetID = null;

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_Driver_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_ScheduleDriver.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var detail in model.FLM_ScheduleDateDetail.Where(c => c.FLM_ScheduleDate.ScheduleID == obj.ScheduleID && c.DriverID == obj.DriverID))
                            model.FLM_ScheduleDateDetail.Remove(detail);
                        model.FLM_ScheduleDriver.Remove(obj);
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy tài xế này");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMSchedule_Driver_NotInList(string request, int scheduleID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var listDriverExist = model.FLM_ScheduleDriver.Where(c => c.ScheduleID == scheduleID).Select(c => c.DriverID).ToList();
                    var query = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && !listDriverExist.Contains(c.ID) && c.IsUse).Select(c => new DTOFLMDriver
                        {
                            ID = c.ID,
                            LastName = c.CAT_Driver.LastName,
                            FirstName = c.CAT_Driver.FirstName,
                            EmployeeCode = c.Code,
                            CardNumber = c.CAT_Driver.CardNumber,
                            Cellphone = c.CAT_Driver.Cellphone,
                            IsAssistant = c.IsAssistant,
                            DateStart = c.DateStart
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_Driver_NotInSave(List<int> lstDriver, int scheduleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var driver in lstDriver)
                    {
                        var objDriver = model.FLM_Driver.FirstOrDefault(c => c.ID == driver);
                        if (objDriver != null)
                        {
                            var obj = model.FLM_ScheduleDriver.FirstOrDefault(c => c.DriverID == driver && c.ScheduleID == scheduleID);
                            if (obj == null)
                            {
                                obj = new FLM_ScheduleDriver();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.DriverID = driver;
                                obj.ScheduleID = scheduleID;
                                model.FLM_ScheduleDriver.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedDate = DateTime.Now;
                                obj.ModifiedBy = Account.UserName;
                            }
                            //obj.DaysFee = 0;
                            obj.DaysAllowOff = 0;
                            obj.FeeBase = 0;
                            obj.IsAssistant = objDriver.IsAssistant;
                        }
                        else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy tài xế ID:" + driver);
                    }
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_Driver_UpdateInfo(int scheduleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var ListDriver = model.FLM_ScheduleDriver.Where(c => c.ScheduleID == scheduleID).ToList();
                    foreach (var sDriver in ListDriver)
                    {
                        var fDriver = model.FLM_Driver.FirstOrDefault(c => c.ID == sDriver.DriverID);
                        if (fDriver != null)
                        {
                            sDriver.FeeBase = fDriver.FeeBase;
                            sDriver.IsAssistant = fDriver.IsAssistant;
                            sDriver.DaysAllowOff = fDriver.DaysAllowOff > 0 ? fDriver.DaysAllowOff.Value : 0;
                        }

                        var fAsset = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsDisposal == false && c.CAT_Vehicle.DriverID > 0 && c.CAT_Vehicle.DriverID.Value == sDriver.DriverID).FirstOrDefault();
                        if (fAsset != null)
                            sDriver.AssetID = fAsset.ID;
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        //loai ngay trong bang cham
        public DTOResult FLMSchedule_Date_List(string request, int scheduleID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleDate.Where(c => c.ScheduleID == scheduleID).Select(c => new DTOFLMScheduleDate
                    {
                        ID = c.ID,
                        ScheduleID = c.ScheduleID,
                        Date = c.Date,
                        TypeScheduleDateID = c.TypeScheduleDateID,
                        TypeScheduleDateName = c.SYS_Var.ValueOfVar,
                        DateName = string.Empty,
                        TypeDate = 0,
                    }).ToDataSourceResult(CreateRequest(request));
                    var lst = query.Data.Cast<DTOFLMScheduleDate>().ToList();

                    foreach (var item in lst)
                    {
                        switch (item.TypeScheduleDateID)
                        {
                            default: item.TypeDate = 1;
                                break;
                            case -(int)SYSVarType.TypeScheduleDateOn: item.TypeDate = 1; break;
                            case -(int)SYSVarType.TypeScheduleDateOff: item.TypeDate = 2; break;
                            case -(int)SYSVarType.TypeScheduleDateHoliday: item.TypeDate = 3; break;
                        }
                        switch (item.Date.DayOfWeek)
                        {
                            case DayOfWeek.Friday: item.DateName = "Thứ 6";
                                break;
                            case DayOfWeek.Monday: item.DateName = "Thứ 2";
                                break;
                            case DayOfWeek.Saturday: item.DateName = "Thứ 7";
                                break;
                            case DayOfWeek.Sunday: item.DateName = "Chủ nhật";
                                break;
                            case DayOfWeek.Thursday: item.DateName = "Thứ 5";
                                break;
                            case DayOfWeek.Tuesday: item.DateName = "Thứ 3";
                                break;
                            case DayOfWeek.Wednesday: item.DateName = "Thứ 4";
                                break;
                            default: item.DateName = string.Empty;
                                break;
                        }
                    }

                    result.Total = query.Total;
                    result.Data = lst;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMScheduleDate FLMSchedule_Date_Get(int id)
        {
            try
            {
                DTOFLMScheduleDate result = new DTOFLMScheduleDate();
                using (var model = new DataEntities())
                {
                    result = model.FLM_ScheduleDate.Where(c => c.ID == id).Select(c => new DTOFLMScheduleDate
                    {
                        ID = c.ID,
                        ScheduleID = c.ScheduleID,
                        Date = c.Date,
                        TypeScheduleDateID = c.TypeScheduleDateID,
                        TypeScheduleDateName = c.SYS_Var.ValueOfVar
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_Date_Save(DTOFLMScheduleDate item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.FLM_ScheduleDate.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.TypeScheduleDateID = item.TypeScheduleDateID;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        //phi khác theo tài xe
        public DTOResult FLMSchedule_DriverFee_List(string request, int scheduleID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleFee.Where(c => c.ScheduleID == scheduleID && c.DriverID > 0).Select(c => new DTOFLMScheduleFee
                    {
                        ID = c.ID,
                        ScheduleID = c.ScheduleID,
                        TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                        TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                        TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                        DriverID = c.DriverID,
                        DriverCode = c.FLM_Driver.Code,
                        DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                        Price = c.Price,
                        ExprDay = c.ExprDay,
                        ExprPriceDay = c.ExprPriceDay,
                        ExprPriceTOMaster = c.ExprPriceTOMaster,
                        Day = c.Day,
                        ExprInputDay = c.ExprInputDay,
                        ExprInputTOMaster = c.ExprInputTOMaster,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMScheduleFee>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMScheduleFee FLMSchedule_DriverFee_Get(int id, int scheduleID)
        {
            try
            {
                DTOFLMScheduleFee result = new DTOFLMScheduleFee();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_ScheduleFee.Where(c => c.ID == id).Select(c => new DTOFLMScheduleFee
                        {
                            ID = c.ID,
                            ScheduleID = c.ScheduleID,
                            TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                            TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                            TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                            DriverID = c.DriverID,
                            DriverCode = c.FLM_Driver.Code,
                            DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                            Price = c.Price,
                            ExprDay = c.ExprDay,
                            ExprPriceDay = c.ExprPriceDay,
                            ExprPriceTOMaster = c.ExprPriceTOMaster,
                            ExprInputDay = c.ExprInputDay,
                            ExprInputTOMaster = c.ExprInputTOMaster,
                            Day = c.Day
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.DriverID = -1;
                        var driver = model.FLM_ScheduleDriver.Where(c => c.ScheduleID == scheduleID).FirstOrDefault();
                        if (driver != null) result.DriverID = driver.DriverID;
                        result.TypeOfScheduleFeeID = 0;
                        var type = model.FLM_TypeOfScheduleFee.FirstOrDefault();
                        if (type != null) result.TypeOfScheduleFeeID = type.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_DriverFee_Save(DTOFLMScheduleFee item, int scheduleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.FLM_ScheduleFee.Count(c => c.ScheduleID == scheduleID && c.DriverID == item.DriverID && c.TypeOfScheduleFeeID == item.TypeOfScheduleFeeID && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Tài xế và loại phí đã tồn tại");
                    var obj = model.FLM_ScheduleFee.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new FLM_ScheduleFee();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ScheduleID = scheduleID;
                        model.FLM_ScheduleFee.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.DriverID = item.DriverID;
                    obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                    obj.Price = item.Price >= 0 ? item.Price : null;
                    obj.ExprDay = item.ExprDay;
                    obj.Day = item.Day >= 0 ? item.Day : null;
                    obj.ExprPriceDay = item.ExprPriceDay;
                    obj.ExprPriceTOMaster = item.ExprPriceTOMaster;
                    obj.ExprInputDay = item.ExprInputDay;
                    obj.ExprInputTOMaster = item.ExprInputTOMaster;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_DriverFee_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_ScheduleFee.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.FLM_ScheduleFee.Remove(obj);
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu id:" + id.ToString());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMSchedule_DriverFee_DriverList(int scheduleID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleDriver.Where(c => c.ScheduleID == scheduleID).Select(c => new DTOFLMScheduleDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        DriverCode = c.FLM_Driver.Code,
                        DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        //phi thang theo xe
        public DTOResult FLMSchedule_AssetFee_List(string request, int scheduleID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleFee.Where(c => c.ScheduleID == scheduleID && c.AssetID > 0).Select(c => new DTOFLMScheduleFee
                    {
                        ID = c.ID,
                        ScheduleID = c.ScheduleID,
                        TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                        TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                        TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                        AssetID = c.AssetID,
                        AssetNo = c.FLM_Asset.CAT_Vehicle.RegNo,
                        Price = c.Price,
                        ExprDay = c.ExprDay,
                        ExprPriceDay = c.ExprPriceDay,
                        ExprPriceTOMaster = c.ExprPriceTOMaster,
                        Day = c.Day,
                        ExprInputDay = c.ExprInputDay,
                        ExprInputTOMaster = c.ExprInputTOMaster,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMScheduleFee>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMScheduleFee FLMSchedule_AssetFee_Get(int id, int scheduleID)
        {
            try
            {
                DTOFLMScheduleFee result = new DTOFLMScheduleFee();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_ScheduleFee.Where(c => c.ID == id).Select(c => new DTOFLMScheduleFee
                        {
                            ID = c.ID,
                            ScheduleID = c.ScheduleID,
                            TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                            TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                            TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                            AssetID = c.AssetID,
                            AssetNo = c.FLM_Asset.CAT_Vehicle.RegNo,
                            Price = c.Price,
                            ExprDay = c.ExprDay,
                            ExprPriceDay = c.ExprPriceDay,
                            ExprPriceTOMaster = c.ExprPriceTOMaster,
                            ExprInputDay = c.ExprInputDay,
                            ExprInputTOMaster = c.ExprInputTOMaster,
                            Day = c.Day
                        }).FirstOrDefault();
                    }
                    else
                    {
                        int iTruck = -(int)SYSVarType.TypeOfAssetTruck;
                        int iTractor = -(int)SYSVarType.TypeOfAssetTractor;
                        result.ID = 0;
                        result.AssetID = -1;
                        var asset = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == iTruck || c.TypeOfAssetID == iTractor)).FirstOrDefault();
                        if (asset != null) result.AssetID = asset.ID;
                        result.TypeOfScheduleFeeID = 0;
                        var type = model.FLM_TypeOfScheduleFee.FirstOrDefault();
                        if (type != null) result.TypeOfScheduleFeeID = type.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_AssetFee_Save(DTOFLMScheduleFee item, int scheduleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.FLM_ScheduleFee.Count(c => c.ScheduleID == scheduleID && c.AssetID == item.AssetID && c.TypeOfScheduleFeeID == item.TypeOfScheduleFeeID && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Tài xế và loại phí đã tồn tại");
                    var obj = model.FLM_ScheduleFee.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new FLM_ScheduleFee();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ScheduleID = scheduleID;
                        model.FLM_ScheduleFee.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.AssetID = item.AssetID;
                    obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                    obj.Price = item.Price >= 0 ? item.Price : null;
                    obj.ExprDay = item.ExprDay;
                    obj.Day = item.Day >= 0 ? item.Day : null;
                    obj.ExprPriceDay = item.ExprPriceDay;
                    obj.ExprPriceTOMaster = item.ExprPriceTOMaster;
                    obj.ExprInputDay = item.ExprInputDay;
                    obj.ExprInputTOMaster = item.ExprInputTOMaster;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_AssetFee_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_ScheduleFee.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.FLM_ScheduleFee.Remove(obj);
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu id:" + id.ToString());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMSchedule_AssetFee_AsestList()
        {
            try
            {
                DTOResult result = new DTOResult();
                int iTruck = -(int)SYSVarType.TypeOfAssetTruck;
                int iTractor = -(int)SYSVarType.TypeOfAssetTractor;
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == iTruck || c.TypeOfAssetID == iTractor)).Select(c => new DTOFLMVehicle
                    {
                        ID = c.ID,
                        RegNo = c.CAT_Vehicle.RegNo
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMScheduleFeeData FLMSchedule_ScheduleFee_Data(int scheduleID)
        {
            try
            {
                DTOFLMScheduleFeeData result = new DTOFLMScheduleFeeData();
                result.ListAsset = new List<DTOFLMVehicle>();
                result.ListDriver = new List<DTOFLMScheduleDriver>();
                result.ListData = new List<DTOFLMScheduleFee>();
                result.ListTypeOfScheduleFee = new List<DTOFLMTypeOfScheduleFee>();

                int iTruck = -(int)SYSVarType.TypeOfAssetTruck;
                int iTractor = -(int)SYSVarType.TypeOfAssetTractor;
                using (var model = new DataEntities())
                {
                    result.ListAsset = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == iTruck || c.TypeOfAssetID == iTractor)).Select(c => new DTOFLMVehicle
                    {
                        ID = c.ID,
                        RegNo = c.CAT_Vehicle.RegNo
                    }).ToList();

                    result.ListDriver = model.FLM_ScheduleDriver.Where(c => c.ScheduleID == scheduleID).Select(c => new DTOFLMScheduleDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        DriverCode = c.FLM_Driver.Code,
                        DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                    }).ToList();

                    result.ListTypeOfScheduleFee = model.FLM_TypeOfScheduleFee.Select(c => new DTOFLMTypeOfScheduleFee
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName,
                    }).ToList();

                    result.ListData = model.FLM_ScheduleFee.Where(c => c.ScheduleID == scheduleID).Select(c => new DTOFLMScheduleFee
                        {
                            ID = c.ID,
                            ScheduleID = c.ScheduleID,
                            TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                            TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                            TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                            AssetID = c.AssetID,
                            AssetNo = c.FLM_Asset.CAT_Vehicle.RegNo,
                            DriverID = c.DriverID,
                            DriverCode = c.FLM_Driver.Code,
                            DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                            Price = c.Price,
                            ExprDay = c.ExprDay,
                            ExprPriceDay = c.ExprPriceDay,
                            ExprPriceTOMaster = c.ExprPriceTOMaster,
                            ExprInputDay = c.ExprInputDay,
                            ExprInputTOMaster = c.ExprInputTOMaster,
                            Day = c.Day
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_DriverFee_Import(List<DTOFLMScheduleFeeImport> lst, int scheduleID)
        {
            int count = 0;
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    foreach (var item in lst.Where(c => c.ExcelSuccess && (c.AssetID > 0 || c.DriverID > 0) && c.TypeOfScheduleFeeID > 0))
                    {
                        if (model.FLM_ScheduleFee.Count(c => c.ScheduleID == scheduleID && c.DriverID == item.DriverID && c.TypeOfScheduleFeeID == item.TypeOfScheduleFeeID && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Tài xế và loại phí đã tồn tại");
                        var obj = model.FLM_ScheduleFee.Where(c => c.ID == item.ID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new FLM_ScheduleFee();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ScheduleID = scheduleID;
                            obj.AssetID = item.AssetID;
                            obj.DriverID = item.DriverID;
                            obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                            model.FLM_ScheduleFee.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = item.Price > 0 ? item.Price : 0;
                        obj.ExprDay = item.ExprDay;
                        obj.Day = item.Day > 0 ? item.Day : 0;
                        obj.ExprPriceDay = item.ExprPriceDay;
                        obj.ExprPriceTOMaster = item.ExprPriceTOMaster;
                        obj.ExprInputDay = item.ExprInputDay;
                        obj.ExprInputTOMaster = item.ExprInputTOMaster;

                        count++;
                        //if (count % 50 == 0)
                        model.SaveChanges();
                    }
                    //model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_AssetFee_Import(List<DTOFLMScheduleFeeImport> lst, int scheduleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst.Where(c => c.ExcelSuccess))
                    {
                        if (model.FLM_ScheduleFee.Count(c => c.ScheduleID == scheduleID && c.AssetID == item.AssetID && c.TypeOfScheduleFeeID == item.TypeOfScheduleFeeID && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Tài xế và loại phí đã tồn tại");
                        var obj = model.FLM_ScheduleFee.Where(c => c.ID == item.ID && c.ScheduleID == scheduleID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new FLM_ScheduleFee();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ScheduleID = scheduleID;
                            model.FLM_ScheduleFee.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.AssetID = item.AssetID;
                        obj.DriverID = item.DriverID;
                        obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                        obj.Price = item.Price >= 0 ? item.Price : null;
                        obj.ExprDay = item.ExprDay;
                        obj.Day = item.Day >= 0 ? item.Day : null;
                        obj.ExprPriceDay = item.ExprPriceDay;
                        obj.ExprPriceTOMaster = item.ExprPriceTOMaster;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        //chi phí theo lái/ phụ xe
        public DTOResult FLMSchedule_AssistantFee_List(string request, int scheduleID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleFee.Where(c => c.ScheduleID == scheduleID && c.IsAssistant != null > 0).Select(c => new DTOFLMScheduleFee
                    {
                        ID = c.ID,
                        ScheduleID = c.ScheduleID,
                        TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                        TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                        TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                        IsAssistant = c.IsAssistant,
                        Price = c.Price,
                        ExprDay = c.ExprDay,
                        ExprPriceDay = c.ExprPriceDay,
                        ExprPriceTOMaster = c.ExprPriceTOMaster,
                        Day = c.Day,
                        ExprInputDay = c.ExprInputDay,
                        ExprInputTOMaster = c.ExprInputTOMaster,

                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMScheduleFee>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMScheduleFee FLMSchedule_AssistantFee_Get(int id, int scheduleID)
        {
            try
            {
                DTOFLMScheduleFee result = new DTOFLMScheduleFee();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_ScheduleFee.Where(c => c.ID == id).Select(c => new DTOFLMScheduleFee
                        {
                            ID = c.ID,
                            ScheduleID = c.ScheduleID,
                            TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                            TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                            TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                            IsAssistant = c.IsAssistant,
                            Price = c.Price,
                            ExprDay = c.ExprDay,
                            ExprPriceDay = c.ExprPriceDay,
                            ExprPriceTOMaster = c.ExprPriceTOMaster,
                            ExprInputDay = c.ExprInputDay,
                            ExprInputTOMaster = c.ExprInputTOMaster,
                            Day = c.Day
                        }).FirstOrDefault();
                    }
                    else
                    {
                        int iTruck = -(int)SYSVarType.TypeOfAssetTruck;
                        int iTractor = -(int)SYSVarType.TypeOfAssetTractor;
                        result.ID = 0;
                        result.IsAssistant = false;
                        result.TypeOfScheduleFeeID = 0;
                        var type = model.FLM_TypeOfScheduleFee.FirstOrDefault();
                        if (type != null) result.TypeOfScheduleFeeID = type.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_AssistantFee_Save(DTOFLMScheduleFee item, int scheduleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.FLM_ScheduleFee.Count(c => c.ScheduleID == scheduleID && c.AssetID == item.AssetID && c.TypeOfScheduleFeeID == item.TypeOfScheduleFeeID && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Tài xế và loại phí đã tồn tại");
                    var obj = model.FLM_ScheduleFee.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new FLM_ScheduleFee();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ScheduleID = scheduleID;
                        model.FLM_ScheduleFee.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.IsAssistant = item.IsAssistant;
                    obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                    obj.Price = item.Price >= 0 ? item.Price : null;
                    obj.ExprDay = item.ExprDay;
                    obj.Day = item.Day >= 0 ? item.Day : null;
                    obj.ExprPriceDay = item.ExprPriceDay;
                    obj.ExprPriceTOMaster = item.ExprPriceTOMaster;
                    obj.ExprInputDay = item.ExprInputDay;
                    obj.ExprInputTOMaster = item.ExprInputTOMaster;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSchedule_AssistantFee_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_ScheduleFee.FirstOrDefault(c => c.ID == id);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu id:" + id.ToString());

                    model.FLM_ScheduleFee.Remove(obj);
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //tinh luong
        public void FLM_Schedule_Detail_CalculateFee(int scheduleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    #region Refresh schedulefee
                    model.EventAccount = Account; model.EventRunning = true;
                    foreach (var item in model.FLM_ScheduleFee.Where(c => c.ScheduleID == scheduleID))
                    {
                        foreach (var detail in model.FLM_ScheduleDriverTemp.Where(c => c.ScheduleFeeID == item.ID))
                            model.FLM_ScheduleDriverTemp.Remove(detail);
                        model.FLM_ScheduleFee.Remove(item);
                    }

                    model.SaveChanges();

                    var lstDriver = model.FLM_ScheduleDriver.Where(c => c.ScheduleID == scheduleID).Select(c => new { c.DriverID, c.IsAssistant }).ToList();

                    var lstDefault = model.FLM_ScheduleFeeDefault.Select(c => new { c.AssetID, c.DriverID, c.IsAssistant, c.TypeOfScheduleFeeID, c.ExprPrice, c.ExprInputDay, c.ExprPriceDay }).ToList();
                    foreach (var item in lstDefault)
                    {
                        if (item.IsAssistant != null)
                        {
                            foreach (var itemDriver in lstDriver.Where(c => c.IsAssistant == item.IsAssistant.Value))
                            {
                                var obj = new FLM_ScheduleFee();
                                obj.ScheduleID = scheduleID;
                                obj.AssetID = item.AssetID;
                                obj.DriverID = itemDriver.DriverID;
                                obj.IsAssistant = itemDriver.IsAssistant;
                                obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                                obj.Price = 0;
                                obj.ExprPrice = item.ExprPrice;
                                obj.ExprInputDay = item.ExprInputDay;
                                obj.ExprPriceDay = item.ExprPriceDay;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.FLM_ScheduleFee.Add(obj);
                            }
                        }
                        else
                        {
                            var obj = new FLM_ScheduleFee();
                            obj.ScheduleID = scheduleID;
                            obj.AssetID = item.AssetID;
                            obj.DriverID = item.DriverID;
                            obj.IsAssistant = item.IsAssistant;
                            obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                            obj.Price = 0;
                            obj.ExprPrice = item.ExprPrice;
                            obj.ExprInputDay = item.ExprInputDay;
                            obj.ExprPriceDay = item.ExprPriceDay;
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            model.FLM_ScheduleFee.Add(obj);
                        }
                    }
                    model.SaveChanges();

                    var objSchedule = model.FLM_Schedule.Where(c => c.ID == scheduleID).Select(c => new { c.Month, c.Year }).FirstOrDefault();
                    if (objSchedule != null)
                    {
                        foreach (var item in model.FLM_FixedCost.Where(c => c.Month == objSchedule.Month && c.Year == objSchedule.Year && c.IsClosed != true))
                        {
                            item.IsClosed = true;
                            item.ModifiedBy = Account.UserName;
                            item.ModifiedDate = DateTime.Now;
                        }
                        model.SaveChanges();
                    }
                    #endregion

                    #region Lấy setting hệ thống
                    DTOSYSSetting setting = new DTOSYSSetting();
                    string sKey = SYSSettingKey.System.ToString();
                    var objSetting = model.SYS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objSetting != null)
                    {
                        if (!string.IsNullOrEmpty(objSetting.Setting))
                        {
                            var data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(objSetting.Setting);
                            if (data != null && data.Count > 0)
                                setting = data.FirstOrDefault();
                        }
                    }
                    #endregion

                    #region Tính lương tài xế
                    if (!setting.IsPHT)
                    {
                        // Cập nhật schedule
                        HelperFinance.Truck_CalculateSchedule(model, Account, scheduleID);
                        model.SaveChanges();
                        // Xóa pl cũ
                        HelperFinance.Truck_CalculateDriverRerun(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Xóa pl cũ");
                        // Khấu hao
                        HelperFinance.Truck_CalculateFixCost(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Khấu hao");
                        // Lương tài xế
                        HelperFinance.Truck_CalculateDriver(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Lương tài xế");
                        // Định mức nhiên liệu
                        HelperFinance.Truck_CalculateMaterialQuota(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Định mức nhiên liệu");
                        // Lương khác
                        HelperFinance.Truck_CalculateFee(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Lương khác");
                        // Receipt
                        HelperFinance.Truck_CalculateReceipt(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Receipt");
                        // Phí trạm
                        HelperFinance.Truck_CalculateStation(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Phí trạm");
                        // Phân bổ phí cho từng chuyến
                        HelperFinance.Truck_CalculateTemp(model, Account, scheduleID, true);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Phân bổ phí cho từng chuyến");
                    }
                    #endregion

                    #region Tính lương tạm cho GLC
                    if (setting.IsPHT)
                    {
                        // Cập nhật schedule
                        HelperFinance.Truck_CalculateSchedule_Temp(model, Account, scheduleID);
                        model.SaveChanges();
                        // Xóa pl cũ
                        HelperFinance.Truck_CalculateDriverRerun_Temp(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Xóa pl cũ");
                        // Lương tài xế
                        HelperFinance.Truck_CalculateDriver_Temp(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Lương tài xế");
                        // Lương khác
                        HelperFinance.Truck_CalculateFee_Temp(model, Account, scheduleID);
                        model.SaveChanges();
                        System.Diagnostics.Debug.WriteLine("Lương khác");
                    }
                    #endregion
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLM_Schedule_Detail_RefreshFee(int scheduleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    // Refresh schedulefee
                    foreach (var item in model.FLM_ScheduleFee.Where(c => c.ScheduleID == scheduleID))
                        model.FLM_ScheduleFee.Remove(item);
                    model.SaveChanges();

                    var objSchedule = model.FLM_Schedule.Where(c => c.ID == scheduleID).Select(c => new { c.Month, c.Year }).FirstOrDefault();
                    if (objSchedule != null)
                    {
                        foreach (var item in model.FLM_FixedCost.Where(c => c.Month == objSchedule.Month && c.Year == objSchedule.Year && c.IsClosed == true))
                        {
                            item.IsClosed = false;
                            item.ModifiedBy = Account.UserName;
                            item.ModifiedDate = DateTime.Now;
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Bảng lương tài xế
        public void FLMDriverFee_Import(int contractID, List<DTOCATDriverFee_Import> lstData)
        {
            try
            {
                string sFeeName = "Lương tài xế";
                using (var model = new DataEntities())
                {
                    foreach (var item in model.CAT_DriverFee.Where(c => c.ContractID == contractID && c.DriverFeeSumID == -(int)SYSVarType.DriverFeeSumSchedule && c.TypeOfDriverID > 0 && c.SortOrder > 0 && c.ExcelRow > 0 && c.ExcelColumn > 0 && c.ExcelColumnFieldID > 0))
                    {
                        foreach (var itemDetail in model.CAT_DriverFeeCustomer.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeeCustomer.Remove(itemDetail);
                        foreach (var itemDetail in model.CAT_DriverFeeGroupLocation.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeeGroupLocation.Remove(itemDetail);
                        foreach (var itemDetail in model.CAT_DriverFeeGroupProduct.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeeGroupProduct.Remove(itemDetail);
                        foreach (var itemDetail in model.CAT_DriverFeePacking.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeePacking.Remove(itemDetail);
                        foreach (var itemDetail in model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeeRouting.Remove(itemDetail);

                        model.CAT_DriverFee.Remove(item);
                    }

                    List<DTOCATDriverFee_Import> lstImport = new List<DTOCATDriverFee_Import>();

                    int row = 1;
                    int col = 9;
                    if (!lstData.Any(c => !c.ExcelSuccess))
                    {
                        foreach (var item in lstData)
                        {
                            col = 9;
                            if (item.ScheduleFeeID > 0 && item.ScheduleFee > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.ScheduleFeeID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "true";
                                obj.ExprPriceFix = item.ScheduleFee.ToString();
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.OverWeightFeeID > 0 && item.OverWeightFee > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.OverWeightFeeID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "[ExIsOverWeight]";
                                obj.ExprPriceFix = item.OverWeightFee.ToString();
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.TotalJoinFeeID > 0 && item.TotalJoinFee > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.TotalJoinFeeID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "[ExTotalJoin] > 0";
                                obj.ExprPriceFix = item.TotalJoinFee.ToString();
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.TonLoadingFeeID > 0 && item.TonLoadingFee > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.TonLoadingFeeID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "[TonTransfer] > 0";
                                obj.ExprUnitPrice = item.TonLoadingFee.ToString();
                                obj.ExprQuantity = "[TonTransfer]/([TotalDriverMain] + [TotalDriverEx] + [TotalDriverLoad])";
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.TonLoadingFeeNoMainID > 0 && item.TonLoadingFeeNoMain > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.TonLoadingFeeNoMainID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "[TonTransfer] > 0";
                                obj.ExprUnitPrice = item.TonLoadingFeeNoMain.ToString();
                                obj.ExprQuantity = "[TonTransfer]/([TotalDriverEx] + [TotalDriverLoad])";
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.CBMLoadingFeeID > 0 && item.CBMLoadingFee > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.CBMLoadingFeeID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "[CBMTransfer] > 0";
                                obj.ExprUnitPrice = item.CBMLoadingFee.ToString();
                                obj.ExprQuantity = "[CBMTransfer]/([TotalDriverMain] + [TotalDriverEx] + [TotalDriverLoad])";
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.CBMLoadingFeeNoMainID > 0 && item.CBMLoadingFeeNoMain > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.CBMLoadingFeeNoMainID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "[CBMTransfer] > 0";
                                obj.ExprUnitPrice = item.CBMLoadingFeeNoMain.ToString();
                                obj.ExprQuantity = "[CBMTransfer]/([TotalDriverEx] + [TotalDriverLoad])";
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.TotalDayOutFeeID > 0 && item.TotalDayOutFee > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.TotalDayOutFeeID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "[ExTotalDayOut] = 1";
                                obj.ExprPriceFix = item.TotalDayOutFee.ToString();
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.TotalDayOutMoreFeeID > 0 && item.TotalDayOutMoreFee > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.TotalDayOutMoreFeeID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "[ExTotalDayOut] > 1";
                                obj.ExprPriceFix = item.TotalDayOutMoreFee.ToString();
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.OverNightFeeID > 0 && item.OverNightFee > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.OverNightFeeID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "[ExIsOverNight]";
                                obj.ExprPriceFix = item.OverNightFee.ToString();
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.OtherExFeeID > 0 && item.OtherExFee > 0)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = item.OtherExFeeID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                obj.ExprInput = "AND([TotalDriverMain] = 1,[TotalDriverEx] = 0,[TotalDriverLoad] = 0)";
                                obj.ExprPriceFix = item.OtherExFee.ToString();
                                obj.SortOrder = item.Sort;
                                obj.ExcelRow = row;
                                obj.ExcelColumn = col;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFee_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }
                            col++;

                            if (item.ConFeeID > 0)
                            {
                                if (item.Con20FeeID > 0 && item.Con20Fee > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = item.ConFeeID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                    obj.ExprInput = "[TotalPacking] = 1";
                                    obj.SortOrder = item.Sort;
                                    obj.ExcelRow = row;
                                    obj.ExcelColumn = col;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFee_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = item.Con20FeeID;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.Con20Fee.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }
                                col++;

                                if (item.Con40FeeID > 0 && item.Con40Fee > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = item.ConFeeID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                    obj.ExprInput = "[TotalPacking] = 1";
                                    obj.SortOrder = item.Sort;
                                    obj.ExcelRow = row;
                                    obj.ExcelColumn = col;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFee_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = item.Con40FeeID;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.Con40Fee.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }
                                col++;

                                if (item.ConFeeDoubleID > 0 && item.ConFeeDouble > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = item.ConFeeID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                    obj.ExprInput = "[TotalPacking] = 2";
                                    obj.SortOrder = item.Sort;
                                    obj.ExcelRow = row;
                                    obj.ExcelColumn = col;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFee_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = item.ConFeeDoubleID;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.ConFeeDouble.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }
                                col++;
                            }

                            if (item.ConExFeeID > 0)
                            {
                                if (item.Con20ExFeeID > 0 && item.Con20ExFee > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = item.ConExFeeID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                    obj.ExprInput = "[TotalPacking] = 1";
                                    obj.SortOrder = item.Sort;
                                    obj.ExcelRow = row;
                                    obj.ExcelColumn = col;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFee_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = item.Con20ExFeeID;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.Con20ExFee.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }
                                col++;

                                if (item.Con40ExFeeID > 0 && item.Con40ExFee > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = item.ConExFeeID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                    obj.ExprInput = "[TotalPacking] = 1";
                                    obj.SortOrder = item.Sort;
                                    obj.ExcelRow = row;
                                    obj.ExcelColumn = col;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFee_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = item.Con40ExFeeID;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.Con40ExFee.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }
                                col++;

                                if (item.ConExFeeDoubleID > 0 && item.ConExFeeDouble > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = item.ConExFeeID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = sFeeName + " " + row.ToString() + "_" + col.ToString();
                                    obj.ExprInput = "[TotalPacking] = 2";
                                    obj.SortOrder = item.Sort;
                                    obj.ExcelRow = row;
                                    obj.ExcelColumn = col;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFee_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = item.ConExFeeDoubleID;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.ConExFeeDouble.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }
                                col++;
                            }
                            row++;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void FLMDriverFee_Import_Detail(CAT_DriverFee obj, DTOCATDriverFee_Import item)
        {
            if (item.GroupOfLocationID > 0)
            {
                CAT_DriverFeeGroupLocation objDetail = new CAT_DriverFeeGroupLocation();
                objDetail.CreatedBy = Account.UserName;
                objDetail.CreatedDate = DateTime.Now;
                objDetail.GroupOfLocationID = item.GroupOfLocationID;
                obj.CAT_DriverFeeGroupLocation.Add(objDetail);
            }
            if (item.CustomerID > 0)
            {
                CAT_DriverFeeCustomer objDetail = new CAT_DriverFeeCustomer();
                objDetail.CreatedBy = Account.UserName;
                objDetail.CreatedDate = DateTime.Now;
                objDetail.CustomerID = item.CustomerID;
                obj.CAT_DriverFeeCustomer.Add(objDetail);
            }
        }

        public DTOCATDriverFee_Export_Data FLMDriverFee_Export(int contractID)
        {
            try
            {
                DTOCATDriverFee_Export_Data result = new DTOCATDriverFee_Export_Data();
                result.lstData = new List<DTOCATDriverFee_Export>();
                result.lstTypeOfDriverFee = new List<DTOCATDriverFee_Export_TypeOfDriverFee>();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverFee.Where(c => c.ContractID == contractID && c.DriverFeeSumID == -(int)SYSVarType.DriverFeeSumSchedule && c.TypeOfDriverID > 0 && c.ExcelColumn > 0 && c.ExcelColumnFieldID > 0 && c.ExcelRow > 0 && c.SortOrder > 0).Select(c => new
                    {
                        c.ID,
                        c.FeeName,
                        c.TypeOfDriverFeeID,
                        TypeOfDriverFeeCode = c.CAT_TypeOfDriverFee.Code,
                        TypeOfDriverFeeName = c.CAT_TypeOfDriverFee.TypeName,
                        c.TypeOfDriverID,
                        TypeOfDriverCode = c.SYS_Var1.Code,
                        TypeOfDriverName = c.SYS_Var1.ValueOfVar,
                        c.ExprPriceFix,
                        c.ExprUnitPrice,
                        c.ExprQuantity,
                        c.SortOrder,
                        c.ExcelColumn,
                        c.ExcelRow,
                        c.ExcelColumnFieldID,
                        ItemCustomer = c.CAT_DriverFeeCustomer.FirstOrDefault(),
                        ItemGroupLocation = c.CAT_DriverFeeGroupLocation.FirstOrDefault(),
                        ItemPacking = c.CAT_DriverFeePacking.FirstOrDefault()
                    }).ToList();

                    // Header
                    for (int i = 9; i <= 19; i++)
                    {
                        DTOCATDriverFee_Export_TypeOfDriverFee itemFee = new DTOCATDriverFee_Export_TypeOfDriverFee();
                        itemFee.ExcelColumn = i;
                        var itemCol = query.FirstOrDefault(c => c.ExcelColumnFieldID > 0 && c.ExcelColumn == i);
                        if (itemCol != null)
                        {
                            itemFee.ExcelColumnCode = itemCol.TypeOfDriverFeeCode;
                            itemFee.ExcelColumnFieldID = itemCol.ExcelColumnFieldID.Value;
                        }
                        result.lstTypeOfDriverFee.Add(itemFee);
                    }

                    int col = 9;
                    foreach (var itemGroup in query.GroupBy(c => c.ExcelRow))
                    {
                        DTOCATDriverFee_Export item = new DTOCATDriverFee_Export();
                        item.TypeOfDriverID = itemGroup.FirstOrDefault().TypeOfDriverID.Value;
                        item.TypeOfDriverCode = itemGroup.FirstOrDefault().TypeOfDriverCode;
                        item.TypeOfDriverName = itemGroup.FirstOrDefault().TypeOfDriverName;
                        item.Sort = itemGroup.FirstOrDefault().SortOrder.Value;
                        item.lstValue = new List<DTOCATDriverFee_Export_Value>();
                        result.lstData.Add(item);

                        var customer = itemGroup.FirstOrDefault(c => c.ItemCustomer != null);
                        if (customer != null)
                        {
                            item.CustomerID = customer.ItemCustomer.CustomerID;
                            item.CustomerCode = customer.ItemCustomer.CUS_Customer.Code;
                            item.CustomerName = customer.ItemCustomer.CUS_Customer.CustomerName;
                        }

                        var groupLocation = itemGroup.FirstOrDefault(c => c.ItemGroupLocation != null);
                        if (groupLocation != null)
                        {
                            item.GroupOfLocationID = groupLocation.ItemGroupLocation.GroupOfLocationID;
                            item.GroupOfLocationCode = groupLocation.ItemGroupLocation.CAT_GroupOfLocation.Code;
                            item.GroupOfLocationName = groupLocation.ItemGroupLocation.CAT_GroupOfLocation.GroupName;
                        }

                        #region Detail
                        // Lương chuyến
                        col = 9;
                        var objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprPriceFix));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprPriceFix);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Quá tải
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprPriceFix));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprPriceFix);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Kết hợp
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprPriceFix));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprPriceFix);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Bốc xếp tấn
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprUnitPrice));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprUnitPrice);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Bốc xếp tấn ko tài xế
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprUnitPrice));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprUnitPrice);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Bốc xếp khối
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprUnitPrice));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprUnitPrice);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Bốc xếp khối ko tài xế
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprUnitPrice));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprUnitPrice);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Đi tỉnh 1 ngày
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprPriceFix));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprPriceFix);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Đi tỉnh > 1 ngày
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprPriceFix));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprPriceFix);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Ôm hàng
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprPriceFix));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprPriceFix);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Không phụ
                        col++;
                        objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0 && !string.IsNullOrEmpty(c.ExprPriceFix));
                        if (objCol != null)
                        {
                            DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                            itemValue.ExcelRow = itemGroup.Key.Value;
                            itemValue.ExcelColumn = col;
                            itemValue.ExcelValue = 0;
                            try
                            {
                                itemValue.ExcelValue = Convert.ToDecimal(objCol.ExprPriceFix);
                            }
                            catch { }
                            item.lstValue.Add(itemValue);
                        }

                        // Container
                        for (col = 18; col <= 23; col++)
                        {
                            objCol = itemGroup.FirstOrDefault(c => c.ExcelColumn == col && c.ExcelColumnFieldID > 0);
                            if (objCol != null)
                            {
                                DTOCATDriverFee_Export_Value itemValue = new DTOCATDriverFee_Export_Value();
                                itemValue.ExcelRow = itemGroup.Key.Value;
                                itemValue.ExcelColumn = col;
                                itemValue.ExcelValue = 0;
                                try
                                {
                                    if (objCol.ItemPacking != null)
                                        itemValue.ExcelValue = Convert.ToDecimal(objCol.ItemPacking.ExprPrice);
                                }
                                catch { }
                                item.lstValue.Add(itemValue);
                            }
                        }
                        #endregion
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATDriverFee_Import_Data FLMDriverFee_Import_Data()
        {
            try
            {
                DTOCATDriverFee_Import_Data result = new DTOCATDriverFee_Import_Data();
                using (var model = new DataEntities())
                {
                    result.lstContainer = new List<DTOCATDriverFee_Import_Common>();
                    result.lstCustomer = new List<DTOCATDriverFee_Import_Common>();
                    result.lstGroupOfLocation = new List<DTOCATDriverFee_Import_Common>();
                    result.lstTypeOfDriver = new List<DTOCATDriverFee_Import_Common>();
                    result.lstTypeOfDriverFee = new List<DTOCATDriverFee_Import_Common>();
                    result.lstDriver = new List<DTOCATDriverFee_Import_Common>();
                    result.lstVehicle = new List<DTOCATDriverFee_Import_Common>();
                    result.lstGroupOfTrouble = new List<DTOCATDriverFee_Import_Common>();

                    #region Lấy thiết lập trouble
                    var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                    var orginal = model.CAT_GroupOfTrouble.Where(c => c.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleDI).Select(c => new DTOCATSYSCustomerTrouble
                    {
                        TroubleID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        CostValue = 0,
                        IsUse = false,
                    }).ToList();
                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var objSetting = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objSetting != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(objSetting.Setting);
                    foreach (var item in orginal)
                    {
                        var check = lst.FirstOrDefault(c => c.TroubleID == item.TroubleID);
                        if (check != null)
                        {
                            item.IsUse = true;
                            item.CostValue = check.CostValue;
                        }
                    }

                    result.lstGroupOfTrouble = orginal.Where(c => c.IsUse).Select(c => new DTOCATDriverFee_Import_Common
                    {
                        ID = c.TroubleID,
                        Code = c.Code,
                        Name = c.Name,
                    }).ToList();
                    #endregion

                    result.lstContainer = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new DTOCATDriverFee_Import_Common
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.PackingName,
                        }).ToList();

                    result.lstCustomer = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).Select(c => new DTOCATDriverFee_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.CustomerName
                    }).ToList();

                    result.lstGroupOfLocation = model.CAT_GroupOfLocation.Select(c => new DTOCATDriverFee_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.GroupName,
                    }).ToList();

                    result.lstTypeOfDriver = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfDriver).Select(c => new DTOCATDriverFee_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.ValueOfVar,
                    }).ToList();

                    result.lstTypeOfDriverFee = model.CAT_TypeOfDriverFee.Select(c => new DTOCATDriverFee_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.TypeName
                    }).ToList();

                    result.lstDriver = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOCATDriverFee_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                    }).ToList();

                    result.lstVehicle = model.CUS_Vehicle.Where(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID > 2).Select(c => new DTOCATDriverFee_Import_Common
                    {
                        ID = c.VehicleID,
                        Code = c.CAT_Vehicle.RegNo,
                        Name = c.CAT_Vehicle.RegNo,
                    }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOCATDriverFeeTemp_Export> FLMDriverFeeTemp_Export(int contractID)
        {
            try
            {
                List<DTOCATDriverFeeTemp_Export> result = new List<DTOCATDriverFeeTemp_Export>();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverFee.Where(c => c.ContractID == contractID && c.DriverFeeSumID == -(int)SYSVarType.DriverFeeSumSchedule && c.TypeOfDriverID > 0 && c.ExcelColumn > 0 && c.ExcelColumnFieldID > 0 && c.ExcelRow > 0 && c.CAT_DriverFeeCustomer.Count > 0 && c.CAT_DriverFeeGroupLocation.Count > 0).Select(c => new
                    {
                        c.ID,
                        c.FeeName,
                        c.TypeOfDriverFeeID,
                        TypeOfDriverFeeCode = c.CAT_TypeOfDriverFee.Code,
                        TypeOfDriverFeeName = c.CAT_TypeOfDriverFee.TypeName,
                        TypeOfDriverID = c.TypeOfDriverID.Value,
                        TypeOfDriverCode = c.SYS_Var1.Code,
                        TypeOfDriverName = c.SYS_Var1.ValueOfVar,
                        c.ExprPriceFix,
                        c.ExprUnitPrice,
                        c.SortOrder,
                        c.ExcelColumn,
                        c.ExcelRow,
                        c.ExcelColumnFieldID,
                        c.ExprInput,
                        CustomerID = c.CAT_DriverFeeCustomer.FirstOrDefault().CustomerID,
                        CustomerCode = c.CAT_DriverFeeCustomer.FirstOrDefault().CUS_Customer.Code,
                        CustomerName = c.CAT_DriverFeeCustomer.FirstOrDefault().CUS_Customer.CustomerName,
                        GroupOfLocationID = c.CAT_DriverFeeGroupLocation.FirstOrDefault().GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_DriverFeeGroupLocation.FirstOrDefault().CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_DriverFeeGroupLocation.FirstOrDefault().CAT_GroupOfLocation.GroupName,
                        ItemPacking = c.CAT_DriverFeePacking.FirstOrDefault()
                    }).ToList();

                    foreach (var group in query.GroupBy(c => new
                    {
                        c.TypeOfDriverID,
                        c.TypeOfDriverName,
                        c.TypeOfDriverCode,
                        c.CustomerID,
                        c.CustomerCode,
                        c.CustomerName,
                        c.GroupOfLocationID,
                        c.GroupOfLocationCode,
                        c.GroupOfLocationName
                    }))
                    {
                        DTOCATDriverFeeTemp_Export obj = new DTOCATDriverFeeTemp_Export();
                        obj.TypeOfDriverID = group.Key.TypeOfDriverID;
                        obj.TypeOfDriverCode = group.Key.TypeOfDriverCode;
                        obj.TypeOfDriverName = group.Key.TypeOfDriverCode;
                        obj.CustomerID = group.Key.CustomerID;
                        obj.CustomerCode = group.Key.CustomerCode;
                        obj.CustomerName = group.Key.CustomerName;
                        obj.GroupOfLocationID = group.Key.GroupOfLocationID;
                        obj.GroupOfLocationCode = group.Key.GroupOfLocationCode;
                        obj.GroupOfLocationName = group.Key.GroupOfLocationName;
                        result.Add(obj);
                        foreach (var item in group)
                        {
                            decimal price = 0;
                            try
                            {
                                price = Convert.ToDecimal(item.ExprPriceFix);
                            }
                            catch { }
                            switch (item.TypeOfDriverFeeCode)
                            {
                                case "QuaTai": obj.CostOverWeight = price; break;
                                case "KetHop": obj.CostTotalJoin = price; break;
                                case "BocXep": obj.CostLoading = price; break;
                                case "DiTinh": obj.CostDayOut = price; break;
                                case "OmHang": obj.CostOverNight = price; break;
                                case "LuongChuyen": obj.CostSchedule = price; break;
                                case "LuongSanPham":
                                    if (item.ItemPacking != null)
                                    {
                                        decimal pricePacking = 0;
                                        try
                                        {
                                            pricePacking = Convert.ToDecimal(item.ItemPacking.ExprPrice);
                                        }
                                        catch { }
                                        if (item.ItemPacking.PackingID == (int)CATPackingCOCode.CO20)
                                        {
                                            if (item.ExprInput == "[PackingCode] = " + CATPackingCOCode.CO20.ToString())
                                                obj.CostMain20DC = pricePacking;
                                        }
                                        if (item.ItemPacking.PackingID == (int)CATPackingCOCode.CO40 || item.ItemPacking.PackingID == (int)CATPackingCOCode.CO40H)
                                        {
                                            if (item.ExprInput == "[PackingCode] = " + CATPackingCOCode.CO40.ToString() || item.ExprInput == "[PackingCode] = " + CATPackingCOCode.CO40H.ToString())
                                                obj.CostMain20DC = pricePacking;
                                        }
                                        if (item.ItemPacking.PackingID == (int)CATPackingCOCode.Kep)
                                        {
                                            if (item.ExprInput == "[PackingCode] = " + CATPackingCOCode.Kep.ToString())
                                                obj.CostMain20DC = pricePacking;
                                        }
                                    }
                                    break;
                                case "PhuCap":
                                    if (item.ItemPacking != null)
                                    {
                                        decimal pricePacking = 0;
                                        try
                                        {
                                            pricePacking = Convert.ToDecimal(item.ItemPacking.ExprPrice);
                                        }
                                        catch { }
                                        if (item.ItemPacking.PackingID == (int)CATPackingCOCode.CO20)
                                        {
                                            if (item.ExprInput == "[PackingCode] = " + CATPackingCOCode.CO20.ToString())
                                                obj.CostMain20DC = pricePacking;
                                        }
                                        if (item.ItemPacking.PackingID == (int)CATPackingCOCode.CO40 || item.ItemPacking.PackingID == (int)CATPackingCOCode.CO40H)
                                        {
                                            if (item.ExprInput == "[PackingCode] = " + CATPackingCOCode.CO40.ToString() || item.ExprInput == "[PackingCode] = " + CATPackingCOCode.CO40H.ToString())
                                                obj.CostMain20DC = pricePacking;
                                        }
                                        if (item.ItemPacking.PackingID == (int)CATPackingCOCode.Kep)
                                        {
                                            if (item.ExprInput == "[PackingCode] = " + CATPackingCOCode.Kep.ToString())
                                                obj.CostMain20DC = pricePacking;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMDriverFeeTemp_Import(int contractID, List<DTOCATDriverFeeTemp_Import> lstData)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in model.CAT_DriverFee.Where(c => c.ContractID == contractID && c.DriverFeeSumID == -(int)SYSVarType.DriverFeeSumSchedule && c.TypeOfDriverID > 0 && c.ExcelRow > 0 && c.ExcelColumn > 0 && c.ExcelColumnFieldID > 0))
                    {
                        foreach (var itemDetail in model.CAT_DriverFeeCustomer.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeeCustomer.Remove(itemDetail);
                        foreach (var itemDetail in model.CAT_DriverFeeGroupLocation.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeeGroupLocation.Remove(itemDetail);
                        foreach (var itemDetail in model.CAT_DriverFeeGroupProduct.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeeGroupProduct.Remove(itemDetail);
                        foreach (var itemDetail in model.CAT_DriverFeePacking.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeePacking.Remove(itemDetail);
                        foreach (var itemDetail in model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == item.ID))
                            model.CAT_DriverFeeRouting.Remove(itemDetail);

                        model.CAT_DriverFee.Remove(item);
                    }
                    if (!lstData.Any(c => !c.ExcelSuccess))
                    {
                        var lstTypeOfDriverFee = model.CAT_TypeOfDriverFee.Select(c => new
                        {
                            c.ID,
                            c.Code
                        }).ToList();

                        foreach (var item in lstData)
                        {
                            var itemSchedule = lstTypeOfDriverFee.FirstOrDefault(c => c.Code == "LuongChuyen");
                            var itemDayOut = lstTypeOfDriverFee.FirstOrDefault(c => c.Code == "DiTinh");
                            var itemTotalJoin = lstTypeOfDriverFee.FirstOrDefault(c => c.Code == "KetHop");
                            var itemOverNight = lstTypeOfDriverFee.FirstOrDefault(c => c.Code == "OmHang");
                            var itemOverWeight = lstTypeOfDriverFee.FirstOrDefault(c => c.Code == "QuaTai");
                            var itemLoading = lstTypeOfDriverFee.FirstOrDefault(c => c.Code == "BocXep");
                            var itemLuongSanPham = lstTypeOfDriverFee.FirstOrDefault(c => c.Code == "LuongSanPham");
                            var itemPhuCap = lstTypeOfDriverFee.FirstOrDefault(c => c.Code == "PhuCap");

                            if (item.CostSchedule > 0 && itemSchedule != null)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = itemSchedule.ID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = item.TypeOfDriverName + " - " + " Lương chuyến " + " - " + item.CustomerCode;
                                obj.ExprInput = "true";
                                obj.ExprPriceFix = item.CostSchedule.ToString();
                                obj.ExcelRow = 1;
                                obj.ExcelColumn = 1;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFeeTemp_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }

                            if (item.CostDayOut > 0 && itemDayOut != null)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = itemDayOut.ID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = item.TypeOfDriverName + " - " + " Đi tỉnh " + " - " + item.CustomerCode;
                                obj.ExprInput = "[ExTotalDayOut] > 0";
                                obj.ExprPriceFix = item.CostDayOut.ToString();
                                obj.ExcelRow = 1;
                                obj.ExcelColumn = 1;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFeeTemp_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }

                            if (item.CostTotalJoin > 0 && itemTotalJoin != null)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = itemTotalJoin.ID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = item.TypeOfDriverName + " - " + " Kết hợp " + " - " + item.CustomerCode;
                                obj.ExprInput = "[ExTotalJoin] > 0";
                                obj.ExprPriceFix = item.CostTotalJoin.ToString();
                                obj.ExcelRow = 1;
                                obj.ExcelColumn = 1;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFeeTemp_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }

                            if (item.CostOverNight > 0 && itemOverNight != null)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = itemOverNight.ID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = item.TypeOfDriverName + " - " + " Ôm hàng " + " - " + item.CustomerCode;
                                obj.ExprInput = "[ExIsOverNight]";
                                obj.ExprPriceFix = item.CostOverNight.ToString();
                                obj.ExcelRow = 1;
                                obj.ExcelColumn = 1;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFeeTemp_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }

                            if (item.CostOverWeight > 0 && itemOverWeight != null)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = itemOverWeight.ID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = item.TypeOfDriverName + " - " + " Quá tải " + " - " + item.CustomerCode;
                                obj.ExprInput = "[ExIsOverWeight]";
                                obj.ExprPriceFix = item.CostOverWeight.ToString();
                                obj.ExcelRow = 1;
                                obj.ExcelColumn = 1;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFeeTemp_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }

                            if (item.CostLoading > 0 && itemLoading != null)
                            {
                                CAT_DriverFee obj = new CAT_DriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractID = contractID;
                                obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                obj.TypeOfDriverFeeID = itemLoading.ID;
                                obj.TypeOfDriverID = item.TypeOfDriverID;
                                obj.FeeName = item.TypeOfDriverName + " - " + " Bốc xếp " + " - " + item.CustomerCode;
                                obj.ExprInput = "[PHTLoading]";
                                obj.ExprPriceFix = item.CostLoading.ToString();
                                obj.ExcelRow = 1;
                                obj.ExcelColumn = 1;
                                obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                FLMDriverFeeTemp_Import_Detail(obj, item);
                                model.CAT_DriverFee.Add(obj);
                            }

                            #region Lương sản phẩm
                            if ((item.CostMain20DC > 0 || item.CostMain40DC > 0 || item.CostMainDouble > 0) && itemLuongSanPham != null)
                            {
                                if (item.CostMain20DC > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = itemLuongSanPham.ID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = item.TypeOfDriverName + " - " + " Lương SP 20DC " + " - " + item.CustomerCode;
                                    obj.ExprInput = "[PackingCode] = " + CATPackingCOCode.CO20.ToString();
                                    obj.ExcelRow = 1;
                                    obj.ExcelColumn = 1;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFeeTemp_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = (int)CATPackingCOCode.CO20;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.CostMain20DC.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }

                                if (item.CostMain40DC > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = itemLuongSanPham.ID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = item.TypeOfDriverName + " - " + " Lương SP 40DC " + " - " + item.CustomerCode;
                                    obj.ExprInput = "[PackingCode] = " + CATPackingCOCode.CO40.ToString();
                                    obj.ExcelRow = 1;
                                    obj.ExcelColumn = 1;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFeeTemp_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = (int)CATPackingCOCode.CO40;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.CostMain40DC.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }

                                if (item.CostMainDouble > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = itemLuongSanPham.ID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = item.TypeOfDriverName + " - " + " Lương SP Kẹp " + " - " + item.CustomerCode;
                                    obj.ExprInput = "[PackingCode] = " + CATPackingCOCode.Kep.ToString();
                                    obj.ExcelRow = 1;
                                    obj.ExcelColumn = 1;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFeeTemp_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = (int)CATPackingCOCode.CO20;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.CostMainDouble.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }
                            }
                            #endregion

                            #region Lương phụ cấp
                            if ((item.CostEx20DC > 0 || item.CostEx40DC > 0 || item.CostExDouble > 0) && itemPhuCap != null)
                            {
                                if (item.CostEx20DC > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = itemPhuCap.ID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = item.TypeOfDriverName + " - " + " Lương phụ cấp 20DC " + " - " + item.CustomerCode;
                                    obj.ExprInput = "[PackingCode] = " + CATPackingCOCode.CO20.ToString();
                                    obj.ExcelRow = 1;
                                    obj.ExcelColumn = 1;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFeeTemp_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = (int)CATPackingCOCode.CO20;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.CostEx20DC.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }

                                if (item.CostEx40DC > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = itemPhuCap.ID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = item.TypeOfDriverName + " - " + " Lương phụ cấp 40DC " + " - " + item.CustomerCode;
                                    obj.ExprInput = "[PackingCode] = " + CATPackingCOCode.CO40.ToString();
                                    obj.ExcelRow = 1;
                                    obj.ExcelColumn = 1;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFeeTemp_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = (int)CATPackingCOCode.CO40;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.CostEx40DC.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }

                                if (item.CostExDouble > 0)
                                {
                                    CAT_DriverFee obj = new CAT_DriverFee();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractID = contractID;
                                    obj.DriverFeeSumID = -(int)SYSVarType.DriverFeeSumSchedule;
                                    obj.TypeOfDriverFeeID = itemPhuCap.ID;
                                    obj.TypeOfDriverID = item.TypeOfDriverID;
                                    obj.FeeName = item.TypeOfDriverName + " - " + " Lương phụ cấp Kẹp " + " - " + item.CustomerCode;
                                    obj.ExprInput = "[PackingCode] = " + CATPackingCOCode.Kep.ToString();
                                    obj.ExcelRow = 1;
                                    obj.ExcelColumn = 1;
                                    obj.ExcelColumnFieldID = obj.TypeOfDriverFeeID;
                                    FLMDriverFeeTemp_Import_Detail(obj, item);

                                    CAT_DriverFeePacking objPacking = new CAT_DriverFeePacking();
                                    objPacking.CreatedBy = Account.UserName;
                                    objPacking.CreatedDate = DateTime.Now;
                                    objPacking.PackingID = (int)CATPackingCOCode.CO20;
                                    objPacking.ExprQuantity = "1";
                                    objPacking.ExprPrice = item.CostExDouble.ToString();
                                    obj.CAT_DriverFeePacking.Add(objPacking);

                                    model.CAT_DriverFee.Add(obj);
                                }
                            }
                            #endregion
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void FLMDriverFeeTemp_Import_Detail(CAT_DriverFee obj, DTOCATDriverFeeTemp_Import item)
        {
            if (item.GroupOfLocationID > 0)
            {
                CAT_DriverFeeGroupLocation objDetail = new CAT_DriverFeeGroupLocation();
                objDetail.CreatedBy = Account.UserName;
                objDetail.CreatedDate = DateTime.Now;
                objDetail.GroupOfLocationID = item.GroupOfLocationID;
                obj.CAT_DriverFeeGroupLocation.Add(objDetail);
            }
            if (item.CustomerID > 0)
            {
                CAT_DriverFeeCustomer objDetail = new CAT_DriverFeeCustomer();
                objDetail.CreatedBy = Account.UserName;
                objDetail.CreatedDate = DateTime.Now;
                objDetail.CustomerID = item.CustomerID;
                obj.CAT_DriverFeeCustomer.Add(objDetail);
            }
        }

        #endregion

        #region Excel
        public void Tractor_Import(List<DTOFLMTractorExcel> lst)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int iTypeOfTractor = -(int)SYSVarType.TypeOfVehicleTractor;
                    int iTypeOfAssetTractor = -(int)SYSVarType.TypeOfAssetTractor;

                    foreach (var item in lst.Where(c => c.ExcelSuccess))
                    {

                        if (model.CAT_Vehicle.Where(c => c.ID != item.VehicleID && c.RegNo.ToUpper().Trim() == item.RegNo.ToUpper().Trim()).Count() > 0)
                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                        else
                        {
                            #region luu Cat Vehicle
                            var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                            if (obj == null)
                            {
                                obj = new CAT_Vehicle();
                                obj.TypeOfVehicleID = iTypeOfTractor;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.IsOwn = true;
                                obj.RegNo = item.RegNo.ToUpper().Trim();
                                model.CAT_Vehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }

                            obj.Note = item.Note;
                            obj.MaxWeight = item.MaxWeight;
                            obj.MaxCapacity = item.MaxCapacity;
                            obj.RegWeight = item.RegWeight;
                            obj.Lat = item.Lat;
                            obj.Lng = item.Lng;
                            obj.GroupOfVehicleID = item.GroupOfVehicleID;
                            obj.CurrentRomoocID = item.CurrentRomoocID;
                            obj.DriverID = item.DriverID;
                            obj.AssistantID = item.AssistantID;
                            obj.EmptyWeight = item.EmptyWeight;
                            obj.TempMax = item.TempMax ?? null;
                            obj.TempMin = item.TempMin ?? null;
                            if (item.DriverID > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == item.DriverID.Value);
                                if (driver != null)
                                {
                                    obj.DriverName = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                                    obj.Cellphone = driver.CAT_Driver.Cellphone;
                                }
                            }
                            #endregion

                            #region luu flm asset
                            var detail = model.FLM_Asset.FirstOrDefault(c => c.ID == item.ID);
                            if (detail == null)
                            {
                                detail = new FLM_Asset();
                                detail.CAT_Vehicle = obj;
                                detail.CreatedBy = Account.UserName;
                                detail.CreatedDate = DateTime.Now;
                                detail.SYSCustomerID = Account.SYSCustomerID;
                                detail.TypeOfAssetID = iTypeOfAssetTractor;
                                model.FLM_Asset.Add(detail);
                            }
                            else
                            {
                                detail.ModifiedBy = Account.UserName;
                                detail.ModifiedDate = DateTime.Now;
                            }
                            detail.YearOfProduction = item.YearOfProduction;
                            detail.Manufactor = item.Manufactor;
                            detail.BaseValue = item.BaseValue;
                            detail.CurrentValue = item.CurrentValue;
                            detail.DepreciationPeriod = item.DepreciationPeriod;
                            detail.DepreciationStart = item.DepreciationStart;
                            detail.Specification = item.Specification;
                            detail.RentID = item.RentID;
                            detail.IsDisposal = item.IsDisposal;
                            detail.WarrantyEnd = item.WarrantyEnd;
                            detail.WarrantyPeriod = item.WarrantyPeriod;

                            if (detail.RentID == null)
                                detail.IsRent = false;
                            else
                                detail.IsRent = true;
                            #endregion

                            #region Lưu vào cus
                            var cus = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID == obj.ID);
                            if (cus == null)
                            {
                                cus = new CUS_Vehicle();
                                cus.CreatedBy = Account.UserName;
                                cus.CreatedDate = DateTime.Now;
                                cus.CustomerID = Account.SYSCustomerID;
                                cus.CAT_Vehicle = obj;
                                model.CUS_Vehicle.Add(cus);
                            }
                            #endregion

                            #region lưu định mức
                            if (item.lstConsumption != null)
                            {
                                foreach (var Cons in item.lstConsumption)
                                {
                                    var objCons = model.FLM_MaterialQuota.FirstOrDefault(c => c.VehicleID == Cons.VehicleID && c.MaterialID == Cons.MaterialID);
                                    if (objCons == null)
                                    {
                                        objCons = new FLM_MaterialQuota();
                                        objCons.CreatedBy = Account.UserName;
                                        objCons.CreatedDate = DateTime.Now;
                                        objCons.MaterialID = Cons.MaterialID;
                                        objCons.FLM_Asset = detail;
                                        model.FLM_MaterialQuota.Add(objCons);
                                    }
                                    else
                                    {
                                        objCons.ModifiedBy = Account.UserName;
                                        objCons.ModifiedDate = DateTime.Now;
                                    }
                                    objCons.QuantityPerKM = Cons.QuantityPerKM;
                                }
                                List<int> lstConsNew = new List<int>();

                                lstConsNew = item.lstConsumption.Select(c => c.MaterialID).ToList();
                                var lstConsOld = model.FLM_MaterialQuota.Where(c => c.VehicleID == item.ID && !lstConsNew.Contains(c.MaterialID));
                                if (lstConsOld != null && lstConsOld.Count() > 0)
                                    model.FLM_MaterialQuota.RemoveRange(lstConsOld);
                            }



                            #endregion
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMTractorExcel> Tractor_Export()
        {
            try
            {
                List<DTOFLMTractorExcel> result = new List<DTOFLMTractorExcel>();
                using (var model = new DataEntities())
                {
                    int iTypeOfAssetTractor = -(int)SYSVarType.TypeOfAssetTractor;
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iTypeOfAssetTractor).Select(c => new DTOFLMTractorExcel
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        GroupOfVehicleCode = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.Code : string.Empty,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                        CurrentRomooc = c.CAT_Vehicle.CurrentRomoocID.HasValue ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                        DriverID = c.CAT_Vehicle.DriverID,
                        DriverCode = c.CAT_Vehicle.DriverID > 0 ? c.CAT_Vehicle.FLM_Driver.Code : string.Empty,
                        AssistantID = c.CAT_Vehicle.AssistantID,
                        AssistantCode = c.CAT_Vehicle.AssistantID > 0 ? c.CAT_Vehicle.FLM_Driver1.Code : string.Empty,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).ToList();
                    foreach (var item in result)
                    {
                        item.lstConsumption = model.FLM_MaterialQuota.Where(c => c.VehicleID == item.ID).Select(c => new DTOFLMMaterialQuota
                        {
                            ID = c.ID,
                            QuantityPerKM = c.QuantityPerKM,
                            VehicleID = c.VehicleID,
                            MaterialID = c.MaterialID,
                            MaterialCode = c.FLM_Material.Code,
                            MaterialName = c.FLM_Material.MaterialName,
                            GroupOfMaterialName = c.FLM_Material.CAT_GroupOfMaterial.GroupName,
                            IsFuel = c.FLM_Material.CAT_GroupOfMaterial.IsFuel
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATVehicle_AllList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Vehicle.Select(c => new CATVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        TypeOfVehicleID = c.TypeOfVehicleID

                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATGroupOfVehicle_AllList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfVehicle.Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName

                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATGroupOfVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMAsset> VehicleOwn_List()
        {
            try
            {
                List<DTOFLMAsset> result = new List<DTOFLMAsset>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc)).Select(c => new DTOFLMAsset
                    {
                        ID = c.ID,
                        Code = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : c.RomoocID.HasValue ? c.CAT_Romooc.RegNo : string.Empty,
                        TypeOfAssetID = c.TypeOfAssetID,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RomoocID = c.RomoocID.Value,
                        RomoocWeight = c.RomoocID.HasValue ? c.CAT_Romooc.MaxWeight : null
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMRomoocExcel> Romooc_Export()
        {
            try
            {
                List<DTOFLMRomoocExcel> result = new List<DTOFLMRomoocExcel>();
                using (var model = new DataEntities())
                {
                    int iTypeOfAssetRomooc = -(int)SYSVarType.TypeOfAssetRomooc;
                    result = model.FLM_Asset.Where(c => c.RomoocID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iTypeOfAssetRomooc).Select(c => new DTOFLMRomoocExcel
                    {
                        ID = c.ID,
                        RomoocID = c.RomoocID,
                        GroupOfRomoocID = c.CAT_Romooc.GroupOfRomoocID,
                        GroupOfRomoocName = c.CAT_Romooc.GroupOfRomoocID.HasValue ? c.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty,
                        RegCapacity = c.CAT_Romooc.RegCapacity,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RegNo = c.CAT_Romooc.RegNo,
                        IsOwn = c.CAT_Romooc.IsOwn,
                        CurrentVendorID = c.CAT_Romooc.CurrentVendorID,
                        NoOfDelivery = c.CAT_Romooc.NoOfDelivery,
                        Lat = c.CAT_Romooc.Lat,
                        Lng = c.CAT_Romooc.Lng,
                        //ContainerID = c.CAT_Romooc.ContainerID,
                        BiddingID = c.CAT_Romooc.BiddingID,
                        MaxWeight = c.CAT_Romooc.MaxWeight,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Romooc_Import(List<DTOFLMRomoocExcel> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst.Where(c => c.ExcelSuccess))
                    {
                        item.RegNo = item.RegNo.ToUpper().Trim();
                        if (model.CAT_Romooc.Where(c => c.ID != item.RomoocID && c.RegNo.ToUpper().Trim() == item.RegNo).Count() > 0)
                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                        else
                        {
                            #region luu cat
                            var obj = model.CAT_Romooc.FirstOrDefault(c => c.ID == item.RomoocID);
                            if (obj == null)
                            {
                                obj = new CAT_Romooc();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.IsOwn = true;
                                model.CAT_Romooc.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.RegNo = item.RegNo;
                            obj.IsOwn = item.IsOwn;
                            obj.RegCapacity = item.RegCapacity;
                            obj.MaxWeight = item.MaxWeight;
                            obj.NoOfDelivery = item.NoOfDelivery;
                            obj.Lat = item.Lat;
                            obj.Lng = item.Lng;
                            obj.GroupOfRomoocID = item.GroupOfRomoocID;
                            obj.BiddingID = item.BiddingID;
                            #endregion

                            #region luu flm
                            var detail = model.FLM_Asset.FirstOrDefault(c => c.ID == item.ID);
                            if (detail == null)
                            {
                                detail = new FLM_Asset();
                                detail.CAT_Romooc = obj;
                                detail.CreatedBy = Account.UserName;
                                detail.CreatedDate = DateTime.Now;
                                detail.SYSCustomerID = Account.SYSCustomerID;
                                detail.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetRomooc;
                                model.FLM_Asset.Add(detail);
                            }
                            else
                            {
                                detail.ModifiedBy = Account.UserName;
                                detail.ModifiedDate = DateTime.Now;
                            }
                            detail.YearOfProduction = item.YearOfProduction;
                            detail.Manufactor = item.Manufactor;
                            detail.BaseValue = item.BaseValue;
                            detail.CurrentValue = item.CurrentValue;
                            detail.DepreciationPeriod = item.DepreciationPeriod;
                            detail.DepreciationStart = item.DepreciationStart;
                            detail.Specification = item.Specification;
                            detail.RentID = item.RentID;
                            detail.WarrantyEnd = item.WarrantyEnd;
                            detail.WarrantyPeriod = item.WarrantyPeriod;

                            if (detail.RentID == null)
                                detail.IsRent = false;
                            else
                                detail.IsRent = true;
                            #endregion

                            #region Lưu vào cus
                            var cus = model.CUS_Romooc.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.RomoocID == obj.ID);
                            if (cus == null)
                            {
                                cus = new CUS_Romooc();
                                cus.CreatedBy = Account.UserName;
                                cus.CreatedDate = DateTime.Now;
                                cus.CustomerID = Account.SYSCustomerID;
                                cus.CAT_Romooc = obj;
                                model.CUS_Romooc.Add(cus);
                            }
                            #endregion
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMEquipmentExcel> Eqm_Export()
        {
            try
            {
                List<DTOFLMEquipmentExcel> result = new List<DTOFLMEquipmentExcel>();
                using (var model = new DataEntities())
                {
                    int iTypeOfAssetEquipment = -(int)SYSVarType.TypeOfAssetEquipment;
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iTypeOfAssetEquipment).Select(c => new DTOFLMEquipmentExcel
                    {
                        ID = c.ID,
                        VehicleID = null,
                        ContainerID = null,
                        RomoocID = null,
                        StockID = null,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        TypeOfAssetID = c.TypeOfAssetID,
                        Code = c.Code,
                        Name = c.Name,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RentName = c.CUS_Customer.CustomerName,
                        SYSCustomerID = c.SYSCustomerID,
                        GroupOfEquipmentID = c.GroupOfEquipmentID,
                        GroupOfEquipmentName = c.CAT_GroupOfEquipment.GroupName,
                        IsDisposal = c.IsDisposal,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        CurrentLocation = string.Empty,
                        AssetRomoocID = null,
                        AssetTractorID = null,
                        AssetTruckID = null,
                    }).ToList();
                    foreach (var item in result)
                    {
                        var obj = model.FLM_TransferHistory.Where(c => c.AssetOwnID == item.ID && c.IsCurrent == true).FirstOrDefault();
                        if (obj != null)
                        {

                            if (obj.AssetToID.HasValue)
                            {
                                if (obj.FLM_Asset2.VehicleID.HasValue)
                                {
                                    item.CurrentLocation = obj.FLM_Asset2.CAT_Vehicle.RegNo;
                                    if (obj.FLM_Asset2.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)
                                        item.AssetTruckID = obj.AssetToID.Value;
                                    else item.AssetTractorID = obj.AssetToID.Value;
                                }
                                else if (obj.FLM_Asset2.RomoocID.HasValue)
                                {
                                    item.CurrentLocation = obj.FLM_Asset2.CAT_Romooc.RegNo;
                                    item.AssetRomoocID = obj.AssetToID.Value;
                                }
                                //else if (obj.FLM_Asset2.ContainerID.HasValue) item.CurrentLocation = obj.FLM_Asset2.CAT_Container.ContainerNo;
                            }
                            else if (obj.StockID.HasValue) { item.CurrentLocation = obj.FLM_Stock.Code; item.StockID = obj.StockID; }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Eqm_Import(List<DTOFLMEquipmentExcel> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst.Where(c => c.ExcelSuccess))
                    {
                        if (model.FLM_Asset.Where(c => c.ID != item.ID && c.Code.ToLower() == item.Code.ToLower()).Count() > 0)
                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                        else
                        {
                            #region lưu vào FLM_Asset
                            var obj = model.FLM_Asset.Where(c => c.ID == item.ID).FirstOrDefault();
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            else
                            {
                                obj = new FLM_Asset();
                                obj.SYSCustomerID = Account.SYSCustomerID;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetEquipment;
                                model.FLM_Asset.Add(obj);
                            }
                            obj.VehicleID = null;
                            obj.RomoocID = null;
                            obj.ContainerID = null;
                            obj.BaseValue = item.BaseValue;
                            obj.Code = item.Code;
                            obj.Name = item.Name;
                            obj.CurrentValue = item.CurrentValue;
                            obj.DepreciationPeriod = item.DepreciationPeriod;
                            obj.DepreciationStart = item.DepreciationStart;
                            obj.GroupOfEquipmentID = item.GroupOfEquipmentID;
                            obj.IsDisposal = item.IsDisposal;
                            obj.IsRent = item.IsRent;
                            obj.Manufactor = item.Manufactor;
                            obj.RentID = item.RentID;
                            obj.WarrantyEnd = item.WarrantyEnd;
                            obj.WarrantyPeriod = item.WarrantyPeriod;
                            obj.YearOfProduction = item.YearOfProduction;
                            obj.Specification = item.Specification;
                            #endregion

                            #region Phát sinh lịch sử chuyển thiết bị cho thiết bị mới
                            if (obj.ID < 1)
                            {
                                #region lưu FLM Receipt
                                var objReceipt = new FLM_Receipt();
                                objReceipt.Code = Receipt_GetLastCode(model);
                                objReceipt.CreatedDate = DateTime.Now;
                                objReceipt.CreatedBy = Account.UserName;
                                objReceipt.DateReceipt = DateTime.Now;
                                objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptTranfer;
                                objReceipt.SYSCustomerID = Account.SYSCustomerID;
                                model.FLM_Receipt.Add(objReceipt);
                                #endregion

                                #region lưu FLM TransferHistory
                                var objTranferHistory = new FLM_TransferHistory();
                                objTranferHistory.CreatedBy = Account.UserName;
                                objTranferHistory.CreatedDate = DateTime.Now;
                                objTranferHistory.AssetFromID = null;
                                objTranferHistory.SYSCustomerID = Account.SYSCustomerID;
                                if (item.AssetTruckID.HasValue)
                                {
                                    objTranferHistory.AssetToID = item.AssetTruckID.Value;
                                }
                                else if (item.AssetTractorID.HasValue)
                                {
                                    objTranferHistory.AssetToID = item.AssetTractorID.Value;
                                }
                                else if (item.AssetRomoocID.HasValue)
                                {
                                    objTranferHistory.AssetToID = item.AssetRomoocID.Value;
                                }
                                else if (item.StockID.HasValue)
                                {
                                    objTranferHistory.AssetToID = item.StockID.Value;
                                }
                                objTranferHistory.DateTranfer = DateTime.Now;
                                objTranferHistory.IsCurrent = true;
                                objTranferHistory.Amount = item.CurrentValue.HasValue ? (decimal)item.CurrentValue.Value : 0;

                                objTranferHistory.FLM_Receipt = objReceipt;
                                objTranferHistory.FLM_Asset1 = obj;

                                model.FLM_TransferHistory.Add(objTranferHistory);
                                #endregion
                            }
                            #endregion

                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMAsset> EquipmentOwn_List()
        {
            try
            {
                List<DTOFLMAsset> result = new List<DTOFLMAsset>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetEquipment).Select(c => new DTOFLMAsset
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region FLMDriverTimeSheet
        public List<DTOFLMVehicle> FLMDriverTimeSheet_VehicleList()
        {
            try
            {
                var result = new List<DTOFLMVehicle>();
                using (var model = new DataEntities())
                {
                    int iTrk = -(int)SYSVarType.TypeOfAssetTruck;
                    int iTrr = -(int)SYSVarType.TypeOfAssetTractor;

                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == iTrk || c.TypeOfAssetID == iTrr)).Select(c => new DTOFLMVehicle
                    {
                        ID = c.ID,
                        AssetID = c.ID,
                        RegNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                        TypeOfVehicleName = c.SYS_Var.ValueOfVar,
                        GroupOfVehicleID = -1,
                        GroupOfVehicleName = "",
                        TypeOfAssetID = c.TypeOfAssetID == iTrk ? 1 : 2
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMAssetTimeSheet> FLMDriverTimeSheet_VehicleTimeList(DateTime dateFrom, DateTime dateTo)
        {
            try
            {
                var result = new List<DTOFLMAssetTimeSheet>();
                var iCOTOMaster = -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster;
                var iDITOMaster = -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster;

                dateFrom = dateFrom.Date;
                dateTo = dateTo.Date;

                using (var model = new DataEntities())
                {
                    //typeID: 1 chuyen xe tai, 2 chuyen xe cong, 0 la bảo trì đăng kiểm sửa chữa
                    var query = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.DateFrom >= dateFrom && c.DateFrom <= dateTo).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = c.AssetID,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        StatusOfAssetTimeSheetName = c.SYS_Var.ValueOfVar,
                        StatusOfAssetTimeSheetID = c.StatusOfAssetTimeSheetID,
                        TypeOfAssetTimeSheetID = c.TypeOfAssetTimeSheetID,
                        ReferID = c.ReferID,
                        TypeID = c.StatusOfAssetTimeSheetID == iDITOMaster ? 1 : c.StatusOfAssetTimeSheetID == iCOTOMaster ? 2 : 0,
                        Note = ""
                    }).ToList();

                    var queryDITO = model.OPS_DITOMaster.Where(c => c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered && c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.ETD.Value >= dateFrom && c.ETD.Value < dateTo).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = c.VehicleID.Value,
                        DateFrom = c.ETD.Value,
                        DateTo = c.ETA.Value,
                        StatusOfAssetTimeSheetName = "",
                        TypeID = c.StatusOfDITOMasterID,
                        Note = ""
                    }).ToList();
                    var queryCOTO = model.OPS_COTOMaster.Where(c => c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.ETD >= dateFrom && c.ETD < dateTo).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = c.VehicleID.Value,
                        DateFrom = c.ETD,
                        DateTo = c.ETA,
                        StatusOfAssetTimeSheetName = "",
                        TypeID = c.StatusOfCOTOMasterID,
                        Note = ""
                    }).ToList();

                    // cap nhat label cho item va set lai typeid
                    foreach (var item in query)
                    {
                        if (item.TypeID == 1)
                        {
                            var to = queryDITO.FirstOrDefault(c => c.ID == item.ReferID);
                            var objRoute = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == item.ReferID && c.ORD_GroupProduct.CUSRoutingID > 0).Select(c => new { c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code }).FirstOrDefault();
                            if (objRoute != null)
                                item.Note = objRoute.Code;
                        }
                        else if (item.TypeID == 2)
                        {
                            //var to = queryCOTO.FirstOrDefault(c => c.ID == item.ReferID);
                            //var objRoute = model.OPS_COTODetail.Where(c => c.OPS_COTO.COTOMasterID == item.ReferID && c.ORD_Container.CUSRoutingID > 0).Select(c => new { c.ORD_Container.CUS_Routing.CAT_Routing.Code }).FirstOrDefault();
                            //if (objRoute != null)
                            //    item.Note = objRoute.Code;
                        }
                        //update typeid
                        item.TypeID = 0;
                        switch (item.TypeOfAssetTimeSheetID)
                        {
                            default: item.TypeID = 0;
                                break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetOpen: item.TypeID = 2; break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetReject: item.TypeID = 1; break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetAccept: item.TypeID = 3; break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetRunning: item.TypeID = -2; break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetComplete: item.TypeID = -5; break;
                        }
                        result.Add(item);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMDriverTimeSheet FLMDriverTimeSheet_VehicleTimeGet(int timeID)
        {
            try
            {
                DTOFLMDriverTimeSheet result = new DTOFLMDriverTimeSheet();
                result.ListDriver = new List<DTOFLMDriverTimeSheetDetailDriver>();
                using (var model = new DataEntities())
                {
                    var objTime = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == timeID);
                    if (objTime == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu TimeSheetID:" + timeID);
                    result.TimeSheetID = objTime.ID;
                    result.AssetID = objTime.AssetID;
                    result.AssetNo = objTime.FLM_Asset.VehicleID > 0 ? objTime.FLM_Asset.CAT_Vehicle.RegNo : objTime.FLM_Asset.RomoocID > 0 ? objTime.FLM_Asset.CAT_Romooc.RegNo : objTime.FLM_Asset.CAT_Container.ContainerNo;

                    result.StatusOfAssetTimeSheetName = objTime.SYS_Var.ValueOfVar;
                    result.StatusOfAssetTimeSheetID = objTime.StatusOfAssetTimeSheetID;
                    result.DateFrom = objTime.DateFrom;
                    result.DateTo = objTime.DateTo;
                    result.DateFromActual = objTime.DateFromActual;
                    result.DateToActual = objTime.DateToActual;
                    result.TypeOfAssetTimeSheetID = objTime.TypeOfAssetTimeSheetID;
                    result.TypeOfAssetTimeSheetName = objTime.SYS_Var1.ValueOfVar;
                    result.IsAccept = objTime.TypeOfAssetTimeSheetID == -(int)SYSVarType.TypeOfAssetTimeSheetGet;
                    result.IsAllReject = (objTime.FLM_AssetTimeSheetDriver.Count(c => c.IsReject) == objTime.FLM_AssetTimeSheetDriver.Count()) && (objTime.FLM_AssetTimeSheetDriver.Count() > 0);

                    result.IsAddDriver = (result.TypeOfAssetTimeSheetID < -(int)SYSVarType.TypeOfAssetTimeSheetAccept) && (result.IsAllReject);

                    result.ListDriver = model.FLM_AssetTimeSheetDriver.Where(c => c.AssetTimeSheetID == objTime.ID).Select(c => new DTOFLMDriverTimeSheetDetailDriver
                    {
                        ID = c.ID,
                        EmployeeCode = c.FLM_Driver.Code,
                        LastName = c.FLM_Driver.CAT_Driver.LastName,
                        FirstName = c.FLM_Driver.CAT_Driver.FirstName,
                        Cellphone = c.FLM_Driver.CAT_Driver.Cellphone,
                        CardNumber = c.FLM_Driver.CAT_Driver.CardNumber,
                        Birthday = c.FLM_Driver.CAT_Driver.Birthday,
                        Note = c.FLM_Driver.Note,
                        IsUse = c.FLM_Driver.IsUse,
                        ListDrivingLicence = c.FLM_Driver.CAT_Driver.ListDrivingLicence,
                        IsAssistant = c.FLM_Driver.IsAssistant,
                        IsReject = c.IsReject
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMDriverTimeSheet_DriverSave(int timeID, int driverID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objTime = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == timeID);
                    if (objTime == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu TimeSheetID:" + timeID);
                    if (objTime.FLM_AssetTimeSheetDriver.Count(c => c.DriverID == driverID && c.IsReject == false) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Tài xế được chọn chưa từ chối lệnh");
                    FLM_AssetTimeSheetDriver obj = new FLM_AssetTimeSheetDriver();
                    obj.CreatedBy = Account.UserName;
                    obj.CreatedDate = DateTime.Now;
                    obj.AssetTimeSheetID = timeID;
                    obj.DriverID = driverID;
                    obj.IsMain = false;
                    obj.IsReject = false;
                    model.FLM_AssetTimeSheetDriver.Add(obj);
                    objTime.TypeOfAssetTimeSheetID = -(int)SYSVarType.TypeOfAssetTimeSheetOpen;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMDriverTimeSheet_DriverDelete(int timeDriverID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.FLM_AssetTimeSheetDriver.FirstOrDefault(c => c.ID == timeDriverID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu TimeSheetDriverID:" + timeDriverID);
                    if (obj.IsReject == true)
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa tài xế đã reject TimeSheetDriverID:" + timeDriverID);
                    model.FLM_AssetTimeSheetDriver.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public List<DTOFLMDriver> FLMDriverTimeSheet_DriverList()
        {
            try
            {
                List<DTOFLMDriver> result = new List<DTOFLMDriver>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsUse).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMDriverTimeSheet_ChangeType(int timeID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == timeID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu TimeSheetID:" + timeID);
                    obj.TypeOfAssetTimeSheetID = -(int)SYSVarType.TypeOfAssetTimeSheetAccept;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region work order(danh sách các phiều)

        public DTOResult FLMReceipt_List(string request, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    dtfrom = dtfrom.Date;
                    dtto = dtto.Date;
                    var query = model.FLM_Receipt.Where(c => c.SYSCustomerID == Account.SYSCustomerID && dtfrom <= c.DateReceipt && c.DateReceipt < dtto).Select(c => new DTOReceipt
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DateReceipt = c.DateReceipt,
                        CreatedBy = c.CreatedBy,
                        CreatedDate = c.CreatedDate,
                        Note = c.Note,
                        TypeOfReceiptID = c.TypeOfReceiptID,
                        TypeOfReceiptName = c.SYS_Var.ValueOfVar,
                        IsApproved = c.IsApproved,
                        ApprovedBy = c.ApprovedBy,
                        ApprovedDate = c.ApprovedDate,
                        InvoiceDate = c.InvoiceDate,
                        InvoiceNo = c.InvoiceNo,
                        viewID = 0,
                        ListRegNo = string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    var lst = query.Data as IEnumerable<DTOReceipt>;

                    foreach (var item in lst)
                    {
                        switch (item.TypeOfReceiptID)
                        {
                            default:
                                break;
                            case -(int)SYSVarType.TypeOfReceiptMaterial:
                                var obj = model.FLM_ReceiptCost.FirstOrDefault(c => c.ReceiptID == item.ID);
                                if (obj != null && obj.AssetID > 0)
                                    item.ListRegNo = obj.FLM_Asset.CAT_Vehicle.RegNo;
                                item.viewID = 1;
                                break;
                            case -(int)SYSVarType.TypeOfReceiptTranfer: item.viewID = 2;
                                var allCode = model.FLM_TransferHistory.Where(c => c.ReceiptID == item.ID).Select(c => c.FLM_Asset.Code).ToList();
                                item.ListRegNo = string.Join(", ", allCode);
                                break;
                            case -(int)SYSVarType.TypeOfReceiptRepairSmall: item.viewID = 3;
                                var allVehicle = model.FLM_ReceiptCost.Where(c => c.ReceiptID == item.ID).Select(c => c.FLM_Asset.CAT_Vehicle.RegNo).ToList();
                                item.ListRegNo = string.Join(", ", allVehicle);
                                break;
                            case -(int)SYSVarType.TypeOfReceiptRepairLarge: item.viewID = 4;
                                var allVehicle2 = model.FLM_ReceiptCost.Where(c => c.ReceiptID == item.ID).Select(c => c.FLM_Asset.CAT_Vehicle.RegNo).ToList();
                                item.ListRegNo = string.Join(", ", allVehicle2);
                                break;
                            case -(int)SYSVarType.TypeOfReceiptLiquidationEquipment: item.viewID = 5;
                                var allEqm = model.FLM_ReceiptAsset.Where(c => c.FLM_ReceiptCost.ReceiptID == item.ID).Select(c => c.FLM_Asset.Code).ToList();
                                item.ListRegNo = string.Join(", ", allEqm);
                                break;
                            case -(int)SYSVarType.TypeOfReceiptLiquidationVehicle: item.viewID = 6;
                                List<string> lstR = new List<string>();
                                lstR.AddRange(model.FLM_ReceiptCost.Where(c => c.ReceiptID == item.ID).Select(c => c.FLM_Asset.CAT_Vehicle.RegNo).ToList());
                                lstR.AddRange(model.FLM_ReceiptAsset.Where(c => c.FLM_ReceiptCost.ReceiptID == item.ID).Select(c => c.FLM_Asset.Code).ToList());
                                item.ListRegNo = string.Join(", ", lstR);
                                break;
                            case -(int)SYSVarType.TypeOfReceiptEquiment: item.viewID = 7;
                                List<string> lstR2 = new List<string>();
                                lstR2.AddRange(model.FLM_ReceiptCost.Where(c => c.ReceiptID == item.ID && c.AssetID > 0).Select(c => c.FLM_Asset.CAT_Vehicle.RegNo).ToList());
                                lstR2.AddRange(model.FLM_ReceiptAsset.Where(c => c.FLM_ReceiptCost.ReceiptID == item.ID).Select(c => c.FLM_Asset.Code).ToList());
                                item.ListRegNo = string.Join(", ", lstR2);
                                break;
                        }

                    }

                    result.Data = lst;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMReceipt_ApprovedList(List<int> lst)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var receipt in lst)
                    {
                        var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == receipt);
                        if (objReceipt != null)
                        {
                            objReceipt.ModifiedBy = Account.UserName;
                            objReceipt.ModifiedDate = DateTime.Now;
                            objReceipt.IsApproved = true;
                            objReceipt.ApprovedBy = Account.UserName;
                            objReceipt.ApprovedDate = DateTime.Now;

                            //sinh ra cac du lieu lien quan khi duyệt phiếu 
                            switch (objReceipt.TypeOfReceiptID)
                            {
                                default:
                                    break;
                                case -(int)SYSVarType.TypeOfReceiptEquiment:
                                    #region phieu nhập thiết bị
                                    foreach (var itemCost in objReceipt.FLM_ReceiptCost)
                                    {
                                        var objCost = model.FLM_ReceiptCost.FirstOrDefault(c => c.ID == itemCost.ID);
                                        if (objCost != null)
                                        {
                                            foreach (var item in objCost.FLM_ReceiptEquiment)
                                            {
                                                for (int i = 0; i < item.Quantity; i++)
                                                {
                                                    #region luu asset
                                                    var objAsset = new FLM_Asset();
                                                    objAsset.SYSCustomerID = Account.SYSCustomerID;
                                                    objAsset.CreatedBy = Account.UserName;
                                                    objAsset.CreatedDate = DateTime.Now;
                                                    objAsset.Code = string.Empty;
                                                    objAsset.TypeOfAssetID = -(int)SYSVarType.TypeOfAssetEquipment;

                                                    objAsset.VehicleID = null;
                                                    objAsset.RomoocID = null;
                                                    objAsset.ContainerID = null;
                                                    objAsset.BaseValue = item.BaseValue;
                                                    objAsset.Name = item.Name;
                                                    objAsset.CurrentValue = item.CurrentValue;
                                                    objAsset.RemainValue = item.RemainValue;
                                                    objAsset.DepreciationPeriod = item.DepreciationPeriod;
                                                    objAsset.DepreciationStart = item.DepreciationStart;
                                                    objAsset.GroupOfEquipmentID = item.GroupOfEquipmentID;
                                                    objAsset.Manufactor = item.Manufactor;
                                                    objAsset.IsRent = false;
                                                    objAsset.IsDisposal = false;
                                                    objAsset.WarrantyEnd = item.WarrantyEnd;
                                                    objAsset.WarrantyPeriod = item.WarrantyPeriod;
                                                    objAsset.YearOfProduction = item.YearOfProduction;
                                                    objAsset.Specification = item.Specification;
                                                    objAsset.ExprDay = item.ExprDay;
                                                    objAsset.ExprInputDay = item.ExprInputDay;
                                                    model.FLM_Asset.Add(objAsset);
                                                    #endregion

                                                    #region luu transhistory

                                                    var objTranferHistory = new FLM_TransferHistory();
                                                    objTranferHistory.CreatedBy = Account.UserName;
                                                    objTranferHistory.CreatedDate = DateTime.Now;
                                                    objTranferHistory.AssetFromID = null;
                                                    objTranferHistory.SYSCustomerID = Account.SYSCustomerID;
                                                    if (itemCost.AssetID > 0)
                                                    {
                                                        objTranferHistory.AssetToID = itemCost.AssetID;
                                                    }
                                                    else if (itemCost.StockID > 0)
                                                    {
                                                        objTranferHistory.StockID = itemCost.StockID;
                                                    }
                                                    objTranferHistory.FLM_Asset1 = objAsset;
                                                    objTranferHistory.DateTranfer = DateTime.Now;
                                                    objTranferHistory.IsCurrent = true;
                                                    objTranferHistory.Amount = item.CurrentValue.HasValue ? (decimal)item.CurrentValue.Value : 0;
                                                    objTranferHistory.ReceiptID = objReceipt.ID;

                                                    model.FLM_TransferHistory.Add(objTranferHistory);
                                                    #endregion

                                                    #region luu receipt asset
                                                    var objReciptAsset = new FLM_ReceiptAsset();
                                                    objReciptAsset.CreatedBy = Account.UserName;
                                                    objReciptAsset.CreatedDate = DateTime.Now;
                                                    objReciptAsset.FLM_Asset = objAsset;
                                                    objReciptAsset.FLM_ReceiptCost = objCost;
                                                    model.FLM_ReceiptAsset.Add(objReciptAsset);
                                                    #endregion

                                                    model.SaveChanges();

                                                    objAsset.Code = PartNoPrefix + objAsset.ID.ToString(PartNoCodeNum);
                                                    model.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    break;
                                case -(int)SYSVarType.TypeOfReceiptLiquidationVehicle:
                                    #region phiếu thanh lý xe (bao gồm thiết bị theo xe)
                                    foreach (var cost in objReceipt.FLM_ReceiptCost)
                                    {
                                        var asset = model.FLM_Asset.FirstOrDefault(c => c.ID == cost.AssetID);
                                        if (asset != null)
                                        {
                                            asset.ModifiedBy = Account.UserName;
                                            asset.ModifiedDate = DateTime.Now;
                                            asset.IsDisposal = true;

                                            foreach (var eqm in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == cost.ID))
                                            {
                                                //cap nhat asset eqm ve disposal
                                                var eqmAsset = model.FLM_Asset.FirstOrDefault(c => c.ID == eqm.AssetID);
                                                if (eqmAsset != null)
                                                {
                                                    eqmAsset.ModifiedBy = Account.UserName;
                                                    eqmAsset.ModifiedDate = DateTime.Now;
                                                    eqmAsset.IsDisposal = true;
                                                    //cap nhat transfer history

                                                    var objHistory = model.FLM_TransferHistory.FirstOrDefault(c => c.AssetOwnID == eqm.AssetID && c.IsCurrent);
                                                    if (objHistory != null)
                                                    {
                                                        objHistory.IsCurrent = false;
                                                        objHistory.ModifiedBy = Account.UserName;
                                                        objHistory.ModifiedDate = DateTime.Now;
                                                        objHistory.ReceiptID = objReceipt.ID;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    break;
                                case -(int)SYSVarType.TypeOfReceiptLiquidationEquipment:
                                    #region phiếu thanh lý thiết bị
                                    foreach (var cost in objReceipt.FLM_ReceiptCost)
                                    {
                                        foreach (var eqm in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == cost.ID))
                                        {
                                            //cap nhat asset eqm ve disposal
                                            var eqmAsset = model.FLM_Asset.FirstOrDefault(c => c.ID == eqm.AssetID);
                                            if (eqmAsset != null)
                                            {
                                                eqmAsset.ModifiedBy = Account.UserName;
                                                eqmAsset.ModifiedDate = DateTime.Now;
                                                eqmAsset.IsDisposal = true;
                                                //cap nhat transfer history

                                                var objHistory = model.FLM_TransferHistory.FirstOrDefault(c => c.AssetOwnID == eqm.AssetID && c.IsCurrent);
                                                if (objHistory != null)
                                                {
                                                    objHistory.IsCurrent = false;
                                                    objHistory.ModifiedBy = Account.UserName;
                                                    objHistory.ModifiedDate = DateTime.Now;
                                                    objHistory.ReceiptID = objReceipt.ID;
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    break;
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMReceipt_UnApprovedList(List<int> lst)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == item);
                        if (objReceipt != null)
                        {
                            objReceipt.ModifiedBy = Account.UserName;
                            objReceipt.ModifiedDate = DateTime.Now;
                            objReceipt.IsApproved = false;
                            objReceipt.ApprovedBy = string.Empty;
                            objReceipt.ApprovedDate = null;

                            //neu phieu nhap thiết bị: remove asset , recipt asset, history
                            //hủy các dữ liệu liên quan 
                            switch (objReceipt.TypeOfReceiptID)
                            {
                                default:
                                    break;
                                case -(int)SYSVarType.TypeOfReceiptEquiment:
                                    #region phiếu nhập thiết bị
                                    foreach (var history in model.FLM_TransferHistory.Where(c => c.ReceiptID == objReceipt.ID))
                                    {
                                        model.FLM_TransferHistory.Remove(history);
                                    }
                                    foreach (var cost in model.FLM_ReceiptCost.Where(c => c.ReceiptID == objReceipt.ID))
                                    {
                                        foreach (var asset in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == cost.ID))
                                        {
                                            var objAset = model.FLM_Asset.FirstOrDefault(c => c.ID == asset.AssetID);
                                            if (objAset != null)
                                            {
                                                model.FLM_Asset.Remove(objAset);
                                                model.FLM_ReceiptAsset.Remove(asset);
                                            }
                                        }
                                    }
                                    #endregion
                                    break;
                                case -(int)SYSVarType.TypeOfReceiptLiquidationVehicle:
                                    #region phiếu nhập thanh lý xe
                                    foreach (var cost in objReceipt.FLM_ReceiptCost)
                                    {
                                        var asset = model.FLM_Asset.FirstOrDefault(c => c.ID == cost.AssetID);
                                        if (asset != null)
                                        {
                                            asset.ModifiedBy = Account.UserName;
                                            asset.ModifiedDate = DateTime.Now;
                                            asset.IsDisposal = false;

                                            foreach (var eqm in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == cost.ID))
                                            {
                                                //cap nhat asset eqm ve disposal
                                                var eqmAsset = model.FLM_Asset.FirstOrDefault(c => c.ID == eqm.AssetID);
                                                if (eqmAsset != null)
                                                {
                                                    eqmAsset.ModifiedBy = Account.UserName;
                                                    eqmAsset.ModifiedDate = DateTime.Now;
                                                    eqmAsset.IsDisposal = false;
                                                    //cap nhat transfer history

                                                    var objHistory = model.FLM_TransferHistory.FirstOrDefault(c => c.AssetOwnID == eqm.AssetID && c.IsCurrent == false && c.ReceiptID == objReceipt.ID);
                                                    if (objHistory != null)
                                                    {
                                                        objHistory.IsCurrent = true;
                                                        objHistory.ModifiedBy = Account.UserName;
                                                        objHistory.ModifiedDate = DateTime.Now;
                                                        objHistory.ReceiptID = null;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    break;
                                case -(int)SYSVarType.TypeOfReceiptLiquidationEquipment:
                                    #region phiếu nhập thanh lý thiết bị
                                    foreach (var cost in objReceipt.FLM_ReceiptCost)
                                    {
                                        foreach (var eqm in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == cost.ID))
                                        {
                                            //cap nhat asset eqm ve disposal
                                            var eqmAsset = model.FLM_Asset.FirstOrDefault(c => c.ID == eqm.AssetID);
                                            if (eqmAsset != null)
                                            {
                                                eqmAsset.ModifiedBy = Account.UserName;
                                                eqmAsset.ModifiedDate = DateTime.Now;
                                                eqmAsset.IsDisposal = false;
                                                //cap nhat transfer history

                                                var objHistory = model.FLM_TransferHistory.FirstOrDefault(c => c.AssetOwnID == eqm.AssetID && c.IsCurrent == false && c.ReceiptID == objReceipt.ID);
                                                if (objHistory != null)
                                                {
                                                    objHistory.IsCurrent = true;
                                                    objHistory.ModifiedBy = Account.UserName;
                                                    objHistory.ModifiedDate = DateTime.Now;
                                                    objHistory.ReceiptID = null;
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    break;
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMReceipt_Delete(int id)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_Receipt.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == id);

                    if (model.FLM_FixedCost.Count(c => c.ReceiptID > 0 && c.ReceiptID.Value == id) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Phiếu đã phát sinh khấu hao, không thể xóa");
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu ID: " + id);
                    if (obj.IsApproved)
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa phiếu đã được duyệt");

                    switch (obj.TypeOfReceiptID)
                    {
                        case -(int)SYSVarType.TypeOfReceiptMaterial:
                            foreach (var vcost in model.FLM_ReceiptCost.Where(c => c.ReceiptID == obj.ID))
                            {
                                foreach (var detail in model.FLM_ReceiptDetail.Where(c => c.ReceiptCostID == vcost.ID))
                                    model.FLM_ReceiptDetail.Remove(detail);
                                model.FLM_ReceiptCost.Remove(vcost);
                            }
                            model.FLM_Receipt.Remove(obj);
                            break;
                        case -(int)SYSVarType.TypeOfReceiptTranfer:
                            foreach (var item in model.FLM_TransferHistory.Where(c => c.ReceiptID == obj.ID))
                            {
                                var lastHis = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.AssetOwnID == item.AssetOwnID && !c.IsCurrent).FirstOrDefault();
                                if (lastHis != null) lastHis.IsCurrent = true;
                                model.FLM_TransferHistory.Remove(item);
                            }
                            model.FLM_Receipt.Remove(obj);
                            break;
                        case -(int)SYSVarType.TypeOfReceiptRepairSmall:
                            foreach (var vcost in model.FLM_ReceiptCost.Where(c => c.ReceiptID == obj.ID))
                            {
                                foreach (var detail in model.FLM_ReceiptDetail.Where(c => c.ReceiptCostID == vcost.ID))
                                    model.FLM_ReceiptDetail.Remove(detail);
                                model.FLM_ReceiptCost.Remove(vcost);
                            }
                            model.FLM_Receipt.Remove(obj);
                            break;
                        case -(int)SYSVarType.TypeOfReceiptRepairLarge:
                            foreach (var vcost in model.FLM_ReceiptCost.Where(c => c.ReceiptID == obj.ID))
                            {
                                foreach (var detail in model.FLM_ReceiptDetail.Where(c => c.ReceiptCostID == vcost.ID))
                                    model.FLM_ReceiptDetail.Remove(detail);
                                model.FLM_ReceiptCost.Remove(vcost);
                            }
                            model.FLM_Receipt.Remove(obj);
                            break;
                        case -(int)SYSVarType.TypeOfReceiptLiquidationEquipment:
                            foreach (var vcost in model.FLM_ReceiptCost.Where(c => c.ReceiptID == obj.ID))
                            {
                                foreach (var detail in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == vcost.ID))
                                    model.FLM_ReceiptAsset.Remove(detail);
                                model.FLM_ReceiptCost.Remove(vcost);
                            }
                            model.FLM_Receipt.Remove(obj);
                            break;
                        case -(int)SYSVarType.TypeOfReceiptLiquidationVehicle:
                            foreach (var vcost in model.FLM_ReceiptCost.Where(c => c.ReceiptID == obj.ID))
                            {
                                foreach (var detail in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == vcost.ID))
                                    model.FLM_ReceiptAsset.Remove(detail);
                                model.FLM_ReceiptCost.Remove(vcost);
                            }
                            model.FLM_Receipt.Remove(obj);
                            break;
                        case -(int)SYSVarType.TypeOfReceiptEquiment:
                            foreach (var vcost in model.FLM_ReceiptCost.Where(c => c.ReceiptID == obj.ID))
                            {
                                foreach (var detail in model.FLM_ReceiptEquiment.Where(c => c.ReceiptCostID == vcost.ID))
                                    model.FLM_ReceiptEquiment.Remove(detail);
                                model.FLM_ReceiptCost.Remove(vcost);
                            }
                            model.FLM_Receipt.Remove(obj);
                            break;
                        default:
                            break;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region Receipt Fuel

        public DTOReceipFuel FLMReceipt_FuelRequestGet(int receiptID, int VehicleID)
        {
            try
            {
                DTOReceipFuel result = new DTOReceipFuel();
                using (var model = new DataEntities())
                {
                    if (receiptID == 0)
                    {
                        var objReceipt = model.FLM_ReceiptCost.Where(c => c.FLM_Receipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptMaterial && c.FLM_Receipt.SYSCustomerID == Account.SYSCustomerID && c.AssetID == VehicleID).OrderByDescending(c => c.CreatedDate).FirstOrDefault();
                        if (objReceipt != null)
                        {
                            result.KMStart = objReceipt.KMStart;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<double> FLMReceipt_QuantityPerKMGet(int MaterialID, int VehicleID)
        {
            try
            {
                List<double> result = new List<double> { 0, 0};
                using (var model = new DataEntities())
                {
                    var objReceipt = model.FLM_MaterialQuota.Where(c => c.MaterialID == MaterialID && c.VehicleID == VehicleID).FirstOrDefault();
                    if (objReceipt != null)
                    {
                        result[0] = objReceipt.QuantityPerKM;
                    }

                    DTOTriggerMaterial obj = new DTOTriggerMaterial();
                    obj = HelperSYSSetting.SYSSettingSystem_GetMaterialPriceCurrent(model, Account.SYSCustomerID);
                    obj.DieselArea1_MaterialID = obj.DieselArea1_MaterialID.HasValue ? obj.DieselArea1_MaterialID : -1;
                    obj.DieselArea2_MaterialID = obj.DieselArea2_MaterialID.HasValue ? obj.DieselArea2_MaterialID : -1;
                    obj.DO05Area1_MaterialID = obj.DO05Area1_MaterialID.HasValue ? obj.DO05Area1_MaterialID : -1;
                    obj.DO05Area2_MaterialID = obj.DO05Area2_MaterialID.HasValue ? obj.DO05Area2_MaterialID : -1;
                    obj.DO25Area1_MaterialID = obj.DO25Area1_MaterialID.HasValue ? obj.DO25Area1_MaterialID : -1;
                    obj.DO25Area2_MaterialID = obj.DO25Area2_MaterialID.HasValue ? obj.DO25Area2_MaterialID : -1;
                    obj.E5RON92Area1_MaterialID = obj.E5RON92Area1_MaterialID.HasValue ? obj.E5RON92Area1_MaterialID : -1;
                    obj.E5RON92Area2_MaterialID = obj.E5RON92Area2_MaterialID.HasValue ? obj.E5RON92Area2_MaterialID : -1;
                    obj.RON92Area1_MaterialID = obj.RON92Area1_MaterialID.HasValue ? obj.RON92Area1_MaterialID : -1;
                    obj.RON92Area2_MaterialID = obj.RON92Area2_MaterialID.HasValue ? obj.RON92Area2_MaterialID : -1;
                    obj.RON95Area1_MaterialID = obj.RON95Area1_MaterialID.HasValue ? obj.RON95Area1_MaterialID : -1;
                    obj.RON95Area2_MaterialID = obj.RON95Area2_MaterialID.HasValue ? obj.RON95Area2_MaterialID : -1;

                    if (MaterialID == obj.DieselArea1_MaterialID.Value)
                        result[1] = (double)obj.DieselArea1;
                    else if (MaterialID == obj.DieselArea2_MaterialID.Value)
                        result[1] = (double)obj.DieselArea2;
                    else if (MaterialID == obj.DO05Area1_MaterialID.Value)
                        result[1] = (double)obj.DO05Area1;
                    else if (MaterialID == obj.DO05Area2_MaterialID.Value)
                        result[1] = (double)obj.DO05Area2;
                    else if (MaterialID == obj.DO25Area1_MaterialID.Value)
                        result[1] = (double)obj.DO25Area1;
                    else if (MaterialID == obj.DO25Area2_MaterialID.Value)
                        result[1] = (double)obj.DO25Area2;
                    else if (MaterialID == obj.E5RON92Area1_MaterialID.Value)
                        result[1] = (double)obj.E5RON92Area1;
                    else if (MaterialID == obj.E5RON92Area2_MaterialID.Value)
                        result[1] = (double)obj.E5RON92Area2;
                    else if (MaterialID == obj.RON92Area1_MaterialID.Value)
                        result[1] = (double)obj.RON92Area1;
                    else if (MaterialID == obj.RON92Area2_MaterialID.Value)
                        result[1] = (double)obj.RON92Area2;
                    else if (MaterialID == obj.RON95Area1_MaterialID.Value)
                        result[1] = (double)obj.RON95Area1;
                    else if (MaterialID == obj.RON95Area2_MaterialID.Value)
                        result[1] = (double)obj.RON95Area2;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOReceipFuel FLMReceipt_FuelGet(int receiptID)
        {
            try
            {
                DTOReceipFuel result = new DTOReceipFuel();
                using (var model = new DataEntities())
                {
                    if (receiptID > 0)
                    {
                        var objReceipt = model.FLM_Receipt.Where(c => c.ID == receiptID).FirstOrDefault();
                        if (objReceipt != null)
                        {
                            result.ID = objReceipt.ID;
                            result.Code = objReceipt.Code;
                            result.DateReceipt = objReceipt.DateReceipt;
                            result.SupplierID = objReceipt.SupplierID > 0 ? objReceipt.SupplierID.Value : -1;
                            result.VehicleID = objReceipt.FLM_ReceiptCost.FirstOrDefault().AssetID.Value;
                            result.KMStart = objReceipt.FLM_ReceiptCost.FirstOrDefault().KMStart;
                            result.KMEnd = objReceipt.FLM_ReceiptCost.FirstOrDefault().KMEnd;
                            result.DriverID = objReceipt.FLM_ReceiptCost.FirstOrDefault().DriverID > 0 ? objReceipt.FLM_ReceiptCost.FirstOrDefault().DriverID : -1;
                            result.DriverName = result.DriverID > 0 ? objReceipt.FLM_ReceiptCost.FirstOrDefault().FLM_Driver.CAT_Driver.LastName + " " + objReceipt.FLM_ReceiptCost.FirstOrDefault().FLM_Driver.CAT_Driver.FirstName : string.Empty;
                            result.Note = objReceipt.Note;
                            result.IsApproved = objReceipt.IsApproved;

                            result.InvoiceDate = objReceipt.InvoiceDate;
                            result.InvoiceNo = objReceipt.InvoiceNo;

                            result.ListDetail = new List<DTOFuelCostDetail>();

                            var ToDate = DateTime.Now.Date;
                            var lstMaterial = model.FLM_MaterialPrice.Where(c => c.SupplierID == result.SupplierID).GroupBy(c => c.MaterialID).Select(c => new
                            {
                                MaterialCode = c.FirstOrDefault().FLM_Material.Code,
                                MaterialID = c.FirstOrDefault().MaterialID,
                                MaterialName = c.FirstOrDefault().FLM_Material.MaterialName,
                                PricePerKM = c.Where(d => d.EffectDate <= ToDate).OrderByDescending(d => d.EffectDate).FirstOrDefault() != null ? c.Where(d => d.EffectDate <= ToDate).OrderByDescending(d => d.EffectDate).FirstOrDefault().Price : 0,
                            });
                            List<int> lstMaterialID = lstMaterial != null ? lstMaterial.Select(c => c.MaterialID).ToList() : new List<int>();
                            // Lấy dữ liệu FLM_VOUMaterialInDetail lưu vào listDetail của từng item

                            var lstVariableCostDetail = objReceipt.FLM_ReceiptCost.FirstOrDefault().FLM_ReceiptDetail.Select(c => new DTOFuelCostDetail
                            {
                                MaterialID = c.MaterialID.Value,
                                Price = c.Price,
                                Quantity = c.Quantity,
                                MaterialName = c.FLM_Material.MaterialName,
                                Amount = c.Amount
                            }).ToList();

                            if (lstVariableCostDetail != null)
                                result.ListDetail.AddRange(lstVariableCostDetail);
                        }
                        else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu");
                    }
                    else
                    {
                        result.ID = 0;
                        result.SupplierID = -1;
                        result.DateReceipt = DateTime.Now;
                        result.VehicleID = 0;
                        result.DriverID = -1;
                        var vehicle = model.FLM_Asset.Where(c => c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).FirstOrDefault();
                        if (vehicle != null)
                        {
                            result.VehicleID = vehicle.ID;
                            if (vehicle.CAT_Vehicle.DriverID > 0) result.DriverID = vehicle.CAT_Vehicle.DriverID;
                        }
                        result.ListDetail = new List<DTOFuelCostDetail>();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMReceipt_FuelSave(DTOReceipFuel item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objReceipt = model.FLM_Receipt.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (objReceipt == null)
                    {
                        objReceipt = new FLM_Receipt();
                        objReceipt.CreatedDate = DateTime.Now;
                        objReceipt.CreatedBy = Account.UserName;
                        objReceipt.SYSCustomerID = Account.SYSCustomerID;
                        objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptMaterial;
                        model.FLM_Receipt.Add(objReceipt);
                    }
                    else
                    {
                        objReceipt.ModifiedBy = Account.UserName;
                        objReceipt.ModifiedDate = DateTime.Now;
                    }
                    objReceipt.DateReceipt = item.DateReceipt;
                    objReceipt.Note = item.Note;
                    objReceipt.Code = item.Code;
                    if (string.IsNullOrEmpty(item.Code))
                        objReceipt.Code = Receipt_GetLastCode(model);
                    objReceipt.SupplierID = item.SupplierID > 0 ? item.SupplierID : null;
                    objReceipt.InvoiceDate = item.InvoiceDate;
                    objReceipt.InvoiceNo = item.InvoiceNo;

                    //luu flm receipt cost
                    var vCost = objReceipt.FLM_ReceiptCost.FirstOrDefault();
                    if (vCost == null)
                    {
                        vCost = new FLM_ReceiptCost();
                        vCost.CreatedDate = DateTime.Now;
                        vCost.CreatedBy = Account.UserName;
                        vCost.AssetID = item.VehicleID;
                        objReceipt.FLM_ReceiptCost.Add(vCost);
                    }
                    else
                    {
                        vCost.ModifiedBy = Account.UserName;
                        vCost.ModifiedDate = DateTime.Now;
                    }
                    vCost.DriverID = item.DriverID > 0 ? item.DriverID : null;
                    vCost.KMEnd = item.KMEnd;
                    vCost.KMStart = item.KMStart;
                    vCost.Amount = 0;
                    //luu detail
                    if (item.ListDetail != null && item.ListDetail.Count > 0)
                    {
                        var lstMaterialID = item.ListDetail.Select(c => c.MaterialID).ToList();
                        var lstNotExist = vCost.FLM_ReceiptDetail.Where(c => !lstMaterialID.Contains(c.MaterialID.Value)).ToList();
                        foreach (var detail in lstNotExist)
                            model.FLM_ReceiptDetail.Remove(detail);

                        foreach (var detail in item.ListDetail)
                        {
                            var objDetail = vCost.FLM_ReceiptDetail.FirstOrDefault(c => c.MaterialID == detail.MaterialID);
                            if (objDetail == null)
                            {
                                objDetail = new FLM_ReceiptDetail();
                                objDetail.CreatedBy = Account.UserName;
                                objDetail.CreatedDate = DateTime.Now;
                                objDetail.MaterialID = detail.MaterialID;
                                vCost.FLM_ReceiptDetail.Add(objDetail);
                            }
                            else
                            {
                                objDetail.ModifiedBy = Account.UserName;
                                objDetail.ModifiedDate = DateTime.Now;
                            }
                            objDetail.Quantity = detail.Quantity;
                            objDetail.Price = detail.Price;
                            objDetail.Amount = (decimal)detail.Quantity * detail.Price;
                        }
                        vCost.Amount = vCost.FLM_ReceiptDetail.Count == 0 ? 0 : vCost.FLM_ReceiptDetail.Sum(c => c.Amount);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Receipt Tranfer
        public DTOReceipTransfer FLMReceipt_TranfersGet(int receiptID)
        {
            try
            {
                DTOReceipTransfer result = new DTOReceipTransfer();
                using (var model = new DataEntities())
                {
                    if (receiptID > 0)
                    {
                        var objReceipt = model.FLM_Receipt.Where(c => c.ID == receiptID).FirstOrDefault();
                        if (objReceipt != null)
                        {
                            result.ID = objReceipt.ID;
                            result.Code = objReceipt.Code;
                            result.DateReceipt = objReceipt.DateReceipt;
                            result.Note = objReceipt.Note;
                            result.IsApproved = objReceipt.IsApproved;
                            result.InvoiceDate = objReceipt.InvoiceDate;
                            result.InvoiceNo = objReceipt.InvoiceNo;
                            result.ListDetail = objReceipt.FLM_TransferHistory.Select(c => new DTOEquipment
                            {
                                PartID = c.AssetOwnID,
                                PartName = c.FLM_Asset1.Name,
                                PartNo = c.FLM_Asset1.Code,
                            }).ToList();
                            var item = objReceipt.FLM_TransferHistory.FirstOrDefault();
                            if (item != null)
                            {
                                if (item.AssetFromID.HasValue && item.AssetToID.HasValue)
                                { //xe-xe
                                    result.VehicleID = item.AssetFromID;
                                    result.VehicleToID = item.AssetToID;
                                    result.LocationFrom = item.FLM_Asset.CAT_Vehicle.RegNo;
                                    result.LocationTo = item.FLM_Asset2.CAT_Vehicle.RegNo;
                                }
                                if (item.AssetFromID.HasValue && item.StockID.HasValue)//xe-kho
                                {
                                    result.VehicleID = item.AssetFromID;
                                    result.StockToID = item.StockID;
                                    result.LocationFrom = item.FLM_Asset.CAT_Vehicle.RegNo;
                                    result.LocationTo = item.FLM_Stock.StockName;
                                }
                                if (item.AssetToID.HasValue && item.StockID.HasValue)//kho-xe
                                {
                                    result.StockID = item.StockID;
                                    result.VehicleToID = item.AssetToID;
                                    result.LocationFrom = item.FLM_Stock.StockName;
                                    result.LocationTo = item.FLM_Asset2.CAT_Vehicle.RegNo;
                                }
                                //if (item.AssetToID.HasValue && item.StockID.HasValue)//kho-kho
                                //{
                                //    result.VehicleID = item.AssetFromID;
                                //    result.VehicleToID = item.AssetToID;
                                //    result.LocationFrom = item.FLM_Asset.CAT_Vehicle.RegNo;
                                //    result.LocationTo = item.FLM_Asset2.CAT_Vehicle.RegNo;
                                //}
                            }
                        }
                        else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu");
                    }
                    else
                    {
                        result.ID = 0;
                        var sup = model.FLM_Supplier.FirstOrDefault();
                        result.DateReceipt = DateTime.Now;
                        result.VehicleID = -1;
                        result.ListDetail = new List<DTOEquipment>();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOEquipment> FLMReceipt_TranfersEQMByStock(int stockID)
        {
            try
            {
                List<DTOEquipment> result = new List<DTOEquipment>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && !c.AssetToID.HasValue && c.StockID == stockID && c.IsCurrent).Select(c => new DTOEquipment
                    {
                        PartID = c.AssetOwnID,
                        PartNo = c.FLM_Asset1.Code,
                        PartName = c.FLM_Asset1.Name
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOEquipment> FLMReceipt_TranfersEQMByVehicle(int vehicleID)
        {
            try
            {
                List<DTOEquipment> result = new List<DTOEquipment>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.AssetToID == vehicleID && c.IsCurrent && !c.FLM_Asset1.IsDisposal).Select(c => new DTOEquipment
                    {
                        PartID = c.AssetOwnID,
                        PartNo = c.FLM_Asset1.Code,
                        PartName = c.FLM_Asset1.Name
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMReceipt_TranfersSave(DTOReceipTransfer item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (item.ListDetail == null || item.ListDetail.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Dữ liệu cần lưu không có thiết bị");
                    if (!item.VehicleToID.HasValue && !item.StockToID.HasValue)
                        throw FaultHelper.BusinessFault(null, null, "Dữ liệu cần lưu không có nơi đến");
                    var objReceipt = model.FLM_Receipt.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (objReceipt == null)
                    {
                        objReceipt = new FLM_Receipt();
                        objReceipt.CreatedDate = DateTime.Now;
                        objReceipt.CreatedBy = Account.UserName;
                        objReceipt.SYSCustomerID = Account.SYSCustomerID;
                        objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptTranfer;
                        model.FLM_Receipt.Add(objReceipt);
                    }
                    else
                    {
                        objReceipt.ModifiedBy = Account.UserName;
                        objReceipt.ModifiedDate = DateTime.Now;
                    }
                    objReceipt.DateReceipt = item.DateReceipt;
                    objReceipt.Note = item.Note;
                    objReceipt.Code = item.Code;
                    if (string.IsNullOrEmpty(item.Code))
                        objReceipt.Code = Receipt_GetLastCode(model);

                    objReceipt.InvoiceDate = item.InvoiceDate;
                    objReceipt.InvoiceNo = item.InvoiceNo;

                    //luu transfer history
                    if (!(objReceipt.ID > 0))
                    {
                        foreach (var eqm in item.ListDetail)
                        {
                            //lay history cu
                            var PastHis = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.AssetOwnID == eqm.PartID && c.IsCurrent).FirstOrDefault();
                            if (PastHis == null)
                                throw FaultHelper.BusinessFault(null, null, "Không tìm thấy lịch sử thiết bị " + eqm.PartNo);
                            PastHis.IsCurrent = false;
                            //tao new history
                            var CurrHis = new FLM_TransferHistory();
                            CurrHis.SYSCustomerID = Account.SYSCustomerID;
                            CurrHis.CreatedBy = Account.UserName;
                            CurrHis.CreatedDate = DateTime.Now;
                            CurrHis.IsCurrent = true;
                            CurrHis.DateTranfer = item.DateReceipt;//chua ro
                            CurrHis.Amount = PastHis.Amount;//chua ro 
                            CurrHis.AssetOwnID = eqm.PartID;
                            if (item.VehicleToID > 0)//chuyen den xe
                            {
                                if (PastHis.AssetToID.HasValue)//dang o xe
                                {
                                    CurrHis.AssetFromID = PastHis.AssetToID;
                                    CurrHis.AssetToID = item.VehicleToID;
                                }
                                else if (PastHis.StockID.HasValue)
                                {
                                    CurrHis.StockID = PastHis.StockID;
                                    CurrHis.AssetToID = item.VehicleToID;
                                }
                            }
                            else if (item.StockToID > 0)//chuyen vao kho
                            {
                                if (PastHis.AssetToID.HasValue)//dang o xe
                                {
                                    CurrHis.AssetFromID = PastHis.AssetToID;
                                    CurrHis.StockID = item.StockToID;
                                }
                                else if (PastHis.StockID.HasValue)
                                {
                                    CurrHis.StockID = item.StockToID;
                                    //CurrHis.AssetToID = item.VehicleToID;
                                }
                            }

                            CurrHis.FLM_Receipt = objReceipt;
                            model.FLM_TransferHistory.Add(CurrHis);
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Receipt Disposal
        public DTOReceiptDisposal FLMReceipt_DisposalGet(int receiptID)
        {
            try
            {
                DTOReceiptDisposal result = new DTOReceiptDisposal();
                using (var model = new DataEntities())
                {
                    if (receiptID > 0)
                    {
                        var objReceipt = model.FLM_Receipt.Where(c => c.ID == receiptID).FirstOrDefault();
                        if (objReceipt != null)
                        {
                            result.ID = objReceipt.ID;
                            result.Code = objReceipt.Code;
                            result.DateReceipt = objReceipt.DateReceipt;
                            result.Note = objReceipt.Note;
                            result.IsVehicle = objReceipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptLiquidationVehicle;
                            result.IsApproved = objReceipt.IsApproved;
                            result.InvoiceDate = objReceipt.InvoiceDate;
                            result.InvoiceNo = objReceipt.InvoiceNo;
                            if (result.IsVehicle)
                            {
                                result.ListVehicle = new List<DTOReceiptDisposalVehicle>();
                                result.ListVehicle = objReceipt.FLM_ReceiptCost.Select(c => new DTOReceiptDisposalVehicle
                                    {
                                        ID = c.AssetID.Value,
                                        RegNo = c.FLM_Asset.CAT_Vehicle.RegNo,
                                        VehicleID = c.FLM_Asset.VehicleID.Value,
                                        WarrantyEnd = c.FLM_Asset.WarrantyEnd,
                                        WarrantyPeriod = c.FLM_Asset.WarrantyPeriod,
                                        YearOfProduction = c.FLM_Asset.YearOfProduction,
                                        Manufactor = c.FLM_Asset.Manufactor,
                                        CurrentValue = c.FLM_Asset.CurrentValue,
                                        DepreciationPeriod = c.FLM_Asset.DepreciationPeriod,
                                        DepreciationStart = c.FLM_Asset.DepreciationStart,
                                        BaseValue = c.FLM_Asset.BaseValue,
                                        TypeOfAssetName = c.FLM_Asset.SYS_Var.ValueOfVar,
                                        ListEquipment = c.FLM_ReceiptAsset.Select(d => new DTOReceiptDisposalEquipment
                                        {
                                            PartID = d.AssetID,
                                            YearOfProduction = d.FLM_Asset.YearOfProduction,
                                            Manufactor = d.FLM_Asset.Manufactor,
                                            BaseValue = d.FLM_Asset.BaseValue,
                                            CurrentValue = d.FLM_Asset.CurrentValue,
                                            DepreciationPeriod = d.FLM_Asset.DepreciationPeriod,
                                            DepreciationStart = d.FLM_Asset.DepreciationStart,
                                            GroupOfEquipmentName = d.FLM_Asset.GroupOfEquipmentID > 0 ? d.FLM_Asset.CAT_GroupOfEquipment.GroupName : string.Empty,
                                            PartNo = d.FLM_Asset.Code,
                                            PartName = d.FLM_Asset.Name,
                                            WarrantyEnd = d.FLM_Asset.WarrantyEnd,
                                            WarrantyPeriod = d.FLM_Asset.WarrantyPeriod,
                                        }).ToList()
                                    }).ToList();
                            }
                            else
                            {
                                result.ListEquipment = new List<DTOReceiptDisposalEquipment>();
                                var ReceiptCost = objReceipt.FLM_ReceiptCost.FirstOrDefault();
                                if (ReceiptCost != null)
                                {
                                    result.ListEquipment = ReceiptCost.FLM_ReceiptAsset.Select(c => new DTOReceiptDisposalEquipment
                                    {
                                        PartID = c.AssetID,
                                        YearOfProduction = c.FLM_Asset.YearOfProduction,
                                        Manufactor = c.FLM_Asset.Manufactor,
                                        BaseValue = c.FLM_Asset.BaseValue,
                                        CurrentValue = c.FLM_Asset.CurrentValue,
                                        DepreciationPeriod = c.FLM_Asset.DepreciationPeriod,
                                        DepreciationStart = c.FLM_Asset.DepreciationStart,
                                        GroupOfEquipmentName = c.FLM_Asset.GroupOfEquipmentID > 0 ? c.FLM_Asset.CAT_GroupOfEquipment.GroupName : string.Empty,
                                        PartNo = c.FLM_Asset.Code,
                                        PartName = c.FLM_Asset.Name,
                                        WarrantyEnd = c.FLM_Asset.WarrantyEnd,
                                        WarrantyPeriod = c.FLM_Asset.WarrantyPeriod,
                                    }).ToList();
                                }

                            }
                        }
                        else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu");
                    }
                    else
                    {
                        result.ID = 0;
                        result.DateReceipt = DateTime.Now;
                        result.IsVehicle = true;
                        result.ListVehicle = new List<DTOReceiptDisposalVehicle>();
                        result.ListEquipment = new List<DTOReceiptDisposalEquipment>();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMReceipt_DisposalSave(DTOReceiptDisposal item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (!(item.ListVehicle.Count() > 0) && item.IsVehicle)
                        throw FaultHelper.BusinessFault(null, null, "Dữ liệu cần lưu không có xe");
                    if (!(item.ListEquipment.Count() > 0) && !item.IsVehicle)
                        throw FaultHelper.BusinessFault(null, null, "Dữ liệu cần lưu không có thiết bị");

                    #region luu receipt
                    var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.ID == item.ID);
                    if (objReceipt == null)
                    {
                        objReceipt = new FLM_Receipt();
                        objReceipt.CreatedBy = Account.UserName;
                        objReceipt.CreatedDate = DateTime.Now;
                        objReceipt.SYSCustomerID = Account.SYSCustomerID;
                        objReceipt.TypeOfReceiptID = item.IsVehicle ? -(int)SYSVarType.TypeOfReceiptLiquidationVehicle : -(int)SYSVarType.TypeOfReceiptLiquidationEquipment;
                        model.FLM_Receipt.Add(objReceipt);
                    }
                    else
                    {
                        objReceipt.ModifiedBy = Account.UserName;
                        objReceipt.ModifiedDate = DateTime.Now;
                    }
                    if (string.IsNullOrEmpty(item.Code))
                        objReceipt.Code = Receipt_GetLastCode(model);
                    else
                        objReceipt.Code = item.Code;

                    objReceipt.DateReceipt = item.DateReceipt;
                    objReceipt.Note = item.Note;
                    objReceipt.InvoiceDate = item.InvoiceDate;
                    objReceipt.InvoiceNo = item.InvoiceNo;
                    #endregion

                    #region luu receipt cost

                    if (item.IsVehicle)
                    {
                        #region phieu thanh lý xe
                        //xóa các eqm neu luc truoc la phieu thanh ly eqm
                        var eqmCost = model.FLM_ReceiptCost.FirstOrDefault(c => c.ReceiptID == objReceipt.ID && c.AssetID == null);
                        if (eqmCost != null)
                        {
                            foreach (var asset in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == eqmCost.ID))
                            {
                                model.FLM_ReceiptAsset.Remove(asset);
                            }
                            model.FLM_ReceiptCost.Remove(eqmCost);
                        }

                        //luc truoc la phiếu thanh lý xe
                        //cập nhật cái có rồi, xóa cái ko có
                        var listExist = objReceipt.FLM_ReceiptCost.Select(c => c.AssetID.Value).ToList();
                        foreach (var cost in model.FLM_ReceiptCost.Where(c => c.ReceiptID == objReceipt.ID))
                        {
                            var check = item.ListVehicle.FirstOrDefault(c => c.ID == cost.AssetID);
                            if (check == null)//xoa
                            {
                                foreach (var asset in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == cost.ID))
                                {
                                    model.FLM_ReceiptAsset.Remove(asset);
                                }

                                model.FLM_ReceiptCost.Remove(cost);
                            }
                            else
                            {
                                cost.ModifiedBy = Account.UserName;
                                cost.ModifiedDate = DateTime.Now;
                                cost.Amount = 0;
                            }
                        }

                        //them mới
                        foreach (var vehicle in item.ListVehicle.Where(c => !listExist.Contains(c.ID)))
                        {
                            FLM_ReceiptCost objCost = new FLM_ReceiptCost();
                            objCost.CreatedBy = Account.UserName;
                            objCost.CreatedDate = DateTime.Now;
                            objCost.FLM_Receipt = objReceipt;
                            objCost.AssetID = vehicle.ID;
                            objCost.Amount = 0;
                            model.FLM_ReceiptCost.Add(objCost);

                            foreach (var eqm in vehicle.ListEquipment)
                            {
                                FLM_ReceiptAsset objAsset = new FLM_ReceiptAsset();
                                objAsset.CreatedBy = Account.UserName;
                                objAsset.CreatedDate = DateTime.Now;
                                objAsset.FLM_ReceiptCost = objCost;
                                objAsset.AssetID = eqm.PartID;
                                model.FLM_ReceiptAsset.Add(objAsset);
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        #region thanh lý eqm
                        //ban dau la phieu thanh ly xe
                        foreach (var cost in model.FLM_ReceiptCost.Where(c => c.ReceiptID == objReceipt.ID && c.AssetID > 0))
                        {
                            foreach (var asset in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == cost.ID))
                            {
                                model.FLM_ReceiptAsset.Remove(asset);
                            }
                            model.FLM_ReceiptCost.Remove(cost);
                        }
                        //ban dau la phieu thanh lý eqm

                        var eqmCost = model.FLM_ReceiptCost.FirstOrDefault(c => c.ReceiptID == objReceipt.ID && c.AssetID == null);
                        if (eqmCost == null)
                        {
                            eqmCost = new FLM_ReceiptCost();
                            eqmCost.CreatedBy = Account.UserName;
                            eqmCost.CreatedDate = DateTime.Now;
                            eqmCost.FLM_Receipt = objReceipt;
                            eqmCost.AssetID = null;
                            model.FLM_ReceiptCost.Add(eqmCost);
                        }
                        else
                        {
                            eqmCost.ModifiedBy = Account.UserName;
                            eqmCost.ModifiedDate = DateTime.Now;

                        }
                        eqmCost.Amount = 0;

                        var listEqmExist = eqmCost.FLM_ReceiptAsset.Select(c => c.AssetID).ToList();

                        //cập nhat eqm da co FLM_ReceiptAsset
                        foreach (var asset in model.FLM_ReceiptAsset.Where(c => c.ReceiptCostID == eqmCost.ID))
                        {
                            var check = item.ListEquipment.FirstOrDefault(c => c.PartID == asset.AssetID);
                            if (check == null)
                            {
                                model.FLM_ReceiptAsset.Remove(asset);
                            }
                            else
                            {
                                asset.ModifiedBy = Account.UserName;
                                asset.ModifiedDate = DateTime.Now;
                            }
                        }

                        foreach (var eqm in item.ListEquipment.Where(c => !listEqmExist.Contains(c.PartID)))
                        {
                            FLM_ReceiptAsset objAsset = new FLM_ReceiptAsset();
                            objAsset.CreatedBy = Account.UserName;
                            objAsset.CreatedDate = DateTime.Now;
                            objAsset.FLM_ReceiptCost = eqmCost;
                            objAsset.AssetID = eqm.PartID;
                            model.FLM_ReceiptAsset.Add(objAsset);
                        }

                        #endregion
                    }

                    #endregion

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOReceiptDisposalEquipment> FLMReceipt_DisposalEQMByVehicle(int vehicleID)
        {
            try
            {
                List<DTOReceiptDisposalEquipment> result = new List<DTOReceiptDisposalEquipment>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.AssetToID == vehicleID && c.IsCurrent && !c.FLM_Asset1.IsDisposal).Select(c => new DTOReceiptDisposalEquipment
                    {
                        PartID = c.AssetOwnID,
                        YearOfProduction = c.FLM_Asset1.YearOfProduction,
                        Manufactor = c.FLM_Asset1.Manufactor,
                        BaseValue = c.FLM_Asset1.BaseValue,
                        CurrentValue = c.FLM_Asset1.CurrentValue,
                        DepreciationPeriod = c.FLM_Asset1.DepreciationPeriod,
                        DepreciationStart = c.FLM_Asset1.DepreciationStart,
                        GroupOfEquipmentName = c.FLM_Asset1.GroupOfEquipmentID > 0 ? c.FLM_Asset1.CAT_GroupOfEquipment.GroupName : string.Empty,
                        PartNo = c.FLM_Asset1.Code,
                        PartName = c.FLM_Asset1.Name,
                        WarrantyEnd = c.FLM_Asset1.WarrantyEnd,
                        WarrantyPeriod = c.FLM_Asset1.WarrantyPeriod,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOReceiptDisposalEquipment> FLMReceipt_DisposalEQMList()
        {
            try
            {
                List<DTOReceiptDisposalEquipment> result = new List<DTOReceiptDisposalEquipment>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset1.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetEquipment
                        && c.IsCurrent && !c.FLM_Asset1.IsDisposal && c.AssetToID == null).Select(c => new DTOReceiptDisposalEquipment
                    {
                        PartID = c.AssetOwnID,
                        YearOfProduction = c.FLM_Asset1.YearOfProduction,
                        Manufactor = c.FLM_Asset1.Manufactor,
                        BaseValue = c.FLM_Asset1.BaseValue,
                        CurrentValue = c.FLM_Asset1.CurrentValue,
                        DepreciationPeriod = c.FLM_Asset1.DepreciationPeriod,
                        DepreciationStart = c.FLM_Asset1.DepreciationStart,
                        GroupOfEquipmentName = c.FLM_Asset1.GroupOfEquipmentID > 0 ? c.FLM_Asset1.CAT_GroupOfEquipment.GroupName : string.Empty,
                        PartNo = c.FLM_Asset1.Code,
                        PartName = c.FLM_Asset1.Name,
                        WarrantyEnd = c.FLM_Asset1.WarrantyEnd,
                        WarrantyPeriod = c.FLM_Asset1.WarrantyPeriod,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOReceiptDisposalVehicle> FLMReceipt_DisposalVehicleList()
        {
            try
            {
                List<DTOReceiptDisposalVehicle> result = new List<DTOReceiptDisposalVehicle>();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.VehicleID.HasValue && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID &&
                        (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)).Select(c => new DTOReceiptDisposalVehicle
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID > 0 ? c.VehicleID.Value : -1,
                            YearOfProduction = c.YearOfProduction,
                            Manufactor = c.Manufactor,
                            BaseValue = c.BaseValue,
                            CurrentValue = c.CurrentValue,
                            DepreciationPeriod = c.DepreciationPeriod,
                            DepreciationStart = c.DepreciationStart,
                            WarrantyEnd = c.WarrantyEnd,
                            WarrantyPeriod = c.WarrantyPeriod,
                            RegNo = c.CAT_Vehicle.RegNo,
                            TypeOfAssetName = c.SYS_Var.ValueOfVar,
                            RegWeight = c.CAT_Vehicle.RegWeight > 0 ? c.CAT_Vehicle.RegWeight.Value : 0,
                            //ListEquipment=new List<DTOReceiptDisposalEquipment>()
                        }).ToList();
                    result.AddRange(query);
                    //foreach (var item in query)
                    //{
                    //    item.ListEquipment = model.FLM_TransferHistory.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.AssetToID == item.ID && c.IsCurrent && !c.FLM_Asset1.IsDisposal).Select(c => new DTOReceiptDisposalEquipment
                    //         {
                    //             PartID = c.AssetOwnID,
                    //             YearOfProduction = c.FLM_Asset1.YearOfProduction,
                    //             Manufactor = c.FLM_Asset1.Manufactor,
                    //             BaseValue = c.FLM_Asset1.BaseValue,
                    //             CurrentValue = c.FLM_Asset1.CurrentValue,
                    //             DepreciationPeriod = c.FLM_Asset1.DepreciationPeriod,
                    //             DepreciationStart = c.FLM_Asset1.DepreciationStart,
                    //             GroupOfEquipmentName = c.FLM_Asset1.GroupOfEquipmentID > 0 ? c.FLM_Asset1.CAT_GroupOfEquipment.GroupName : string.Empty,
                    //             PartNo = c.FLM_Asset1.Code,
                    //             PartName = c.FLM_Asset1.Name,
                    //             WarrantyEnd = c.FLM_Asset1.WarrantyEnd,
                    //             WarrantyPeriod = c.FLM_Asset1.WarrantyPeriod,
                    //         }).ToList();
                    //    result.Add(item);
                    //}
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Receipt Repair
        public DTOReceiptRepairLarge FLMReceipt_RepairLargeGet(int receiptID)
        {
            try
            {
                DTOReceiptRepairLarge result = new DTOReceiptRepairLarge();
                using (var model = new DataEntities())
                {
                    if (receiptID > 0)
                    {
                        var objReceipt = model.FLM_Receipt.Where(c => c.ID == receiptID).FirstOrDefault();
                        if (objReceipt != null)
                        {
                            result.ID = objReceipt.ID;
                            result.Code = objReceipt.Code;
                            result.SupplierID = objReceipt.SupplierID > 0 ? objReceipt.SupplierID.Value : -1;
                            result.DateReceipt = objReceipt.DateReceipt;
                            result.IsDepreciation = objReceipt.IsDepreciation;
                            result.DepreciationPeriod = objReceipt.DepreciationPeriod;
                            result.DepreciationStart = objReceipt.DepreciationStart;
                            result.Note = objReceipt.Note;
                            result.ListVehicle = new List<DTOReceiptRepairVehicle>();
                            result.IsApproved = objReceipt.IsApproved;
                            result.ExprDay = objReceipt.ExprDay;
                            result.ExprInputDay = objReceipt.ExprInputDay;
                            result.IsLarge = objReceipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptRepairLarge;

                            result.InvoiceDate = objReceipt.InvoiceDate;
                            result.InvoiceNo = objReceipt.InvoiceNo;

                            foreach (var vehicle in objReceipt.FLM_ReceiptCost.ToList())
                            {
                                DTOReceiptRepairVehicle objV = new DTOReceiptRepairVehicle();
                                objV.ID = vehicle.ID;
                                objV.AssetID = vehicle.AssetID.Value;
                                objV.RegNo = vehicle.FLM_Asset.CAT_Vehicle.RegNo;
                                objV.KMEnd = vehicle.KMEnd;
                                objV.ListMaterial = vehicle.FLM_ReceiptDetail.Where(c => c.MaterialID > 0).Select(c => new DTOReceiptRepairMaterial
                                {
                                    ID = c.ID,
                                    MaterialID = c.MaterialID.Value,
                                    MaterialName = c.FLM_Material.MaterialName,
                                    Amount = c.Amount,
                                    Quantity = c.Quantity,
                                    Price = c.Price
                                }).ToList();

                                objV.ListCost = vehicle.FLM_ReceiptDetail.Where(c => c.CostID > 0).Select(c => new DTOReceiptRepairCost
                                {
                                    ID = c.ID,
                                    CostID = c.CostID.Value,
                                    CostCode = c.CAT_Cost.Code,
                                    CostName = c.CAT_Cost.CostName,
                                    Amount = c.Amount
                                }).ToList();

                                result.ListVehicle.Add(objV);
                            }
                        }
                        else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu");
                    }
                    else
                    {
                        result.ID = 0;
                        result.DateReceipt = DateTime.Now;
                        result.ListVehicle = new List<DTOReceiptRepairVehicle>();
                        result.SupplierID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMReceipt_RepairLargeSave(DTOReceiptRepairLarge item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (item.ListVehicle == null || item.ListVehicle.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Dữ liệu cần lưu không có xe");
                    //if (model.FLM_FixedCost.Count(c => c.ReceiptID > 0 && c.ReceiptID.Value == item.ID) > 0)
                    //    throw FaultHelper.BusinessFault(null, null, "Phiếu đã phát sinh khấu hao, không thể chỉnh sửa");
                    var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.ID == item.ID);
                    if (objReceipt == null)
                    {
                        objReceipt = new FLM_Receipt();
                        objReceipt.CreatedBy = Account.UserName;
                        objReceipt.CreatedDate = DateTime.Now;
                        objReceipt.SYSCustomerID = Account.SYSCustomerID;
                        objReceipt.IsDepreciation = false;
                        objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptRepairSmall;
                        model.FLM_Receipt.Add(objReceipt);
                    }

                    else
                    {
                        objReceipt.ModifiedBy = Account.UserName;
                        objReceipt.ModifiedDate = DateTime.Now;
                    }
                    if (string.IsNullOrEmpty(item.Code))
                        objReceipt.Code = Receipt_GetLastCode(model);
                    else
                        objReceipt.Code = item.Code;
                    if (item.SupplierID > 0)
                    {
                        objReceipt.SupplierID = item.SupplierID;
                        objReceipt.ExprDay = item.ExprDay;
                        objReceipt.ExprInputDay = item.ExprInputDay;
                    }

                    else objReceipt.SupplierID = null;
                    objReceipt.DateReceipt = item.DateReceipt;
                    objReceipt.Note = item.Note;
                    objReceipt.ExprDay = item.ExprDay;
                    objReceipt.ExprInputDay = item.ExprInputDay;
                    objReceipt.DepreciationPeriod = item.DepreciationPeriod;
                    objReceipt.DepreciationStart = item.DepreciationStart;
                    objReceipt.InvoiceDate = item.InvoiceDate;
                    objReceipt.InvoiceNo = item.InvoiceNo;

                    #region Xóa + Cập nhật vehicle cũ
                    List<int> lstVehicleID = objReceipt.FLM_ReceiptCost.Select(c => c.AssetID.Value).ToList();
                    foreach (var vehicle in objReceipt.FLM_ReceiptCost.ToList())
                    {

                        // Xóa vehicle cũ ko tồn tại
                        var objVehicle = item.ListVehicle.FirstOrDefault(c => c.AssetID == vehicle.AssetID);
                        if (objVehicle == null)
                        {
                            foreach (var material in vehicle.FLM_ReceiptDetail.ToList())
                            {
                                model.FLM_ReceiptDetail.Remove(material);
                                model.Entry(material).State = EntityState.Deleted;
                            }

                            model.FLM_ReceiptCost.Remove(vehicle);
                            model.Entry(vehicle).State = EntityState.Deleted;
                        }
                        else
                        {

                            // Cập nhật vehicle cũ
                            List<int> lstCostID = vehicle.FLM_ReceiptDetail.Where(c => c.CostID > 0).Select(c => c.ID).ToList();
                            List<int> lstMaterialID = vehicle.FLM_ReceiptDetail.Where(c => c.MaterialID > 0).Select(c => c.ID).ToList();
                            foreach (var cost in vehicle.FLM_ReceiptDetail.ToList())
                            {
                                if (cost.MaterialID > 0)
                                {
                                    var objMaterial = objVehicle.ListMaterial.FirstOrDefault(c => c.ID == cost.ID);
                                    // Xóa cost cũ
                                    if (objMaterial == null)
                                    {
                                        model.FLM_ReceiptDetail.Remove(cost);
                                        model.Entry(cost).State = EntityState.Deleted;
                                    }
                                    else
                                    {
                                        // Cập cost cũ
                                        cost.ModifiedBy = Account.UserName;
                                        cost.ModifiedDate = DateTime.Now;
                                        cost.Note = string.Empty;
                                        cost.MaterialID = objMaterial.MaterialID;
                                        cost.Quantity = objMaterial.Quantity;
                                        cost.Price = objMaterial.Price;
                                        cost.Amount = (decimal)objMaterial.Quantity * (decimal)objMaterial.Price;
                                    }
                                }
                                else if (cost.CostID > 0)
                                {
                                    var objCost = objVehicle.ListCost.FirstOrDefault(c => c.ID == cost.ID);
                                    // Xóa cost cũ
                                    if (objCost == null)
                                    {
                                        model.FLM_ReceiptDetail.Remove(cost);
                                        model.Entry(cost).State = EntityState.Deleted;
                                    }
                                    else
                                    {
                                        // Cập cost cũ
                                        cost.ModifiedBy = Account.UserName;
                                        cost.ModifiedDate = DateTime.Now;
                                        cost.Note = string.Empty;
                                        cost.CostID = objCost.CostID;
                                        cost.Quantity = 0;
                                        cost.Price = 0;
                                        cost.Amount = (decimal)objCost.Amount;
                                    }
                                }

                            }

                            // Thêm material mới
                            foreach (var material in objVehicle.ListMaterial.Where(c => !lstMaterialID.Contains(c.ID)))
                            {
                                var objMaterial = new FLM_ReceiptDetail();
                                objMaterial.CreatedBy = Account.UserName;
                                objMaterial.CreatedDate = DateTime.Now;
                                objMaterial.Note = string.Empty;
                                objMaterial.MaterialID = material.MaterialID;
                                objMaterial.Quantity = material.Quantity;
                                objMaterial.Price = material.Price;
                                objMaterial.Amount = (decimal)material.Quantity * (decimal)material.Price;
                                vehicle.FLM_ReceiptDetail.Add(objMaterial);
                            }
                            //them cost moi
                            foreach (var cost in objVehicle.ListCost.Where(c => !lstCostID.Contains(c.ID)))
                            {
                                var objCost = new FLM_ReceiptDetail();
                                objCost.CreatedBy = Account.UserName;
                                objCost.CreatedDate = DateTime.Now;
                                objCost.Note = string.Empty;
                                objCost.CostID = cost.CostID;
                                objCost.Quantity = 0;
                                objCost.Price = 0;
                                objCost.Amount = (decimal)cost.Amount;
                                vehicle.FLM_ReceiptDetail.Add(objCost);
                            }

                            vehicle.Amount = vehicle.FLM_ReceiptDetail.Sum(c => c.Amount);
                            vehicle.ModifiedBy = Account.UserName;
                            vehicle.ModifiedDate = DateTime.Now;
                            vehicle.KMEnd = objVehicle.KMEnd;
                            vehicle.AssetID = objVehicle.AssetID;
                        }
                    }
                    #endregion

                    #region Thêm vehicle mới
                    foreach (var vehicle in item.ListVehicle.Where(c => !lstVehicleID.Contains(c.AssetID)))
                    {
                        var objVehicle = new FLM_ReceiptCost();
                        objVehicle.CreatedBy = Account.UserName;
                        objVehicle.CreatedDate = DateTime.Now;
                        objVehicle.KMEnd = vehicle.KMEnd;
                        objVehicle.AssetID = vehicle.AssetID;
                        objVehicle.Amount = vehicle.ListCost.Sum(d => (decimal)d.Amount) + vehicle.ListMaterial.Sum(d => (decimal)d.Amount);
                        objReceipt.FLM_ReceiptCost.Add(objVehicle);

                        foreach (var cost in vehicle.ListCost)
                        {
                            var objCost = new FLM_ReceiptDetail();
                            objCost.CreatedBy = Account.UserName;
                            objCost.CreatedDate = DateTime.Now;
                            objCost.Note = string.Empty;
                            objCost.CostID = cost.CostID;
                            objCost.Amount = cost.Amount;
                            objVehicle.FLM_ReceiptDetail.Add(objCost);
                        }
                        foreach (var material in vehicle.ListMaterial)
                        {
                            var objCost = new FLM_ReceiptDetail();
                            objCost.CreatedBy = Account.UserName;
                            objCost.CreatedDate = DateTime.Now;
                            objCost.Note = string.Empty;
                            objCost.MaterialID = material.MaterialID;
                            objCost.Quantity = material.Quantity;
                            objCost.Price = material.Price;
                            objCost.Amount = material.Amount;
                            objVehicle.FLM_ReceiptDetail.Add(objCost);
                        }
                    }
                    #endregion

                    model.SaveChanges();
                    return objReceipt.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMFixedCost> FLMReceipt_RepairLargeListFixCost(int receiptID)
        {
            try
            {
                List<DTOFLMFixedCost> result = new List<DTOFLMFixedCost>();
                using (var model = new DataEntities())
                {
                    var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.ID == receiptID);
                    if (objReceipt == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu");
                    result = objReceipt.FLM_FixedCost.Select(c => new DTOFLMFixedCost
                    {
                        ID = c.ID,
                        AssetID = c.AssetID,
                        AssetCode = c.FLM_Asset.VehicleID.HasValue ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID.HasValue ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.Code,
                        IsClosed = c.IsClosed,
                        Month = c.Month,
                        Year = c.Year,
                        Value = c.Value
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMFixedCost> FLMReceipt_RepairLargeGenerateFixCost(int receiptID)
        {
            try
            {
                List<DTOFLMFixedCost> result = new List<DTOFLMFixedCost>();
                using (var model = new DataEntities())
                {
                    var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.ID == receiptID);
                    if (objReceipt == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu");
                    if (!objReceipt.DepreciationStart.HasValue)
                        throw FaultHelper.BusinessFault(null, null, "Không có ngày bắt đầu tính khấu hao");
                    if (!(objReceipt.DepreciationPeriod > 0))
                        throw FaultHelper.BusinessFault(null, null, "Không thời gian tính khấu hao");
                    DateTime From = objReceipt.DepreciationStart.Value.Date;
                    DateTime Curr;
                    foreach (var vehicle in objReceipt.FLM_ReceiptCost)
                    {
                        Curr = From;
                        List<DTOFLMFixedCost> lstTemp = new List<DTOFLMFixedCost>();
                        decimal ValueEachMonth = vehicle.Amount / objReceipt.DepreciationPeriod.Value;
                        for (int i = 0; i < objReceipt.DepreciationPeriod.Value; i++)
                        {
                            DTOFLMFixedCost obj = new DTOFLMFixedCost();
                            obj.AssetID = vehicle.AssetID.Value;
                            obj.AssetCode = vehicle.FLM_Asset.VehicleID > 0 ? vehicle.FLM_Asset.CAT_Vehicle.RegNo : vehicle.FLM_Asset.RomoocID > 0 ? vehicle.FLM_Asset.CAT_Romooc.RegNo : vehicle.FLM_Asset.CAT_Container.ContainerNo;
                            obj.Month = Curr.Month;
                            obj.Year = Curr.Year;
                            obj.Value = ValueEachMonth;
                            lstTemp.Add(obj);
                            Curr = Curr.AddMonths(1);
                        }
                        if (lstTemp.Count > 0)
                        {
                            var last = lstTemp.LastOrDefault();
                            last.Value = vehicle.Amount - (decimal)(ValueEachMonth * (objReceipt.DepreciationPeriod - 1));

                            result.AddRange(lstTemp);
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMReceipt_RepairLargeSaveFixCost(List<DTOFLMFixedCost> lst, int receiptID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.ID == receiptID);
                    if (objReceipt == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu ID:" + receiptID);
                    if (lst.Count > 0)
                    {
                        foreach (var item in lst)
                        {
                            var obj = model.FLM_FixedCost.FirstOrDefault(c => c.CostID == (int)CATCostType.FLMDepreciation &&
                                c.Month == item.Month && c.Year == item.Year && c.AssetID == item.AssetID && c.ReceiptID > 0 && c.ReceiptID == objReceipt.ID);
                            if (obj == null)
                            {
                                obj = new FLM_FixedCost();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.Month = item.Month;
                                obj.Year = item.Year;
                                obj.IsClosed = false;
                                obj.AssetID = item.AssetID;
                                obj.CostID = (int)CATCostType.FLMDepreciation;
                                obj.ReceiptID = receiptID;
                                model.FLM_FixedCost.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Value = item.Value;
                        }
                        objReceipt.IsDepreciation = true;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMReceipt_RepairLargeDeleteFixCost(int receiptID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.ID == receiptID);
                    if (objReceipt == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu ID:" + receiptID);
                    if (objReceipt.FLM_FixedCost.Count(c => c.IsClosed) > 0) throw FaultHelper.BusinessFault(null, null, "Không thể xóa vì đã có khấu hao bị đóng");
                    foreach (var item in model.FLM_FixedCost.Where(c => c.ReceiptID == objReceipt.ID))
                    {
                        model.FLM_FixedCost.Remove(item);
                    }
                    objReceipt.IsDepreciation = false;
                    objReceipt.ModifiedBy = Account.UserName;
                    objReceipt.ModifiedDate = DateTime.Now;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMReceipt_RepairChangeToLarge(int receiptID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.ID == receiptID);
                    if (objReceipt == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu ID:" + receiptID);

                    objReceipt.ModifiedBy = Account.UserName;
                    objReceipt.ModifiedDate = DateTime.Now;
                    objReceipt.IsDepreciation = false;
                    objReceipt.DepreciationPeriod = 1;
                    objReceipt.DepreciationStart = DateTime.Now;
                    objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptRepairLarge;

                    model.SaveChanges();
                    return objReceipt.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMReceipt_RepairChangeToSmall(int receiptID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.ID == receiptID);
                    if (objReceipt == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu ID:" + receiptID);

                    if (objReceipt.FLM_FixedCost.Count(c => c.IsClosed) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Phiếu có khấu hao đã đóng, không thể chuyển đổi");

                    objReceipt.ModifiedBy = Account.UserName;
                    objReceipt.ModifiedDate = DateTime.Now;
                    objReceipt.IsDepreciation = false;
                    objReceipt.DepreciationPeriod = null;
                    objReceipt.DepreciationStart = null;
                    objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptRepairSmall;

                    foreach (var fixCost in model.FLM_FixedCost.Where(c => c.ReceiptID == objReceipt.ID))
                    {
                        model.FLM_FixedCost.Remove(fixCost);
                    }

                    model.SaveChanges();
                    return objReceipt.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Receipt import equipment
        public DTOReceiptImportEQM FLMReceipt_ImportEQM_Get(int receiptID)
        {
            try
            {
                DTOReceiptImportEQM result = new DTOReceiptImportEQM();
                using (var model = new DataEntities())
                {
                    if (receiptID > 0)
                    {
                        var objReceipt = model.FLM_Receipt.Where(c => c.ID == receiptID).FirstOrDefault();
                        if (objReceipt == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phiếu");

                        result.ID = objReceipt.ID;
                        result.Code = objReceipt.Code;
                        result.InvoiceDate = objReceipt.InvoiceDate;
                        result.InvoiceNo = objReceipt.InvoiceNo;
                        result.IsApproved = objReceipt.IsApproved;
                        result.DateReceipt = objReceipt.DateReceipt;

                        result.ListDetail = new List<DTOReceiptEquiment>();

                        var query = model.FLM_ReceiptEquiment.Where(c => c.FLM_ReceiptCost.ReceiptID == objReceipt.ID).Select(c => new DTOReceiptEquiment
                            {
                                ID = c.ID,
                                Name = c.Name,
                                Quantity = c.Quantity,
                                GroupOfEquipmentID = c.GroupOfEquipmentID > 0 ? c.GroupOfEquipmentID.Value : -1,
                                GroupOfEquipmentName = c.GroupOfEquipmentID > 0 ? c.CAT_GroupOfEquipment.GroupName : string.Empty,
                                YearOfProduction = c.YearOfProduction,
                                Manufactor = c.Manufactor,
                                BaseValue = c.BaseValue,
                                CurrentValue = c.CurrentValue,
                                RemainValue = c.RemainValue,
                                DepreciationPeriod = c.DepreciationPeriod,
                                DepreciationStart = c.DepreciationStart,
                                Specification = c.Specification,
                                WarrantyEnd = c.WarrantyEnd,
                                WarrantyPeriod = c.WarrantyPeriod,
                                ExprDay = c.ExprDay,
                                ExprInputDay = c.ExprInputDay,
                                Note = c.Note
                            }).ToList();

                        result.ListDetail.AddRange(query);

                        result.AssetID = objReceipt.FLM_ReceiptCost.FirstOrDefault().AssetID > 0 ? objReceipt.FLM_ReceiptCost.FirstOrDefault().AssetID : -1;
                        result.AssetNo = objReceipt.FLM_ReceiptCost.FirstOrDefault().AssetID > 0 ? objReceipt.FLM_ReceiptCost.FirstOrDefault().FLM_Asset.VehicleID > 0 ? objReceipt.FLM_ReceiptCost.FirstOrDefault().FLM_Asset.CAT_Vehicle.RegNo : objReceipt.FLM_ReceiptCost.FirstOrDefault().FLM_Asset.CAT_Romooc.RegNo : string.Empty;
                        result.StockID = objReceipt.FLM_ReceiptCost.FirstOrDefault().StockID > 0 ? objReceipt.FLM_ReceiptCost.FirstOrDefault().StockID : -1;
                        result.StockName = objReceipt.FLM_ReceiptCost.FirstOrDefault().StockID > 0 ? objReceipt.FLM_ReceiptCost.FirstOrDefault().FLM_Stock.StockName : string.Empty;
                        result.IsStock = result.StockID > 0;

                    }
                    else
                    {
                        result.ID = 0;
                        result.DateReceipt = DateTime.Now;
                        result.ListDetail = new List<DTOReceiptEquiment>();
                        result.AssetID = -1;
                        result.StockID = -1;
                        result.IsStock = true;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMReceipt_ImportEQM_Save(DTOReceiptImportEQM item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    #region luu FLM_Receipt
                    var objReceipt = model.FLM_Receipt.FirstOrDefault(c => c.ID == item.ID);
                    if (objReceipt == null)
                    {
                        objReceipt = new FLM_Receipt();
                        objReceipt.CreatedBy = Account.UserName;
                        objReceipt.CreatedDate = DateTime.Now;
                        objReceipt.SYSCustomerID = Account.SYSCustomerID;
                        objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptEquiment;
                        model.FLM_Receipt.Add(objReceipt);
                    }
                    else
                    {
                        objReceipt.ModifiedBy = Account.UserName;
                        objReceipt.ModifiedDate = DateTime.Now;
                    }
                    objReceipt.Code = Receipt_GetLastCode(model);
                    objReceipt.DateReceipt = item.DateReceipt;
                    objReceipt.InvoiceNo = item.InvoiceNo;
                    objReceipt.InvoiceDate = item.InvoiceDate;
                    #endregion

                    #region luu FLM_ReceiptCost

                    var objCost = model.FLM_ReceiptCost.FirstOrDefault(c => c.ReceiptID == objReceipt.ID);
                    if (objCost == null)
                    {
                        objCost = new FLM_ReceiptCost();
                        objCost.CreatedBy = Account.UserName;
                        objCost.CreatedDate = DateTime.Now;
                        objCost.FLM_Receipt = objReceipt;
                    }
                    else
                    {
                        objCost.ModifiedBy = Account.UserName;
                        objCost.ModifiedDate = DateTime.Now;
                    }
                    objCost.Amount = 0;
                    objCost.AssetID = item.AssetID > 0 ? item.AssetID : null;
                    objCost.StockID = item.StockID > 0 ? item.StockID : null;
                    #endregion

                    #region FLM_ReceiptEquiment
                    //dieu chinh
                    List<int> lstExist = new List<int>();
                    List<int> lstDelete = new List<int>();
                    if (objReceipt.ID > 0)
                    {
                        lstExist.AddRange(model.FLM_ReceiptEquiment.Where(c => c.FLM_ReceiptCost.ReceiptID == objReceipt.ID).Select(c => c.ID).ToList());
                        var listSave = item.ListDetail.Where(c => c.Quantity > 0).Select(c => c.ID).ToList();
                        lstDelete = lstExist.Where(c => !listSave.Contains(c)).ToList();
                    }

                    foreach (var eqm in item.ListDetail)
                    {
                        if (eqm.Quantity > 0)
                        {
                            var obj = model.FLM_ReceiptEquiment.FirstOrDefault(c => c.ID == eqm.ID);
                            if (obj == null)
                            {
                                obj = new FLM_ReceiptEquiment();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.FLM_ReceiptCost = objCost;
                                model.FLM_ReceiptEquiment.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }

                            obj.Name = eqm.Name;
                            obj.Quantity = eqm.Quantity;
                            obj.GroupOfEquipmentID = eqm.GroupOfEquipmentID > 0 ? eqm.GroupOfEquipmentID : null;
                            obj.YearOfProduction = eqm.YearOfProduction;
                            obj.Specification = eqm.Specification;
                            obj.Manufactor = eqm.Manufactor;
                            obj.Note = eqm.Note;
                            obj.WarrantyPeriod = eqm.WarrantyPeriod > 0 ? eqm.WarrantyPeriod : null;
                            obj.WarrantyEnd = eqm.WarrantyEnd;
                            obj.DepreciationPeriod = eqm.DepreciationPeriod > 0 ? eqm.DepreciationPeriod : null;
                            obj.DepreciationStart = eqm.DepreciationStart;
                            obj.ExprDay = string.IsNullOrEmpty(eqm.ExprDay) ? string.Empty : eqm.ExprDay;
                            obj.ExprInputDay = string.IsNullOrEmpty(eqm.ExprInputDay) ? string.Empty : eqm.ExprInputDay;
                            obj.RemainValue = eqm.RemainValue > 0 ? eqm.RemainValue : null;
                            obj.BaseValue = eqm.BaseValue > 0 ? eqm.BaseValue : null;
                            obj.CurrentValue = eqm.CurrentValue > 0 ? eqm.CurrentValue : null;
                        }
                    }

                    //xoa nhung thiết bị  ko ton tại
                    foreach (var eqmDelete in lstDelete)
                    {
                        var objDelete = model.FLM_ReceiptEquiment.FirstOrDefault(c => c.ID == eqmDelete);
                        if (objDelete != null)
                            model.FLM_ReceiptEquiment.Remove(objDelete);
                    }
                    #endregion

                    model.SaveChanges();

                    return objReceipt.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMReceipt_ImportEQM_StockList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Stock.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new FLMStock
                     {
                         ID = c.ID,
                         Code = c.Code,
                         StockName = c.StockName
                     }).ToList();
                    result.Data = query as IEnumerable<FLMStock>; ;
                    result.Total = query.Count;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMReceipt_ImportEQM_VehicleList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 &&
                        (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck) &&
                        c.IsDisposal == false).Select(c => new DTOFLMVehicle
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID.Value,
                        Code = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : c.RomoocID.HasValue ? c.CAT_Romooc.RegNo : string.Empty,
                        TypeOfVehicleName = c.SYS_Var.ValueOfVar,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMReceipt_ImportEQM_ExcelInit(int functionid, string functionkey, bool isreload, DateTime dtFrom, DateTime dtTo)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;


                    dtFrom = dtFrom.Date;
                    dtTo = dtTo.AddDays(1).Date;

                    int iMooc = -(int)SYSVarType.TypeOfAssetRomooc;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        #region lấy dữ liệu
                        var data = model.FLM_ReceiptEquiment.Where(c => c.FLM_ReceiptCost.FLM_Receipt.DateReceipt >= dtFrom && c.FLM_ReceiptCost.FLM_Receipt.DateReceipt < dtTo && c.FLM_ReceiptCost.AssetID > 0).Select(c => new
                            {
                                RegNo = c.FLM_ReceiptCost.FLM_Asset.TypeOfAssetID == iMooc ? c.FLM_ReceiptCost.FLM_Asset.CAT_Romooc.RegNo : c.FLM_ReceiptCost.FLM_Asset.CAT_Vehicle.RegNo,
                                TypeOfAsset = c.FLM_ReceiptCost.FLM_Asset.SYS_Var.ValueOfVar,
                                EqmName = c.Name,
                                EqmCode = c.Code,
                                TypeOfEqm = c.GroupOfEquipmentID > 0 ? c.CAT_GroupOfEquipment.GroupName : string.Empty,
                                Note = c.Note,
                                DepreciationStart = c.DepreciationStart,
                                DepreciationPeriod = c.DepreciationPeriod,
                            }).ToList();
                        #endregion

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[9];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 9; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(0, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(1, "Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(2, "Loại phương tiện", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(3, "Mã thiết bị", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(4, "Tên thiết bị", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(5, "Loại thiết bị", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(6, "Ghi chú", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(7, "Ngày tính KH", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(8, "T/g KH(tháng)", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        ws.MergedCells = new List<string>();
                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.RegNo));
                            cells.Add(HelperExcel.NewCell(item.TypeOfAsset));
                            cells.Add(HelperExcel.NewCell(item.EqmCode));
                            cells.Add(HelperExcel.NewCell(item.EqmName));
                            cells.Add(HelperExcel.NewCell(item.TypeOfEqm));
                            cells.Add(HelperExcel.NewCell(item.Note));
                            cells.Add(HelperExcel.NewCell(item.DepreciationPeriod == null ? string.Empty : item.DepreciationPeriod.Value.ToString()));
                            cells.Add(HelperExcel.NewCell(item.DepreciationStart == null ? string.Empty : item.DepreciationStart.Value.ToString("dd/MM/yyyy")));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMReceipt_ImportEQM_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 9;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colTypeAsset = colData++;
                    int colGroupEqm = colData++;
                    int colDepStart = colData++;

                    int iTruck = -(int)SYSVarType.TypeOfAssetTruck;
                    int iTractor = -(int)SYSVarType.TypeOfAssetTractor;
                    int iMooc = -(int)SYSVarType.TypeOfAssetRomooc;
                    int iEqm = -(int)SYSVarType.TypeOfAssetEquipment;

                    var lstAsset = model.FLM_Asset.Where(c => c.IsDisposal == false && c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == iMooc || c.TypeOfAssetID == iTractor || c.TypeOfAssetID == iTruck)).Select(c => new
                    {
                        AssetID = c.ID,
                        VehicleId = c.VehicleID,
                        RomoocID = c.RomoocID,
                        RegNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : c.CAT_Romooc.RegNo,
                        TypeOfAssetID = c.TypeOfAssetID
                    }).ToList();
                    var lstEqm = model.FLM_Asset.Where(c => c.IsDisposal == false && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iEqm).Select(c => new
                    {
                        c.Code,
                        c.ID
                    }).ToList();
                    var lstTypeOfAsset = model.SYS_Var.Where(c => c.ID == iTruck || c.ID == iTruck || c.ID == iMooc).Select(c => new { c.ID, c.ValueOfVar }).ToList();

                    var lstGroupOfEqm = model.CAT_GroupOfEquipment.Select(c => new { c.ID, c.GroupName }).ToList();

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);

                    int assetID = -1, typeAssetID = -1, groupEqmID = -1;

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    List<string> lstEqmCodeOnFile = new List<string>();
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index > rowStart && eRow.Index != row)
                        {
                            if (!string.IsNullOrEmpty(eRow.Cells[3].Value.ToString()))
                            {
                                lstEqmCodeOnFile.Add(eRow.Cells[3].Value.ToString());
                            }
                        }
                    }

                    if (checkRow != null)
                    {
                        bool flag = true;
                        int indexError = 0;
                        assetID = -1;
                        typeAssetID = -1;
                        groupEqmID = -1;

                        checkRow.Cells = cells;
                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeAsset = HelperExcel.GetString(checkRow, colData++);
                        string dataEqmCode = HelperExcel.GetString(checkRow, colData++);
                        string dataEqmName = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupEqm = HelperExcel.GetString(checkRow, colData++);
                        string dataNote = HelperExcel.GetString(checkRow, colData++);
                        string dataDepStart = HelperExcel.GetString(checkRow, colData++);
                        string dataDepPeriod = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();

                        indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeAsset, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstTypeOfAsset.Count(c => c.ValueOfVar.ToLower() == dataTypeAsset.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            typeAssetID = -1;
                            var check = lstTypeOfAsset.FirstOrDefault(c => c.ValueOfVar.ToLower() == dataTypeAsset.ToLower());
                            if (check != null) typeAssetID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTypeAsset, typeAssetID.ToString());
                        }
                        indexError++;
                        if (flag && lstAsset.Count(c => c.RegNo.ToUpper() == dataRegNo && c.TypeOfAssetID == typeAssetID) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            assetID = -1;
                            var check = lstAsset.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo && c.TypeOfAssetID == typeAssetID);
                            if (check != null) assetID = check.AssetID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, assetID.ToString());
                        }

                        indexError++;
                        if (flag && lstEqm.Count(c => c.Code.ToLower() == dataEqmCode.ToLower()) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstEqmCodeOnFile.Count(c => c.ToLower() == dataEqmCode.ToLower()) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataEqmCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataEqmName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupEqm, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);

                        indexError++;
                        if (flag && lstGroupOfEqm.Count(c => c.GroupName.ToLower() == dataGroupEqm.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            groupEqmID = -1;
                            var check = lstGroupOfEqm.FirstOrDefault(c => c.GroupName.ToLower() == dataGroupEqm.ToLower());
                            if (check != null) groupEqmID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupEqm, groupEqmID.ToString());
                        }

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataNote, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDepPeriod, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);


                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMReceipt_ImportEQM_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {

                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 9;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colTypeAsset = colData++;
                    int colGroupEqm = colData++;
                    int colDepStart = colData++;

                    int iTruck = -(int)SYSVarType.TypeOfAssetTruck;
                    int iTractor = -(int)SYSVarType.TypeOfAssetTractor;
                    int iMooc = -(int)SYSVarType.TypeOfAssetRomooc;
                    int iEqm = -(int)SYSVarType.TypeOfAssetEquipment;

                    #region lấy dữ liệu check

                    var lstAsset = model.FLM_Asset.Where(c => c.IsDisposal == false && c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == iMooc || c.TypeOfAssetID == iTractor || c.TypeOfAssetID == iTruck)).Select(c => new
                    {
                        AssetID = c.ID,
                        VehicleId = c.VehicleID,
                        RomoocID = c.RomoocID,
                        RegNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : c.CAT_Romooc.RegNo,
                        TypeOfAssetID = c.TypeOfAssetID
                    }).ToList();
                    var lstEqm = model.FLM_Asset.Where(c => c.IsDisposal == false && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iEqm).Select(c => new
                    {
                        c.Code,
                        c.ID
                    }).ToList();
                    var lstTypeOfAsset = model.SYS_Var.Where(c => c.ID == iTruck || c.ID == iTruck || c.ID == iMooc).Select(c => new { c.ID, c.ValueOfVar }).ToList();

                    var lstGroupOfEqm = model.CAT_GroupOfEquipment.Select(c => new { c.ID, c.GroupName }).ToList();
                    #endregion

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);

                    double[] arrColumnWidth = new double[9];
                    arrColumnWidth[0] = 30;
                    for (int i = 1; i < 9; i++)
                    {
                        arrColumnWidth[i] = 100;
                    }

                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                    int assetID = -1, typeAssetID = -1, groupEqmID = -1;

                    List<string> lstEqmCodeOnFile = new List<string>();
                    colData = 3;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstEqmCodeOnFile.Add(eRow.Cells[colData].Value.ToString());
                            }
                        }
                    }
                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index >= rowStart)
                        {
                            bool flag = true;
                            int indexError = 0;
                            assetID = -1;
                            typeAssetID = -1;
                            groupEqmID = -1;

                            colData = 1;
                            string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                            string dataTypeAsset = HelperExcel.GetString(checkRow, colData++);
                            string dataEqmCode = HelperExcel.GetString(checkRow, colData++);
                            string dataEqmName = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupEqm = HelperExcel.GetString(checkRow, colData++);
                            string dataNote = HelperExcel.GetString(checkRow, colData++);
                            string dataDepStart = HelperExcel.GetString(checkRow, colData++);
                            string dataDepPeriod = HelperExcel.GetString(checkRow, colData++);

                            dataRegNo = dataRegNo.ToUpper();

                            indexError = 0;
                            if (flag)
                                flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataTypeAsset, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                            indexError++;
                            if (flag && lstTypeOfAsset.Count(c => c.ValueOfVar.ToLower() == dataTypeAsset.ToLower()) == 0)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                            if (flag)
                            {
                                typeAssetID = -1;
                                var check = lstTypeOfAsset.FirstOrDefault(c => c.ValueOfVar.ToLower() == dataTypeAsset.ToLower());
                                if (check != null) typeAssetID = check.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTypeAsset, typeAssetID.ToString());
                            }
                            indexError++;
                            if (flag && lstAsset.Count(c => c.RegNo.ToUpper() == dataRegNo && c.TypeOfAssetID == typeAssetID) == 0)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                            if (flag)
                            {
                                assetID = -1;
                                var check = lstAsset.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo && c.TypeOfAssetID == typeAssetID);
                                if (check != null) assetID = check.AssetID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, assetID.ToString());
                            }

                            indexError++;
                            if (flag && lstEqm.Count(c => c.Code.ToLower() == dataEqmCode.ToLower()) > 0)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                            indexError++;
                            if (flag && lstEqmCodeOnFile.Count(c => c.ToLower() == dataEqmCode.ToLower()) > 1)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataEqmCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);

                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataEqmName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);

                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataGroupEqm, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);

                            indexError++;
                            if (flag && lstGroupOfEqm.Count(c => c.GroupName.ToLower() == dataGroupEqm.ToLower()) == 0)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                            if (flag)
                            {
                                groupEqmID = -1;
                                var check = lstGroupOfEqm.FirstOrDefault(c => c.GroupName.ToLower() == dataGroupEqm.ToLower());
                                if (check != null) groupEqmID = check.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupEqm, groupEqmID.ToString());
                            }

                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataNote, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 2000);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataDepStart, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataDepPeriod, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);

                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMReceipt_ImportEQM_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {

                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 9;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAssetID = colData++;
                    int colTypeAsset = colData++;
                    int colGroupEqm = colData++;
                    int colDepStart = colData++;

                    int indexReceipt = 1;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        Dictionary<int, FLM_Receipt> dictAsset_Receipt = new Dictionary<int, FLM_Receipt>();
                        foreach (var eRow in lstRow)
                        {
                            colData = 3;
                            string dataEqmCode = HelperExcel.GetString(eRow, colData++);
                            string dataEqmName = HelperExcel.GetString(eRow, colData++);
                            colData++;
                            string dataNote = HelperExcel.GetString(eRow, colData++);
                            string dataDepStart = HelperExcel.GetString(eRow, colData++);
                            string dataDepPeriod = HelperExcel.GetString(eRow, colData++);

                            string dataAseetID = HelperExcel.GetString(eRow, colAssetID);
                            string dataTypeAssetID = HelperExcel.GetString(eRow, colTypeAsset);
                            string dataGroupEqmID = HelperExcel.GetString(eRow, colGroupEqm);

                            int assetID = Convert.ToInt32(dataAseetID);
                            int groupEqmID = Convert.ToInt32(dataGroupEqmID);
                            int? depPeriod = null;
                            DateTime? depStart = null;
                            if (!string.IsNullOrEmpty(dataDepPeriod)) depPeriod = Convert.ToInt32(dataDepPeriod);
                            if (!string.IsNullOrEmpty(dataDepStart)) depStart = HelperExcel.ValueToDateVN(dataDepStart);

                            #region luu FLM_Receipt

                            var objReceipt = dictAsset_Receipt.Where(c => c.Key == assetID).Select(c => c.Value).FirstOrDefault();
                            if (objReceipt == null)
                            {
                                objReceipt = new FLM_Receipt();
                                objReceipt.CreatedBy = Account.UserName;
                                objReceipt.CreatedDate = DateTime.Now;
                                objReceipt.SYSCustomerID = Account.SYSCustomerID;
                                objReceipt.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptEquiment;

                                objReceipt.DateReceipt = DateTime.Now;

                                objReceipt.Code = Receipt_GetLastCodeWithIndex(model, indexReceipt);
                                model.FLM_Receipt.Add(objReceipt);

                                dictAsset_Receipt.Add(assetID, objReceipt);
                                indexReceipt++;
                            }

                            #endregion

                            #region luu FLM_ReceiptCost

                            var objCost = objReceipt.FLM_ReceiptCost.FirstOrDefault();
                            if (objCost == null)
                            {
                                objCost = new FLM_ReceiptCost();
                                objCost.CreatedBy = Account.UserName;
                                objCost.CreatedDate = DateTime.Now;
                                objCost.Amount = 0;
                                objCost.AssetID = assetID;
                                objCost.StockID = null;
                                objReceipt.FLM_ReceiptCost.Add(objCost);
                            }

                            #endregion

                            #region FLM_ReceiptEquiment

                            var obj = new FLM_ReceiptEquiment();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.Name = dataEqmName;
                            if (string.IsNullOrEmpty(dataEqmCode)) obj.Code = null;
                            else obj.Code = dataEqmCode;
                            obj.Quantity = 1;
                            obj.GroupOfEquipmentID = groupEqmID;
                            obj.Note = dataNote;
                            obj.DepreciationPeriod = depPeriod;
                            obj.DepreciationStart = depStart;
                            obj.ExprDay = string.Empty;
                            obj.ExprInputDay = string.Empty;
                            objCost.FLM_ReceiptEquiment.Add(obj);
                            #endregion
                        }
                        model.SaveChanges();
                        return true;
                    }
                    else return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region FLMSetting
        public DTOFLMContract_Data FLMContract_Data(int id)
        {
            try
            {
                DTOFLMContract_Data result = new DTOFLMContract_Data();
                using (var model = new DataEntities())
                {
                    int iBoth = -(int)SYSVarType.TypeOfCustomerBOTH;
                    int iVen = -(int)SYSVarType.TypeOfCustomerVEN;
                    var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == id);
                    int customerid = 0;
                    int cusRelateID = 0;
                    if (contract != null)
                    {
                        customerid = contract.CustomerID.Value;
                        var company = model.CUS_Company.FirstOrDefault(c => c.ID == contract.CompanyID);
                        if (company != null)
                            cusRelateID = company.CustomerRelateID;
                    }

                    result.ListCustomer = model.CUS_Customer.Where(c => c.IsSystem == false && (c.TypeOfCustomerID == iBoth || c.TypeOfCustomerID == iVen)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();

                    result.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.ListProduct = new List<CUSProduct>();

                    var lstMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == customerid && c.CustomerID == cusRelateID).Select(c => new
                    {
                        c.GroupOfProductCUSID,
                        c.GroupOfProductVENID
                    }).ToList();

                    var lstCusGroupID = lstMapping.Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                    var lstProduct = model.CUS_Product.Where(c => lstCusGroupID.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        Code = c.Code
                    }).ToList();

                    foreach (var item in result.ListGroupOfProduct)
                    {
                        var lstMyMap = lstMapping.Where(c => c.GroupOfProductVENID == item.ID).Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                        result.ListProduct.AddRange(lstProduct.Where(c => lstMyMap.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                        {
                            ID = c.ID,
                            GroupOfProductID = item.ID,
                            ProductName = c.ProductName,
                            Code = c.Code,
                        }).ToList());
                    }

                    //result.ListProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == customerid).Select(c => new CUSProduct
                    //{
                    //    ID = c.ID,
                    //    GroupOfProductID = c.GroupOfProductID,
                    //    ProductName = c.ProductName,
                    //    Code = c.Code
                    //}).ToList();


                    result.ListCompany = model.CUS_Company.Where(c => c.CUS_Customer.IsSystem == false && (c.CUS_Customer.TypeOfCustomerID == iBoth || c.CUS_Customer.TypeOfCustomerID == iVen)).Select(c => new DTOCUSCompany
                    {
                        ID = c.ID,
                        CustomerOwnID = c.CustomerOwnID,
                        CustomerRelateID = c.CustomerRelateID,
                        CustomerRelateCode = c.CUS_Customer1.Code,
                        CustomerRelateName = c.CUS_Customer1.CustomerName
                    }).ToList();
                    result.ListMaterial = model.FLM_Material.Select(c => new FLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        MaterialName = c.MaterialName,
                        GroupOfMaterialID = c.GroupOfMaterialID,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName
                    }).ToList();

                    result.ListKPI = model.KPI_KPI.Where(c => c.KPITypeID == -(int)SYSVarType.KPITypeOrder).Select(c => new KPIKPI
                    {
                        ID = c.ID,
                        Code = c.Code,
                        KPIName = c.KPIName,
                        TypeOfKPIName = c.SYS_Var.ValueOfVar
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Contract.Where(c => c.CustomerID > 0 && c.CustomerID == Account.SYSCustomerID && c.CUS_Customer.IsSystem == true).Select(c => new DTOCATContract
                    {
                        ID = c.ID,
                        ContractNo = c.ContractNo,
                        EffectDate = c.EffectDate,
                        ExpiredDate = c.ExpiredDate,
                        SignDate = c.SignDate,
                        SignBy = c.SignBy,
                        PostionName = c.PostionName,
                        Content = c.Content,
                        DisplayName = c.DisplayName,
                        IsSKU = c.IsSKU,
                        UseRegion = c.UseRegion,
                        TypeOfContractDateID = c.TypeOfContractDateID,
                        TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                        TypeOfCustomerID = c.TypeOfCustomerID,
                        SYSCustomerID = c.SYSCustomerID,
                        CompanyID = c.CompanyID,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName,
                        CompanyName = c.CUS_Company.CUS_Customer1.CustomerName,
                        CompanyCode = c.CUS_Company.CUS_Customer1.Code,
                        CompanyShortName = c.CUS_Company.CUS_Customer1.ShortName,
                        UseLoadLocation = c.UseLoadLocation,
                        TransportModeID = c.TransportModeID,
                        TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.Name : string.Empty,
                        //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LeadTime = c.LeadTime,
                        AllowCoLoad = c.AllowCoLoad,
                        //IsDisabled = c.CAT_Price.Count > 0,
                        PriceInDay = c.PriceInDay,
                        ShortName = c.CUS_Customer.ShortName,
                    }).OrderBy(c => c.CustomerCode).ThenBy(c => c.CustomerName).ThenBy(c => c.ContractNo).ThenBy(c => c.DisplayName).ThenBy(c => c.TransportModeID).ThenBy(c => c.EffectDate).ThenBy(c => c.ExpiredDate).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContract>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATContract FLMContract_Get(int id)
        {
            try
            {
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;
                int iMain = -(int)SYSVarType.TypeOfContractMain;

                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var result = model.CAT_Contract.Where(c => c.ID == id).Select(c => new DTOCATContract
                        {
                            ID = c.ID,
                            ContractNo = c.ContractNo,
                            EffectDate = c.EffectDate,
                            ExpiredDate = c.ExpiredDate,
                            SignDate = c.SignDate,
                            SignBy = c.SignBy,
                            PostionName = c.PostionName,
                            Content = c.Content,
                            DisplayName = c.DisplayName,
                            IsSKU = c.IsSKU,
                            UseRegion = c.UseRegion,
                            TypeOfContractDateID = c.TypeOfContractDateID,
                            TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                            TransportModeID = c.TransportModeID,
                            //ServiceOfOrderID = c.ServiceOfOrderID,
                            //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.Name : string.Empty,
                            SYSCustomerID = c.SYSCustomerID,
                            CustomerID = Account.SYSCustomerID,
                            UseLoadLocation = c.UseLoadLocation,
                            LeadTime = c.LeadTime,
                            AllowCoLoad = c.AllowCoLoad,
                            IsDisabled = c.CAT_ContractTerm.Count > 0,
                            PriceInDay = c.PriceInDay,
                            TypeOfRunLevelID = c.TypeOfRunLevelID > 0 ? c.TypeOfRunLevelID : -1,
                            ExprMaterialQuota = c.ExprMaterialQuota,
                            ExprFCLAllocationPrice = c.ExprFCLAllocationPrice,
                            CompanyID = c.CompanyID,
                            TypeOfSGroupProductChangeID = c.TypeOfSGroupProductChangeID,
                            TypeOfContractQuantityID = c.TypeOfContractQuantityID,
                        }).FirstOrDefault();
                        var transportID = HelperContract.GetTransportMode(model, result.TransportModeID > 0 ? result.TransportModeID.Value : -1);

                        if (result != null)
                        {
                            bool flag = true;
                            try
                            {
                                result.ListSetting = result.ExprFCLAllocationPrice != null ? Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATContract_Setting>>(result.ExprFCLAllocationPrice) : null;
                                if (result.ListSetting == null || result.ListSetting.Count == 0)
                                {
                                    flag = false;
                                }
                            }
                            catch
                            {
                                flag = false;
                            }
                            if (!flag)
                            {
                                result.ListSetting = new List<DTOCATContract_Setting>();
                                foreach (var item in model.CAT_ServiceOfOrder)
                                {
                                    DTOCATContract_Setting itemCat = new DTOCATContract_Setting();
                                    itemCat.ServiceOfOrderID = item.ID;
                                    itemCat.Laden = 0;
                                    itemCat.GetEmpty = 0;
                                    itemCat.ReturnEmpty = 0;
                                    result.ListSetting.Add(itemCat);
                                }
                                string lstSetting = Newtonsoft.Json.JsonConvert.SerializeObject(result.ListSetting);
                                FLMContractSetting_Save(lstSetting, id);
                            }
                        }
                        result.TypeOfMode = transportID == iFCL ? 1 : transportID == iFTL ? 2 : transportID == iLTL ? 3 : 0;

                        return result;
                    }
                    else
                    {
                        var result = new DTOCATContract();
                        result.ID = -1;
                        result.AllowCoLoad = true;
                        result.TransportModeID = model.CAT_TransportMode.FirstOrDefault().ID;
                        result.ServiceOfOrderID = model.CAT_ServiceOfOrder.FirstOrDefault().ID;
                        result.TypeOfContractDateID = -(int)SYSVarType.TypeOfContractDateRequest;
                        result.SignDate = DateTime.Now.Date;
                        result.EffectDate = DateTime.Now.Date;
                        result.ExpiredDate = DateTime.Now.Date;
                        result.TypeOfMode = 0;
                        result.PriceInDay = false;
                        result.CustomerID = Account.SYSCustomerID;

                        result.ListSetting = new List<DTOCATContract_Setting>();
                        foreach (var item in model.CAT_ServiceOfOrder)
                        {
                            DTOCATContract_Setting itemCat = new DTOCATContract_Setting();
                            itemCat.ServiceOfOrderID = item.ID;
                            itemCat.Laden = 0;
                            itemCat.GetEmpty = 0;
                            itemCat.ReturnEmpty = 0;
                            result.ListSetting.Add(itemCat);
                        }

                        return result;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMContract_Save(DTOCATContract item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID != item.ID && c.ContractNo == item.ContractNo && c.CustomerID == item.CustomerID).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    if (item.EffectDate == null || item.ExpiredDate == null)
                        throw new Exception("Ngày hết hạn, ngày hiệu lực không được trống");
                    if (item.EffectDate.Date >= item.ExpiredDate.Value.Date)
                        throw new Exception("Ngày hết hạn phải lớn hơn ngày hiệu lực");

                    var listTerm = model.CAT_ContractTerm.Where(c => c.ContractID == item.ID);
                    if (item.ID > 0 && listTerm.Count() > 0)
                    {
                        var start = listTerm.OrderBy(c => c.DateEffect).FirstOrDefault();
                        var end = listTerm.Where(c => c.DateExpire != null).OrderByDescending(c => c.DateExpire.Value).FirstOrDefault();

                        if (start == null || end == null)
                            throw new Exception("Tồn tại phụ lục không có thời gian hiệu lực hoặc thời gian hết hạn");
                        var dateStart = start.DateEffect.Date;
                        var dateEnd = end.DateExpire.Value.Date;

                        if (item.EffectDate.Date > dateStart || item.ExpiredDate.Value.Date < dateEnd)
                            throw new Exception("Thời gian hiệu lực của hợp đồng phải bao trùm thời gian hiệu lực của các phụ lục");
                    }

                    var obj = model.CAT_Contract.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Contract();
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.CustomerID = Account.SYSCustomerID;
                        obj.TypeOfCustomerID = -(int)SYSVarType.TypeOfCustomerCUS;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_Contract.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ContractNo = item.ContractNo;
                    obj.EffectDate = item.EffectDate.Date;
                    obj.ExpiredDate = item.ExpiredDate.HasValue ? item.ExpiredDate.Value.Date : item.ExpiredDate;
                    obj.SignDate = item.SignDate;
                    obj.SignBy = item.SignBy;
                    obj.PostionName = item.PostionName;
                    obj.Content = item.Content;
                    obj.DisplayName = string.IsNullOrEmpty(item.DisplayName) ? string.Empty : item.DisplayName;
                    obj.IsSKU = item.IsSKU;
                    obj.UseRegion = item.UseRegion;
                    obj.UseLoadLocation = item.UseLoadLocation;
                    obj.TypeOfContractDateID = item.TypeOfContractDateID;
                    // obj.CompanyID = null;
                    obj.PriceInDay = item.PriceInDay;
                    obj.ExprMaterialQuota = item.ExprMaterialQuota;
                    obj.CompanyID = item.CompanyID;
                    obj.AllowCoLoad = item.AllowCoLoad;
                    obj.LeadTime = item.LeadTime;
                    obj.TypeOfContractID = -(int)SYSVarType.TypeOfContractMain;
                    if (obj.ID < 1 || model.CAT_DriverFee.Where(c => c.ContractID == item.ID).Count() == 0)
                    {
                        obj.TransportModeID = item.TransportModeID;
                        //obj.ServiceOfOrderID = item.ServiceOfOrderID;
                    }
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstOrderCode = model.ORD_Order.Where(c => c.ContractID == id).Select(c => c.Code).Distinct().ToList();
                    if (lstOrderCode.Count > 0)
                        throw new Exception("Hợp đồng đang được sử dụng cho các đơn " + string.Join(", ", lstOrderCode) + ", không thể xóa!");

                    var lstMasterCode = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ContractID == id).Select(c => c.Code).Distinct().ToList();
                    if (lstMasterCode.Count > 0)
                        throw new Exception("Hợp đồng đang được sử dụng cho các chuyến " + string.Join(", ", lstMasterCode) + ", không thể xóa!");

                    var lstCOMasterCode = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ContractID == id).Select(c => c.Code).Distinct().ToList();
                    if (lstCOMasterCode.Count > 0)
                        throw new Exception("Hợp đồng đang được sử dụng cho các chuyến " + string.Join(", ", lstCOMasterCode) + ", không thể xóa!");


                    if (model.CAT_ContractTerm.Count(c => c.ContractID == id) > 0)
                        throw new Exception("Có phụ lục, không thể xóa hợp đồng");

                    var obj = model.CAT_Contract.FirstOrDefault(c => c.ID == id);
                    if (obj == null)
                        throw new Exception("Không tìm thấy hợp đồng ID:" + id);
                    else
                    {
                        foreach (var driverFee in model.CAT_DriverFee.Where(c => c.ContractID == obj.ID))
                        {
                            foreach (var gol in model.CAT_DriverFeeGroupLocation.Where(c => c.DriverFeeID == driverFee.ID))
                                model.CAT_DriverFeeGroupLocation.Remove(gol);
                            foreach (var route in model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == driverFee.ID))
                                model.CAT_DriverFeeRouting.Remove(route);
                            foreach (var cus in model.CAT_DriverFeeCustomer.Where(c => c.DriverFeeID == driverFee.ID))
                                model.CAT_DriverFeeCustomer.Remove(cus);
                            foreach (var gop in model.CAT_DriverFeeGroupProduct.Where(c => c.DriverFeeID == driverFee.ID))
                                model.CAT_DriverFeeGroupProduct.Remove(gop);
                            model.CAT_DriverFee.Remove(driverFee);
                        }

                        //xóa cung đường trong hợp đồng
                        foreach (var temp in model.CAT_ContractRouting.Where(c => c.ContractID == obj.ID))
                            model.CAT_ContractRouting.Remove(temp);

                        //xóa contract CO default
                        foreach (var temp in model.CAT_ContractCODefault.Where(c => c.ContractID == obj.ID))
                            model.CAT_ContractCODefault.Remove(temp);

                        // xóa phụ luc (bảng giá , chi tiết bảng giá)
                        foreach (var term in model.CAT_ContractTerm.Where(c => c.ContractID == obj.ID))
                        {
                            foreach (var temp in model.CAT_Price.Where(c => c.ContractTermID == term.ID))
                            {
                                //xóa giá container
                                foreach (var temp2 in model.CAT_PriceCOContainer.Where(c => c.PriceID == temp.ID))
                                    model.CAT_PriceCOContainer.Remove(temp2);
                                //xóa servivce container
                                foreach (var temp2 in model.CAT_PriceCOService.Where(c => c.PriceID == temp.ID))
                                    model.CAT_PriceCOService.Remove(temp2);
                                //xóa phụ thu
                                foreach (var temp2 in model.CAT_PriceDIEx.Where(c => c.PriceID == temp.ID))
                                    model.CAT_PriceDIEx.Remove(temp2);
                                //xóa giá ltl thường
                                foreach (var temp2 in model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == temp.ID))
                                    model.CAT_PriceDIGroupProduct.Remove(temp2);
                                //xóa bốc xếp
                                foreach (var temp2 in model.CAT_PriceDILoad.Where(c => c.PriceID == temp.ID))
                                {
                                    foreach (var temp3 in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == temp2.ID))
                                        model.CAT_PriceDILoadDetail.Remove(temp3);
                                    model.CAT_PriceDILoad.Remove(temp2);
                                }
                                //xóa moq bốc xếp
                                foreach (var temp2 in temp.CAT_PriceDIMOQ.Where(c => c.PriceID == temp.ID))
                                    model.CAT_PriceDIMOQ.Remove(temp2);
                                //xoa ftl thường
                                foreach (var temp2 in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == temp.ID))
                                    model.CAT_PriceGroupVehicle.Remove(temp2);
                                //xoa price routing
                                foreach (var temp2 in model.CAT_PriceRouting.Where(c => c.PriceID == temp.ID))
                                {
                                    foreach (var temp3 in model.CAT_PriceRoutingCost.Where(c => c.PriceRoutingID == temp2.ID))
                                    {
                                        model.CAT_PriceRoutingCost.Remove(temp3);
                                    }
                                    model.CAT_PriceRouting.Remove(temp2);
                                }
                                model.CAT_Price.Remove(temp);
                            }
                            model.CAT_ContractTerm.Remove(term);
                        }

                        //xóa thiết lập bậc thang loại xe
                        foreach (var level in model.CAT_ContractLevel.Where(c => c.ContractID == obj.ID))
                            model.CAT_ContractLevel.Remove(level);
                        foreach (var gov in model.CAT_ContractGroupVehicle.Where(c => c.ContractID == obj.ID))
                            model.CAT_ContractGroupVehicle.Remove(gov);

                        //xoa tai chinh neu co

                        foreach (var fin in model.FIN_PL.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ContractID > 0 && c.ContractID == obj.ID))
                        {
                            foreach (var finDetail in model.FIN_PLDetails.Where(c => c.PLID == fin.ID))
                            {
                                foreach (var finGOP in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == finDetail.ID))
                                    model.FIN_PLGroupOfProduct.Remove(finGOP);
                                foreach (var finCon in model.FIN_PLContainer.Where(c => c.PLDetailID == finDetail.ID))
                                    model.FIN_PLContainer.Remove(finCon);
                                model.FIN_PLDetails.Remove(finDetail);
                            }
                            model.FIN_PL.Remove(fin);
                        }

                        //xoa finTemp
                        foreach (var finTemp in model.FIN_Temp.Where(c => c.ContractID == obj.ID))
                            model.FIN_Temp.Remove(finTemp);

                        model.CAT_Contract.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMContract_DriverFee_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverFee.Where(c => c.ContractID == contractID).Select(c => new DTOCATDriverFee
                    {
                        ID = c.ID,
                        TypeOfDriverFeeID = c.TypeOfDriverFeeID,
                        TypeOfDriverFeeName = c.CAT_TypeOfDriverFee.TypeName,
                        DriverFeeSumID = c.DriverFeeSumID,
                        DriverFeeSumName = c.SYS_Var.ValueOfVar,
                        TypeOfDriverID = c.TypeOfDriverID,
                        TypeOfDriverName = c.TypeOfDriverID > 0 ? c.SYS_Var1.ValueOfVar : string.Empty,
                        FeeName = c.FeeName,
                        ExprInput = c.ExprInput,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuantity = c.ExprQuantity,
                        ExprUnitPrice = c.ExprUnitPrice,
                        ListCustomer = c.CAT_DriverFeeCustomer.Select(o => o.CUS_Customer.Code).ToList(),
                        ListCustomerCode = string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));

                    var lst = query.Data.Cast<DTOCATDriverFee>().ToList();
                    foreach (var item in lst)
                    {
                        if (item.ListCustomer != null && item.ListCustomer.Count > 0)
                            item.ListCustomerCode = string.Join(", ", item.ListCustomer);
                    }

                    result.Total = query.Total;
                    result.Data = lst;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATDriverFee FLMContract_DriverFee_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCATDriverFee result = new DTOCATDriverFee();
                    if (id > 0)
                    {
                        result = model.CAT_DriverFee.Where(c => c.ID == id).Select(c => new DTOCATDriverFee
                        {
                            ID = c.ID,
                            TypeOfDriverFeeID = c.TypeOfDriverFeeID,
                            TypeOfDriverFeeName = c.CAT_TypeOfDriverFee.TypeName,
                            DriverFeeSumID = c.DriverFeeSumID,
                            DriverFeeSumName = c.SYS_Var.ValueOfVar,
                            FeeName = c.FeeName,
                            ExprInput = c.ExprInput,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuantity = c.ExprQuantity,
                            ExprUnitPrice = c.ExprUnitPrice,
                            TypeOfDriverID = c.TypeOfDriverID > 0 ? c.TypeOfDriverID : -1,
                        }).FirstOrDefault();
                    }
                    else
                    {

                        result.ID = -1;
                        result.TypeOfDriverFeeID = 0;
                        var objType = model.CAT_TypeOfDriverFee.FirstOrDefault();
                        if (objType != null) result.TypeOfDriverFeeID = objType.ID;
                        result.DriverFeeSumID = 0;
                        var objFee = model.SYS_Var.FirstOrDefault(c => c.TypeOfVar == (int)SYSVarType.DriverFeeSum);
                        if (objFee != null) result.DriverFeeSumID = objFee.ID;
                        result.TypeOfDriverID = -1;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMContract_DriverFee_Save(DTOCATDriverFee item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_DriverFee.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_DriverFee();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        model.CAT_DriverFee.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.FeeName = item.FeeName;
                    obj.ExprInput = string.IsNullOrEmpty(item.ExprInput) ? string.Empty : item.ExprInput;
                    obj.ExprQuantity = string.IsNullOrEmpty(item.ExprQuantity) ? string.Empty : item.ExprQuantity;
                    obj.ExprUnitPrice = string.IsNullOrEmpty(item.ExprUnitPrice) ? string.Empty : item.ExprUnitPrice;
                    obj.ExprPriceFix = string.IsNullOrEmpty(item.ExprPriceFix) ? string.Empty : item.ExprPriceFix;
                    obj.TypeOfDriverFeeID = item.TypeOfDriverFeeID;
                    obj.DriverFeeSumID = item.DriverFeeSumID;

                    if (item.TypeOfDriverID < 0)
                        obj.TypeOfDriverID = null;
                    else obj.TypeOfDriverID = item.TypeOfDriverID;
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_DriverFee.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_DriverFeeGroupLocation.Where(c => c.DriverFeeID == obj.ID))
                            model.CAT_DriverFeeGroupLocation.Remove(item);
                        foreach (var item in model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == obj.ID))
                            model.CAT_DriverFeeRouting.Remove(item);
                        foreach (var gop in model.CAT_DriverFeeGroupProduct.Where(c => c.DriverFeeID == obj.ID))
                            model.CAT_DriverFeeGroupProduct.Remove(gop);
                        foreach (var cus in model.CAT_DriverFeeCustomer.Where(c => c.DriverFeeID == obj.ID))
                            model.CAT_DriverFeeCustomer.Remove(cus);
                        model.CAT_DriverFee.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region CODefault

        /// <summary>
        /// Danh sách thiết lập trọng tải container
        /// </summary>
        /// <param name="request"></param>
        /// <param name="contractID"></param>
        /// <returns></returns>
        public DTOResult FLMContract_CODefault_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractCODefault
                    {
                        ID = c.ID,
                        PackingID = c.PackingID,
                        Ton = c.Ton,
                        ContractID = c.ContractID,
                        PackingName = c.CAT_Packing.PackingName,
                        IsChoose = false,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContractCODefault>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMContract_CODefault_NotInList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstPackingID = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID).Select(c => c.PackingID).Distinct().ToList();
                    var query = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F) && !lstPackingID.Contains(c.ID)).Select(c => new DTOCATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID,
                        TypeOfPackageName = c.SYS_Var.ValueOfVar,
                        IsChoose = false,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_CODefault_NotIn_SaveList(List<DTOCATPacking> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID && c.PackingID == item.ID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_ContractCODefault();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractID = contractID;
                            obj.PackingID = item.ID;
                            model.CAT_ContractCODefault.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_CODefault_Delete(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lst)
                    {
                        var obj = model.CAT_ContractCODefault.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceCOContainer.Where(c => c.PackingID == obj.PackingID && c.CAT_ContractRouting.ContractID == obj.ContractID))
                                model.CAT_PriceCOContainer.Remove(detail);
                            foreach (var detail in model.CAT_PriceCOService.Where(c => c.PackingID == obj.PackingID && c.CAT_Price.CAT_ContractTerm.ContractID == obj.ContractID))
                                model.CAT_PriceCOService.Remove(detail);

                            model.CAT_ContractCODefault.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu danh sách thiết lập trọng tải container
        /// </summary>
        /// <param name="data"></param>
        /// <param name="contractID"></param>
        public void FLMContract_CODefault_Update(List<DTOCATContractCODefault> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_ContractCODefault.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.Ton = item.Ton;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Group Location
        public DTOResult FLMContract_DriverFee_GroupLocation_List(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverFeeGroupLocation.Where(c => c.DriverFeeID == driverFeeID).Select(c => new DTOCATDriverFeeGroupLocation
                    {
                        ID = c.ID,
                        DriverFeeID = c.DriverFeeID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATDriverFeeGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_DriverFeeGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_DriverFeeGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_GroupLocation_SaveList(List<int> lst, int driverFeeID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_DriverFeeGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverFeeID = driverFeeID;
                        obj.GroupOfLocationID = group;
                        model.CAT_DriverFeeGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_DriverFee_GroupLocation_GroupNotInList(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_DriverFeeGroupLocation.Where(c => c.DriverFeeID == driverFeeID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region  Location
        public DTOResult FLMContract_DriverFee_Location_List(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == driverFeeID && c.LocationID.HasValue).Select(c => new DTOCATDriverFeeLocation
                    {
                        ID = c.ID,
                        DriverFeeID = c.DriverFeeID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATDriverFeeLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_DriverFeeRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_DriverFeeRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATDriverFeeLocation FLMContract_DriverFee_Location_Get(int id)
        {
            try
            {
                DTOCATDriverFeeLocation result = new DTOCATDriverFeeLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_DriverFeeRouting.Where(c => c.ID == id).Select(c => new DTOCATDriverFeeLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_Location_Save(DTOCATDriverFeeLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_DriverFeeRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_Location_LocationNotInSaveList(List<int> lst, int driverFeeID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_DriverFeeRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverFeeID = driverFeeID;
                        obj.LocationID = locationID;
                        model.CAT_DriverFeeRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_DriverFee_Location_LocationNotInList(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == driverFeeID && c.LocationID > 0).Select(c => c.LocationID).Distinct().ToList();
                    var query = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code) && !lstID.Contains(c.ID)).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region  ruote
        public DTOResult FLMContract_DriverFee_Route_List(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == driverFeeID && c.RoutingID > 0).Select(c => new DTOCATDriverFeeRoute
                    {
                        ID = c.ID,
                        DriverFeeID = c.DriverFeeID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code,
                        Note = c.CAT_Routing1.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATDriverFeeRoute>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_DriverFeeRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_DriverFeeRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_Route_SaveList(List<int> lst, int driverFeeID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_DriverFeeRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverFeeID = driverFeeID;
                        obj.RoutingID = routeID;
                        model.CAT_DriverFeeRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_DriverFee_Route_RouteNotInList(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == driverFeeID && c.RoutingID > 0).Select(c => c.RoutingID).Distinct().ToList();
                    var query = model.CAT_Routing.Where(c => !string.IsNullOrEmpty(c.Code) && !lstID.Contains(c.ID)).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region  parent route
        public DTOResult FLMContract_DriverFee_ParentRoute_List(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == driverFeeID && c.ParentRoutingID > 0).Select(c => new DTOCATDriverFeeParentRoute
                    {
                        ID = c.ID,
                        DriverFeeID = c.DriverFeeID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code,
                        Note = c.CAT_Routing.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATDriverFeeParentRoute>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_DriverFeeRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_DriverFeeRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_ParentRoute_SaveList(List<int> lst, int driverFeeID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_DriverFeeRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverFeeID = driverFeeID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_DriverFeeRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_DriverFee_ParentRoute_RouteNotInList(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == driverFeeID && c.ParentRoutingID > 0).Select(c => c.ParentRoutingID).Distinct().ToList();
                    var query = model.CAT_Routing.Where(c => c.ParentID > 0 && !lstID.Contains(c.ParentID)).Select(c => new DTOCATRouting
                    {
                        ID = c.ParentID.Value,
                        RoutingName = c.CAT_Routing2.RoutingName,
                        Code = c.CAT_Routing2.Code,
                        Note = c.CAT_Routing2.Note
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Customer
        public DTOResult FLMContract_DriverFee_Customer_List(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverFeeCustomer.Where(c => c.DriverFeeID == driverFeeID).Select(c => new DTOCATDriverFeeCustomer
                    {
                        ID = c.ID,
                        DriverFeeID = c.DriverFeeID,
                        CustomerID = c.CustomerID,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATDriverFeeCustomer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_Customer_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_DriverFeeCustomer.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_DriverFeeCustomer.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_Customer_SaveList(List<int> lst, int driverFeeID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_DriverFeeCustomer();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverFeeID = driverFeeID;
                        obj.CustomerID = group;
                        model.CAT_DriverFeeCustomer.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_DriverFee_Customer_GroupNotInList(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstCustomerID = model.CAT_DriverFeeCustomer.Where(c => c.DriverFeeID == driverFeeID).Select(c => c.CustomerID).Distinct().ToList();
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && !lstCustomerID.Contains(c.ID) &&
                        (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCustomer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price  GroupProduct
        public DTOResult FLMContract_DriverFee_GroupProduct_List(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverFeeGroupProduct.Where(c => c.DriverFeeID == driverFeeID).Select(c => new DTOCATDriverFeeGroupProduct
                    {
                        ID = c.ID,
                        DriverFeeID = c.DriverFeeID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                        CustomerCode = c.CUS_GroupOfProduct.CUS_Customer.Code,
                        CustomerName = c.CUS_GroupOfProduct.CUS_Customer.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATDriverFeeGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATDriverFeeGroupProduct FLMContract_DriverFee_GroupProduct_Get(int id)
        {
            try
            {
                DTOCATDriverFeeGroupProduct result = new DTOCATDriverFeeGroupProduct();
                using (var model = new DataEntities())
                {
                    result = model.CAT_DriverFeeGroupProduct.Where(c => c.ID == id).Select(c => new DTOCATDriverFeeGroupProduct
                    {
                        ID = c.ID,
                        DriverFeeID = c.DriverFeeID,
                        GroupOfProductID = c.GroupOfProductID,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        CustomerCode = c.CUS_GroupOfProduct.CUS_Customer.Code,
                        CustomerName = c.CUS_GroupOfProduct.CUS_Customer.CustomerName
                    }).FirstOrDefault();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_DriverFeeGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_DriverFeeGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_GroupProduct_Save(DTOCATDriverFeeGroupProduct item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_DriverFeeGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.ExprQuantity = item.ExprQuantity;
                        obj.ExprPrice = item.ExprPrice;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_DriverFee_GroupProduct_NotInList(string request, int driverFeeID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        CustomerID = c.CustomerID,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_DriverFee_GroupProduct_NotInSaveList(List<int> lst, int driverFeeID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var gopId in lst)
                    {
                        var obj = new CAT_DriverFeeGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverFeeID = driverFeeID;
                        obj.GroupOfProductID = gopId;
                        model.CAT_DriverFeeGroupProduct.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Contract
        #region Routing
        public DTOResult FLMContract_Routing_List(int contractID, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {

                    var query = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        RoutingParentID = c.CAT_Routing.ParentID,
                        ContractID = c.ContractID,
                        RoutingID = c.RoutingID,
                        CATCode = c.CAT_Routing.Code,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        LeadTime = c.LeadTime,
                        Zone = c.Zone,
                        IsDelete = c.CAT_PriceCOContainer.Count > 0 || c.CAT_PriceDIGroupProduct.Count > 0 || c.CAT_PriceGroupVehicle.Count > 0,
                        SortOrder = c.SortOrder,
                        ContractTermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                        ContractTermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                        ContractRoutingTypeID = c.ContractRoutingTypeID,
                        ContractRoutingType = c.SYS_Var.ValueOfVar,
                        IsArea = c.CAT_Routing.RoutingAreaFromID.HasValue ? true : c.CAT_Routing.RoutingAreaToID.HasValue ? true : false,
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    var list = query.Data.Cast<DTOCATContractRouting>().ToList();

                    foreach (DTOCATContractRouting item in list)
                    {
                        var iExport = (int)KPICode.Export;
                        var iOPS = (int)KPICode.OPS;
                        var iPOD = (int)KPICode.POD;

                        var lstKPI = model.KPI_KPI.Where(c => c.ID == iExport || c.ID == iOPS || c.ID == iPOD).Select(c => new DTOContractKPITime
                        {
                            ID = -1,
                            KPIID = c.ID,
                            KPICode = c.Code,
                            KPIName = c.KPIName,
                            // TypeOfKPIID = c.KPI_KPI.TypeOfKPIID,
                            TypeOfKPIName = c.SYS_Var.ValueOfVar,
                            Expression = "",
                            CompareField = ""
                        }).ToList();

                        item.ListKPI = model.CAT_ContractKPITime.Where(c => c.ContractRoutingID == item.ID).Select(c => new DTOContractKPITime
                        {
                            ID = c.ID,
                            KPIID = c.KPIID,
                            KPICode = c.KPI_KPI.Code,
                            KPIName = c.KPI_KPI.KPIName,
                            // TypeOfKPIID = c.KPI_KPI.TypeOfKPIID,
                            TypeOfKPIName = c.KPI_KPI.SYS_Var.ValueOfVar,
                            Expression = c.Expression,
                            CompareField = c.CompareField
                        }).ToList();

                        if (item.ListKPI != null && item.ListKPI.Count > 0)
                        {
                            foreach (var objKPI in lstKPI)
                            {
                                var hasKPI = false;
                                foreach (var objKPITime in item.ListKPI)
                                {
                                    if (objKPI.KPIID == objKPITime.KPIID)
                                    {
                                        hasKPI = true;
                                        break;
                                    }
                                }
                                if (!hasKPI)
                                {
                                    item.ListKPI.Add(objKPI);
                                }
                            }
                        }
                        else
                        {
                            item.ListKPI = lstKPI;
                        }
                        item.ListKPI.OrderBy(c => c.KPICode);
                    }
                    result.Total = query.Total;
                    result.Data = list;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_Routing_Save(DTOCATContractRouting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_ContractRouting.Count(c => c.ID != item.ID && c.ContractID == item.ContractID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");

                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == item.ContractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0)
                        lastSortOrder = objLast.SortOrder;
                    lastSortOrder++;

                    var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        //Xóa cung đường trong bảng giá khi đổi từ giá sang KPI
                        if ((item.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypeKPI && obj.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice) || (obj.ContractTermID > 0 && obj.ContractTermID != item.ContractTermID))
                        {
                            HelperContract.CUSContract_Routing_RemoveInPrice(obj.ID, obj.ContractID, model);
                        }
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        obj.LeadTime = item.LeadTime;
                        obj.Zone = item.Zone;

                        obj.SortOrder = item.SortOrder > 0 ? item.SortOrder : lastSortOrder;

                        if (item.ContractTermID > 0)
                            obj.ContractTermID = item.ContractTermID;
                        else obj.ContractTermID = null;

                        obj.ContractRoutingTypeID = item.ContractRoutingTypeID;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_Routing_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var child in model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceCOContainer.Remove(child);
                        }

                        foreach (var child in model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceDIGroupProduct.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceGroupVehicle.Remove(child);
                        }

                        // cung duong chỉ có 1 khách hàng xài +  chưa có đơn hàng thì xóa khỏi khách hàng 
                        if (model.CUS_Routing.Count(c => c.RoutingID == obj.RoutingID) == 1)
                        {
                            if (model.ORD_GroupProduct.Count(c => c.CUSRoutingID == obj.ID) == 0)
                            {
                                var objCUS = model.CUS_Routing.FirstOrDefault(c => c.RoutingID == obj.RoutingID);
                                if (objCUS != null) model.CUS_Routing.Remove(objCUS);
                            }

                        }

                        model.CAT_ContractRouting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMContract_Routing_NotIn_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstMyRouting = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => c.RoutingID).ToList();
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int vendorid = objContract != null && objContract.CustomerID.HasValue ? objContract.CustomerID.Value : 0;

                    var query = model.CUS_Routing.Where(c => !lstMyRouting.Contains(c.RoutingID) && c.CAT_Routing.Code != string.Empty && c.CustomerID == vendorid).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        ParentID = c.CAT_Routing.ParentID,
                        LocationFromID = c.CAT_Routing.LocationFromID,
                        LocationToID = c.CAT_Routing.LocationToID,
                        EDistance = c.CAT_Routing.EDistance,
                        EHours = c.CAT_Routing.EHours,
                        Code = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        RoutingAreaFromID = c.CAT_Routing.RoutingAreaFromID,
                        RoutingAreaToID = c.CAT_Routing.RoutingAreaToID,
                        IsAreaLast = c.CAT_Routing.IsAreaLast,
                        IsUse = c.CAT_Routing.IsUse,
                        LocationFromName = c.CAT_Routing.LocationFromID.HasValue ? c.CAT_Routing.CAT_Location.Location : string.Empty,
                        LocationToName = c.CAT_Routing.LocationToID.HasValue ? c.CAT_Routing.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.CAT_Routing.RoutingAreaFromID.HasValue ? c.CAT_Routing.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.CAT_Routing.RoutingAreaToID.HasValue ? c.CAT_Routing.CAT_RoutingArea1.AreaName : string.Empty,
                        ParentName = c.CAT_Routing.ParentID.HasValue ? c.CAT_Routing.CAT_Routing2.RoutingName : string.Empty,
                        IsChoose = false,
                        Note = c.CAT_Routing.Note
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_Routing_NotIn_Delete(int id, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objCus = model.CUS_Routing.FirstOrDefault(c => c.ID == id);
                    if (objCus == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu CusRouting");
                    if (model.CAT_ContractRouting.Count(c => c.ContractID != contractID && c.RoutingID == objCus.RoutingID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã sử dụng cho hơp đồng khác, không thể xóa");
                    if (model.ORD_Order.Count(c => c.CUSRoutingID == objCus.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã sử dụng cho đơn hàng, không thể xóa");
                    if (model.ORD_Container.Count(c => c.CUSRoutingID == objCus.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa, có dữ liệu ORD_Container");
                    if (model.ORD_GroupProduct.Count(c => c.CUSRoutingID == objCus.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa, có dữ liệu ORD_GroupProduct");

                    int CusID = objCus.CustomerID;
                    int RouteID = objCus.RoutingID;

                    model.CUS_Routing.Remove(objCus);

                    if (model.CUS_Routing.Count(c => c.RoutingID == CusID && c.CustomerID != RouteID) > 0)
                    {

                        var objCAT = model.CAT_Routing.FirstOrDefault(c => c.ID == RouteID);
                        if (objCAT != null)
                        {
                            foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.CATRoutingID == objCAT.ID))
                            {
                                model.OPS_DITOGroupProduct.Remove(item);
                            }
                            model.CAT_Routing.Remove(objCAT);
                        }
                    }



                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_Routing_Insert(List<DTOCATRouting> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;
                    lastSortOrder++;

                    foreach (var item in data)
                    {
                        if (model.CAT_ContractRouting.Count(c => c.ContractID == contractID && c.RoutingID == item.RoutingID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập!");

                        CAT_ContractRouting obj = new CAT_ContractRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        obj.SortOrder = lastSortOrder;
                        obj.ContractRoutingTypeID = -(int)SYSVarType.ContractRoutingTypePrice;
                        obj.RoutingID = item.RoutingID;
                        model.CAT_ContractRouting.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMContractRouting_Import> FLMContract_Routing_Export(int contractID)
        {
            try
            {
                List<DTOFLMContractRouting_Import> result = new List<DTOFLMContractRouting_Import>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new DTOFLMContractRouting_Import
                    {
                        CATRoutingID = c.RoutingID,
                        CATRoutingCode = c.CAT_Routing.Code,
                        CATRoutingName = c.CAT_Routing.RoutingName,
                        ContractRoutingID = c.ID,
                        ContractRoutingCode = c.Code,
                        ContractRoutingName = c.RoutingName,
                        Zone = c.Zone,
                        LeadTime = c.LeadTime,
                        LeadTimeETA = c.LeadTimeETA,
                        LeadTimeETD = c.LeadTimeETD,
                        SortOrder = c.SortOrder,
                        ContractTermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                        ContractTermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                        IsArea = c.CAT_Routing.RoutingAreaFromID > 0 ? true : false,

                        LocationFromID = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.LocationFromID.Value : -1,
                        LocationFromCode = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.CAT_Location.Code : string.Empty,
                        LocationToID = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.LocationToID.Value : -1,
                        LocationToCode = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.CAT_Location1.Code : string.Empty,

                        AreaFromID = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.RoutingAreaFromID.Value : -1,
                        AreaFromCode = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.Code : string.Empty,
                        AreaToID = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.RoutingAreaToID.Value : -1,
                        AreaToCode = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.Code : string.Empty,

                        ContractRoutingType = c.SYS_Var.ValueOfVar,
                        ContractRoutingTypeCode = c.SYS_Var.Code,
                        ContractRoutingTypeID = c.ContractRoutingTypeID,
                    }).OrderBy(c => c.SortOrder).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_Routing_Import(List<DTOFLMContractRouting_Import> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == contractID);
                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hơp đồng");

                    int CusID = objContract.CustomerID.Value;
                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;

                    var objLastOnFile = data.Where(c => c.ExcelSuccess && c.SortOrder > 0).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                    int lastOnFile = 0;
                    if (objLastOnFile != null && objLastOnFile.SortOrder > 0) lastOnFile = objLastOnFile.SortOrder;
                    if (lastOnFile > lastSortOrder) lastSortOrder = lastOnFile;
                    lastSortOrder++;

                    foreach (var item in data.Where(c => c.ExcelSuccess))
                    {
                        #region lưu cat routing(nếu là mới)
                        var objCAT = model.CAT_Routing.FirstOrDefault(c => c.ID == item.CATRoutingID);
                        if (objCAT == null)
                        {
                            objCAT = new CAT_Routing();
                            objCAT.CreatedBy = Account.UserName;
                            objCAT.CreatedDate = DateTime.Now;

                            objCAT.Code = item.CATRoutingCode;
                            objCAT.RoutingName = item.CATRoutingName;
                            objCAT.IsAreaLast = false;
                            objCAT.IsUse = true;
                            objCAT.IsLocation = false;
                            objCAT.IsChecked = false;

                            if (item.LocationFromID > 0)
                                objCAT.LocationFromID = item.LocationFromID;
                            else objCAT.LocationFromID = null;
                            if (item.LocationToID > 0)
                                objCAT.LocationToID = item.LocationToID;
                            else objCAT.LocationToID = null;

                            if (item.AreaFromID > 0)
                                objCAT.RoutingAreaFromID = item.AreaFromID;
                            else objCAT.RoutingAreaFromID = null;
                            if (item.AreaToID > 0)
                                objCAT.RoutingAreaToID = item.AreaToID;
                            else objCAT.RoutingAreaToID = null;

                            model.CAT_Routing.Add(objCAT);
                        }
                        else
                        {
                            var count = model.CUS_Routing.Count(c => c.RoutingID == objCAT.ID && c.CustomerID != objContract.CustomerID);

                            if (count == 0)
                            {
                                if (item.LocationFromID > 0)
                                    objCAT.LocationFromID = item.LocationFromID;
                                else objCAT.LocationFromID = null;
                                if (item.LocationToID > 0)
                                    objCAT.LocationToID = item.LocationToID;
                                else objCAT.LocationToID = null;

                                if (item.AreaFromID > 0)
                                    objCAT.RoutingAreaFromID = item.AreaFromID;
                                else objCAT.RoutingAreaFromID = null;
                                if (item.AreaToID > 0)
                                    objCAT.RoutingAreaToID = item.AreaToID;
                                else objCAT.RoutingAreaToID = null;
                            }
                        }
                        #endregion

                        #region lưu cus routing
                        if (!(item.CUSRoutingID > 0))
                        {
                            CUS_Routing objCus = new CUS_Routing();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = CusID;
                            objCus.CAT_Routing = objCAT;
                            objCus.Code = item.CATRoutingCode;
                            objCus.RoutingName = item.CATRoutingName;
                            model.CUS_Routing.Add(objCus);
                        }
                        #endregion

                        #region Lưu contract routing
                        var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == item.ContractRoutingID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;

                            //Xóa cung đường trong bảng giá khi đổi từ giá sang KPI hoac khi đổi phụ lục
                            if ((item.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypeKPI && obj.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice) || (obj.ContractTermID > 0 && obj.ContractTermID != item.ContractTermID))
                            {
                                HelperContract.CUSContract_Routing_RemoveInPrice(obj.ID, obj.ContractID, model);
                            }
                        }
                        else
                        {
                            obj = new CAT_ContractRouting();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.CAT_Routing = objCAT;
                            obj.ContractID = contractID;
                            model.CAT_ContractRouting.Add(obj);
                        }
                        obj.Code = item.ContractRoutingCode;
                        obj.RoutingName = item.ContractRoutingName;
                        obj.Zone = item.Zone;
                        obj.LeadTime = item.LeadTime;

                        if (item.SortOrder > 0)
                            obj.SortOrder = item.SortOrder;
                        else
                        {
                            obj.SortOrder = lastSortOrder;
                            lastSortOrder++;
                        }

                        if (item.ContractTermID > 0)
                            obj.ContractTermID = item.ContractTermID;
                        else obj.ContractTermID = null;

                        obj.ContractRoutingTypeID = item.ContractRoutingTypeID;
                        #endregion

                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMContractRoutingData FLMContract_RoutingByCus_List(int customerID, int contractID)
        {
            try
            {
                DTOFLMContractRoutingData result = new DTOFLMContractRoutingData();
                using (var model = new DataEntities())
                {
                    result.ListCUSRouting = model.CUS_Routing.Where(c => c.CustomerID == customerID).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        RoutingID = c.RoutingID,
                        Code = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        RoutingParentID = c.CAT_Routing.ParentID
                    }).ToList();
                    result.ListContractRouting = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        Code = c.Code,
                    }).ToList();
                    result.ListCATRouting = model.CAT_Routing.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                    }).ToList();
                    result.ListContractTerm = model.CAT_ContractTerm.Where(c => c.ContractID == contractID && c.IsAllRouting == false).Select(c => new DTOContractTerm
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TermName = c.TermName,
                        DisplayName = c.DisplayName,
                    }).ToList();

                    result.ListLocation = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location
                    }).ToList();
                    result.ListArea = model.CAT_RoutingArea.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_KPI_Save(List<DTOContractKPITime> data, int routingID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_ContractKPITime.FirstOrDefault(c => c.KPIID == item.KPIID && c.ContractRoutingID == routingID);
                        if (obj == null)
                        {
                            obj = new CAT_ContractKPITime();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractRoutingID = routingID;
                            obj.KPIID = item.KPIID;
                            model.CAT_ContractKPITime.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Expression = item.Expression;
                        obj.CompareField = item.CompareField;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMContract_KPI_Routing_List(string request, int contractID, int routingID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractRouting.Where(c => c.ContractID == contractID && c.ID != routingID).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        CATCode = c.CAT_Routing.Code,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        LeadTime = c.LeadTime,
                        Zone = c.Zone,
                        IsDelete = false
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContractRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DateTime? FLMContract_KPI_Check_Expression(string sExpression, KPIKPITime item, double zone, double leadTime, List<DTOContractKPITime> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckDate(sExpression, item, zone, leadTime, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool? FLMContract_KPI_Check_Hit(string sExpression, string sField, KPIKPITime item, double zone, double leadTime, List<DTOContractKPITime> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckBool(sExpression, sField, item, zone, leadTime, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_KPI_Routing_Apply(List<DTOCATContractRouting> data, int routingID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objRouting = model.CAT_ContractRouting.Where(c => c.ID == routingID).Select(c => new
                    {
                        ContractID = c.ContractID,
                        ListKPI = c.CAT_ContractKPITime.Select(o => new DTOContractKPITime
                        {
                            KPIID = o.KPIID,
                            Expression = o.Expression,
                            CompareField = o.CompareField
                        }).ToList()
                    }).FirstOrDefault();
                    if (objRouting != null)
                    {
                        foreach (var item in data)
                        {
                            foreach (var o in objRouting.ListKPI)
                            {
                                var obj = model.CAT_ContractKPITime.FirstOrDefault(c => c.KPIID == o.KPIID && c.ContractRoutingID == item.ID);
                                if (obj == null)
                                {
                                    obj = new CAT_ContractKPITime();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractRoutingID = item.ID;
                                    obj.KPIID = o.KPIID;
                                    model.CAT_ContractKPITime.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Expression = o.Expression;
                                obj.CompareField = o.CompareField;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_Routing_CATNotIn_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objCus = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int cusID = objCus != null && objCus.CustomerID > 0 ? objCus.CustomerID.Value : 0;
                    var lstID = model.CUS_Routing.Where(c => c.CustomerID == cusID).Select(c => c.RoutingID).ToList();
                    var query = model.CAT_Routing.Where(c => !string.IsNullOrEmpty(c.Code) && !lstID.Contains(c.ID)).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        RoutingID = c.ID,
                        ParentID = c.ParentID,
                        LocationFromID = c.LocationFromID,
                        LocationToID = c.LocationToID,
                        EDistance = c.EDistance,
                        EHours = c.EHours,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        RoutingAreaFromID = c.RoutingAreaFromID,
                        RoutingAreaToID = c.RoutingAreaToID,
                        IsAreaLast = c.IsAreaLast,
                        IsUse = c.IsUse,
                        LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                        LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                        ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_Routing_CATNotIn_Save(List<DTOCATRouting> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng");

                    int cusID = objContract.CustomerID > 0 ? objContract.CustomerID.Value : 0;
                    if (cusID == 0) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khách hàng");

                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == objContract.ID).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;

                    lastSortOrder++;

                    foreach (var item in data)
                    {
                        CUS_Routing objCus = new CUS_Routing();
                        objCus.CreatedBy = Account.UserName;
                        objCus.CreatedDate = DateTime.Now;
                        objCus.CustomerID = cusID;
                        objCus.RoutingID = item.RoutingID;
                        objCus.Code = item.Code;
                        objCus.RoutingName = item.RoutingName;
                        model.CUS_Routing.Add(objCus);

                        CAT_ContractRouting obj = new CAT_ContractRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        obj.RoutingID = item.RoutingID;
                        obj.SortOrder = lastSortOrder;
                        obj.ContractRoutingTypeID = -(int)SYSVarType.ContractRoutingTypePrice;
                        model.CAT_ContractRouting.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOContractTerm> FLMContract_Routing_ContractTermList(int contractID)
        {
            try
            {
                List<DTOContractTerm> result = new List<DTOContractTerm>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractTerm.Where(c => c.ContractID == contractID && c.IsAllRouting == false).Select(c => new DTOContractTerm
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TermName = c.TermName,
                        DisplayName = c.DisplayName,
                    }).ToList();
                    DTOContractTerm itemNull = new DTOContractTerm { ID = -1, Code = string.Empty, TermName = string.Empty, DisplayName = string.Empty };
                    result.Insert(0, itemNull);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region tạo mới cung duong trong hợp đồng
        public DTOCATRouting FLMContract_NewRouting_Get(int ID)
        {
            try
            {
                DTOCATRouting result = new DTOCATRouting { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Routing.Where(c => c.ID == ID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            ParentID = c.ParentID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            EDistance = c.EDistance,
                            EHours = c.EHours,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            RoutingAreaFromID = c.RoutingAreaFromID,
                            RoutingAreaToID = c.RoutingAreaToID,
                            IsAreaLast = c.IsAreaLast,
                            IsUse = c.IsUse,
                            LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                            LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                            AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                            AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                            IsLocation = c.LocationFromID.HasValue ? true : c.LocationToID.HasValue ? true : false,
                            IsArea = c.RoutingAreaFromID.HasValue ? true : c.RoutingAreaToID.HasValue ? true : false,
                            IsChangeAble = c.LocationFromID == null && c.LocationToID == null && c.RoutingAreaFromID == null && c.RoutingAreaToID == null,
                            ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                            Note = c.Note
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.IsUse = true;
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMContract_NewRouting_Save(DTOCATRouting item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Routing.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");
                    if ((item.RoutingAreaFromID < 0 && item.RoutingAreaToID < 0) || (item.RoutingAreaFromID > 0 && !(item.RoutingAreaToID > 0)) || (item.RoutingAreaToID > 0 && !(item.RoutingAreaFromID > 0)))
                        throw FaultHelper.BusinessFault(null, null, "Cung đường theo khu vực thiếu khu vực bắt đầu hoặc kết thúc");
                    if ((item.LocationFromID < 0 && item.LocationToID < 0) || (item.LocationFromID > 0 && !(item.LocationToID > 0)) || (item.LocationToID > 0 && !(item.LocationFromID > 0)))
                        throw FaultHelper.BusinessFault(null, null, "Cung đường theo điểm thiếu điểm bắt đầu hoặc kết thúc");

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hơp đồng ID: " + contractID);
                    int cusID = objContract.CustomerID > 0 ? objContract.CustomerID.Value : objContract.SYSCustomerID;

                    var obj = model.CAT_Routing.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Routing();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.IsAreaLast = false;
                        obj.IsUse = true;
                        model.CAT_Routing.Add(obj);
                    }
                    else
                    {
                        // Edit thì ko hiện IsAreaLast
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ParentID = null;
                    obj.LocationFromID = item.LocationFromID;
                    obj.LocationToID = item.LocationToID;
                    obj.EDistance = item.EDistance;
                    obj.EHours = item.EHours;
                    obj.Code = item.Code;
                    obj.RoutingName = item.RoutingName;
                    obj.RoutingAreaFromID = item.RoutingAreaFromID;
                    obj.RoutingAreaToID = item.RoutingAreaToID;

                    obj.Note = item.Note;
                    obj.IsLocation = false;
                    if (obj.LocationFromID > 0)
                        obj.IsLocation = true;

                    var objCus = model.CUS_Routing.FirstOrDefault(c => c.CustomerID == cusID && c.RoutingID == item.ID);
                    if (objCus == null)
                    {
                        objCus = new CUS_Routing();
                        objCus.CustomerID = cusID;
                        objCus.CAT_Routing = obj;
                        objCus.CreatedBy = Account.UserName;
                        objCus.CreatedDate = DateTime.Now;
                        model.CUS_Routing.Add(objCus);
                    }
                    else
                    {
                        objCus.ModifiedBy = Account.UserName;
                        objCus.ModifiedDate = DateTime.Now;
                    }
                    objCus.Code = item.Code;
                    objCus.RoutingName = item.RoutingName;

                    model.SaveChanges();

                    //if (obj.RoutingAreaFromID.HasValue)
                    //    RoutingAreaLocation_Update(model, obj.RoutingAreaFromID.Value);
                    //if (obj.RoutingAreaToID.HasValue)
                    //    RoutingAreaLocation_Update(model, obj.RoutingAreaToID.Value);

                    //model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //route by location
        public DTOResult FLMContract_NewRouting_LocationList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //route by area
        public DTOResult FLMContract_NewRouting_AreaList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingArea.Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRoutingArea>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public CATRoutingArea FLMContract_NewRouting_AreaGet(int ID)
        {
            try
            {
                CATRoutingArea result = new CATRoutingArea { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingArea.Where(c => c.ID == ID).Select(c => new CATRoutingArea
                        {
                            ID = c.ID,
                            Code = c.Code,
                            AreaName = c.AreaName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMContract_NewRouting_AreaSave(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_RoutingArea.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");

                    var obj = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_RoutingArea();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_RoutingArea.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.AreaName = item.AreaName;
                    obj.CodeNoUnicode = HelperString.RemoveSign4VietnameseString(obj.Code);
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_NewRouting_AreaDelete(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.CAT_Routing.Count > 0 || obj.CAT_Routing1.Count > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập cho khu vực này, không thể xóa!");

                        foreach (var temp in model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == obj.ID))
                            model.CAT_RoutingAreaDetail.Remove(temp);
                        foreach (var temp in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == obj.ID))
                            model.CAT_RoutingAreaLocation.Remove(temp);

                        model.CAT_RoutingArea.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_NewRouting_AreaRefresh(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    FLMContract_RoutingAreaLocation_Update(model, item.ID);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMContract_NewRouting_AreaDetailList(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID).Select(c => new DTOCATRoutingAreaDetail
                    {
                        ID = c.ID,
                        RoutingAreaID = c.RoutingAreaID,
                        ProvinceID = c.ProvinceID,
                        DistrictID = c.DistrictID,
                        WardID = c.WardID,
                        CountryID = c.CountryID,
                        CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                        WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                        ColID = c.ID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRoutingAreaDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATRoutingAreaDetail FLMContract_NewRouting_AreaDetailGet(int ID)
        {
            try
            {
                DTOCATRoutingAreaDetail result = new DTOCATRoutingAreaDetail { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingAreaDetail.Where(c => c.ID == ID).Select(c => new DTOCATRoutingAreaDetail
                        {
                            ID = c.ID,
                            RoutingAreaID = c.RoutingAreaID,
                            ProvinceID = c.ProvinceID,
                            DistrictID = c.DistrictID,
                            WardID = c.WardID,
                            CountryID = c.CountryID,
                            CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                            ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                            DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                            WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMContract_NewRouting_AreaDetailSave(DTOCATRoutingAreaDetail item, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item.ProvinceID == null)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập tỉnh thành!");

                    if (item.ProvinceID > 0 && item.DistrictID > 0)
                    {
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == null) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Đã có khu vực bao quát khu vực đã chọn"); ;
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == item.DistrictID && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Khu vực chi tiết này đã tồn tại!");
                    }
                    if (item.ProvinceID > 0 && !(item.DistrictID > 0))
                    {
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == null && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Khu vực chi tiết này đã tồn tại!"); ;
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID > 0 && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Đã tồn tại khu vực chi tiết, không thể thêm khu vực bao quát");
                    }

                    var obj = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_RoutingAreaDetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.RoutingAreaID = areaID;
                    obj.ProvinceID = item.ProvinceID > 0 ? item.ProvinceID : null;
                    obj.DistrictID = item.DistrictID > 0 ? item.DistrictID : null;
                    obj.WardID = item.WardID < 1 ? null : item.WardID;
                    obj.CountryID = item.CountryID;

                    if (obj.ID < 1)
                        model.CAT_RoutingAreaDetail.Add(obj);
                    model.SaveChanges();

                    if (model.CAT_Routing.Count(c => c.RoutingAreaFromID == areaID || c.RoutingAreaToID == areaID) > 0)
                    {
                        FLMContract_RoutingAreaLocation_Update(model, areaID);
                        model.SaveChanges();
                    }

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_NewRouting_AreaDetailDelete(DTOCATRoutingAreaDetail item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_RoutingAreaDetail.Remove(obj);
                        model.SaveChanges();
                        if (model.CAT_Routing.Count(c => c.RoutingAreaFromID == obj.RoutingAreaID || c.RoutingAreaToID == obj.RoutingAreaID) > 0)
                        {
                            FLMContract_RoutingAreaLocation_Update(model, obj.RoutingAreaID);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        private void FLMContract_RoutingAreaLocation_Update(DataEntities model, int areaID)
        {
            try
            {
                // Xóa area location cũ
                foreach (var item in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID))
                    model.CAT_RoutingAreaLocation.Remove(item);

                var lstWardID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.WardID.HasValue).Select(c => c.WardID.Value).Distinct().ToArray();
                var lstDistrictID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.DistrictID.HasValue && c.WardID == null).Select(c => c.DistrictID.Value).Distinct().ToArray();
                var lstProvinceID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.ProvinceID.HasValue && c.DistrictID == null && c.WardID == null).Select(c => c.ProvinceID.Value).Distinct().ToArray();

                var lstLocation = model.CAT_Location.Where(c => (c.WardID.HasValue && lstWardID.Contains(c.WardID.Value)) || lstDistrictID.Contains(c.DistrictID) || lstProvinceID.Contains(c.ProvinceID)).Select(c => c.ID).ToArray();
                foreach (var location in lstLocation)
                {
                    CAT_RoutingAreaLocation objLocation = new CAT_RoutingAreaLocation();
                    objLocation.CreatedBy = Account.UserName;
                    objLocation.CreatedDate = DateTime.Now;
                    objLocation.LocationID = location;
                    objLocation.RoutingAreaID = areaID;
                    model.CAT_RoutingAreaLocation.Add(objLocation);
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // area location
        public DTOResult FLMContract_NewRouting_AreaLocation_List(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => new DTOCATRoutingAreaLocation
                    {
                        ID = c.ID,
                        LocationID = c.CAT_Location.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        Country = c.CAT_Location.CAT_Country.CountryName,
                        Province = c.CAT_Location.CAT_Province.ProvinceName,
                        District = c.CAT_Location.CAT_District.DistrictName,
                        Ward = c.CAT_Location.CAT_Ward != null ? c.CAT_Location.CAT_Ward.WardName : "",
                        CreatedDate = c.CreatedDate,
                        TypeOfPartnerName = "",
                    }).ToDataSourceResult(CreateRequest(request));
                    foreach (DTOCATRoutingAreaLocation item in query.Data)
                    {
                        var lstTypeOfPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID).Select(c => c.CAT_Partner.SYS_Var.ValueOfVar).Distinct().ToList();
                        item.TypeOfPartnerName = string.Join(", ", lstTypeOfPartner);
                    }
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRoutingAreaLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_NewRouting_AreaLocationNotIn_List(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    List<int> hasList = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => c.LocationID).ToList();
                    if (hasList != null)
                    {
                        var query = model.CAT_Location.Where(c => !hasList.Contains(c.ID)).Select(c => new DTOCATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            CountryName = c.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                            TypeOfPartnerName = "",
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        foreach (DTOCATLocation item in query.Data)
                        {
                            var lstTypeOfPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID).Select(c => c.CAT_Partner.SYS_Var.ValueOfVar).Distinct().ToList();
                            item.TypeOfPartnerName = string.Join(", ", lstTypeOfPartner);
                        }
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                    else
                    {
                        var query = model.CAT_Location.Select(c => new DTOCATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            CountryName = c.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                            TypeOfPartnerName = "",
                        }).ToDataSourceResult(CreateRequest(request));
                        foreach (DTOCATLocation item in query.Data)
                        {
                            var lstTypeOfPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID).Select(c => c.CAT_Partner.SYS_Var.ValueOfVar).Distinct().ToList();
                            item.TypeOfPartnerName = string.Join(", ", lstTypeOfPartner);
                        }
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_NewRouting_AreaLocationNotIn_Save(int areaID, List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objRoutingArea = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == areaID);
                    if (objRoutingArea != null)
                    {
                        foreach (var id in lstID)
                        {
                            var objLocation = model.CAT_Location.FirstOrDefault(c => c.ID == id);
                            if (objLocation != null)
                            {
                                var obj = new CAT_RoutingAreaLocation();
                                obj.LocationID = id;
                                obj.RoutingAreaID = areaID;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.CAT_RoutingAreaLocation.Add(obj);
                            }

                        }

                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khu vực");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_NewRouting_AreaLocation_Delete(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var id in lstID)
                    {
                        var obj = model.CAT_RoutingAreaLocation.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            model.CAT_RoutingAreaLocation.Remove(obj);
                        }

                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_NewRouting_AreaLocation_Copy(int areaID, List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var lstLocationID = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => c.LocationID).Distinct().ToList();

                    foreach (var ID in lstID)
                    {
                        foreach (var item in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == ID))
                        {
                            if (lstLocationID.Count(c => c == item.LocationID) == 0)
                            {
                                CAT_RoutingAreaLocation obj = new CAT_RoutingAreaLocation();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.RoutingAreaID = areaID;
                                obj.LocationID = item.LocationID;
                                model.CAT_RoutingAreaLocation.Add(obj);
                            }
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        public SYSExcel FLMContract_Routing_ExcelOnline_Init(int contractID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new
                        {
                            CATRoutingID = c.RoutingID,
                            CATRoutingCode = c.CAT_Routing.Code,
                            CATRoutingName = c.CAT_Routing.RoutingName,
                            ContractRoutingID = c.ID,
                            ContractRoutingCode = c.Code,
                            ContractRoutingName = c.RoutingName,
                            Zone = c.Zone,
                            LeadTime = c.LeadTime,
                            LeadTimeETA = c.LeadTimeETA,
                            LeadTimeETD = c.LeadTimeETD,
                            SortOrder = c.SortOrder,
                            ContractTermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                            ContractTermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                            IsArea = c.CAT_Routing.RoutingAreaFromID > 0 ? true : false,

                            LocationFromID = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.LocationFromID.Value : -1,
                            LocationFromCode = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.CAT_Location.Code : string.Empty,
                            LocationToID = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.LocationToID.Value : -1,
                            LocationToCode = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.CAT_Location1.Code : string.Empty,

                            AreaFromID = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.RoutingAreaFromID.Value : -1,
                            AreaFromCode = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.Code : string.Empty,
                            AreaToID = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.RoutingAreaToID.Value : -1,
                            AreaToCode = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.Code : string.Empty,

                            ContractRoutingType = c.SYS_Var.ValueOfVar,
                            ContractRoutingTypeCode = c.SYS_Var.Code,
                            ContractRoutingTypeID = c.ContractRoutingTypeID,
                        }).OrderBy(c => c.SortOrder).ToList();

                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[15];
                        arrColumnWidth[0] = 80;
                        for (int i = 1; i < 15; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(0, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(1, "Mã hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(2, "Tên hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(3, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(4, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(5, "Zone", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(6, "Leadtime", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(7, "Phụ lục hợp đồng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(8, "Mã loại cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(9, "Loại cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(10, "Theo khu vực", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(11, "Khu vực đi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(12, "Khu vực đến", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(13, "Điểm đi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(14, "Điểm đến", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(item.SortOrder));
                            cells.Add(HelperExcel.NewCell(item.CATRoutingCode));
                            cells.Add(HelperExcel.NewCell(item.CATRoutingName));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingCode));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingName));
                            cells.Add(HelperExcel.NewCell(item.Zone));
                            cells.Add(HelperExcel.NewCell(item.LeadTime));
                            cells.Add(HelperExcel.NewCell(item.ContractTermCode));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingTypeCode));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingType));
                            var IsArea = item.IsArea ? "x" : string.Empty;
                            cells.Add(HelperExcel.NewCell(IsArea));
                            cells.Add(HelperExcel.NewCell(item.AreaFromCode));
                            cells.Add(HelperExcel.NewCell(item.AreaToCode));
                            cells.Add(HelperExcel.NewCell(item.LocationFromCode));
                            cells.Add(HelperExcel.NewCell(item.LocationToCode));

                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMContract_Routing_ExcelOnline_Change(int contractID, int customerID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckTermID = colData++;
                    int colCheckTypeRouteID = colData++;
                    int colCheckAreaFromID = colData++;
                    int colCheckAreaToID = colData++;
                    int colCheckLocationFromID = colData++;
                    int colCheckLocationToID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    var lstCATCode = new List<string>();
                    var lstCUSCode = new List<string>();

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {

                            if (eRow.Cells[colData + 1].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData + 1].Value.ToString()))
                            {
                                lstCUSCode.Add(eRow.Cells[colData + 1].Value.ToString());
                            }

                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCATCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 0;

                        string dataSortOrder = HelperExcel.GetString(checkRow, colData++);
                        string dataCATCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATName = HelperExcel.GetString(checkRow, colData++);
                        string dataConCode = HelperExcel.GetString(checkRow, colData++);
                        string dataConName = HelperExcel.GetString(checkRow, colData++);
                        string dataZone = HelperExcel.GetString(checkRow, colData++);
                        string dataLeadtime = HelperExcel.GetString(checkRow, colData++);
                        string dataContractTerm = HelperExcel.GetString(checkRow, colData++);
                        string dataContractRoutingTypeCode = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataIsArea = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaTo = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationTo = HelperExcel.GetString(checkRow, colData++);

                        bool isContinue = true;
                        //Cung đường
                        //Mã hệ thống
                        isContinue = HelperExcel.Valid(dataCATCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 0, lstMessageError, true, 50);

                        if (isContinue)
                        {
                            var checkCAT = model.CAT_Routing.FirstOrDefault(c => c.Code == dataCATCode);
                            var CATId = 0;
                            if (checkCAT != null && isContinue)
                            {
                                CATId = checkCAT.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Contains(dataCATCode))
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else if (isContinue)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Contains(dataCATCode))
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            var CUSId = 0;
                            //Mã cung đường khách hàng
                            var checkCUS = model.CUS_Routing.FirstOrDefault(c => c.RoutingID == CATId && c.CustomerID == customerID);
                            if (checkCUS != null && isContinue)
                            {
                                CUSId = checkCUS.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }
                            else if (isContinue)
                            {
                                CUSId = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }

                            if (isContinue)
                                isContinue = HelperExcel.Valid(dataConCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 2, lstMessageError, true, 50);

                            if (isContinue)
                            {
                                //kiem tra ma trong hop dong
                                var ContractRoutingID = 0;
                                var checkContract = model.CAT_ContractRouting.FirstOrDefault(c => c.Code == dataConCode && c.ContractID == contractID);
                                if (checkContract == null && isContinue)
                                {
                                    //kiem tra tren file
                                    if (lstCUSCode.Contains(dataConCode))
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                        isContinue = false;
                                        if (isContinue)
                                        {
                                            if (model.CAT_ContractRouting.Where(c => c.Code != dataConCode && c.ContractID == contractID && c.RoutingID == CATId).Count() > 0)
                                            {
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                    }
                                }
                                else if (isContinue)
                                {
                                    if (checkContract.RoutingID != checkCAT.ID && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng trong hợp đồng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(4, lstMessageError));
                                        isContinue = false;
                                    }
                                    else if (isContinue)
                                    {
                                        ContractRoutingID = checkContract.ID;
                                        if (lstCUSCode.Contains(dataConCode) && isContinue)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                            isContinue = false;
                                        }
                                        else if (isContinue)
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                        }
                                    }
                                }
                            }
                        }

                        //Zone
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataZone, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 5, lstMessageError, false);

                        //Leadtime
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataLeadtime, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 6, lstMessageError, false);

                        //SortOrder
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 7, lstMessageError, false);

                        var TermID = 0;
                        //Term
                        if (!string.IsNullOrEmpty(dataContractTerm) && isContinue)
                        {
                            var checkTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.Code == dataContractTerm && c.ContractID == contractID && !c.IsAllRouting);
                            if (checkTerm != null)
                            {
                                TermID = checkTerm.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Phụ lục không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                isContinue = false;
                            }
                        }
                        else if (isContinue)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                        }

                        var ContractRoutingTypeID = 0;
                        //check loai cung đường
                        if (string.IsNullOrEmpty(dataContractRoutingTypeCode) && isContinue)
                        {
                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã loại cung đường");
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                            isContinue = false;
                        }
                        else if (isContinue)
                        {
                            var lstContractRoutingType = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ContractRoutingType);
                            var checkType = lstContractRoutingType.FirstOrDefault(c => c.Code == dataContractRoutingTypeCode);
                            if (checkType != null)
                            {
                                ContractRoutingTypeID = checkType.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeRouteID, ContractRoutingTypeID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại cung đường không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                isContinue = false;
                            }
                        }

                        var IsArea = false;
                        //theo khu vực/ điểm
                        if (string.IsNullOrEmpty(dataIsArea) && isContinue)
                            IsArea = false;
                        else
                            IsArea = true;


                        var AreaFromID = 0;
                        var AreaToID = 0;
                        var LocationFromID = 0;
                        var LocationToID = 0;
                        //check khu vuc
                        if (IsArea && isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataAreaFrom) && isContinue)
                            {
                                var checkArea = model.CAT_RoutingArea.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataAreaFrom);
                                if (checkArea != null)
                                {
                                    AreaFromID = checkArea.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataAreaTo))
                                {
                                    var checkArea = model.CAT_RoutingArea.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataAreaTo);
                                    if (checkArea != null)
                                    {
                                        AreaToID = checkArea.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            if (isContinue)
                            {
                                LocationFromID = LocationToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                            }

                        }
                        else if (isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataLocationFrom) && isContinue)
                            {
                                var checkLo = model.CAT_Location.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataLocationFrom);
                                if (checkLo != null)
                                {
                                    LocationFromID = checkLo.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataLocationTo))
                                {
                                    var checkLo = model.CAT_Location.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataLocationTo);
                                    if (checkLo != null)
                                    {
                                        LocationToID = checkLo.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            if (isContinue)
                            {
                                AreaFromID = AreaToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMContract_Routing_ExcelOnline_Import(int contractID, int customerID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOFLMContractRoutingData resRouting = new DTOFLMContractRoutingData();
                    resRouting = FLMContract_RoutingByCus_List(customerID, contractID);

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckTermID = colData++;
                    int colCheckTypeRouteID = colData++;
                    int colCheckAreaFromID = colData++;
                    int colCheckAreaToID = colData++;
                    int colCheckLocationFromID = colData++;
                    int colCheckLocationToID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.CAT_Field.Select(c => new { c.ID, c.Code }).ToList();
                    var lstContractRoutingType = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ContractRoutingType);

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCATCode = new List<string>();
                    var lstCUSCode = new List<string>();

                    colData = 1;
                    failCurrent = 0;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData + 1].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData + 1].Value.ToString()))
                            {
                                lstCUSCode.Add(eRow.Cells[2].Value.ToString());
                            }

                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCATCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 0;
                        string dataSortOrder = HelperExcel.GetString(checkRow, colData++);
                        string dataCATCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATName = HelperExcel.GetString(checkRow, colData++);
                        string dataConCode = HelperExcel.GetString(checkRow, colData++);
                        string dataConName = HelperExcel.GetString(checkRow, colData++);
                        string dataZone = HelperExcel.GetString(checkRow, colData++);
                        string dataLeadtime = HelperExcel.GetString(checkRow, colData++);
                        string dataContractTerm = HelperExcel.GetString(checkRow, colData++);
                        string dataContractRoutingTypeCode = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataIsArea = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaTo = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationTo = HelperExcel.GetString(checkRow, colData++);

                        bool isContinue = true;

                        //Cung đường
                        //Mã hệ thống
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataCATCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 0, lstMessageError, true, 50);

                        if (isContinue)
                        {
                            var checkCAT = resRouting.ListCATRouting.FirstOrDefault(c => c.Code == dataCATCode);
                            var CATId = 0;
                            if (checkCAT != null && isContinue)
                            {
                                CATId = checkCAT.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Where(c => c == dataCATCode).Count() > 1)
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else if (isContinue)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Where(c => c == dataCATCode).Count() > 1)
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            var CUSId = 0;
                            //Mã cung đường khách hàng
                            var checkCUS = resRouting.ListCUSRouting.FirstOrDefault(c => c.RoutingID == CATId && c.CustomerID == customerID);
                            if (checkCUS != null && isContinue)
                            {
                                CUSId = checkCUS.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }
                            else if (isContinue)
                            {
                                CUSId = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }

                            if (isContinue)
                                isContinue = HelperExcel.Valid(dataConCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 2, lstMessageError, true, 50);

                            if (isContinue)
                            {
                                //kiem tra ma trong hop dong
                                var ContractRoutingID = 0;
                                var checkContract = resRouting.ListContractRouting.FirstOrDefault(c => c.Code == dataConCode);
                                if (checkContract == null && isContinue)
                                {
                                    //kiem tra tren file
                                    if (lstCUSCode.Where(c => c == dataConCode).Count() > 1)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                        isContinue = false;
                                        if (isContinue)
                                        {
                                            if (resRouting.ListContractRouting.Where(c => c.Code != dataConCode && c.RoutingID == CATId).Count() > 0)
                                            {
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                    }
                                }
                                else if (isContinue)
                                {
                                    if (checkContract.RoutingID != checkCAT.ID && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng trong hợp đồng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(4, lstMessageError));
                                        isContinue = false;
                                    }
                                    else if (isContinue)
                                    {
                                        ContractRoutingID = checkContract.ID;
                                        if (lstCUSCode.Where(c => c == dataConCode).Count() > 1 && isContinue)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                            isContinue = false;
                                        }
                                        else if (isContinue)
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                        }
                                    }
                                }
                            }
                        }

                        //Zone
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataZone, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 5, lstMessageError, false);

                        //Leadtime
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataLeadtime, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 6, lstMessageError, false);

                        //SortOrder
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 7, lstMessageError, false);

                        var TermID = 0;
                        //Term
                        if (!string.IsNullOrEmpty(dataContractTerm) && isContinue)
                        {
                            var checkTerm = resRouting.ListContractTerm.FirstOrDefault(c => c.Code == dataContractTerm && !c.IsAllRouting);
                            if (checkTerm != null)
                            {
                                TermID = checkTerm.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Phụ lục không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                isContinue = false;
                            }
                        }
                        else if (isContinue)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                        }

                        var ContractRoutingTypeID = 0;
                        //check loai cung đường
                        if (string.IsNullOrEmpty(dataContractRoutingTypeCode) && isContinue)
                        {
                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã loại cung đường");
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                            isContinue = false;
                        }
                        else if (isContinue)
                        {
                            var checkType = lstContractRoutingType.FirstOrDefault(c => c.Code == dataContractRoutingTypeCode);
                            if (checkType != null)
                            {
                                ContractRoutingTypeID = checkType.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeRouteID, ContractRoutingTypeID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại cung đường không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                isContinue = false;
                            }
                        }

                        var IsArea = false;
                        //theo khu vực/ điểm
                        if (string.IsNullOrEmpty(dataIsArea) && isContinue)
                            IsArea = false;
                        else
                            IsArea = true;


                        var AreaFromID = 0;
                        var AreaToID = 0;
                        var LocationFromID = 0;
                        var LocationToID = 0;
                        //check khu vuc
                        if (IsArea && isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataAreaFrom) && isContinue)
                            {
                                var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == dataAreaFrom);
                                if (checkArea != null)
                                {
                                    AreaFromID = checkArea.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataAreaTo))
                                {
                                    var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == dataAreaTo);
                                    if (checkArea != null)
                                    {
                                        AreaToID = checkArea.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            if (isContinue)
                            {
                                LocationFromID = LocationToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                            }
                        }
                        else if (isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataLocationFrom) && isContinue)
                            {
                                var checkLo = resRouting.ListLocation.FirstOrDefault(c => c.Code == dataLocationFrom);
                                if (checkLo != null)
                                {
                                    LocationFromID = checkLo.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataLocationTo))
                                {
                                    var checkLo = resRouting.ListLocation.FirstOrDefault(c => c.Code == dataLocationTo);
                                    if (checkLo != null)
                                    {
                                        LocationToID = checkLo.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            if (isContinue)
                            {
                                AreaFromID = AreaToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMContract_Routing_ExcelOnline_Approve(long id, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckTermID = colData++;
                    int colCheckTypeRouteID = colData++;
                    int colCheckAreaFromID = colData++;
                    int colCheckAreaToID = colData++;
                    int colCheckLocationFromID = colData++;
                    int colCheckLocationToID = colData++;

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == contractID);
                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hơp đồng");
                    int CustomerID = objContract.CustomerID.Value;
                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;
                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    var objLastOnFile = lstRow.Where(c => c.Cells[0].Value != null && !string.IsNullOrEmpty(c.Cells[0].Value.ToString()) && c.Cells[0].Value.ToString().All(Char.IsNumber) && Convert.ToInt32(c.Cells[0].Value) > 0).OrderByDescending(c => Convert.ToInt32(HelperExcel.GetString(c, 0))).FirstOrDefault();
                    int lastOnFile = 0;
                    if (objLastOnFile != null && Convert.ToInt32(objLastOnFile.Cells[0].Value) > 0) lastOnFile = Convert.ToInt32(objLastOnFile.Cells[0].Value);
                    if (lastOnFile > lastSortOrder) lastSortOrder = lastOnFile;
                    lastSortOrder++;

                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 0;
                            string dataSortOrder = HelperExcel.GetString(checkRow, colData++);
                            string dataCATCode = HelperExcel.GetString(checkRow, colData++);
                            string dataCATName = HelperExcel.GetString(checkRow, colData++);
                            string dataConCode = HelperExcel.GetString(checkRow, colData++);
                            string dataConName = HelperExcel.GetString(checkRow, colData++);
                            string dataZone = HelperExcel.GetString(checkRow, colData++);
                            string dataLeadtime = HelperExcel.GetString(checkRow, colData++);
                            string dataContractTerm = HelperExcel.GetString(checkRow, colData++);
                            string dataContractRoutingTypeCode = HelperExcel.GetString(checkRow, colData++);
                            colData++;
                            string dataIsArea = HelperExcel.GetString(checkRow, colData++);
                            string dataAreaFrom = HelperExcel.GetString(checkRow, colData++);
                            string dataAreaTo = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationFrom = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationTo = HelperExcel.GetString(checkRow, colData++);

                            string dataContractRoutingID = HelperExcel.GetString(checkRow, colCheckID);
                            string dataCATID = HelperExcel.GetString(checkRow, colCheckCATID);
                            string dataCUSID = HelperExcel.GetString(checkRow, colCheckCUSID);
                            string dataTermID = HelperExcel.GetString(checkRow, colCheckTermID);
                            string dataTypeRouteID = HelperExcel.GetString(checkRow, colCheckTypeRouteID);
                            string dataAreaFromID = HelperExcel.GetString(checkRow, colCheckAreaFromID);
                            string dataAreaToID = HelperExcel.GetString(checkRow, colCheckAreaToID);
                            string dataLocationFromID = HelperExcel.GetString(checkRow, colCheckLocationFromID);
                            string dataLocationToID = HelperExcel.GetString(checkRow, colCheckLocationToID);

                            int contractRoutingID = Convert.ToInt32(dataContractRoutingID);
                            int CATID = Convert.ToInt32(dataCATID);
                            int CUSID = Convert.ToInt32(dataCUSID);
                            int termID = Convert.ToInt32(dataTermID);
                            int typeRouteID = Convert.ToInt32(dataTypeRouteID);
                            int areaFromID = Convert.ToInt32(dataAreaFromID);
                            int areaToID = Convert.ToInt32(dataAreaToID);
                            int locationFromID = Convert.ToInt32(dataLocationFromID);
                            int locationToID = Convert.ToInt32(dataLocationToID);

                            #region lưu cat routing(nếu là mới)
                            var objCAT = model.CAT_Routing.FirstOrDefault(c => c.ID == CATID);
                            if (objCAT == null)
                            {
                                objCAT = new CAT_Routing();
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;

                                objCAT.Code = dataCATCode;
                                objCAT.RoutingName = dataCATName;
                                objCAT.IsAreaLast = false;
                                objCAT.IsUse = true;
                                objCAT.IsLocation = false;
                                objCAT.IsChecked = false;

                                if (locationFromID > 0)
                                    objCAT.LocationFromID = locationFromID;
                                else objCAT.LocationFromID = null;
                                if (locationToID > 0)
                                    objCAT.LocationToID = locationToID;
                                else objCAT.LocationToID = null;

                                if (areaFromID > 0)
                                    objCAT.RoutingAreaFromID = areaFromID;
                                else objCAT.RoutingAreaFromID = null;
                                if (areaToID > 0)
                                    objCAT.RoutingAreaToID = areaToID;
                                else objCAT.RoutingAreaToID = null;

                                model.CAT_Routing.Add(objCAT);
                            }
                            else
                            {
                                if (model.CUS_Routing.Where(c => c.RoutingID == CATID && c.CustomerID != CustomerID).Count() > 0)
                                {
                                    bool isError = true;
                                    if (isError && locationFromID > 0 && objCAT.LocationFromID != locationFromID)
                                        isError = false;
                                    if (isError && locationToID > 0 && objCAT.LocationToID != locationToID)
                                        isError = false;
                                    if (isError && areaFromID > 0 && objCAT.RoutingAreaFromID != areaFromID)
                                        isError = false;
                                    if (isError && areaToID > 0 && objCAT.RoutingAreaToID != areaToID)
                                        isError = false;
                                    if (!isError)
                                    {
                                        throw FaultHelper.BusinessFault(null, null, "[Dòng" + (checkRow.Index + 1) + "]Cung đường đã được khác hàng khác sử dụng không được thay đổi!");
                                    }
                                }
                                else
                                {
                                    if (locationFromID > 0)
                                        objCAT.LocationFromID = locationFromID;
                                    else objCAT.LocationFromID = null;
                                    if (locationToID > 0)
                                        objCAT.LocationToID = locationToID;
                                    else objCAT.LocationToID = null;

                                    if (areaFromID > 0)
                                        objCAT.RoutingAreaFromID = areaFromID;
                                    else objCAT.RoutingAreaFromID = null;
                                    if (areaToID > 0)
                                        objCAT.RoutingAreaToID = areaToID;
                                    else objCAT.RoutingAreaToID = null;
                                }
                            }

                            #endregion

                            #region lưu cus routing
                            if (!(CUSID > 0))
                            {
                                CUS_Routing objCus = new CUS_Routing();
                                objCus.CreatedBy = Account.UserName;
                                objCus.CreatedDate = DateTime.Now;
                                objCus.CustomerID = CustomerID;
                                objCus.CAT_Routing = objCAT;
                                objCus.Code = dataCATCode;
                                objCus.RoutingName = dataCATName;
                                model.CUS_Routing.Add(objCus);
                            }
                            #endregion

                            #region Lưu contract routing
                            var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == contractRoutingID);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;

                                //Xóa cung đường trong bảng giá khi đổi từ giá sang KPI
                                if ((typeRouteID == -(int)SYSVarType.ContractRoutingTypeKPI && obj.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice) || (obj.ContractTermID > 0 && obj.ContractTermID != termID))
                                {
                                    HelperContract.CUSContract_Routing_RemoveInPrice(obj.ID, obj.ContractID, model);
                                }
                            }
                            else
                            {
                                obj = new CAT_ContractRouting();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.CAT_Routing = objCAT;
                                obj.ContractID = contractID;
                                model.CAT_ContractRouting.Add(obj);
                            }
                            obj.Code = dataConCode;
                            obj.RoutingName = dataConName;
                            obj.Zone = !string.IsNullOrEmpty(dataZone) ? (double?)Convert.ToDouble(dataZone) : null;
                            obj.LeadTime = !string.IsNullOrEmpty(dataLeadtime) ? (double?)Convert.ToDouble(dataLeadtime) : null;

                            if (!string.IsNullOrEmpty(dataSortOrder))
                            {
                                int sortOrder = Convert.ToInt32(dataSortOrder);
                                if (sortOrder > 0)
                                    obj.SortOrder = sortOrder;
                                else
                                {
                                    obj.SortOrder = lastSortOrder;
                                    lastSortOrder++;
                                }
                            }
                            else
                            {
                                obj.SortOrder = lastSortOrder;
                                lastSortOrder++;
                            }

                            if (termID > 0)
                                obj.ContractTermID = termID;
                            else obj.ContractTermID = null;

                            obj.ContractRoutingTypeID = typeRouteID;
                            #endregion
                        }
                        model.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Contract Setting

        public void FLMContractSetting_Save(string setting, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);

                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ID:" + contractID);
                    else
                    {
                        objContract.ModifiedBy = Account.UserName;
                        objContract.ModifiedDate = DateTime.Now;

                        objContract.ExprFCLAllocationPrice = setting;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
        }

        public void FLMContract_Setting_TypeOfSGroupProductChangeSave(int typeID, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);

                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ID:" + contractID);
                    else
                    {
                        objContract.ModifiedBy = Account.UserName;
                        objContract.ModifiedDate = DateTime.Now;

                        if (typeID > 0)
                        {
                            objContract.TypeOfSGroupProductChangeID = typeID;
                        }
                        else
                        {
                            objContract.TypeOfSGroupProductChangeID = null;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
        }

        public void FLMContract_Setting_TypeOfRunLevelSave(int typeID, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ID:" + contractID);
                    else
                    {
                        objContract.ModifiedBy = Account.UserName;
                        objContract.ModifiedDate = DateTime.Now;
                        if (objContract.TypeOfRunLevelID != typeID)
                        {
                            foreach (var term in model.CAT_ContractTerm.Where(c => c.ContractID == objContract.ID))
                            {
                                //xoa bảng giá của term
                                foreach (var price in model.CAT_Price.Where(c => c.ContractTermID == term.ID))
                                {
                                    #region xoa service và giá container
                                    foreach (var service in model.CAT_PriceCOService.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceCOService.Remove(service);
                                    foreach (var con in model.CAT_PriceCOContainer.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceCOContainer.Remove(con);
                                    #endregion

                                    #region xoa phu thu
                                    foreach (var service in model.CAT_PriceDIEx.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var group in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == service.ID))
                                            model.CAT_PriceDIExGroupLocation.Remove(group);
                                        foreach (var gop in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == service.ID))
                                            model.CAT_PriceDIExGroupProduct.Remove(gop);
                                        foreach (var group in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == service.ID))
                                            model.CAT_PriceDIExRouting.Remove(group);

                                        //xóa fin_temp
                                        foreach (var fin in model.FIN_Temp.Where(c => c.PriceDIExID == service.ID))
                                            model.FIN_Temp.Remove(fin);

                                        model.CAT_PriceDIEx.Remove(service);
                                    }
                                    #endregion

                                    //xoa bang gia thuong
                                    foreach (var priceltl in model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceDIGroupProduct.Remove(priceltl);
                                    foreach (var priceftl in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceGroupVehicle.Remove(priceftl);

                                    //xoa bang gia bac thang
                                    foreach (var detail in model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceDILevelGroupProduct.Remove(detail);
                                    foreach (var detail in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceGVLevelGroupVehicle.Remove(detail);

                                    //xoa moq
                                    foreach (var moq in model.CAT_PriceDIMOQ.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var detail in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.CAT_PriceDIMOQGroupLocation.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.CAT_PriceDIMOQGroupProduct.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.CAT_PriceDIMOQRouting.Remove(detail);


                                        //xóa fin_temp
                                        foreach (var fin in model.FIN_Temp.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.FIN_Temp.Remove(fin);

                                        model.CAT_PriceDIMOQ.Remove(moq);
                                    }

                                    //xóa boc xếp
                                    foreach (var load in model.CAT_PriceDILoad.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == load.ID))
                                            model.CAT_PriceDILoadDetail.Remove(detail);

                                        model.CAT_PriceDILoad.Remove(load);
                                    }

                                    //xoa moq boc xep
                                    foreach (var moq in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var detail in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.CAT_PriceDIMOQLoadRouting.Remove(detail);

                                        //xóa fin_temp
                                        foreach (var fin in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.FIN_Temp.Remove(fin);

                                        model.CAT_PriceDIMOQLoad.Remove(moq);
                                    }

                                    model.CAT_Price.Remove(price);
                                }
                            }

                            //xóa thiết lập level

                            foreach (var setting in model.CAT_ContractLevel.Where(c => c.ContractID == objContract.ID))
                            {
                                model.CAT_ContractLevel.Remove(setting);
                            }
                        }
                        if (typeID > 0)
                            objContract.TypeOfRunLevelID = typeID;
                        else objContract.TypeOfRunLevelID = null;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOResult FLMContract_Setting_GOVList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractGroupVehicle
                    {
                        ID = c.ID,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOCATContractGroupVehicle>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATContractGroupVehicle FLMContract_Setting_GOVGet(int id)
        {
            try
            {
                DTOCATContractGroupVehicle result = new DTOCATContractGroupVehicle();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractGroupVehicle.Where(c => c.ID == id).Select(c => new DTOCATContractGroupVehicle
                    {
                        ID = c.ID,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName,
                        SortOrder = c.SortOrder
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_Setting_GOVSave(DTOCATContractGroupVehicle item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractGroupVehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thiết lập ID:" + item.ID);
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.SortOrder = item.SortOrder;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_Setting_GOVDeleteList(List<int> lst, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng");
                    foreach (var govID in lst)
                    {
                        var obj = model.CAT_ContractGroupVehicle.FirstOrDefault(c => c.ID == govID);
                        if (obj != null)
                        {
                            //bang gia bac thang
                            if (objContract.TypeOfRunLevelID > 0)
                            {
                                foreach (var level in model.CAT_ContractLevel.Where(c => c.ContractID == objContract.ID && c.GroupOfVehicleID > 0 && c.GroupOfVehicleID == obj.ID))
                                {
                                    foreach (var price in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.ContractLevelID == level.ID && c.CAT_Price.CAT_ContractTerm.ContractID == objContract.ID))
                                    {
                                        model.CAT_PriceGVLevelGroupVehicle.Remove(price);
                                    }
                                    model.CAT_ContractLevel.Remove(level);
                                }
                            }
                            else // bang gia thường
                            {
                                foreach (var price in model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.CAT_ContractTerm.ContractID == objContract.ID && c.GroupOfVehicleID == obj.ID))
                                {
                                    model.CAT_PriceGroupVehicle.Remove(price);
                                }
                            }

                            model.CAT_ContractGroupVehicle.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMContract_Setting_GOVNotInList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => c.GroupOfVehicleID).Distinct().ToList();
                    var query = model.CAT_GroupOfVehicle.Where(c => !lisGOV.Contains(c.ID)).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Ton = c.Ton,
                        GroupName = c.GroupName
                    }).OrderBy(c => c.Ton).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATGroupOfVehicle>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_Setting_GOVNotInSave(List<int> lst, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var gov in lst)
                    {
                        CAT_ContractGroupVehicle obj = new CAT_ContractGroupVehicle();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        obj.GroupOfVehicleID = gov;
                        obj.SortOrder = 1;
                        model.CAT_ContractGroupVehicle.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOResult FLMContract_Setting_LevelList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractLevel.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleCode = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                        DateEnd = c.DateEnd,
                        DateStart = c.DateStart,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOCATContractLevel>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATContractLevel FLMContract_Setting_LevelGet(int id)
        {
            try
            {
                DTOCATContractLevel result = new DTOCATContractLevel();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_ContractLevel.Where(c => c.ID == id).Select(c => new DTOCATContractLevel
                        {
                            ID = c.ID,
                            Code = c.Code,
                            LevelName = c.LevelName,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            GroupOfVehicleID = c.GroupOfVehicleID,
                            GroupOfVehicleCode = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                            DateEnd = c.DateEnd,
                            DateStart = c.DateStart,
                            SortOrder = c.SortOrder
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_Setting_LevelSave(DTOCATContractLevel item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_ContractLevel.Count(c => c.ID != item.ID && c.Code == item.Code && c.ContractID == contractID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã bậc giá đã sử dụng");
                    var obj = model.CAT_ContractLevel.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_ContractLevel();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        model.CAT_ContractLevel.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.LevelName = item.LevelName;
                    obj.Ton = item.Ton;
                    obj.CBM = item.CBM;
                    obj.Quantity = item.Quantity;
                    obj.GroupOfVehicleID = item.GroupOfVehicleID;
                    obj.DateEnd = item.DateEnd;
                    obj.DateStart = item.DateStart;
                    obj.SortOrder = item.SortOrder;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_Setting_LevelDeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var levelID in lst)
                    {
                        var obj = model.CAT_ContractLevel.FirstOrDefault(c => c.ID == levelID);
                        if (obj != null) model.CAT_ContractLevel.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<CATGroupOfVehicle> FLMContract_Setting_Level_GOVList(int contractID)
        {
            try
            {
                List<CATGroupOfVehicle> result = new List<CATGroupOfVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.GroupOfVehicleID,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        Code = c.CAT_GroupOfVehicle.Code,
                        Ton = c.CAT_GroupOfVehicle.Ton
                    }).Distinct().ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Contract term(phụ lục hợp đồng)
        public DTOResult FLMContract_ContractTerm_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTerm.Where(c => c.ContractID == contractID).Select(c => new DTOContractTerm
                    {
                        ID = c.ID,
                        ContractID = c.ContractID,
                        Code = c.Code,
                        TermName = c.TermName,
                        DisplayName = c.DisplayName,
                        Note = c.Note,
                        MaterialID = c.MaterialID > 0 ? c.MaterialID.Value : -1,
                        MaterialCode = c.MaterialID > 0 ? c.FLM_Material.Code : string.Empty,
                        MaterialName = c.MaterialID > 0 ? c.FLM_Material.MaterialName : string.Empty,
                        PriceContract = c.PriceContract > 0 ? c.PriceContract.Value : 0,
                        PriceCurrent = c.PriceCurrent > 0 ? c.PriceCurrent.Value : 0,
                        PriceWarning = c.PriceWarning > 0 ? c.PriceWarning.Value : 0,
                        DEM = c.DEM,
                        DET = c.DET,
                        ExprETA = c.ExprETA,
                        ExprETARequest = c.ExprETARequest,
                        DateEffect = c.DateEffect,
                        DateExpire = c.DateExpire,
                        DatePrice = c.DatePrice,
                        ExprDatePrice = c.ExprDatePrice,
                        ExprInput = c.ExprInput,
                        ExprPrice = c.ExprPrice,
                        DateWarning = c.DateWarning,
                        IsAllRouting = c.IsAllRouting,
                        IsWarning = c.IsWarning,
                        IsClosed = c.IsClosed,
                        ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.CAT_ServiceOfOrder.Name : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));

                    var list = query.Data.Cast<DTOContractTerm>().ToList();

                    foreach (var item in list)
                    {
                        item.RateMaterial = 0;
                        item.RatePrice = 0;

                        if (item.PriceContract > 0 && item.PriceCurrent > 0)
                        {
                            item.RateMaterial = Math.Round(((double)item.PriceCurrent - (double)item.PriceContract) / (double)item.PriceContract * 100, 2);

                            if (!string.IsNullOrEmpty(item.ExprPrice))
                            {
                                // Lấy 1 cung đường ra tính giá
                                var itemPrice = model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceCOContainer.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();

                                if (itemPrice != null)
                                {
                                    DTOMaterialChecking itemCheck = new DTOMaterialChecking();
                                    itemCheck.Price = itemPrice.Price;
                                    itemCheck.PriceContract = item.PriceContract;
                                    itemCheck.PriceCurrent = item.PriceCurrent;
                                    itemCheck.PriceWarning = item.PriceWarning;

                                    decimal? newPrice = PriceChange_GetPrice(itemCheck, item.ExprPrice);
                                    if (newPrice > 0)
                                        item.RatePrice = Math.Round(((double)newPrice - (double)itemPrice.Price) / (double)itemPrice.Price * 100, 2);
                                }
                            }
                        }
                    }

                    result.Total = query.Total;
                    result.Data = list;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private decimal? PriceChange_GetPrice(DTOMaterialChecking item, string strExp)
        {
            try
            {
                decimal? result = null;
                ExcelPackage package = new ExcelPackage();
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                int row = 0, col = 1;
                string strCol = "A", strRow = "";

                row++;
                worksheet.Cells[row, col].Value = item.PriceContract;
                strExp = strExp.Replace("[PriceContract]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.PriceCurrent;
                strExp = strExp.Replace("[PriceCurrent]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.PriceWarning;
                strExp = strExp.Replace("[PriceWarning]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.Price;
                strExp = strExp.Replace("[Price]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Formula = strExp;

                package.Workbook.Calculate();
                var val = worksheet.Cells[row, col].Value.ToString().Trim();

                try
                {
                    result = Convert.ToDecimal(val);
                }
                catch { }

                return result;
            }
            catch
            {
                return null;
            }
        }


        public DTOContractTerm FLMContract_ContractTerm_Get(int id, int contractID)
        {
            try
            {
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null)
                    {
                        throw new Exception("Không tìm thấy hợp đồng.");
                    }
                    if (id > 0)
                    {
                        result = model.CAT_ContractTerm.Where(c => c.ID == id).Select(c => new DTOContractTerm
                        {
                            ID = c.ID,
                            ContractID = c.ContractID,
                            Code = c.Code,
                            TermName = c.TermName,
                            DisplayName = c.DisplayName,
                            Note = c.Note,
                            MaterialID = c.MaterialID > 0 ? c.MaterialID.Value : -1,
                            MaterialCode = c.MaterialID > 0 ? c.FLM_Material.Code : string.Empty,
                            MaterialName = c.MaterialID > 0 ? c.FLM_Material.MaterialName : string.Empty,
                            PriceContract = c.PriceContract > 0 ? c.PriceContract.Value : 0,
                            PriceCurrent = c.PriceCurrent > 0 ? c.PriceCurrent.Value : 0,
                            PriceWarning = c.PriceWarning > 0 ? c.PriceWarning.Value : 0,
                            DEM = c.DEM,
                            DET = c.DET,
                            ExprETA = c.ExprETA,
                            ExprETARequest = c.ExprETARequest,
                            ExprETD = c.ExprETD,
                            ExprETDRequest = c.ExprETDRequest,
                            DateEffect = c.DateEffect,
                            DateExpire = c.DateExpire,
                            DatePrice = c.DatePrice,
                            ExprDatePrice = c.ExprDatePrice,
                            ExprInput = c.ExprInput,
                            ExprPrice = c.ExprPrice,
                            DateWarning = c.DateWarning,
                            IsAllRouting = c.IsAllRouting,
                            IsWarning = c.IsWarning,
                            IsEditAllRouting = c.CAT_Price.Count() > 0 ? false : true,
                            IsClosed = c.IsClosed,
                            SortConfigDateStart = c.SortConfigDateStart,
                            ServiceOfOrderID = c.ServiceOfOrderID.HasValue ? c.ServiceOfOrderID : -1,
                            ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.CAT_ServiceOfOrder.Name : string.Empty,
                        }).FirstOrDefault();

                        if (result != null)
                        {
                            result.RateMaterial = 0;
                            result.RatePrice = 0;

                            if (result.PriceContract > 0 && result.PriceCurrent > 0)
                            {
                                result.RateMaterial = Math.Round(((double)result.PriceCurrent - (double)result.PriceContract) / (double)result.PriceContract * 100, 2);

                                if (!string.IsNullOrEmpty(result.ExprPrice))
                                {
                                    // Lấy 1 cung đường ra tính giá
                                    var itemPrice = model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceCOContainer.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();

                                    if (itemPrice != null)
                                    {
                                        DTOMaterialChecking itemCheck = new DTOMaterialChecking();
                                        itemCheck.Price = itemPrice.Price;
                                        itemCheck.PriceContract = result.PriceContract;
                                        itemCheck.PriceCurrent = result.PriceCurrent;
                                        itemCheck.PriceWarning = result.PriceWarning;

                                        decimal? newPrice = PriceChange_GetPrice(itemCheck, result.ExprPrice);
                                        if (newPrice > 0)
                                            result.RatePrice = Math.Round(((double)newPrice - (double)itemPrice.Price) / (double)itemPrice.Price * 100, 2);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        result.ID = -1;
                        result.MaterialID = -1;
                        result.DateEffect = DateTime.Now.Date;
                        result.DateExpire = DateTime.Now.Date.AddDays(1);
                        result.IsEditAllRouting = true;
                        result.ServiceOfOrderID = -1;
                    }
                    result.TypeOfMode = objContract.CAT_TransportMode.TransportModeID == iFCL ? 1 : objContract.CAT_TransportMode.TransportModeID == iFTL ? 2 : objContract.CAT_TransportMode.TransportModeID == iLTL ? 3 : 0;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int FLMContract_ContractTerm_Save(DTOContractTerm item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int result = -1;
                    result = HelperContract.Term_Save(model, Account, item, contractID);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_ContractTerm_Delete(int id)
        {
            try
            {
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Delete(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMContract_ContractTerm_Price_List(string request, int contractTermID)
        {
            try
            {
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Price.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOPrice
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        EffectDate = c.EffectDate,
                        TypeOfOrderID = c.TypeOfOrderID,
                        ContractNo = c.CAT_ContractTerm.CAT_Contract.ContractNo,
                        TypeOfOrderName = c.SYS_Var.ValueOfVar,
                        TypeOfPrice = c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderDirect ? 1 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderHot ? 2 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturn ? 3 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturnHot ? 4 : 0,
                        TypeOfMode = c.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFCL ? 1 : c.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFTL ? 2 : c.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iLTL ? 3 : 0,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_ContractTerm_Open(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Open(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMContract_ContractTerm_Close(int id)
        {
            try
            {
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Close(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMTerm_Change_RemoveWarning(int termID)
        {
            try
            {
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Change_RemoveWarning(model, Account, termID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region KPI Term
        public DTOResult FLMContract_ContractTerm_KPITime_List(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTermKPITimeDate.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOContractTerm_KPITime
                    {
                        ID = c.ID,
                        ContractTermID = c.ContractTermID,
                        TypeOfKPIID = c.TypeOfKPIID,
                        Code = c.KPI_TypeOfKPI.Code,
                        TypeName = c.KPI_TypeOfKPI.TypeName,
                        Expression = c.Expression,
                        CompareField = c.CompareField

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_KPITime>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_ContractTerm_KPITime_SaveExpr(DTOContractTerm_KPITime item)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractTermKPITimeDate.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.Expression = item.Expression;
                        obj.CompareField = item.CompareField;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMContract_ContractTerm_KPITime_NotInList(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var InList = model.CAT_ContractTermKPITimeDate.Where(c => c.ContractTermID == contractTermID).Select(c => c.TypeOfKPIID).ToList();
                    var query = model.KPI_TypeOfKPI.Where(c => !InList.Contains(c.ID) && (c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPIQuantityDateCustomer || c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPITimeDateCustomer)).Select(c => new DTOContractTerm_TypeOfKPI
                    {
                        ID = c.ID,
                        Code = c.Code,
                        IsChoose = false,
                        TypeName = c.TypeName,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_TypeOfKPI>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DateTime? FLMContract_KPITime_Check_Expression(KPITimeDate item, List<KPITimeDate> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckDate(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool? FLMContract_KPITime_Check_Hit(KPITimeDate item, List<KPITimeDate> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckBool(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_ContractTerm_KPITime_SaveNotInList(List<DTOContractTerm_TypeOfKPI> lst, int contractTermID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_ContractTermKPITimeDate.FirstOrDefault(c => c.TypeOfKPIID == item.ID && c.ContractTermID == contractTermID);
                        if (obj == null)
                        {
                            obj = new CAT_ContractTermKPITimeDate();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractTermID = contractTermID;
                            obj.TypeOfKPIID = item.ID;
                            model.CAT_ContractTermKPITimeDate.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Expression = "";
                        obj.CompareField = "";
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMContract_ContractTerm_KPIQuantity_List(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTermKPIQuantityDate.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOContractTerm_KPIQuantity
                    {
                        ID = c.ID,
                        ContractTermID = c.ContractTermID,
                        TypeOfKPIID = c.TypeOfKPIID,
                        Code = c.KPI_TypeOfKPI.Code,
                        TypeName = c.KPI_TypeOfKPI.TypeName,
                        ExpressionTon = c.ExpressionTon,
                        ExpressionCBM = c.ExpressionCBM,
                        ExpressionQuantity = c.ExpressionQuantity,
                        CompareFieldTon = c.CompareFieldTon,
                        CompareFieldCBM = c.CompareFieldCBM,
                        CompareFieldQuantity = c.CompareFieldQuantity,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_KPIQuantity>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_ContractTerm_KPIQuantity_SaveExpr(DTOContractTerm_KPIQuantity item)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractTermKPIQuantityDate.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.ExpressionTon = item.ExpressionTon;
                        obj.ExpressionCBM = item.ExpressionCBM;
                        obj.ExpressionQuantity = item.ExpressionQuantity;
                        obj.CompareFieldTon = item.CompareFieldTon;
                        obj.CompareFieldCBM = item.CompareFieldCBM;
                        obj.CompareFieldQuantity = item.CompareFieldQuantity;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMContract_ContractTerm_KPIQuantity_NotInList(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var InList = model.CAT_ContractTermKPIQuantityDate.Where(c => c.ContractTermID == contractTermID).Select(c => c.TypeOfKPIID).ToList();
                    var query = model.KPI_TypeOfKPI.Where(c => !InList.Contains(c.ID) && (c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPIQuantityDateCustomer || c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPITimeDateCustomer)).Select(c => new DTOContractTerm_TypeOfKPI
                    {
                        ID = c.ID,
                        Code = c.Code,
                        IsChoose = false,
                        TypeName = c.TypeName,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_TypeOfKPI>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_ContractTerm_KPIQuantity_SaveNotInList(List<DTOContractTerm_TypeOfKPI> lst, int contractTermID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_ContractTermKPIQuantityDate.FirstOrDefault(c => c.TypeOfKPIID == item.ID && c.ContractTermID == contractTermID);
                        if (obj == null)
                        {
                            obj = new CAT_ContractTermKPIQuantityDate();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractTermID = contractTermID;
                            obj.TypeOfKPIID = item.ID;
                            model.CAT_ContractTermKPIQuantityDate.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.ExpressionTon = "";
                        obj.ExpressionCBM = "";
                        obj.ExpressionQuantity = "";
                        obj.CompareFieldTon = "";
                        obj.CompareFieldCBM = "";
                        obj.CompareFieldQuantity = "";
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<KPIQuantityDate> FLMContract_KPIQuantity_Get(int id)
        {
            try
            {
                List<KPIQuantityDate> result = new List<KPIQuantityDate>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractTermKPIQuantityDate.Where(c => c.ID != id).Select(c => new KPIQuantityDate
                    {
                        TypeOfKPICode = c.KPI_TypeOfKPI.Code,
                        KPITon = 0,
                        KPIQuantity = 0,
                        KPICBM = 0,
                        IsKPI = false,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public KPIQuantityDate FLMContract_KPIQuantity_Check_Expression(KPIQuantityDate item, List<KPIQuantityDate> lst)
        {
            try
            {
                return HelperKPI.KPIQuantity_CheckQuantity(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool? FLMContract_KPIQuantity_Check_Hit(KPIQuantityDate item, List<KPIQuantityDate> lst)
        {
            try
            {
                return HelperKPI.KPIQuantity_CheckBool(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        #endregion

        #region Price
        #region Common

        public DTOResult FLMContract_Price_List(string request, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Price.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOPrice
                    {
                        ID = c.ID,
                        ContractTermID = c.ContractTermID,
                        Code = c.Code,
                        Name = c.Name,
                        EffectDate = c.EffectDate,
                        TypeOfOrderID = c.TypeOfOrderID,
                        TypeOfOrderName = c.SYS_Var.ValueOfVar,
                        TypeOfPrice = c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderDirect ? 1 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderHot ? 2 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturn ? 3 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturnHot ? 4 : 0,

                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int FLMContract_Price_Save(DTOPrice item, int contractTermID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var result = -1;
                    result = HelperContract.Price_Save(model, Account, item, contractTermID);
                    return result;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_Price_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_Delete(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMPrice_Data FLMContract_Price_Data(int contractTermID)
        {
            try
            {
                DTOFLMPrice_Data result = new DTOFLMPrice_Data();
                using (var model = new DataEntities())
                {
                    var objContractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objContractTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objContractTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");

                    int cusID = -1;
                    if (objContract != null && objContract.CustomerID.HasValue)
                        cusID = objContract.CustomerID.Value;

                    int iPackingTu = -(int)SYSVarType.TypeOfPackingGOPTU;
                    int iServiceCO = -(int)SYSVarType.TypeOfPackingServiceCO;

                    result.TermClosed = objContractTerm.IsClosed;

                    result.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListPackingTU = model.CAT_Packing.Where(c => c.TypeOfPackageID == iPackingTu).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListMaterial = model.FLM_Material.Select(c => new FLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        MaterialName = c.MaterialName,
                        GroupOfMaterialID = c.GroupOfMaterialID,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName
                    }).ToList();

                    result.ListGroupOfVehicle = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == objContract.ID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.GroupOfVehicleID,
                        Code = c.CAT_GroupOfVehicle.Code,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        Ton = c.CAT_GroupOfVehicle.Ton,
                        SortOrder = c.SortOrder
                    }).Distinct().OrderBy(c => c.SortOrder).ToList();

                    result.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == objContract.ID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName,
                        CBM = c.CBM,
                        Ton = c.Ton,
                        DateEnd = c.DateEnd,
                        DateStart = c.DateStart,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        SortOrder = c.SortOrder,
                        Quantity = c.Quantity,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName
                    }).OrderBy(c => c.SortOrder).ToList();

                    result.ListService = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        ServiceName = c.ServiceName,
                        //PackingID = c.PackingID,
                        //PackingName = c.CAT_Packing.PackingName,
                        //IsContainer = c.CAT_Packing.TypeOfPackageID == iServiceCO
                    }).ToList();

                    result.ListGroupOfPartner = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    var listGOPMapping = new List<int>();
                    if (objContract.CompanyID > 0)
                    {
                        var CustomerRelateID = objContract.CUS_Company.CustomerRelateID;
                        listGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == objContract.CustomerID && c.CustomerID == CustomerRelateID).Select(c => c.GroupOfProductVENID).ToList();
                    }
                    result.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID && (objContract.CompanyID == null ? true : listGOPMapping.Contains(c.ID))).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    result.ListCurrency = model.CAT_Currency.Select(c => new CATCurrency
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CurrencyName = c.CurrencyName
                    }).ToList();

                    if (result.TermClosed)
                    {
                        var lstRoutingID = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();
                        lstRoutingID.AddRange(model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList());
                        lstRoutingID.AddRange(model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList());
                        lstRoutingID.AddRange(model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList());

                        result.ListRouting = model.CAT_ContractRouting.Where(c => lstRoutingID.Contains(c.ID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                    var ListRoutingParent = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.CAT_Routing.ParentID.HasValue).Select(c => new
                    {
                        ID = c.CAT_Routing.ParentID.Value,
                        Code = c.CAT_Routing.CAT_Routing2.Code,
                        RoutingName = c.CAT_Routing.CAT_Routing2.RoutingName
                    }).Distinct().ToList();

                    result.ListRoutingParent = ListRoutingParent.Select(c => new CATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName
                    }).ToList();

                    var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == cusID && c.CustomerRelateID != cusID).Select(c => c.CustomerRelateID).Distinct().ToList();
                    var ListLocation = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID)).Select(c => new
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        LocationName = c.LocationName
                    }).Distinct().ToList();
                    result.ListLocation = ListLocation.Select(c => new CUSLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LocationName = c.LocationName
                    }).ToList();

                    var dataRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.CAT_Routing.RoutingAreaToID.HasValue && c.CAT_Routing.CAT_RoutingArea1.ParentID.HasValue).Select(c => c.CAT_Routing.CAT_RoutingArea1.ParentID.Value).Distinct().ToList();
                    result.ListRoutingArea = model.CAT_RoutingArea.Where(c => dataRouting.Contains(c.ID)).Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToList();

                    result.ListPriceOfGOP = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.PriceOfGOP).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                        TypeOfVar = c.TypeOfVar
                    }).ToList();

                    result.ListTypeOfPriceDIEx = model.CAT_TypeOfPriceDIEx.Select(c => new DTOCATTypeOfPriceDIEx
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName,
                        //TypeOfPriceExID = c.TypeOfPriceExID
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOPrice FLMContract_Price_Get(int id)
        {
            try
            {
                DTOPrice result = new DTOPrice();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Contract_Price_Get(model, Account, id);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_Price_Copy(List<DTOFLMPrice_ItemCopy> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == item.ID);
                        if (objPrice != null)
                        {
                            CAT_Price obj = new CAT_Price();
                            model.CAT_Price.Add(obj);

                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;

                            obj.Code = item.NewCode;
                            obj.Name = item.NewName;
                            obj.ContractTermID = objPrice.ContractTermID;
                            obj.EffectDate = objPrice.EffectDate;
                            obj.TypeOfOrderID = objPrice.TypeOfOrderID;
                            obj.TypeOfRunLevelID = objPrice.TypeOfRunLevelID;

                            #region CAT_PriceCOContainer
                            var listCOContainer = model.CAT_PriceCOContainer.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ContractRoutingID,
                                c.Price,
                                c.PriceMin,
                                c.PriceMax,
                                c.PackingID
                            }).ToList();
                            foreach (var i in listCOContainer)
                            {
                                CAT_PriceCOContainer o = new CAT_PriceCOContainer();
                                model.CAT_PriceCOContainer.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.PackingID = i.PackingID;
                                o.ContractRoutingID = i.ContractRoutingID;
                            }
                            #endregion

                            #region CAT_PriceCOService
                            var listCOService = model.CAT_PriceCOService.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ServiceID,
                                c.Price,
                                c.PriceMin,
                                c.PriceMax,
                                c.PackingID,
                                c.CurrencyID
                            }).ToList();
                            foreach (var i in listCOService)
                            {
                                CAT_PriceCOService o = new CAT_PriceCOService();
                                model.CAT_PriceCOService.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.PackingID = i.PackingID;
                                o.CurrencyID = i.CurrencyID;
                                o.ServiceID = i.ServiceID;
                            }
                            #endregion

                            #region CAT_PriceDIEx
                            var listPriceEX = model.CAT_PriceDIEx.Where(c => c.PriceID == objPrice.ID).Select(c => new
                            {
                                ID = c.ID,
                                TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                                ExprCBM = c.ExprCBM,
                                ExprInput = c.ExprInput,
                                ExprPrice = c.ExprPrice,
                                ExprPriceFix = c.ExprPriceFix,
                                ExprQuan = c.ExprQuan,
                                ExprTon = c.ExprTon,
                                Note = c.Note,
                                DIExSumID = c.DIExSumID,
                            }).ToList();
                            foreach (var priceEx in listPriceEX)
                            {
                                CAT_PriceDIEx o = new CAT_PriceDIEx();
                                model.CAT_PriceDIEx.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.PriceID = obj.ID;
                                o.TypeOfPriceDIExID = priceEx.TypeOfPriceDIExID;
                                o.ExprCBM = priceEx.ExprCBM;
                                o.ExprInput = priceEx.ExprInput;
                                o.ExprPrice = priceEx.ExprPrice;
                                o.ExprPriceFix = priceEx.ExprPriceFix;
                                o.ExprQuan = priceEx.ExprQuan;
                                o.ExprTon = priceEx.ExprTon;
                                o.Note = priceEx.Note;
                                o.DIExSumID = priceEx.DIExSumID;
                                foreach (var exGOL in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceEx.ID))
                                {
                                    CAT_PriceDIExGroupLocation gol = new CAT_PriceDIExGroupLocation();
                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.CAT_PriceDIEx = o;
                                    gol.GroupOfLocationID = exGOL.GroupOfLocationID;
                                    model.CAT_PriceDIExGroupLocation.Add(gol);
                                }
                                foreach (var exGOP in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == priceEx.ID))
                                {
                                    CAT_PriceDIExGroupProduct gop = new CAT_PriceDIExGroupProduct();
                                    gop.CreatedBy = Account.UserName;
                                    gop.CreatedDate = DateTime.Now;
                                    gop.CAT_PriceDIEx = o;
                                    gop.GroupOfProductID = exGOP.GroupOfProductID;
                                    gop.ExprPrice = exGOP.ExprPrice;
                                    gop.ExprQuantity = exGOP.ExprQuantity;
                                    model.CAT_PriceDIExGroupProduct.Add(gop);
                                }
                                foreach (var exRoute in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceEx.ID))
                                {
                                    CAT_PriceDIExRouting gop = new CAT_PriceDIExRouting();
                                    gop.CreatedBy = Account.UserName;
                                    gop.CreatedDate = DateTime.Now;
                                    gop.CAT_PriceDIEx = o;
                                    gop.RoutingID = exRoute.RoutingID;
                                    gop.ParentRoutingID = exRoute.ParentRoutingID;
                                    gop.LocationID = exRoute.LocationID;
                                    gop.TypeOfTOLocationID = exRoute.TypeOfTOLocationID;
                                    model.CAT_PriceDIExRouting.Add(gop);
                                }
                            }
                            #endregion

                            #region CAT_PriceDIGroupProduct
                            foreach (var i in model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ContractRoutingID,
                                c.Price,
                                c.GroupOfProductID,
                                c.PriceMin,
                                c.PriceMax
                            }).ToList())
                            {
                                CAT_PriceDIGroupProduct o = new CAT_PriceDIGroupProduct();
                                model.CAT_PriceDIGroupProduct.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.ContractRoutingID = i.ContractRoutingID;
                                o.GroupOfProductID = i.GroupOfProductID;
                            }
                            #endregion

                            #region CAT_PriceDILevel +CAT_PriceDILevelGroupproduct


                            foreach (var detail in model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == objPrice.ID))
                            {
                                CAT_PriceDILevelGroupProduct g = new CAT_PriceDILevelGroupProduct();
                                g.CreatedBy = Account.UserName;
                                g.CreatedDate = DateTime.Now;
                                g.ContractRoutingID = detail.ContractRoutingID;
                                g.GroupOfProductID = detail.GroupOfProductID;
                                g.Price = detail.Price;
                                g.ContractLevelID = detail.ContractLevelID;
                                g.CAT_Price = obj;
                                model.CAT_PriceDILevelGroupProduct.Add(g);
                            }
                            #endregion

                            #region CAT_PriceGroupVehicle
                            foreach (var i in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ContractRoutingID,
                                c.Price,
                                c.GroupOfVehicleID,
                                c.PriceMin,
                                c.PriceMax
                            }).ToList())
                            {
                                CAT_PriceGroupVehicle o = new CAT_PriceGroupVehicle();
                                model.CAT_PriceGroupVehicle.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.ContractRoutingID = i.ContractRoutingID;
                                o.GroupOfVehicleID = i.GroupOfVehicleID;
                            }
                            #endregion

                            #region CAT_PriceGVLevel +CAT_PriceGVLevelGroupVehicle


                            foreach (var detail in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == objPrice.ID))
                            {
                                CAT_PriceGVLevelGroupVehicle g = new CAT_PriceGVLevelGroupVehicle();
                                g.CreatedBy = Account.UserName;
                                g.CreatedDate = DateTime.Now;
                                g.ContractRoutingID = detail.ContractRoutingID;
                                g.ContractLevelID = detail.ContractLevelID;
                                g.Price = detail.Price;
                                g.PriceMax = detail.PriceMax;
                                g.PriceMin = detail.PriceMin;
                                g.CAT_Price = obj;
                                model.CAT_PriceGVLevelGroupVehicle.Add(g);
                            }

                            #endregion

                            #region CAT_PriceDILoad
                            var listPriceDILoad = model.CAT_PriceDILoad.Where(c => c.PriceID == objPrice.ID).ToList();
                            foreach (var i in listPriceDILoad)
                            {
                                CAT_PriceDILoad o = new CAT_PriceDILoad();
                                model.CAT_PriceDILoad.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.LocationID = i.LocationID;
                                o.IsLoading = i.IsLoading;
                                o.ParentRoutingID = i.ParentRoutingID;
                                o.RoutingID = i.RoutingID;
                                o.GroupOfLocationID = i.GroupOfLocationID;

                                foreach (var e in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == i.ID).Select(c => new
                                {
                                    c.PriceOfGOPID,
                                    c.Price,
                                    c.GroupOfProductID
                                }).ToList())
                                {
                                    CAT_PriceDILoadDetail g = new CAT_PriceDILoadDetail();

                                    g.CreatedBy = Account.UserName;
                                    g.CreatedDate = DateTime.Now;

                                    g.PriceOfGOPID = e.PriceOfGOPID;
                                    g.GroupOfProductID = e.GroupOfProductID;
                                    g.Price = e.Price;
                                    g.CAT_PriceDILoad = o;
                                    model.CAT_PriceDILoadDetail.Add(g);
                                }
                            }
                            #endregion

                            #region price moq
                            var listMOQ = model.CAT_PriceDIMOQ.Where(c => c.PriceID == objPrice.ID).ToList();
                            foreach (var moq in listMOQ)
                            {
                                CAT_PriceDIMOQ m = new CAT_PriceDIMOQ();
                                m.CreatedBy = Account.UserName;
                                m.CreatedDate = DateTime.Now;
                                m.MOQName = moq.MOQName;
                                m.ParentRoutingID = moq.ParentRoutingID;
                                m.DIMOQSumID = moq.DIMOQSumID;
                                m.ExprInput = moq.ExprInput;
                                m.ExprPrice = moq.ExprPrice;
                                m.ExprPriceFix = moq.ExprPriceFix;
                                m.ExprQuan = moq.ExprQuan;
                                m.ExprTon = moq.ExprTon;
                                m.ExprCBM = moq.ExprCBM;
                                m.TypeOfPriceDIExID = moq.TypeOfPriceDIExID;
                                m.CAT_Price = obj;
                                model.CAT_PriceDIMOQ.Add(m);

                                foreach (var detail in moq.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == moq.ID))
                                {
                                    CAT_PriceDIMOQGroupLocation gol = new CAT_PriceDIMOQGroupLocation();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfLocationID = detail.GroupOfLocationID;
                                    gol.CAT_PriceDIMOQ = m;

                                    model.CAT_PriceDIMOQGroupLocation.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == moq.ID))
                                {
                                    CAT_PriceDIMOQGroupProduct gol = new CAT_PriceDIMOQGroupProduct();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfProductID = detail.GroupOfProductID;
                                    gol.ExprPrice = detail.ExprPrice;
                                    gol.ExprQuantity = detail.ExprQuantity;

                                    gol.CAT_PriceDIMOQ = m;

                                    model.CAT_PriceDIMOQGroupProduct.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == moq.ID))
                                {
                                    CAT_PriceDIMOQRouting gol = new CAT_PriceDIMOQRouting();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.RoutingID = detail.RoutingID;
                                    gol.ParentRoutingID = detail.ParentRoutingID;
                                    gol.LocationID = detail.LocationID;
                                    gol.TypeOfTOLocationID = detail.TypeOfTOLocationID;

                                    gol.CAT_PriceDIMOQ = m;

                                    model.CAT_PriceDIMOQRouting.Add(gol);
                                }
                            }
                            #endregion

                            #region DI load moq
                            var listMoqLoad = model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == objPrice.ID).ToList();
                            foreach (var moq in listMoqLoad)
                            {
                                CAT_PriceDIMOQLoad m = new CAT_PriceDIMOQLoad();
                                m.CreatedBy = Account.UserName;
                                m.CreatedDate = DateTime.Now;
                                m.MOQName = moq.MOQName;
                                m.ParentRoutingID = moq.ParentRoutingID;
                                m.IsLoading = moq.IsLoading;
                                m.ExprInput = moq.ExprInput;
                                m.ExprPrice = moq.ExprPrice;
                                m.ExprPriceFix = moq.ExprPriceFix;
                                m.ExprQuan = moq.ExprQuan;
                                m.ExprTon = moq.ExprTon;
                                m.ExprCBM = moq.ExprCBM;
                                m.TypeOfPriceDIExID = moq.TypeOfPriceDIExID;
                                m.ParentRoutingID = moq.ParentRoutingID;
                                m.DIMOQLoadSumID = moq.DIMOQLoadSumID;
                                m.CAT_Price = obj;
                                model.CAT_PriceDIMOQLoad.Add(m);

                                foreach (var detail in moq.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                {
                                    CAT_PriceDIMOQLoadGroupLocation gol = new CAT_PriceDIMOQLoadGroupLocation();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfLocationID = detail.GroupOfLocationID;
                                    gol.CAT_PriceDIMOQLoad = m;

                                    model.CAT_PriceDIMOQLoadGroupLocation.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                {
                                    CAT_PriceDIMOQLoadGroupProduct gol = new CAT_PriceDIMOQLoadGroupProduct();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfProductID = detail.GroupOfProductID;
                                    gol.ExprPrice = detail.ExprPrice;
                                    gol.ExprQuantity = detail.ExprQuantity;

                                    gol.CAT_PriceDIMOQLoad = m;

                                    model.CAT_PriceDIMOQLoadGroupProduct.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                {
                                    CAT_PriceDIMOQLoadRouting gol = new CAT_PriceDIMOQLoadRouting();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.RoutingID = detail.RoutingID;
                                    gol.ParentRoutingID = detail.ParentRoutingID;
                                    gol.LocationID = detail.LocationID;

                                    gol.CAT_PriceDIMOQLoad = m;

                                    model.CAT_PriceDIMOQLoadRouting.Add(gol);
                                }
                            }
                            #endregion

                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMPrice_ExcelData FLMContract_Price_ExcelData(int contractTermID)
        {
            try
            {
                DTOFLMPrice_ExcelData result = new DTOFLMPrice_ExcelData();
                using (var model = new DataEntities())
                {
                    var objContractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objContractTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objContractTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");

                    int cusID = -1;
                    if (objContract != null && objContract.CustomerID.HasValue)
                        cusID = objContract.CustomerID.Value;

                    var listGOPMapping = new List<int>();
                    if (objContract.CompanyID > 0)
                    {
                        var CustomerRelateID = objContract.CUS_Company.CustomerRelateID;
                        listGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == objContract.CustomerID && c.CustomerID == CustomerRelateID).Select(c => c.GroupOfProductVENID).ToList();
                    }
                    result.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID && (objContract.CompanyID == null ? true : listGOPMapping.Contains(c.ID))).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToList();


                    result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractID == objContract.ID && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATContractRouting
                    {
                        ID = c.RoutingID,
                        Code = c.Code,
                        CATCode = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToList();

                    var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == cusID && c.CustomerRelateID != cusID).Select(c => c.CustomerRelateID).Distinct().ToList();
                    var ListLocation = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID)).Select(c => new
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        CATCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                    }).Distinct().ToList();
                    result.ListLocation = ListLocation.Select(c => new DTOCUSLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CATLocationCode = c.CATCode,
                        LocationName = c.LocationName,
                        Address = c.Address,
                    }).ToList();

                    result.ListPriceOfGOP = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.PriceOfGOP).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                        TypeOfVar = c.TypeOfVar
                    }).ToList();

                    result.ListGroupOfLocation = model.CAT_GroupOfLocation.Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMPriceCO_Data FLMContract_PriceCO_Data(int contractTermID)
        {
            try
            {
                DTOFLMPriceCO_Data result = new DTOFLMPriceCO_Data();
                using (var model = new DataEntities())
                {
                    var objContractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objContractTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objContractTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");
                    int cusID = -1;
                    if (objContract != null && objContract.CustomerID.HasValue)
                        cusID = objContract.CustomerID.Value;

                    int iPackingTu = -(int)SYSVarType.TypeOfPackingGOPTU;
                    int iServiceCO = -(int)SYSVarType.TypeOfPackingServiceCO;

                    result.TermClosed = objContractTerm.IsClosed;

                    result.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListPackingTU = model.CAT_Packing.Where(c => c.TypeOfPackageID == iPackingTu).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListService = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        ServiceName = c.ServiceName,
                        //PackingID = c.PackingID,
                        //PackingName = c.CAT_Packing.PackingName,
                        //IsContainer = c.CAT_Packing.TypeOfPackageID == iServiceCO
                    }).ToList();


                    result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToList();

                    if (result.TermClosed)
                    {
                        var lstRoutingID = model.CAT_PriceCOContainer.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();


                        result.ListRouting = model.CAT_ContractRouting.Where(c => lstRoutingID.Contains(c.ID)).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region DI_GroupVehicle
        public List<DTOPriceGroupVehicle> FLMPrice_DI_GroupVehicle_GetData(int priceID)
        {
            try
            {
                List<DTOPriceGroupVehicle> result = new List<DTOPriceGroupVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == priceID).Select(c => new DTOPriceGroupVehicle
                    {
                        RouteID = c.ContractRoutingID,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        Price = c.Price,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_DI_GroupVehicle_SaveList(List<DTOPriceGroupVehicle> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var priceNew in data)
                    {
                        var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == priceNew.RouteID && c.GroupOfVehicleID == priceNew.GroupOfVehicleID && c.PriceID == priceID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_PriceGroupVehicle();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            obj.ContractRoutingID = priceNew.RouteID;
                            obj.GroupOfVehicleID = priceNew.GroupOfVehicleID;
                            model.CAT_PriceGroupVehicle.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMax = priceNew.PriceMax;
                        obj.PriceMin = priceNew.PriceMin;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceGroupVehicleData FLMPrice_DI_GroupVehicle_ExcelData(int priceid, int contractTermID)
        {
            try
            {
                DTOPriceGroupVehicleData result = new DTOPriceGroupVehicleData();
                result.ListDetail = new List<DTOPriceGroupVehicle>();
                result.ListGOV = new List<CATGroupOfVehicle>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceid);
                    if (objPrice == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");

                    result.ListDetail = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == priceid).Select(c => new DTOPriceGroupVehicle
                    {
                        ID = c.ID,
                        RouteID = c.ContractRoutingID,
                        PriceMin = c.PriceMin,
                        PriceMax = c.PriceMax,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        Price = c.Price
                    }).ToList();

                    result.ListGOV = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == objPrice.CAT_ContractTerm.ContractID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.CAT_GroupOfVehicle.ID,
                        Code = c.CAT_GroupOfVehicle.Code,
                        Ton = c.CAT_GroupOfVehicle.Ton,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        SortOrder = c.SortOrder,
                    }).Distinct().OrderBy(c => c.SortOrder).ToList();

                    if (objPrice.CAT_ContractTerm.IsClosed)
                    {
                        var lstRoutingID = model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objPrice.ContractTermID).Select(c => c.ContractRoutingID).Distinct().ToList();

                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == objPrice.ContractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_DI_GroupVehicle_ExcelImport(List<DTOPriceGroupVehicleImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == detail.RouteID && c.GroupOfVehicleID == detail.GroupOfVehicleID && c.PriceID == priceID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new CAT_PriceGroupVehicle();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.GroupOfVehicleID = detail.GroupOfVehicleID;
                                obj.ContractRoutingID = row.RouteID;
                                model.CAT_PriceGroupVehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                            obj.PriceMax = detail.PriceMax;
                            obj.PriceMin = detail.PriceMin;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_DI_GroupVehicle_ExcelInit(bool isFrame, int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = FLMPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListGOV)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListGOV)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListGOV)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOV)
                                {
                                    var check = lst.ListDetail.Where(c => c.RouteID == route.ID && c.GroupOfVehicleID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOV)
                                {

                                    var check = lst.ListDetail.Where(c => c.RouteID == route.ID && c.GroupOfVehicleID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMPrice_DI_GroupVehicle_ExcelChange(bool isFrame, int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = FLMPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListGOV.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListGOV.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_DI_GroupVehicle_ExcelOnImport(bool isFrame, int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOV.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOV.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMPrice_DI_GroupVehicle_ExcelApprove(bool isFrame, int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOV.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOV.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRoute)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListGOV)
                                        {
                                            String priceMin = HelperExcel.GetString(eRow, colData++);
                                            String priceMax = HelperExcel.GetString(eRow, colData++);
                                            decimal? getpriceMin = null;
                                            decimal? getpriceMax = null;
                                            try
                                            {
                                                getpriceMin = decimal.Parse(priceMin);
                                            }
                                            catch
                                            {
                                                getpriceMin = null;
                                            }
                                            try
                                            {
                                                getpriceMax = decimal.Parse(priceMax);
                                            }
                                            catch
                                            {
                                                getpriceMax = null;
                                            }


                                            var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfVehicleID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceGroupVehicle();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.GroupOfVehicleID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceGroupVehicle.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.PriceMax = getpriceMax;
                                            obj.PriceMin = getpriceMin;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRoute)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListGOV)
                                        {
                                            String price = HelperExcel.GetString(eRow, colData++);
                                            decimal getprice = 0;
                                            try
                                            {
                                                getprice = decimal.Parse(price);
                                            }
                                            catch
                                            {
                                                getprice = 0;
                                            }
                                            var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfVehicleID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceGroupVehicle();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.GroupOfVehicleID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceGroupVehicle.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.Price = getprice;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //level
        public List<DTOPriceGVLevelGroupVehicle> FLMPrice_DI_PriceGVLevel_DetailData(int priceID)
        {
            try
            {
                List<DTOPriceGVLevelGroupVehicle> result = new List<DTOPriceGVLevelGroupVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == priceID).Select(c => new DTOPriceGVLevelGroupVehicle
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        ContractLevelID = c.ContractLevelID,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceGVLevel_Save(List<DTOPriceGVLevelGroupVehicle> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var priceNew in lst)
                    {
                        var obj = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == priceID && c.ContractRoutingID == priceNew.RoutingID && c.ContractLevelID == priceNew.ContractLevelID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_PriceGVLevelGroupVehicle();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractRoutingID = priceNew.RoutingID;
                            obj.ContractLevelID = priceNew.ContractLevelID;
                            obj.PriceID = priceID;
                            model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMax = priceNew.PriceMax;
                        obj.PriceMin = priceNew.PriceMin;
                    }
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceGVLevelData FLMPrice_DI_PriceGVLevel_ExcelData(int priceid, int contractTermID)
        {
            try
            {
                DTOPriceGVLevelData result = new DTOPriceGVLevelData();
                result.ListDetail = new List<DTOPriceGVLevelGroupVehicle>();
                result.ListGroupVehicle = new List<CATGroupOfVehicle>();
                result.ListLevel = new List<DTOCATContractLevel>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);
                    result.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == objTerm.ContractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName
                    }).ToList();

                    if (objTerm.IsClosed)
                    {
                        var lstRoutingID = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();

                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                    result.ListDetail = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == priceid).Select(c => new DTOPriceGVLevelGroupVehicle
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        ContractLevelID = c.ContractLevelID,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_DI_PriceGVLevel_ExcelImport(List<DTOPriceGVLevelImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var priceNew in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceGVLevelGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == priceNew.RouteID && c.ContractLevelID == priceNew.LevelID);
                            if (obj == null)
                            {
                                obj = new CAT_PriceGVLevelGroupVehicle();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractLevelID = priceNew.LevelID;
                                obj.ContractRoutingID = row.RouteID;
                                obj.PriceID = priceID;
                                model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = priceNew.Price;
                            obj.PriceMax = priceNew.PriceMax;
                            obj.PriceMin = priceNew.PriceMin;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_DI_PriceGVLevel_ExcelInit(bool isFrame, int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = FLMPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListLevel)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListLevel)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListLevel)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListLevel)
                                {
                                    var check = lst.ListDetail.Where(c => c.RoutingID == route.ID && c.ContractLevelID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListLevel)
                                {
                                    var check = lst.ListDetail.Where(c => c.RoutingID == route.ID && c.ContractLevelID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMPrice_DI_PriceGVLevel_ExcelChange(bool isFrame, int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = FLMPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListLevel.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListLevel.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_DI_PriceGVLevel_ExcelOnImport(bool isFrame, int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListLevel.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListLevel.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMPrice_DI_PriceGVLevel_ExcelApprove(bool isFrame, int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListLevel.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListLevel.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListLevel)
                                {
                                    String priceMin = HelperExcel.GetString(eRow, colData++);
                                    String priceMax = HelperExcel.GetString(eRow, colData++);
                                    Int32? getpriceMin = Convert.ToInt32(priceMin);
                                    Int32? getpriceMax = Convert.ToInt32(priceMax);
                                    if (getpriceMin >= 0 || getpriceMax >= 0)
                                    {
                                        var obj = model.CAT_PriceGVLevelGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == getRoutingID && c.ContractLevelID == level.ID);
                                        if (obj == null)
                                        {
                                            obj = new CAT_PriceGVLevelGroupVehicle();
                                            obj.CreatedBy = Account.UserName;
                                            obj.CreatedDate = DateTime.Now;
                                            obj.ContractLevelID = level.ID;
                                            obj.ContractRoutingID = getRoutingID;
                                            obj.PriceID = priceID;
                                            model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                                        }
                                        else
                                        {
                                            obj.ModifiedBy = Account.UserName;
                                            obj.ModifiedDate = DateTime.Now;
                                        }
                                        obj.PriceMax = getpriceMax;
                                        obj.PriceMin = getpriceMin;
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListLevel)
                                {
                                    String price = HelperExcel.GetString(eRow, colData++);
                                    decimal getprice = 0;
                                    try
                                    {
                                        getprice = decimal.Parse(price);
                                    }
                                    catch
                                    {
                                        getprice = 0;
                                    }
                                    var obj = model.CAT_PriceGVLevelGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == getRoutingID && c.ContractLevelID == level.ID);
                                    if (obj == null)
                                    {
                                        obj = new CAT_PriceGVLevelGroupVehicle();
                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;
                                        obj.ContractLevelID = level.ID;
                                        obj.ContractRoutingID = getRoutingID;
                                        obj.PriceID = priceID;
                                        model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                                    }
                                    else
                                    {
                                        obj.ModifiedBy = Account.UserName;
                                        obj.ModifiedDate = DateTime.Now;
                                    }
                                    obj.Price = getprice;
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CO_Packing

        public List<DTOPriceRouting> FLMPrice_CO_COPackingPrice_List(int priceID)
        {
            try
            {
                List<DTOPriceRouting> result = new List<DTOPriceRouting>();
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objPrice.CAT_ContractTerm.ContractID);
                        result = objContract.CAT_ContractRouting.Select(c => new DTOPriceRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToList();

                        foreach (var item in result)
                        {
                            item.ListContainerPrice = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID && c.ContractRoutingID == item.ID).Select(c => new DTOCATPriceCOContainer
                            {
                                ID = c.ID,
                                PackingID = c.PackingID,
                                Price = c.Price,
                                PriceMin = c.PriceMin,
                                PriceMax = c.PriceMax,
                                PriceID = c.PriceID,
                                ContractRoutingID = c.ContractRoutingID,
                                PackingName = c.CAT_Packing.PackingName
                            }).ToList();
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_CO_COPackingPrice_SaveList(List<DTOPriceRouting> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routing in data)
                    {
                        if (routing.ListContainerPrice != null && routing.ListContainerPrice.Count > 0)
                        {
                            foreach (var con in routing.ListContainerPrice)
                            {
                                var obj = model.CAT_PriceCOContainer.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == routing.ID && c.PackingID == con.PackingID);
                                if (obj == null)
                                {
                                    obj = new CAT_PriceCOContainer();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.PriceID = priceID;
                                    obj.PackingID = con.PackingID;
                                    obj.ContractRoutingID = routing.ID;
                                    model.CAT_PriceCOContainer.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Price = con.Price;
                                obj.PriceMax = con.PriceMax;
                                obj.PriceMin = con.PriceMin;
                            }
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceContainer_Export FLMPrice_CO_COPackingPrice_Export(int priceID)
        {
            try
            {
                DTOPriceContainer_Export result = new DTOPriceContainer_Export();
                result.ListPacking = new List<CATPacking>();
                result.ListRouting = new List<DTOPrice_Routing>();
                result.ListRoutingPrice = new List<DTOPrice_COPrice>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        var lstPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                        {
                            ID = c.ID,
                            Code = c.Code,
                            PackingName = c.PackingName
                        }).ToList();
                        result.ListPacking.AddRange(lstPacking);
                        var lstRouting = model.CAT_ContractRouting.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new DTOPrice_Routing
                        {
                            RoutingID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToList();
                        result.ListRouting.AddRange(lstRouting);
                        var lstRoutingPrice = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID && c.ContractRoutingID.HasValue).Select(c => new DTOPrice_COPrice
                        {
                            RoutingID = c.ContractRoutingID.Value,
                            PackingID = c.PackingID,
                            Price = c.Price
                        }).ToList();
                        result.ListRoutingPrice.AddRange(lstRoutingPrice);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_CO_COPackingPrice_Import(List<DTOPrice_COPackingPrice_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (data != null)
                    {
                        // Xóa hết dữ liệu cũ
                        var lst = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID);
                        foreach (var item in lst)
                        {
                            model.CAT_PriceCOContainer.Remove(item);
                        }

                        foreach (var item in data.Where(c => c.ID > 0))
                        {
                            foreach (var o in item.ListContainerPrice)
                            {
                                var objPrice = new CAT_PriceCOContainer();
                                objPrice.CreatedBy = Account.UserName;
                                objPrice.CreatedDate = DateTime.Now;
                                objPrice.ContractRoutingID = item.ID;
                                objPrice.PackingID = o.PackingID;
                                objPrice.PriceID = priceID;
                                objPrice.Price = o.Price;
                                model.CAT_PriceCOContainer.Add(objPrice);
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CO_Service

        public DTOResult FLMPrice_CO_Service_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOService.Where(c => c.PriceID == priceID && c.PackingID == null).Select(c => new DTOCATPriceCOService
                    {
                        ID = c.ID,
                        PriceID = c.PriceID,
                        ServiceID = c.ServiceID,
                        Price = c.Price,
                        CurrencyID = c.CurrencyID,
                        ServiceName = c.CAT_Service.ServiceName,
                        CurrencyName = c.CAT_Currency.CurrencyName,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        //IsContainer = c.CAT_Service.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingServiceCO,
                        //PackingNameService = c.CAT_Service.CAT_Packing.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPriceCOService>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMPrice_CO_ServicePacking_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOService.Where(c => c.PriceID == priceID && c.PackingID != null).Select(c => new DTOCATPriceCOService
                    {
                        ID = c.ID,
                        PriceID = c.PriceID,
                        ServiceID = c.ServiceID,
                        Price = c.Price,
                        CurrencyID = c.CurrencyID,
                        ServiceName = c.CAT_Service.ServiceName,
                        CurrencyName = c.CAT_Currency.CurrencyName,
                        PackingID = c.PackingID,
                        PackingName = c.PackingID.HasValue ? c.CAT_Packing.PackingName : string.Empty,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        //IsContainer = c.CAT_Service.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingServiceCO,
                        //PackingNameService = c.CAT_Service.CAT_Packing.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPriceCOService>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATPriceCOService FLMPrice_CO_Service_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCATPriceCOService result = new DTOCATPriceCOService();
                    if (id > 0)
                    {
                        result = model.CAT_PriceCOService.Where(c => c.ID == id).Select(c => new DTOCATPriceCOService
                        {
                            ID = c.ID,
                            PriceID = c.PriceID,
                            ServiceID = c.ServiceID,
                            PackingID = c.PackingID,
                            Price = c.Price,
                            CurrencyID = c.CurrencyID,
                            ServiceName = c.CAT_Service.ServiceName,
                            CurrencyName = c.CAT_Currency.CurrencyName,
                            PackingName = c.CAT_Packing != null ? c.CAT_Packing.PackingName : string.Empty,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objService = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeDoc).FirstOrDefault();
                        if (objService != null) result.ServiceID = objService.ID;
                        var objCurrency = model.CAT_Currency.FirstOrDefault();
                        if (objCurrency != null) result.CurrencyID = objCurrency.ID;
                        var objPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).FirstOrDefault();
                        if (objPacking != null) result.PackingID = objPacking.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOCATPriceCOService FLMPrice_CO_ServicePacking_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCATPriceCOService result = new DTOCATPriceCOService();
                    if (id > 0)
                    {
                        result = model.CAT_PriceCOService.Where(c => c.ID == id).Select(c => new DTOCATPriceCOService
                        {
                            ID = c.ID,
                            PriceID = c.PriceID,
                            ServiceID = c.ServiceID,
                            PackingID = c.PackingID,
                            Price = c.Price,
                            CurrencyID = c.CurrencyID,
                            ServiceName = c.CAT_Service.ServiceName,
                            CurrencyName = c.CAT_Currency.CurrencyName,
                            PackingName = c.CAT_Packing != null ? c.CAT_Packing.PackingName : string.Empty,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objService = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeContainer).FirstOrDefault();
                        if (objService != null) result.ServiceID = objService.ID;
                        var objCurrency = model.CAT_Currency.FirstOrDefault();
                        if (objCurrency != null) result.CurrencyID = objCurrency.ID;
                        var objPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).FirstOrDefault();
                        if (objPacking != null) result.PackingID = objPacking.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int FLMPrice_CO_Service_Save(DTOCATPriceCOService item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng Service
                    if (item.PackingID.HasValue)
                    {
                        if (model.CAT_PriceCOService.FirstOrDefault(c => c.PriceID == priceID && c.ServiceID == item.ServiceID && c.PackingID == item.PackingID && c.ID != item.ID) != null)
                            throw FaultHelper.BusinessFault(null, null, "Dịch vụ và loại Cotainer không được trùng!");
                    }
                    else
                    {
                        if (model.CAT_PriceCOService.FirstOrDefault(c => c.PriceID == priceID && c.ServiceID == item.ServiceID && c.PackingID == null && c.ID != item.ID) != null)
                            throw FaultHelper.BusinessFault(null, null, "Dịch vụ không được trùng!");
                    }
                    #endregion

                    var obj = model.CAT_PriceCOService.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceCOService();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ServiceID = item.ServiceID;
                    obj.CurrencyID = item.CurrencyID;
                    if (item.PackingID != null && item.PackingID > 0)
                        obj.PackingID = item.PackingID;
                    else
                        obj.PackingID = null;
                    obj.Price = item.Price;
                    obj.PriceMax = item.PriceMax;
                    obj.PriceMin = item.PriceMin;

                    if (obj.ID < 1)
                        model.CAT_PriceCOService.Add(obj);

                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_CO_Service_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOService.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.CAT_PriceCOService.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMPrice_CO_CATService_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeDoc).Select(c => new CATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName
                    }).ToList();
                    result.Data = query as IEnumerable<CATService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMPrice_CO_CATServicePacking_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeContainer).Select(c => new CATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName
                    }).ToList();
                    result.Data = query as IEnumerable<CATService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMPrice_CO_CATCODefault_List(int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = new List<DTOCATPacking>();
                    if (contractTermID > 0)
                    {
                        int ContractID = model.CAT_ContractTerm.Where(c => c.ID == contractTermID).Select(c => c.ContractID).FirstOrDefault();
                        query = model.CAT_ContractCODefault.Where(c => c.ContractID == ContractID).Select(c => new DTOCATPacking
                        {
                            ID = c.PackingID,
                            PackingName = c.CAT_Packing.PackingName
                        }).ToList();
                    }
                    result.Data = query as IEnumerable<DTOCATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq new

        #region info
        public DTOResult FLMPrice_DI_PriceMOQ_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQ.Where(c => c.PriceID == priceID).Select(c => new DTOCATPriceDIMOQ
                    {
                        ID = c.ID,
                        PriceID = c.PriceID,
                        MOQName = c.MOQName,
                        ExprInput = c.ExprInput,
                        ExprCBM = c.ExprCBM,
                        ExprTon = c.ExprTon,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        DIMOQSumID = c.DIMOQSumID,
                        DIMOQSumName = c.SYS_Var.ValueOfVar,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPriceDIMOQ>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATPriceDIMOQ FLMPrice_DI_PriceMOQ_Get(int id)
        {
            try
            {
                DTOCATPriceDIMOQ result = new DTOCATPriceDIMOQ();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQ.Where(c => c.ID == id).Select(c => new DTOCATPriceDIMOQ
                        {
                            ID = c.ID,
                            PriceID = c.PriceID,
                            MOQName = c.MOQName,
                            ExprInput = c.ExprInput,
                            ExprCBM = c.ExprCBM,
                            ExprTon = c.ExprTon,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            DIMOQSumID = c.DIMOQSumID,
                            DIMOQSumName = c.SYS_Var.ValueOfVar,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOCATPriceDIMOQ();
                        result.ID = 0;
                        result.DIMOQSumID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIMOQSum).FirstOrDefault();
                        if (obj != null) result.DIMOQSumID = obj.ID;
                        result.TypeOfPriceDIExID = 0;
                        var objType = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        if (objType != null) result.TypeOfPriceDIExID = objType.ID;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMPrice_DI_PriceMOQ_Save(DTOCATPriceDIMOQ item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQ.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQ();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceDIMOQ.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MOQName = item.MOQName;
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.DIMOQSumID = item.DIMOQSumID;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQ.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == obj.ID))
                            model.CAT_PriceDIMOQGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == obj.ID))
                            model.CAT_PriceDIMOQGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == obj.ID))
                            model.CAT_PriceDIMOQRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQID == obj.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQ.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var moq in model.CAT_PriceDIMOQ.Where(c => c.PriceID == priceID))
                    {
                        foreach (var item in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == moq.ID))
                            model.CAT_PriceDIMOQGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == moq.ID))
                            model.CAT_PriceDIMOQGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == moq.ID))
                            model.CAT_PriceDIMOQRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQID == moq.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQ.Remove(moq);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region partner
        public DTOResult FLMPrice_DI_PriceMOQ_Partner_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.PartnerID.HasValue).Select(c => new DTOPriceDIMOQPartner
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        PartnerID = c.PartnerID.Value,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerCode = c.CAT_Partner.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Partner_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Partner_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var PartnerID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceExID;
                        obj.PartnerID = PartnerID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQ_Partner_PartnerNotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    var CusRelateID = -1;
                    if (objTerm.CAT_Contract.CompanyID > 0)
                    {
                        CusRelateID = objTerm.CAT_Contract.CUS_Company.CustomerRelateID;
                    }
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.PartnerID > 0).Select(c => c.PartnerID).Distinct().ToList();
                    var query = model.CUS_Partner.Where(c => c.CustomerID == CusRelateID && !lstID.Contains(c.PartnerID)).Select(c => new DTOPriceCOExPartner
                    {
                        ID = c.CAT_Partner.ID,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CAT_PriceDIMOQRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI Province MOQ
        public DTOResult FLMPrice_DI_PriceMOQ_Province_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.ProvinceID.HasValue).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        ProvinceID = c.ProvinceID.Value,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        ProvinceCode = c.CAT_Province.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Province_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Province_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ProvinceID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceExID;
                        obj.ProvinceID = ProvinceID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQ_Province_NotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.ProvinceID > 0).Select(c => c.ProvinceID).Distinct().ToList();
                    var query = model.CAT_Province.Where(c => !lstID.Contains(c.ID)).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceCode = c.Code,
                        ProvinceName = c.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Group Location
        public DTOResult FLMPrice_DI_PriceMOQ_GroupLocation_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == priceMOQID).Select(c => new DTOPriceDIMOQGroupLocation
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_GroupLocation_SaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_PriceDIMOQGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.GroupOfLocationID = group;
                        model.CAT_PriceDIMOQGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQ_GroupLocation_GroupNotInList(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == priceMOQID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq GroupProduct
        public DTOResult FLMPrice_DI_PriceMOQ_GroupProduct_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == priceMOQID).Select(c => new DTOPriceDIMOQGroupProduct
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQGroupProduct FLMPrice_DI_PriceMOQ_GroupProduct_Get(int id, int cusID)
        {
            try
            {
                DTOPriceDIMOQGroupProduct result = new DTOPriceDIMOQGroupProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQGroupProduct.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQGroupProduct
                        {
                            ID = c.ID,
                            PriceDIMOQID = c.PriceDIMOQID,
                            GroupOfProductID = c.GroupOfProductID,
                            ExprPrice = c.ExprPrice,
                            ExprQuantity = c.ExprQuantity
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.PriceDIMOQID = 0;
                        result.GroupOfProductID = 0;
                        var obj = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).FirstOrDefault();
                        if (obj != null) result.GroupOfProductID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_GroupProduct_Save(DTOPriceDIMOQGroupProduct item, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_PriceDIMOQGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        model.CAT_PriceDIMOQGroupProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.ExprQuantity = item.ExprQuantity;
                    obj.ExprPrice = item.ExprPrice;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQ_GroupProduct_GOPList(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq Location
        public DTOResult FLMPrice_DI_PriceMOQ_Location_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.LocationID.HasValue).Select(c => new DTOPriceDIMOQLocation
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLocation FLMPrice_DI_PriceMOQ_Location_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLocation result = new DTOPriceDIMOQLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIMOQRouting.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Location_Save(DTOPriceDIMOQLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Location_LocationNotInSaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.LocationID = locationID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQ_Location_LocationNotInList(string request, int priceMOQID, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (priceMOQID > 0)
                    {
                        var objContract = model.CAT_PriceDIMOQ.Where(c => c.ID == priceMOQID).FirstOrDefault().CAT_Price.CAT_ContractTerm.CAT_Contract;
                        int CompanyID = objContract.CompanyID > 0 ? objContract.CUS_Company.CustomerRelateID : -1;
                        var lst = new List<int>();

                        if (CompanyID > 0)
                        {
                            lst.Add(CompanyID);
                        }
                        else
                        {
                            lst = model.CUS_Company.Where(c => c.CustomerOwnID == customerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        }

                        var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                        var query = model.CUS_Location.Where(c => lst.Contains(c.CustomerID) && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                        {
                            ID = c.LocationID,
                            Code = c.Code,
                            Location = c.CAT_Location.Location,
                            Address = c.CAT_Location.Address,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq ruote
        public DTOResult FLMPrice_DI_PriceMOQ_Route_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.RoutingID.HasValue).Select(c => new DTOPriceDIMOQRouting
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_Route_SaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQ_Route_RouteNotInList(string request, int priceMOQID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.RoutingID.HasValue).Select(c => c.RoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq parent route
        public DTOResult FLMPrice_DI_PriceMOQ_ParentRoute_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceDIMOQParentRouting
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQParentRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQ_ParentRoute_SaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQ_ParentRoute_RouteNotInList(string request, int priceMOQID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();
                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();
                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region price ex new

        #region info
        public DTOResult FLMPrice_DI_Ex_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIEx.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDIEx
                    {
                        ID = c.ID,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                        ExprCBM = c.ExprCBM,
                        ExprInput = c.ExprInput,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        ExprTon = c.ExprTon,
                        Note = c.Note,
                        DIExSumID = c.DIExSumID,
                        DIExSumName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIEx FLMPrice_DI_Ex_Get(int id)
        {
            try
            {
                DTOPriceDIEx result = new DTOPriceDIEx();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIEx.Where(c => c.ID == id).Select(c => new DTOPriceDIEx
                        {
                            ID = c.ID,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            ExprCBM = c.ExprCBM,
                            ExprInput = c.ExprInput,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            ExprTon = c.ExprTon,
                            Note = c.Note,
                            DIExSumID = c.DIExSumID,
                            DIExSumName = c.SYS_Var.ValueOfVar,
                            TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOPriceDIEx();
                        result.ID = 0;
                        var typeEx = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        result.TypeOfPriceDIExID = 0;
                        if (typeEx != null) result.TypeOfPriceDIExID = typeEx.ID;
                        var diExSum = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIExSum).FirstOrDefault();
                        result.DIExSumID = 0;
                        if (diExSum != null) result.DIExSumID = diExSum.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMPrice_DI_Ex_Save(DTOPriceDIEx item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIEx.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIEx();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceDIEx.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;
                    obj.DIExSumID = item.DIExSumID;
                    obj.Note = item.Note;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIEx.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == obj.ID))
                            model.CAT_PriceDIExGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == obj.ID))
                            model.CAT_PriceDIExGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == obj.ID))
                            model.CAT_PriceDIExRouting.Remove(item);

                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIExID == obj.ID))
                            model.FIN_Temp.Remove(item);

                        model.CAT_PriceDIEx.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex GroupLocation
        public DTOResult FLMPrice_DI_Ex_GroupLocation_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceExID).Select(c => new DTOPriceDIExGroupLocation
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_GroupLocation_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_PriceDIExGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.GroupOfLocationID = group;
                        model.CAT_PriceDIExGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_Ex_GroupLocation_GroupNotInList(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceExID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex GroupProduct
        public DTOResult FLMPrice_DI_Ex_GroupProduct_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == priceExID).Select(c => new DTOPriceDIExGroupProduct
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIExGroupProduct FLMPrice_DI_Ex_GroupProduct_Get(int id, int cusID)
        {
            try
            {
                DTOPriceDIExGroupProduct result = new DTOPriceDIExGroupProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIExGroupProduct.Where(c => c.ID == id).Select(c => new DTOPriceDIExGroupProduct
                        {
                            ID = c.ID,
                            PriceDIExID = c.PriceDIExID,
                            GroupOfProductID = c.GroupOfProductID,
                            ExprPrice = c.ExprPrice,
                            ExprQuantity = c.ExprQuantity
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.PriceDIExID = 0;
                        result.GroupOfProductID = 0;
                        var obj = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).FirstOrDefault();
                        if (obj != null) result.GroupOfProductID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_GroupProduct_Save(DTOPriceDIExGroupProduct item, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_PriceDIExGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIExGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        model.CAT_PriceDIExGroupProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.ExprQuantity = item.ExprQuantity;
                    obj.ExprPrice = item.ExprPrice;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_Ex_GroupProduct_GOPList(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex Location
        public DTOResult FLMPrice_DI_Ex_Location_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.LocationID.HasValue).Select(c => new DTOPriceDIExLocation
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIExLocation FLMPrice_DI_Ex_Location_Get(int id)
        {
            try
            {
                DTOPriceDIExLocation result = new DTOPriceDIExLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIExRouting.Where(c => c.ID == id).Select(c => new DTOPriceDIExLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Location_Save(DTOPriceDIExLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIExRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Location_LocationNotInSaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.LocationID = locationID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_Ex_Location_LocationNotInList(string request, int priceExID, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (priceExID > 0)
                    {
                        var objContract = model.CAT_PriceDIEx.Where(c => c.ID == priceExID).FirstOrDefault().CAT_Price.CAT_ContractTerm.CAT_Contract;
                        int CompanyID = objContract.CompanyID > 0 ? objContract.CUS_Company.CustomerRelateID : -1;
                        var lst = new List<int>();

                        if (CompanyID > 0)
                        {
                            lst.Add(CompanyID);
                        }
                        else
                        {
                            lst = model.CUS_Company.Where(c => c.CustomerOwnID == customerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        }

                        var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                        var query = model.CUS_Location.Where(c => lst.Contains(c.CustomerID) && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                        {
                            ID = c.LocationID,
                            Code = c.Code,
                            Location = c.CAT_Location.Location,
                            Address = c.CAT_Location.Address,
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex ruote
        public DTOResult FLMPrice_DI_Ex_Route_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.RoutingID.HasValue).Select(c => new DTOPriceDIExRouting
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Route_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_Ex_Route_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.RoutingID > 0).Select(c => c.RoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex parent route
        public DTOResult FLMPrice_DI_Ex_ParentRoute_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceDIExParentRouting
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExParentRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_ParentRoute_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_Ex_ParentRoute_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI partner
        public DTOResult FLMPrice_DI_Ex_Partner_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.PartnerID.HasValue).Select(c => new DTOPriceDIExPartner
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        PartnerID = c.PartnerID.Value,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerCode = c.CAT_Partner.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Partner_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Partner_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var PartnerID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.PartnerID = PartnerID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_Ex_Partner_PartnerNotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    var CusRelateID = -1;
                    if (objTerm.CAT_Contract.CompanyID > 0)
                    {
                        CusRelateID = objTerm.CAT_Contract.CUS_Company.CustomerRelateID;
                    }
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.PartnerID > 0).Select(c => c.PartnerID).Distinct().ToList();
                    var query = model.CUS_Partner.Where(c => c.CustomerID == CusRelateID && !lstID.Contains(c.PartnerID)).Select(c => new DTOPriceCOExPartner
                    {
                        ID = c.CAT_Partner.ID,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI Ex MOQ
        public DTOResult FLMPrice_DI_Ex_Province_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ProvinceID.HasValue).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceID = c.ProvinceID.Value,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        ProvinceCode = c.CAT_Province.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Province_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Ex_Province_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ProvinceID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.ProvinceID = ProvinceID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_Ex_Province_NotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ProvinceID > 0).Select(c => c.ProvinceID).Distinct().ToList();
                    var query = model.CAT_Province.Where(c => !lstID.Contains(c.ID)).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceCode = c.Code,
                        ProvinceName = c.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Loading Up

        #region common
        public void FLMPrice_DI_Load_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                            model.CAT_PriceDILoadDetail.Remove(detail);

                        model.CAT_PriceDILoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Load_DeleteList(List<int> data)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var id in data)
                    {
                        var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);

                            model.CAT_PriceDILoad.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_Load_DeleteAllList(int priceID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        foreach (var diload in model.CAT_PriceDILoad.Where(c => c.PriceID == objPrice.ID && c.IsLoading))
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == diload.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);
                            model.CAT_PriceDILoad.Remove(diload);
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không thấy bảng giá");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Location
        public List<DTOPriceTruckDILoad> FLMPrice_DI_LoadLocation_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadLocation_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadLocation_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadLocation_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_LoadLocation_LocationNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadLocation_LocationNotIn_List(model, Account, request, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadLocation_LocationNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadLocation_LocationNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadLocation_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadLocation_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export FLMPrice_DI_LoadLocation_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadLocation_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadLocation_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 1, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Partner
        public List<DTOPriceDILoadPartner> FLMPrice_DI_LoadPartner_Partner_List(int priceID)
        {
            try
            {
                List<DTOPriceDILoadPartner> result = new List<DTOPriceDILoadPartner>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadParner_Partner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadPartner_Partner_SaveList(List<DTOPriceDILoadPartner> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_Partner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_LoadPartner_Partner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_Partner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadPartner_Partner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_Partner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadPartner_Partner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_Partner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Route
        public List<DTOPriceTruckDILoad> FLMPrice_DI_LoadRoute_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadRoute_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadRoute_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadRoute_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_LoadRoute_RouteNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadRoute_RouteNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadRoute_RouteNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadRoute_RouteNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadRoute_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadRoute_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export FLMPrice_DI_LoadRoute_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadRoute_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_DI_LoadRoute_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 2, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region TypeOfPartner
        public List<DTOPriceTruckDILoad> FLMPrice_DI_LoadPartner_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadPartner_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_LoadPartner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadPartner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadPartner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export FLMPrice_DI_LoadPartner_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_LoadPartner_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 3, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Unload

        #region common
        public void FLMPrice_DI_UnLoad_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                            model.CAT_PriceDILoadDetail.Remove(detail);

                        model.CAT_PriceDILoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoad_DeleteList(List<int> data)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var id in data)
                    {
                        var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);

                            model.CAT_PriceDILoad.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoad_DeleteAllList(int priceID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        foreach (var diload in model.CAT_PriceDILoad.Where(c => c.PriceID == objPrice.ID && !c.IsLoading))
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == diload.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);
                            model.CAT_PriceDILoad.Remove(diload);
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không thấy bảng giá");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Location
        public List<DTOPriceTruckDILoad> FLMPrice_DI_UnLoadLocation_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadLocation_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadLocation_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadLocation_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_UnLoadLocation_LocationNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadLocation_LocationNotIn_List(model, Account, request, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadLocation_LocationNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadLocation_LocationNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadLocation_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadLocation_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export FLMPrice_DI_UnLoadLocation_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadLocation_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadLocation_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 1, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Route
        public List<DTOPriceTruckDILoad> FLMPrice_DI_UnLoadRoute_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadRoute_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadRoute_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadRoute_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_UnLoadRoute_RouteNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadRoute_RouteNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadRoute_RouteNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadRoute_RouteNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadRoute_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadRoute_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export FLMPrice_DI_UnLoadRoute_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadRoute_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadRoute_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 2, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region TypeOfPartner
        public List<DTOPriceTruckDILoad> FLMPrice_DI_UnLoadPartner_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadPartner_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_UnLoadPartner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadPartner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadPartner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export FLMPrice_DI_UnLoadPartner_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadPartner_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 3, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Partner
        public List<DTOPriceDILoadPartner> FLMPrice_DI_UnLoadPartner_Partner_List(int priceID)
        {
            try
            {
                List<DTOPriceDILoadPartner> result = new List<DTOPriceDILoadPartner>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_Partner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadPartner_Partner_SaveList(List<DTOPriceDILoadPartner> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_Partner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_UnLoadPartner_Partner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_Partner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadPartner_Partner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_Partner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_UnLoadPartner_Partner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_Partner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #endregion

        #region MOQ Load & Unload

        #region Load

        #region info
        public DTOResult FLMPrice_DI_PriceMOQLoad_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && c.IsLoading).Select(c => new DTOPriceDIMOQLoad
                    {
                        ID = c.ID,
                        MOQName = c.MOQName,
                        PriceID = c.PriceID,
                        ExprInput = c.ExprInput,
                        ExprCBM = c.ExprCBM,
                        ExprTon = c.ExprTon,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        DIMOQLoadSumID = c.DIMOQLoadSumID,
                        DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoad>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLoad FLMPrice_DI_PriceMOQLoad_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLoad result = new DTOPriceDIMOQLoad();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id && c.IsLoading).Select(c => new DTOPriceDIMOQLoad
                        {
                            ID = c.ID,
                            MOQName = c.MOQName,
                            PriceID = c.PriceID,
                            ExprInput = c.ExprInput,
                            ExprCBM = c.ExprCBM,
                            ExprTon = c.ExprTon,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            DIMOQLoadSumID = c.DIMOQLoadSumID,
                            DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                            TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOPriceDIMOQLoad();
                        result.ID = 0;
                        result.DIMOQLoadSumID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIMOQLoadSum).FirstOrDefault();
                        if (obj != null) result.DIMOQLoadSumID = obj.ID;
                        result.TypeOfPriceDIExID = 0;
                        var objType = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        if (objType != null) result.TypeOfPriceDIExID = objType.ID;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMPrice_DI_PriceMOQLoad_Save(DTOPriceDIMOQLoad item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQLoad();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        obj.IsLoading = true;
                        model.CAT_PriceDIMOQLoad.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MOQName = item.MOQName;
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.DIMOQLoadSumID = item.DIMOQLoadSumID;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;

                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var moqload in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && c.IsLoading))
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(moqload);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Group Location
        public DTOResult FLMPrice_DI_PriceMOQLoad_GroupLocation_List(string request, int priceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == priceMOQLoadID).Select(c => new DTOPriceDIMOQLoadGroupLocation
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_GroupLocation_SaveList(List<int> lst, int priceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = priceMOQLoadID;
                        obj.GroupOfLocationID = group;
                        model.CAT_PriceDIMOQLoadGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQLoad_GroupLocation_GroupNotInList(string request, int priceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == priceMOQLoadID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq load GroupProduct
        public DTOResult FLMPrice_DI_PriceMOQLoad_GroupProduct_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID).Select(c => new DTOPriceDIMOQLoadGroupProduct
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLoadGroupProduct FLMPrice_DI_PriceMOQLoad_GroupProduct_Get(int id, int cusID)
        {
            try
            {
                DTOPriceDIMOQLoadGroupProduct result = new DTOPriceDIMOQLoadGroupProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQLoadGroupProduct
                        {
                            ID = c.ID,
                            PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                            GroupOfProductID = c.GroupOfProductID,
                            ExprPrice = c.ExprPrice,
                            ExprQuantity = c.ExprQuantity
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.PriceDIMOQLoadID = 0;
                        result.GroupOfProductID = 0;
                        var obj = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).FirstOrDefault();
                        if (obj != null) result.GroupOfProductID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_GroupProduct_Save(DTOPriceDIMOQLoadGroupProduct item, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_PriceDIMOQLoadGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQLoadGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        model.CAT_PriceDIMOQLoadGroupProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.ExprQuantity = item.ExprQuantity;
                    obj.ExprPrice = item.ExprPrice;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQLoad_GroupProduct_GOPList(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq load Location
        public DTOResult FLMPrice_DI_PriceMOQLoad_Location_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.LocationID.HasValue).Select(c => new DTOPriceDIMOQLoadLocation
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        LocationID = c.LocationID.Value,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_Location_LocationNotInSaveList(List<int> lst, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        obj.LocationID = locationID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQLoad_Location_LocationNotInList(string request, int PriceMOQLoadID, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (PriceMOQLoadID > 0)
                    {
                        var objContract = model.CAT_PriceDIMOQLoad.Where(c => c.ID == PriceMOQLoadID).FirstOrDefault().CAT_Price.CAT_ContractTerm.CAT_Contract;
                        int CompanyID = objContract.CompanyID > 0 ? objContract.CUS_Company.CustomerRelateID : -1;
                        var lst = new List<int>();

                        if (CompanyID > 0)
                        {
                            lst.Add(CompanyID);
                        }
                        else
                        {
                            lst = model.CUS_Company.Where(c => c.CustomerOwnID == customerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        }

                        var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                        var query = model.CUS_Location.Where(c => lst.Contains(c.CustomerID) && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                        {
                            ID = c.LocationID,
                            Code = c.Code,
                            Location = c.LocationName,
                            Address = c.CAT_Location.Address,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceDIMOQLoadLocation FLMPrice_DI_PriceMOQLoad_Location_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLoadLocation result = new DTOPriceDIMOQLoadLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIMOQLoadRouting.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQLoadLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_DI_PriceMOQLoad_Location_Save(DTOPriceDIMOQLoadLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoadRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq ruote
        public DTOResult FLMPrice_DI_PriceMOQLoad_Route_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.RoutingID.HasValue).Select(c => new DTOPriceDIMOQLoadRoute
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadRoute>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_Route_SaveList(List<int> lst, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQLoad_Route_RouteNotInList(string request, int PriceMOQLoadID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.RoutingID.HasValue).Select(c => c.RoutingID).Distinct().ToList();

                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq parent route
        public DTOResult FLMPrice_DI_PriceMOQLoad_ParentRoute_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceDIMOQLoadParentRoute
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadParentRoute>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_ParentRoute_SaveList(List<int> lst, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQLoad_ParentRoute_RouteNotInList(string request, int PriceMOQLoadID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu phụ lục");
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI Province MOQ
        public DTOResult FLMPrice_DI_PriceMOQLoad_Province_List(string request, int PriceDIMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceDIMOQLoadID && c.ProvinceID.HasValue).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceID = c.ProvinceID.Value,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        ProvinceCode = c.CAT_Province.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_Province_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQLoad_Province_SaveList(List<int> lst, int PriceDIMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ProvinceID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceDIMOQLoadID;
                        obj.ProvinceID = ProvinceID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_DI_PriceMOQLoad_Province_NotInList(string request, int PriceDIMOQLoadID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceDIMOQLoadID && c.ProvinceID > 0).Select(c => c.ProvinceID).Distinct().ToList();
                    var query = model.CAT_Province.Where(c => !lstID.Contains(c.ID)).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceCode = c.Code,
                        ProvinceName = c.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Unload

        #region info
        public DTOResult FLMPrice_DI_PriceMOQUnLoad_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && !c.IsLoading).Select(c => new DTOPriceDIMOQLoad
                    {
                        ID = c.ID,
                        MOQName = c.MOQName,
                        PriceID = c.PriceID,
                        ExprInput = c.ExprInput,
                        ExprCBM = c.ExprCBM,
                        ExprTon = c.ExprTon,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        DIMOQLoadSumID = c.DIMOQLoadSumID,
                        DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoad>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLoad FLMPrice_DI_PriceMOQUnLoad_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLoad result = new DTOPriceDIMOQLoad();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id && c.IsLoading == false).Select(c => new DTOPriceDIMOQLoad
                        {
                            ID = c.ID,
                            MOQName = c.MOQName,
                            PriceID = c.PriceID,
                            ExprInput = c.ExprInput,
                            ExprCBM = c.ExprCBM,
                            ExprTon = c.ExprTon,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            DIMOQLoadSumID = c.DIMOQLoadSumID,
                            DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                            TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                        }).FirstOrDefault();

                    }
                    else
                    {
                        result = new DTOPriceDIMOQLoad();
                        result.ID = 0;
                        result.DIMOQLoadSumID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIMOQLoadSum).FirstOrDefault();
                        if (obj != null) result.DIMOQLoadSumID = obj.ID;
                        result.TypeOfPriceDIExID = 0;
                        var objType = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        if (objType != null) result.TypeOfPriceDIExID = objType.ID;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMPrice_DI_PriceMOQUnLoad_Save(DTOPriceDIMOQLoad item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQLoad();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        obj.IsLoading = false;
                        model.CAT_PriceDIMOQLoad.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MOQName = item.MOQName;
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.DIMOQLoadSumID = item.DIMOQLoadSumID;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQUnLoad_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_PriceMOQUnLoad_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var moqload in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && !c.IsLoading))
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(moqload);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #endregion

        #region CAT_PriceCOContainer
        public DTOPriceCOContainerData FLMPrice_CO_COContainer_Data(int priceID)
        {
            try
            {
                DTOPriceCOContainerData result = new DTOPriceCOContainerData();
                result.ListDetail = new List<DTOPriceCOContainer>();
                result.ListPacking = new List<CATPacking>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");
                    result.ListDetail = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID).Select(c => new DTOPriceCOContainer
                    {
                        ID = c.ID,
                        PackingID = c.PackingID,
                        Price = c.Price,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        PriceID = c.PriceID,
                        ContractRoutingID = c.ContractRoutingID.Value
                    }).ToList();
                    result.ListPacking = model.CAT_ContractCODefault.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new CATPacking
                    {
                        ID = c.PackingID,
                        Code = c.CAT_Packing.Code,
                        PackingName = c.CAT_Packing.PackingName,
                        TypeOfPackageID = c.CAT_Packing.TypeOfPackageID
                    }).Distinct().ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_COContainer_SaveList(List<DTOPriceCOContainer> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var priceNew in data)
                    {
                        var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == priceNew.ContractRoutingID && c.PackingID == priceNew.PackingID && c.PriceID == priceID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_PriceCOContainer();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            obj.ContractRoutingID = priceNew.ContractRoutingID;
                            obj.PackingID = priceNew.PackingID;
                            model.CAT_PriceCOContainer.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMax = priceNew.PriceMax;
                        obj.PriceMin = priceNew.PriceMin;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_CO_COContainer_ContainerList(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID).Select(c => c.PackingID).Distinct().ToList();
                    var query = model.CAT_Packing.Where(c => lisGOV.Contains(c.ID) && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATPacking>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_COContainer_ContainerDelete(List<int> lstPacking, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    foreach (var packing in lstPacking)
                    {
                        foreach (var priceGov in model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID && c.PackingID == packing))
                        {
                            model.CAT_PriceCOContainer.Remove(priceGov);
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_CO_COContainer_ContainerNotInList(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID).Select(c => c.PackingID).Distinct().ToList();
                    var query = model.CAT_Packing.Where(c => !lisGOV.Contains(c.ID) && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATPacking>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_COContainer_ContainerNotInSave(List<int> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        var listRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objPrice.CAT_ContractTerm.ContractID).Select(c => c.ID).ToList();
                        foreach (var route in listRoute)
                        {
                            foreach (var packing in lst)
                            {
                                var obj = model.CAT_PriceCOContainer.FirstOrDefault(c => c.PriceID == priceID && c.PackingID == packing);
                                if (obj == null)
                                {
                                    obj = new CAT_PriceCOContainer();
                                    obj.PackingID = packing;
                                    obj.PriceID = priceID;
                                    obj.ContractRoutingID = route;
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    model.CAT_PriceCOContainer.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Price = 0;
                            }
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceCOContainerExcelData FLMPrice_CO_COContainer_ExcelData(int priceid, int termID)
        {
            try
            {
                DTOPriceCOContainerExcelData result = new DTOPriceCOContainerExcelData();
                result.ListDetail = new List<DTOPriceCOContainer>();
                result.ListPacking = new List<CATPacking>();
                result.ListRouting = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceid);
                    if (price == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");

                    result.ListDetail = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceid).Select(c => new DTOPriceCOContainer
                    {
                        ID = c.ID,
                        ContractRoutingID = c.ContractRoutingID.Value,
                        PriceMin = c.PriceMin,
                        PriceMax = c.PriceMax,
                        PackingID = c.PackingID,
                        Price = c.Price
                    }).ToList();

                    result.ListPacking = model.CAT_ContractCODefault.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new CATPacking
                    {
                        ID = c.PackingID,
                        Code = c.CAT_Packing.Code,
                        PackingName = c.CAT_Packing.PackingName,
                    }).Distinct().ToList();

                    result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == termID).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_COContainer_ExcelImport(List<DTOPriceCOContainerImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == detail.ContractRoutingID && c.PackingID == detail.PackingID && c.PriceID == priceID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new CAT_PriceCOContainer();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.PackingID = detail.PackingID;
                                obj.ContractRoutingID = row.RouteID;
                                model.CAT_PriceCOContainer.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                            obj.PriceMax = detail.PriceMax;
                            obj.PriceMin = detail.PriceMin;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_CO_GroupContainer_ExcelInit(bool isFrame, int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = FLMPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListPacking)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListPacking)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListPacking)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRouting)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListPacking)
                                {
                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.PackingID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRouting)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListPacking)
                                {

                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.PackingID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMPrice_CO_GroupContainer_ExcelChange(bool isFrame, int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = FLMPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListPacking.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListPacking.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRouting.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRouting.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_CO_GroupContainer_ExcelOnImport(bool isFrame, int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListPacking.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListPacking.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRouting.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRouting.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMPrice_CO_GroupContainer_ExcelApprove(bool isFrame, int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListPacking.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListPacking.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRouting)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListPacking)
                                        {
                                            String priceMin = HelperExcel.GetString(eRow, colData++);
                                            String priceMax = HelperExcel.GetString(eRow, colData++);
                                            decimal? getpriceMin = null;
                                            decimal? getpriceMax = null;
                                            try
                                            {
                                                getpriceMin = decimal.Parse(priceMin);
                                            }
                                            catch
                                            {
                                                getpriceMin = null;
                                            }
                                            try
                                            {
                                                getpriceMax = decimal.Parse(priceMax);
                                            }
                                            catch
                                            {
                                                getpriceMax = null;
                                            }

                                            var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == getRoutingID && c.PackingID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceCOContainer();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.PackingID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceCOContainer.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.PriceMax = getpriceMax;
                                            obj.PriceMin = getpriceMin;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRouting)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListPacking)
                                        {
                                            String price = HelperExcel.GetString(eRow, colData++);
                                            decimal getprice = 0;
                                            try
                                            {
                                                getprice = decimal.Parse(price);
                                            }
                                            catch
                                            {
                                                getprice = 0;
                                            }
                                            var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == getRoutingID && c.PackingID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceCOContainer();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.PackingID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceCOContainer.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.Price = getprice;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region FLMPrice_CO_Ex
        #region info
        public DTOResult FLMPrice_CO_Ex_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOEx.Where(c => c.PriceID == priceID).Select(c => new DTOPriceCOEx
                    {
                        ID = c.ID,
                        TypeOfPriceCOExID = c.TypeOfPriceCOExID,
                        TypeOfPriceCOExName = c.CAT_TypeOfPriceCOEx.TypeName,
                        COExSumID = c.COExSumID,
                        COExSumName = c.SYS_Var.ValueOfVar,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        Note = c.Note,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceCOEx FLMPrice_CO_Ex_Get(int id)
        {
            try
            {
                DTOPriceCOEx result = new DTOPriceCOEx();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceCOEx.Where(c => c.ID == id).Select(c => new DTOPriceCOEx
                        {
                            ID = c.ID,
                            TypeOfPriceCOExID = c.TypeOfPriceCOExID,
                            TypeOfPriceCOExName = c.CAT_TypeOfPriceCOEx.TypeName,
                            COExSumID = c.COExSumID,
                            COExSumName = c.SYS_Var.ValueOfVar,
                            ExprInput = c.ExprInput,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            Note = c.Note,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOPriceCOEx();
                        result.ID = 0;
                        var typeEx = model.CAT_TypeOfPriceCOEx.FirstOrDefault();
                        result.TypeOfPriceCOExID = 0;
                        if (typeEx != null) result.TypeOfPriceCOExID = typeEx.ID;
                        var COExSum = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.COExSum).FirstOrDefault();
                        result.COExSumID = 0;
                        if (COExSum != null) result.COExSumID = COExSum.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMPrice_CO_Ex_Save(DTOPriceCOEx item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOEx.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceCOEx();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceCOEx.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ExprInput = item.ExprInput;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.TypeOfPriceCOExID = item.TypeOfPriceCOExID;
                    obj.COExSumID = item.COExSumID;
                    obj.Note = item.Note;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOEx.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceCOExContainer.Where(c => c.PriceCOExID == obj.ID))
                            model.CAT_PriceCOExContainer.Remove(item);
                        foreach (var item in model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == obj.ID))
                            model.CAT_PriceCOExRouting.Remove(item);

                        model.CAT_PriceCOEx.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price co ex Location
        public DTOResult FLMPrice_CO_Ex_Location_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.LocationID.HasValue).Select(c => new DTOPriceCOExLocation
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceCOExLocation FLMPrice_CO_Ex_Location_Get(int id)
        {
            try
            {
                DTOPriceCOExLocation result = new DTOPriceCOExLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceCOExRouting.Where(c => c.ID == id).Select(c => new DTOPriceCOExLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_Location_Save(DTOPriceCOExLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOExRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_Location_LocationNotInSaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.LocationID = locationID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_CO_Ex_Location_LocationNotInList(string request, int priceExID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                    var query = model.CUS_Location.Where(c => c.CustomerID == CustomerID && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        Location = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price CO ex ruote
        public DTOResult FLMPrice_CO_Ex_Route_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.RoutingID.HasValue).Select(c => new DTOPriceCOExRouting
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_Route_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_CO_Ex_Route_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.RoutingID > 0).Select(c => c.RoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price CO ex parent route
        public DTOResult FLMPrice_CO_Ex_ParentRoute_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceCOExParentRouting
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExParentRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_ParentRoute_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_CO_Ex_ParentRoute_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price CO partner
        public DTOResult FLMPrice_CO_Ex_Partner_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.PartnerID.HasValue).Select(c => new DTOPriceCOExPartner
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        PartnerID = c.PartnerID.Value,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerCode = c.CAT_Partner.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_Partner_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_CO_Ex_Partner_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var PartnerID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.PartnerID = PartnerID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMPrice_CO_Ex_Partner_PartnerNotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    var CusRelateID = -1;
                    if (objTerm.CAT_Contract.CompanyID > 0)
                    {
                        CusRelateID = objTerm.CAT_Contract.CUS_Company.CustomerRelateID;
                    }
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.PartnerID > 0).Select(c => c.PartnerID).Distinct().ToList();
                    var query = model.CUS_Partner.Where(c => c.CustomerID == CusRelateID && !lstID.Contains(c.PartnerID)).Select(c => new DTOPriceCOExPartner
                    {
                        ID = c.CAT_Partner.ID,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        #endregion
        #endregion
        #endregion

        #region GroupProduct
        public DTOResult FLMSetting_GroupOfProductAll_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        BiddingGroupOfProductName = c.CAT_GroupOfProduct.GroupOfProduct,
                        BiddingGroupOfProductID = c.BiddingGroupOfProductID,
                        CustomerID = c.CustomerID,
                        GroupName = c.GroupName,
                        Level = c.Level,
                        ParentID = c.ParentID,
                        ParentName = c.CUS_GroupOfProduct2.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMSetting_GroupOfProduct_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == Account.SYSCustomerID).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerID = c.CustomerID,
                        GroupName = c.GroupName,
                        ParentName = c.CUS_GroupOfProduct2.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int FLMSetting_GroupOfProduct_Save(DTOCUSGroupOfProduct item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng Code
                    var objCheck = model.CUS_GroupOfProduct.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID && c.Code == item.Code && c.ID != item.ID);
                    if (objCheck != null)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    #endregion

                    var obj = model.CUS_GroupOfProduct.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CUS_GroupOfProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.CustomerID = Account.SYSCustomerID;
                        #region Kiểm tra parentID
                        if (item.ParentID != null)
                        {
                            // Kiểm tra group parent đã có con chưa? Nếu có ko cho thay đổi
                            var lstProductOfParent = model.CUS_Product.Where(c => c.GroupOfProductID == item.ParentID);
                            if (lstProductOfParent != null && lstProductOfParent.Count() > 0)
                                throw FaultHelper.BusinessFault(DTOErrorString.DAT_HasChild, "Parent has childs");
                        }
                        #endregion
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        #region Kiểm tra parentID
                        // Thay đổi parentID
                        if (item.ParentID != obj.ParentID)
                        {
                            // Trở thành group con của group khác
                            if (item.ParentID != null)
                            {
                                // Kiểm tra group parent mới đã có con chưa? Nếu có ko cho thay đổi
                                var lstProductOfParent = model.CUS_Product.Where(c => c.GroupOfProductID == item.ParentID);
                                if (lstProductOfParent != null && lstProductOfParent.Count() > 0)
                                    throw FaultHelper.BusinessFault(DTOErrorString.DAT_HasChild, "Parent has childs");
                            }
                        }
                        #endregion
                    }
                    obj.BiddingGroupOfProductID = item.BiddingGroupOfProductID;
                    obj.Code = item.Code;
                    obj.GroupName = item.GroupName;
                    obj.Level = 1;
                    obj.PriceOfGOPID = item.PriceOfGOPID;
                    if (obj.ID < 1)
                        model.CUS_GroupOfProduct.Add(obj);

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMSetting_GroupOfProduct_Delete(DTOCUSGroupOfProduct item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        foreach (var child in model.CUS_Product.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CUS_Product.Remove(child);
                        }
                        foreach (var child in model.CUS_GroupOfProductInStock.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CUS_GroupOfProductInStock.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceDIGroupProduct.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CAT_PriceDIGroupProduct.Remove(child);
                        }
                        model.CUS_GroupOfProduct.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public CUSGroupOfProduct FLMSetting_GroupOfProduct_GetByCode(string Code)
        {
            CUSGroupOfProduct result = new CUSGroupOfProduct();
            using (var model = new DataEntities())
            {
                using (var helper = new CopyHelper())
                {
                    CUS_GroupOfProduct obj = model.CUS_GroupOfProduct.FirstOrDefault(c => c.Code == Code && c.CustomerID == Account.SYSCustomerID);
                    if (obj != null)
                    {
                        helper.Copy(obj, result);
                    }
                }
            }
            return result;
        }

        public void FLMSetting_GroupOfProduct_ResetPrice()
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == Account.SYSCustomerID && c.CUS_GroupOfProduct1.Count() == 0);

                    #region Kiểm tra xem Nhóm sản phẩm có được thiết lập đơn vị tính hay chưa
                    var objCheck = lstGroupOfProduct.FirstOrDefault(c => c.PriceOfGOPID == null);
                    if (objCheck != null)
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_Require, "");
                    #endregion

                    if (lstGroupOfProduct != null)
                    {
                        var lstGroupOfProductID = lstGroupOfProduct.Select(c => c.ID).ToList();

                        #region Cập nhật cho PriceTruckLoadingSet
                        var lstPriceTruckLoadingSet = model.CAT_PriceDILoadDetail.Where(c => c.CAT_PriceDILoad.CAT_Price.CAT_ContractTerm.CAT_Contract.CustomerID == Account.SYSCustomerID);
                        foreach (var detail in lstPriceTruckLoadingSet)
                        {
                            var lstExistID = model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == detail.ID).Select(c => c.GroupOfProductID).ToList();
                            var lstNew = lstGroupOfProductID.Where(c => !lstExistID.Contains(c));
                            foreach (var item in lstNew)
                            {
                                CAT_PriceDILoadDetail objDetail = new CAT_PriceDILoadDetail();
                                objDetail.CreatedBy = Account.UserName;
                                objDetail.CreatedDate = DateTime.Now;
                                objDetail.PriceDILoadID = detail.ID;
                                objDetail.GroupOfProductID = item;
                                objDetail.PriceOfGOPID = lstGroupOfProduct.FirstOrDefault(c => c.ID == item).PriceOfGOPID;
                                model.CAT_PriceDILoadDetail.Add(objDetail);
                            }
                        }
                        #endregion


                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMSetting_GroupOfProductMapping_List(string request, int groupOfProductID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProductMapping.Where(c => c.GroupOfProductVENID == groupOfProductID).Select(c => new DTOCUSGroupOfProductMapping
                    {
                        ID = c.ID,
                        SYSCustomerID = c.SYSCustomerID,
                        CustomerID = c.CustomerID,
                        VendorID = c.VendorID,
                        GroupOfProductCUSID = c.GroupOfProductCUSID,
                        GroupOfProductVENID = c.GroupOfProductVENID,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSGroupOfProductMapping>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMSetting_GroupOfProductMappingNotIn_List(string request, int groupOfProductID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var group = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == groupOfProductID);
                    if (group != null)
                    {
                        var lstExistID = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == Account.SYSCustomerID).Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                        var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == group.CustomerID && c.CustomerRelateID != group.CustomerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        var query = model.CUS_GroupOfProduct.Where(c => lstCustomerID.Contains(c.CustomerID) && !lstExistID.Contains(c.ID)).Select(c => new DTOCUSGroupOfProductMapping
                        {
                            ID = 0,
                            SYSCustomerID = Account.SYSCustomerID,
                            CustomerID = c.CustomerID,
                            VendorID = group.CustomerID,
                            GroupOfProductCUSID = c.ID,
                            GroupOfProductVENID = groupOfProductID,
                            GroupOfProductName = c.GroupName,
                            CustomerCode = c.CUS_Customer.Code,
                            CustomerName = c.CUS_Customer.CustomerName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCUSGroupOfProductMapping>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMSetting_GroupOfProductMapping_SaveList(List<DTOCUSGroupOfProductMapping> lst, int groupOfProductID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var group = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == groupOfProductID);
                    if (group != null)
                    {
                        foreach (var item in lst)
                        {
                            var obj = model.CUS_GroupOfProductMapping.FirstOrDefault(c => c.VendorID == Account.SYSCustomerID && c.CustomerID == item.CustomerID && c.GroupOfProductCUSID == item.GroupOfProductCUSID && c.GroupOfProductVENID == item.GroupOfProductVENID);
                            if (obj == null)
                            {
                                obj = new CUS_GroupOfProductMapping();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.CustomerID = item.CustomerID;
                                obj.VendorID = item.VendorID;
                                obj.SYSCustomerID = Account.SYSCustomerID;
                                obj.GroupOfProductCUSID = item.GroupOfProductCUSID;
                                obj.GroupOfProductVENID = item.GroupOfProductVENID;
                                model.CUS_GroupOfProductMapping.Add(obj);
                            }
                        }
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm sản phẩm!");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMSetting_GroupOfProductMapping_Delete(DTOCUSGroupOfProductMapping item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_GroupOfProductMapping.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CUS_GroupOfProductMapping.Remove(obj);
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm sản phẩm!");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region DI_PriceLevel

        public List<DTOPriceDILevelGroupProduct> FLMPrice_DI_PriceLevel_DetailData(int priceID)
        {
            try
            {
                List<DTOPriceDILevelGroupProduct> result = new List<DTOPriceDILevelGroupProduct>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDILevelGroupProduct
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        LevelID = c.ContractLevelID,
                        GroupProductID = c.GroupOfProductID,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_DI_PriceLevel_Save(List<DTOPriceDILevelGroupProduct> lst, int priceid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var priceNew in lst)
                    {
                        var obj = model.CAT_PriceDILevelGroupProduct.FirstOrDefault(c => c.PriceID == priceid && c.ContractRoutingID == priceNew.RoutingID && c.ContractLevelID == priceNew.LevelID && c.GroupOfProductID == priceNew.GroupProductID);
                        if (obj == null)
                        {
                            obj = new CAT_PriceDILevelGroupProduct();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractLevelID = priceNew.LevelID;
                            obj.GroupOfProductID = priceNew.GroupProductID;
                            obj.ContractRoutingID = priceNew.RoutingID;
                            obj.PriceID = priceid;
                            model.CAT_PriceDILevelGroupProduct.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                    }
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceDILevelData FLMPrice_DI_PriceLevel_ExcelData(int priceid, int contractTermID)
        {
            try
            {
                DTOPriceDILevelData result = new DTOPriceDILevelData();
                result.ListDetail = new List<DTOPriceDILevelGroupProduct>();
                result.ListGroupProduct = new List<DTOCUSGroupOfProduct>();
                result.ListLevel = new List<DTOCATContractLevel>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");

                    result.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == objTerm.ContractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName
                    }).ToList();

                    var listGOPMapping = new List<int>();
                    if (objContract.CompanyID > 0)
                    {
                        var CustomerRelateID = objContract.CUS_Company.CustomerRelateID;
                        listGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == objContract.CustomerID && c.CustomerID == CustomerRelateID).Select(c => c.GroupOfProductVENID).ToList();
                    }
                    result.ListGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == objContract.CustomerID && (objContract.CompanyID == null ? true : listGOPMapping.Contains(c.ID))).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                    }).ToList();

                    //result.ListGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == objTerm.CAT_Contract.CustomerID.Value).Select(c => new DTOCUSGroupOfProduct
                    //{
                    //    ID = c.ID,
                    //    Code = c.Code,
                    //    GroupName = c.GroupName,
                    //}).ToList();

                    if (objTerm.IsClosed)
                    {
                        var lstRoutingID = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == objTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();

                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                    result.ListDetail = model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == priceid).Select(c => new DTOPriceDILevelGroupProduct
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        LevelID = c.ContractLevelID,
                        GroupProductID = c.GroupOfProductID,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_DI_PriceLevel_ExcelImport(List<DTOPriceDILevelImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceDILevelGroupProduct.FirstOrDefault(c => c.ContractLevelID == detail.LevelID && c.ContractRoutingID == row.RouteID && c.GroupOfProductID == detail.GroupProductID && c.PriceID == priceID);
                            if (obj == null)
                            {
                                obj = new CAT_PriceDILevelGroupProduct();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractLevelID = detail.LevelID;
                                obj.GroupOfProductID = detail.GroupProductID;
                                obj.ContractRoutingID = row.RouteID;
                                obj.PriceID = priceID;
                                model.CAT_PriceDILevelGroupProduct.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_DI_PriceLevel_ExcelInit(int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = FLMPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        //cot tinh
                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        //cot dong
                        int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                        var cellCols = new List<Cell>();
                        foreach (var level in lst.ListLevel)
                        {
                            cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            col += lst.ListGroupProduct.Count;
                            foreach (var pro in lst.ListGroupProduct)
                            {
                                cellCols.Add(HelperExcel.NewCell(collever++, pro.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                        }

                        // add cot vao row
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                        //merged cot
                        //merged cot tinh
                        col = 0;
                        ws.MergedCells = new List<string>(){ 
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                        };

                        //merged cot dong
                        var mercol = 3;
                        foreach (var level in lst.ListLevel)
                        {
                            ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + lst.ListGroupProduct.Count - 1));
                            mercol += lst.ListGroupProduct.Count;
                        }

                        //du lieu vao
                        int stt = 1;
                        foreach (var route in lst.ListRoute)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(route.Code));
                            cells.Add(HelperExcel.NewCell(route.RoutingName));
                            foreach (var level in lst.ListLevel)
                            {
                                foreach (var pro in lst.ListGroupProduct)
                                {
                                    var check = lst.ListDetail.Where(c => c.RoutingID == route.ID && c.LevelID == level.ID && c.GroupProductID == pro.ID).FirstOrDefault();
                                    if (check != null)
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    else
                                        cells.Add(HelperExcel.NewCell(0));
                                }
                            }
                            stt++;
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMPrice_DI_PriceLevel_ExcelChange(int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = FLMPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    int ColEnd = lst.ListGroupProduct.Count * lst.ListLevel.Count;

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colCheckRoute = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataCodeRouting = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeRouting, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 250);
                        indexError++;
                        if (flag && lst.ListRoute.Where(c => c.Code == dataCodeRouting).Count() < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataCodeRouting).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRoute, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError++;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataPrice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataPrice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_DI_PriceLevel_OnExcelImport(int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    int ColEnd = lstRoute.ListGroupProduct.Count * lstRoute.ListLevel.Count;

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colCheckRoute = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;
                        colData = 1;
                        string dataCodeRouting = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeRouting, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 250);
                        indexError++;
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataCodeRouting).Count() < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataCodeRouting).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRoute, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError++;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataPrice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataPrice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMPrice_DI_PriceLevel_ExcelApprove(int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    int ColEnd = lstRoute.ListGroupProduct.Count * lstRoute.ListLevel.Count;

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colCheckRoute = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            if (eRow.Index == 0) continue;
                            colData = 3;
                            string routeID = HelperExcel.GetString(eRow, colCheckRoute);
                            int getrouteID = Int32.Parse(routeID);
                            foreach (var level in lstRoute.ListLevel)
                            {
                                foreach (var pro in lstRoute.ListGroupProduct)
                                {
                                    string price = "0";
                                    if (colData < eRow.Cells.Count)
                                        price = HelperExcel.GetString(eRow, colData++);
                                    int getprice = Int32.Parse(price);
                                    if (getprice > 0)
                                    {
                                        var obj = model.CAT_PriceDILevelGroupProduct.FirstOrDefault(c => c.ContractLevelID == level.ID && c.ContractRoutingID == getrouteID && c.GroupOfProductID == pro.ID && c.PriceID == priceID);
                                        if (obj == null)
                                        {
                                            obj = new CAT_PriceDILevelGroupProduct();
                                            obj.CreatedBy = Account.UserName;
                                            obj.CreatedDate = DateTime.Now;
                                            obj.ContractLevelID = level.ID;
                                            obj.GroupOfProductID = pro.ID;
                                            obj.ContractRoutingID = getrouteID;
                                            obj.PriceID = priceID;
                                            model.CAT_PriceDILevelGroupProduct.Add(obj);
                                        }
                                        else
                                        {
                                            obj.ModifiedBy = Account.UserName;
                                            obj.ModifiedDate = DateTime.Now;
                                        }
                                        obj.Price = getprice;
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        #endregion

        #region khấu hao mới(theo xe)
        public List<DTOFLMFixedCost> FLMFixedCost_ByAssetList(int assetID)
        {
            try
            {
                List<DTOFLMFixedCost> result = new List<DTOFLMFixedCost>();
                using (var model = new DataEntities())
                {
                    var objAsset = model.FLM_Asset.FirstOrDefault(c => c.ID == assetID);

                    if (objAsset != null)
                    {
                        result = objAsset.FLM_FixedCost.Where(c => c.CostID == (int)CATCostType.FLMDepreciation && c.ReceiptID == null).Select(c => new DTOFLMFixedCost
                        {
                            ID = c.ID,
                            AssetID = c.AssetID,
                            CostID = c.CostID,
                            ReceiptID = c.ReceiptID,
                            Month = c.Month,
                            Year = c.Year,
                            Value = c.Value,
                            IsClosed = c.IsClosed,
                            AssetCode = c.FLM_Asset.VehicleID.HasValue ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID.HasValue ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.Code,
                            ReceiptNo = c.ReceiptID.HasValue ? c.FLM_Receipt.Code : string.Empty
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMFixedCost> FLMFixedCost_Generate(int assetID)
        {
            try
            {
                List<DTOFLMFixedCost> result = new List<DTOFLMFixedCost>();
                using (var model = new DataEntities())
                {
                    var objAsset = model.FLM_Asset.FirstOrDefault(c => c.ID == assetID);

                    if (objAsset != null)
                    {
                        var list = objAsset.FLM_FixedCost.Where(c => c.ReceiptID == null).Select(c => new DTOFLMFixedCost
                            {
                                ID = c.ID,
                                AssetID = c.AssetID,
                                Month = c.Month,
                                Year = c.Year,
                                Value = c.Value,
                                IsClosed = c.IsClosed,
                                CostID = c.CostID
                            }).ToList();

                        result.AddRange(list);

                        var lastFixCost = objAsset.FLM_FixedCost.Where(c => c.ReceiptID == null).OrderByDescending(c => c.Year).ThenByDescending(c => c.Month).FirstOrDefault();

                        if (objAsset.DepreciationStart.HasValue && objAsset.DepreciationPeriod > 0)
                        {
                            DateTime From = objAsset.DepreciationStart.Value.Date;
                            if (lastFixCost != null)
                                From = new DateTime(lastFixCost.Year, lastFixCost.Month, 1).AddMonths(1);
                            decimal ValueEachMonth = Math.Round(objAsset.CurrentValue.Value / objAsset.DepreciationPeriod.Value, 2);
                            List<DTOFLMFixedCost> lstTemp = new List<DTOFLMFixedCost>();
                            for (int i = 0; i < objAsset.DepreciationPeriod.Value; i++)
                            {
                                DTOFLMFixedCost obj = new DTOFLMFixedCost();
                                obj.Month = From.Month;
                                obj.Year = From.Year;
                                obj.IsClosed = false;
                                obj.Value = (decimal)ValueEachMonth;
                                lstTemp.Add(obj);
                                From = From.AddMonths(1);
                            }
                            var last = lstTemp.LastOrDefault();
                            if (last != null)
                            {
                                last.Value = (decimal)objAsset.CurrentValue.Value - (decimal)ValueEachMonth * (objAsset.DepreciationPeriod.Value - 1);
                            }
                            result.AddRange(lstTemp);
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMFixedCost_Save(List<DTOFLMFixedCost> lst, int assetID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objAsset = model.FLM_Asset.FirstOrDefault(c => c.ID == assetID);

                    if (objAsset != null)
                    {
                        foreach (var item in lst.Where(c => !c.IsClosed))
                        {
                            var obj = objAsset.FLM_FixedCost.FirstOrDefault(c => c.CostID == (int)CATCostType.FLMDepreciation && c.Month == item.Month && c.Year == item.Year && c.ReceiptID == null);
                            if (obj == null)
                            {
                                obj = new FLM_FixedCost();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.Month = item.Month;
                                obj.Year = item.Year;
                                obj.IsClosed = false;
                                obj.CostID = (int)CATCostType.FLMDepreciation;
                                objAsset.FLM_FixedCost.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Value = item.Value;
                        }
                        //if (lst.Count > 0)
                        //{
                        //    objAsset.CurrentValue = objAsset.CurrentValue.Value - (double)lst.Sum(c => c.Value);
                        //}
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMFixedCost_ByAssetDelete(int assetID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in model.FLM_FixedCost.Where(c => c.AssetID == assetID && c.CostID == (int)CATCostType.FLMDepreciation && c.ReceiptID == null))
                    {
                        if (!item.IsClosed)
                            model.FLM_FixedCost.Remove(item);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public bool FLMFixedCost_ByAsset_CheckExpr(string sExpression, int assetID)
        {
            try
            {
                bool result = false;
                using (var model = new DataEntities())
                {

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion


        #region tính khấu hao
        public DTOResult FLMFixedCost_List(string request, int month, int year)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsDisposal == false &&
                        (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck))
                        .Select(c => new DTOFLMFixedCostAll
                        {
                            AssetID = c.ID,
                            AssetCode = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : c.RomoocID.HasValue ? c.CAT_Romooc.RegNo : string.Empty,
                            ReceiptNo = string.Empty,
                            Month = 0,
                            Year = 0,
                            FixValue = 0,
                            TotalReceiptValue = 0,
                            IsClosed = false
                        }).ToList();

                    var ListFixCost = model.FLM_FixedCost.Where(c => c.Month == month && c.Year == year).ToList();

                    foreach (var item in query)
                    {
                        item.Month = month;
                        item.Year = year;
                        var fixDep = ListFixCost.FirstOrDefault(c => c.AssetID == item.AssetID && c.ReceiptID == null);
                        if (fixDep != null)
                            item.FixValue = fixDep.Value;
                        var receiptValue = ListFixCost.Where(c => c.AssetID == item.AssetID && c.ReceiptID > 0).ToList();
                        if (receiptValue != null && receiptValue.Count > 0)
                            item.TotalReceiptValue = receiptValue.Sum(c => c.Value);

                        item.IsClosed = (ListFixCost.Count(c => c.AssetID == item.AssetID && c.IsClosed) == ListFixCost.Count(c => c.AssetID == item.AssetID)) && ListFixCost.Count(c => c.AssetID == item.AssetID) > 0;
                    }
                    var lstFinal = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Count();
                    result.Data = lstFinal.Data as IEnumerable<DTOFLMFixedCostAll>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMFixedCost_SaveList(List<int> lstAsset, int month, int year)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    if (lstAsset.Count > 0)
                    {
                        //Check data
                        var flag = true;
                        var lstCurrent = model.FLM_FixedCost.Where(c => lstAsset.Contains(c.AssetID) && c.Month == month && c.Year == year).Select(c => new
                        {
                            c.ID,
                            c.ReceiptID,
                            c.AssetID,
                            Name = c.ReceiptID > 0 ? "Phiếu " + c.FLM_Receipt.Code :
                                c.AssetID > 0 ? c.FLM_Asset.VehicleID > 0 ? "Xe " + c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID > 0 ? "Romooc " + c.FLM_Asset.CAT_Romooc.RegNo : "" : ""
                        }).ToList();

                        if (lstCurrent != null && lstCurrent.Count() > 0)
                        {
                            var monthPrev = new DateTime(year, month, 1).AddMonths(-1);
                            var lstPrev = model.FLM_FixedCost.Where(c => c.Month == monthPrev.Month && c.Year == monthPrev.Year && lstAsset.Contains(c.AssetID)).Select(c => new { c.AssetID, c.ReceiptID, c.IsClosed }).ToList();
                            foreach (var item in lstCurrent)
                            {
                                if (lstPrev.Where(c => c.AssetID == item.AssetID && c.ReceiptID == item.ReceiptID && c.IsClosed == false).Count() > 0)
                                {
                                    throw FaultHelper.BusinessFault(null, null, string.Format("Phải chốt khấu hao của {0} tháng trước", item.Name));
                                    flag = false;
                                }
                            }
                        }

                        if (flag)
                        {
                            //Save data
                            var lstReceiptID = new List<int>();
                            foreach (var id in lstAsset)
                            {
                                foreach (var obj in model.FLM_FixedCost.Where(c => c.AssetID == id && c.Month == month && c.Year == year))
                                {
                                    obj.IsClosed = true;
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;

                                    if (obj.ReceiptID > 0)
                                    {
                                        foreach (var vehicle in model.FLM_ReceiptCost.Where(c => c.ReceiptID == obj.ReceiptID))
                                        {
                                            vehicle.CurrentValue = vehicle.CurrentValue - obj.Value;
                                            vehicle.ModifiedBy = Account.UserName;
                                            vehicle.ModifiedDate = DateTime.Now;
                                        }

                                        if (!lstReceiptID.Contains(obj.ReceiptID.Value))
                                            lstReceiptID.Add(obj.ReceiptID.Value);
                                    }
                                    else if (obj.AssetID > 0)
                                    {
                                        var detail = model.FLM_Asset.FirstOrDefault(c => c.ID == obj.AssetID);
                                        if (detail != null && detail.DepreciationPeriod > 0)
                                        {
                                            detail.DepreciationPeriod = detail.DepreciationPeriod - 1;
                                            detail.CurrentValue = detail.CurrentValue - obj.Value;
                                            detail.ModifiedBy = Account.UserName;
                                            detail.ModifiedDate = DateTime.Now;
                                        }
                                    }
                                }
                            }

                            foreach (var item in model.FLM_Receipt.Where(c => lstReceiptID.Contains(c.ID)))
                            {
                                if (item.DepreciationPeriod > 0)
                                {
                                    item.DepreciationPeriod = item.DepreciationPeriod - 1;
                                    item.ModifiedBy = Account.UserName;
                                    item.ModifiedDate = DateTime.Now;
                                }
                            }
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMFixedCost_DeleteList(List<int> lstAsset, int month, int year)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    if (lstAsset.Count > 0)
                    {
                        //Check data
                        var flag = true;
                        var lstCurrent = model.FLM_FixedCost.Where(c => lstAsset.Contains(c.AssetID) && c.Month == month && c.Year == year).Select(c => new
                        {
                            c.ID,
                            c.ReceiptID,
                            c.AssetID,
                            Name = c.ReceiptID > 0 ? "Phiếu " + c.FLM_Receipt.Code :
                                c.AssetID > 0 ? c.FLM_Asset.VehicleID > 0 ? "Xe " + c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID > 0 ? "Romooc " + c.FLM_Asset.CAT_Romooc.RegNo : "" : ""
                        }).ToList();

                        if (lstCurrent != null && lstCurrent.Count() > 0)
                        {
                            var monthPrev = new DateTime(year, month, 1).AddMonths(1);
                            var lstPrev = model.FLM_FixedCost.Where(c => c.Month == monthPrev.Month && c.Year == monthPrev.Year && lstAsset.Contains(c.AssetID)).Select(c => new { c.AssetID, c.ReceiptID, c.IsClosed }).ToList();
                            foreach (var item in lstCurrent)
                            {
                                if (lstPrev.Where(c => c.AssetID == item.AssetID && c.ReceiptID == item.ReceiptID && c.IsClosed == false).Count() > 0)
                                {
                                    throw FaultHelper.BusinessFault(null, null, string.Format("Phải khấu hao của {0} tháng sau đã đóng", item.Name));
                                    flag = false;
                                }
                            }
                        }

                        if (flag)
                        {
                            //Save data
                            var lstReceiptID = new List<int>();
                            foreach (var id in lstAsset)
                            {
                                foreach (var obj in model.FLM_FixedCost.Where(c => c.AssetID == id && c.Month == month && c.Year == year))
                                {
                                    obj.IsClosed = false;
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;

                                    if (obj.ReceiptID > 0)
                                    {
                                        foreach (var vehicle in model.FLM_ReceiptCost.Where(c => c.ReceiptID == obj.ReceiptID))
                                        {
                                            vehicle.CurrentValue = vehicle.CurrentValue + obj.Value;
                                            vehicle.ModifiedBy = Account.UserName;
                                            vehicle.ModifiedDate = DateTime.Now;
                                        }

                                        if (!lstReceiptID.Contains(obj.ReceiptID.Value))
                                            lstReceiptID.Add(obj.ReceiptID.Value);
                                    }
                                    else if (obj.AssetID > 0)
                                    {
                                        var detail = model.FLM_Asset.FirstOrDefault(c => c.ID == obj.AssetID);
                                        if (detail != null && detail.DepreciationPeriod >= 0)
                                        {
                                            detail.DepreciationPeriod = detail.DepreciationPeriod + 1;
                                            detail.CurrentValue = detail.CurrentValue - obj.Value;
                                            detail.ModifiedBy = Account.UserName;
                                            detail.ModifiedDate = DateTime.Now;
                                        }
                                    }
                                }
                            }

                            foreach (var item in model.FLM_Receipt.Where(c => lstReceiptID.Contains(c.ID)))
                            {
                                if (item.DepreciationPeriod >= 0)
                                {
                                    item.DepreciationPeriod = item.DepreciationPeriod + 1;
                                    item.ModifiedBy = Account.UserName;
                                    item.ModifiedDate = DateTime.Now;
                                }
                            }
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMFixedCost> FLMFixedCost_ReceiptList(int assetID, int month, int year)
        {
            try
            {
                List<DTOFLMFixedCost> result = new List<DTOFLMFixedCost>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_FixedCost.Where(c => c.AssetID == assetID && c.ReceiptID > 0 && c.Month == month && c.Year == year).Select(c => new DTOFLMFixedCost
                       {
                           ID = c.ID,
                           AssetID = c.AssetID,
                           ReceiptID = c.ReceiptID,
                           ReceiptNo = c.ReceiptID > 0 ? c.FLM_Receipt.Code : string.Empty,
                           Value = c.Value,
                           IsClosed = c.IsClosed
                       }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region FLM_VehiclePlan
        public DTOFLMVehiclePlanData FLMVehiclePlan_Data(List<int> lstAssetID, DateTime dateFrom, DateTime dateTo)
        {
            try
            {
                DTOFLMVehiclePlanData result = new DTOFLMVehiclePlanData();
                result.ListTask = new List<DTOFLMVehiclePlan>();
                result.ListRSVehicle = new List<DTOFLMVehiclePlanRSVehicle>();
                result.ListRSTypeDriver = new List<DTOFLMVehiclePlanRSTypeDriver>();

                dateFrom = dateFrom.Date;
                dateTo = dateTo.Date;
                using (var model = new DataEntities())
                {
                    result.ListTask.AddRange(model.FLM_VehiclePlan.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.DateFrom >= dateFrom && c.DateFrom <= dateTo && lstAssetID.Contains(c.VehicleID)).Select(c => new DTOFLMVehiclePlan
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            VehicleNo = c.CAT_Vehicle.RegNo,
                            DriverID = c.DriverID,
                            DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                            DriverCode = c.FLM_Driver.Code,
                            TypeOfDriverID = c.TypeOfDriverID,
                            SortOrder = c.SortOrder,
                            DateFrom = c.DateFrom,
                            DateTo = c.DateTo
                        }).ToList());

                    result.ListRSVehicle.AddRange(model.CAT_Vehicle.Where(c => lstAssetID.Contains(c.ID)).Select(c => new DTOFLMVehiclePlanRSVehicle
                    {
                        VehicleID = c.ID,
                        RegNo = c.RegNo
                    }).ToList());

                    result.ListRSTypeDriver.AddRange(model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfDriver).Select(c => new DTOFLMVehiclePlanRSTypeDriver
                    {
                        TypeOfDriverID = c.ID,
                        TypeOfDriverName = c.ValueOfVar
                    }).ToList());
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMVehiclePlan FLMVehiclePlan_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var result = model.FLM_VehiclePlan.Where(c => c.ID == id).Select(c => new DTOFLMVehiclePlan
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            DriverID = c.DriverID,
                            TypeOfDriverID = c.TypeOfDriverID,
                            SortOrder = c.SortOrder,
                            DateFrom = c.DateFrom,
                            DateTo = c.DateTo
                        }).FirstOrDefault();
                        return result;
                    }
                    else
                    {
                        var result = new DTOFLMVehiclePlan();
                        result.ID = -1;
                        result.DriverID = -1;
                        result.VehicleID = -1;
                        result.TypeOfDriverID = -1;
                        var objVehicle = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && c.VehicleID > 2).FirstOrDefault();
                        if (objVehicle != null)
                            result.VehicleID = objVehicle.VehicleID.Value;
                        var objType = model.SYS_Var.FirstOrDefault(c => c.TypeOfVar == (int)SYSVarType.TypeOfDriver);
                        if (objType != null) result.TypeOfDriverID = objType.ID;
                        result.SortOrder = -1;
                        result.DateFrom = DateTime.Now;
                        result.DateTo = DateTime.Now.AddHours(2);
                        return result;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int FLMVehiclePlan_Save(DTOFLMVehiclePlan item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.DateTo < item.DateFrom)
                        throw FaultHelper.BusinessFault(null, null, "Thời gian không chính xác");
                    if (model.FLM_VehiclePlan.Count(c => c.SYSCustomerID == Account.SYSCustomerID && c.DriverID == item.DriverID && c.VehicleID == item.VehicleID
                        && !(item.DateTo <= c.DateFrom || item.DateFrom >= c.DateTo)) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Thiết lập bi trùng tài xế + xe+ thời gian");
                    var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID);
                    if (driver == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy tài xế");

                    var obj = model.FLM_VehiclePlan.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_VehiclePlan();
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.DriverID = item.DriverID;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.FLM_VehiclePlan.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.VehicleID = item.VehicleID;
                    obj.DateFrom = item.DateFrom;
                    obj.DateTo = item.DateTo;
                    obj.TypeOfDriverID = item.TypeOfDriverID;
                    obj.SortOrder = item.SortOrder;

                    //cap nhật sang OPS
                    if (obj.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain)
                    {
                        var listDI = model.OPS_DITOMaster.Where(c => (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) &&
                           c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterPlanning && c.StatusOfDITOMasterID < -(int)SYSVarType.StatusOfDITOMasterReceived && (!(item.DateTo <= c.ETD || item.DateFrom >= c.ETA)));
                        foreach (var master in listDI)
                        {
                            master.DriverID1 = item.DriverID;
                            master.DriverName1 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                            master.DriverTel1 = driver.CAT_Driver.Cellphone;
                            master.DriverCard1 = driver.CAT_Driver.CardNumber;
                            master.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                        }
                        var listCO = model.OPS_COTOMaster.Where(c => (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) &&
                            c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterPlanning && c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived && (!(item.DateTo <= c.ETD || item.DateFrom >= c.ETA)));
                        foreach (var master in listCO)
                        {
                            master.DriverID1 = item.DriverID;
                            master.DriverName1 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                            master.DriverTel1 = driver.CAT_Driver.Cellphone;
                            master.DriverCard1 = driver.CAT_Driver.CardNumber;
                            master.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                        }
                    }

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMVehiclePlan_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.FLM_VehiclePlan.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.FLM_VehiclePlan.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMVehiclePlan_VehicleList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0).Select(c => new DTOFLMVehicle
                        {
                            ID = c.VehicleID.Value,
                            RegNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                            TypeOfAssetID = c.TypeOfAssetID > 0 ? c.TypeOfAssetID : -1,
                            TypeOfAssetName = c.TypeOfAssetID > 0 ? c.SYS_Var.ValueOfVar : string.Empty
                        }).OrderBy(c => c.TypeOfAssetID).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMVehiclePlan_DriverList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        EmployeeCode = c.Code,
                        LastName = c.CAT_Driver.LastName,
                        FirstName = c.CAT_Driver.FirstName,
                        Cellphone = c.CAT_Driver.Cellphone,
                        BiddingID = c.BiddingID,
                        SYSCustomerID = c.SYSCustomerID,
                        CardNumber = c.CAT_Driver.CardNumber,
                        Birthday = c.CAT_Driver.Birthday,
                        Note = c.Note,
                        IsUse = c.IsUse,
                        ListDrivingLicence = c.CAT_Driver.ListDrivingLicence,
                        IsAssistant = c.IsAssistant,
                        DriverName = string.Empty,
                        FeeBase = c.FeeBase,
                        Image = c.Image
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region FLMTypeDriverCost (Loại phí tài xế)
        public DTOResult FLMTypeDriverCost_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_ScheduleFeeDefault.Where(c => c.IsAssistant != null).Select(c => new DTOFLMTypeDriverCost
                    {
                        ID = c.ID,
                        IsAssistant = c.IsAssistant.Value,
                        TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                        TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                        TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                        ExprInputDay = c.ExprInputDay,
                        ExprInputTOMaster = c.ExprInputTOMaster,
                        ExprPriceDay = c.ExprPriceDay,
                        ExprPriceTOMaster = c.ExprPriceTOMaster,
                        ExprPrice = c.ExprPrice
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMTypeDriverCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOFLMTypeDriverCost FLMTypeDriverCost_Get(int id)
        {
            try
            {
                DTOFLMTypeDriverCost result = new DTOFLMTypeDriverCost();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_ScheduleFeeDefault.Where(c => c.ID == id).Select(c => new DTOFLMTypeDriverCost
                        {
                            ID = c.ID,
                            IsAssistant = c.IsAssistant.Value,
                            ExprPrice = c.ExprPrice,
                            TypeOfScheduleFeeID = c.TypeOfScheduleFeeID,
                            TypeOfScheduleFeeCode = c.FLM_TypeOfScheduleFee.Code,
                            TypeOfScheduleFeeName = c.FLM_TypeOfScheduleFee.TypeName,
                            ExprInputDay = c.ExprInputDay,
                            ExprInputTOMaster = c.ExprInputTOMaster,
                            ExprPriceDay = c.ExprPriceDay,
                            ExprPriceTOMaster = c.ExprPriceTOMaster
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.TypeOfScheduleFeeID = -1;
                        var objType = model.FLM_TypeOfScheduleFee.FirstOrDefault();
                        if (objType != null) result.TypeOfScheduleFeeID = objType.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMTypeDriverCost_Save(DTOFLMTypeDriverCost item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.FLM_ScheduleFeeDefault.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_ScheduleFeeDefault();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.FLM_ScheduleFeeDefault.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.IsAssistant = item.IsAssistant;
                    obj.TypeOfScheduleFeeID = item.TypeOfScheduleFeeID;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprInputDay = item.ExprInputDay;
                    obj.ExprPriceDay = item.ExprPriceDay;
                    obj.ExprInputTOMaster = item.ExprInputTOMaster;
                    obj.ExprPriceTOMaster = item.ExprPriceTOMaster;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMTypeDriverCost_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_ScheduleFeeDefault.FirstOrDefault(c => c.ID == id);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chi tiết");
                    model.FLM_ScheduleFeeDefault.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Thiết lập PHT xe tải
        public DTOResult FLMPHTDIMaster_List(string request, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                DTOResult result = new DTOResult();
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.DateConfig >= dtfrom && c.DateConfig <= dtto && c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPHT).Select(c => new DTOFLMMasterPHT
                    {
                        ID = c.ID,
                        SortOrder = c.SortOrder,
                        MasterCode = c.Code,
                        SYSCustomerID = c.SYSCustomerID,
                        VehicleID = c.VehicleID,
                        VehicleCode = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : "",
                        DateConfig = c.DateConfig.Value,
                        StatusOfDITOMasterID = c.StatusOfDITOMasterID,
                        DriverID1 = c.DriverID1,
                        DriverID2 = c.DriverID2,
                        DriverID3 = c.DriverID3,
                        DriverID4 = c.DriverID4,
                        DriverID5 = c.DriverID5,
                        DriverName1 = c.DriverName1,
                        DriverName2 = c.DriverName2,
                        DriverName3 = c.DriverID3 > 0 ? c.FLM_Driver2.CAT_Driver.LastName + " " + c.FLM_Driver2.CAT_Driver.FirstName : "",
                        DriverName4 = c.DriverID4 > 0 ? c.FLM_Driver3.CAT_Driver.LastName + " " + c.FLM_Driver3.CAT_Driver.FirstName : "",
                        DriverName5 = c.DriverID5 > 0 ? c.FLM_Driver4.CAT_Driver.LastName + " " + c.FLM_Driver4.CAT_Driver.FirstName : "",
                        TypeOfDriverID1 = c.TypeOfDriverID1,
                        TypeOfDriverID2 = c.TypeOfDriverID2,
                        TypeOfDriverID3 = c.TypeOfDriverID3,
                        TypeOfDriverID4 = c.TypeOfDriverID4,
                        TypeOfDriverID5 = c.TypeOfDriverID5,
                        CustomerID = c.PHTCustomerID,
                        CustomerCode = "",
                        CustomerName = "",
                        TypeOfLocationID = c.PHTGroupOfLocationID,
                        TypeOfLocationName = "",
                        ExIsOverNight = c.ExIsOverNight,
                        ExIsOverWeight = c.ExIsOverWeight,
                        ExTotalDayOut = c.ExTotalDayOut,
                        ExTotalJoin = c.ExTotalJoin,
                        KMStart = c.KMStart,
                        KMEnd = c.KMEnd,
                        PHTLoading = c.PHTLoading,
                        PHTPackingID = -1,
                        PHTPackingCode = "",
                        ScheduleID = c.ScheduleID,
                        ETD = c.ETD,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMasterPHT>;

                    var lstData = result.Data.Cast<DTOFLMMasterPHT>().ToList();
                    var lstMasterID = lstData.Select(c => c.ID).Distinct().ToList();
                    var lstCustomerID = lstData.Where(c => c.CustomerID.HasValue).Select(c => c.CustomerID.Value).Distinct().ToList();
                    var lstGroupOfLocationID = lstData.Where(c => c.TypeOfLocationID.HasValue).Select(c => c.TypeOfLocationID.Value).Distinct().ToList();

                    var lstTrouble = model.CAT_Trouble.Where(c => c.DITOMasterID > 0 && lstMasterID.Contains(c.DITOMasterID.Value)).Select(c => new { DITOMasterID = c.DITOMasterID.Value, c.CostOfVendor }).ToList();
                    var lstStation = model.OPS_DITOStation.Where(c => lstMasterID.Contains(c.DITOMasterID)).Select(c => new { c.DITOMasterID, c.Price }).ToList();
                    var lstCustomer = model.CUS_Customer.Where(c => lstCustomerID.Contains(c.ID)).Select(c => new { c.ID, c.Code, c.CustomerName }).ToList();
                    var lstGroupOfLocation = model.CAT_GroupOfLocation.Where(c => lstGroupOfLocationID.Contains(c.ID)).Select(c => new { c.ID, c.Code, c.GroupName }).ToList();

                    foreach (DTOFLMMasterPHT item in result.Data)
                    {
                        var lstTroubleMaster = lstTrouble.Where(c => c.DITOMasterID == item.ID);
                        if (lstTroubleMaster.Count() > 0)
                            item.TroubleCost = lstTroubleMaster.Sum(c => c.CostOfVendor);

                        var lstStationMaster = lstStation.Where(c => c.DITOMasterID == item.ID);
                        if (lstStationMaster.Count() > 0)
                            item.StationCost = lstStationMaster.Sum(c => c.Price);

                        if (item.CustomerID > 0)
                        {
                            var customer = lstCustomer.FirstOrDefault(c => c.ID == item.CustomerID);
                            if (customer != null)
                            {
                                item.CustomerCode = customer.Code;
                                item.CustomerName = customer.CustomerName;
                            }
                        }

                        if (item.TypeOfLocationID > 0)
                        {
                            var groupLocation = lstGroupOfLocation.FirstOrDefault(c => c.ID == item.TypeOfLocationID);
                            if (groupLocation != null)
                                item.TypeOfLocationName = groupLocation.GroupName;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int FLMPHTDIMaster_Save(DTOFLMMasterPHT item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (item.CustomerID <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập khách hàng");

                    if (item.TypeOfLocationID <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập loại điểm giao");

                    if (item.SortOrder <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập số chuyến");

                    if (item.DriverID1 <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập tài xế");

                    if (item.VehicleID <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập xe");

                    item.DateConfig = item.DateConfig.Date;

                    if (model.OPS_DITOMaster.Count(c => c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPHT && c.SYSCustomerID == Account.SYSCustomerID && DbFunctions.TruncateTime(c.DateConfig) == item.DateConfig && c.VehicleID == item.VehicleID && c.SortOrder == item.SortOrder && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Ngày phát sinh, xe và số chuyến không được trùng");

                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new OPS_DITOMaster();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterPHT;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.VendorOfVehicleID = Account.SYSCustomerID;
                        obj.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                        model.OPS_DITOMaster.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.SortOrder = item.SortOrder;
                    obj.DateConfig = obj.ETA = obj.ATA = obj.ATD = item.DateConfig.Date;
                    obj.ETD = item.ETD;
                    obj.KMStart = item.KMStart;
                    obj.KMEnd = item.KMEnd;
                    if (obj.KMStart > 0 && obj.KMEnd > 0)
                        obj.KM = obj.KMEnd.Value - obj.KMStart.Value;
                    obj.Code = string.Empty;
                    obj.ExIsOverNight = item.ExIsOverNight;
                    obj.ExIsOverWeight = item.ExIsOverWeight;
                    obj.ExTotalDayOut = item.ExTotalDayOut;
                    obj.ExTotalJoin = item.ExTotalJoin;
                    obj.PHTLoading = item.PHTLoading;
                    obj.VehicleID = item.VehicleID;
                    obj.PHTCustomerID = item.CustomerID;
                    obj.PHTGroupOfLocationID = item.TypeOfLocationID;

                    #region Driver
                    obj.DriverID1 = item.DriverID1 > 0 ? item.DriverID1 : null;
                    obj.DriverID2 = item.DriverID2 > 0 ? item.DriverID2 : null;
                    obj.DriverID3 = item.DriverID3 > 0 ? item.DriverID3 : null;
                    obj.DriverID4 = item.DriverID4 > 0 ? item.DriverID4 : null;
                    obj.DriverID5 = item.DriverID5 > 0 ? item.DriverID5 : null;
                    obj.DriverName1 = string.Empty;
                    obj.DriverName2 = string.Empty;
                    obj.TypeOfDriverID1 = null;
                    obj.TypeOfDriverID2 = null;
                    obj.TypeOfDriverID3 = null;
                    obj.TypeOfDriverID4 = null;
                    obj.TypeOfDriverID5 = null;
                    if (obj.DriverID1 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID1);
                        if (driver != null)
                        {
                            obj.DriverName1 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                            obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 1 không tồn tại");
                    }
                    if (obj.DriverID2 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID2);
                        if (driver != null)
                        {
                            obj.DriverName2 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                            obj.TypeOfDriverID2 = -(int)SYSVarType.TypeOfDriverEx;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                    }
                    if (obj.DriverID3 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID3);
                        if (driver != null)
                        {
                            obj.TypeOfDriverID3 = -(int)SYSVarType.TypeOfDriverEx;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                    }
                    if (obj.DriverID4 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID4);
                        if (driver != null)
                        {
                            obj.TypeOfDriverID4 = -(int)SYSVarType.TypeOfDriverEx;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                    }
                    if (obj.DriverID5 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID5);
                        if (driver != null)
                        {
                            obj.TypeOfDriverID5 = -(int)SYSVarType.TypeOfDriverEx;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                    }
                    #endregion

                    model.SaveChanges();
                    obj.Code = PHTDICode + obj.ID.ToString(PHTCodeNum);
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTDIMaster_DeleteList(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lstid)
                    {
                        var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            foreach (var detail in model.OPS_DITOStation.Where(c => c.DITOMasterID == obj.ID))
                                model.OPS_DITOStation.Remove(detail);

                            foreach (var detail in model.CAT_Trouble.Where(c => c.DITOMasterID == obj.ID))
                                model.CAT_Trouble.Remove(detail);

                            model.OPS_DITOMaster.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOFLMMasterPHT_Trouble> FLMPHTDIMaster_TroubleList(int masterID)
        {
            try
            {
                List<DTOFLMMasterPHT_Trouble> result = new List<DTOFLMMasterPHT_Trouble>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Trouble.Where(c => c.DITOMasterID == masterID).Select(c => new DTOFLMMasterPHT_Trouble
                        {
                            ID = c.ID,
                            DITOMasterID = c.DITOMasterID,
                            COTOMasterID = c.COTOMasterID,
                            AttachmentFile = c.AttachmentFile,
                            Cost = c.Cost,
                            GroupOfTroubleID = c.GroupOfTroubleID,
                            GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                            TroubleCostStatusID = c.TroubleCostStatusID,
                            Description = c.Description,
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTDIMaster_TroubleSaveList(List<DTOFLMMasterPHT_Trouble> lst, int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lst)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            obj = new CAT_Trouble();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.DITOMasterID = masterID;
                            obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                            model.CAT_Trouble.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Description = item.Description;
                        obj.GroupOfTroubleID = item.GroupOfTroubleID;
                        obj.AttachmentFile = item.AttachmentFile;
                        obj.Cost = item.Cost;
                        obj.CostOfVendor = item.Cost;

                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTDIMaster_TroubleDeleteList(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lstid)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            model.CAT_Trouble.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOFLMMasterPHT_Station> FLMPHTDIMaster_StationList(int masterID)
        {
            try
            {
                List<DTOFLMMasterPHT_Station> result = new List<DTOFLMMasterPHT_Station>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOStation.Where(c => c.DITOMasterID == masterID).Select(c => new DTOFLMMasterPHT_Station
                    {
                        ID = c.ID,
                        DITOMasterID = c.DITOMasterID,
                        COTOMasterID = c.DITOMasterID,
                        KM = c.KM,
                        LocationID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAddress = c.CAT_Location.Address,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTDIMaster_StationSaveList(List<DTOFLMMasterPHT_Station> lst, int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lst)
                    {
                        var obj = model.OPS_DITOStation.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            obj = new OPS_DITOStation();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.DITOMasterID = masterID;
                            model.OPS_DITOStation.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = item.Price;
                        obj.LocationID = item.LocationID;
                        obj.KM = item.KM;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMPHTDIMaster_StationNotInList(string request, int masterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOFLMMasterPHT_Station
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAddress = c.CAT_Location.Address,
                        LocationProvince = c.CAT_Location.CAT_Province.ProvinceName,
                        LocationDistrict = c.CAT_Location.CAT_District.DistrictName,
                        KM = 0,
                        Price = 0,
                        DITOMasterID = masterID,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMasterPHT_Station>;
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTDIMaster_StationDeleteList(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lstid)
                    {
                        var obj = model.OPS_DITOStation.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            model.OPS_DITOStation.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOFLMMasterPHT_Import_Data FLMPHTDIMaster_Import_Data()
        {
            try
            {
                DTOFLMMasterPHT_Import_Data result = new DTOFLMMasterPHT_Import_Data();
                using (var model = new DataEntities())
                {
                    result.lstContainer = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstCustomer = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstGroupOfLocation = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstTypeOfDriver = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstTypeOfDriverFee = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstDriver = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstVehicle = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstGroupOfTrouble = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstStation = new List<DTOFLMMasterPHT_Import_Common>();

                    #region Lấy thiết lập trouble
                    var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                    var orginal = model.CAT_GroupOfTrouble.Where(c => c.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleDI).Select(c => new DTOCATSYSCustomerTrouble
                    {
                        TroubleID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        CostValue = 0,
                        IsUse = false,
                    }).ToList();
                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var objSetting = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objSetting != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(objSetting.Setting);
                    foreach (var item in orginal)
                    {
                        var check = lst.FirstOrDefault(c => c.TroubleID == item.TroubleID);
                        if (check != null)
                        {
                            item.IsUse = true;
                            item.CostValue = check.CostValue;
                        }
                    }

                    result.lstGroupOfTrouble = orginal.Where(c => c.IsUse).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.TroubleID,
                        Code = c.Code,
                        Name = c.Name,
                    }).ToList();
                    #endregion

                    result.lstContainer = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.PackingName,
                    }).ToList();

                    result.lstCustomer = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.CustomerName
                    }).ToList();

                    result.lstGroupOfLocation = model.CAT_GroupOfLocation.Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.GroupName,
                    }).ToList();

                    result.lstTypeOfDriver = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfDriver).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.ValueOfVar,
                    }).ToList();

                    result.lstTypeOfDriverFee = model.CAT_TypeOfDriverFee.Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.TypeName
                    }).ToList();

                    result.lstDriver = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                    }).ToList();

                    result.lstVehicle = model.CUS_Vehicle.Where(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID > 2 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.VehicleID,
                        Code = c.CAT_Vehicle.RegNo,
                        Name = c.CAT_Vehicle.RegNo,
                    }).ToList();

                    result.lstStation = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.LocationID,
                        Code = c.CAT_Location.Code,
                        Name = c.CAT_Location.Location
                    }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMMasterPHT_Export FLMPHTDIMaster_Export(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                DTOFLMMasterPHT_Export result = new DTOFLMMasterPHT_Export();
                result.ListMaster = new List<DTOFLMMasterPHT_Export_Data>();
                result.ListTrouble = new List<DTOFLMMasterPHT_Export_Trouble>();
                using (var model = new DataEntities())
                {
                    #region Lấy thiết lập trouble
                    var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                    var orginal = model.CAT_GroupOfTrouble.Where(c => c.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleDI).Select(c => new DTOCATSYSCustomerTrouble
                    {
                        TroubleID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        CostValue = 0,
                        IsUse = false,
                    }).ToList();
                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var objSetting = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objSetting != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(objSetting.Setting);
                    foreach (var item in orginal)
                    {
                        var check = lst.FirstOrDefault(c => c.TroubleID == item.TroubleID);
                        if (check != null)
                        {
                            item.IsUse = true;
                            item.CostValue = check.CostValue;
                        }
                    }

                    result.ListTrouble = orginal.Where(c => c.IsUse).Select(c => new DTOFLMMasterPHT_Export_Trouble
                    {
                        GroupOfTrobleID = c.TroubleID,
                        GroupOfTroubleCode = c.Code,
                        GroupOfTroubleName = c.Name,
                    }).ToList();
                    #endregion

                    result.ListMaster = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPHT && c.DateConfig >= dtfrom && c.DateConfig <= dtto).Select(c => new DTOFLMMasterPHT_Export_Data
                    {
                        ID = c.ID,
                        SortOrder = c.SortOrder,
                        MasterCode = c.Code,
                        SYSCustomerID = c.SYSCustomerID,
                        VehicleID = c.VehicleID,
                        VehicleCode = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : "",
                        DateConfig = c.DateConfig.Value,
                        StatusOfDITOMasterID = c.StatusOfDITOMasterID,
                        DriverID1 = c.DriverID1,
                        DriverID2 = c.DriverID2,
                        DriverID3 = c.DriverID3,
                        DriverID4 = c.DriverID4,
                        DriverID5 = c.DriverID5,
                        DriverCode1 = c.DriverID1 > 0 ? c.FLM_Driver.Code : "",
                        DriverCode2 = c.DriverID2 > 0 ? c.FLM_Driver1.Code : "",
                        DriverCode3 = c.DriverID3 > 0 ? c.FLM_Driver2.Code : "",
                        DriverCode4 = c.DriverID4 > 0 ? c.FLM_Driver3.Code : "",
                        DriverCode5 = c.DriverID5 > 0 ? c.FLM_Driver4.Code : "",
                        DriverName1 = c.DriverName1,
                        DriverName2 = c.DriverName2,
                        DriverName3 = c.DriverID3 > 0 ? c.FLM_Driver2.CAT_Driver.LastName + " " + c.FLM_Driver2.CAT_Driver.FirstName : "",
                        DriverName4 = c.DriverID4 > 0 ? c.FLM_Driver3.CAT_Driver.LastName + " " + c.FLM_Driver3.CAT_Driver.FirstName : "",
                        DriverName5 = c.DriverID5 > 0 ? c.FLM_Driver4.CAT_Driver.LastName + " " + c.FLM_Driver4.CAT_Driver.FirstName : "",
                        TypeOfDriverID1 = c.TypeOfDriverID1,
                        TypeOfDriverID2 = c.TypeOfDriverID2,
                        TypeOfDriverID3 = c.TypeOfDriverID3,
                        TypeOfDriverID4 = c.TypeOfDriverID4,
                        TypeOfDriverID5 = c.TypeOfDriverID5,
                        CustomerID = c.PHTCustomerID,
                        CustomerCode = "",
                        CustomerName = "",
                        TypeOfLocationID = c.PHTGroupOfLocationID,
                        TypeOfLocationName = "",
                        TypeOfLocationCode = "",
                        ExIsOverNight = c.ExIsOverNight,
                        ExIsOverWeight = c.ExIsOverWeight,
                        ExTotalDayOut = c.ExTotalDayOut,
                        ExTotalJoin = c.ExTotalJoin,
                        KMStart = c.KMStart,
                        KMEnd = c.KMEnd,
                        PHTLoading = c.PHTLoading,
                        PHTPackingID = -1,
                        PHTPackingCode = "",
                        ScheduleID = c.ScheduleID,
                        Note = c.Note,
                        ETD = c.ETD
                    }).ToList();

                    var lstMasterID = result.ListMaster.Select(c => c.ID).Distinct().ToList();
                    var lstCustomerID = result.ListMaster.Where(c => c.CustomerID.HasValue).Select(c => c.CustomerID.Value).Distinct().ToList();
                    var lstGroupOfLocationID = result.ListMaster.Where(c => c.TypeOfLocationID.HasValue).Select(c => c.TypeOfLocationID.Value).Distinct().ToList();

                    var lstTrouble = model.CAT_Trouble.Where(c => c.DITOMasterID > 0 && lstMasterID.Contains(c.DITOMasterID.Value)).Select(c => new { DITOMasterID = c.DITOMasterID.Value, c.CostOfVendor, c.GroupOfTroubleID, GroupOfTroubleCode = c.CAT_GroupOfTrouble.Code, c.Description }).ToList();
                    var lstStation = model.OPS_DITOStation.Where(c => lstMasterID.Contains(c.DITOMasterID)).Select(c => new { c.DITOMasterID, c.LocationID, LocationCode = c.CAT_Location.Code, c.Price }).ToList();
                    var lstCustomer = model.CUS_Customer.Where(c => lstCustomerID.Contains(c.ID)).Select(c => new { c.ID, c.Code, c.CustomerName }).ToList();
                    var lstGroupOfLocation = model.CAT_GroupOfLocation.Where(c => lstGroupOfLocationID.Contains(c.ID)).Select(c => new { c.ID, c.Code, c.GroupName }).ToList();
                    foreach (var item in result.ListMaster)
                    {
                        item.ListStation = new List<DTOFLMMasterPHT_Export_Station>();
                        item.ListTrouble = new List<DTOFLMMasterPHT_Export_Trouble>();
                        if (item.CustomerID > 0)
                        {
                            var customer = lstCustomer.FirstOrDefault(c => c.ID == item.CustomerID);
                            if (customer != null)
                            {
                                item.CustomerCode = customer.Code;
                                item.CustomerName = customer.CustomerName;
                            }
                        }

                        if (item.TypeOfLocationID > 0)
                        {
                            var groupLocation = lstGroupOfLocation.FirstOrDefault(c => c.ID == item.TypeOfLocationID);
                            if (groupLocation != null)
                            {
                                item.TypeOfLocationCode = groupLocation.Code;
                                item.TypeOfLocationName = groupLocation.GroupName;
                            }

                        }

                        item.ListStation = lstStation.Where(c => c.DITOMasterID == item.ID).Select(c => new DTOFLMMasterPHT_Export_Station
                            {
                                LocationID = c.LocationID,
                                LocationCode = c.LocationCode,
                                Price = c.Price,
                            }).ToList();

                        item.ListTrouble = lstTrouble.Where(c => c.DITOMasterID == item.ID).Select(c => new DTOFLMMasterPHT_Export_Trouble
                            {
                                GroupOfTrobleID = c.GroupOfTroubleID,
                                GroupOfTroubleCode = c.GroupOfTroubleCode,
                                Price = c.CostOfVendor,
                                Note = c.Description
                            }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTDIMaster_Import(List<DTOFLMMasterPHT_Import> lstData)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (lstData != null && lstData.Count > 0 && lstData.Count(c => !c.ExcelSuccess) == 0)
                    {
                        List<OPS_DITOMaster> lstMaster = new List<OPS_DITOMaster>();

                        foreach (var item in lstData)
                        {
                            var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == item.VehicleID && c.DateConfig == item.DateConfig && c.SortOrder == item.SortOrder);
                            if (obj == null)
                            {
                                obj = new OPS_DITOMaster();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterPHT;
                                obj.SYSCustomerID = Account.SYSCustomerID;
                                obj.VendorOfVehicleID = Account.SYSCustomerID;
                                obj.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                                model.OPS_DITOMaster.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;

                                // Xóa hết trouble + station cũ
                                foreach (var detail in model.OPS_DITOStation.Where(c => c.DITOMasterID == obj.ID))
                                    model.OPS_DITOStation.Remove(detail);
                                foreach (var detail in model.CAT_Trouble.Where(c => c.DITOMasterID == obj.ID))
                                    model.CAT_Trouble.Remove(detail);
                            }
                            obj.Note = item.Note;
                            obj.Code = string.Empty;
                            obj.DateConfig = obj.ETA = obj.ATA = obj.ATD = item.DateConfig.Date;
                            obj.ETD = item.ETD;
                            obj.KMStart = item.KMStart;
                            obj.KMEnd = item.KMEnd;
                            if (obj.KMStart > 0 && obj.KMEnd > 0)
                                obj.KM = obj.KMEnd.Value - obj.KMStart.Value;
                            obj.ExIsOverNight = item.ExIsOverNight;
                            obj.ExIsOverWeight = item.ExIsOverWeight;
                            obj.ExTotalDayOut = item.ExTotalDayOut;
                            obj.ExTotalJoin = item.ExTotalJoin;
                            obj.PHTLoading = item.PHTLoading;
                            obj.VehicleID = item.VehicleID;
                            obj.PHTCustomerID = item.CustomerID;
                            obj.PHTGroupOfLocationID = item.TypeOfLocationID;
                            obj.SortOrder = item.SortOrder;

                            #region Driver
                            obj.DriverID1 = item.DriverID1 > 0 ? item.DriverID1 : null;
                            obj.DriverID2 = item.DriverID2 > 0 ? item.DriverID2 : null;
                            obj.DriverID3 = item.DriverID3 > 0 ? item.DriverID3 : null;
                            obj.DriverID4 = item.DriverID4 > 0 ? item.DriverID4 : null;
                            obj.DriverID5 = item.DriverID5 > 0 ? item.DriverID5 : null;
                            obj.DriverName1 = string.Empty;
                            obj.DriverName2 = string.Empty;
                            obj.TypeOfDriverID1 = null;
                            obj.TypeOfDriverID2 = null;
                            obj.TypeOfDriverID3 = null;
                            obj.TypeOfDriverID4 = null;
                            obj.TypeOfDriverID5 = null;
                            if (obj.DriverID1 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID1);
                                if (driver != null)
                                {
                                    obj.DriverName1 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                                    obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 1 không tồn tại");
                            }
                            if (obj.DriverID2 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID2);
                                if (driver != null)
                                {
                                    obj.DriverName2 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                                    obj.TypeOfDriverID2 = -(int)SYSVarType.TypeOfDriverEx;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                            }
                            if (obj.DriverID3 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID3);
                                if (driver != null)
                                {
                                    obj.TypeOfDriverID3 = -(int)SYSVarType.TypeOfDriverEx;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                            }
                            if (obj.DriverID4 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID4);
                                if (driver != null)
                                {
                                    obj.TypeOfDriverID4 = -(int)SYSVarType.TypeOfDriverEx;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                            }
                            if (obj.DriverID5 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID5);
                                if (driver != null)
                                {
                                    obj.TypeOfDriverID5 = -(int)SYSVarType.TypeOfDriverEx;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                            }
                            #endregion

                            if (!string.IsNullOrEmpty(item.MasterCode))
                                obj.Code = item.MasterCode;

                            lstMaster.Add(obj);

                            foreach (var station in item.ListStation)
                            {
                                OPS_DITOStation objStation = new OPS_DITOStation();
                                objStation.CreatedBy = Account.UserName;
                                objStation.CreatedDate = DateTime.Now;
                                objStation.OPS_DITOMaster = obj;
                                objStation.Price = station.Price;
                                objStation.LocationID = station.LocationID;
                                model.OPS_DITOStation.Add(objStation);
                            }

                            foreach (var trouble in item.ListTrouble)
                            {
                                CAT_Trouble objTrouble = new CAT_Trouble();
                                objTrouble.CreatedBy = Account.UserName;
                                objTrouble.CreatedDate = DateTime.Now;
                                objTrouble.OPS_DITOMaster = obj;
                                objTrouble.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                                objTrouble.GroupOfTroubleID = trouble.GroupOfTrobleID;
                                objTrouble.Cost = trouble.Price;
                                objTrouble.CostOfVendor = trouble.Price;
                                objTrouble.Description = trouble.Note;
                                model.CAT_Trouble.Add(objTrouble);
                            }
                        }

                        model.SaveChanges();
                        if (lstMaster.Count > 0)
                        {
                            foreach (var item in lstMaster)
                            {
                                if (string.IsNullOrEmpty(item.Code))
                                    item.Code = PHTDICode + item.ID.ToString(PHTCodeNum);
                            }
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOResult FLMPHTCOMaster_List(string request, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.DateConfig >= dtfrom && c.DateConfig <= dtto && c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPHT).Select(c => new DTOFLMMasterPHT
                    {
                        ID = c.ID,
                        SortOrder = c.SortOrder,
                        MasterCode = c.Code,
                        SYSCustomerID = c.SYSCustomerID,
                        VehicleID = c.VehicleID,
                        VehicleCode = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : "",
                        DateConfig = c.DateConfig.Value,
                        DriverID1 = c.DriverID1,
                        DriverID2 = c.DriverID2,
                        DriverID3 = c.DriverID3,
                        DriverID4 = c.DriverID4,
                        DriverID5 = c.DriverID5,
                        DriverName1 = c.DriverName1,
                        DriverName2 = c.DriverName2,
                        DriverName3 = c.DriverID3 > 0 ? c.FLM_Driver2.CAT_Driver.LastName + " " + c.FLM_Driver2.CAT_Driver.FirstName : "",
                        DriverName4 = c.DriverID4 > 0 ? c.FLM_Driver3.CAT_Driver.LastName + " " + c.FLM_Driver3.CAT_Driver.FirstName : "",
                        DriverName5 = c.DriverID5 > 0 ? c.FLM_Driver4.CAT_Driver.LastName + " " + c.FLM_Driver4.CAT_Driver.FirstName : "",
                        TypeOfDriverID1 = c.TypeOfDriverID1,
                        TypeOfDriverID2 = c.TypeOfDriverID2,
                        TypeOfDriverID3 = c.TypeOfDriverID3,
                        TypeOfDriverID4 = c.TypeOfDriverID4,
                        TypeOfDriverID5 = c.TypeOfDriverID5,
                        CustomerID = c.PHTCustomerID,
                        CustomerCode = "",
                        CustomerName = "",
                        TypeOfLocationID = c.PHTGroupOfLocationID,
                        TypeOfLocationName = "",
                        ExIsOverNight = c.ExIsOverNight,
                        ExIsOverWeight = c.ExIsOverWeight,
                        ExTotalDayOut = c.ExTotalDayOut,
                        ExTotalJoin = c.ExTotalJoin,
                        KMStart = c.KMStart,
                        KMEnd = c.KMEnd,
                        PHTLoading = c.PHTLoading,
                        PHTPackingID = c.PHTPackingID,
                        PHTPackingCode = c.PHTPackingID > 0 && model.CAT_Packing.Count(d => d.ID == c.PHTPackingID) > 0 ? model.CAT_Packing.FirstOrDefault(d => d.ID == c.PHTPackingID).Code : "",
                        ScheduleID = c.ScheduleID,
                        ETD = c.ETD,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMasterPHT>;

                    var lstData = result.Data.Cast<DTOFLMMasterPHT>().ToList();
                    var lstMasterID = lstData.Select(c => c.ID).Distinct().ToList();
                    var lstCustomerID = lstData.Where(c => c.CustomerID.HasValue).Select(c => c.CustomerID.Value).Distinct().ToList();
                    var lstGroupOfLocationID = lstData.Where(c => c.TypeOfLocationID.HasValue).Select(c => c.TypeOfLocationID.Value).Distinct().ToList();

                    var lstTrouble = model.CAT_Trouble.Where(c => c.DITOMasterID > 0 && lstMasterID.Contains(c.COTOMasterID.Value)).Select(c => new { COTOMasterID = c.DITOMasterID.Value, c.CostOfVendor }).ToList();
                    var lstStation = model.OPS_COTOStation.Where(c => lstMasterID.Contains(c.COTOMasterID)).Select(c => new { c.COTOMasterID, c.Price }).ToList();
                    var lstCustomer = model.CUS_Customer.Where(c => lstCustomerID.Contains(c.ID)).Select(c => new { c.ID, c.Code, c.CustomerName }).ToList();
                    var lstGroupOfLocation = model.CAT_GroupOfLocation.Where(c => lstGroupOfLocationID.Contains(c.ID)).Select(c => new { c.ID, c.Code, c.GroupName }).ToList();

                    foreach (DTOFLMMasterPHT item in result.Data)
                    {
                        var lstTroubleMaster = lstTrouble.Where(c => c.COTOMasterID == item.ID);
                        if (lstTroubleMaster.Count() > 0)
                            item.TroubleCost = lstTroubleMaster.Sum(c => c.CostOfVendor);

                        var lstStationMaster = lstStation.Where(c => c.COTOMasterID == item.ID);
                        if (lstStationMaster.Count() > 0)
                            item.StationCost = lstStationMaster.Sum(c => c.Price);

                        if (item.CustomerID > 0)
                        {
                            var customer = lstCustomer.FirstOrDefault(c => c.ID == item.CustomerID);
                            if (customer != null)
                            {
                                item.CustomerCode = customer.Code;
                                item.CustomerName = customer.CustomerName;
                            }
                        }

                        if (item.TypeOfLocationID > 0)
                        {
                            var groupLocation = lstGroupOfLocation.FirstOrDefault(c => c.ID == item.TypeOfLocationID);
                            if (groupLocation != null)
                                item.TypeOfLocationName = groupLocation.GroupName;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int FLMPHTCOMaster_Save(DTOFLMMasterPHT item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item.CustomerID <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập khách hàng");

                    if (item.TypeOfLocationID <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập loại điểm giao");

                    if (item.SortOrder <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập số chuyến");

                    if (item.DriverID1 <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập tài xế");

                    if (item.VehicleID <= 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập xe");

                    item.DateConfig = item.DateConfig.Date;

                    if (model.OPS_COTOMaster.Count(c => c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPHT && c.SYSCustomerID == Account.SYSCustomerID && DbFunctions.TruncateTime(c.DateConfig) == item.DateConfig && c.VehicleID == item.VehicleID && c.SortOrder == item.SortOrder && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Ngày phát sinh, xe và số chuyến không được trùng");

                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new OPS_COTOMaster();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterPHT;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.VendorOfVehicleID = Account.SYSCustomerID;
                        model.OPS_COTOMaster.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                    }
                    obj.SortOrder = item.SortOrder;
                    obj.DateConfig = obj.ETA = item.DateConfig.Date;
                    obj.ATD = obj.ATA = item.DateConfig.Date;
                    obj.ETD = item.ETD.HasValue ? item.ETD.Value.Date : obj.ETA;
                    obj.KMStart = item.KMStart;
                    obj.KMEnd = item.KMEnd;
                    if (obj.KMStart > 0 && obj.KMEnd > 0)
                        obj.KM = obj.KMEnd.Value - obj.KMStart.Value;
                    obj.Code = string.Empty;
                    obj.ExIsOverNight = item.ExIsOverNight;
                    obj.ExIsOverWeight = item.ExIsOverWeight;
                    obj.ExTotalDayOut = item.ExTotalDayOut;
                    obj.ExTotalJoin = item.ExTotalJoin;
                    obj.PHTLoading = item.PHTLoading;
                    obj.VehicleID = item.VehicleID;
                    obj.PHTPackingID = item.PHTPackingID > 0 ? item.PHTPackingID : null;
                    obj.PHTCustomerID = item.CustomerID;
                    obj.PHTGroupOfLocationID = item.TypeOfLocationID;

                    #region Driver
                    obj.DriverID1 = item.DriverID1 > 0 ? item.DriverID1 : null;
                    obj.DriverID2 = item.DriverID2 > 0 ? item.DriverID2 : null;
                    obj.DriverID3 = item.DriverID3 > 0 ? item.DriverID3 : null;
                    obj.DriverID4 = item.DriverID4 > 0 ? item.DriverID4 : null;
                    obj.DriverID5 = item.DriverID5 > 0 ? item.DriverID5 : null;
                    obj.DriverName1 = string.Empty;
                    obj.DriverName2 = string.Empty;
                    obj.TypeOfDriverID1 = null;
                    obj.TypeOfDriverID2 = null;
                    obj.TypeOfDriverID3 = null;
                    obj.TypeOfDriverID4 = null;
                    obj.TypeOfDriverID5 = null;
                    if (obj.DriverID1 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID1);
                        if (driver != null)
                        {
                            obj.DriverName1 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                            obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 1 không tồn tại");
                    }
                    if (obj.DriverID2 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID2);
                        if (driver != null)
                        {
                            obj.DriverName2 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                            obj.TypeOfDriverID2 = -(int)SYSVarType.TypeOfDriverEx;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                    }
                    if (obj.DriverID3 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID3);
                        if (driver != null)
                        {
                            obj.TypeOfDriverID3 = -(int)SYSVarType.TypeOfDriverEx;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                    }
                    if (obj.DriverID4 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID4);
                        if (driver != null)
                        {
                            obj.TypeOfDriverID4 = -(int)SYSVarType.TypeOfDriverEx;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                    }
                    if (obj.DriverID5 > 0)
                    {
                        var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID5);
                        if (driver != null)
                        {
                            obj.TypeOfDriverID5 = -(int)SYSVarType.TypeOfDriverEx;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                    }
                    #endregion

                    model.SaveChanges();
                    obj.Code = PHTCOCode + obj.ID.ToString(PHTCodeNum);
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTCOMaster_DeleteList(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lstid)
                    {
                        var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            foreach (var detail in model.OPS_COTOStation.Where(c => c.COTOMasterID == obj.ID))
                                model.OPS_COTOStation.Remove(detail);

                            foreach (var detail in model.CAT_Trouble.Where(c => c.COTOMasterID == obj.ID))
                                model.CAT_Trouble.Remove(detail);

                            model.OPS_COTOMaster.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }



        public List<DTOFLMMasterPHT_Trouble> FLMPHTCOMaster_TroubleList(int masterID)
        {
            try
            {
                List<DTOFLMMasterPHT_Trouble> result = new List<DTOFLMMasterPHT_Trouble>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Trouble.Where(c => c.COTOMasterID == masterID).Select(c => new DTOFLMMasterPHT_Trouble
                    {
                        ID = c.ID,
                        DITOMasterID = c.DITOMasterID,
                        COTOMasterID = c.COTOMasterID,
                        AttachmentFile = c.AttachmentFile,
                        Cost = c.Cost,
                        GroupOfTroubleID = c.GroupOfTroubleID,
                        GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                        TroubleCostStatusID = c.TroubleCostStatusID,
                        Description = c.Description,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTCOMaster_TroubleSaveList(List<DTOFLMMasterPHT_Trouble> lst, int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lst)
                    {

                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            obj = new CAT_Trouble();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.COTOMasterID = masterID;
                            obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                            model.CAT_Trouble.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Description = item.Description;
                        obj.GroupOfTroubleID = item.GroupOfTroubleID;
                        obj.AttachmentFile = item.AttachmentFile;
                        obj.Cost = item.Cost;
                        obj.CostOfVendor = item.Cost;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTCOMaster_TroubleDeleteList(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lstid)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            model.CAT_Trouble.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }



        public List<DTOFLMMasterPHT_Station> FLMPHTCOMaster_StationList(int masterID)
        {
            try
            {
                List<DTOFLMMasterPHT_Station> result = new List<DTOFLMMasterPHT_Station>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_COTOStation.Where(c => c.COTOMasterID == masterID).Select(c => new DTOFLMMasterPHT_Station
                    {
                        ID = c.ID,
                        COTOMasterID = c.COTOMasterID,
                        KM = c.KM,
                        LocationID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAddress = c.CAT_Location.Address,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTCOMaster_StationSaveList(List<DTOFLMMasterPHT_Station> lst, int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.OPS_COTOStation.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            obj = new OPS_COTOStation();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.COTOMasterID = masterID;
                            model.OPS_COTOStation.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = item.Price;
                        obj.LocationID = item.LocationID;
                        obj.KM = item.KM;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMPHTCOMaster_StationNotInList(string request, int masterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOFLMMasterPHT_Station
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAddress = c.CAT_Location.Address,
                        LocationProvince = c.CAT_Location.CAT_Province.ProvinceName,
                        LocationDistrict = c.CAT_Location.CAT_District.DistrictName,
                        KM = 0,
                        Price = 0,
                        COTOMasterID = masterID,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMasterPHT_Station>;
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTCOMaster_StationDeleteList(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lstid)
                    {
                        var obj = model.OPS_COTOStation.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            model.OPS_COTOStation.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMMasterPHT_Import_Data FLMPHTCOMaster_Import_Data()
        {
            try
            {
                DTOFLMMasterPHT_Import_Data result = new DTOFLMMasterPHT_Import_Data();
                using (var model = new DataEntities())
                {
                    result.lstContainer = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstCustomer = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstGroupOfLocation = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstTypeOfDriver = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstTypeOfDriverFee = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstDriver = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstVehicle = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstGroupOfTrouble = new List<DTOFLMMasterPHT_Import_Common>();
                    result.lstStation = new List<DTOFLMMasterPHT_Import_Common>();

                    #region Lấy thiết lập trouble
                    var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                    var orginal = model.CAT_GroupOfTrouble.Where(c => c.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleCO).Select(c => new DTOCATSYSCustomerTrouble
                    {
                        TroubleID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        CostValue = 0,
                        IsUse = false,
                    }).ToList();
                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var objSetting = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objSetting != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(objSetting.Setting);
                    foreach (var item in orginal)
                    {
                        var check = lst.FirstOrDefault(c => c.TroubleID == item.TroubleID);
                        if (check != null)
                        {
                            item.IsUse = true;
                            item.CostValue = check.CostValue;
                        }
                    }

                    result.lstGroupOfTrouble = orginal.Where(c => c.IsUse).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.TroubleID,
                        Code = c.Code,
                        Name = c.Name,
                    }).ToList();
                    #endregion

                    result.lstContainer = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.PackingName,
                    }).ToList();

                    result.lstCustomer = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.CustomerName
                    }).ToList();

                    result.lstGroupOfLocation = model.CAT_GroupOfLocation.Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.GroupName,
                    }).ToList();

                    result.lstTypeOfDriver = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfDriver).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.ValueOfVar,
                    }).ToList();

                    result.lstTypeOfDriverFee = model.CAT_TypeOfDriverFee.Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.TypeName
                    }).ToList();

                    result.lstDriver = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                    }).ToList();

                    result.lstVehicle = model.CUS_Vehicle.Where(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID > 2 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.VehicleID,
                        Code = c.CAT_Vehicle.RegNo,
                        Name = c.CAT_Vehicle.RegNo,
                    }).ToList();

                    result.lstStation = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOFLMMasterPHT_Import_Common
                    {
                        ID = c.LocationID,
                        Code = c.CAT_Location.Code,
                        Name = c.CAT_Location.Location
                    }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMMasterPHT_Export FLMPHTCOMaster_Export(DateTime dtfrom, DateTime dtto)
        {
            try
            {
                DTOFLMMasterPHT_Export result = new DTOFLMMasterPHT_Export();
                result.ListMaster = new List<DTOFLMMasterPHT_Export_Data>();
                result.ListTrouble = new List<DTOFLMMasterPHT_Export_Trouble>();
                using (var model = new DataEntities())
                {
                    #region Lấy thiết lập trouble
                    var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                    var orginal = model.CAT_GroupOfTrouble.Where(c => c.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleCO).Select(c => new DTOCATSYSCustomerTrouble
                    {
                        TroubleID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        CostValue = 0,
                        IsUse = false,
                    }).ToList();
                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var objSetting = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objSetting != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(objSetting.Setting);
                    foreach (var item in orginal)
                    {
                        var check = lst.FirstOrDefault(c => c.TroubleID == item.TroubleID);
                        if (check != null)
                        {
                            item.IsUse = true;
                            item.CostValue = check.CostValue;
                        }
                    }

                    result.ListTrouble = orginal.Where(c => c.IsUse).Select(c => new DTOFLMMasterPHT_Export_Trouble
                    {
                        GroupOfTrobleID = c.TroubleID,
                        GroupOfTroubleCode = c.Code,
                        GroupOfTroubleName = c.Name,
                    }).ToList();
                    #endregion

                    result.ListMaster = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPHT && c.DateConfig >= dtfrom && c.DateConfig <= dtto).Select(c => new DTOFLMMasterPHT_Export_Data
                    {
                        ID = c.ID,
                        SortOrder = c.SortOrder,
                        MasterCode = c.Code,
                        SYSCustomerID = c.SYSCustomerID,
                        VehicleID = c.VehicleID,
                        VehicleCode = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : "",
                        DateConfig = c.DateConfig.Value,
                        StatusOfDITOMasterID = c.StatusOfCOTOMasterID,
                        DriverID1 = c.DriverID1,
                        DriverID2 = c.DriverID2,
                        DriverID3 = c.DriverID3,
                        DriverID4 = c.DriverID4,
                        DriverID5 = c.DriverID5,
                        DriverCode1 = c.DriverID1 > 0 ? c.FLM_Driver.Code : "",
                        DriverCode2 = c.DriverID2 > 0 ? c.FLM_Driver1.Code : "",
                        DriverCode3 = c.DriverID3 > 0 ? c.FLM_Driver2.Code : "",
                        DriverCode4 = c.DriverID4 > 0 ? c.FLM_Driver3.Code : "",
                        DriverCode5 = c.DriverID5 > 0 ? c.FLM_Driver4.Code : "",
                        DriverName1 = c.DriverName1,
                        DriverName2 = c.DriverName2,
                        DriverName3 = c.DriverID3 > 0 ? c.FLM_Driver2.CAT_Driver.LastName + " " + c.FLM_Driver2.CAT_Driver.FirstName : "",
                        DriverName4 = c.DriverID4 > 0 ? c.FLM_Driver3.CAT_Driver.LastName + " " + c.FLM_Driver3.CAT_Driver.FirstName : "",
                        DriverName5 = c.DriverID5 > 0 ? c.FLM_Driver4.CAT_Driver.LastName + " " + c.FLM_Driver4.CAT_Driver.FirstName : "",
                        TypeOfDriverID1 = c.TypeOfDriverID1,
                        TypeOfDriverID2 = c.TypeOfDriverID2,
                        TypeOfDriverID3 = c.TypeOfDriverID3,
                        TypeOfDriverID4 = c.TypeOfDriverID4,
                        TypeOfDriverID5 = c.TypeOfDriverID5,
                        CustomerID = c.PHTCustomerID,
                        CustomerCode = "",
                        CustomerName = "",
                        TypeOfLocationID = c.PHTGroupOfLocationID,
                        TypeOfLocationCode = "",
                        TypeOfLocationName = "",
                        ExIsOverNight = c.ExIsOverNight,
                        ExIsOverWeight = c.ExIsOverWeight,
                        ExTotalDayOut = c.ExTotalDayOut,
                        ExTotalJoin = c.ExTotalJoin,
                        KMStart = c.KMStart,
                        KMEnd = c.KMEnd,
                        PHTLoading = c.PHTLoading,
                        PHTPackingID = c.PHTPackingID,
                        PHTPackingCode = c.PHTPackingID > 0 && model.CAT_Packing.Count(d => d.ID == c.PHTPackingID) > 0 ? model.CAT_Packing.FirstOrDefault(d => d.ID == c.PHTPackingID).Code : "",
                        ScheduleID = c.ScheduleID,
                        Note = c.Note,
                        ETD = c.ETD
                    }).ToList();

                    var lstMasterID = result.ListMaster.Select(c => c.ID).Distinct().ToList();
                    var lstCustomerID = result.ListMaster.Where(c => c.CustomerID.HasValue).Select(c => c.CustomerID.Value).Distinct().ToList();
                    var lstGroupOfLocationID = result.ListMaster.Where(c => c.TypeOfLocationID.HasValue).Select(c => c.TypeOfLocationID.Value).Distinct().ToList();

                    var lstTrouble = model.CAT_Trouble.Where(c => c.COTOMasterID > 0 && lstMasterID.Contains(c.COTOMasterID.Value)).Select(c => new { COTOMasterID = c.COTOMasterID.Value, c.CostOfVendor, c.GroupOfTroubleID, GroupOfTroubleCode = c.CAT_GroupOfTrouble.Code, c.Description }).ToList();
                    var lstStation = model.OPS_COTOStation.Where(c => lstMasterID.Contains(c.COTOMasterID)).Select(c => new { c.COTOMasterID, c.LocationID, LocationCode = c.CAT_Location.Code, c.Price }).ToList();
                    var lstCustomer = model.CUS_Customer.Where(c => lstCustomerID.Contains(c.ID)).Select(c => new { c.ID, c.Code, c.CustomerName }).ToList();
                    var lstGroupOfLocation = model.CAT_GroupOfLocation.Where(c => lstGroupOfLocationID.Contains(c.ID)).Select(c => new { c.ID, c.Code, c.GroupName }).ToList();
                    foreach (var item in result.ListMaster)
                    {
                        item.ListStation = new List<DTOFLMMasterPHT_Export_Station>();
                        item.ListTrouble = new List<DTOFLMMasterPHT_Export_Trouble>();
                        if (item.CustomerID > 0)
                        {
                            var customer = lstCustomer.FirstOrDefault(c => c.ID == item.CustomerID);
                            if (customer != null)
                            {
                                item.CustomerCode = customer.Code;
                                item.CustomerName = customer.CustomerName;
                            }
                        }

                        if (item.TypeOfLocationID > 0)
                        {
                            var groupLocation = lstGroupOfLocation.FirstOrDefault(c => c.ID == item.TypeOfLocationID);
                            if (groupLocation != null)
                            {
                                item.TypeOfLocationCode = groupLocation.Code;
                                item.TypeOfLocationName = groupLocation.GroupName;
                            }
                        }

                        //if (item.PHTPackingID > 0)
                        //{
                        //    if (item.PHTPackingID == (int)CATPackingCOCode.CO20)
                        //        item.PHTPackingCode = CATPackingCOCode.CO20.ToString();
                        //    if (item.PHTPackingID == (int)CATPackingCOCode.CO40)
                        //        item.PHTPackingCode = CATPackingCOCode.CO40.ToString();
                        //    if (item.PHTPackingID == (int)CATPackingCOCode.CO40H)
                        //        item.PHTPackingCode = CATPackingCOCode.CO40H.ToString();
                        //}

                        item.ListStation = lstStation.Where(c => c.COTOMasterID == item.ID).Select(c => new DTOFLMMasterPHT_Export_Station
                        {
                            LocationID = c.LocationID,
                            LocationCode = c.LocationCode,
                            Price = c.Price,
                        }).ToList();

                        item.ListTrouble = lstTrouble.Where(c => c.COTOMasterID == item.ID).Select(c => new DTOFLMMasterPHT_Export_Trouble
                        {
                            GroupOfTrobleID = c.GroupOfTroubleID,
                            GroupOfTroubleCode = c.GroupOfTroubleCode,
                            Price = c.CostOfVendor,
                            Note = c.Description
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPHTCOMaster_Import(List<DTOFLMMasterPHT_Import> lstData)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (lstData != null && lstData.Count > 0 && lstData.Count(c => !c.ExcelSuccess) == 0)
                    {
                        List<OPS_COTOMaster> lstMaster = new List<OPS_COTOMaster>();

                        foreach (var item in lstData)
                        {
                            var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == item.VehicleID && c.DateConfig == item.DateConfig && c.SortOrder == item.SortOrder);
                            if (obj == null)
                            {
                                obj = new OPS_COTOMaster();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterPHT;
                                obj.SYSCustomerID = Account.SYSCustomerID;
                                obj.VendorOfVehicleID = Account.SYSCustomerID;
                                model.OPS_COTOMaster.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;

                                // Xóa hết trouble + station cũ
                                foreach (var detail in model.OPS_COTOStation.Where(c => c.COTOMasterID == obj.ID))
                                    model.OPS_COTOStation.Remove(detail);
                                foreach (var detail in model.CAT_Trouble.Where(c => c.COTOMasterID == obj.ID))
                                    model.CAT_Trouble.Remove(detail);
                            }
                            obj.Note = item.Note;
                            obj.Code = string.Empty;
                            obj.DateConfig = obj.ETA = item.DateConfig.Date;
                            obj.ETD = item.ETD.HasValue ? item.ETD.Value : item.DateConfig.Date;
                            obj.ATD = obj.ETD;
                            obj.ATA = obj.ETA;
                            obj.KMStart = item.KMStart;
                            obj.KMEnd = item.KMEnd;
                            if (obj.KMStart > 0 && obj.KMEnd > 0)
                                obj.KM = obj.KMEnd.Value - obj.KMStart.Value;
                            obj.ExIsOverNight = item.ExIsOverNight;
                            obj.ExIsOverWeight = item.ExIsOverWeight;
                            obj.ExTotalDayOut = item.ExTotalDayOut;
                            obj.ExTotalJoin = item.ExTotalJoin;
                            obj.PHTLoading = item.PHTLoading;
                            if (item.PHTPackingID > 0)
                            {
                                obj.PHTPackingID = item.PHTPackingID;
                            }
                            else
                            {
                                obj.PHTPackingID = null;
                            }
                            obj.VehicleID = item.VehicleID;
                            obj.PHTCustomerID = item.CustomerID;
                            obj.PHTGroupOfLocationID = item.TypeOfLocationID;
                            obj.SortOrder = item.SortOrder;

                            #region Driver
                            obj.DriverID1 = item.DriverID1 > 0 ? item.DriverID1 : null;
                            obj.DriverID2 = item.DriverID2 > 0 ? item.DriverID2 : null;
                            obj.DriverID3 = item.DriverID3 > 0 ? item.DriverID3 : null;
                            obj.DriverID4 = item.DriverID4 > 0 ? item.DriverID4 : null;
                            obj.DriverID5 = item.DriverID5 > 0 ? item.DriverID5 : null;
                            obj.DriverName1 = string.Empty;
                            obj.DriverName2 = string.Empty;
                            obj.TypeOfDriverID1 = null;
                            obj.TypeOfDriverID2 = null;
                            obj.TypeOfDriverID3 = null;
                            obj.TypeOfDriverID4 = null;
                            obj.TypeOfDriverID5 = null;
                            if (obj.DriverID1 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID1);
                                if (driver != null)
                                {
                                    obj.DriverName1 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                                    obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 1 không tồn tại");
                            }
                            if (obj.DriverID2 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID2);
                                if (driver != null)
                                {
                                    obj.DriverName2 = driver.CAT_Driver.LastName + " " + driver.CAT_Driver.FirstName;
                                    obj.TypeOfDriverID2 = -(int)SYSVarType.TypeOfDriverEx;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                            }
                            if (obj.DriverID3 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID3);
                                if (driver != null)
                                {
                                    obj.TypeOfDriverID3 = -(int)SYSVarType.TypeOfDriverEx;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                            }
                            if (obj.DriverID4 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID4);
                                if (driver != null)
                                {
                                    obj.TypeOfDriverID4 = -(int)SYSVarType.TypeOfDriverEx;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                            }
                            if (obj.DriverID5 > 0)
                            {
                                var driver = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID5);
                                if (driver != null)
                                {
                                    obj.TypeOfDriverID5 = -(int)SYSVarType.TypeOfDriverEx;
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế 2 không tồn tại");
                            }
                            #endregion

                            if (!string.IsNullOrEmpty(item.MasterCode))
                                obj.Code = item.MasterCode;

                            lstMaster.Add(obj);

                            foreach (var station in item.ListStation)
                            {
                                OPS_COTOStation objStation = new OPS_COTOStation();
                                objStation.CreatedBy = Account.UserName;
                                objStation.CreatedDate = DateTime.Now;
                                objStation.OPS_COTOMaster = obj;
                                objStation.Price = station.Price;
                                objStation.LocationID = station.LocationID;
                                model.OPS_COTOStation.Add(objStation);
                            }

                            foreach (var trouble in item.ListTrouble)
                            {
                                CAT_Trouble objTrouble = new CAT_Trouble();
                                objTrouble.CreatedBy = Account.UserName;
                                objTrouble.CreatedDate = DateTime.Now;
                                objTrouble.OPS_COTOMaster = obj;
                                objTrouble.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                                objTrouble.GroupOfTroubleID = trouble.GroupOfTrobleID;
                                objTrouble.Cost = trouble.Price;
                                objTrouble.CostOfVendor = trouble.Price;
                                objTrouble.Description = trouble.Note;
                                model.CAT_Trouble.Add(objTrouble);
                            }
                        }

                        model.SaveChanges();
                        if (lstMaster.Count > 0)
                        {
                            foreach (var item in lstMaster)
                            {
                                if (string.IsNullOrEmpty(item.Code))
                                    item.Code = PHTCOCode + item.ID.ToString(PHTCodeNum);
                            }
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region FLMSetting_Vendor
        public DTOResult FLMSetting_Vendor_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Company.Where(c => c.CustomerOwnID == Account.SYSCustomerID && c.CustomerRelateID != Account.SYSCustomerID).Select(c => new DTOCUSCompany
                    {
                        ID = c.ID,
                        CustomerOwnID = c.CustomerOwnID,
                        CustomerRelateID = c.CustomerRelateID,
                        CustomerRelateCode = c.CUS_Customer1.Code,
                        CustomerRelateName = c.CUS_Customer1.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSCompany>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Danh sách công ty chưa thuộc khách hàng
        /// </summary>
        /// <param name="request"></param>
        /// <param name="customerid"></param>
        /// <returns></returns>
        public DTOResult FLMSetting_VendorNotIn_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == Account.SYSCustomerID).Select(c => c.CustomerRelateID).ToList();
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && !lstCustomerID.Contains(c.ID) && c.ID != Account.SYSCustomerID && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOCUSCompany
                    {
                        ID = -1,
                        CustomerOwnID = Account.SYSCustomerID,
                        CustomerRelateID = c.ID,
                        CustomerRelateCode = c.Code,
                        CustomerRelateName = c.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSCompany>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu danh sách Company
        /// </summary>
        /// <param name="lst"></param>
        public void FLMSetting_Vendor_SaveList(List<DTOCUSCompany> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    using (var helper = new CopyHelper())
                    {
                        #region Kiểm tra trùng
                        foreach (var item in lst)
                        {
                            if (model.CUS_Company.FirstOrDefault(c => c.CustomerOwnID == Account.SYSCustomerID && c.CustomerRelateID == item.CustomerRelateID) != null)
                                throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                        }
                        #endregion

                        #region Lưu CUSCompany
                        foreach (var item in lst)
                        {
                            var obj = model.CUS_Company.FirstOrDefault(c => c.ID == item.ID);
                            if (obj == null)
                            {
                                obj = new CUS_Company();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.CustomerOwnID = Account.SYSCustomerID;
                                obj.CustomerRelateID = item.CustomerRelateID;
                                model.CUS_Company.Add(obj);
                            }
                        }

                        model.SaveChanges();
                        #endregion
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xóa danh sách Company khỏi khách hàng
        /// </summary>
        /// <param name="lst"></param>
        public void FLMSetting_Vendor_DeleteList(List<DTOCUSCompany> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    using (var helper = new CopyHelper())
                    {
                        foreach (var item in lst)
                        {
                            var obj = model.CUS_Company.FirstOrDefault(c => c.ID == item.ID);
                            if (obj != null)
                            {
                                model.CUS_Company.Remove(obj);
                            }
                        }

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMSetting_Price_Copy(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == Account.SYSCustomerID && c.CAT_DriverFee.Count > 0).Select(c => new DTOFLMPrice_Copy
                    {
                        ID = c.ID,
                        CompanyID = c.CompanyID,
                        //ServiceOfOrderID = c.ServiceOfOrderID,
                        TransportModeID = c.TransportModeID,
                        ContractNo = c.ContractNo,
                        //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.Name : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMPrice_Copy>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSetting_PriceCopy_SaveList(int ContractID, int ID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objDriveFee = model.CAT_DriverFee.Where(c => c.ContractID == ContractID);
                    if (objDriveFee != null)
                    {
                        foreach (var item in objDriveFee)
                        {
                            CAT_DriverFee obj = new CAT_DriverFee();
                            model.CAT_DriverFee.Add(obj);

                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;

                            obj.ContractID = ID;
                            obj.TypeOfDriverFeeID = item.TypeOfDriverFeeID;
                            obj.DriverFeeSumID = item.DriverFeeSumID;
                            obj.FeeName = item.FeeName;
                            obj.ExprInput = item.ExprInput;
                            obj.ExprQuantity = item.ExprQuantity;
                            obj.ExprUnitPrice = item.ExprUnitPrice;
                            obj.ExprPriceFix = item.ExprPriceFix;
                            obj.CreatedDate = DateTime.Now;
                            obj.CreatedBy = Account.UserName;
                            obj.TypeOfDriverID = item.TypeOfDriverID;
                            obj.SortOrder = item.SortOrder;
                            obj.ExcelRow = item.ExcelRow;
                            obj.ExcelColumn = item.ExcelColumn;
                            obj.ExcelColumnFieldID = item.ExcelColumnFieldID;

                            var listDriverFeeCustomer = model.CAT_DriverFeeCustomer.Where(c => c.DriverFeeID == item.ID);
                            foreach (var i in listDriverFeeCustomer)
                            {
                                CAT_DriverFeeCustomer o = new CAT_DriverFeeCustomer();
                                model.CAT_DriverFeeCustomer.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_DriverFee = obj;
                                o.CustomerID = i.CustomerID;
                                o.CreatedDate = DateTime.Now;
                                o.CreatedBy = Account.UserName;
                            }
                            var listDriverFeeGroupLocation = model.CAT_DriverFeeGroupLocation.Where(c => c.DriverFeeID == item.ID);
                            foreach (var i in listDriverFeeGroupLocation)
                            {
                                CAT_DriverFeeGroupLocation o = new CAT_DriverFeeGroupLocation();
                                model.CAT_DriverFeeGroupLocation.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_DriverFee = obj;
                                o.GroupOfLocationID = i.GroupOfLocationID;
                                o.CreatedDate = DateTime.Now;
                                o.CreatedBy = Account.UserName;
                            }
                            var listDriverFeeGroupProduct = model.CAT_DriverFeeGroupProduct.Where(c => c.DriverFeeID == item.ID);
                            foreach (var i in listDriverFeeGroupProduct)
                            {
                                CAT_DriverFeeGroupProduct o = new CAT_DriverFeeGroupProduct();
                                model.CAT_DriverFeeGroupProduct.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_DriverFee = obj;
                                o.GroupOfProductID = i.GroupOfProductID;
                                o.ExprQuantity = i.ExprQuantity;
                                o.ExprPrice = i.ExprPrice;
                                o.CreatedDate = DateTime.Now;
                                o.CreatedBy = Account.UserName;
                            }
                            var listDriverFeePacking = model.CAT_DriverFeePacking.Where(c => c.DriverFeeID == item.ID);
                            foreach (var i in listDriverFeePacking)
                            {
                                CAT_DriverFeePacking o = new CAT_DriverFeePacking();
                                model.CAT_DriverFeePacking.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_DriverFee = obj;
                                o.PackingID = i.PackingID;
                                o.ExprQuantity = i.ExprQuantity;
                                o.ExprPrice = i.ExprPrice;
                                o.CreatedDate = DateTime.Now;
                                o.CreatedBy = Account.UserName;
                            }
                            var listDriverFeeRouting = model.CAT_DriverFeeRouting.Where(c => c.DriverFeeID == item.ID);
                            foreach (var i in listDriverFeeRouting)
                            {
                                CAT_DriverFeeRouting o = new CAT_DriverFeeRouting();
                                model.CAT_DriverFeeRouting.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_DriverFee = obj;
                                o.LocationID = i.LocationID;
                                o.RoutingID = i.RoutingID;
                                o.TypeOfTOLocationID = i.TypeOfTOLocationID;
                                o.CreatedDate = DateTime.Now;
                                o.CreatedBy = Account.UserName;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region danh sách địa chỉ
        public DTOResult FLMSetting_Location_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CUSLocation_List(model, Account, Account.SYSCustomerID, request);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSetting_Location_SaveList(List<CATLocation> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUSLocation_SaveList(model, Account, Account.SYSCustomerID, lst);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSetting_Location_Delete(int cuslocationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUSLocation_Delete(model, Account, cuslocationid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public AddressSearchItem AddressSearch_List(int id)
        {
            try
            {
                var result = new AddressSearchItem();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => c.ID == id).Select(c => new AddressSearchItem
                    {
                        CUSLocationID = c.ID,
                        CustomerID = c.CustomerID,
                        CUSPartnerID = c.CusPartID,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "",
                        LocationCode = c.Code,
                        Address = c.CAT_Location.Address,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMSetting_Location_NotInList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CUSLocation_NotInList(model, Account, Account.SYSCustomerID, request);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMSetting_Location_HasRun(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CUSLocation_HasRun(model, Account, Account.SYSCustomerID, request);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel FLMSetting_Location_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int IsBl = 2;
                    return HelperRouting.CUSLocation_ExcelInit(model, Account, functionid, functionkey, isreload, Account.SYSCustomerID, IsBl);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMSetting_Location_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    return HelperRouting.CUSLocation_ExcelChange(model, Account, id, row, cells, lstMessageError, Account.SYSCustomerID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMSetting_Location_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    return HelperRouting.CUSLocation_ExcelImport(model, Account, id, lst, lstMessageError, Account.SYSCustomerID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMSetting_Location_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int IsBl = 2;
                    return HelperRouting.CUSLocation_ExcelApprove(model, Account, id, Account.SYSCustomerID, IsBl);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<AddressSearchItem> AddressSearch_ByCustomerList()
        {
            try
            {
                List<AddressSearchItem> result = new List<AddressSearchItem>();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => c.CustomerID == Account.SYSCustomerID).Select(c => new AddressSearchItem
                    {
                        CUSLocationID = c.ID,
                        CustomerID = c.CustomerID,
                        CUSPartnerID = c.CusPartID,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "",
                        LocationCode = c.Code,
                        Address = c.CAT_Location.Address,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //----

        public DTOResult FLMSetting_Location_RoutingContract_List(string request, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return HelperRouting.RoutingContract_List(model, Account, request, Account.SYSCustomerID, locationid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMSetting_Location_RoutingContract_SaveList(List<int> lstAreaClear, List<int> lstAreaAdd, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.RoutingContract_SaveList(model, Account, lstAreaClear, lstAreaAdd, locationid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSetting_Location_RoutingContract_NewRoutingSave(DTOCUSPartnerNewRouting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.RoutingContract_NewRoutingSave(model, Account, item, Account.SYSCustomerID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPartnerNewRouting FLMSetting_Location_RoutingContract_NewRoutingGet()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return HelperRouting.RoutingContract_NewRoutingGet(model, Account, Account.SYSCustomerID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCATContract> FLMSetting_Location_RoutingContract_ContractData()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return HelperRouting.RoutingContract_ContractData(model, Account, Account.SYSCustomerID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMSetting_Location_RoutingContract_NewAreaSave(CATRoutingArea item, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.RoutingContract_NewAreaSave(model, Account, item, locationid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMSetting_Location_RoutingContract_AreaList(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return HelperRouting.RoutingContract_AreaList(model, Account, request);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region FLMAssetWarning
        public List<DTOFLMAssetTypeWarning> Get_TypeWarning()
        {
            try
            {
                List<DTOFLMAssetTypeWarning> result = new List<DTOFLMAssetTypeWarning>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_TypeWarning.Select(c => new DTOFLMAssetTypeWarning
                    {
                        ID = c.ID,
                        Code = c.Code,
                        WarningName = c.WarningName,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMAsset_Warning_List(string request, int TypeWarningID)
        {
            DTOResult result = new DTOResult();
            using (var model = new DataEntities())
            {
                if (TypeWarningID == 0)
                {
                    TypeWarningID = model.FLM_TypeWarning.Select(c => c.ID).FirstOrDefault();
                }
                var query = model.FLM_AssetWarning.Where(c => c.TypeWarningID == TypeWarningID).Select(c => new DTOFLMAssetWarning
                {
                    ID = c.ID,
                    AssetID = c.FLM_Asset.ID,
                    Code = c.FLM_Asset.Code,
                    Regno = c.FLM_Asset.VehicleID != null ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID != null ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.ContainerID != null ? c.FLM_Asset.CAT_Container.ContainerNo : null,
                    TypeWarningID = c.TypeWarningID,
                    DateData = c.DateData,
                    DateCompare = c.DateCompare,
                    NumberData = c.NumberData,
                    NumberCompare = c.NumberCompare,
                    TypeOfAssetName = c.FLM_Asset.SYS_Var.ValueOfVar,
                }).ToDataSourceResult(CreateRequest(request));
                result.Total = query.Total;
                result.Data = query.Data as IEnumerable<DTOFLMAssetWarning>;
            }
            return result;
        }

        public DTOResult FLMAsset_Warning_NoInList(int TypeWarningID, string request)
        {
            DTOResult result = new DTOResult();
            using (var model = new DataEntities())
            {
                var InList = model.FLM_AssetWarning.Where(c => c.TypeWarningID == TypeWarningID).Select(c => c.AssetID).ToList();
                var query = model.FLM_Asset.Where(c => !InList.Contains(c.ID)).Select(c => new DTOFLMAsset
                {
                    ID = c.ID,
                    IsChoose = false,
                    Code = c.Code,
                    RegNo = c.VehicleID != null ? c.CAT_Vehicle.RegNo : c.RomoocID != null ? c.CAT_Romooc.RegNo : c.ContainerID != null ? c.CAT_Container.ContainerNo : "",
                    TypeOfAssetName = c.SYS_Var.ValueOfVar
                }).ToDataSourceResult(CreateRequest(request));
                result.Total = query.Total;
                result.Data = query.Data as IEnumerable<DTOFLMAsset>;
            }
            return result;
        }

        public void FLMAsset_Warning_SaveNoInList(List<DTOFLMAsset> lst, int TypeWarningID)
        {
            using (var model = new DataEntities())
            {
                foreach (var item in lst)
                {
                    var obj = new FLM_AssetWarning();
                    obj.CreatedBy = Account.UserName;
                    obj.CreatedDate = DateTime.Now;
                    obj.AssetID = item.ID;
                    obj.TypeWarningID = TypeWarningID;
                    obj.DateData = null;
                    obj.DateCompare = null;
                    obj.NumberCompare = null;
                    obj.NumberData = null;
                    model.FLM_AssetWarning.Add(obj);
                }
                model.SaveChanges();
            }
        }

        public void FLMAsset_Warning_SaveList(List<DTOFLMAssetWarning> lst)
        {
            using (var model = new DataEntities())
            {
                foreach (var item in lst)
                {
                    var obj = model.FLM_AssetWarning.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DateData = item.DateData;
                        obj.DateCompare = item.DateCompare;
                        obj.NumberCompare = item.NumberCompare;
                        obj.NumberData = item.NumberData;
                    }
                    model.SaveChanges();
                }
            }
        }

        public void FLMAsset_Warning_Delete(DTOFLMAssetWarning item)
        {
            using (var model = new DataEntities())
            {
                var obj = model.FLM_AssetWarning.FirstOrDefault(c => c.ID == item.ID);
                model.FLM_AssetWarning.Remove(obj);
                model.SaveChanges();
            }
        }

        public SYSExcel FLMAssetWarning_ExcelInit(int TypeWarningID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.FLM_AssetWarning.Where(c => c.TypeWarningID == TypeWarningID).Select(c => new
                        {
                            ID = c.ID,
                            AssetID = c.FLM_Asset.ID,
                            Code = c.FLM_Asset.Code,
                            Regno = c.FLM_Asset.VehicleID != null ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID != null ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.ContainerID != null ? c.FLM_Asset.CAT_Container.ContainerNo : null,
                            TypeWarningID = c.TypeWarningID,
                            DateData = c.DateData,
                            DateCompare = c.DateCompare,
                            NumberData = c.NumberData,
                            NumberCompare = c.NumberCompare,
                            TypeOfAssetName = c.FLM_Asset.SYS_Var.ValueOfVar,
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80, 80, 80, 80 });
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Ngày", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Ngày so sánh", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tiền", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tiền so sánh", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.Regno));
                            cells.Add(HelperExcel.NewCell(item.TypeOfAssetName));
                            if (item.DateData.HasValue)
                                cells.Add(HelperExcel.NewCell(-1, item.DateData.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            else
                                cells.Add(HelperExcel.NewCell(-1, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            if (item.DateCompare.HasValue)
                                cells.Add(HelperExcel.NewCell(-1, item.DateCompare.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            else
                                cells.Add(HelperExcel.NewCell(-1, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            cells.Add(HelperExcel.NewCell(item.NumberData));
                            cells.Add(HelperExcel.NewCell(item.NumberCompare));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var InList = model.FLM_AssetWarning.Where(c => c.TypeWarningID == TypeWarningID).Select(c => c.AssetID).ToList();
                        var LstNoList = model.FLM_Asset.Where(c => !InList.Contains(c.ID)).Select(c => new
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RegNo = c.VehicleID != null ? c.CAT_Vehicle.RegNo : c.RomoocID != null ? c.CAT_Romooc.RegNo : c.ContainerID != null ? c.CAT_Container.ContainerNo : "",
                            TypeOfAssetName = c.SYS_Var.ValueOfVar,
                        }).ToList();
                        ws = lstWorkSheet[1];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80 });
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in LstNoList)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.RegNo));
                            cells.Add(HelperExcel.NewCell(item.TypeOfAssetName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMAssetWarning_ExcelChange(int TypeWarningID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 8;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colAssetID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.FLM_AssetWarning.Select(c => new { c.ID, c.AssetID, c.FLM_Asset.Code }).ToList();
                    var InList = model.FLM_AssetWarning.Where(c => c.TypeWarningID == TypeWarningID).Select(c => c.AssetID).ToList();
                    var LstNoList = model.FLM_Asset.Where(c => !InList.Contains(c.ID)).Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfAssetName = HelperExcel.GetString(checkRow, colData++);
                        string dataDateData = HelperExcel.GetString(checkRow, colData++);
                        string dataDateCompare = HelperExcel.GetString(checkRow, colData++);
                        string dataNumberData = HelperExcel.GetString(checkRow, colData++);
                        string dataNumberCompare = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstGetID.Where(c => c.Code == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDateData, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDateCompare, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataNumberData, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataNumberCompare, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                        {
                            var valid = "-1";
                            var AssetID = "-1";
                            var objNoList = LstNoList.FirstOrDefault(c => c.Code == dataCode);
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                            {
                                valid = objID.ID.ToString();
                                AssetID = objID.AssetID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, AssetID);
                            }
                            else
                            {
                                if (objNoList != null)
                                {
                                    AssetID = objNoList.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, AssetID);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                }
                                else
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMAssetWarning_ExcelImport(int TypeWarningID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 8;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colAssetID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.FLM_AssetWarning.Select(c => new { c.ID, c.AssetID, c.FLM_Asset.Code }).ToList();
                    var InList = model.FLM_AssetWarning.Where(c => c.TypeWarningID == TypeWarningID).Select(c => c.AssetID).ToList();
                    var LstNoList = model.FLM_Asset.Where(c => !InList.Contains(c.ID)).Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfAssetName = HelperExcel.GetString(checkRow, colData++);
                        string dataDateData = HelperExcel.GetString(checkRow, colData++);
                        string dataDateCompare = HelperExcel.GetString(checkRow, colData++);
                        string dataNumberData = HelperExcel.GetString(checkRow, colData++);
                        string dataNumberCompare = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstGetID.Where(c => c.Code == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDateData, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDateCompare, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataNumberData, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataNumberCompare, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                        {
                            var valid = "-1";
                            var AssetID = "-1";
                            var objNoList = LstNoList.FirstOrDefault(c => c.Code == dataCode);
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                            {
                                valid = objID.ID.ToString();
                                AssetID = objID.AssetID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, AssetID);
                            }
                            else
                            {
                                if (objNoList != null)
                                {
                                    AssetID = objNoList.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAssetID, AssetID);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                }
                                else
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                        }

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMAssetWarning_ExcelApprove(int TypeWarningID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 8;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colAssetID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataTypeOfAssetName = HelperExcel.GetString(eRow, colData++);
                            string dataDateData = HelperExcel.GetString(eRow, colData++);
                            string dataDateCompare = HelperExcel.GetString(eRow, colData++);
                            string dataNumberData = HelperExcel.GetString(eRow, colData++);
                            string dataNumberCompare = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            string AssetID = HelperExcel.GetString(eRow, colAssetID);
                            int getid = Convert.ToInt32(dataID);
                            int getAssetID = Convert.ToInt32(AssetID);

                            var obj = model.FLM_AssetWarning.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new FLM_AssetWarning();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.AssetID = getAssetID;
                            obj.TypeWarningID = TypeWarningID;
                            obj.DateData = !string.IsNullOrEmpty(dataDateData) ? HelperExcel.ValueToDate(dataDateData) : null;
                            obj.DateCompare = !string.IsNullOrEmpty(dataDateCompare) ? HelperExcel.ValueToDate(dataDateCompare) : null;
                            try { obj.NumberData = Decimal.Parse(dataNumberData); }
                            catch { obj.NumberData = null; }
                            try { obj.NumberCompare = Decimal.Parse(dataNumberCompare); }
                            catch { obj.NumberCompare = null; }
                            if (obj.ID < 1)
                                model.FLM_AssetWarning.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region GroupOfProduct
        public DTOResult FLMContract_GroupOfProduct_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractGroupOfProduct.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractGroupOfProduct
                    {
                        ID = c.ID,
                        ContractID = c.ContractID,
                        Expression = c.Expression,
                        GroupOfProductID = c.GroupOfProductID,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductIDChange = c.GroupOfProductIDChange,
                        GroupOfProductIDChangeName = c.GroupOfProductIDChange.HasValue ? c.CUS_GroupOfProduct1.GroupName : string.Empty,
                        ProductID = c.ProductID > 0 ? c.ProductID.Value : -1,
                        ProductName = c.ProductID > 0 ? c.CUS_Product.ProductName : string.Empty,
                        ProductIDChange = c.ProductIDChange > 0 ? c.ProductIDChange.Value : -1,
                        ProductIDChangeName = c.ProductIDChange > 0 ? c.CUS_Product1.ProductName : string.Empty,
                        IsChoose = false
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContractGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATContractGroupOfProduct FLMContract_GroupOfProduct_Get(int id, int contractID)
        {
            try
            {
                DTOCATContractGroupOfProduct result = new DTOCATContractGroupOfProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_ContractGroupOfProduct.Where(c => c.ID == id).Select(c => new DTOCATContractGroupOfProduct
                        {
                            ID = c.ID,
                            ContractID = c.ContractID,
                            Expression = c.Expression,
                            ExpressionInput = c.ExpressionInput,
                            GroupOfProductID = c.GroupOfProductID,
                            GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                            GroupOfProductIDChange = c.GroupOfProductIDChange,
                            GroupOfProductIDChangeName = c.GroupOfProductIDChange.HasValue ? c.CUS_GroupOfProduct1.GroupName : string.Empty,
                            ProductID = c.ProductID > 0 ? c.ProductID.Value : -1,
                            ProductName = c.ProductID > 0 ? c.CUS_Product.ProductName : string.Empty,
                            ProductIDChange = c.ProductIDChange > 0 ? c.ProductIDChange.Value : -1,
                            ProductIDChangeName = c.ProductIDChange > 0 ? c.CUS_Product1.ProductName : string.Empty,
                            IsChoose = false
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                        if (contract != null)
                        {
                            var group = model.CUS_GroupOfProduct.FirstOrDefault(c => c.CustomerID == contract.CustomerID);
                            if (group != null)
                                result.GroupOfProductID = group.ID;
                            result.ContractID = contractID;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_GroupOfProduct_Save(DTOCATContractGroupOfProduct item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.GroupOfProductID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn nhóm hàng!");

                    var obj = model.CAT_ContractGroupOfProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_ContractGroupOfProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        model.CAT_ContractGroupOfProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.Expression = item.Expression;
                    obj.ExpressionInput = item.ExpressionInput;
                    obj.GroupOfProductIDChange = item.GroupOfProductIDChange > 0 ? item.GroupOfProductIDChange : null;
                    obj.ProductID = item.ProductID > 0 ? item.ProductID : null;
                    obj.ProductIDChange = item.ProductIDChange > 0 ? item.ProductIDChange : null;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMContract_GroupOfProduct_Delete(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (lstid.Count > 0)
                    {
                        foreach (var item in lstid)
                        {
                            var obj = model.CAT_ContractGroupOfProduct.FirstOrDefault(c => c.ID == item);
                            if (obj != null)
                                model.CAT_ContractGroupOfProduct.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public double? FLMContract_GroupOfProduct_Check(DTOCATContractGroupOfProduct item)
        {
            try
            {
                double? result = null;

                ExcelPackage package = new ExcelPackage();
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                int row = 0, col = 1;
                string strCol = "A", strRow = "";
                Dictionary<string, string> dicEx = new Dictionary<string, string>();

                string strExp = item.Expression;

                row++;
                worksheet.Cells[row, col].Value = item.OrderTon;
                strExp = strExp.Replace("[OrderTon]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.OrderCBM;
                strExp = strExp.Replace("[OrderCBM]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.OrderQuantity;
                strExp = strExp.Replace("[OrderQuantity]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.Ton;
                strExp = strExp.Replace("[Ton]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.CBM;
                strExp = strExp.Replace("[CBM]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.Quantity;
                strExp = strExp.Replace("[Quantity]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Formula = strExp;
                package.Workbook.Calculate();
                var val = worksheet.Cells[row, col].Value.ToString().Trim();
                //package.Save();

                try
                {
                    result = Convert.ToDouble(val);
                }
                catch (Exception ex)
                {
                    throw FaultHelper.BusinessFault(null, null, "Công thức lỗi: " + val);
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public SYSExcel FLMContract_GroupOfProduct_ExcelInit(int contractID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    functionkey = functionkey + contractID.ToString();
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var data = model.CAT_ContractGroupOfProduct.Where(c => c.ContractID == contractID).Select(c => new
                        {
                            GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                            GroupOfProductIDChangeCode = c.GroupOfProductIDChange.HasValue ? c.CUS_GroupOfProduct1.Code : string.Empty,
                            ProductCode = c.ProductID > 0 ? c.CUS_Product.Code : string.Empty,
                            ProductIDChangeCode = c.ProductIDChange > 0 ? c.CUS_Product1.Code : string.Empty,
                            ExpressionInput = c.ExpressionInput,
                            Expression = c.Expression,

                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã nhóm hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã mặt hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã nhóm hàng quy đổi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã mặt hàng quy đổi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Công thức kiểm tra", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Công thức quy đổi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfProductCode));
                            cells.Add(HelperExcel.NewCell(col++, item.ProductCode));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfProductIDChangeCode));
                            cells.Add(HelperExcel.NewCell(col++, item.ProductIDChangeCode));
                            cells.Add(HelperExcel.NewCell(col++, item.Expression));
                            cells.Add(HelperExcel.NewCell(col++, item.ExpressionInput));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);

                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMContract_GroupOfProduct_ExcelChange(int contractID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 7;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckGroupOfProduct = colData++;
                    int colCheckProduct = colData++;
                    int colCheckGroupOfProductIDChange = colData++;
                    int colCheckProductIDChange = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int customerid = 0;
                    if (contract != null)
                        customerid = contract.CustomerID.Value;
                    var ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    var ListProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        Code = c.Code
                    }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    int GroupOfProductID = -1;
                    int ProductID = -1;
                    int GroupOfProductChangeID = -1;
                    int ProductChangeID = -1;
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataGroupOfProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataExpression = HelperExcel.GetString(checkRow, colData++);
                        string dataExpressionInput = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupOfProductCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag && ListGroupOfProduct.Count(c => c.Code == dataGroupOfProductCode) < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            var valid = "-1";
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductCode);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                GroupOfProductID = obj.ID;
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProduct, valid);
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProductCode))
                        {
                            var valid = "-1";
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductCode && c.GroupOfProductID == GroupOfProductID);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                ProductID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode))
                        {
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductCode);
                            if (obj != null)
                            {
                                GroupOfProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductIDChangeCode && c.GroupOfProductID == GroupOfProductChangeID);
                            if (obj != null)
                            {
                                ProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataExpressionInput))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProduct, ProductID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProductIDChange, GroupOfProductChangeID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProductIDChange, ProductChangeID.ToString());
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMContract_GroupOfProduct_ExcelImport(int contractID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int rowStart = 1;
                    int colData = 7;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckGroupOfProduct = colData++;
                    int colCheckProduct = colData++;
                    int colCheckGroupOfProductIDChange = colData++;
                    int colCheckProductIDChange = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int customerid = 0;
                    if (contract != null)
                        customerid = contract.CustomerID.Value;
                    var ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    var ListProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        Code = c.Code
                    }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;
                        int GroupOfProductID = -1;
                        int ProductID = -1;
                        int GroupOfProductChangeID = -1;
                        int ProductChangeID = -1;

                        colData = 1;
                        string dataGroupOfProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataExpression = HelperExcel.GetString(checkRow, colData++);
                        string dataExpressionInput = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupOfProductCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag && ListGroupOfProduct.Count(c => c.Code == dataGroupOfProductCode) < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            var valid = "-1";
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductCode);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                GroupOfProductID = obj.ID;
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProduct, valid);
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProductCode))
                        {
                            var valid = "-1";
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductCode && c.GroupOfProductID == GroupOfProductID);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                ProductID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode))
                        {
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductCode);
                            if (obj != null)
                            {
                                GroupOfProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductIDChangeCode && c.GroupOfProductID == GroupOfProductChangeID);
                            if (obj != null)
                            {
                                ProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataExpressionInput))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProduct, ProductID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProductIDChange, GroupOfProductChangeID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProductIDChange, ProductChangeID.ToString());
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMContract_GroupOfProduct_ExcelApprove(int contractID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 7;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckGroupOfProduct = colData++;
                    int colCheckProduct = colData++;
                    int colCheckGroupOfProductIDChange = colData++;
                    int colCheckProductIDChange = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        var lstIDRemove = model.CAT_ContractGroupOfProduct.Where(c => c.ContractID == contractID).Select(c => c.ID).ToList();
                        foreach (var item in lstIDRemove)
                        {
                            var obj = model.CAT_ContractGroupOfProduct.FirstOrDefault(c => c.ID == item);
                            if (obj != null)
                                model.CAT_ContractGroupOfProduct.Remove(obj);
                        }
                        model.SaveChanges();

                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataGroupOfProductCode = HelperExcel.GetString(checkRow, colData++);
                            string dataProductCode = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupOfProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                            string dataProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                            string dataExpression = HelperExcel.GetString(checkRow, colData++);
                            string dataExpressionInput = HelperExcel.GetString(checkRow, colData++);

                            int GroupOfProductID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckGroupOfProduct));
                            int ProductID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckProduct));
                            int GroupOfProductIDChangeID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckGroupOfProductIDChange));
                            int ProductIDChangeID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckProductIDChange));


                            var obj = new CAT_ContractGroupOfProduct();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractID = contractID;
                            model.CAT_ContractGroupOfProduct.Add(obj);

                            obj.GroupOfProductID = GroupOfProductID;
                            obj.Expression = dataExpression;
                            obj.ExpressionInput = dataExpressionInput;
                            if (GroupOfProductIDChangeID > 0)
                                obj.GroupOfProductIDChange = GroupOfProductIDChangeID;
                            else obj.GroupOfProductIDChange = null;

                            if (ProductID > 0)
                                obj.ProductID = ProductID;
                            else obj.ProductID = null;

                            if (ProductIDChangeID > 0)
                                obj.ProductIDChange = ProductIDChangeID;
                            else obj.ProductIDChange = null;

                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region DI_GroupProduct

        public List<DTOPriceDIGroupOfProduct> FLMPrice_DI_GroupProduct_List(int priceID)
        {
            try
            {
                List<DTOPriceDIGroupOfProduct> result = new List<DTOPriceDIGroupOfProduct>();

                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDIGroupOfProduct
                    {
                        ID = c.ID,
                        ContractRoutingID = c.ContractRoutingID,
                        GroupOfProductID = c.GroupOfProductID,
                        Price = c.Price,
                        PriceID = c.PriceID,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMPrice_DI_GroupProduct_SaveList(List<DTOPriceDIGroupOfProduct> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var priceNew in data)
                    {
                        var obj = model.CAT_PriceDIGroupProduct.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == priceNew.ContractRoutingID && c.GroupOfProductID == priceNew.GroupOfProductID);
                        if (obj == null)
                        {
                            obj = new CAT_PriceDIGroupProduct();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            obj.ContractRoutingID = priceNew.ContractRoutingID;
                            obj.GroupOfProductID = priceNew.GroupOfProductID;
                            model.CAT_PriceDIGroupProduct.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMin = priceNew.PriceMin;
                        obj.PriceMax = priceNew.PriceMax;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceDIGroupOfProductData FLMPrice_DI_GroupProduct_Export(int priceID)
        {
            try
            {
                DTOPriceDIGroupOfProductData result = new DTOPriceDIGroupOfProductData();
                result.ListGOP = new List<CUSGroupOfProduct>();
                result.ListDetail = new List<DTOPriceDIGroupOfProduct>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        var objContract = price.CAT_ContractTerm.CAT_Contract;
                        int cusID = -1;
                        if (objContract != null && objContract.CustomerID.HasValue)
                            cusID = objContract.CustomerID.Value;

                        var listGOPMapping = new List<int>();
                        if (objContract.CompanyID > 0)
                        {
                            var CustomerRelateID = objContract.CUS_Company.CustomerRelateID;
                            listGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == objContract.CustomerID && c.CustomerID == CustomerRelateID).Select(c => c.GroupOfProductVENID).ToList();
                        }
                        result.ListGOP = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID && (objContract.CompanyID == null ? true : listGOPMapping.Contains(c.ID))).Select(c => new CUSGroupOfProduct
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName,
                        }).ToList();

                        if (price.CAT_ContractTerm.IsClosed)
                        {
                            var lstRoutingID = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == price.ContractTermID).Select(c => c.ContractRoutingID).Distinct().ToList();

                            result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == price.ContractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                            {
                                ID = c.ID,
                                Code = c.Code,
                                RoutingName = c.RoutingName,
                                SortOrder = c.SortOrder
                            }).OrderBy(c => c.SortOrder).ToList();
                        }
                        else
                        {
                            result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == price.ContractTermID).Select(c => new DTOCATRouting
                            {
                                ID = c.ID,
                                Code = c.Code,
                                RoutingName = c.RoutingName,
                                SortOrder = c.SortOrder,
                            }).OrderBy(c => c.SortOrder).ToList();
                        }

                        result.ListDetail = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDIGroupOfProduct
                        {
                            ContractRoutingID = c.ContractRoutingID,
                            GroupOfProductID = c.GroupOfProductID,
                            Price = c.Price,
                            PriceID = c.PriceID,
                            ID = c.ID,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMPrice_DI_GroupProduct_Import(List<DTOPriceDIGroupOfProductImport> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in data.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == detail.ContractRoutingID && c.GroupOfProductID == detail.GroupOfProductID && c.PriceID == priceID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new CAT_PriceDIGroupProduct();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.GroupOfProductID = detail.GroupOfProductID;
                                obj.ContractRoutingID = row.RouteID;
                                model.CAT_PriceDIGroupProduct.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                            obj.PriceMax = detail.PriceMax;
                            obj.PriceMin = detail.PriceMin;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_DI_GroupProduct_ExcelInit(bool isFrame, int priceID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = FLMPrice_DI_GroupProduct_Export(priceID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListGOP)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListGOP)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListGOP)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOP)
                                {
                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.GroupOfProductID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOP)
                                {
                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.GroupOfProductID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMPrice_DI_GroupProduct_ExcelChange(bool isFrame, int priceID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = FLMPrice_DI_GroupProduct_Export(priceID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListGOP.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListGOP.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMPrice_DI_GroupProduct_ExcelOnImport(bool isFrame, int priceID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_DI_GroupProduct_Export(priceID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOP.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOP.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMPrice_DI_GroupProduct_ExcelApprove(bool isFrame, int priceID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = FLMPrice_DI_GroupProduct_Export(priceID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOP.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOP.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRoute)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListGOP)
                                        {
                                            String priceMin = HelperExcel.GetString(eRow, colData++);
                                            String priceMax = HelperExcel.GetString(eRow, colData++);
                                            decimal? getpriceMin = null;
                                            decimal? getpriceMax = null;
                                            try
                                            {
                                                getpriceMin = decimal.Parse(priceMin);
                                            }
                                            catch
                                            {
                                                getpriceMin = null;
                                            }
                                            try
                                            {
                                                getpriceMax = decimal.Parse(priceMax);
                                            }
                                            catch
                                            {
                                                getpriceMax = null;
                                            }

                                            var obj = model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfProductID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceDIGroupProduct();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.GroupOfProductID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceDIGroupProduct.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.PriceMax = getpriceMax;
                                            obj.PriceMin = getpriceMin;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRoute)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListGOP)
                                        {
                                            String price = HelperExcel.GetString(eRow, colData++);
                                            decimal getprice = 0;
                                            try
                                            {
                                                getprice = decimal.Parse(price);
                                            }
                                            catch
                                            {
                                                getprice = 0;
                                            }
                                            var obj = model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfProductID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceDIGroupProduct();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.GroupOfProductID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceDIGroupProduct.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.Price = getprice;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region location

        #region Đối tác +kho
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <param name="customerid"></param>
        /// <param name="typeofpartnerID">1: NPP, 2: Cảng, 3: Hãng tàu</param>
        /// <returns></returns>
        public DTOResult Partner_List(string request, int typeofpartnerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                int customerid = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    switch (typeofpartnerID)
                    {
                        case 1: typeofpartnerID = -(int)SYSVarType.TypeOfPartnerDistributor;
                            break;
                        case 2: typeofpartnerID = -(int)SYSVarType.TypeOfPartnerSeaPort;
                            break;
                        case 3: typeofpartnerID = -(int)SYSVarType.TypeOfPartnerCarrier;
                            break;
                    }
                    var query = model.CUS_Partner.Where(c => c.CustomerID == customerid && c.CAT_Partner.TypeOfPartnerID == typeofpartnerID).Select(c => new DTOCUSPartnerAll
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerID = c.PartnerID,
                        PartnerCode = c.PartnerCode,
                        TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID,
                        TypeOfPartnerName = c.CAT_Partner.SYS_Var.ValueOfVar,
                        GroupOfPartnerCode = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.Code : string.Empty,
                        GroupOfPartnerID = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.ID : 0,
                        GroupOfPartnerName = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.GroupName : string.Empty,
                        CATCode = c.CAT_Partner.Code,
                        CATName = c.CAT_Partner.PartnerName,
                        CountryName = c.CAT_Partner.CAT_Country.CountryName,
                        DistrictName = c.CAT_Partner.CAT_District.DistrictName,
                        ProvinceName = c.CAT_Partner.CAT_Province.ProvinceName,
                        WardName = c.CAT_Partner.WardID != null ? c.CAT_Partner.CAT_Ward.WardName : string.Empty,
                        Address = c.CAT_Partner.Address,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSPartnerAll>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult PartnerNotIn_List(string request, int typePartner)
        {
            try
            {
                DTOResult result = new DTOResult();
                int customerid = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {

                    int iTypeOfPartner = 0;
                    switch (typePartner)
                    {
                        case 1: iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerSeaPort;
                            break;
                        case 2: iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerCarrier;
                            break;
                        case 3: iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerDistributor;
                            break;
                        default: break;
                    }

                    if (iTypeOfPartner == 0)
                        throw FaultHelper.BusinessFault(null, null, "Loại đối tác không chính xác");
                    var lstExist = model.CUS_Partner.Where(c => c.CustomerID == customerid && c.CAT_Partner.TypeOfPartnerID == iTypeOfPartner).Select(c => c.PartnerID).ToList();

                    var query = model.CAT_Partner.Where(c => c.TypeOfPartnerID == iTypeOfPartner && !lstExist.Contains(c.ID)).Select(c => new DTOCUSPartnerAll
                    {
                        PartnerID = c.ID,
                        PartnerCode = c.Code,
                        TypeOfPartnerID = c.TypeOfPartnerID,
                        TypeOfPartnerName = c.SYS_Var.ValueOfVar,
                        GroupOfPartnerCode = c.CAT_GroupOfPartner != null ? c.CAT_GroupOfPartner.Code : string.Empty,
                        GroupOfPartnerID = c.CAT_GroupOfPartner != null ? c.CAT_GroupOfPartner.ID : 0,
                        GroupOfPartnerName = c.CAT_GroupOfPartner != null ? c.CAT_GroupOfPartner.GroupName : string.Empty,
                        CATCode = c.Code,
                        CATName = c.PartnerName,
                        CountryName = c.CAT_Country.CountryName,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        WardName = c.WardID != null ? c.CAT_Ward.WardName : string.Empty,
                        Address = c.Address,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSPartnerAll>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<int> Partner_SaveList(List<DTOCUSPartnerAll> lst)
        {
            try
            {
                var result = new List<int>();
                int customerid = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    result = HelperRouting.CUSPartner_SaveList(model, Account, lst, customerid);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Partner_Delete(int cuspartnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUSPartner_Delete(model, Account, cuspartnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int Partner_Save(DTOCUSPartnerAllCustom item, int typeOfPartner)
        {
            try
            {
                //1: seaport, 2: carrier, 3: distributor
                int customerid = Account.SYSCustomerID;
                int sysTypePartner = -1;
                int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                int iSeaport = -(int)SYSVarType.TypeOfPartnerSeaPort;
                int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;
                switch (typeOfPartner)
                {
                    case 1: sysTypePartner = iSeaport; break;
                    case 2: sysTypePartner = iCarrier; break;
                    case 3: sysTypePartner = iDistributor; break;
                    default:
                        break;
                }
                if (sysTypePartner == -1)
                    throw FaultHelper.BusinessFault(null, null, "Loại đối tác không chính xác");
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CUSPartner_Save(model, Account, item, customerid, sysTypePartner);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult PartnerLocation_List(string request, int cuspartnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var partner = model.CUS_Partner.FirstOrDefault(c => c.ID == cuspartnerid);
                    if (partner != null)
                    {
                        var query = model.CAT_PartnerLocation.Where(c => c.PartnerID == partner.PartnerID).Select(c => new DTOCUSLocation
                        {
                            ID = -1,
                            LocationID = c.LocationID,
                            LocationName = string.Empty,
                            CountryName = c.CAT_Location.CAT_Country.CountryName,
                            WardName = c.CAT_Location.WardID != null ? c.CAT_Location.CAT_Ward.WardName : string.Empty,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            Address = c.CAT_Location.Address,
                            Lng = c.CAT_Location.Lng,
                            Lat = c.CAT_Location.Lat,
                            Code = string.Empty,
                            CountryID = c.CAT_Location.CountryID,
                            ProvinceID = c.CAT_Location.ProvinceID,
                            DistrictID = c.CAT_Location.DistrictID,
                            CATLocationCode = c.CAT_Location.Code,
                            CATLocationName = c.CAT_Location.Location,
                            GroupOfLocationName = c.CAT_Location.GroupOfLocationID > 0 ? c.CAT_Location.CAT_GroupOfLocation.GroupName : string.Empty,
                            StatusAddressSearch = 0,
                            Note = c.CAT_Location.Note,
                            Note1 = c.CAT_Location.Note1,
                        }).ToDataSourceResult(CreateRequest(request));

                        var data = query.Data as IEnumerable<DTOCUSLocation>;

                        var lstCUSLocation = model.CUS_Location.Where(c => c.CusPartID == cuspartnerid).ToList();
                        foreach (var item in data)
                        {
                            var obj = lstCUSLocation.FirstOrDefault(c => c.LocationID == item.LocationID);
                            if (obj != null)
                            {
                                item.ID = obj.ID;
                                item.Code = obj.Code;
                                item.LocationName = obj.LocationName;
                                if (model.CUS_Location.Count(c => c.LocationID == item.LocationID && c.CustomerID != partner.CustomerID) == 0)
                                    item.IsEditable = true;
                            }
                        }
                        result.Data = data;
                        result.Total = query.Total;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCUSLocation> PartnerLocation_SaveList(List<DTOCUSLocation> lst, int cuspartnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CUStomer_PartnerLocation_SaveList(model, Account, lst, cuspartnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult PartnerLocation_NotInList(string request, int cuspartnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var partner = model.CUS_Partner.FirstOrDefault(c => c.ID == cuspartnerid);
                    if (partner != null)
                    {
                        var query = model.CAT_Location.Where(c => c.ID > 1).Select(c => new DTOCUSLocation
                        {
                            ID = c.ID,
                            LocationID = c.ID,
                            LocationName = string.Empty,
                            CountryName = c.CAT_Country.CountryName,
                            WardName = c.WardID != null ? c.CAT_Ward.WardName : string.Empty,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                            Address = c.Address,
                            Lng = c.Lng,
                            Lat = c.Lat,
                            Code = c.Code,
                            CountryID = c.CountryID,
                            ProvinceID = c.ProvinceID,
                            DistrictID = c.DistrictID,
                            CATLocationCode = c.Code,
                            CATLocationName = c.Location,
                            GroupOfLocationName = c.GroupOfLocationID.HasValue ? c.CAT_GroupOfLocation.GroupName : string.Empty,
                            Note = c.Note,
                            Note1 = c.Note1,
                        }).ToDataSourceResult(CreateRequest(request));

                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCUSLocation>;
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<int> PartnerLocation_SaveNotinList(List<int> lst, int cuspartnerid)
        {
            try
            {
                var result = new List<int>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUStomer_PartnerLocation_NotInSaveList(model, Account, lst, cuspartnerid);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPartnerLocation PartnerLocation_Save(DTOCUSPartnerLocation item, int cuspartnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CUStomer_PartnerLocation_Save(model, Account, item, cuspartnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPartnerLocation PartnerLocation_Get(int id)
        {
            try
            {
                var result = new DTOCUSPartnerLocation();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var obj = model.CUS_Location.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.LocationID = obj.LocationID;
                            result.Code = obj.Code;
                            result.Location = obj.LocationName;
                            result.Address = obj.CAT_Location.Address;
                            result.WardID = obj.CAT_Location.WardID;
                            result.DistrictID = obj.CAT_Location.DistrictID;
                            result.ProvinceID = obj.CAT_Location.ProvinceID;
                            result.CountryID = obj.CAT_Location.CountryID;
                            result.Lat = obj.CAT_Location.Lat;
                            result.Lng = obj.CAT_Location.Lng;
                            result.IsEditable = false;
                            result.GroupOfLocationID = obj.CAT_Location.GroupOfLocationID.HasValue ? obj.CAT_Location.GroupOfLocationID.Value : -1;
                            if (model.CUS_Location.FirstOrDefault(c => c.LocationID == obj.LocationID && c.CustomerID != obj.CustomerID) == null)
                                result.IsEditable = true;
                            result.Note = obj.CAT_Location.Note;
                            result.Note1 = obj.CAT_Location.Note1;
                            result.RoutingAreaCode = obj.RoutingAreaCode;
                            result.ApplyForAllCarrier = false;
                            result.ApplyForAllSeaport = false;
                        }
                    }
                    else
                    {
                        result.ID = 0;
                        var objC = model.CAT_Country.FirstOrDefault();
                        result.CountryID = 0;
                        if (objC != null) result.CountryID = objC.ID;
                        var objP = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        result.ProvinceID = 0;
                        if (objP != null) result.ProvinceID = objP.ID;
                        var objD = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        result.DistrictID = 0;
                        if (objP != null) result.DistrictID = objD.ID;
                        result.GroupOfLocationID = -1;
                        result.ApplyForAllCarrier = false;
                        result.ApplyForAllSeaport = false;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void PartnerLocation_DeleteList(List<DTOCUSLocation> lst)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUStomer_PartnerLocation_DeleteList(model, Account, lst);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void PartnerLocation_Delete(DTOCUSLocation item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUStomer_PartnerLocation_Delete(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public List<DTOPartnerLocation_Excel> PartnerLocation_Export(bool isCarrier, bool isSeaport, bool isDistributor)
        {
            try
            {
                int customerID = Account.SYSCustomerID;
                int iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerDistributor;
                if (isCarrier)
                    iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerCarrier;
                if (isSeaport)
                    iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerSeaPort;

                List<DTOPartnerLocation_Excel> result = new List<DTOPartnerLocation_Excel>();
                using (var model = new DataEntities())
                {
                    var ListCUSRouting = model.CUS_Routing.Where(c => c.CustomerID == customerID);
                    var lstRoutingAreaID = ListCUSRouting.Where(c => c.CAT_Routing.RoutingAreaFromID > 0).Select(c => c.CAT_Routing.RoutingAreaFromID.Value).Distinct().ToList();
                    lstRoutingAreaID.AddRange(ListCUSRouting.Where(c => c.CAT_Routing.RoutingAreaToID > 0).Select(c => c.CAT_Routing.RoutingAreaToID.Value).Distinct().ToList());
                    var lstRoutingAreaLocation = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == -1).Select(c => new { c.CAT_RoutingArea.Code, c.CAT_RoutingArea.AreaName, c.LocationID }).ToList();
                    if (lstRoutingAreaID.Count > 0)
                        lstRoutingAreaLocation = model.CAT_RoutingAreaLocation.Where(c => lstRoutingAreaID.Contains(c.RoutingAreaID)).Select(c => new { c.CAT_RoutingArea.Code, c.CAT_RoutingArea.AreaName, c.LocationID }).ToList();

                    var lst = model.CUS_Partner.Where(c => c.CAT_Partner.TypeOfPartnerID == iTypeOfPartner && c.CustomerID == customerID);
                    foreach (var partner in lst)
                    {
                        var lstCATLocation = model.CAT_PartnerLocation.Where(c => c.PartnerID == partner.PartnerID).Select(c => new DTOCUSLocation
                        {
                            LocationID = c.LocationID,
                            LocationName = string.Empty,
                            CountryName = c.CAT_Location.CAT_Country.CountryName,
                            WardName = c.CAT_Location.WardID != null ? c.CAT_Location.CAT_Ward.WardName : string.Empty,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            Address = c.CAT_Location.Address,
                            Lng = c.CAT_Location.Lng,
                            Lat = c.CAT_Location.Lat,
                            Code = string.Empty,
                            CountryID = c.CAT_Location.CountryID,
                            ProvinceID = c.CAT_Location.ProvinceID,
                            DistrictID = c.CAT_Location.DistrictID,
                            SysCode = c.CAT_Location.Code,
                            Note = c.CAT_Location.Note,
                            Note1 = c.CAT_Location.Note1
                        }).ToList();

                        var lstCUSLocation = model.CUS_Location.Where(c => c.CusPartID == partner.ID).ToList();
                        if (lstCUSLocation != null && lstCUSLocation.Count() > 0)
                        {
                            foreach (var item in lstCUSLocation)
                            {
                                var obj = lstCATLocation.FirstOrDefault(c => c.LocationID == item.LocationID);
                                if (obj != null)
                                {
                                    obj.ID = item.ID;
                                    obj.Code = item.Code;
                                    obj.LocationName = item.LocationName;
                                }
                                //if (model.CUS_Location.FirstOrDefault(c => c.LocationID == item.LocationID && c.CustomerID != item.CustomerID) == null)
                                //    obj.IsEditable = true;
                            }
                        }
                        foreach (var location in lstCATLocation)
                        {
                            var o = new DTOPartnerLocation_Excel();
                            o.PartnerCode = partner.PartnerCode;
                            o.PartnerName = partner.CAT_Partner.PartnerName;
                            o.PartnerAddress = partner.CAT_Partner.Address;
                            o.PartnerGroupName = partner.CAT_Partner.GroupOfPartnerID.HasValue ? partner.CAT_Partner.CAT_GroupOfPartner.Code : string.Empty;
                            o.LocationCode = location.Code;
                            o.LocationName = location.LocationName;
                            o.LocationAddress = location.Address;
                            o.Lat = location.Lat;
                            o.Lng = location.Lng;
                            o.ProvinceID = location.ProvinceID;
                            o.ProvinceName = location.ProvinceName;
                            o.CountryID = location.CountryID;
                            o.CountryName = location.CountryName;
                            o.DistrictID = location.DistrictID;
                            o.DistrictName = location.DistrictName;
                            o.Note = location.Note;
                            o.Note1 = location.Note1;
                            var queryArea = lstRoutingAreaLocation.Where(c => c.LocationID == location.ID);
                            if (queryArea.Count() > 0)
                            {
                                o.RoutingAreaCode = string.Join(",", queryArea.Select(c => c.Code).Distinct().ToArray());
                                o.RoutingAreaName = string.Join(",", queryArea.Select(c => c.AreaName).Distinct().ToArray());
                            }

                            result.Add(o);
                        }
                    }

                }
                return result;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPartnerLocation_Check PartnerLocation_Check()
        {
            try
            {
                DTOPartnerLocation_Check result = new DTOPartnerLocation_Check();
                int customerID = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    result.lstCatPartner = model.CAT_Partner.Select(c => new CATPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PartnerName = c.PartnerName,
                        TypeOfPartnerID = c.TypeOfPartnerID
                    }).ToList();

                    result.lstPartnerOfCustomer = model.CUS_Partner.Where(c => c.CustomerID == customerID).Select(c => new CUSPartner
                    {
                        ID = c.ID,
                        PartnerCode = c.PartnerCode,
                        PartnerID = c.PartnerID
                    }).ToList();

                    result.lstCatLocation = model.CAT_Location.Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code
                    }).ToList();

                    result.lstLocationOfCustomer = model.CUS_Location.Where(c => c.CustomerID == customerID).Select(c => new CUSLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LocationID = c.LocationID,
                        CusPartID = c.CusPartID,
                    }).ToList();

                    result.lstProvince = model.CAT_Province.Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ProvinceName = c.ProvinceName,
                        CountryID = c.CountryID,
                    }).ToList();

                    result.lstDistrict = model.CAT_District.Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ProvinceID = c.ProvinceID,
                        DistrictName = c.DistrictName,
                    }).ToList();

                    result.lstGroupOfPartner = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                    }).ToList();


                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }

        }
        public List<AddressSearchItem> PartnerLocation_Import(List<DTOPartnerImport> lst, bool isCarrier, bool isSeaport, bool isDistributor)
        {
            try
            {
                List<AddressSearchItem> result = new List<AddressSearchItem>();
                int customerid = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    result = HelperRouting.CUStomer_PartnerLocation_Import(model, Account, lst, customerid, isCarrier, isSeaport, isDistributor);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region excel onl mới
        public SYSExcel FLM_Partner_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int customerid = Account.SYSCustomerID;
                    model.EventAccount = Account; model.EventRunning = true;

                    functionkey = functionkey + customerid;
                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        Dictionary<int, string> dicPartner = new Dictionary<int, string>();
                        dicPartner.Add(-(int)SYSVarType.TypeOfPartnerCarrier, "Carrier");
                        dicPartner.Add(-(int)SYSVarType.TypeOfPartnerSeaPort, "Seaport");
                        dicPartner.Add(-(int)SYSVarType.TypeOfPartnerDistributor, "Distributor");
                        dicPartner.Add(-1, "Stock");

                        var lstPartner = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => new
                        {
                            ID = c.ID,
                            SYSCode = c.CAT_Partner.Code,
                            Code = c.PartnerCode,
                            PartnerName = c.CAT_Partner.PartnerName,
                            c.CAT_Partner.Address,
                            GroupOfPartnerCode = c.CAT_Partner.GroupOfPartnerID > 0 ? c.CAT_Partner.CAT_GroupOfPartner.Code : string.Empty,
                            TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID,
                            ProvinceName = c.CAT_Partner.ProvinceID > 0 ? c.CAT_Partner.CAT_Province.ProvinceName : string.Empty,
                            CountryName = c.CAT_Partner.CountryID > 0 ? c.CAT_Partner.CAT_Country.CountryName : string.Empty,
                            DistrictName = c.CAT_Partner.DistrictID > 0 ? c.CAT_Partner.CAT_District.DistrictName : string.Empty,
                            Fax = c.CAT_Partner.Fax,
                            Email = c.CAT_Partner.Email,
                            TelNo = c.CAT_Partner.TelNo,
                            RateGetEmpty = c.RateGetEmpty,
                            RateReturnEmpty = c.RateReturnEmpty
                        }).OrderBy(c => c.TypeOfPartnerID).ToList();

                        var lstLocation = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new
                        {
                            c.ID,
                            c.LocationID,
                            c.CusPartID,
                            c.Code,
                            c.LocationName,
                            SYSCode = c.CAT_Location.Code,
                            GroupOfLocationCode = c.CAT_Location.GroupOfLocationID > 0 ? c.CAT_Location.CAT_GroupOfLocation.Code : "",
                            c.CAT_Location.Address,
                            ProvinceName = c.CAT_Location.ProvinceID > 0 ? c.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            CountryName = c.CAT_Location.CountryID > 0 ? c.CAT_Location.CAT_Country.CountryName : string.Empty,
                            DistrictName = c.CAT_Location.DistrictID > 0 ? c.CAT_Location.CAT_District.DistrictName : string.Empty,
                            c.CAT_Location.EconomicZone,
                            c.RoutingAreaCode,
                            c.CAT_Location.Lat,
                            c.CAT_Location.Lng
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã đối tác hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã đối tác sử dụng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên đối tác", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Nhóm NPP / địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã địa chỉ hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã địa chỉ sử dụng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tỉnh thành", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Quận/Huyện", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "SĐT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Fax", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Email", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Vùng kinh doanh", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã khu vực", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Kinh độ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Vĩ độ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Hạn lấy rỗng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Hạn trả rỗng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        int stt = 1;
                        foreach (var itemPartner in lstPartner)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            if (dicPartner.ContainsKey(itemPartner.TypeOfPartnerID))
                                cells.Add(HelperExcel.NewCell(col++, dicPartner[itemPartner.TypeOfPartnerID], HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            else
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.SYSCode, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.Code, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.PartnerName, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.GroupOfPartnerCode, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.Address, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.ProvinceName, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.DistrictName, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.TelNo, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.Fax, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.Email, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.RateGetEmpty, HelperExcel.ColorBlack, HelperExcel.ColorYellow, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.RateReturnEmpty, HelperExcel.ColorBlack, HelperExcel.ColorYellow, HelperExcel.FormatNumber2));

                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;

                            foreach (var itemLocation in lstLocation.Where(c => c.CusPartID == itemPartner.ID))
                            {
                                cells = new List<Cell>();
                                col = 0;
                                cells.Add(HelperExcel.NewCell(col++, stt));
                                if (dicPartner.ContainsKey(itemPartner.TypeOfPartnerID))
                                    cells.Add(HelperExcel.NewCell(col++, dicPartner[itemPartner.TypeOfPartnerID]));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, ""));
                                cells.Add(HelperExcel.NewCell(col++, itemPartner.SYSCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemPartner.Code, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemPartner.PartnerName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.GroupOfLocationCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.SYSCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.Code, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.LocationName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.Address, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.ProvinceName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.DistrictName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.EconomicZone, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.RoutingAreaCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemLocation.Lat > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemLocation.Lat.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber5));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemLocation.Lng > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemLocation.Lng.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber5));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));

                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                                stt++;
                            }
                        }

                        if (dicPartner.ContainsKey(-1))
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, dicPartner[-1], HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, dicPartner[-1], HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;

                            foreach (var itemLocation in lstLocation.Where(c => c.CusPartID == null))
                            {
                                cells = new List<Cell>();
                                col = 0;
                                cells.Add(HelperExcel.NewCell(col++, stt));
                                cells.Add(HelperExcel.NewCell(col++, dicPartner[-1]));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.GroupOfLocationCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.SYSCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.Code, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.LocationName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.Address, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.ProvinceName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.DistrictName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.EconomicZone, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.RoutingAreaCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemLocation.Lat > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemLocation.Lat.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber5));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemLocation.Lng > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemLocation.Lng.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber5));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));

                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                                stt++;
                            }
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLM_Partner_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int customerid = Account.SYSCustomerID;
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colTypePartnerID = colData++;
                    int colCATPartnerID = colData++;
                    int colCUSPartnerID = colData++;
                    int colGroupPartnerID = colData++;
                    int colCATLocationID = colData++;
                    int colCUSLocationID = colData++;
                    int colGroupLocationID = colData++;
                    int colProvinceID = colData++;
                    int colDistrictID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    Dictionary<string, int> dicPartner = new Dictionary<string, int>();
                    dicPartner.Add("Carrier", -(int)SYSVarType.TypeOfPartnerCarrier);
                    dicPartner.Add("Seaport", -(int)SYSVarType.TypeOfPartnerSeaPort);
                    dicPartner.Add("Distributor", -(int)SYSVarType.TypeOfPartnerDistributor);
                    dicPartner.Add("Stock", -1);

                    var lstCUSPartnerID = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => new { c.ID, c.PartnerCode }).ToList();
                    var lstCUSLocation = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new { c.ID, c.Code, c.CusPartID, c.LocationID }).ToList();
                    var lstGroupPartnerID = model.CAT_GroupOfPartner.Select(c => new { c.ID, c.Code }).ToList();
                    var lstGroupLocationID = model.CAT_GroupOfLocation.Select(c => new { c.ID, c.Code }).ToList();
                    var lstProvinceID = model.CAT_Province.Select(c => new { c.ID, c.ProvinceName }).ToList();
                    var lstDistrictID = model.CAT_District.Select(c => new { c.ID, c.DistrictName, c.ProvinceID }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    List<string> lstCodeCUS = new List<string>();
                    Dictionary<string, List<string>> dicCodeChild = new Dictionary<string, List<string>>();
                    Dictionary<string, List<string>> dicCodeChildCUS = new Dictionary<string, List<string>>();
                    dicCodeChild.Add("-1", new List<string>());
                    dicCodeChildCUS.Add("-1", new List<string>());
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    int colDataType = 1;
                    int colDataCATPartner = colDataType + 1;
                    int colDataCUSPartner = colDataCATPartner + 1;
                    int colDataCATLocation = colDataType + 5;
                    int colDataCUSLocation = colDataCATLocation + 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            string strType = HelperExcel.GetString(eRow, colDataType);
                            string strCode = HelperExcel.GetString(eRow, colDataCATPartner);
                            string strCodeCUS = HelperExcel.GetString(eRow, colDataCUSPartner);
                            string strCodeChild = HelperExcel.GetString(eRow, colDataCATLocation);
                            string strCodeChildCUS = HelperExcel.GetString(eRow, colDataCUSLocation);
                            if (!string.IsNullOrEmpty(strCode) && string.IsNullOrEmpty(strCodeChild))
                            {
                                if (!lstCode.Contains(strCode)) lstCode.Add(strCode);
                                if (!lstCodeCUS.Contains(strCodeCUS)) lstCodeCUS.Add(strCodeCUS);
                                if (!dicCodeChild.ContainsKey(strCode))
                                    dicCodeChild.Add(strCode, new List<string>());
                                if (!dicCodeChildCUS.ContainsKey(strCode))
                                    dicCodeChildCUS.Add(strCode, new List<string>());
                            }
                            else if (!string.IsNullOrEmpty(strCode) && !string.IsNullOrEmpty(strCodeChild))
                            {
                                if (!lstCode.Contains(strCode))
                                {
                                    lstCode.Add(strCode);
                                    lstCodeCUS.Add(strCodeCUS);

                                    if (!dicCodeChild.ContainsKey(strCode))
                                        dicCodeChild.Add(strCode, new List<string>());
                                    if (!dicCodeChildCUS.ContainsKey(strCode))
                                        dicCodeChildCUS.Add(strCode, new List<string>());
                                }
                                else
                                {
                                    dicCodeChild[strCode].Add(strCodeChild);
                                    dicCodeChildCUS[strCode].Add(strCodeChildCUS);
                                }
                            }
                            else if (dicPartner.ContainsKey(strType) && !string.IsNullOrEmpty(strCodeChild))
                            {
                                dicCodeChild["-1"].Add(strCodeChild);
                                dicCodeChildCUS["-1"].Add(strCodeChildCUS);
                            }
                            else if (failCurrent >= failMax)
                            {
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataTypePartner = HelperExcel.GetString(checkRow, colData++);
                        string dataCATPartner = HelperExcel.GetString(checkRow, colData++);
                        string dataCUSPartner = HelperExcel.GetString(checkRow, colData++);
                        string dataPartnerName = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATLocation = HelperExcel.GetString(checkRow, colData++);
                        string dataCUSLocation = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                        string dataAddress = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict = HelperExcel.GetString(checkRow, colData++);
                        string dataTelNo = HelperExcel.GetString(checkRow, colData++);
                        string dataFax = HelperExcel.GetString(checkRow, colData++);
                        string dataEmail = HelperExcel.GetString(checkRow, colData++);
                        string dataEconomicZone = HelperExcel.GetString(checkRow, colData++);
                        string dataRoutingAreaCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLat = HelperExcel.GetString(checkRow, colData++);
                        string dataLng = HelperExcel.GetString(checkRow, colData++);
                        string dataRateGetEmpty = HelperExcel.GetString(checkRow, colData++);
                        string dataRateReturnEmpty = HelperExcel.GetString(checkRow, colData++);

                        HelperExcel.SetString(checkRow, colCATPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colCUSPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colGroupPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colCATLocationID, "-1");
                        HelperExcel.SetString(checkRow, colCUSLocationID, "-1");
                        HelperExcel.SetString(checkRow, colGroupLocationID, "-1");
                        HelperExcel.SetString(checkRow, colProvinceID, "-1");
                        HelperExcel.SetString(checkRow, colDistrictID, "-1");
                        int cuspartnerid = -1;
                        int catlocationid = -1;

                        bool flag = true;
                        int provinceid = -1;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypePartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !dicPartner.ContainsKey(dataTypePartner))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = dicPartner[dataTypePartner].ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTypePartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataCATPartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && dicPartner[dataTypePartner] < 0)
                            dataCATPartner = dicPartner[dataTypePartner].ToString();
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0 && lstCode.Where(c => c == dataCATPartner).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && dicPartner[dataTypePartner] > 0)
                        {
                            var valid = "-1";
                            var objID = model.CAT_Partner.Where(c => c.Code == dataCATPartner).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATPartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataCUSPartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0 && lstCodeCUS.Where(c => c == dataCUSPartner).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && dicPartner[dataTypePartner] > 0)
                        {
                            var valid = "-1";
                            var objID = lstCUSPartnerID.Where(c => c.PartnerCode == dataCUSPartner).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            cuspartnerid = Convert.ToInt32(valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSPartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataPartnerName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 1000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupCode))
                        {
                            if (string.IsNullOrEmpty(dataCATLocation))
                            {
                                if (flag && dicPartner[dataTypePartner] > 0 && lstGroupPartnerID.Where(c => c.Code == dataGroupCode).Count() == 0)
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    flag = false;
                                }
                                if (flag && dicPartner[dataTypePartner] > 0)
                                {
                                    var valid = "-1";
                                    var objID = lstGroupPartnerID.Where(c => c.Code == dataGroupCode).Select(c => new { c.ID }).FirstOrDefault();
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupPartnerID, valid);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupLocationID, "-1");
                                }
                            }
                            else
                            {
                                if (flag && lstGroupLocationID.Where(c => c.Code == dataGroupCode).Count() == 0)
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    flag = false;
                                }
                                if (flag)
                                {
                                    var valid = "-1";
                                    var objID = lstGroupLocationID.Where(c => c.Code == dataGroupCode).Select(c => new { c.ID }).FirstOrDefault();
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupPartnerID, "-1");
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupLocationID, valid);
                                }
                            }
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation) && dicCodeChild[dataCATPartner].Where(c => c == dataCATLocation).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                        {
                            var valid = "-1";
                            var objID = model.CAT_Location.Where(c => c.Code == dataCATLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            catlocationid = Convert.ToInt32(valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATLocationID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCUSLocation) && dicCodeChildCUS[dataCATPartner].Where(c => c == dataCUSLocation).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataCUSLocation))
                        {
                            var valid = "-1";
                            var objID = lstCUSLocation.Where(c => c.CusPartID == cuspartnerid && c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (cuspartnerid < 1)
                                objID = lstCUSLocation.Where(c => c.CusPartID == null && c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            else if (cuspartnerid < 1)
                            {
                                objID = lstCUSLocation.Where(c => c.CusPartID == null && c.LocationID == catlocationid).Select(c => new { c.ID }).FirstOrDefault();
                                if (objID != null)
                                    valid = objID.ID.ToString();
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSLocationID, valid);
                        }
                        //if (flag && !string.IsNullOrEmpty(dataCUSLocation))
                        //{
                        //    var valid = "-1";
                        //    var objID = lstCUSLocation.Where(c => c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                        //    if (objID != null)
                        //        valid = objID.ID.ToString();
                        //    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSLocationID, valid);
                        //}
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLocationName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataAddress, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataProvince, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProvince) && lstProvinceID.Where(c => c.ProvinceName == dataProvince).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataProvince))
                        {
                            var valid = "-1";
                            var objID = lstProvinceID.Where(c => c.ProvinceName == dataProvince).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                            {
                                provinceid = objID.ID;
                                valid = objID.ID.ToString();
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colProvinceID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataDistrict, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataDistrict) && provinceid > 0 && lstDistrictID.Where(c => c.ProvinceID == provinceid && c.DistrictName == dataDistrict).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataDistrict) && provinceid > 0)
                        {
                            var valid = "-1";
                            var objID = lstDistrictID.Where(c => c.ProvinceID == provinceid && c.DistrictName == dataDistrict).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDistrictID, valid);
                        }
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataTelNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataFax, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataEmail, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataEconomicZone, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataRoutingAreaCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 1000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLat, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLng, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataRateGetEmpty, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataRateReturnEmpty, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLM_Partner_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int customerid = Account.SYSCustomerID;
                    int rowStart = 1;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colTypePartnerID = colData++;
                    int colCATPartnerID = colData++;
                    int colCUSPartnerID = colData++;
                    int colGroupPartnerID = colData++;
                    int colCATLocationID = colData++;
                    int colCUSLocationID = colData++;
                    int colGroupLocationID = colData++;
                    int colProvinceID = colData++;
                    int colDistrictID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    Dictionary<string, int> dicPartner = new Dictionary<string, int>();
                    dicPartner.Add("Carrier", -(int)SYSVarType.TypeOfPartnerCarrier);
                    dicPartner.Add("Seaport", -(int)SYSVarType.TypeOfPartnerSeaPort);
                    dicPartner.Add("Distributor", -(int)SYSVarType.TypeOfPartnerDistributor);
                    dicPartner.Add("Stock", -1);

                    var lstCUSPartnerID = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => new { c.ID, c.PartnerCode }).ToList();
                    var lstCUSLocation = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new { c.ID, c.Code, c.CusPartID, c.LocationID }).ToList();
                    var lstGroupPartnerID = model.CAT_GroupOfPartner.Select(c => new { c.ID, c.Code }).ToList();
                    var lstGroupLocationID = model.CAT_GroupOfLocation.Select(c => new { c.ID, c.Code }).ToList();
                    var lstProvinceID = model.CAT_Province.Select(c => new { c.ID, c.ProvinceName }).ToList();
                    var lstDistrictID = model.CAT_District.Select(c => new { c.ID, c.DistrictName, c.ProvinceID }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();
                    List<string> lstCodeCUS = new List<string>();
                    Dictionary<string, List<string>> dicCodeChild = new Dictionary<string, List<string>>();
                    Dictionary<string, List<string>> dicCodeChildCUS = new Dictionary<string, List<string>>();
                    dicCodeChild.Add("-1", new List<string>());
                    dicCodeChildCUS.Add("-1", new List<string>());

                    failCurrent = 0;
                    int colDataType = 1;
                    int colDataCATPartner = colDataType + 1;
                    int colDataCUSPartner = colDataCATPartner + 1;
                    int colDataCATLocation = colDataType + 5;
                    int colDataCUSLocation = colDataCATLocation + 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            string strType = HelperExcel.GetString(eRow, colDataType);
                            string strCode = HelperExcel.GetString(eRow, colDataCATPartner);
                            string strCodeCUS = HelperExcel.GetString(eRow, colDataCUSPartner);
                            string strCodeChild = HelperExcel.GetString(eRow, colDataCATLocation);
                            string strCodeChildCUS = HelperExcel.GetString(eRow, colDataCUSLocation);
                            if (!string.IsNullOrEmpty(strCode) && string.IsNullOrEmpty(strCodeChild))
                            {
                                if (!lstCode.Contains(strCode)) lstCode.Add(strCode);
                                if (!lstCodeCUS.Contains(strCodeCUS)) lstCodeCUS.Add(strCodeCUS);
                                if (!dicCodeChild.ContainsKey(strCode))
                                    dicCodeChild.Add(strCode, new List<string>());
                                if (!dicCodeChildCUS.ContainsKey(strCode))
                                    dicCodeChildCUS.Add(strCode, new List<string>());
                            }
                            else if (!string.IsNullOrEmpty(strCode) && !string.IsNullOrEmpty(strCodeChild))
                            {
                                if (!lstCode.Contains(strCode))
                                {
                                    lstCode.Add(strCode);
                                    lstCodeCUS.Add(strCodeCUS);

                                    if (!dicCodeChild.ContainsKey(strCode))
                                        dicCodeChild.Add(strCode, new List<string>());
                                    if (!dicCodeChildCUS.ContainsKey(strCode))
                                        dicCodeChildCUS.Add(strCode, new List<string>());
                                }
                                else
                                {
                                    dicCodeChild[strCode].Add(strCodeChild);
                                    dicCodeChildCUS[strCode].Add(strCodeChildCUS);
                                }
                            }
                            else if (dicPartner.ContainsKey(strType) && !string.IsNullOrEmpty(strCodeChild))
                            {
                                dicCodeChild["-1"].Add(strCodeChild);
                                dicCodeChildCUS["-1"].Add(strCodeChildCUS);
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataTypePartner = HelperExcel.GetString(checkRow, colData++);
                        string dataCATPartner = HelperExcel.GetString(checkRow, colData++);
                        string dataCUSPartner = HelperExcel.GetString(checkRow, colData++);
                        string dataPartnerName = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATLocation = HelperExcel.GetString(checkRow, colData++);
                        string dataCUSLocation = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                        string dataAddress = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict = HelperExcel.GetString(checkRow, colData++);
                        string dataTelNo = HelperExcel.GetString(checkRow, colData++);
                        string dataFax = HelperExcel.GetString(checkRow, colData++);
                        string dataEmail = HelperExcel.GetString(checkRow, colData++);
                        string dataEconomicZone = HelperExcel.GetString(checkRow, colData++);
                        string dataRoutingAreaCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLat = HelperExcel.GetString(checkRow, colData++);
                        string dataLng = HelperExcel.GetString(checkRow, colData++);
                        string dataRateGetEmpty = HelperExcel.GetString(checkRow, colData++);
                        string dataRateReturnEmpty = HelperExcel.GetString(checkRow, colData++);

                        HelperExcel.SetString(checkRow, colCATPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colCUSPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colGroupPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colCATLocationID, "-1");
                        HelperExcel.SetString(checkRow, colCUSLocationID, "-1");
                        HelperExcel.SetString(checkRow, colGroupLocationID, "-1");
                        HelperExcel.SetString(checkRow, colProvinceID, "-1");
                        HelperExcel.SetString(checkRow, colDistrictID, "-1");
                        int cuspartnerid = -1;
                        int catlocationid = -1;

                        bool flag = true;
                        int provinceid = -1;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypePartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !dicPartner.ContainsKey(dataTypePartner))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = dicPartner[dataTypePartner].ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTypePartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataCATPartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && dicPartner[dataTypePartner] < 0)
                            dataCATPartner = dicPartner[dataTypePartner].ToString();
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0 && lstCode.Where(c => c == dataCATPartner).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && dicPartner[dataTypePartner] > 0)
                        {
                            var valid = "-1";
                            var objID = model.CAT_Partner.Where(c => c.Code == dataCATPartner).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATPartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataCUSPartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0 && lstCodeCUS.Where(c => c == dataCUSPartner).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && dicPartner[dataTypePartner] > 0)
                        {
                            var valid = "-1";
                            var objID = lstCUSPartnerID.Where(c => c.PartnerCode == dataCUSPartner).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            cuspartnerid = Convert.ToInt32(valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSPartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataPartnerName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 1000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupCode))
                        {
                            if (string.IsNullOrEmpty(dataCATLocation))
                            {
                                if (flag && dicPartner[dataTypePartner] > 0 && lstGroupPartnerID.Where(c => c.Code == dataGroupCode).Count() == 0)
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    flag = false;
                                }
                                if (flag && dicPartner[dataTypePartner] > 0)
                                {
                                    var valid = "-1";
                                    var objID = lstGroupPartnerID.Where(c => c.Code == dataGroupCode).Select(c => new { c.ID }).FirstOrDefault();
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupPartnerID, valid);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupLocationID, "-1");
                                }
                            }
                            else
                            {
                                if (flag && lstGroupLocationID.Where(c => c.Code == dataGroupCode).Count() == 0)
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    flag = false;
                                }
                                if (flag)
                                {
                                    var valid = "-1";
                                    var objID = lstGroupLocationID.Where(c => c.Code == dataGroupCode).Select(c => new { c.ID }).FirstOrDefault();
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupPartnerID, "-1");
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupLocationID, valid);
                                }
                            }
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation) && dicCodeChild[dataCATPartner].Where(c => c == dataCATLocation).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                        {
                            var valid = "-1";
                            var objID = model.CAT_Location.Where(c => c.Code == dataCATLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            catlocationid = Convert.ToInt32(valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATLocationID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCUSLocation) && dicCodeChildCUS[dataCATPartner].Where(c => c == dataCUSLocation).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataCUSLocation))
                        {
                            var valid = "-1";
                            var objID = lstCUSLocation.Where(c => c.CusPartID == cuspartnerid && c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (cuspartnerid < 1)
                                objID = lstCUSLocation.Where(c => c.CusPartID == null && c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            else if (cuspartnerid < 1)
                            {
                                objID = lstCUSLocation.Where(c => c.CusPartID == null && c.LocationID == catlocationid).Select(c => new { c.ID }).FirstOrDefault();
                                if (objID != null)
                                    valid = objID.ID.ToString();
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSLocationID, valid);
                        }
                        //if (flag && !string.IsNullOrEmpty(dataCUSLocation))
                        //{
                        //    var valid = "-1";
                        //    var objID = lstCUSLocation.Where(c => c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                        //    if (objID != null)
                        //        valid = objID.ID.ToString();
                        //    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSLocationID, valid);
                        //}
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLocationName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataAddress, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataProvince, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProvince) && lstProvinceID.Where(c => c.ProvinceName == dataProvince).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataProvince))
                        {
                            var valid = "-1";
                            var objID = lstProvinceID.Where(c => c.ProvinceName == dataProvince).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                            {
                                provinceid = objID.ID;
                                valid = objID.ID.ToString();
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colProvinceID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataDistrict, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataDistrict) && provinceid > 0 && lstDistrictID.Where(c => c.ProvinceID == provinceid && c.DistrictName == dataDistrict).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataDistrict) && provinceid > 0)
                        {
                            var valid = "-1";
                            var objID = lstDistrictID.Where(c => c.ProvinceID == provinceid && c.DistrictName == dataDistrict).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDistrictID, valid);
                        }
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataTelNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataFax, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataEmail, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataEconomicZone, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataRoutingAreaCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 1000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLat, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLng, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataRateGetEmpty, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataRateReturnEmpty, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLM_Partner_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int customerid = Account.SYSCustomerID;
                    int rowStart = 1;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colTypePartnerID = colData++;
                    int colCATPartnerID = colData++;
                    int colCUSPartnerID = colData++;
                    int colGroupPartnerID = colData++;
                    int colCATLocationID = colData++;
                    int colCUSLocationID = colData++;
                    int colGroupLocationID = colData++;
                    int colProvinceID = colData++;
                    int colDistrictID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        Dictionary<string, int> dicCATPartner = new Dictionary<string, int>();
                        Dictionary<string, int> dicCUSPartner = new Dictionary<string, int>();
                        Dictionary<string, int> dicCATLocation = new Dictionary<string, int>();
                        //Import partner and update code
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataTypePartner = HelperExcel.GetString(checkRow, colData++);
                            string dataCATPartner = HelperExcel.GetString(checkRow, colData++);
                            string dataCUSPartner = HelperExcel.GetString(checkRow, colData++);
                            string dataPartnerName = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                            string dataCATLocation = HelperExcel.GetString(checkRow, colData++);
                            string dataCUSLocation = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                            string dataAddress = HelperExcel.GetString(checkRow, colData++);
                            string dataProvince = HelperExcel.GetString(checkRow, colData++);
                            string dataDistrict = HelperExcel.GetString(checkRow, colData++);
                            string dataTelNo = HelperExcel.GetString(checkRow, colData++);
                            string dataFax = HelperExcel.GetString(checkRow, colData++);
                            string dataEmail = HelperExcel.GetString(checkRow, colData++);
                            string dataEconomicZone = HelperExcel.GetString(checkRow, colData++);
                            string dataRoutingAreaCode = HelperExcel.GetString(checkRow, colData++);
                            string dataLat = HelperExcel.GetString(checkRow, colData++);
                            string dataLng = HelperExcel.GetString(checkRow, colData++);
                            string dataRateGetEmpty = HelperExcel.GetString(checkRow, colData++);
                            string dataRateReturnEmpty = HelperExcel.GetString(checkRow, colData++);

                            int? typepartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colTypePartnerID));
                            int? catpartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCATPartnerID));
                            int? cuspartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCUSPartnerID));
                            int? grouppartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupPartnerID));
                            int? provinceid = Convert.ToInt32(HelperExcel.GetString(checkRow, colProvinceID));
                            int? districtid = Convert.ToInt32(HelperExcel.GetString(checkRow, colDistrictID));
                            int? catlocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCATLocationID));
                            int? grouplocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupLocationID));

                            if (typepartnerid > 0 && !dicCATPartner.ContainsKey(dataCATPartner))
                            {
                                var objCAT = model.CAT_Partner.FirstOrDefault(c => c.ID == catpartnerid);
                                if (objCAT == null)
                                {
                                    objCAT = new CAT_Partner();
                                    objCAT.CreatedBy = Account.UserName;
                                    objCAT.CreatedDate = DateTime.Now;
                                    objCAT.Code = dataCATPartner;
                                    objCAT.TypeOfPartnerID = typepartnerid.Value;
                                    objCAT.CountryID = DefaultCountry;
                                    model.CAT_Partner.Add(objCAT);
                                }
                                else
                                {
                                    objCAT.CreatedBy = Account.UserName;
                                    objCAT.CreatedDate = DateTime.Now;
                                }
                                objCAT.PartnerName = dataPartnerName;
                                if (grouppartnerid > 0)
                                    objCAT.GroupOfPartnerID = grouppartnerid;
                                else
                                    objCAT.GroupOfPartnerID = null;
                                objCAT.Address = dataAddress;
                                if (provinceid > 0)
                                    objCAT.ProvinceID = provinceid;
                                else
                                    objCAT.ProvinceID = null;
                                if (districtid > 0)
                                    objCAT.DistrictID = districtid;
                                else
                                    objCAT.DistrictID = null;
                                objCAT.TelNo = dataTelNo;
                                objCAT.Fax = dataFax;
                                objCAT.Email = dataEmail;

                                var objCUS = model.CUS_Partner.FirstOrDefault(c => c.ID == cuspartnerid);
                                if (objCUS == null)
                                {
                                    objCUS = new CUS_Partner();
                                    objCUS.CreatedBy = Account.UserName;
                                    objCUS.CreatedDate = DateTime.Now;
                                    objCUS.PartnerCode = dataCUSPartner;
                                    objCUS.CustomerID = customerid;
                                    objCUS.CAT_Partner = objCAT;
                                    model.CUS_Partner.Add(objCUS);
                                }
                                else
                                {
                                    objCUS.CreatedBy = Account.UserName;
                                    objCUS.CreatedDate = DateTime.Now;
                                }
                                if (!string.IsNullOrEmpty(dataRateGetEmpty))
                                    objCUS.RateGetEmpty = Convert.ToDouble(dataRateGetEmpty);
                                else
                                    objCUS.RateGetEmpty = null;
                                if (!string.IsNullOrEmpty(dataRateReturnEmpty))
                                    objCUS.RateReturnEmpty = Convert.ToDouble(dataRateReturnEmpty);
                                else
                                    objCUS.RateReturnEmpty = null;

                                model.SaveChanges();

                                dicCATPartner.Add(dataCATPartner, objCAT.ID);
                                dicCUSPartner.Add(dataCUSPartner, objCUS.ID);
                            }

                            if (!string.IsNullOrEmpty(dataCATLocation) && !dicCATLocation.ContainsKey(dataCATLocation))
                            {
                                var objCAT = model.CAT_Location.FirstOrDefault(c => c.ID == catlocationid);
                                if (objCAT == null)
                                {
                                    objCAT = new CAT_Location();
                                    objCAT.CreatedBy = Account.UserName;
                                    objCAT.CreatedDate = DateTime.Now;
                                    objCAT.Code = dataCATLocation;
                                    objCAT.Location = dataCATLocation;
                                    objCAT.CountryID = DefaultCountry;
                                    objCAT.IsChecked = false;
                                    model.CAT_Location.Add(objCAT);
                                }
                                else
                                {
                                    objCAT.CreatedBy = Account.UserName;
                                    objCAT.CreatedDate = DateTime.Now;
                                }
                                objCAT.Location = dataLocationName;
                                objCAT.Address = dataAddress;
                                objCAT.ProvinceID = provinceid.Value;
                                objCAT.DistrictID = districtid.Value;
                                objCAT.EconomicZone = dataEconomicZone;
                                if (grouplocationid > 0)
                                    objCAT.GroupOfLocationID = grouplocationid.Value;
                                else
                                    objCAT.GroupOfLocationID = null;
                                if (!string.IsNullOrEmpty(dataLat))
                                    objCAT.Lat = Convert.ToDouble(dataLat);
                                else
                                    objCAT.Lat = null;
                                if (!string.IsNullOrEmpty(dataLng))
                                    objCAT.Lng = Convert.ToDouble(dataLng);
                                else
                                    objCAT.Lng = null;

                                model.SaveChanges();

                                dicCATLocation.Add(dataCATLocation, objCAT.ID);
                            }
                        }

                        //Import location
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataTypePartner = HelperExcel.GetString(checkRow, colData++);
                            string dataCATPartner = HelperExcel.GetString(checkRow, colData++);
                            string dataCUSPartner = HelperExcel.GetString(checkRow, colData++);
                            string dataPartnerName = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                            string dataCATLocation = HelperExcel.GetString(checkRow, colData++);
                            string dataCUSLocation = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                            string dataAddress = HelperExcel.GetString(checkRow, colData++);
                            string dataProvince = HelperExcel.GetString(checkRow, colData++);
                            string dataDistrict = HelperExcel.GetString(checkRow, colData++);
                            string dataTelNo = HelperExcel.GetString(checkRow, colData++);
                            string dataFax = HelperExcel.GetString(checkRow, colData++);
                            string dataEmail = HelperExcel.GetString(checkRow, colData++);
                            string dataEconomicZone = HelperExcel.GetString(checkRow, colData++);
                            string dataRoutingAreaCode = HelperExcel.GetString(checkRow, colData++);
                            string dataLat = HelperExcel.GetString(checkRow, colData++);
                            string dataLng = HelperExcel.GetString(checkRow, colData++);
                            string dataRateGetEmpty = HelperExcel.GetString(checkRow, colData++);
                            string dataRateReturnEmpty = HelperExcel.GetString(checkRow, colData++);

                            int? typepartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colTypePartnerID));
                            int? grouplocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupLocationID));
                            int? provinceid = Convert.ToInt32(HelperExcel.GetString(checkRow, colProvinceID));
                            int? districtid = Convert.ToInt32(HelperExcel.GetString(checkRow, colDistrictID));
                            int? catlocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCATLocationID));
                            int? cuslocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCUSLocationID));

                            if (dicCATLocation.ContainsKey(dataCATLocation) && ((typepartnerid > 0 && dicCUSPartner.ContainsKey(dataCUSPartner)) || typepartnerid < 1))
                            {
                                int catpartnerid = -1;
                                if (typepartnerid > 0 && dicCATPartner.ContainsKey(dataCATPartner))
                                    catpartnerid = dicCATPartner[dataCATPartner];
                                catlocationid = dicCATLocation[dataCATLocation];
                                if (catpartnerid > 0 && catlocationid > 0 && model.CAT_PartnerLocation.Where(c => c.PartnerID == catpartnerid && c.LocationID == catlocationid.Value).Count() == 0)
                                {
                                    var objPartnerLocation = new CAT_PartnerLocation();
                                    objPartnerLocation.PartnerID = catpartnerid;
                                    objPartnerLocation.LocationID = catlocationid.Value;
                                    objPartnerLocation.PartnerCode = dataCATPartner;
                                    objPartnerLocation.CreatedBy = Account.UserName;
                                    objPartnerLocation.CreatedDate = DateTime.Now;
                                    model.CAT_PartnerLocation.Add(objPartnerLocation);
                                }

                                if (catlocationid > 0)
                                {
                                    var objCUS = model.CUS_Location.FirstOrDefault(c => c.ID == cuslocationid);
                                    if (objCUS == null)
                                    {
                                        objCUS = new CUS_Location();
                                        objCUS.CreatedBy = Account.UserName;
                                        objCUS.CreatedDate = DateTime.Now;
                                        objCUS.CustomerID = customerid;
                                        model.CUS_Location.Add(objCUS);
                                    }
                                    else
                                    {
                                        objCUS.CreatedBy = Account.UserName;
                                        objCUS.CreatedDate = DateTime.Now;
                                    }
                                    objCUS.Code = dataCUSLocation;
                                    objCUS.LocationName = dataLocationName;
                                    objCUS.LocationID = catlocationid.Value;
                                    if (typepartnerid > 0)
                                        objCUS.CusPartID = dicCUSPartner[dataCUSPartner];
                                    else
                                        objCUS.CusPartID = null;
                                    objCUS.RoutingAreaCode = dataRoutingAreaCode;
                                    if (!string.IsNullOrEmpty(dataRoutingAreaCode))
                                        objCUS.RoutingAreaCodeNoUnicode = HelperString.RemoveSign4VietnameseString(dataRoutingAreaCode);
                                }
                            }
                        }
                        model.SaveChanges();

                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        public List<DTOCUSPartnerLocationAll> FLM_Partner_List(List<int> lstPartnerFilter, List<int> lstLocationFilter, bool isUseLocation)
        {
            try
            {
                List<DTOCUSPartnerLocationAll> result = new List<DTOCUSPartnerLocationAll>();
                using (var model = new DataEntities())
                {
                    int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;
                    int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                    int customerid = Account.SYSCustomerID;
                    var lstCUSPartnerID = new List<int>();
                    var lstCATLocationID = new List<int>();
                    if (lstPartnerFilter != null && lstPartnerFilter.Count > 0)
                    {
                        lstCUSPartnerID.AddRange(lstPartnerFilter);
                    }
                    if (lstLocationFilter != null && lstLocationFilter.Count > 0)
                    {
                        var lstPartnerID = model.CUS_Location.Where(c => c.CustomerID == customerid && c.CusPartID > 0 && lstLocationFilter.Contains(c.ID)).Select(c => c.CusPartID.Value).Distinct().ToList();
                        if (lstPartnerID.Count > 0)
                            lstCUSPartnerID.AddRange(lstPartnerID);
                        if (!lstCUSPartnerID.Contains(-1) && model.CUS_Location.Where(c => c.CustomerID == customerid && c.CusPartID == null && lstLocationFilter.Contains(c.ID)).Count() > 0)
                            lstCUSPartnerID.Add(-1);
                        lstCATLocationID.AddRange(model.CUS_Location.Where(c => c.CustomerID == customerid && lstLocationFilter.Contains(c.ID)).Select(c => c.LocationID).Distinct().ToList());
                    }
                    ////typeID: 1 cảng biển, 2 hãng tàu, 3 nhà phân phối, 4 kho


                    var lstCUSPartner = model.CUS_Partner.Where(c => c.CustomerID == customerid && lstCUSPartnerID.Contains(c.ID)).Select(c => new DTOCUSPartnerLocationAll
                    {
                        IsPartner = true,
                        CATPartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CATCode = c.CAT_Partner.Code,
                        CATName = c.CAT_Partner.PartnerName,
                        CUSCode = c.PartnerCode,
                        CATAddress = c.CAT_Partner.Address,
                        CountryName = c.CAT_Partner.CountryID > 0 ? c.CAT_Partner.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.CAT_Partner.ProvinceID > 0 ? c.CAT_Partner.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.CAT_Partner.DistrictID > 0 ? c.CAT_Partner.CAT_District.DistrictName : string.Empty,
                        CATLocationID = -1,
                        CUSLocationID = -1,
                        CUSLocationName = string.Empty,
                        TypeName = c.CAT_Partner.SYS_Var.ValueOfVar,
                        TypeID = c.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : c.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1,
                    }).OrderBy(c => c.TypeID).ToList();

                    var lstCATPartnerID = lstCUSPartner.Select(c => c.CATPartnerID).ToList();

                    var queryPartnerLocation = model.CAT_PartnerLocation.Where(c => lstCATPartnerID.Contains(c.PartnerID));
                    if (lstCATLocationID.Count > 0)
                        queryPartnerLocation = queryPartnerLocation.Where(c => lstCATLocationID.Contains(c.LocationID));
                    var hasStock = lstCUSPartnerID.Contains(-1);
                    var queryLocation = model.CUS_Location.Where(c => c.CustomerID == customerid && ((c.CusPartID == null && hasStock) || (c.CusPartID > 0 && lstCUSPartnerID.Contains(c.CusPartID.Value))));
                    if (lstCATLocationID.Count > 0)
                        queryLocation = queryLocation.Where(c => lstCATLocationID.Contains(c.LocationID));
                    var lstKeyFilterUseLocation = queryLocation.Where(c => c.CusPartID > 0).Select(c => c.CUS_Partner.PartnerID + "_" + c.LocationID).ToList();
                    if (isUseLocation)
                        queryPartnerLocation = queryPartnerLocation.Where(c => lstKeyFilterUseLocation.Contains(c.PartnerID + "_" + c.LocationID));

                    var lstPartnerLocation = queryPartnerLocation.Select(c => new DTOCUSPartnerLocationAll
                    {
                        IsPartner = false,
                        CATPartnerID = c.PartnerID,
                        CUSPartnerID = -1,
                        CATCode = c.CAT_Location.Code,
                        CATName = c.CAT_Location.Location,
                        CUSCode = string.Empty,
                        CUSLocationName = string.Empty,
                        CATAddress = c.CAT_Location.Address,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        CATLocationID = c.LocationID,
                        CUSLocationID = -1,
                        TypeName = string.Empty,
                        TypeID = c.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : c.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1,
                    }).ToList();



                    var lstCUSLocation = queryLocation.Select(c => new DTOCUSPartnerLocationAll
                    {
                        IsPartner = false,
                        CATPartnerID = c.CusPartID > 0 ? c.CUS_Partner.PartnerID : -1,
                        CUSPartnerID = c.CusPartID > 0 ? c.CusPartID.Value : -1,
                        CATCode = c.CAT_Location.Code,
                        CATName = c.CAT_Location.Location,
                        CUSCode = c.Code,
                        CUSLocationName = c.LocationName,
                        CATAddress = c.CAT_Location.Address,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        CATLocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        TypeName = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.SYS_Var.ValueOfVar : string.Empty,
                        TypeID = c.CusPartID > 0 ? (c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1) : 4,
                    }).ToList();

                    result.AddRange(lstCUSPartner);

                    foreach (var partner in lstCUSPartner)
                    {
                        var lstLocation = lstPartnerLocation.Where(c => c.CATPartnerID == partner.CATPartnerID).ToList();

                        foreach (var location in lstLocation)
                        {
                            location.CUSPartnerID = partner.CUSPartnerID;
                            var checkLocationUse = lstCUSLocation.Where(c => c.CATLocationID == location.CATLocationID && c.CUSPartnerID == partner.CUSPartnerID).FirstOrDefault();
                            if (checkLocationUse != null)
                            {
                                location.CUSCode = checkLocationUse.CUSCode;
                                location.CUSLocationID = checkLocationUse.CUSLocationID;
                                location.CUSLocationName = checkLocationUse.CUSLocationName;
                            }
                        }
                        var index = result.IndexOf(result.Where(c => c.CATPartnerID == partner.CATPartnerID && c.IsPartner).FirstOrDefault());
                        if (index >= 0)
                            result.InsertRange(index + 1, lstLocation);
                    }
                    if (lstCUSPartnerID.Contains(-1))
                    {
                        DTOCUSPartnerLocationAll objStockPartner = new DTOCUSPartnerLocationAll();
                        objStockPartner.IsPartner = true;
                        objStockPartner.CATPartnerID = -1;
                        objStockPartner.CUSPartnerID = -1;
                        objStockPartner.CATCode = string.Empty;
                        objStockPartner.CATName = string.Empty;
                        objStockPartner.CUSCode = string.Empty;
                        objStockPartner.CATAddress = string.Empty;
                        objStockPartner.CountryName = string.Empty;
                        objStockPartner.ProvinceName = string.Empty;
                        objStockPartner.DistrictName = string.Empty;
                        objStockPartner.CATLocationID = -1;
                        objStockPartner.CUSLocationID = -1;
                        objStockPartner.CUSLocationName = string.Empty;
                        objStockPartner.TypeName = "Kho";
                        objStockPartner.TypeID = 4;
                        result.Add(objStockPartner);

                        var lstCUSStock = lstCUSLocation.Where(c => c.CUSPartnerID == -1).ToList();

                        result.AddRange(lstCUSStock);
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPartnerAllCustom FLM_Partner_Get(int id, int typeid)
        {
            try
            {
                int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                int iSeaport = -(int)SYSVarType.TypeOfPartnerSeaPort;
                int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;

                var result = new DTOCUSPartnerAllCustom();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var obj = model.CUS_Partner.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.PartnerID = obj.PartnerID;
                            result.CUSCode = obj.PartnerCode;
                            result.CATCode = obj.CAT_Partner.Code;
                            result.CATPartnerName = obj.CAT_Partner.PartnerName;
                            result.Address = obj.CAT_Partner.Address;
                            result.WardID = obj.CAT_Partner.WardID;
                            result.DistrictID = obj.CAT_Partner.DistrictID;
                            result.ProvinceID = obj.CAT_Partner.ProvinceID;
                            result.CountryID = obj.CAT_Partner.CountryID;
                            result.TelNo = obj.CAT_Partner.TelNo;
                            result.Fax = obj.CAT_Partner.Fax;
                            result.Email = obj.CAT_Partner.Email;
                            result.BillingName = obj.CAT_Partner.BillingName;
                            result.BillingAddress = obj.CAT_Partner.BillingAddress;
                            result.TaxCode = obj.CAT_Partner.TaxCode;
                            result.Note = obj.CAT_Partner.Note;
                            result.BiddingID = obj.CAT_Partner.BiddingID;
                            result.GroupOfPartnerID = obj.CAT_Partner.GroupOfPartnerID > 0 ? obj.CAT_Partner.GroupOfPartnerID.Value : -1;
                            result.TypeID = obj.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : obj.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1;
                            result.TypeName = obj.CAT_Partner.SYS_Var.ValueOfVar;
                            result.RateGetEmpty = obj.RateGetEmpty;
                            result.RateReturnEmpty = obj.RateReturnEmpty;
                        }
                    }
                    else
                    {
                        result.ID = -1;
                        result.PartnerID = -1;

                        result.CountryID = 0;
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        result.ProvinceID = 0;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        result.DistrictID = 0;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                        result.WardID = null;

                        result.TypeID = 1;//1 seaport, 2:carrier, 3: distributor
                        if (typeid > 0) result.TypeID = typeid;
                        int typeSysvar = result.TypeID == 1 ? iSeaport : result.TypeID == 2 ? iCarrier : iDistributor;
                        var objSysvar = model.SYS_Var.FirstOrDefault(c => c.ID == typeSysvar);
                        if (objSysvar != null) result.TypeName = objSysvar.ValueOfVar;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int FLM_Partner_CUSLocationSaveCode(DTOCUSPartnerLocationAll item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CUSPartner_CUSLocationSaveCode(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region filter
        public DTOResult FLM_Partner_FilterByPartner_List(string request)
        {
            try
            {
                int customerid = Account.SYSCustomerID;
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => new DTOCUSPartnerAll
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerID = c.PartnerID,
                        PartnerCode = c.PartnerCode,
                        TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID,
                        TypeOfPartnerName = c.CAT_Partner.SYS_Var.ValueOfVar,
                        GroupOfPartnerCode = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.Code : string.Empty,
                        GroupOfPartnerID = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.ID : 0,
                        GroupOfPartnerName = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.GroupName : string.Empty,
                        CATCode = c.CAT_Partner.Code,
                        CATName = c.CAT_Partner.PartnerName,
                        CountryName = c.CAT_Partner.CAT_Country.CountryName,
                        DistrictName = c.CAT_Partner.CAT_District.DistrictName,
                        ProvinceName = c.CAT_Partner.CAT_Province.ProvinceName,
                        WardName = c.CAT_Partner.WardID != null ? c.CAT_Partner.CAT_Ward.WardName : string.Empty,
                        Address = c.CAT_Partner.Address,
                    }).ToList();
                    query.Add(new DTOCUSPartnerAll
                    {
                        ID = -1,
                        CustomerID = customerid,
                        PartnerID = -1,
                        PartnerCode = string.Empty,
                        TypeOfPartnerID = -1,
                        TypeOfPartnerName = "KHO",
                        GroupOfPartnerCode = string.Empty,
                        GroupOfPartnerID = 0,
                        GroupOfPartnerName = string.Empty,
                        CATCode = "KHO",
                        CATName = "KHO",
                        CountryName = string.Empty,
                        DistrictName = string.Empty,
                        ProvinceName = string.Empty,
                        WardName = string.Empty,
                        Address = string.Empty,
                    });
                    var lst = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = lst.Total;
                    result.Data = lst.Data as IEnumerable<DTOCUSPartnerAll>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<int> FLM_Partner_FilterByPartner_GetNumOfCusLocation()
        {
            try
            {
                int customerid = Account.SYSCustomerID;
                List<int> result = new List<int>();
                using (var model = new DataEntities())
                {
                    if (model.CUS_Location.Count(c => c.CustomerID == customerid) <= 50)
                    {
                        result = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => c.ID).ToList();
                        result.Add(-1);//-1 : kho
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLM_Partner_FilterByLocation_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                int customerid = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new DTOPartnerFilterByLocation
                    {
                        CatLocationID = c.LocationID,
                        CusLocationID = c.ID,
                        CATLocationCode = c.CAT_Location.Code,
                        CATLocationName = c.CAT_Location.Location,
                        CUSLocationCode = c.Code,
                        CUSLocationName = c.LocationName,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        LocationAddress = c.CAT_Location.Address,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng,
                        Economiczone = c.CAT_Location.EconomicZone,
                        Note = c.CAT_Location.Note,
                        Note1 = c.CAT_Location.Note,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "KHO",
                        PartnerName = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                        PartnerAddress = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.Address : string.Empty,
                        TypeOfPartnerName = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.SYS_Var.ValueOfVar : "KHO",
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPartnerFilterByLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCUSPartnerLocationAll> FLM_Partner_FilterByLocation_Result(List<int> lstCatLocationID)
        {
            try
            {
                List<DTOCUSPartnerLocationAll> result = new List<DTOCUSPartnerLocationAll>();
                int customerid = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;
                    int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;

                    //typeID: 1 cảng biển, 2 hãng tàu, 3 nhà phân phối, 4 kho

                    var lst = model.CUS_Location.Where(c => c.CustomerID == customerid && lstCatLocationID.Contains(c.LocationID)).Select(c => c.CusPartID > 0 ? c.CusPartID : -1).Distinct().ToList();

                    var lstCUSPartner = model.CUS_Partner.Where(c => c.CustomerID == customerid && lst.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        PartnerID = c.PartnerID,
                        CATCode = c.CAT_Partner.Code,
                        CUSCode = c.PartnerCode,
                        Address = c.CAT_Partner.Address,
                        PartnerName = c.CAT_Partner.PartnerName,
                        GroupPartnerName = c.CAT_Partner.GroupOfPartnerID > 0 ? c.CAT_Partner.CAT_GroupOfPartner.GroupName : string.Empty,
                        CountryName = c.CAT_Partner.CountryID > 0 ? c.CAT_Partner.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.CAT_Partner.ProvinceID > 0 ? c.CAT_Partner.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.CAT_Partner.DistrictID > 0 ? c.CAT_Partner.CAT_District.DistrictName : string.Empty,
                        TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID,
                        TypeOfPartnerName = c.CAT_Partner.SYS_Var.ValueOfVar,
                        TypeID = c.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : c.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1,
                    }).OrderBy(c => c.TypeID).ToList();
                    var lstPartnerID = lstCUSPartner.Select(c => c.PartnerID).ToList();
                    var lstPartnerLocation = model.CAT_PartnerLocation.Where(c => lstPartnerID.Contains(c.PartnerID)).Select(c => new
                    {
                        LocationID = c.LocationID,
                        PartnerID = c.PartnerID,
                        CATCode = c.CAT_Location.Code,
                        CATName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        CountryName = c.CAT_Location.CountryID > 0 ? c.CAT_Location.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.CAT_Location.ProvinceID > 0 ? c.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.CAT_Location.DistrictID > 0 ? c.CAT_Location.CAT_District.DistrictName : string.Empty
                    }).ToList();
                    var lstCUSLocation = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        Code = c.Code,
                        CusPartID = c.CusPartID,
                        LocationName = c.LocationName,
                        CATCode = c.CAT_Location.Code,
                        CATName = c.CAT_Location.Location,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        Address = c.CAT_Location.Address,
                    }).ToList();
                    foreach (var partner in lstCUSPartner)
                    {
                        DTOCUSPartnerLocationAll objPartner = new DTOCUSPartnerLocationAll();
                        objPartner.IsPartner = true;
                        objPartner.CATPartnerID = partner.PartnerID;
                        objPartner.CUSPartnerID = partner.ID;
                        objPartner.CATCode = partner.CATCode;
                        objPartner.CATName = partner.PartnerName;
                        objPartner.CUSCode = partner.CUSCode;
                        objPartner.CATAddress = partner.Address;
                        objPartner.CountryName = partner.CountryName;
                        objPartner.ProvinceName = partner.ProvinceName;
                        objPartner.DistrictName = partner.DistrictName;
                        objPartner.CATLocationID = -1;
                        objPartner.CUSLocationID = -1;
                        objPartner.CUSLocationName = string.Empty;
                        objPartner.TypeName = partner.TypeOfPartnerName;
                        objPartner.TypeID = partner.TypeID;
                        result.Add(objPartner);

                        var lstLocation = lstPartnerLocation.Where(c => c.PartnerID == partner.PartnerID).ToList();

                        foreach (var location in lstLocation)
                        {
                            DTOCUSPartnerLocationAll objLocation = new DTOCUSPartnerLocationAll();
                            objLocation.IsPartner = false;
                            objLocation.CATPartnerID = partner.PartnerID;
                            objLocation.CUSPartnerID = partner.ID;
                            objLocation.CATCode = location.CATCode;
                            objLocation.CATName = location.CATName;
                            objLocation.CUSCode = string.Empty;
                            objLocation.CATAddress = location.Address;
                            objLocation.CountryName = location.CountryName;
                            objLocation.ProvinceName = location.ProvinceName;
                            objLocation.DistrictName = location.DistrictName;
                            objLocation.CATLocationID = location.LocationID;
                            objLocation.CUSLocationID = -1;
                            objLocation.TypeName = string.Empty;
                            objPartner.TypeID = partner.TypeID;

                            var checkLocationUse = lstCUSLocation.Where(c => c.LocationID == location.LocationID && c.CusPartID == partner.ID).FirstOrDefault();
                            if (checkLocationUse != null)
                            {
                                objLocation.CUSCode = checkLocationUse.Code;
                                objLocation.CUSLocationID = checkLocationUse.ID;
                                objLocation.CUSLocationName = checkLocationUse.LocationName;
                            }

                            result.Add(objLocation);
                        }
                    }
                    if (lst.Contains(-1))
                    {
                        DTOCUSPartnerLocationAll objStockPartner = new DTOCUSPartnerLocationAll();
                        objStockPartner.IsPartner = true;
                        objStockPartner.CATPartnerID = -1;
                        objStockPartner.CUSPartnerID = -1;
                        objStockPartner.CATCode = string.Empty;
                        objStockPartner.CATName = string.Empty;
                        objStockPartner.CUSCode = string.Empty;
                        objStockPartner.CATAddress = string.Empty;
                        objStockPartner.CountryName = string.Empty;
                        objStockPartner.ProvinceName = string.Empty;
                        objStockPartner.DistrictName = string.Empty;
                        objStockPartner.CATLocationID = -1;
                        objStockPartner.CUSLocationID = -1;
                        objStockPartner.CUSLocationName = string.Empty;
                        objStockPartner.TypeName = "Kho";
                        objStockPartner.TypeID = 4;
                        result.Add(objStockPartner);

                        var lstCUSStock = lstCUSLocation.Where(c => c.CusPartID == null).ToList();

                        foreach (var stock in lstCUSStock)
                        {
                            DTOCUSPartnerLocationAll objStock = new DTOCUSPartnerLocationAll();
                            objStock.IsPartner = false;
                            objStock.CATPartnerID = -1;
                            objStock.CUSPartnerID = -1;
                            objStock.CATCode = stock.CATCode;
                            objStock.CATName = stock.CATName;
                            objStock.CUSCode = stock.Code;
                            objStock.CUSLocationName = stock.LocationName;
                            objStock.CATAddress = stock.Address;
                            objStock.CountryName = stock.CountryName;
                            objStock.ProvinceName = stock.ProvinceName;
                            objStock.DistrictName = stock.DistrictName;
                            objStock.CATLocationID = stock.LocationID;
                            objStock.CUSLocationID = stock.ID;
                            objStock.TypeName = string.Empty;
                            objStock.TypeID = objStockPartner.TypeID;
                            result.Add(objStock);
                        }
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region routing partner
        public DTOResult FLM_Partner_RoutingContract_List(string request, int locationid)
        {
            try
            {
                DTOResult result = new DTOResult();
                int customerid = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractRouting.Where(c => c.CAT_Contract.CustomerID == customerid && c.CAT_Routing.RoutingAreaFromID > 0 && c.CAT_Routing.RoutingAreaToID > 0).Select(c => new DTOCUSPartnerRouting
                    {
                        CATRoutingID = c.RoutingID,
                        CATRoutingCode = c.CAT_Routing.Code,
                        CATRoutingName = c.CAT_Routing.RoutingName,
                        CUSRoutingID = c.ID,
                        CUSRoutingCode = c.Code,
                        CUSRoutingName = c.RoutingName,
                        ContractID = c.ContractID,
                        ContractCode = c.CAT_Contract.ContractNo,
                        ContractName = c.CAT_Contract.DisplayName,
                        TermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                        TermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                        TermName = c.ContractTermID > 0 ? c.CAT_ContractTerm.TermName : string.Empty,
                        IsCheckFrom = false,
                        IsCheckTo = false,
                        AreaFromID = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.RoutingAreaFromID.Value : -1,
                        AreaFromCode = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.Code : string.Empty,
                        AreaFromName = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToID = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.RoutingAreaToID.Value : -1,
                        AreaToCode = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.Code : string.Empty,
                        AreaToName = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.AreaName : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));

                    var data = query.Data as IEnumerable<DTOCUSPartnerRouting>;

                    var lstArea = model.CAT_RoutingAreaLocation.Where(c => c.LocationID == locationid).Select(c => new { c.ID, c.RoutingAreaID, c.LocationID }).ToList();
                    foreach (var item in data)
                    {
                        if (lstArea.Count(c => c.RoutingAreaID == item.AreaFromID) > 0)
                            item.IsCheckFrom = true;
                        if (lstArea.Count(c => c.RoutingAreaID == item.AreaToID) > 0)
                            item.IsCheckTo = true;
                    }

                    result.Total = query.Total;
                    result.Data = data;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLM_Partner_RoutingContract_SaveList(List<int> lstAreaClear, List<int> lstAreaAdd, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    lstAreaClear = lstAreaClear.Distinct().ToList();
                    lstAreaAdd = lstAreaAdd.Distinct().ToList();
                    //clear kv-diem
                    foreach (var item in model.CAT_RoutingAreaLocation.Where(c => lstAreaClear.Contains(c.RoutingAreaID) && c.LocationID == locationid))
                    {
                        model.CAT_RoutingAreaLocation.Remove(item);
                    }
                    //add mới
                    foreach (var area in lstAreaAdd)
                    {
                        var obj = new CAT_RoutingAreaLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.RoutingAreaID = area;
                        obj.LocationID = locationid;
                        model.CAT_RoutingAreaLocation.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLM_Partner_RoutingContract_NewRoutingSave(DTOCUSPartnerNewRouting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int customerid = Account.SYSCustomerID;
                    model.EventAccount = Account; model.EventRunning = false;

                    item.RoutingCode = item.RoutingCode.Trim();
                    item.RoutingName = item.RoutingName.Trim();

                    if (model.CAT_Routing.Count(c => c.Code == item.RoutingCode) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã cung đường đã tồn tại");
                    if (item.AreaToID <= 1 && item.AreaFromID <= 1)
                        throw FaultHelper.BusinessFault(null, null, "Khu vực đi, đến không chính xác");

                    var objCATRouting = new CAT_Routing();
                    objCATRouting.CreatedBy = Account.UserName;
                    objCATRouting.CreatedDate = DateTime.Now;
                    objCATRouting.Code = item.RoutingCode;
                    objCATRouting.RoutingName = item.RoutingName;
                    objCATRouting.IsAreaLast = false;
                    objCATRouting.IsUse = true;
                    objCATRouting.IsLocation = false;
                    objCATRouting.IsChecked = false;
                    objCATRouting.RoutingAreaFromID = item.AreaFromID;
                    objCATRouting.RoutingAreaToID = item.AreaToID;
                    model.CAT_Routing.Add(objCATRouting);

                    var objCUSRouting = new CUS_Routing();
                    objCUSRouting.CreatedBy = Account.UserName;
                    objCUSRouting.CreatedDate = DateTime.Now;
                    objCUSRouting.Code = item.RoutingCode;
                    objCUSRouting.RoutingName = item.RoutingName;
                    objCUSRouting.CustomerID = customerid;
                    objCUSRouting.CAT_Routing = objCATRouting;
                    model.CUS_Routing.Add(objCUSRouting);

                    var last = model.CAT_ContractRouting.Where(c => c.ContractID == item.ContractID).OrderByDescending(c => c.SortOrder).Select(c => c.SortOrder).FirstOrDefault();
                    if (last == null) last = 0;
                    last++;

                    var objContracRouting = new CAT_ContractRouting();
                    objContracRouting.CreatedBy = Account.UserName;
                    objContracRouting.CreatedDate = DateTime.Now;
                    objContracRouting.Code = item.RoutingCode;
                    objContracRouting.RoutingName = item.RoutingName;
                    objContracRouting.ContractID = item.ContractID;
                    objContracRouting.CAT_Routing = objCATRouting;
                    objContracRouting.SortOrder = last;
                    objContracRouting.ContractRoutingTypeID = -(int)SYSVarType.ContractRoutingTypePrice;
                    model.CAT_ContractRouting.Add(objContracRouting);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPartnerNewRouting FLM_Partner_RoutingContract_NewRoutingGet()
        {
            try
            {
                DTOCUSPartnerNewRouting result = new DTOCUSPartnerNewRouting();
                using (var model = new DataEntities())
                {
                    int customerid = Account.SYSCustomerID;
                    var contract = model.CAT_Contract.Where(c => c.CustomerID == customerid).FirstOrDefault();
                    result.ContractID = -1;
                    if (contract != null) result.ContractID = contract.ID;
                    result.AreaFromCode_Name = "Chọn khu vực";
                    result.AreaToCode_Name = "Chọn khu vực";
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCATContract> FLM_Partner_RoutingContract_ContractData()
        {
            try
            {
                List<DTOCATContract> result = new List<DTOCATContract>();
                int customerid = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    result = model.CAT_Contract.Where(c => c.CustomerID == customerid).Select(c => new DTOCATContract
                    {
                        ID = c.ID,
                        ContractNo = c.ContractNo,
                        DisplayName = c.DisplayName
                    }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLM_Partner_RoutingContract_NewAreaSave(CATRoutingArea item, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    item.Code = item.Code.Trim();
                    item.AreaName = item.AreaName.Trim();

                    if (model.CAT_RoutingArea.Count(c => c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã khu vực đã tồn tại");


                    var objCATRoutingArea = new CAT_RoutingArea();
                    objCATRoutingArea.CreatedBy = Account.UserName;
                    objCATRoutingArea.CreatedDate = DateTime.Now;
                    objCATRoutingArea.Code = item.Code;
                    objCATRoutingArea.AreaName = item.AreaName;
                    objCATRoutingArea.CodeNoUnicode = HelperString.RemoveSign4VietnameseString(item.Code);
                    model.CAT_RoutingArea.Add(objCATRoutingArea);

                    var objCATRoutingAreaLocation = new CAT_RoutingAreaLocation();
                    objCATRoutingAreaLocation.CreatedBy = Account.UserName;
                    objCATRoutingAreaLocation.CreatedDate = DateTime.Now;
                    objCATRoutingAreaLocation.CAT_RoutingArea = objCATRoutingArea;
                    objCATRoutingAreaLocation.LocationID = locationid;
                    model.CAT_RoutingAreaLocation.Add(objCATRoutingAreaLocation);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLM_Partner_RoutingContract_AreaList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingArea.Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        AreaName = c.AreaName,
                        Code = c.Code
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRoutingArea>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion
        #endregion

        #region Danh sách chuyến
        public DTOFLMOwner FLMOwner_MasterList(DateTime? dtfrom, DateTime? dtto)
        {
            try
            {
                var result = new DTOFLMOwner();
                result.ListAsset = new List<DTOFLMOwner_Asset>();
                result.ListQuota = new List<DTOFLMOwner_Quota>();
                using (var model = new DataEntities())
                {
                    result.ListAsset = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor)).Select(c => new DTOFLMOwner_Asset
                    {
                        ID = c.ID,
                        RegNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : "",
                        TypeOfAssetName = c.TypeOfAssetID > 0 ? c.SYS_Var.ValueOfVar : "",
                        VehicleID = c.VehicleID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        MinCapacity = c.CAT_Vehicle.MinCapacity,
                        RegCapacity = c.CAT_Vehicle.RegCapacity,
                        GroupOfVehicleCode = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                        KM = c.CAT_Vehicle.KM,
                        KMStart = 0,
                        KMEnd = 0,
                    }).ToList();

                    result.ListQuota = model.FLM_MaterialQuota.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && (c.FLM_Asset.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck || c.FLM_Asset.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor)).Select(c => new DTOFLMOwner_Quota
                    {
                        VehicleID = c.VehicleID,
                        MaterialID = c.MaterialID,
                        MaterialCode = c.FLM_Material.Code,
                        QuantityPerKM = c.QuantityPerKM,
                    }).ToList();

                    if (dtfrom.HasValue && dtto.HasValue)
                    {
                        dtfrom = dtfrom.Value.Date;
                        dtto = dtto.Value.AddDays(1).Date;
                        foreach (var item in result.ListAsset)
                        {
                            item.ListCOMasterID = new List<int>();
                            item.ListDIMasterID = new List<int>();

                            var lstDIMaster = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID == Account.SYSCustomerID && c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterInvoice && c.ATA >= dtfrom && c.ATA < dtto && c.ReceiptCostID == null && c.VehicleID == item.VehicleID).Select(c => new { c.ID, c.KM, c.KMStart, c.KMEnd }).ToList();
                            var lstCOMaster = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID == Account.SYSCustomerID && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterInvoice && c.ATA >= dtfrom && c.ATA < dtto && c.ReceiptCostID == null && c.VehicleID == item.VehicleID).Select(c => new { c.ID, c.KM, c.KMStart, c.KMEnd }).ToList();
                            item.TotalMaster += lstDIMaster.Count + lstCOMaster.Count;
                            var lastReceipt = model.FLM_ReceiptCost.Where(c => c.AssetID == item.ID && c.FLM_Receipt.SYSCustomerID == Account.SYSCustomerID && c.FLM_Receipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptMaterial && c.KMEnd > 0).OrderByDescending(c => c.KMEnd).FirstOrDefault();
                            if (lastReceipt != null)
                                item.KMStart = lastReceipt.KMEnd;
                            else
                                item.KMStart = item.KM > 0 ? item.KM : 0;

                            double totalKM = 0;
                            var queryKM = lstDIMaster.Where(c => c.KM > 0);
                            if (queryKM.Count() > 0)
                                totalKM += queryKM.Sum(c => c.KM.Value);
                            queryKM = lstCOMaster.Where(c => c.KM > 0);
                            if (queryKM.Count() > 0)
                                totalKM += queryKM.Sum(c => c.KM.Value);
                            item.KMEnd = item.KMStart + totalKM;

                            item.ListDIMasterID = lstDIMaster.Select(c => c.ID).ToList();
                            item.ListCOMasterID = lstCOMaster.Select(c => c.ID).ToList();
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMOwner_Master FLMOwner_MasterDetailList(int vehicleID, DateTime? dtfrom, DateTime? dtto)
        {
            try
            {
                var result = new DTOFLMOwner_Master();
                result.ListDI = new List<DTOFLMOwner_Master_Detail>();
                result.ListCO = new List<DTOFLMOwner_Master_Detail>();
                using (var model = new DataEntities())
                {
                    result.ListDI = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID == Account.SYSCustomerID && c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterInvoice && c.ATA >= dtfrom && c.ATA < dtto && c.ReceiptCostID == null && c.VehicleID == vehicleID).Select(c => new DTOFLMOwner_Master_Detail
                        {
                            RegNo = c.CAT_Vehicle.RegNo,
                            DriverCode1 = c.DriverID1 > 0 ? c.FLM_Driver.Code : "",
                            DriverCode2 = c.DriverID2 > 0 ? c.FLM_Driver1.Code : "",
                            DriverName1 = c.DriverName1,
                            DriverName2 = c.DriverName2,
                            KM = c.KM > 0 ? c.KM.Value : 0,
                            ETD = c.ETD,
                            ETA = c.ETA,
                            ATD = c.ATD,
                            ATA = c.ATA,
                            TextCustomerCode = c.TextCustomerCode,
                            TextCustomerName = c.TextCustomerName,
                            TextGroupLocationCode = c.TextGroupLocationCode,
                        }).ToList();
                    result.ListCO = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID == Account.SYSCustomerID && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterInvoice && c.ATA >= dtfrom && c.ATA < dtto && c.ReceiptCostID == null && c.VehicleID == vehicleID).Select(c => new DTOFLMOwner_Master_Detail
                    {
                        RegNo = c.CAT_Vehicle.RegNo,
                        DriverCode1 = c.DriverID1 > 0 ? c.FLM_Driver.Code : "",
                        DriverCode2 = c.DriverID2 > 0 ? c.FLM_Driver1.Code : "",
                        DriverName1 = c.DriverName1,
                        DriverName2 = c.DriverName2,
                        KM = c.KM > 0 ? c.KM.Value : 0,
                        ETD = c.ETD,
                        ETA = c.ETA,
                        ATD = c.ATD,
                        ATA = c.ATA,
                        TextCustomerCode = c.TextCustomerCode,
                        TextCustomerName = c.TextCustomerName,
                        TextGroupLocationCode = c.TextGroupLocationCode,
                    }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMOwner_Receipt> FLMOwner_GenerateReceipt(List<DTOFLMOwner_Asset> lst)
        {
            try
            {
                List<DTOFLMOwner_Receipt> result = new List<DTOFLMOwner_Receipt>();
                using (var model = new DataEntities())
                {
                    long idx = Receipt_GetLastIndex(model);

                    // Lấy giá dầu hiện tại
                    string strKey = SYSSettingKey.Material.ToString();
                    DTOTriggerMaterial materialQuota = new DTOTriggerMaterial();
                    var sysSetting = model.SYS_Setting.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == strKey);
                    if (sysSetting != null)
                    {
                        try
                        {
                            materialQuota = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOTriggerMaterial>(sysSetting.Setting);
                        }
                        catch { }
                    }

                    foreach (var item in lst.Where(c => c.TotalMaster > 0 && (c.KMEnd - c.KMStart) > 0 && c.KMStart >= 0 && c.KMEnd >= 0))
                    {
                        var lstQuota = model.FLM_MaterialQuota.Where(c => c.VehicleID == item.ID).Select(c => new { c.MaterialID, c.QuantityPerKM, MaterialName = c.FLM_Material.MaterialName }).ToList();

                        DTOFLMOwner_Receipt obj = new DTOFLMOwner_Receipt();
                        obj.Code = ReceiptCodeRrefix + idx.ToString(ReceiptCodeNum);
                        obj.DateReceipt = DateTime.Now.Date;
                        obj.IsApproved = true;
                        obj.KMStart = item.KMStart;
                        obj.KMEnd = item.KMEnd;
                        obj.VehicleID = item.ID;
                        obj.RegNo = item.RegNo;
                        obj.ListDetail = new List<DTOFuelCostDetail>();

                        foreach (var itemQuota in lstQuota)
                        {
                            DTOFuelCostDetail detail = new DTOFuelCostDetail();
                            detail.MaterialID = itemQuota.MaterialID;
                            detail.MaterialName = itemQuota.MaterialName;
                            detail.Quantity = Math.Round(itemQuota.QuantityPerKM * (obj.KMEnd.Value - obj.KMStart.Value), 2);
                            // Lấy giá vật tư
                            decimal unitPrice = 0;
                            if (itemQuota.MaterialID == materialQuota.DieselArea1_MaterialID)
                                unitPrice = materialQuota.DieselArea1;
                            if (itemQuota.MaterialID == materialQuota.DieselArea2_MaterialID)
                                unitPrice = materialQuota.DieselArea2;
                            if (itemQuota.MaterialID == materialQuota.DO05Area1_MaterialID)
                                unitPrice = materialQuota.DO05Area1;
                            if (itemQuota.MaterialID == materialQuota.DO05Area2_MaterialID)
                                unitPrice = materialQuota.DO05Area2;
                            if (itemQuota.MaterialID == materialQuota.DO25Area1_MaterialID)
                                unitPrice = materialQuota.DO25Area1;
                            if (itemQuota.MaterialID == materialQuota.DO25Area2_MaterialID)
                                unitPrice = materialQuota.DO25Area2;
                            if (itemQuota.MaterialID == materialQuota.E5RON92Area1_MaterialID)
                                unitPrice = materialQuota.E5RON92Area1;
                            if (itemQuota.MaterialID == materialQuota.E5RON92Area2_MaterialID)
                                unitPrice = materialQuota.E5RON92Area2;
                            detail.Price = unitPrice;
                            detail.Amount = (decimal)detail.Quantity * detail.Price;
                            obj.TotalMoney += detail.Amount;
                            obj.ListDetail.Add(detail);
                        }
                        result.Add(obj);
                        idx++;
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMOwner_AcceptReceipt(List<DTOFLMOwner_Receipt> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lst)
                    {
                        FLM_Receipt obj = new FLM_Receipt();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Code = item.Code;
                        obj.DateReceipt = item.DateReceipt;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.TypeOfReceiptID = -(int)SYSVarType.TypeOfReceiptMaterial;
                        obj.IsApproved = true;
                        obj.InvoiceDate = item.InvoiceDate;
                        obj.InvoiceNo = item.InvoiceNo;
                        model.FLM_Receipt.Add(obj);

                        var objCost = new FLM_ReceiptCost();
                        objCost.CreatedDate = DateTime.Now;
                        objCost.CreatedBy = Account.UserName;
                        objCost.AssetID = item.VehicleID;
                        objCost.DriverID = item.DriverID > 0 ? item.DriverID : null;
                        objCost.KMEnd = item.KMEnd;
                        objCost.KMStart = item.KMStart;
                        objCost.Amount = item.TotalMoney;
                        obj.FLM_ReceiptCost.Add(objCost);

                        foreach (var itemDetail in item.ListDetail)
                        {
                            var objDetail = new FLM_ReceiptDetail();
                            objDetail.CreatedBy = Account.UserName;
                            objDetail.CreatedDate = DateTime.Now;
                            objDetail.MaterialID = itemDetail.MaterialID;
                            objDetail.Quantity = itemDetail.Quantity;
                            objDetail.Price = itemDetail.Price;
                            objDetail.Amount = itemDetail.Amount;
                            objCost.FLM_ReceiptDetail.Add(objDetail);
                        }

                        foreach (var masterID in item.ListDIMasterID)
                        {
                            var master = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                            if (master != null)
                                master.FLM_ReceiptCost = objCost;
                        }
                        foreach (var masterID in item.ListCOMasterID)
                        {
                            var master = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == masterID);
                            if (master != null)
                                master.FLM_ReceiptCost = objCost;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Bãi xe
        public DTOResult FLMStand_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Stand.Select(c => new DTOCATStand
                    {
                        ID = c.ID,
                        Code = c.Code,
                        SYSCustomerID = c.SYSCustomerID,
                        StandName = c.StandName,
                        LocationID = c.LocationID,
                        LocationName = c.CAT_Location.Location,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATStand>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int FLMStand_Save(DTOCATStand item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Stand.Where(c => c.ID != item.ID && c.Code == item.Code && c.SYSCustomerID == Account.SYSCustomerID).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    var obj = model.CAT_Stand.FirstOrDefault(c => c.ID == item.ID);

                    if (obj == null)
                    {
                        obj = new CAT_Stand();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_Stand.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.StandName = item.StandName;
                    obj.LocationID = item.LocationID;
                    obj.SYSCustomerID = Account.SYSCustomerID;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATStand FLMStand_Get(int ID)
        {
            try
            {
                DTOCATStand result = new DTOCATStand { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Stand.Where(c => c.ID == ID).Select(c => new DTOCATStand
                        {
                            ID = c.ID,
                            Code = c.Code,
                            StandName = c.StandName,
                            SYSCustomerID = c.SYSCustomerID,
                            LocationID = c.LocationID,
                            LocationName = c.CAT_Location.Location,
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMStand_Delete(DTOCATStand item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Stand.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        foreach (var o in model.CAT_StandDetail.Where(c => c.StandID == item.ID).ToList())
                        {
                            model.CAT_StandDetail.Remove(o);
                        }
                        model.CAT_Stand.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult FLMStand_Location_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => c.ID > 1).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        WardID = c.WardID,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        EconomicZone = c.EconomicZone,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate,
                        Note1 = c.Note1,
                        Note = c.Note,
                        GroupOfLocationID = c.GroupOfLocationID > 0 ? c.GroupOfLocationID.Value : -1,
                        GroupOfLocationName = c.GroupOfLocationID > 0 ? c.CAT_GroupOfLocation.GroupName : string.Empty,
                        LoadTimeCO = c.LoadTimeCO,
                        LoadTimeDI = c.LoadTimeDI,
                        UnLoadTimeCO = c.UnLoadTimeCO,
                        UnLoadTimeDI = c.UnLoadTimeDI

                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult FLMStand_Truck_List(string request, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_StandDetail.Where(c => c.StandID == standID && c.VehicleID.HasValue && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOFLMTruck
                    {
                        ID = c.ID,
                        IsDefault = c.IsDefault,
                        VehicleID = c.VehicleID.Value,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        RegCapacity = c.CAT_Vehicle.RegCapacity,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MinCapacity = c.CAT_Vehicle.MinCapacity,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMTruck>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult Truck_NotInList(string request, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTypeOfAssetTruck = -(int)SYSVarType.TypeOfAssetTruck;
                    var lstID = model.CAT_StandDetail.Where(c => c.StandID == standID && c.VehicleID > 0 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => c.VehicleID).Distinct().ToList();
                    var query = model.FLM_Asset.Where(c => c.VehicleID.HasValue && !lstID.Contains(c.VehicleID.Value) && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == iTypeOfAssetTruck).Select(c => new DTOFLMTruck
                    {
                        ID = c.ID,
                        IsDefault = false,
                        VehicleID = c.VehicleID.Value,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        RegCapacity = c.CAT_Vehicle.RegCapacity,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MinCapacity = c.CAT_Vehicle.MinCapacity,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        ExprDay = c.ExprDay,
                        ExprInputDay = c.ExprInputDay,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMTruck>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMStand_TruckSave(List<DTOFLMTruck> lstFLMTruck, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lstFLMTruck)
                    {
                        var obj = model.CAT_StandDetail.FirstOrDefault(c => c.StandID == standID && c.VehicleID == item.VehicleID);
                        if (obj == null)
                        {
                            obj = new CAT_StandDetail();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.StandID = standID;
                            obj.VehicleID = item.VehicleID;
                            obj.IsDefault = item.IsDefault;
                            model.CAT_StandDetail.Add(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMStand_Truck_Delete(List<DTOFLMTruck> lstFLMTruck, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    foreach (var item in lstFLMTruck)
                    {
                        var obj = model.CAT_StandDetail.FirstOrDefault(c => c.StandID == standID && c.VehicleID == item.VehicleID);
                        if (obj != null)
                        {
                            model.CAT_StandDetail.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult FLMStand_Tractor_List(string request, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_StandDetail.Where(c => c.StandID == standID && c.VehicleID.HasValue && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOFLMTractor
                    {
                        ID = c.ID,
                        IsDefault = c.IsDefault,
                        VehicleID = c.VehicleID.Value,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMTractor>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult Tractor_NotInList(string request, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTypeOfAssetTractor = -(int)SYSVarType.TypeOfAssetTractor;
                    var lstID = model.CAT_StandDetail.Where(c => c.StandID == standID && c.VehicleID > 0 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => c.VehicleID).Distinct().ToList();
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && !lstID.Contains(c.VehicleID.Value) && c.TypeOfAssetID == iTypeOfAssetTractor).Select(c => new DTOFLMTractor
                    {
                        ID = c.ID,
                        IsDefault = false,
                        VehicleID = c.VehicleID,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        MaxWeightCal = c.CAT_Vehicle.MaxWeightCal,
                        ExprDay = c.ExprDay,
                        ExprInputDay = c.ExprInputDay,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMTractor>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMStand_TractorSave(List<DTOFLMTractor> lstFLMTractor, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lstFLMTractor)
                    {
                        var obj = model.CAT_StandDetail.FirstOrDefault(c => c.StandID == standID && c.VehicleID == item.VehicleID);
                        if (obj == null)
                        {
                            obj = new CAT_StandDetail();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.StandID = standID;
                            obj.VehicleID = item.VehicleID;
                            obj.IsDefault = item.IsDefault;
                            model.CAT_StandDetail.Add(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMStand_Tractor_Delete(List<DTOFLMTractor> lstFLMTractor, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    foreach (var item in lstFLMTractor)
                    {
                        var obj = model.CAT_StandDetail.FirstOrDefault(c => c.StandID == standID && c.VehicleID == item.VehicleID);
                        if (obj != null)
                        {
                            model.CAT_StandDetail.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult FLMStand_Romooc_List(string request, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_StandDetail.Where(c => c.StandID == standID && c.RomoocID.HasValue).Select(c => new DTOFLMRomooc
                    {
                        ID = c.ID,
                        IsDefault = c.IsDefault,
                        RomoocID = c.RomoocID,
                        GroupOfRomoocID = c.CAT_Romooc.GroupOfRomoocID,
                        GroupOfRomoocName = c.CAT_Romooc.GroupOfRomoocID.HasValue ? c.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty,
                        RegNo = c.CAT_Romooc.RegNo,
                        IsOwn = c.CAT_Romooc.IsOwn,
                        CurrentVendorID = c.CAT_Romooc.CurrentVendorID,
                        NoOfDelivery = c.CAT_Romooc.NoOfDelivery,
                        Lat = c.CAT_Romooc.Lat,
                        Lng = c.CAT_Romooc.Lng,
                        MaxWeight = c.CAT_Romooc.MaxWeight,
                        BiddingID = c.CAT_Romooc.BiddingID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult Romooc_NotInList(string request, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_StandDetail.Where(c => c.StandID == standID && c.RomoocID > 0).Select(c => c.RomoocID).Distinct().ToList();
                    var query = model.FLM_Asset.Where(c => c.RomoocID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc && !lstID.Contains(c.RomoocID)).Select(c => new DTOFLMRomooc
                    {
                        ID = c.ID,
                        IsDefault = false,
                        RomoocID = c.RomoocID,
                        GroupOfRomoocID = c.CAT_Romooc.GroupOfRomoocID,
                        GroupOfRomoocName = c.CAT_Romooc.GroupOfRomoocID.HasValue ? c.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty,
                        YearOfProduction = c.YearOfProduction,
                        Manufactor = c.Manufactor,
                        BaseValue = c.BaseValue,
                        CurrentValue = c.CurrentValue,
                        DepreciationPeriod = c.DepreciationPeriod,
                        DepreciationStart = c.DepreciationStart,
                        Specification = c.Specification,
                        IsRent = c.IsRent,
                        RentID = c.RentID,
                        RegNo = c.CAT_Romooc.RegNo,
                        IsOwn = c.CAT_Romooc.IsOwn,
                        CurrentVendorID = c.CAT_Romooc.CurrentVendorID,
                        NoOfDelivery = c.CAT_Romooc.NoOfDelivery,
                        Lat = c.CAT_Romooc.Lat,
                        Lng = c.CAT_Romooc.Lng,
                        //ContainerID = c.CAT_Romooc.ContainerID,
                        MaxWeight = c.CAT_Romooc.MaxWeight,
                        BiddingID = c.CAT_Romooc.BiddingID,
                        WarrantyEnd = c.WarrantyEnd,
                        WarrantyPeriod = c.WarrantyPeriod,
                        ExprDay = c.ExprDay,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMStand_RomoocSave(List<DTOFLMRomooc> lstFLMRomooc, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    foreach (var item in lstFLMRomooc)
                    {
                        var obj = model.CAT_StandDetail.FirstOrDefault(c => c.StandID == standID && c.RomoocID == item.RomoocID);
                        if (obj == null)
                        {
                            obj = new CAT_StandDetail();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.StandID = standID;
                            obj.RomoocID = item.RomoocID;
                            obj.IsDefault = item.IsDefault;
                            model.CAT_StandDetail.Add(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void FLMStand_Romooc_Delete(List<DTOFLMRomooc> lstFLMRomooc, int standID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    foreach (var item in lstFLMRomooc)
                    {
                        var obj = model.CAT_StandDetail.FirstOrDefault(c => c.StandID == standID && c.RomoocID == item.RomoocID);
                        if (obj != null)
                        {
                            model.CAT_StandDetail.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel FLMStand_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var detail = model.CAT_StandDetail.Select(c => new DTOCATStanExcel
                        {
                            ID = c.ID,
                            StandID = c.StandID,
                            VehicleID = c.VehicleID,
                            RomoocID = c.RomoocID,
                            LocationCode = c.CAT_Stand.CAT_Location.Code,
                            LocationName = c.CAT_Stand.CAT_Location.Location,
                            Code = c.CAT_Stand.Code,
                            Name = c.CAT_Stand.StandName,
                            RegNo = c.VehicleID != null ? c.CAT_Vehicle.RegNo : c.RomoocID != null ? c.CAT_Romooc.RegNo : null,
                            TypeOfAssetCode = string.Empty,
                            TypeOfAssetName = string.Empty,
                            IsDefault = c.IsDefault,
                        }).ToList();

                        foreach (var item in detail)
                        {
                            var asset = model.FLM_Asset.FirstOrDefault(c => c.VehicleID == item.VehicleID);
                            if (asset == null)
                                asset = model.FLM_Asset.FirstOrDefault(c => c.RomoocID == item.RomoocID);
                            if (asset != null)
                            {
                                item.TypeOfAssetCode = asset.SYS_Var.Code;
                                item.TypeOfAssetName = asset.SYS_Var.ValueOfVar;
                            }
                        }

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[4];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 4; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã trạm", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên Trạm", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã địa điểm", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên địa điểm", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên Loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mặc định", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in detail)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.Name));
                            cells.Add(HelperExcel.NewCell(item.LocationCode));
                            cells.Add(HelperExcel.NewCell(item.LocationName));
                            cells.Add(HelperExcel.NewCell(item.RegNo));
                            cells.Add(HelperExcel.NewCell(item.TypeOfAssetCode));
                            cells.Add(HelperExcel.NewCell(item.TypeOfAssetName));
                            if (item.IsDefault == true)
                                cells.Add(HelperExcel.NewCell("X"));
                            else
                                cells.Add(HelperExcel.NewCell(""));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row FLMStand_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 9;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckLocationID = colData++;
                    int colCheckTruckID = colData++;
                    int colCheckTractorID = colData++;
                    int colCheckRomoocID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_StandDetail.Where(c => c.CAT_Stand.SYSCustomerID == Account.SYSCustomerID).Select(c => new { c.ID, c.StandID, c.CAT_Stand.Code, c.RomoocID, c.VehicleID }).ToList();
                    var lstLoaction = model.CAT_Location.Select(c => new { c.ID, c.Code }).ToList();
                    var lstTypeOfAsset = model.SYS_Var.Where(c => c.ID == -(int)SYSVarType.TypeOfAssetRomooc || c.ID == -(int)SYSVarType.TypeOfAssetTractor || c.ID == -(int)SYSVarType.TypeOfAssetTruck).Select(c => new { c.Code, c.ID }).ToList();
                    var lstTruck = model.FLM_Asset.Where(c => c.VehicleID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck).Select(c => new { c.VehicleID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstTractor = model.FLM_Asset.Where(c => c.VehicleID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new { c.VehicleID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstRomooc = model.FLM_Asset.Where(c => c.RomoocID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new { c.RomoocID, c.CAT_Romooc.RegNo }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfAssetCode = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfAssetName = HelperExcel.GetString(checkRow, colData++);
                        string dataIsDefault = HelperExcel.GetString(checkRow, colData++);


                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLocationCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                        {
                            var valocationid = "-1";
                            var objLocation = lstLoaction.FirstOrDefault(c => c.Code == dataLocationCode);
                            if (objLocation != null)
                                valocationid = objLocation.ID.ToString();
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                            if (flag)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.StandID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationID, valocationid);
                            }
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataRegNo))
                        {
                            if (!string.IsNullOrEmpty(dataTypeOfAssetCode) && lstTypeOfAsset.Where(c => c.Code == dataTypeOfAssetCode).Count() > 0)
                            {
                                var validTruck = "-1";
                                var validTractor = "-1";
                                var validRomooc = "-1";
                                int TypeOfAssetid = lstTypeOfAsset.Where(c => c.Code == dataTypeOfAssetCode).Select(c => c.ID).FirstOrDefault();
                                if (TypeOfAssetid == -(int)SYSVarType.TypeOfAssetTruck)
                                {
                                    var objID = lstTruck.FirstOrDefault(c => c.RegNo == dataRegNo);
                                    if (objID != null)
                                    {
                                        validTruck = objID.VehicleID.ToString();
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                        flag = false;
                                    }
                                }
                                else
                                {
                                    indexError++;
                                    if (TypeOfAssetid == -(int)SYSVarType.TypeOfAssetTractor)
                                    {
                                        var objID = lstTractor.FirstOrDefault(c => c.RegNo == dataRegNo);
                                        if (objID != null)
                                        {
                                            validTractor = objID.VehicleID.ToString();
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                            flag = false;
                                        }
                                    }
                                    else if (TypeOfAssetid == -(int)SYSVarType.TypeOfAssetRomooc)
                                    {
                                        indexError++;
                                        var objID = lstRomooc.FirstOrDefault(c => c.RegNo == dataRegNo);
                                        if (objID != null)
                                        {
                                            validRomooc = objID.RomoocID.ToString();
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                            flag = false;
                                        }
                                    }
                                }
                                if (flag)
                                {
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTruckID, validTruck);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTractorID, validTractor);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRomoocID, validRomooc);
                                }
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(7, lstMessageError));
                                flag = false;
                            }
                        }
                        else if (flag)
                        {
                            var valid = "-1";
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTruckID, valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTractorID, valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRomoocID, valid);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel FLMStand_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 9;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckLocationID = colData++;
                    int colCheckTruckID = colData++;
                    int colCheckTractorID = colData++;
                    int colCheckRomoocID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.CAT_StandDetail.Where(c => c.CAT_Stand.SYSCustomerID == Account.SYSCustomerID).Select(c => new { c.ID, c.StandID, c.CAT_Stand.Code, c.RomoocID, c.VehicleID }).ToList();
                    var lstLoaction = model.CAT_Location.Select(c => new { c.ID, c.Code }).ToList();
                    var lstTypeOfAsset = model.SYS_Var.Where(c => c.ID == -(int)SYSVarType.TypeOfAssetRomooc || c.ID == -(int)SYSVarType.TypeOfAssetTractor || c.ID == -(int)SYSVarType.TypeOfAssetTruck).Select(c => new { c.Code, c.ID }).ToList();
                    var lstTruck = model.FLM_Asset.Where(c => c.VehicleID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck).Select(c => new { c.VehicleID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstTractor = model.FLM_Asset.Where(c => c.VehicleID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).Select(c => new { c.VehicleID, c.CAT_Vehicle.RegNo }).ToList();
                    var lstRomooc = model.FLM_Asset.Where(c => c.RomoocID.HasValue && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).Select(c => new { c.RomoocID, c.CAT_Romooc.RegNo }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }
                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfAssetCode = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfAssetName = HelperExcel.GetString(checkRow, colData++);
                        string dataIsDefault = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLocationCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                        {
                            var valocationid = "-1";
                            var objLocation = lstLoaction.FirstOrDefault(c => c.Code == dataLocationCode);
                            if (objLocation != null)
                                valocationid = objLocation.ID.ToString();
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                            if (flag)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.StandID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationID, valocationid);
                            }
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataRegNo))
                        {
                            if (!string.IsNullOrEmpty(dataTypeOfAssetCode) && lstTypeOfAsset.Where(c => c.Code == dataTypeOfAssetCode).Count() > 0)
                            {
                                var validTruck = "-1";
                                var validTractor = "-1";
                                var validRomooc = "-1";
                                int TypeOfAssetid = lstTypeOfAsset.Where(c => c.Code == dataTypeOfAssetCode).Select(c => c.ID).FirstOrDefault();
                                if (TypeOfAssetid == -(int)SYSVarType.TypeOfAssetTruck)
                                {
                                    var objID = lstTruck.FirstOrDefault(c => c.RegNo == dataRegNo);
                                    if (objID != null)
                                    {
                                        validTruck = objID.VehicleID.ToString();
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                        flag = false;
                                    }
                                }
                                else
                                {
                                    indexError++;
                                    if (TypeOfAssetid == -(int)SYSVarType.TypeOfAssetTractor)
                                    {
                                        var objID = lstTractor.FirstOrDefault(c => c.RegNo == dataRegNo);
                                        if (objID != null)
                                        {
                                            validTractor = objID.VehicleID.ToString();
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                            flag = false;
                                        }
                                    }
                                    else if (TypeOfAssetid == -(int)SYSVarType.TypeOfAssetRomooc)
                                    {
                                        indexError++;
                                        var objID = lstRomooc.FirstOrDefault(c => c.RegNo == dataRegNo);
                                        if (objID != null)
                                        {
                                            validRomooc = objID.RomoocID.ToString();
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                            flag = false;
                                        }
                                    }
                                }
                                if (flag)
                                {
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTruckID, validTruck);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTractorID, validTractor);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRomoocID, validRomooc);
                                }
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(7, lstMessageError));
                                flag = false;
                            }
                        }
                        else if (flag)
                        {
                            var valid = "-1";
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTruckID, valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTractorID, valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRomoocID, valid);
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public bool FLMStand_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 9;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckLocationID = colData++;
                    int colCheckTruckID = colData++;
                    int colCheckTractorID = colData++;
                    int colCheckRomoocID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataLocationCode = HelperExcel.GetString(eRow, colData++);
                            string dataLocationName = HelperExcel.GetString(eRow, colData++);
                            string dataRegNo = HelperExcel.GetString(eRow, colData++);
                            string dataTypeOfAssetCode = HelperExcel.GetString(eRow, colData++);
                            string dataTypeOfAssetName = HelperExcel.GetString(eRow, colData++);
                            string dataIsDefault = HelperExcel.GetString(eRow, colData++);

                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);
                            string dataTruckID = HelperExcel.GetString(eRow, colCheckTruckID);
                            int getTruckid = Convert.ToInt32(dataTruckID);
                            string dataTractorID = HelperExcel.GetString(eRow, colCheckTractorID);
                            int getTractorid = Convert.ToInt32(dataTractorID);
                            string dataRomoocID = HelperExcel.GetString(eRow, colCheckRomoocID);
                            int getRomoocid = Convert.ToInt32(dataRomoocID);
                            string dataLoactionID = HelperExcel.GetString(eRow, colCheckLocationID);
                            int getloactionid = Convert.ToInt32(dataLoactionID);

                            int ReVehicleID = 0, ReRomoocID = 0;
                            if (getTruckid > 0)
                                ReVehicleID = getTruckid;
                            if (getTractorid > 0)
                                ReVehicleID = getTractorid;
                            if (getRomoocid > 0)
                                ReRomoocID = getRomoocid;

                            var obj = model.CAT_Stand.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Stand();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.CAT_Stand.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.StandName = dataName;
                            obj.LocationID = getloactionid;
                            obj.SYSCustomerID = Account.SYSCustomerID;

                            var objdetail = new CAT_StandDetail();
                            if (ReVehicleID > 0)
                                objdetail = model.CAT_StandDetail.FirstOrDefault(c => c.StandID == getid && c.VehicleID == ReVehicleID);
                            if (ReRomoocID > 0)
                                objdetail = model.CAT_StandDetail.FirstOrDefault(c => c.StandID == getid && c.RomoocID == ReRomoocID);

                            if (objdetail == null)
                            {
                                objdetail = new CAT_StandDetail();
                                objdetail.CreatedBy = Account.UserName;
                                objdetail.CreatedDate = DateTime.Now;
                                objdetail.CAT_Stand = obj;
                                model.CAT_StandDetail.Add(objdetail);
                            }
                            else
                            {
                                objdetail.ModifiedBy = Account.UserName;
                                objdetail.ModifiedDate = DateTime.Now;
                            }

                            if (dataIsDefault.ToUpper() == "X")
                                objdetail.IsDefault = true;
                            else
                                objdetail.IsDefault = false;
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Đối ứng nhiên liệu
        public DTOResult FLMMaterialAudit_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_MaterialAudit.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOFLMMaterialAudit
                    {
                        ID = c.ID,
                        SYSCustomerID = c.SYSCustomerID,
                        Code = c.Code,
                        AuditName = c.AuditName,
                        MaterialAuditStatusID = c.MaterialAuditStatusID,
                        MaterialAuditStatus = c.SYS_Var.ValueOfVar,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMaterialAudit>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int FLMMaterialAudit_Save(DTOFLMMaterialAudit item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.FLM_MaterialAudit.Where(c => c.ID != item.ID && c.Code == item.Code && c.SYSCustomerID == Account.SYSCustomerID).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    var obj = model.FLM_MaterialAudit.FirstOrDefault(c => c.ID == item.ID);

                    if (obj == null)
                    {
                        if (model.FLM_MaterialAudit.Count(c => c.SYSCustomerID == Account.SYSCustomerID && c.MaterialAuditStatusID < -(int)SYSVarType.MaterialAuditStatusClosed) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Có đợt đối chiếu chưa đóng, vui lòng đóng hết tất cả các đợt đối chiếu trước đó!");

                        obj = new FLM_MaterialAudit();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.MaterialAuditStatusID = -(int)SYSVarType.MaterialAuditStatusOpen;
                        model.FLM_MaterialAudit.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.AuditName = item.AuditName;
                    obj.DateTo = item.DateTo.Date;
                    obj.DateFrom = item.DateFrom.Date;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMMaterialAudit FLMMaterialAudit_Get(int ID)
        {
            try
            {
                DTOFLMMaterialAudit result = new DTOFLMMaterialAudit { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.FLM_MaterialAudit.Where(c => c.ID == ID && c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOFLMMaterialAudit
                        {
                            ID = c.ID,
                            Code = c.Code,
                            AuditName = c.AuditName,
                            SYSCustomerID = c.SYSCustomerID,
                            MaterialAuditStatusID = c.MaterialAuditStatusID,
                            MaterialAuditStatus = c.SYS_Var.ValueOfVar,
                            DateFrom = c.DateFrom,
                            DateTo = c.DateTo,
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMMaterialAudit_Delete(DTOFLMMaterialAudit item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_MaterialAudit.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.MaterialAuditStatusID == -(int)SYSVarType.MaterialAuditStatusClosed)
                            throw FaultHelper.BusinessFault(null, null, "Đợt đối chiếu đã đóng, không thể xóa!");
                        foreach (var detail in model.FLM_MaterialAuditCollect.Where(c => c.MaterialAuditID == obj.ID))
                            model.FLM_MaterialAuditCollect.Remove(detail);
                        foreach (var detail in model.FLM_MaterialAuditDetail.Where(c => c.MaterialAuditID == obj.ID))
                            model.FLM_MaterialAuditDetail.Remove(detail);
                        model.FLM_MaterialAudit.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult ALL_FLMMaterialAuditStatus()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.SYS_Var.Where(c => c.ID == -(int)SYSVarType.MaterialAuditStatusOpen || c.ID == -(int)SYSVarType.MaterialAuditStatusHasData || c.ID == -(int)SYSVarType.MaterialAuditStatusClosed).Select(c => new SYSVar
                    {

                        ID = c.ID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<SYSVar>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult FLMMaterialAudit_DITOMaster_List(string request, int id)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_MaterialAuditCollect.Where(c => c.MaterialAuditID == id && c.DITOMasterID > 0).Select(c => new DTOFLMMaterialAuditCollect_Master
                    {
                        ID = c.ID,
                        VehicleID = c.OPS_DITOMaster.VehicleID,
                        DITOMasterID = c.DITOMasterID,
                        RegNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                        Code = c.OPS_DITOMaster.Code,
                        DriverID = c.OPS_DITOMaster.DriverID1,
                        DriverName = c.OPS_DITOMaster.DriverName1,
                        ATA = c.OPS_DITOMaster.ATA,
                        ATD = c.OPS_DITOMaster.ATD,
                        ETA = c.OPS_DITOMaster.ETA,
                        ETD = c.OPS_DITOMaster.ETD,
                        KM = c.KM,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMaterialAuditCollect_Master>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOResult FLMMaterialAudit_COTOMaster_List(string request, int id)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_MaterialAuditCollect.Where(c => c.MaterialAuditID == id && c.COTOMasterID > 0).Select(c => new DTOFLMMaterialAuditCollect_Master
                    {
                        ID = c.ID,
                        VehicleID = c.OPS_COTOMaster.VehicleID,
                        RomoocID = c.OPS_COTOMaster.RomoocID,
                        RegNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                        Code = c.OPS_COTOMaster.Code,
                        DriverID = c.OPS_COTOMaster.DriverID1,
                        DriverName = c.OPS_COTOMaster.DriverName1,
                        ATA = c.OPS_COTOMaster.ATA,
                        ATD = c.OPS_COTOMaster.ATD,
                        ETA = c.OPS_COTOMaster.ETA,
                        ETD = c.OPS_COTOMaster.ETD,
                        KM = c.KM,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMaterialAuditCollect_Master>; ;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOResult FLMMaterialAudit_Receipt_List(string request, int id)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_MaterialAuditCollect.Where(c => c.MaterialAuditID == id && c.ReceiptID > 0).Select(c => new DTOFLMMaterialAuditCollect_Receipt
                    {
                        ID = c.ID,
                        ReceiptID = c.ReceiptID,
                        Code = c.FLM_Receipt.Code,
                        DateReceipt = c.FLM_Receipt.DateReceipt,
                        KM = c.KM,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMaterialAuditCollect_Receipt>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOResult FLMMaterialAudit_Result_List(string request, int id)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_MaterialAuditDetail.Where(c => c.MaterialAuditID == id).Select(c => new DTOFLMMaterialAuditDetail
                    {
                        ID = c.ID,
                        RegNo = c.FLM_Asset.VehicleID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID > 0 ? c.FLM_Asset.CAT_Romooc.RegNo : c.FLM_Asset.Code,
                        NoteModified = c.NoteModified,
                        MaterialID = c.MaterialID,
                        Code = c.FLM_Material.Code,
                        QuantityModified = c.QuantityModified,
                        QuantityReceipt = c.QuantityReceipt,
                        QuantityRemain = c.QuantityRemain,
                        QuantityTOMaster = c.QuantityTOMaster,
                        QuantityTotal = c.QuantityTotal,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMaterialAuditDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMMaterialAudit_Generate(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_MaterialAudit.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        if (obj.MaterialAuditStatusID == -(int)SYSVarType.MaterialAuditStatusClosed)
                            throw FaultHelper.BusinessFault(null, null, "Đợt đối chiếu đã đóng, không thể lấy dữ liệu!");

                        if (obj.MaterialAuditStatusID == -(int)SYSVarType.MaterialAuditStatusOpen)
                            obj.MaterialAuditStatusID = -(int)SYSVarType.MaterialAuditStatusHasData;

                        foreach (var detail in model.FLM_MaterialAuditCollect.Where(c => c.MaterialAuditID == id))
                            model.FLM_MaterialAuditCollect.Remove(detail);
                        foreach (var detail in model.FLM_MaterialAuditDetail.Where(c => c.MaterialAuditID == id))
                            model.FLM_MaterialAuditDetail.Remove(detail);
                        model.SaveChanges();

                        var dtfrom = obj.DateFrom.Date;
                        var dtto = obj.DateTo.Date.AddDays(1);

                        List<FLM_MaterialAuditCollect> lstCollect = new List<FLM_MaterialAuditCollect>();
                        List<DTOFLMMaterialAudit_Temp> lstDetail = new List<DTOFLMMaterialAudit_Temp>();
                        List<FLM_MaterialAuditDetail> lstPrevious = new List<FLM_MaterialAuditDetail>();

                        // Lấy thông tin đợt gần nhất
                        var objPrev = model.FLM_MaterialAudit.Where(c => c.MaterialAuditStatusID == -(int)SYSVarType.MaterialAuditStatusClosed && c.DateTo < obj.DateFrom).OrderByDescending(c => c.DateTo).FirstOrDefault();
                        if (objPrev != null)
                        {
                            lstPrevious = model.FLM_MaterialAuditDetail.Where(c => c.MaterialAuditID == objPrev.ID).Select(c => new FLM_MaterialAuditDetail
                            {
                                AssetID = c.AssetID,
                                MaterialID = c.MaterialID,
                                QuantityModified = c.QuantityModified,
                            }).ToList();
                        }

                        var lstQuota = model.FIN_PLDetails.Where(c => c.FIN_PL.SYSCustomerID == Account.SYSCustomerID && c.FIN_PL.Effdate >= dtfrom && c.FIN_PL.Effdate < dtto && c.CostID == (int)CATCostType.COTOMaterialQuota).Select(c => new
                        {
                            c.FIN_PL.DITOMasterID,
                            c.FIN_PL.COTOMasterID,
                            Note = c.Note,
                            Note1 = c.Note1,
                            Quantity = c.Quantity.HasValue ? c.Quantity.Value : 0,
                            MaterialCode = c.TypeOfPriceDIExCode,
                        }).ToList();

                        // Lấy data
                        foreach (var item in model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.VehicleID > 0 && c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived && c.ATD >= dtfrom && c.ATD < dtto))
                        {
                            var asset = model.FLM_Asset.FirstOrDefault(c => c.VehicleID == item.VehicleID);
                            if (asset != null)
                            {
                                FLM_MaterialAuditCollect objCol = new FLM_MaterialAuditCollect();
                                objCol.CreatedBy = Account.UserName;
                                objCol.CreatedDate = DateTime.Now;
                                objCol.MaterialAuditID = obj.ID;
                                objCol.AssetID = asset.ID;
                                objCol.DITOMasterID = item.ID;
                                model.FLM_MaterialAuditCollect.Add(objCol);
                                lstCollect.Add(objCol);

                                var lstMasterQuota = lstQuota.Where(c => c.DITOMasterID == item.ID && !string.IsNullOrEmpty(c.Note)).Select(c => c.Note).ToList();
                                objCol.KM = lstMasterQuota.Select(c => double.Parse(c)).ToList().Sum();
                            }
                        }

                        foreach (var item in model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.VehicleID > 0 && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived && c.ATD >= dtfrom && c.ATD < dtto))
                        {
                            var asset = model.FLM_Asset.FirstOrDefault(c => c.VehicleID == item.VehicleID);
                            if (asset != null)
                            {
                                FLM_MaterialAuditCollect objCol = new FLM_MaterialAuditCollect();
                                objCol.CreatedBy = Account.UserName;
                                objCol.CreatedDate = DateTime.Now;
                                objCol.MaterialAuditID = obj.ID;
                                objCol.AssetID = asset.ID;
                                objCol.COTOMasterID = item.ID;
                                model.FLM_MaterialAuditCollect.Add(objCol);
                                lstCollect.Add(objCol);

                                var lstMasterQuota = lstQuota.Where(c => c.COTOMasterID == item.ID && !string.IsNullOrEmpty(c.Note)).Select(c => c.Note).ToList();
                                objCol.KM = lstMasterQuota.Select(c => double.Parse(c)).ToList().Sum();
                            }
                        }
                        
                        foreach (var item in model.FLM_ReceiptCost.Where(c => c.AssetID > 0 && c.FLM_Receipt.TypeOfReceiptID == -(int)SYSVarType.TypeOfReceiptMaterial && c.FLM_Receipt.SYSCustomerID == Account.SYSCustomerID && c.FLM_Receipt.IsApproved && c.FLM_Receipt.DateReceipt >= dtfrom && c.FLM_Receipt.DateReceipt < dtto))
                        {
                            FLM_MaterialAuditCollect objCol = new FLM_MaterialAuditCollect();
                            objCol.CreatedBy = Account.UserName;
                            objCol.CreatedDate = DateTime.Now;
                            objCol.MaterialAuditID = obj.ID;
                            objCol.AssetID = item.AssetID.Value;
                            objCol.ReceiptID = item.ReceiptID;
                            objCol.KMStart = item.KMStart;
                            objCol.KMEnd = item.KMEnd;
                            objCol.KM = objCol.KMStart > 0 && objCol.KMEnd > 0 ? objCol.KMEnd - objCol.KMStart : 0;
                            model.FLM_MaterialAuditCollect.Add(objCol);
                            lstCollect.Add(objCol);

                            var lstMaterial = model.FLM_ReceiptDetail.Where(c => c.ReceiptCostID == item.ID && c.MaterialID > 0).Select(c => new { MaterialID = c.MaterialID.Value, MaterialCode = c.FLM_Material.Code, c.Quantity }).ToList();
                            foreach (var material in lstMaterial)
                            {
                                var detail = lstDetail.FirstOrDefault(c => c.AssetID == item.AssetID && c.MaterialID == material.MaterialID);
                                if (detail == null)
                                {
                                    detail = new DTOFLMMaterialAudit_Temp();
                                    detail.AssetID = item.AssetID.Value;
                                    detail.MaterialID = material.MaterialID;
                                    detail.MaterialCode = material.MaterialCode;
                                    lstDetail.Add(detail);
                                }
                                detail.Quantity += material.Quantity;
                            }
                        }

                        foreach (var item in lstDetail)
                        {
                            FLM_MaterialAuditDetail objDetail = new FLM_MaterialAuditDetail();
                            objDetail.CreatedBy = Account.UserName;
                            objDetail.CreatedDate = DateTime.Now;
                            objDetail.MaterialAuditID = obj.ID;
                            objDetail.AssetID = item.AssetID;
                            objDetail.MaterialID = item.MaterialID;
                            // Receipt
                            objDetail.QuantityReceipt = item.Quantity;
                            // Remain
                            var objDetailPrev = lstPrevious.FirstOrDefault(c => c.AssetID == item.AssetID && c.MaterialID == item.MaterialID);
                            if (objDetailPrev != null)
                                objDetail.QuantityRemain = objDetailPrev.QuantityModified;
                            // Master
                            var lstDIMasterID = lstCollect.Where(c => c.AssetID == item.AssetID && c.DITOMasterID > 0).Select(c => c.DITOMasterID.Value).Distinct().ToList();
                            var lstCOMasterID = lstCollect.Where(c => c.AssetID == item.AssetID && c.COTOMasterID > 0).Select(c => c.COTOMasterID.Value).Distinct().ToList();
                            var lstMasterQuota = lstQuota.Where(c => ((c.DITOMasterID > 0 && lstDIMasterID.Contains(c.DITOMasterID.Value)) || (c.COTOMasterID > 0 && lstCOMasterID.Contains(c.COTOMasterID.Value))) && c.MaterialCode == item.MaterialCode).ToList();
                            objDetail.QuantityTOMaster = lstMasterQuota.Count > 0 ? lstMasterQuota.Sum(c => c.Quantity) : 0;
                            objDetail.QuantityReceipt = Math.Round(objDetail.QuantityReceipt, 1);
                            objDetail.QuantityRemain = Math.Round(objDetail.QuantityReceipt, 1);
                            objDetail.QuantityTOMaster = Math.Round(objDetail.QuantityReceipt, 1);
                            // Total
                            objDetail.QuantityTotal = objDetail.QuantityModified = Math.Round(objDetail.QuantityReceipt + objDetail.QuantityRemain - objDetail.QuantityTOMaster, 1);
                            model.FLM_MaterialAuditDetail.Add(objDetail);
                        }

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMMaterialAudit_Close(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_MaterialAudit.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        if (obj.MaterialAuditStatusID == -(int)SYSVarType.MaterialAuditStatusOpen)
                            throw FaultHelper.BusinessFault(null, null, "Đợt đối chiếu chưa lấy dữ liệu, không thể đóng!");

                        obj.MaterialAuditStatusID = -(int)SYSVarType.MaterialAuditStatusClosed;
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void FLMMaterialAudit_Open(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_MaterialAudit.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        var objNext = model.FLM_MaterialAudit.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.MaterialAuditStatusID == -(int)SYSVarType.MaterialAuditStatusClosed && c.DateTo >= obj.DateTo);
                        if (objNext != null)
                            throw FaultHelper.BusinessFault(null, null, "Vui lòng mở đợt đối chiếu " + objNext.Code + " trước!");

                        obj.MaterialAuditStatusID = -(int)SYSVarType.MaterialAuditStatusOpen;
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        #endregion
    }
}

