using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Kendo.Mvc.Extensions;
using Data;
using DTO;
using System.Data.Entity;
using System.ServiceModel;
using System.Net;
using System.Net.Mail;
using Kendo.Mvc;
using Kendo.Mvc.UI;

namespace Business
{
    public class BLOperation : Base, IBase
    {
        #region Variables
        const int NoDigit = 6;
        const string DICodePrefix = "DI";
        const string DICodeNum = "0000000";
        const string COCodePrefix = "CO";
        const string COCodeNum = "0000000";
        const string DIVehicleCode = "[Chờ nhập xe]";
        const string COVehicleCode = "[Chờ nhập xe]";
        const string CORomoocCode = "[Chờ nhập romooc]";

        const int iLO = -(int)SYSVarType.ServiceOfOrderLocal;
        const int iIM = -(int)SYSVarType.ServiceOfOrderImport;
        const int iEx = -(int)SYSVarType.ServiceOfOrderExport;
        const int iFCL = -(int)SYSVarType.TransportModeFCL;
        const int iFTL = -(int)SYSVarType.TransportModeFTL;
        const int iLTL = -(int)SYSVarType.TransportModeLTL;
        #endregion

        #region Common

        private void DI_TOMasterFTLCreate(DataEntities model, List<DTODIAppointmentRate> lstVehicle)
        {
            List<int> lstOPSGroupID = new List<int>();
            if (lstVehicle != null && lstVehicle.Count > 0)
            {
                Dictionary<string, int> dicVehicle = new Dictionary<string, int>();
                foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0).Select(c => new { c.CreateVehicleCode }).Distinct())
                {
                    string regNo = itemVehicle.CreateVehicleCode.Trim();
                    string drivername = string.Empty;
                    string cellphone = string.Empty;
                    double? maxWeight = null;
                    double? maxCBM = null;
                    var currentVehicle = lstVehicle.FirstOrDefault(c => c.CreateVehicleCode == itemVehicle.CreateVehicleCode && c.CreateTelephone != null && c.CreateTelephone != "");
                    if (currentVehicle != null)
                    {
                        drivername = !string.IsNullOrEmpty(currentVehicle.CreateDriverName) ? currentVehicle.CreateDriverName : "";
                        cellphone = currentVehicle.CreateTelephone;
                        maxWeight = currentVehicle.MaxWeight;
                        maxCBM = currentVehicle.MaxCBM;
                    }

                    var obj = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo == regNo);
                    if (obj == null)
                    {
                        obj = new CAT_Vehicle();
                        obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTruck;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.MaxWeight = maxWeight;
                        obj.MaxCapacity = maxCBM;
                        obj.RegNo = regNo;
                        obj.IsOwn = false;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    if (!string.IsNullOrEmpty(drivername))
                        obj.DriverName = drivername;
                    if (!string.IsNullOrEmpty(cellphone))
                        obj.Cellphone = cellphone;

                    if (obj.ID < 1)
                        model.CAT_Vehicle.Add(obj);

                    foreach (var itemVendor in lstVehicle.Where(c => c.CreateVehicleCode == itemVehicle.CreateVehicleCode).Select(c => new { c.CreateVendorID }).Distinct())
                    {
                        if (itemVendor.CreateVendorID > 0)
                        {
                            var objCUS = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == itemVendor.CreateVendorID && c.VehicleID == obj.ID);
                            if (objCUS == null)
                            {
                                objCUS = new CUS_Vehicle();
                                objCUS.VehicleID = obj.ID;
                                objCUS.CustomerID = itemVendor.CreateVendorID;
                                objCUS.CreatedBy = Account.UserName;
                                objCUS.CreatedDate = DateTime.Now;

                                model.CUS_Vehicle.Add(objCUS);
                            }
                        }
                    }

                    model.SaveChanges();
                    dicVehicle.Add(regNo, obj.ID);
                }

                foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0 && c.TOMasterID > 0))
                {
                    if (dicVehicle.ContainsKey(itemVehicle.CreateVehicleCode))
                    {
                        OPS_CheckingTime(model, null, itemVehicle.TOMasterID, dicVehicle[itemVehicle.CreateVehicleCode], null, itemVehicle.CreateDateTime, itemVehicle.CreateDateTime.AddHours(2), false);

                        foreach (var item in model.OPS_DITOLocation.Where(c => c.DITOMasterID == itemVehicle.TOMasterID))
                        {
                            model.OPS_DITOLocation.Remove(item);
                        }

                        foreach (var item in model.OPS_DITO.Where(c => c.DITOMasterID == itemVehicle.TOMasterID))
                        {
                            foreach (var o in model.OPS_DITODetail.Where(c => c.DITOID == item.ID))
                                model.OPS_DITODetail.Remove(o);
                            model.OPS_DITO.Remove(item);
                        }
                    }
                }
                model.SaveChanges();

                foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0))
                {
                    if (dicVehicle.ContainsKey(itemVehicle.CreateVehicleCode))
                    {
                        var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == itemVehicle.TOMasterID);
                        if (objMaster != null)
                        {
                            objMaster.ModifiedBy = Account.UserName;
                            objMaster.ModifiedDate = DateTime.Now;

                            objMaster.VehicleID = dicVehicle[itemVehicle.CreateVehicleCode];
                            if (itemVehicle.CreateVendorID > 0)
                                objMaster.VendorOfVehicleID = itemVehicle.CreateVendorID;
                            else
                            {
                                objMaster.VendorOfVehicleID = Account.SYSCustomerID;
                                objMaster.DriverID1 = OPS_FindFLMDriver(model, itemVehicle.CreateDriverName);
                            }

                            objMaster.DriverName1 = itemVehicle.CreateDriverName;
                            objMaster.DriverTel1 = itemVehicle.CreateTelephone;

                            //objMaster.Code = DI_GetLastCode(model);
                            objMaster.IsHot = false;
                            objMaster.RateTime = 2;
                            objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                            objMaster.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                            objMaster.TransportModeID = -(int)SYSVarType.TransportModeFTL;
                            objMaster.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                            objMaster.SortOrder = itemVehicle.CreateSortOrder;
                            objMaster.ETD = itemVehicle.CreateDateTime;
                            objMaster.ETA = itemVehicle.CreateDateTime.AddHours(2);
                            objMaster.DateConfig = itemVehicle.CreateDateTime.AddHours(2);
                            objMaster.IsRouteVendor = false;
                            objMaster.IsRouteCustomer = false;
                            objMaster.IsLoading = false;
                            objMaster.IsBidding = false;
                            objMaster.Note = "";
                            objMaster.KM = 0;

                            var objRate = model.OPS_DITORate.Where(c => c.DITOMasterID == itemVehicle.TOMasterID).OrderBy(c => c.SortOrder).FirstOrDefault();
                            if (objRate == null)
                            {
                                objRate = new OPS_DITORate();
                                objRate.CreatedBy = Account.UserName;
                                objRate.CreatedDate = DateTime.Now;
                                objRate.OPS_DITOMaster = objMaster;
                                objRate.SortOrder = 1;
                                objRate.IsAccept = null;
                                objRate.IsSend = true;
                                objRate.Debit = 0;
                                objRate.IsManual = false;
                                model.OPS_DITORate.Add(objRate);
                            }
                            else
                            {
                                objRate.ModifiedBy = Account.UserName;
                                objRate.ModifiedDate = DateTime.Now;
                            }
                            if (itemVehicle.CreateVendorID > 0)
                                objRate.VendorID = itemVehicle.CreateVendorID;
                            else
                                objRate.VendorID = null;
                            objRate.FirstRateTime = DateTime.Now;
                            objRate.LastRateTime = DateTime.Now.AddHours(2);

                            // DITOLocation                            
                            int sLocation = 1;
                            int soLocation = 1;
                            var sSet = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).Select(c => c.Setting).FirstOrDefault();
                            if (!string.IsNullOrEmpty(sSet))
                            {
                                var oSet = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(sSet).FirstOrDefault();
                                if (oSet != null)
                                {
                                    var objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationFromID);
                                    if (objCheck != null)
                                        sLocation = oSet.LocationFromID;
                                    objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationToID);
                                    if (objCheck != null)
                                        soLocation = oSet.LocationToID;
                                }
                            }

                            int idx = 1;
                            OPS_DITOLocation oLocation = new OPS_DITOLocation();
                            oLocation.LocationID = sLocation;
                            oLocation.SortOrder = idx++;
                            oLocation.OPS_DITOMaster = objMaster;
                            oLocation.CreatedBy = Account.UserName;
                            oLocation.CreatedDate = DateTime.Now;
                            oLocation.DateComeEstimate = objMaster.ETD;
                            oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                            model.OPS_DITOLocation.Add(oLocation);

                            List<int> dataLocationFrom = new List<int>();
                            List<int> dataLocationTo = new List<int>();
                            Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();

                            var dataOPS = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objMaster.ID).ToList();

                            foreach (var sGop in dataOPS)
                            {
                                var fID = sGop.ORD_GroupProduct.CUS_Location.LocationID;
                                var tID = sGop.ORD_GroupProduct.CUS_Location1.LocationID;

                                dataLocationFrom.Add(fID);
                                if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                    dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;
                                else if (dicLocationTime[fID] > sGop.ORD_GroupProduct.ETD)
                                    dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;

                                dataLocationTo.Add(tID);
                                if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                    dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;
                                else if (dicLocationTime[tID] > sGop.ORD_GroupProduct.ETA)
                                    dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;
                            }

                            var dataL = dataLocationFrom.Distinct().ToList();
                            dataL.AddRange(dataLocationTo.Distinct().ToList());
                            dataL = dataL.Distinct().ToList();
                            for (var i = 0; i < dataL.Count; i++)
                            {
                                //Create DITOLocation
                                OPS_DITOLocation oL = new OPS_DITOLocation();
                                oL.CreatedBy = Account.UserName;
                                oL.CreatedDate = DateTime.Now;
                                model.OPS_DITOLocation.Add(oL);
                                oL.OPS_DITOMaster = objMaster;
                                oL.LocationID = dataL[i];
                                oL.SortOrder = idx++;
                                oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                                if (dicLocationTime.ContainsKey(dataL[i]))
                                    oL.DateComeEstimate = dicLocationTime[dataL[i]];

                                if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                                if (i != 0)
                                {
                                    //Create DITO
                                    OPS_DITO oD = new OPS_DITO();
                                    oD.CreatedBy = Account.UserName;
                                    oD.CreatedDate = DateTime.Now;
                                    oD.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                                    oD.OPS_DITOMaster = objMaster;
                                    oD.LocationFromID = dataL[i - 1];
                                    oD.LocationToID = dataL[i];
                                    //oD.RoutingID = OPS_CreateRoute(model, dataL[i - 1], dataL[i]);
                                    oD.SortOrder = i;
                                    oD.IsOPS = true;
                                    model.OPS_DITO.Add(oD);

                                    if (i == dataL.Count - 1)
                                    {
                                        //Create DITO
                                        OPS_DITO oDEnd = new OPS_DITO();
                                        oDEnd.CreatedBy = Account.UserName;
                                        oDEnd.CreatedDate = DateTime.Now;
                                        oDEnd.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                                        oDEnd.OPS_DITOMaster = objMaster;
                                        oDEnd.LocationFromID = dataL[i];
                                        oDEnd.LocationToID = soLocation;
                                        //oDEnd.RoutingID = OPS_CreateRoute(model, dataL[i], soLocation);
                                        oDEnd.SortOrder = i + 1;
                                        oDEnd.IsOPS = true;
                                        model.OPS_DITO.Add(oDEnd);
                                    }
                                }
                                else
                                {
                                    //Create DITO
                                    OPS_DITO oD = new OPS_DITO();
                                    oD.CreatedBy = Account.UserName;
                                    oD.CreatedDate = DateTime.Now;
                                    oD.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                                    oD.OPS_DITOMaster = objMaster;
                                    oD.LocationFromID = sLocation;
                                    oD.LocationToID = dataL[i];
                                    //oD.RoutingID = OPS_CreateRoute(model, sLocation, dataL[i]);
                                    oD.SortOrder = 1;
                                    oD.IsOPS = true;
                                    model.OPS_DITO.Add(oD);
                                }
                            }

                            OPS_DITOLocation osLocation = new OPS_DITOLocation();
                            osLocation.LocationID = soLocation;
                            osLocation.SortOrder = idx++;
                            osLocation.OPS_DITOMaster = objMaster;
                            osLocation.CreatedBy = Account.UserName;
                            osLocation.CreatedDate = DateTime.Now;
                            osLocation.DateComeEstimate = objMaster.ETA;
                            osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                            model.OPS_DITOLocation.Add(osLocation);

                            objMaster.TotalLocation = idx;

                            HelperTimeSheet.Remove(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                            HelperTimeSheet.Create(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        }
                        model.SaveChanges();
                    }
                }

                model.SaveChanges();
            }
        }

        private DTOOPSDITOMaster DI_TOMasterCreate(DataEntities model, DTOOPSDITOMaster master)
        {
            if (master.ListGroupProduct == null || master.ListGroupProduct.Where(c => c.OrderGroupProductID > 0).Count() == 0)
                throw FaultHelper.BusinessFault(null, null, "Không có dữ liệu nhóm sản phẩm");
            else if (master.ListGroupProduct.Where(c => c.OrderGroupProductID == null || c.OrderGroupProductID < 1).Count() > 0)
                throw FaultHelper.BusinessFault(null, null, "Không nhận dữ liệu nhóm sản phẩm rỗng");
            else if (master.ListTO == null || master.ListTO.Count == 0)
                throw FaultHelper.BusinessFault(null, null, "Không có dữ liệu tuyến đường");
            else
            {
                foreach (var item in model.OPS_DITODetail.Where(c => c.OPS_DITO.DITOMasterID == master.ID))
                    model.OPS_DITODetail.Remove(item);
                foreach (var item in model.OPS_DITO.Where(c => c.DITOMasterID == master.ID))
                    model.OPS_DITO.Remove(item);
                foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == master.ID))
                {
                    foreach (var kpi in model.KPI_KPITime.Where(c => c.DITOGroupProductID == item.ID))
                        model.KPI_KPITime.Remove(kpi);
                    model.OPS_DITOGroupProduct.Remove(item);
                }

                foreach (var item in model.KPI_KPITime.Where(c => c.DITOMasterID == master.ID))
                    model.KPI_KPITime.Remove(item);
                model.SaveChanges();

                var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == master.ID);
                if (objMaster == null)
                {
                    objMaster = new OPS_DITOMaster();
                    objMaster.CreatedBy = Account.UserName;
                    objMaster.CreatedDate = DateTime.Now;
                    objMaster.SYSCustomerID = Account.SYSCustomerID;

                    objMaster.Code = DI_GetLastCode(model);
                    objMaster.IsHot = false;
                    objMaster.RateTime = 0;
                    objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterPlanning;
                    objMaster.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                    model.OPS_DITOMaster.Add(objMaster);
                }
                else
                {
                    objMaster.ModifiedBy = Account.UserName;
                    objMaster.ModifiedDate = DateTime.Now;
                }
                objMaster.SortOrder = master.SortOrder;
                objMaster.ETD = master.ETD;
                objMaster.ETA = master.ETA;

                OPS_CheckingTime(model, OPS_SystemSetting_Get(model), objMaster.ID, objMaster.VehicleID, null, objMaster.ETD, objMaster.ETA, false);

                objMaster.DateConfig = master.ETD;
                objMaster.IsRouteVendor = master.IsRouteVendor;
                objMaster.IsRouteCustomer = master.IsRouteCustomer;
                objMaster.IsLoading = master.IsLoading;
                objMaster.IsBidding = master.IsBidding;
                objMaster.BiddingID = master.BiddingID;
                objMaster.Note = master.Note;
                objMaster.GroupOfVehicleID = master.GroupOfVehicleID;
                objMaster.KM = master.KM;
                objMaster.TransportModeID = master.TransportModeID;
                objMaster.TypeOfOrderID = master.TypeOfOrderID;
                objMaster.ContractID = master.ContractID;

                Dictionary<int, OPS_DITOGroupProduct> dicGroup = new Dictionary<int, OPS_DITOGroupProduct>();
                foreach (var groupproduct in master.ListGroupProduct)
                {
                    var objGroup = new OPS_DITOGroupProduct();
                    objGroup.CreatedBy = Account.UserName;
                    objGroup.CreatedDate = DateTime.Now;

                    objGroup.IsInput = true;
                    objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                    objGroup.GroupSort = groupproduct.GroupSort;
                    objGroup.OPS_DITOMaster = objMaster;
                    objGroup.OrderGroupProductID = groupproduct.OrderGroupProductID;
                    objGroup.Ton = groupproduct.Ton;
                    objGroup.CBM = groupproduct.CBM;
                    objGroup.Quantity = groupproduct.Quantity;
                    objGroup.TonTranfer = groupproduct.TonTranfer;
                    objGroup.CBMTranfer = groupproduct.CBMTranfer;
                    objGroup.QuantityTranfer = groupproduct.QuantityTranfer;
                    objGroup.TonBBGN = groupproduct.TonBBGN;
                    objGroup.CBMBBGN = groupproduct.CBMBBGN;
                    objGroup.QuantityBBGN = groupproduct.QuantityBBGN;
                    objGroup.QuantityLoading = groupproduct.QuantityLoading;
                    objGroup.Note = groupproduct.Note;
                    objGroup.GroupSort = groupproduct.GroupSort;
                    objGroup.DNCode = groupproduct.DNCode;
                    objGroup.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                    objGroup.DateDN = groupproduct.DateDN;
                    model.OPS_DITOGroupProduct.Add(objGroup);
                    if (!dicGroup.ContainsKey(objGroup.OrderGroupProductID.Value))
                        dicGroup.Add(objGroup.OrderGroupProductID.Value, objGroup);
                }

                int Count = 1;
                var lstRoutingID = master.ListTO.Select(c => c.RoutingID).Distinct().ToList();
                var lstRouting = model.CAT_Routing.Where(c => lstRoutingID.Contains(c.ID));
                foreach (var to in master.ListTO.OrderBy(c => c.SortOrder))
                {
                    var objTO = new OPS_DITO();
                    objTO.CreatedBy = Account.UserName;
                    objTO.CreatedDate = DateTime.Now;
                    objTO.SortOrder = to.SortOrder;
                    objTO.OPS_DITOMaster = objMaster;
                    objTO.LocationFromID = to.LocationFromID;
                    objTO.LocationToID = to.LocationToID;
                    objTO.RoutingID = to.RoutingID;
                    objTO.ETD = to.ETD;
                    objTO.ETA = to.ETA;

                    objTO.StatusOfDITOID = to.StatusOfDITOID;
                    objTO.IsOPS = to.IsOPS;
                    objTO.KM = to.KM;
                    model.OPS_DITO.Add(objTO);

                    // Lưu OPS_DITOLocation
                    if (Count == master.ListTO.Count)
                    {
                        var location1 = new OPS_DITOLocation();
                        location1.CreatedBy = Account.UserName;
                        location1.CreatedDate = DateTime.Now;
                        location1.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        location1.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        location1.OPS_DITOMaster = objMaster;
                        location1.SortOrder = Count;

                        var routing = lstRouting.FirstOrDefault(c => c.ID == to.RoutingID);
                        if (routing != null)
                            location1.LocationID = routing.LocationFromID;
                        if (master.ListGroupProduct.Count(c => c.CATLocationFromID == location1.LocationID) > 0)
                            location1.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                        if (master.ListGroupProduct.Count(c => c.CATLocationToID == location1.LocationID) > 0)
                            location1.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                        model.OPS_DITOLocation.Add(location1);

                        var location2 = new OPS_DITOLocation();
                        location2.CreatedBy = Account.UserName;
                        location2.CreatedDate = DateTime.Now;
                        location2.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        location2.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        location2.OPS_DITOMaster = objMaster;
                        location2.SortOrder = Count + 1;
                        if (routing != null)
                            location2.LocationID = routing.LocationToID;
                        if (master.ListGroupProduct.Count(c => c.CATLocationFromID == location2.LocationID) > 0)
                            location2.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                        if (master.ListGroupProduct.Count(c => c.CATLocationToID == location2.LocationID) > 0)
                            location2.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                        model.OPS_DITOLocation.Add(location2);
                    }
                    else
                    {
                        var location = new OPS_DITOLocation();
                        location.CreatedBy = Account.UserName;
                        location.CreatedDate = DateTime.Now;
                        location.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        location.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        location.OPS_DITOMaster = objMaster;
                        location.SortOrder = Count;
                        var routing = lstRouting.FirstOrDefault(c => c.ID == to.RoutingID);
                        if (routing != null)
                            location.LocationID = routing.LocationFromID;
                        if (master.ListGroupProduct.Count(c => c.CATLocationFromID == location.LocationID) > 0)
                            location.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                        if (master.ListGroupProduct.Count(c => c.CATLocationToID == location.LocationID) > 0)
                            location.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                        model.OPS_DITOLocation.Add(location);
                    }
                    Count++;
                }

                model.SaveChanges();
                objMaster.Code = DICodePrefix + objMaster.ID.ToString(DICodeNum);
                model.SaveChanges();

                master.ID = objMaster.ID;

                return master;
            }
        }

        private void DI_TOMasterMinCreate(DataEntities model, List<DTODIAppointmentOrder> lstOrder, List<DTODIAppointmentRate> lstVehicle)
        {
            List<int> lstOPSGroupID = new List<int>();
            if (lstVehicle != null && lstVehicle.Count > 0)
            {
                Dictionary<string, int> dicVehicle = new Dictionary<string, int>();
                foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0).Select(c => new { c.CreateVehicleCode }).Distinct())
                {
                    string regNo = itemVehicle.CreateVehicleCode.Trim();
                    string drivername = string.Empty;
                    string cellphone = string.Empty;
                    double? maxWeight = null;
                    double? maxCBM = null;
                    var currentVehicle = lstVehicle.FirstOrDefault(c => c.CreateVehicleCode == itemVehicle.CreateVehicleCode && c.CreateTelephone != null && c.CreateTelephone != "");
                    if (currentVehicle != null)
                    {
                        drivername = !string.IsNullOrEmpty(currentVehicle.CreateDriverName) ? currentVehicle.CreateDriverName : "";
                        cellphone = currentVehicle.CreateTelephone;
                        maxWeight = currentVehicle.MaxWeight;
                        maxCBM = currentVehicle.MaxCBM;
                    }

                    var obj = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo == regNo);
                    if (obj == null)
                    {
                        obj = new CAT_Vehicle();
                        obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTruck;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.MaxWeight = maxWeight;
                        obj.MaxCapacity = maxCBM;
                        obj.RegNo = regNo;
                        obj.IsOwn = false;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    if (!string.IsNullOrEmpty(drivername))
                        obj.DriverName = drivername;
                    if (!string.IsNullOrEmpty(cellphone))
                        obj.Cellphone = cellphone;

                    if (obj.ID < 1)
                        model.CAT_Vehicle.Add(obj);

                    foreach (var itemVendor in lstVehicle.Where(c => c.CreateVehicleCode == itemVehicle.CreateVehicleCode).Select(c => new { c.CreateVendorID }).Distinct())
                    {
                        if (itemVendor.CreateVendorID > 0)
                        {
                            var objCUS = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == itemVendor.CreateVendorID && c.VehicleID == obj.ID);
                            if (objCUS == null)
                            {
                                objCUS = new CUS_Vehicle();
                                objCUS.VehicleID = obj.ID;
                                objCUS.CustomerID = itemVendor.CreateVendorID;
                                objCUS.CreatedBy = Account.UserName;
                                objCUS.CreatedDate = DateTime.Now;

                                model.CUS_Vehicle.Add(objCUS);
                            }
                        }
                    }

                    model.SaveChanges();
                    dicVehicle.Add(regNo, obj.ID);
                }

                foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0 && c.TOMasterID > 0))
                {
                    if (dicVehicle.ContainsKey(itemVehicle.CreateVehicleCode))
                    {
                        foreach (var item in model.OPS_DITOLocation.Where(c => c.DITOMasterID == itemVehicle.TOMasterID))
                            model.OPS_DITOLocation.Remove(item);
                        foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == itemVehicle.TOMasterID))
                        {
                            item.DITOMasterID = null;
                            item.ModifiedBy = Account.UserName;
                            item.ModifiedDate = DateTime.Now;
                        }
                    }
                }
                model.SaveChanges();

                var lstGroupProduct = model.OPS_DITOGroupProduct.Where(c => ((c.DITOMasterID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterTendered) || c.DITOMasterID == null) &&
                    c.DNCode != null && c.DNCode != "" && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID).ToList();

                foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0))
                {
                    if (dicVehicle.ContainsKey(itemVehicle.CreateVehicleCode))
                    {
                        #region Master
                        var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == itemVehicle.TOMasterID);
                        if (objMaster == null)
                        {
                            objMaster = new OPS_DITOMaster();
                            objMaster.CreatedBy = Account.UserName;
                            objMaster.CreatedDate = DateTime.Now;
                            objMaster.SYSCustomerID = Account.SYSCustomerID;
                            objMaster.Code = DI_GetLastCode(model);
                            model.OPS_DITOMaster.Add(objMaster);
                        }
                        else
                        {
                            objMaster.ModifiedBy = Account.UserName;
                            objMaster.ModifiedDate = DateTime.Now;
                        }
                        objMaster.VehicleID = dicVehicle[itemVehicle.CreateVehicleCode];
                        if (itemVehicle.CreateVendorID > 0)
                            objMaster.VendorOfVehicleID = itemVehicle.CreateVendorID;
                        else
                        {
                            objMaster.VendorOfVehicleID = Account.SYSCustomerID;
                            objMaster.DriverID1 = OPS_FindFLMDriver(model, itemVehicle.CreateDriverName);
                        }

                        objMaster.DriverName1 = itemVehicle.CreateDriverName;
                        objMaster.DriverTel1 = itemVehicle.CreateTelephone;


                        objMaster.IsHot = false;
                        objMaster.RateTime = 2;
                        objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                        objMaster.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                        objMaster.TransportModeID = -(int)SYSVarType.TransportModeLTL;
                        objMaster.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                        objMaster.SortOrder = itemVehicle.CreateSortOrder;
                        objMaster.ETD = itemVehicle.CreateDateTime;
                        objMaster.ETA = itemVehicle.CreateDateTime.AddHours(2);
                        objMaster.DateConfig = itemVehicle.CreateDateTime.AddHours(2);
                        objMaster.IsRouteVendor = false;
                        objMaster.IsRouteCustomer = false;
                        objMaster.IsLoading = false;
                        objMaster.IsBidding = false;
                        objMaster.Note = "";
                        objMaster.KM = 0;

                        #endregion

                        #region Rate
                        var objRate = model.OPS_DITORate.Where(c => c.DITOMasterID == itemVehicle.TOMasterID).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objRate == null)
                        {
                            objRate = new OPS_DITORate();
                            objRate.CreatedBy = Account.UserName;
                            objRate.CreatedDate = DateTime.Now;
                            objRate.OPS_DITOMaster = objMaster;
                            objRate.SortOrder = 1;
                            objRate.IsAccept = null;
                            objRate.IsSend = true;
                            objRate.Debit = 0;
                            objRate.IsManual = false;
                            model.OPS_DITORate.Add(objRate);
                        }
                        else
                        {
                            objRate.ModifiedBy = Account.UserName;
                            objRate.ModifiedDate = DateTime.Now;

                        }
                        if (itemVehicle.CreateVendorID > 0)
                            objRate.VendorID = itemVehicle.CreateVendorID;
                        else
                            objRate.VendorID = null;
                        objRate.FirstRateTime = DateTime.Now;
                        objRate.LastRateTime = DateTime.Now.AddHours(2);

                        #endregion

                        #region Location
                        var lstLocation = new List<int>();
                        lstLocation.Add(LocationDefaultID);
                        foreach (var localID in lstOrder.Where(c => c.CreateSortOrder == itemVehicle.CreateSortOrder).Select(c => c.LocationFromID).Distinct())
                            if (!lstLocation.Contains(localID))
                                lstLocation.Add(localID);
                        foreach (var localID in lstOrder.Where(c => c.CreateSortOrder == itemVehicle.CreateSortOrder).Select(c => c.LocationToID).Distinct())
                            if (!lstLocation.Contains(localID))
                                lstLocation.Add(localID);
                        for (int sort = 0; sort < lstLocation.Count; sort++)
                        {
                            var objLocation = new OPS_DITOLocation();
                            objLocation.CreatedBy = Account.UserName;
                            objLocation.CreatedDate = DateTime.Now;
                            objLocation.OPS_DITOMaster = objMaster;
                            objLocation.LocationID = lstLocation[sort];
                            objLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                            if (lstOrder.Count(c => c.LocationFromID == objLocation.LocationID) > 0)
                                objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            if (lstOrder.Count(c => c.LocationToID == objLocation.LocationID) > 0)
                                objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                            objLocation.SortOrder = sort + 1;
                            model.OPS_DITOLocation.Add(objLocation);
                        }
                        #endregion

                        #region Group
                        List<int> lstTotalLocation = new List<int>();
                        Dictionary<int, OPS_DITOGroupProduct> dicGroup = new Dictionary<int, OPS_DITOGroupProduct>();
                        foreach (var itemOrder in lstOrder.Where(c => c.CreateSortOrder == itemVehicle.CreateSortOrder))
                        {
                            var objGroup = lstGroupProduct.FirstOrDefault(c => c.ID == itemOrder.ID);
                            if (objGroup != null)
                            {
                                objMaster.TypeOfOrderID = OPS_FindTypeOfOrder(model, objMaster.TypeOfOrderID, objGroup.ID);
                                OPS_CountLocation(model, lstTotalLocation, objGroup.ID);
                                lstOPSGroupID.Add(objGroup.ID);
                                var sub = objGroup.Ton - itemOrder.Ton;
                                if (sub > 0.001)
                                {
                                    objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = Math.Round(sub, NoDigit, MidpointRounding.AwayFromZero);
                                    objGroup.IsSplit = true;

                                    var objSub = new OPS_DITOGroupProduct();
                                    objSub.CreatedBy = Account.UserName;
                                    objSub.CreatedDate = DateTime.Now;
                                    objSub.IsSplit = true;
                                    objSub.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                                    objSub.OPS_DITOMaster = objMaster;
                                    objSub.OrderGroupProductID = objGroup.OrderGroupProductID;
                                    objSub.QuantityLoading = 0;
                                    objSub.IsInput = false;
                                    objSub.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                    objSub.IsOrigin = itemOrder.IsOrigin;
                                    objSub.Ton = objSub.TonTranfer = objSub.TonBBGN = Math.Round(itemOrder.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                    objSub.CBM = objSub.CBMTranfer = objSub.CBMBBGN = 0;
                                    objSub.Quantity = objSub.QuantityTranfer = objSub.QuantityBBGN = 0;
                                    objSub.GroupSort = objGroup.GroupSort + "_" + objSub.OrderGroupProductID;
                                    objSub.DNCode = objGroup.DNCode;
                                    objSub.DateDN = objGroup.DateDN;
                                    model.OPS_DITOGroupProduct.Add(objSub);
                                }
                                else
                                {
                                    objGroup.OPS_DITOMaster = objMaster;
                                    objGroup.IsOrigin = itemOrder.IsOrigin;
                                    objGroup.ModifiedBy = Account.UserName;
                                    objGroup.ModifiedDate = DateTime.Now;
                                }
                            }
                        }
                        objMaster.TotalLocation = lstTotalLocation.Count;
                        #endregion

                        model.SaveChanges();

                        objMaster.Code = DICodePrefix + objMaster.ID.ToString(DICodeNum);
                        model.SaveChanges();
                    }
                }
                DI_TOMasterCreateTimeLine(model, lstOPSGroupID);
            }
        }

        private void DI_TOMasterMinCreateNoDN(DataEntities model, List<DTODIAppointmentOrder> lstOrder, List<DTODIAppointmentRate> lstVehicle)
        {
            if (lstVehicle != null && lstVehicle.Count > 0)
            {
                Dictionary<string, int> dicVehicle = new Dictionary<string, int>();
                foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0).Select(c => new { c.CreateVehicleCode }).Distinct())
                {
                    string regNo = itemVehicle.CreateVehicleCode.Trim();
                    string drivername = string.Empty;
                    string cellphone = string.Empty;
                    double? maxWeight = null;
                    double? maxCBM = null;
                    var currentVehicle = lstVehicle.FirstOrDefault(c => c.CreateVehicleCode == itemVehicle.CreateVehicleCode && c.CreateTelephone != null && c.CreateTelephone != "");
                    if (currentVehicle != null)
                    {
                        drivername = !string.IsNullOrEmpty(currentVehicle.CreateDriverName) ? currentVehicle.CreateDriverName : "";
                        cellphone = currentVehicle.CreateTelephone;
                        maxWeight = currentVehicle.MaxWeight;
                        maxCBM = currentVehicle.MaxCBM;
                    }

                    var obj = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo == regNo);
                    if (obj == null)
                    {
                        obj = new CAT_Vehicle();
                        obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTruck;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.MaxWeight = maxWeight;
                        obj.MaxCapacity = maxCBM;
                        obj.RegNo = regNo;
                        obj.IsOwn = false;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    if (!string.IsNullOrEmpty(drivername))
                        obj.DriverName = drivername;
                    if (!string.IsNullOrEmpty(cellphone))
                        obj.Cellphone = cellphone;

                    if (obj.ID < 1)
                        model.CAT_Vehicle.Add(obj);

                    foreach (var itemVendor in lstVehicle.Where(c => c.CreateVehicleCode == itemVehicle.CreateVehicleCode).Select(c => new { c.CreateVendorID }).Distinct())
                    {
                        if (itemVendor.CreateVendorID > 0)
                        {
                            var objCUS = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == itemVendor.CreateVendorID && c.VehicleID == obj.ID);
                            if (objCUS == null)
                            {
                                objCUS = new CUS_Vehicle();
                                objCUS.VehicleID = obj.ID;
                                objCUS.CustomerID = itemVendor.CreateVendorID;
                                objCUS.CreatedBy = Account.UserName;
                                objCUS.CreatedDate = DateTime.Now;

                                model.CUS_Vehicle.Add(objCUS);
                            }
                        }
                    }

                    model.SaveChanges();
                    dicVehicle.Add(regNo, obj.ID);
                }

                foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0 && c.TOMasterID > 0))
                {
                    if (dicVehicle.ContainsKey(itemVehicle.CreateVehicleCode))
                    {
                        OPS_CheckingTime(model, OPS_SystemSetting_Get(model), itemVehicle.TOMasterID, dicVehicle[itemVehicle.CreateVehicleCode], null, itemVehicle.CreateDateTime, itemVehicle.CreateDateTime.AddHours(2), false);

                        foreach (var item in model.OPS_DITOLocation.Where(c => c.DITOMasterID == itemVehicle.TOMasterID))
                            model.OPS_DITOLocation.Remove(item);
                        foreach (var item in model.OPS_DITOStation.Where(c => c.DITOMasterID == itemVehicle.TOMasterID))
                            model.OPS_DITOStation.Remove(item);
                        foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == itemVehicle.TOMasterID))
                        {
                            item.DITOMasterID = null;
                            item.ModifiedBy = Account.UserName;
                            item.ModifiedDate = DateTime.Now;
                        }
                    }
                }
                model.SaveChanges();

                var lstGroupProduct = model.OPS_DITOGroupProduct.Where(c => ((c.DITOMasterID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterTendered) || c.DITOMasterID == null) &&
                    c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID).ToList();

                foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0))
                {
                    if (dicVehicle.ContainsKey(itemVehicle.CreateVehicleCode))
                    {
                        #region Master
                        var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == itemVehicle.TOMasterID);
                        if (objMaster == null)
                        {
                            objMaster = new OPS_DITOMaster();
                            objMaster.CreatedBy = Account.UserName;
                            objMaster.CreatedDate = DateTime.Now;
                            objMaster.SYSCustomerID = Account.SYSCustomerID;
                            objMaster.Code = DI_GetLastCode(model);
                            model.OPS_DITOMaster.Add(objMaster);
                        }
                        else
                        {
                            objMaster.ModifiedBy = Account.UserName;
                            objMaster.ModifiedDate = DateTime.Now;
                        }

                        if (itemVehicle.CreateVendorID > 0)
                            objMaster.VendorOfVehicleID = itemVehicle.CreateVendorID;
                        else
                        {
                            objMaster.VendorOfVehicleID = Account.SYSCustomerID;
                            objMaster.DriverID1 = OPS_FindFLMDriver(model, itemVehicle.CreateDriverName);
                        }

                        objMaster.VehicleID = dicVehicle[itemVehicle.CreateVehicleCode];

                        objMaster.DriverName1 = itemVehicle.CreateDriverName;
                        objMaster.DriverTel1 = itemVehicle.CreateTelephone;

                        objMaster.IsHot = false;
                        objMaster.RateTime = 2;
                        objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                        objMaster.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                        objMaster.TransportModeID = -(int)SYSVarType.TransportModeLTL;
                        objMaster.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                        objMaster.SortOrder = itemVehicle.CreateSortOrder;
                        objMaster.ETD = itemVehicle.CreateDateTime;
                        objMaster.ETA = itemVehicle.CreateDateTime.AddHours(2);
                        objMaster.DateConfig = itemVehicle.CreateDateTime.AddHours(2);
                        objMaster.IsRouteVendor = false;
                        objMaster.IsRouteCustomer = false;
                        objMaster.IsLoading = false;
                        objMaster.IsBidding = false;
                        objMaster.Note = "";
                        objMaster.KM = 0;

                        #endregion

                        #region Rate
                        var objRate = model.OPS_DITORate.Where(c => c.DITOMasterID == itemVehicle.TOMasterID).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objRate == null)
                        {
                            objRate = new OPS_DITORate();
                            objRate.CreatedBy = Account.UserName;
                            objRate.CreatedDate = DateTime.Now;
                            objRate.OPS_DITOMaster = objMaster;
                            objRate.SortOrder = 1;
                            objRate.IsAccept = null;
                            objRate.IsSend = true;
                            objRate.Debit = 0;
                            objRate.IsManual = false;
                            model.OPS_DITORate.Add(objRate);
                        }
                        else
                        {
                            objRate.ModifiedBy = Account.UserName;
                            objRate.ModifiedDate = DateTime.Now;

                        }
                        if (itemVehicle.CreateVendorID > 0)
                            objRate.VendorID = itemVehicle.CreateVendorID;
                        else
                            objRate.VendorID = null;
                        objRate.FirstRateTime = DateTime.Now;
                        objRate.LastRateTime = DateTime.Now.AddHours(2);

                        #endregion

                        #region Location

                        int sLocation = 1;
                        int soLocation = 1;
                        var sSet = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).Select(c => c.Setting).FirstOrDefault();
                        if (!string.IsNullOrEmpty(sSet))
                        {
                            var oSet = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(sSet).FirstOrDefault();
                            if (oSet != null)
                            {
                                var objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationFromID);
                                if (objCheck != null)
                                    sLocation = oSet.LocationFromID;
                                objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationToID);
                                if (objCheck != null)
                                    soLocation = oSet.LocationToID;
                            }
                        }

                        int idx = 1;
                        OPS_DITOLocation oLocation = new OPS_DITOLocation();
                        oLocation.LocationID = sLocation;
                        oLocation.SortOrder = idx++;
                        oLocation.OPS_DITOMaster = objMaster;
                        oLocation.CreatedBy = Account.UserName;
                        oLocation.CreatedDate = DateTime.Now;
                        oLocation.DateComeEstimate = objMaster.ETD;
                        oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        model.OPS_DITOLocation.Add(oLocation);

                        List<int> dataLocationFrom = new List<int>();
                        List<int> dataLocationTo = new List<int>();
                        Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();

                        foreach (var gop in lstOrder.Where(c => c.CreateSortOrder == itemVehicle.CreateSortOrder).ToList())
                        {
                            var sGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == null && c.ID == gop.ID);
                            if (sGop != null)
                            {
                                var fID = sGop.ORD_GroupProduct.CUS_Location.LocationID;
                                var tID = sGop.ORD_GroupProduct.CUS_Location1.LocationID;

                                dataLocationFrom.Add(fID);
                                if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                    dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;
                                else if (dicLocationTime[fID] > sGop.ORD_GroupProduct.ETD)
                                    dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;

                                dataLocationTo.Add(tID);
                                if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                    dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;
                                else if (dicLocationTime[tID] > sGop.ORD_GroupProduct.ETA)
                                    dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;
                            }
                        }

                        var dataL = dataLocationFrom.Distinct().ToList();
                        dataL.AddRange(dataLocationTo.Distinct().ToList());
                        dataL = dataL.Distinct().ToList();
                        for (var i = 0; i < dataL.Count; i++)
                        {
                            //Create DITOLocation
                            OPS_DITOLocation oL = new OPS_DITOLocation();
                            oL.CreatedBy = Account.UserName;
                            oL.CreatedDate = DateTime.Now;
                            model.OPS_DITOLocation.Add(oL);
                            oL.OPS_DITOMaster = objMaster;
                            oL.LocationID = dataL[i];
                            oL.SortOrder = idx++;
                            oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                            if (dicLocationTime.ContainsKey(dataL[i]))
                                oL.DateComeEstimate = dicLocationTime[dataL[i]];

                            if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                            else if (dataLocationFrom.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            else
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                            if (i != 0)
                            {
                                //Create DITO
                                OPS_DITO oD = new OPS_DITO();
                                oD.CreatedBy = Account.UserName;
                                oD.CreatedDate = DateTime.Now;
                                oD.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                                oD.OPS_DITOMaster = objMaster;
                                oD.LocationFromID = dataL[i - 1];
                                oD.LocationToID = dataL[i];
                                //oD.RoutingID = OPS_CreateRoute(model, dataL[i - 1], dataL[i]);
                                oD.SortOrder = i;
                                oD.IsOPS = true;
                                model.OPS_DITO.Add(oD);
                                if (i == dataL.Count - 1)
                                {
                                    //Create DITO
                                    OPS_DITO oDEnd = new OPS_DITO();
                                    oDEnd.CreatedBy = Account.UserName;
                                    oDEnd.CreatedDate = DateTime.Now;
                                    oDEnd.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                                    oDEnd.OPS_DITOMaster = objMaster;
                                    oDEnd.LocationFromID = dataL[i];
                                    oDEnd.LocationToID = soLocation;
                                    //oDEnd.RoutingID = OPS_CreateRoute(model, dataL[i], soLocation);
                                    oDEnd.SortOrder = i + 1;
                                    oDEnd.IsOPS = true;
                                    model.OPS_DITO.Add(oDEnd);
                                }
                            }
                            else
                            {
                                //Create DITO
                                OPS_DITO oD = new OPS_DITO();
                                oD.CreatedBy = Account.UserName;
                                oD.CreatedDate = DateTime.Now;
                                oD.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                                oD.OPS_DITOMaster = objMaster;
                                oD.LocationFromID = sLocation;
                                oD.LocationToID = dataL[i];
                                //oD.RoutingID = OPS_CreateRoute(model, sLocation, dataL[i]);
                                oD.SortOrder = 1;
                                oD.IsOPS = true;
                                model.OPS_DITO.Add(oD);
                            }
                        }

                        OPS_DITOLocation osLocation = new OPS_DITOLocation();
                        osLocation.LocationID = soLocation;
                        osLocation.SortOrder = idx++;
                        osLocation.OPS_DITOMaster = objMaster;
                        osLocation.CreatedBy = Account.UserName;
                        osLocation.CreatedDate = DateTime.Now;
                        osLocation.DateComeEstimate = objMaster.ETA;
                        osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        model.OPS_DITOLocation.Add(osLocation);

                        #endregion

                        #region Group
                        List<int> lstTotalLocation = new List<int>();
                        Dictionary<int, OPS_DITOGroupProduct> dicGroup = new Dictionary<int, OPS_DITOGroupProduct>();
                        foreach (var itemOrder in lstOrder.Where(c => c.CreateSortOrder == itemVehicle.CreateSortOrder))
                        {
                            var objGroup = lstGroupProduct.FirstOrDefault(c => c.ID == itemOrder.ID);
                            if (objGroup != null)
                            {
                                objMaster.TypeOfOrderID = OPS_FindTypeOfOrder(model, objMaster.TypeOfOrderID, objGroup.ID);
                                OPS_CountLocation(model, lstTotalLocation, objGroup.ID);
                                double sub = 0;
                                switch (itemOrder.TypeEditID)
                                {
                                    case 1: sub = objGroup.Ton - itemOrder.Ton; break;
                                    case 2: sub = objGroup.CBM - itemOrder.CBM; break;
                                    case 3: sub = objGroup.Quantity - itemOrder.Quantity; break;
                                }
                                if (sub > 0.001)
                                {
                                    switch (itemOrder.TypeEditID)
                                    {
                                        case 1: objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = Math.Round(sub, NoDigit, MidpointRounding.AwayFromZero);
                                            objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = itemOrder.ExchangeTon > 0 ? itemOrder.ExchangeCBM * objGroup.Ton / itemOrder.ExchangeTon : 0;
                                            objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = objGroup.QuantityLoading = itemOrder.ExchangeTon > 0 ? itemOrder.ExchangeQuantity * objGroup.Ton / itemOrder.ExchangeTon : 0;
                                            break;
                                        case 2: objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = Math.Round(sub, NoDigit, MidpointRounding.AwayFromZero);
                                            objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = itemOrder.ExchangeCBM > 0 ? itemOrder.ExchangeTon * objGroup.CBM / itemOrder.ExchangeCBM : 0;
                                            objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = objGroup.QuantityTranfer = itemOrder.ExchangeCBM > 0 ? itemOrder.ExchangeQuantity * objGroup.CBM / itemOrder.ExchangeCBM : 0;
                                            break;
                                        case 3: objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = Math.Round(sub, NoDigit, MidpointRounding.AwayFromZero);
                                            objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = itemOrder.ExchangeQuantity > 0 ? itemOrder.ExchangeTon * objGroup.Quantity / itemOrder.ExchangeQuantity : 0;
                                            objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = itemOrder.ExchangeQuantity > 0 ? itemOrder.ExchangeCBM * objGroup.Quantity / itemOrder.ExchangeQuantity : 0;
                                            break;
                                    }
                                    objGroup.IsSplit = true;

                                    var objSub = new OPS_DITOGroupProduct();
                                    objSub.CreatedBy = Account.UserName;
                                    objSub.CreatedDate = DateTime.Now;
                                    objSub.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                                    objSub.OPS_DITOMaster = objMaster;
                                    objSub.OrderGroupProductID = objGroup.OrderGroupProductID;
                                    objSub.QuantityLoading = 0;
                                    objSub.IsSplit = true;
                                    objSub.IsInput = false;
                                    objSub.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                    objSub.IsOrigin = itemOrder.IsOrigin;
                                    objSub.Ton = objSub.TonTranfer = objSub.TonBBGN = Math.Round(itemOrder.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                    objSub.CBM = objSub.CBMTranfer = objSub.CBMBBGN = Math.Round(itemOrder.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                    objSub.Quantity = objSub.QuantityTranfer = objSub.QuantityBBGN = Math.Round(itemOrder.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                    objSub.GroupSort = objGroup.GroupSort + "_" + objSub.OrderGroupProductID;
                                    objSub.DNCode = objGroup.DNCode;
                                    objSub.DateDN = objGroup.DateDN;
                                    model.OPS_DITOGroupProduct.Add(objSub);
                                }
                                else
                                {
                                    switch (itemOrder.TypeEditID)
                                    {
                                        case 1:
                                            objGroup.CBM = itemOrder.ExchangeTon > 0 ? itemOrder.ExchangeCBM * objGroup.Ton / itemOrder.ExchangeTon : 0;
                                            objGroup.Quantity = itemOrder.ExchangeTon > 0 ? itemOrder.ExchangeQuantity * objGroup.Ton / itemOrder.ExchangeTon : 0;
                                            break;
                                        case 2:
                                            objGroup.Ton = itemOrder.ExchangeCBM > 0 ? itemOrder.ExchangeTon * objGroup.CBM / itemOrder.ExchangeCBM : 0;
                                            objGroup.Quantity = itemOrder.ExchangeCBM > 0 ? itemOrder.ExchangeQuantity * objGroup.CBM / itemOrder.ExchangeCBM : 0;
                                            break;
                                        case 3:
                                            objGroup.Ton = itemOrder.ExchangeQuantity > 0 ? itemOrder.ExchangeTon * objGroup.Quantity / itemOrder.ExchangeQuantity : 0;
                                            objGroup.CBM = itemOrder.ExchangeQuantity > 0 ? itemOrder.ExchangeCBM * objGroup.Quantity / itemOrder.ExchangeQuantity : 0;
                                            break;
                                    }
                                    objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = Math.Round(objGroup.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                    objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = Math.Round(objGroup.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                    objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = Math.Round(objGroup.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                    objGroup.OPS_DITOMaster = objMaster;
                                    objGroup.IsOrigin = itemOrder.IsOrigin;
                                    objGroup.ModifiedBy = Account.UserName;
                                    objGroup.ModifiedDate = DateTime.Now;
                                }
                            }
                        }
                        objMaster.TotalLocation = lstTotalLocation.Count;
                        #endregion

                        model.SaveChanges();
                        objMaster.Code = DICodePrefix + objMaster.ID.ToString(DICodeNum);
                        model.SaveChanges();
                        // Tính chi phí offer
                        //HelperFinance.DITOMaster_Planning(model, Account, objMaster.ID, objMaster.VendorOfVehicleID);
                        //model.SaveChanges();
                    }
                }
            }
        }

        private void DI_TOMasterCreateTimeLine(DataEntities model, List<int> lstOPSGroupID)
        {
            var lstMasterID = model.OPS_DITOGroupProduct.Where(c => lstOPSGroupID.Contains(c.ID) && c.DITOMasterID.HasValue).Select(c => c.DITOMasterID.Value).Distinct().ToList();
            foreach (var item in lstMasterID)
            {
                HelperTimeSheet.Remove(model, Account, item, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                HelperTimeSheet.Create(model, Account, item, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
            }
            model.SaveChanges();
        }

        private void DI_TOMasterMinCreateNoDN_CheckDuplicate(DataEntities model, List<DTODIAppointmentRate> lstVehicle)
        {
            if (lstVehicle != null)
            {
                var lstMaster = lstVehicle.Where(c => c.CreateSortOrder > 0 && c.CreateVehicleCode != DIVehicleCode).GroupBy(c => c.CreateSortOrder).ToList();
                // Ktra vs list hiện tại
                foreach (var group in lstMaster)
                {
                    foreach (var item in group)
                        item.IsError = true;
                    var master = group.FirstOrDefault();
                    if (master.CreateVendorID > 0 && master.CreateVendorID != Account.SYSCustomerID)
                    {
                        if (lstVehicle.Count(c => c.CreateSortOrder != master.CreateSortOrder && c.CreateVendorID == master.CreateVendorID && c.CreateVehicleCode == master.CreateVehicleCode && c.CreateDateTime == master.CreateDateTime && !c.IsError) > 0)
                        {
                            foreach (var item in group)
                                item.IsError = true;
                        }
                    }
                    else
                    {
                        if (lstVehicle.Count(c => c.CreateSortOrder != master.CreateSortOrder && c.CreateVendorID == Account.SYSCustomerID && c.CreateVehicleCode == master.CreateVehicleCode && c.CreateDateTime == master.CreateDateTime && !c.IsError) > 0)
                        {
                            foreach (var item in group)
                                item.IsError = true;
                        }
                    }
                }
                // Ktra vs database
                foreach (var group in lstMaster)
                {
                    var master = group.FirstOrDefault();
                    if (master.CreateVendorID > 0 && master.CreateVendorID != Account.SYSCustomerID)
                    {
                        if (model.OPS_DITOMaster.Count(c => c.ID != master.TOMasterID && c.VendorOfVehicleID == master.CreateVendorID && c.VehicleID > 0 && c.CAT_Vehicle.RegNo == master.CreateVehicleCode && c.ETD == master.CreateDateTime) > 0)
                        {
                            foreach (var item in group)
                                item.IsError = true;
                        }
                    }
                    else
                    {
                        if (model.OPS_DITOMaster.Count(c => c.ID != master.TOMasterID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.VehicleID > 0 && c.CAT_Vehicle.RegNo == master.CreateVehicleCode && c.ETD == master.CreateDateTime) > 0)
                        {
                            foreach (var item in group)
                                item.IsError = true;
                        }
                    }
                }
            }
        }

        private void CO_TOLocation_Update(DataEntities model, DTOOPSCOTOLocation item, int masterID, int noLocation)
        {
            var obj = model.OPS_COTOLocation.FirstOrDefault(c => c.ID == item.ID && c.COTOMasterID == masterID);
            if (obj.SortOrder == 1 || obj.SortOrder == noLocation)
            {
                //Cập nhật điểm đầu tiên hoặc cuối cùng
                if (item.LocationID > 0)
                    obj.LocationID = item.LocationID;
                else
                    obj.LocationID = null;
                obj.ModifiedBy = Account.UserName;
                obj.ModifiedDate = DateTime.Now;
            }
            else
            {
                //Cập nhật thứ tự
                obj.SortOrder = item.SortOrder;
                obj.SortOrderReal = item.SortOrderReal;
                obj.ModifiedBy = Account.UserName;
                obj.ModifiedDate = DateTime.Now;
            }
        }

        private int OPS_CreateRoute(DataEntities model, int fromid, int toid)
        {
            var obj = model.CAT_Routing.FirstOrDefault(c => c.LocationFromID == fromid && c.LocationToID == toid);
            if (obj == null)
            {
                obj = new CAT_Routing();
                obj.CreatedBy = Account.UserName;
                obj.CreatedDate = DateTime.Now;
                obj.Code = obj.RoutingName = string.Empty;
                obj.LocationFromID = fromid;
                obj.LocationToID = toid;
                obj.IsAreaLast = true;
                obj.IsUse = true;
                model.CAT_Routing.Add(obj);
                model.SaveChanges();
            }
            else
            {
                obj.ModifiedBy = Account.UserName;
                obj.ModifiedDate = DateTime.Now;
            }
            return obj.ID;
        }

        /// <summary>
        /// Tạo sẵn POD cho lệnh
        /// </summary>
        /// <param name="model"></param>
        /// <param name="cotomasterID"></param>
        /// <param name="ditomasterID"></param>
        private void POD_CreateByMasterID(DataEntities model, int? cotomasterID, int? ditomasterID)
        {
            try
            {
                if (cotomasterID.HasValue)
                {
                    //var lstContainer = model.OPS_COTODetail.Where(c => c.OPS_COTO.COTOMasterID == cotomasterID).Select(c => c.ContainerID).Distinct().ToList();
                    //foreach (var container in lstContainer)
                    //{
                    //    // Tạo POD
                    //    var pod = model.POD_COMaster.FirstOrDefault(c => c.COTOMasterID == cotomasterID && c.OrderContainerID == container);
                    //    if (pod == null)
                    //    {
                    //        pod = new POD_COMaster();
                    //        pod.OrderContainerID = container;
                    //        pod.COTOMasterID = cotomasterID.Value;
                    //        pod.CreatedBy = Account.UserName;
                    //        pod.CreatedDate = DateTime.Now;
                    //        model.POD_COMaster.Add(pod);
                    //    }
                    //}
                }
                else
                {
                    if (ditomasterID.HasValue)
                    {
                        //var lstGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == ditomasterID);
                        //foreach (var group in lstGroupProduct)
                        //{
                        //    var pod = model.POD_DIMaster.FirstOrDefault(c => c.DITOMasterID == ditomasterID && c.OrderID == group.ORD_GroupProduct.OrderID && c.StockID == group.ORD_GroupProduct.LocationFromID.Value);
                        //    if (pod == null)
                        //        pod = model.POD_DIMaster.Local.FirstOrDefault(c => c.DITOMasterID == ditomasterID && c.OrderID == group.ORD_GroupProduct.OrderID && c.StockID == group.ORD_GroupProduct.LocationFromID.Value);

                        //    if (pod == null)
                        //    {
                        //        pod = new POD_DIMaster();
                        //        pod.CreatedBy = Account.UserName;
                        //        pod.CreatedDate = DateTime.Now;
                        //        pod.DITOMasterID = ditomasterID.Value;
                        //        pod.OrderID = group.ORD_GroupProduct.OrderID;
                        //        pod.StockID = group.ORD_GroupProduct.LocationFromID.Value;
                        //        model.POD_DIMaster.Add(pod);
                        //    }
                        //    POD_DIGroupProduct podGroup = new POD_DIGroupProduct();
                        //    podGroup.CreatedBy = Account.UserName;
                        //    podGroup.CreatedDate = DateTime.Now;
                        //    podGroup.DITOGroupProductID = group.ID;
                        //    podGroup.TonBBGN = group.TonBBGN;
                        //    podGroup.CBMBBGN = group.CBMBBGN;
                        //    podGroup.QuantityBBGN = group.QuantityBBGN;
                        //    if (!string.IsNullOrEmpty(group.ORD_GroupProduct.DNCode))
                        //        podGroup.BBGNNo = group.ORD_GroupProduct.DNCode;
                        //    pod.POD_DIGroupProduct.Add(podGroup);
                        //    // POD Product
                        //    foreach (var product in group.OPS_DITOProduct.ToList())
                        //    {
                        //        POD_DIProduct podProduct = new POD_DIProduct();
                        //        podProduct.CreatedBy = Account.UserName;
                        //        podProduct.CreatedDate = DateTime.Now;
                        //        podProduct.DITOProductID = product.ID;
                        //        podProduct.QuantityBBGN = product.QuantityBBGN;
                        //        podGroup.POD_DIProduct.Add(podProduct);
                        //    }
                        //}
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private int? OPS_FindFLMDriver(DataEntities model, string name)
        {
            var obj = model.FLM_Driver.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && (c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName).ToLower().Trim() == name.ToLower().Trim());
            if (obj != null)
                return obj.ID;
            return null;
        }

        private int? OPS_FindTypeOfOrder(DataEntities model, int? typeOfOrderID, int opsDITOGroupID)
        {
            if (typeOfOrderID == null)
            {
                var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsDITOGroupID);
                if (objGroup != null)
                    typeOfOrderID = objGroup.ORD_GroupProduct.ORD_Order.TypeOfOrderID;
            }
            return typeOfOrderID;
        }

        private void OPS_CountLocation(DataEntities model, List<int> lstLocationID, int opsDITOGroupID)
        {
            var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsDITOGroupID);
            if (objGroup != null)
            {
                var objOrdGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == objGroup.OrderGroupProductID);
                if (objOrdGroup != null && objOrdGroup.LocationToID.HasValue)
                    lstLocationID.Add(objOrdGroup.CUS_Location1.LocationID);
            }
            lstLocationID = lstLocationID.Distinct().ToList();
        }
        #endregion

        #region Combobox
        public DTOResult Vendor_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var iVendor = -(int)SYSVarType.TypeOfCustomerVEN;
                    var iBoth = -(int)SYSVarType.TypeOfCustomerBOTH;
                    var query = model.CUS_Customer.Where(c => c.TypeOfCustomerID == iVendor || c.TypeOfCustomerID == iBoth).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    result.Data = query as IEnumerable<CUSCustomer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult TractorByVendorID_List(int? vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorid == null)
                        vendorid = Account.SYSCustomerID;
                    var query = model.CUS_Vehicle.Where(c => c.CustomerID == vendorid && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new CATVehicle
                    {
                        ID = c.VehicleID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                        Lat = c.CAT_Vehicle.Lat.HasValue ? c.CAT_Vehicle.Lat : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lat : null,
                        Lng = c.CAT_Vehicle.Lng.HasValue ? c.CAT_Vehicle.Lng : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lng : null,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RomoocByVendorID_List(int? vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorid == null)
                        vendorid = Account.SYSCustomerID;
                    var query = model.CUS_Romooc.Where(c => c.CustomerID == vendorid).Select(c => new CATRomooc
                    {
                        ID = c.RomoocID,
                        RegNo = c.CAT_Romooc.RegNo
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult TruckByVendorID_List(int? vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorid == null)
                        vendorid = Account.SYSCustomerID;
                    var query = model.CUS_Vehicle.Where(c => c.CustomerID == vendorid && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new CATVehicle
                    {
                        ID = c.VehicleID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Lat = c.CAT_Vehicle.Lat.HasValue ? c.CAT_Vehicle.Lat : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lat : null,
                        Lng = c.CAT_Vehicle.Lng.HasValue ? c.CAT_Vehicle.Lng : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lng : null,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult TenderCustomer_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (Account.ListCustomerID.Count() < 1)
                    {
                        var iVendor = -(int)SYSVarType.TypeOfCustomerVEN;
                        var iBoth = -(int)SYSVarType.TypeOfCustomerBOTH;
                        var query = model.CUS_Customer.Where(c => c.IsSystem == false && c.ParentID == null && (c.TypeOfCustomerID == iVendor || c.TypeOfCustomerID == iBoth)).Select(c => new CUSCustomer
                        {
                            ID = c.ID,
                            CustomerName = c.CustomerName
                        }).ToList();
                        result.Total = query.Count;
                        CUSCustomer empty = new CUSCustomer();
                        empty.ID = 0;
                        empty.CustomerName = "Chọn";
                        query.Insert(0, empty);
                        result.Data = query as IEnumerable<CUSCustomer>;
                    }
                    else
                    {
                        var query = model.CUS_Customer.Where(c => Account.ListCustomerID.ToList().Contains(c.ID)).Select(c => new CUSCustomer
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CustomerName = c.CustomerName
                        }).ToList();
                        result.Total = query.Count;
                        result.Data = query as IEnumerable<CUSCustomer>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RejectReason_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var iRejectReason = -(int)SYSVarType.TypeOfReasonTenderReject;
                    var query = model.CAT_Reason.Where(c => c.TypeOfReasonID == iRejectReason).OrderBy(c => c.OrderBy).Select(c => new CATReason
                    {
                        ID = c.ID,
                        ReasonName = c.ReasonName
                    }).ToList();
                    result.Data = query as IEnumerable<CATReason>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Appointment_Route

        #region Common

        public List<CUSCustomer> Appointment_Route_ListVendor()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = model.CUS_Customer.Where(c => !c.IsSystem && Account.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    result.Insert(0, new CUSCustomer { ID = -1, CustomerName = "Xe nhà", Code = "Xe nhà" });
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<FLMDriver> Appointment_Route_ListDriver()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new FLMDriver
                    {
                        ID = c.ID,
                        EmployeeCode = c.CAT_Driver.Code,
                        LastName = c.CAT_Driver.LastName,
                        FirstName = c.CAT_Driver.FirstName,
                        Cellphone = c.CAT_Driver.Cellphone
                    }).ToList();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CUSCustomer> Appointment_Route_ListCustomer()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = true;
                    var result = model.CUS_Customer.Where(c => !c.IsSystem && ((isCustomer && !isAdmin) ? Account.ListCustomerID.ToList().Contains(c.ID) : true) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private List<CATVehicle> Appointment_Route_ListVehicle(DataEntities model, SYSVarType typeid)
        {
            var result = model.CUS_Vehicle.Where(c => c.CAT_Vehicle.TypeOfVehicleID == -(int)typeid).Select(c => new CATVehicle
            {
                ID = c.CAT_Vehicle.ID,
                RegNo = c.CAT_Vehicle.RegNo,
                DriverID = c.CAT_Vehicle.DriverID,
                DriverName = c.CAT_Vehicle.DriverName != null ? c.CAT_Vehicle.DriverName : "",
                Cellphone = c.CAT_Vehicle.Cellphone != null ? c.CAT_Vehicle.Cellphone : "",
                CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                TempMax = c.CAT_Vehicle.TempMax,
                TempMin = c.CAT_Vehicle.TempMin
            }).Distinct().ToList();
            return result;
        }

        private List<DTOOPSVehicle> Appointment_Route_ListVehicleVendor(DataEntities model, SYSVarType typeid)
        {
            var result = model.CAT_Vehicle.Where(c => c.TypeOfVehicleID == -(int)typeid).Select(c => new DTOOPSVehicle
            {
                ID = c.ID,
                RegNo = c.RegNo,
                DriverID = c.DriverID,
                DriverName = c.DriverName != null ? c.DriverName : "",
                Cellphone = c.Cellphone != null ? c.Cellphone : "",
                ListVendorID = c.CUS_Vehicle.Select(d => d.CustomerID).ToList(),
                IsOwn = c.CUS_Vehicle.Count(d => d.CustomerID == Account.SYSCustomerID) > 0,
                MaxWeight = c.MaxWeight,
                TempMin = c.TempMin,
                TempMax = c.TempMax
            }).ToList();
            return result;
        }

        private void Appointment_Route_CreateRate(DataEntities model, bool isdi, int tomasterid, int? vendorid, DateTime dateStart, double ratetime, decimal debit, bool ismanual, int sortorder)
        {
            if (isdi)
            {
                var obj = new OPS_DITORate();
                obj.CreatedBy = Account.UserName;
                obj.CreatedDate = DateTime.Now;
                obj.DITOMasterID = tomasterid;
                obj.VendorID = vendorid;
                obj.SortOrder = sortorder;
                obj.IsAccept = null;
                obj.IsSend = false;
                obj.Debit = debit;
                obj.IsManual = ismanual;
                obj.FirstRateTime = dateStart;
                obj.LastRateTime = dateStart.AddHours(ratetime);
                model.OPS_DITORate.Add(obj);
            }
            else
            {
                var obj = new OPS_COTORate();
                obj.CreatedBy = Account.UserName;
                obj.CreatedDate = DateTime.Now;
                obj.COTOMasterID = tomasterid;
                obj.VendorID = vendorid;
                obj.SortOrder = sortorder;
                obj.IsAccept = null;
                obj.IsSend = false;
                obj.Debit = debit;
                obj.IsManual = ismanual;
                obj.FirstRateTime = dateStart;
                obj.LastRateTime = dateStart.AddHours(ratetime);
                model.OPS_COTORate.Add(obj);
            }
        }

        public DTOAppointmentRouteActivity Appointment_Route_ActivityGet(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = default(DTOAppointmentRouteActivity);
                    var timesheet = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == id);
                    if (timesheet != null)
                    {
                        result = model.FLM_Activity.Where(c => c.ID == timesheet.ReferID && c.FLM_Asset.VehicleID > 0).Select(c => new DTOAppointmentRouteActivity
                        {
                            ID = c.ID,
                            AssetID = c.AssetID,
                            TypeOfActivityID = c.TypeOfActivityID,
                            VehicleCode = c.FLM_Asset.CAT_Vehicle.RegNo,
                            DateFrom = c.EffectiveDateFrom != null ? c.EffectiveDateFrom.Value : c.PlanDateFrom,
                            DateTo = c.EffectiveDateTo != null ? c.EffectiveDateTo.Value : c.PlanDateTo,
                            Note = c.Note
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Appointment_Route_ActivitySave(DTOAppointmentRouteActivity item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.FLM_Activity.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_Activity();
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;

                        obj.TypeOfActivityID = item.TypeOfActivityID;
                        obj.PlanDateFrom = item.DateFrom;
                        obj.PlanDateTo = item.DateTo;
                        var objAsset = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == item.VehicleID).Select(c => new { c.ID }).FirstOrDefault();
                        if (objAsset != null)
                            obj.AssetID = objAsset.ID;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    if (obj != null)
                    {
                        obj.EffectiveDateFrom = item.DateFrom;
                        obj.EffectiveDateTo = item.DateTo;
                        obj.Note = item.Note;
                        if (obj.CreatedDate.AddDays(1).CompareTo(DateTime.Now) <= 0)
                        {
                            obj.PlanDateFrom = item.DateFrom;
                            obj.PlanDateTo = item.DateTo;
                        }
                    }

                    if (obj.AssetID > 0)
                    {
                        if (obj.ID < 1)
                            model.FLM_Activity.Add(obj);
                        model.SaveChanges();
                        if (obj.TypeOfActivityID == -(int)SYSVarType.TypeOfActivityMaintence)
                            HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetMaintence);
                        else if (obj.TypeOfActivityID == -(int)SYSVarType.TypeOfActivityRegistry)
                            HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetRegistry);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Appointment_Route_ActivityDel(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.FLM_Activity.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        if (obj.TypeOfActivityID == -(int)SYSVarType.TypeOfActivityMaintence)
                            HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetMaintence);
                        else if (obj.TypeOfActivityID == -(int)SYSVarType.TypeOfActivityRegistry)
                            HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetRegistry);

                        model.FLM_Activity.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<FLMMaterial> Appointment_Route_MaterialList()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = model.FLM_Material.Where(c => c.CAT_GroupOfMaterial.IsFuel).Select(c => new FLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        MaterialName = c.MaterialName
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOAppointmentRouteMaterialQuota> Appointment_Route_MaterialDetail(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var lstAssetID = model.FLM_Asset.Where(c => c.VehicleID > 0 && lst.Contains(c.VehicleID.Value)).Select(c => c.ID).ToList();
                    var result = model.FLM_MaterialQuota.Where(c => c.FLM_Material.CAT_GroupOfMaterial.IsFuel && lstAssetID.Contains(c.VehicleID)).Select(c => new DTOAppointmentRouteMaterialQuota
                    {
                        MaterialID = c.MaterialID,
                        VehicleID = c.FLM_Asset.VehicleID.Value,
                        QuantityPerKM = c.QuantityPerKM
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Appointment_Route_MaterialSave(List<DTOAppointmentRouteMaterialQuota> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var lstVehicle = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0)
                        .Select(c => new { c.ID, VehicleID = c.VehicleID.Value }).ToList();
                    if (lstVehicle.Count > 0 && lst.Count > 0)
                    {
                        foreach (var item in lst)
                        {
                            var objVehicle = lstVehicle.FirstOrDefault(c => c.VehicleID == item.VehicleID);
                            if (objVehicle != null)
                            {
                                var obj = model.FLM_MaterialQuota.FirstOrDefault(c => c.VehicleID == objVehicle.ID && c.MaterialID == item.MaterialID);
                                if (obj == null)
                                {
                                    obj = new FLM_MaterialQuota();
                                    obj.MaterialID = item.MaterialID;
                                    obj.VehicleID = objVehicle.ID;
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.QuantityPerKM = item.QuantityPerKM;
                                if (obj.ID < 1)
                                    model.FLM_MaterialQuota.Add(obj);
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_Tender_Update(List<DTOOPSMasterTenderRate> lst)
        {
            try
            {
                //var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActApproved.ToString());
                //if (!isAllowed)
                //    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    //bool IsAutoUpdate = false;
                    DateTime dtNow = DateTime.Now;
                    foreach (var item in lst)
                    {
                        var master = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                        if (master != null)
                        {
                            // Duyệt
                            if (item.IsAccept)
                            {
                                if (master.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved) // Chờ phân xe
                                {
                                    if (item.VehicleID == null)
                                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn xe cho lệnh " + master.Code + "!");

                                    master.ModifiedBy = Account.UserName;
                                    master.ModifiedDate = DateTime.Now;
                                    master.VehicleID = item.VehicleID;
                                    master.VendorOfVehicleID = null;
                                    master.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterTendered;

                                    #region Chấp nhận rate
                                    var rate = master.OPS_DITORate.FirstOrDefault(c => (c.VendorID == null || c.VendorID == Account.SYSCustomerID) && c.IsSend && c.IsAccept == null);
                                    if (rate != null)
                                    {
                                        // Nếu lệnh đã chọn sẵn xe hoặc còn trong thời gian duyệt
                                        if (master.VehicleID.HasValue || (rate.FirstRateTime <= dtNow && rate.LastRateTime >= dtNow))
                                        {
                                            rate.IsAccept = true;
                                            rate.ModifiedBy = Account.UserName;
                                            rate.ModifiedDate = DateTime.Now;
                                        }
                                        else
                                            throw FaultHelper.BusinessFault(null, null, "Lệnh " + master.Code + " đã hết hạn duyệt!");
                                    }
                                    else
                                        throw FaultHelper.BusinessFault(null, null, "Lệnh " + master.Code + " đã hết hạn duyệt!");
                                    #endregion

                                    #region Tự động lấy tài xế gán vào Trip
                                    //var DateStart = master.ETD.Value.Date;
                                    //if (DateStart != null)
                                    //{
                                    //    var lstFleetPlanning = model.FLM_FleetPlanning.Where(c => c.VehicleID == item.VehicleID && c.PlanningDate == DateStart).Select(c => new
                                    //    {
                                    //        c.DriverMainID1,
                                    //        c.DriverMainID2,
                                    //        c.DriverAssistantID1,
                                    //        c.DriverAssistantID2,
                                    //        DriverName1 = c.DriverMainID1 == null ? string.Empty : (c.FLM_Driver2.LastName + " " + c.FLM_Driver2.FirstName),
                                    //        DriverName2 = c.DriverMainID2 == null ? string.Empty : (c.FLM_Driver3.LastName + " " + c.FLM_Driver3.FirstName),
                                    //        AssistantName1 = c.DriverAssistantID1 == null ? string.Empty : (c.FLM_Driver.LastName + " " + c.FLM_Driver.FirstName),
                                    //        AssistantName2 = c.DriverAssistantID2 == null ? string.Empty : (c.FLM_Driver1.LastName + " " + c.FLM_Driver1.FirstName),
                                    //        DriverTel1 = c.FLM_Driver2.Cellphone,
                                    //        DriverTel2 = c.FLM_Driver3.Cellphone,
                                    //        AssistantTel1 = c.FLM_Driver.Cellphone,
                                    //        AssistantTel2 = c.FLM_Driver1.Cellphone,
                                    //        DriverCard1 = c.FLM_Driver2.CardNo,
                                    //        DriverCard2 = c.FLM_Driver3.CardNo,
                                    //        AssistantCard1 = c.FLM_Driver.CardNo,
                                    //        AssistantCard2 = c.FLM_Driver1.CardNo,
                                    //    }).ToList();
                                    //    foreach (var plan in lstFleetPlanning)
                                    //    {
                                    //        if (plan.DriverMainID1.HasValue)
                                    //        {
                                    //            master.DriverID1 = plan.DriverMainID1;
                                    //            master.DriverName1 = plan.DriverName1;
                                    //            master.DriverTel1 = plan.DriverTel1;
                                    //            master.DriverCard1 = plan.DriverCard1;
                                    //        }
                                    //        if (plan.DriverMainID2.HasValue)
                                    //        {
                                    //            master.DriverID2 = plan.DriverMainID2;
                                    //            master.DriverName2 = plan.DriverName2;
                                    //            master.DriverTel2 = plan.DriverTel2;
                                    //            master.DriverCard2 = plan.DriverCard2;
                                    //        }
                                    //        if (plan.DriverAssistantID1.HasValue)
                                    //        {
                                    //            master.AssistantID1 = plan.DriverAssistantID1;
                                    //            master.AssistantName1 = plan.AssistantName1;
                                    //            master.AssistantTel1 = plan.AssistantTel1;
                                    //            master.AssistantCard1 = plan.AssistantCard1;
                                    //        }
                                    //        if (plan.DriverAssistantID2.HasValue)
                                    //        {
                                    //            master.AssistantID2 = plan.DriverAssistantID2;
                                    //            master.AssistantName2 = plan.AssistantName2;
                                    //            master.AssistantTel2 = plan.AssistantTel2;
                                    //            master.AssistantCard2 = plan.AssistantCard2;
                                    //        }
                                    //    }
                                    //}
                                    #endregion

                                    // Tính P/L
                                    HelperFinance.DITOMaster_Planning(model, Account, master.ID, null);

                                    // Tạo sẵn POD
                                    //POD_CreateByMasterID(model, null, master.ID);
                                    model.SaveChanges();
                                    //Tạo TimeSheet
                                    HelperTimeSheet.Remove(model, Account, master.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                                    HelperTimeSheet.Create(model, Account, master.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                                    //Tạo DITOProduct
                                    //DIAppointment_DITOProduct_Create(model, master.ID);
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Lệnh " + master.Code + " đã được phân xe không thể chấp nhận!");
                            }
                            else
                            {
                                // Từ chối lệnh
                                if (master.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved) // Chờ phân xe
                                {
                                    if (item.ReasonID == null)
                                        throw FaultHelper.BusinessFault(null, null, "Lệnh " + master.Code + " chưa chọn lý do từ chối!");

                                    #region Từ chối rate + Chuyển qua cho vendor tiếp theo (nếu có) or Chuyển sang trạng thái gởi phê duyệt lại
                                    var rate = master.OPS_DITORate.FirstOrDefault(c => (c.VendorID == null || c.VendorID == Account.SYSCustomerID) && c.IsSend && c.IsAccept == null);
                                    if (rate != null)
                                    {
                                        // Nếu lệnh đã chọn sẵn xe hoặc còn trong thời gian duyệt
                                        if (master.VehicleID.HasValue || (rate.FirstRateTime <= dtNow && rate.LastRateTime >= dtNow))
                                        {
                                            rate.IsAccept = false;
                                            rate.ModifiedBy = Account.UserName;
                                            rate.ModifiedDate = DateTime.Now;
                                            rate.ReasonID = item.ReasonID;
                                            var reason = model.CAT_Reason.FirstOrDefault(c => c.ID == item.ReasonID);
                                            rate.Reason = reason.ReasonName;
                                            //Kiểm tra Rate, nếu là Last => ChangeStatus
                                            var lastItem = master.OPS_DITORate.Where(c => c.DITOMasterID == item.ID).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                                            if (lastItem.ID == rate.ID)
                                            {
                                                master.ModifiedBy = Account.UserName;
                                                master.ModifiedDate = DateTime.Now;
                                                master.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproveAgain; //Gởi phê duyệt lại
                                            }
                                            else
                                            {
                                                //IsAutoUpdate = true;
                                                // Cập nhật lại thời gian cho các rate sau
                                                var lstNextRate = master.OPS_DITORate.Where(c => !c.IsSend && c.IsAccept == null && c.SortOrder > rate.SortOrder).OrderBy(c => c.SortOrder).ToList();
                                                DateTime startTime = DateTime.Now;
                                                DateTime endTime = startTime.AddHours(master.RateTime.Value);
                                                foreach (var nextRate in lstNextRate)
                                                {
                                                    nextRate.FirstRateTime = startTime;
                                                    nextRate.LastRateTime = endTime;
                                                    nextRate.ModifiedBy = Account.UserName;
                                                    nextRate.ModifiedDate = DateTime.Now;

                                                    startTime = endTime.AddMinutes(1);
                                                    endTime = startTime.AddHours(master.RateTime.Value);
                                                }
                                            }
                                        }
                                        else
                                            throw FaultHelper.BusinessFault(null, null, "Lệnh " + master.Code + " đã hết hạn duyệt!");
                                    }
                                    else
                                        throw FaultHelper.BusinessFault(null, null, "Lệnh " + master.Code + " đã hết hạn duyệt!");
                                    #endregion
                                }
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Lệnh " + master.Code + " đã được Phân xe không thể từ chối!");
                            }
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Lệnh không tồn tại!");

                    }
                    model.SaveChanges();

                    //if (IsAutoUpdate)
                    //    OPSMasterTendered_AutoSendMail();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_TenderVendor_Update(List<DTOOPSTenderDITOMaster> lst, bool isAccept, int customerid)
        {
            try
            {
                //var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActApproved.ToString());
                //if (!isAllowed)
                //    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    //bool IsAutoUpdate = false;
                    foreach (var item in lst)
                    {
                        var objDITORate = model.OPS_DITORate.FirstOrDefault(c => c.ID == item.ID);
                        var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        if (objDITORate == null || objMaster == null)
                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists, "");
                        if (isAccept)
                        {
                            //Cập nhật Master
                            objMaster.VendorOfVehicleID = customerid;
                            objMaster.VehicleID = item.VehicleID;
                            objMaster.DriverName1 = item.DriverName1;
                            objMaster.DriverName2 = item.DriverName2;
                            objMaster.DriverTel1 = item.DriverTel1;
                            objMaster.DriverTel2 = item.DriverTel2;
                            objMaster.DriverCard1 = item.DriverCard1;
                            objMaster.DriverCard2 = item.DriverCard2;
                            objMaster.DriverID1 = item.DriverID1;
                            objMaster.DriverID2 = item.DriverID2;
                            //objMaster.AssistantName1 = item.AssistantName1;
                            //objMaster.AssistantName2 = item.AssistantName2;
                            //objMaster.AssistantTel1 = item.AssistantTel1;
                            //objMaster.AssistantTel2 = item.AssistantTel2;
                            //objMaster.AssistantCard1 = item.AssistantCard1;
                            //objMaster.AssistantCard2 = item.AssistantCard2;
                            //objMaster.AssistantID1 = item.AssistantID1;
                            //objMaster.AssistantID2 = item.AssistantID2;
                            objMaster.ModifiedBy = Account.UserName;
                            objMaster.ModifiedDate = DateTime.Now;
                            objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterTendered;

                            //Cập nhật Rate
                            objDITORate.IsAccept = true;
                            objDITORate.ModifiedBy = Account.UserName;
                            objDITORate.ModifiedDate = DateTime.Now;

                            // Tính PL
                            HelperFinance.DITOMaster_Planning(model, Account, objMaster.ID, customerid);

                            // Tạo sẫn POD
                            POD_CreateByMasterID(model, null, objMaster.ID);

                            //Tạo DITOProduct
                            //DIAppointment_DITOProduct_Create(model, objMaster.ID);
                        }
                        else
                        {
                            //Cập nhật Rate
                            objDITORate.IsAccept = false;
                            objDITORate.ReasonID = item.ReasonID;
                            objDITORate.Reason = item.ReasonNote;

                            //Kiểm tra Rate, nếu là Last => ChangeStatus
                            var lastItem = model.OPS_DITORate.Where(c => c.DITOMasterID == item.DITOMasterID).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                            if (lastItem.ID == item.ID)
                            {
                                objMaster.ModifiedBy = Account.UserName;
                                objMaster.ModifiedDate = DateTime.Now;
                                objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproveAgain; //Gởi phê duyệt lại
                            }
                            else
                            {
                                // Gửi cho vendor tiếp theo
                                //IsAutoUpdate = true;
                                // Cập nhật lại thời gian cho các rate sau
                                var lstNextRate = objMaster.OPS_DITORate.Where(c => !c.IsSend && c.IsAccept == null && c.SortOrder > objDITORate.SortOrder).OrderBy(c => c.SortOrder).ToList();
                                DateTime startTime = DateTime.Now;
                                DateTime endTime = startTime.AddHours(objMaster.RateTime.Value);
                                foreach (var nextRate in lstNextRate)
                                {
                                    nextRate.FirstRateTime = startTime;
                                    nextRate.LastRateTime = endTime;

                                    startTime = endTime.AddMinutes(1);
                                    endTime = startTime.AddHours(objMaster.RateTime.Value);
                                }
                            }

                            //Xóa DITOProduct
                            DIAppointment_DITOProduct_Remove(model, objMaster.ID);
                        }
                        objDITORate.ModifiedBy = Account.UserName;
                        objDITORate.ModifiedDate = DateTime.Now;
                    }
                    model.SaveChanges();

                    //if (IsAutoUpdate)
                    //    OPSMasterTendered_AutoSendMail();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPS_FLMPlaning> Appointment_Route_FLMPlaning()
        {
            try
            {
                var result = new List<DTOOPS_FLMPlaning>();
                using (var model = new DataEntities())
                {
                    //var data = model.FLM_FleetPlanning.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new
                    //{
                    //    c.ID,
                    //    c.VehicleID,
                    //    c.CAT_Vehicle.RegNo,
                    //    c.DriverID1,
                    //    c.DriverID2,
                    //    c.DriverID3,
                    //    c.TypeOfDriverID1,
                    //    c.TypeOfDriverID2,
                    //    c.TypeOfDriverID3,
                    //    c.PlanningDate,
                    //    c.ShiftID,
                    //    c.CAT_Shift.TimeFrom,
                    //    c.CAT_Shift.TimeTo
                    //}).ToList();
                    //var dataDriver = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new
                    //{
                    //    c.ID,
                    //    c.CAT_Driver.FirstName,
                    //    c.CAT_Driver.LastName,
                    //    c.CAT_Driver.Cellphone
                    //}).ToList();
                    //foreach (var item in data)
                    //{
                    //    var flag = false;
                    //    var id = -1;
                    //    if (item.TypeOfDriverID1 == -(int)SYSVarType.TypeOfDriverMain && item.DriverID1 > 0)
                    //    {
                    //        flag = true;
                    //        id = item.DriverID1.Value;
                    //    }
                    //    else if (item.TypeOfDriverID2 == -(int)SYSVarType.TypeOfDriverMain && item.DriverID3 > 0)
                    //    {
                    //        flag = true;
                    //        id = item.DriverID2.Value;
                    //    }
                    //    else if (item.TypeOfDriverID3 == -(int)SYSVarType.TypeOfDriverMain && item.DriverID3 > 0)
                    //    {
                    //        flag = true;
                    //        id = item.DriverID3.Value;
                    //    }
                    //    if (flag)
                    //    {
                    //        DTOOPS_FLMPlaning obj = new DTOOPS_FLMPlaning();
                    //        obj.DriverID = id;
                    //        obj.VehicleID = item.VehicleID;
                    //        obj.VehicleCode = item.RegNo;
                    //        var objD = dataDriver.FirstOrDefault(c => c.ID == id);
                    //        if (objD != null)
                    //        {
                    //            obj.DriverName = objD.LastName + " " + objD.FirstName;
                    //            obj.DriverTel = objD.Cellphone;
                    //        }
                    //        obj.DateFrom = item.PlanningDate.Date.Add(item.TimeFrom.TimeOfDay);
                    //        obj.DateTo = item.PlanningDate.Date.Add(item.TimeTo.TimeOfDay);
                    //        result.Add(obj);
                    //    }
                    //}
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region DI_Common

        private void DIAppointment_DITOProduct_Create(DataEntities model, int masterID)
        {
            var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
            if (objMaster != null)
            {
                var dataGop = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objMaster.ID).Select(c => new
                {
                    c.ID,
                    c.ORD_GroupProduct.GroupOfProductID,
                    c.OrderGroupProductID
                }).ToList();
                foreach (var gop in dataGop)
                {
                    var dataProduct = model.ORD_Product.Where(c => c.GroupProductID == gop.OrderGroupProductID).Select(c => new
                    {
                        c.ID,
                        c.ProductID,
                        c.PackingID,
                        c.Quantity,
                        c.ExchangeCBM,
                        c.ExchangeTon,
                        c.ExchangeQuantity
                    }).ToList();
                    foreach (var product in dataProduct)
                    {
                        OPS_DITOProduct obj = new OPS_DITOProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DITOGroupProductID = gop.ID;
                        obj.OrderProductID = product.ID;
                        obj.Quantity = product.Quantity;
                        obj.QuantityBBGN = product.Quantity;
                        obj.QuantityTranfer = product.Quantity;
                        model.OPS_DITOProduct.Add(obj);
                    }
                }
                model.SaveChanges();
            }
        }

        private void DIAppointment_DITOProduct_Remove(DataEntities model, int masterID)
        {
            var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
            if (objMaster != null)
            {
                model.OPS_DITOProduct.RemoveRange(model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.DITOMasterID == masterID).ToList());
                model.SaveChanges();
            }
        }

        #endregion

        #region DIAppointment

        public DTOResult DIAppointment_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iStatusOfPlanPlaning = -(int)SYSVarType.StatusOfPlanPlaning;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var query = model.ORD_Order.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfPlanID >= iStatusOfPlanPlaning && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.CustomerID) : true) && c.TransportModeID > 0 && (c.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL || c.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL)).Select(c => new DTOOPSOrderTruckRequest
                    {
                        ID = c.ID,
                        StatusOfOrderName = c.SYS_Var1.ValueOfVar,
                        StatusOfPlanName = c.SYS_Var2.ValueOfVar,
                        TypeOfOrderName = c.SYS_Var5.ValueOfVar,
                        Code = c.Code,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName,
                        CreatedDate = c.CreatedDate,
                        CreatedBy = c.CreatedBy,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        RequestDate = c.RequestDate,
                        LocationFrom = c.LocationFromID.HasValue ? c.CUS_Location.CAT_Location.Location : string.Empty,
                        LocationTo = c.LocationToID.HasValue ? c.CUS_Location1.CAT_Location.Location : string.Empty,
                        URL = string.Empty,
                        IsHot = c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderHot || c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturnHot,
                        IsLocked = false,
                        IsSKU = c.ContractID.HasValue && c.CAT_Contract.IsSKU,
                        LocationToAddress = c.LocationToID.HasValue ? c.CUS_Location1.CAT_Location.Address : string.Empty,
                        LocationToCode = c.LocationToID.HasValue ? c.CUS_Location1.Code : string.Empty,
                        LocationToProvince = c.LocationToID.HasValue ? c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationToDistrict = c.LocationToID.HasValue ? c.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                        Ton = model.OPS_DITOGroupProduct.Count(d => d.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && d.ORD_GroupProduct.OrderID == c.ID) > 0 ? model.OPS_DITOGroupProduct.Where(d => d.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && d.ORD_GroupProduct.OrderID == c.ID).Sum(d => d.TonTranfer) : 0,
                        CBM = model.OPS_DITOGroupProduct.Count(d => d.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && d.ORD_GroupProduct.OrderID == c.ID) > 0 ? model.OPS_DITOGroupProduct.Where(d => d.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && d.ORD_GroupProduct.OrderID == c.ID).Sum(d => d.CBMTranfer) : 0,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSOrderTruckRequest>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Cancel(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var iFTL = -(int)SYSVarType.TransportModeFTL;
                    var iLTL = -(int)SYSVarType.TransportModeLTL;
                    var dataTO = new List<int>();
                    var dataTOIMP = new List<int>();
                    var dataTOPAK = new List<int>();
                    var dataTOOPT = new List<int>();
                    foreach (var item in data)
                    {
                        var obj = model.ORD_Order.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            //Check Data
                            if (model.OPS_DITOGroupProduct.Count(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.OrderID == obj.ID && c.DITOMasterID > 0
                                && ((c.OPS_DITOMaster.CAT_TransportMode.TransportModeID == iFTL && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterApproved) || c.OPS_DITOMaster.CAT_TransportMode.TransportModeID == iLTL)) > 0)
                            {
                                var dataGop = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.OrderID == obj.ID && c.DITOMasterID > 0
                                    && ((c.OPS_DITOMaster.CAT_TransportMode.TransportModeID == iFTL && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterApproved) || c.OPS_DITOMaster.CAT_TransportMode.TransportModeID == iLTL)).Select(c => c.OPS_DITOMaster.Code).Distinct().ToList();
                                throw FaultHelper.BusinessFault(null, null, "Không thể trả về. ĐH " + obj.Code + " có dữ liệu chuyến! Chuyến: [" + string.Join(",", dataGop) + "]");
                            }

                            if (model.OPS_OPTOPSGroupProduct.Count(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID == obj.ID) > 0)
                            {
                                foreach (var o in model.OPS_OPTOPSGroupProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID == obj.ID))
                                {
                                    foreach (var i in model.OPS_OPTDITOGroupProduct.Where(c => c.OPTOPSGroupProductID == o.ID))
                                    {
                                        if (i.OPTDITOMasterID.HasValue)
                                            dataTOOPT.Add(i.OPTDITOMasterID.Value);
                                        foreach (var e in model.OPS_OPTDITODetail.Where(c => c.OPTDITOGroupProductID == i.ID))
                                        {
                                            model.OPS_OPTDITODetail.Remove(e);
                                        }
                                        model.OPS_OPTDITOGroupProduct.Remove(i);
                                    }
                                    model.OPS_OPTOPSGroupProduct.Remove(o);
                                }
                                //var dataOPT = model.OPS_OPTOPSGroupProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID == obj.ID).Select(c => new
                                //{
                                //    c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                //    c.OPS_Optimizer.OptimizerName
                                //}).Distinct().ToList();
                                //throw FaultHelper.BusinessFault(null, null, "Không thể trả về. ĐH " + obj.Code + " có dữ liệu tối ưu! Gói tối ưu: [" + string.Join(",", dataOPT.Select(c => c.OptimizerName).Distinct().ToList()) + "]");
                            }

                            if (model.OPS_DIImportGroupProduct.Count(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID == obj.ID) > 0)
                            {
                                foreach (var o in model.OPS_DIImportGroupProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID == obj.ID))
                                {
                                    dataTOIMP.Add(o.DIImportTOMasterID);
                                    model.OPS_DIImportGroupProduct.Remove(o);
                                }
                                //var dataIMP = model.OPS_DIImportGroupProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID == obj.ID).Select(c => new
                                //{
                                //    c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                //    c.OPS_DIImportTOMaster.OPS_DIImportPacket.PacketName
                                //}).Distinct().ToList();
                                //throw FaultHelper.BusinessFault(null, null, "Không thể trả về. ĐH " + obj.Code + " có dữ liệu import! Gói import: [" + string.Join(",", dataIMP.Select(c => c.PacketName).Distinct().ToList()) + "]");                               
                            }

                            if (model.OPS_DIPacketGroupProduct.Count(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID == obj.ID) > 0)
                            {
                                foreach (var o in model.OPS_DIPacketGroupProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID == obj.ID))
                                {
                                    foreach (var i in model.OPS_DIPacketGroupProductVEN.Where(c => c.DIPacketGroupProductID == o.ID))
                                    {
                                        foreach (var e in model.OPS_DIPacketTOGroupProduct.Where(c => c.DIPacketGroupProductVENID == i.ID))
                                        {
                                            if (e.DIPacketTOMasterID.HasValue)
                                                dataTOPAK.Add(e.DIPacketTOMasterID.Value);
                                            model.OPS_DIPacketTOGroupProduct.Remove(e);
                                        }
                                        model.OPS_DIPacketGroupProductVEN.Remove(i);
                                    }
                                    model.OPS_DIPacketGroupProduct.Remove(o);
                                }
                                ///var dataPAK = model.OPS_DIPacketGroupProduct.Where(c => c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID == obj.ID).Select(c => new
                                //{
                                //    c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                //    c.OPS_DIPacket.PacketName
                                //}).Distinct().ToList();
                                //throw FaultHelper.BusinessFault(null, null, "Không thể trả về. ĐH " + obj.Code + " có dữ liệu tender! Gói tender: [" + string.Join(",", dataPAK.Select(c => c.PacketName).Distinct().ToList()) + "]");
                            }

                            if (model.OPS_DIImportORDGroupProduct.Count(c => c.ORD_GroupProduct.OrderID == obj.ID) > 0)
                            {
                                foreach (var o in model.OPS_DIImportORDGroupProduct.Where(c => c.ORD_GroupProduct.OrderID == obj.ID))
                                {
                                    model.OPS_DIImportORDGroupProduct.Remove(o);
                                }
                                //var dataIMP = model.OPS_DIImportORDGroupProduct.Where(c => c.ORD_GroupProduct.OrderID == obj.ID).Select(c => new
                                //{
                                //    c.OPS_DIImportPacket.PacketName
                                //}).Distinct().ToList();
                                //throw FaultHelper.BusinessFault(null, null, "Không thể trả về. ĐH " + obj.Code + " có dữ liệu import! Gói import: [" + string.Join(",", dataIMP.Select(c => c.PacketName).Distinct().ToList()) + "]");
                            }

                            //Clean Data
                            foreach (var o in model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.OrderID == obj.ID))
                            {
                                if (o.DITOMasterID > 0)
                                    dataTO.Add(o.DITOMasterID.Value);
                                foreach (var p in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == o.ID))
                                    model.OPS_DITOProduct.Remove(p);
                                foreach (var k in model.KPI_KPITime.Where(c => c.DITOGroupProductID == o.ID))
                                    model.KPI_KPITime.Remove(k);
                                foreach (var k in model.KPI_VENTime.Where(c => c.DITOGroupProductID == o.ID))
                                    model.KPI_VENTime.Remove(k);
                                foreach (var p in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == o.ID).ToList())
                                {
                                    foreach (var e in model.OPS_DITOProductPOD.Where(c => c.DITOProductID == p.ID).ToList())
                                        model.OPS_DITOProductPOD.Remove(e);
                                    foreach (var e in model.OPS_ExtReturnDetail.Where(c => c.DITOProductID == p.ID).ToList())
                                        model.OPS_ExtReturnDetail.Remove(e);
                                    foreach (var e in model.POD_DIProduct.Where(c => c.DITOProductID == p.ID).ToList())
                                        model.POD_DIProduct.Remove(e);
                                }
                                model.OPS_DITOGroupProduct.Remove(o);
                            }

                            obj.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                            obj.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                    }

                    foreach (var item in dataTO.Distinct().ToList())
                    {
                        var objTO = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item);
                        if (objTO != null)
                        {
                            foreach (var o in model.OPS_DITO.Where(c => c.DITOMasterID == objTO.ID))
                                model.OPS_DITO.Remove(o);
                            foreach (var o in model.OPS_DITOLocation.Where(c => c.DITOMasterID == objTO.ID))
                                model.OPS_DITOLocation.Remove(o);
                            foreach (var o in model.OPS_DITORate.Where(c => c.DITOMasterID == objTO.ID))
                                model.OPS_DITORate.Remove(o);
                            model.OPS_DITOMaster.Remove(objTO);
                        }
                    }
                    model.SaveChanges();

                    foreach (var item in dataTOIMP.Distinct().ToList())
                    {
                        var objTO = model.OPS_DIImportTOMaster.FirstOrDefault(c => c.ID == item);
                        if (objTO != null && objTO.OPS_DIImportGroupProduct.Count == 0)
                            model.OPS_DIImportTOMaster.Remove(objTO);
                    }

                    foreach (var item in dataTOPAK.Distinct().ToList())
                    {
                        var objTO = model.OPS_DIPacketTOMaster.FirstOrDefault(c => c.ID == item);
                        if (objTO != null && objTO.OPS_DIPacketTOGroupProduct.Count == 0)
                            model.OPS_DIPacketTOMaster.Remove(objTO);
                    }

                    foreach (var item in dataTOOPT.Distinct().ToList())
                    {
                        var objTO = model.OPS_OPTDITOMaster.FirstOrDefault(c => c.ID == item);
                        if (objTO != null && objTO.OPS_OPTDITOGroupProduct.Count == 0)
                        {
                            model.OPS_OPTDITOMaster.Remove(objTO);
                            model.OPS_OPTDITOLocation.RemoveRange(objTO.OPS_OPTDITOLocation);
                        }
                    }
                    model.SaveChanges();

                    foreach (var item in dataTO)
                    {
                        HelperTimeSheet.Remove(model, Account, item, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                    }

                    HelperStatus.ORDOrder_Status(model, Account, data.Distinct().ToList());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region DIAppointment_Route

        #region DIAppointment_Route
        public List<DTODIAppointmentOrder> DIAppointment_Route_OrderList(string request)
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();
                using (var model = new DataEntities())
                {
                    int statusPlanning = -(int)SYSVarType.StatusOfDITOMasterPlanning;

                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();

                        var queryFTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.OrderGroupProductID > 0 &&
                            c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOMaster.StatusOfDITOMasterID == statusPlanning && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                        {
                            GenID = c.DITOMasterID.Value + "",

                            TOMasterID = c.DITOMasterID.Value,
                            TOMasterCode = c.OPS_DITOMaster.Code,
                            ETD = c.OPS_DITOMaster.ETD,
                            ETA = c.OPS_DITOMaster.ETA,
                            RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                            KM = c.OPS_DITOMaster.KM,
                            GroupOfVehicleID = c.OPS_DITOMaster.GroupOfVehicleID,

                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,
                            IsFTL = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL,
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            GroupSort = c.GroupSort,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                            TranferItem = (c.OPS_DITOMaster.GroupOfVehicleID != null) ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : "",
                            DNCode = "",
                            SOCode = "",
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            Ton = (c.OPS_DITOMaster.GroupOfVehicleID != null && c.OPS_DITOMaster.CAT_GroupOfVehicle.Ton > 0) ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Ton.Value : 0,
                            IsChoose = false,
                            DateDN = c.DateDN
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        result = queryFTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        foreach (var item in result)
                        {
                            var queryGroup = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == item.TOMasterID && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.CUSRoutingID > 0);

                            var lstcus = queryGroup.Select(c => c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code).Distinct().ToArray();
                            if (lstcus.Length > 0)
                                item.CustomerCode = string.Join(",", lstcus);

                            var lstroutecode = queryGroup.Select(c => c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code).Distinct().ToArray();
                            if (lstroutecode.Length > 0)
                                item.CUSRoutingCode = string.Join(",", lstroutecode);

                            item.Ton = queryGroup.Sum(c => c.Ton);
                            item.CBM = queryGroup.Sum(c => c.CBM);
                        }

                        var queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 &&
                            c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                            {
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = -1,
                                TOMasterCode = "",
                                ID = c.ID,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                Ton = c.Ton,
                                CBM = c.CBM,
                                Note1 = c.Note1,
                                Note2 = c.Note2,
                                IsChoose = false,
                                DateDN = c.DateDN
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                        var lstLTL = queryLTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        result.AddRange(lstLTL);
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentGroupProduct> DIAppointment_Route_OrderDetail(List<DTODIAppointmentOrder> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = new List<DTODIAppointmentGroupProduct>();

                    foreach (var item in lst)
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == item.TOMasterID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentGroupProduct
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : "",
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            IsFTL = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL,
                            AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,
                            OrderGroupProductID = c.OrderGroupProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            LocationFromName = c.ORD_GroupProduct.CUS_Location.CAT_Location.Location,
                            LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            LocationFromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                            LocationFromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,
                            LocationToName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Location,
                            LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                            LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity
                        }).ToList();

                        result.AddRange(model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.OrderID == item.OrderID && c.ORD_GroupProduct.CUSRoutingID == item.CUSRoutingID && c.GroupSort == item.GroupSort && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentGroupProduct
                        {
                            ID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            IsFTL = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL,
                            AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,
                            OrderGroupProductID = c.OrderGroupProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            LocationFromName = c.ORD_GroupProduct.CUS_Location.CAT_Location.Location,
                            LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            LocationFromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                            LocationFromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,
                            LocationToName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Location,
                            LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                            LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity
                        }).ToList());
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_OrderDiv(DTODIAppointmentOrder item, int div)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var objCheck = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.GroupSort == item.GroupSort && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new { c.DITOMasterID }).FirstOrDefault();
                    if (objCheck != null)
                    {
                        //Su ly tach FTL
                        if (div < 0)
                        {
                            bool flag = false;

                            var lstFTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.GroupSort == item.GroupSort && c.OPS_DITOMaster.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterPlanning && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new { c.DITOMasterID, c.ORD_GroupProduct.OrderID }).Distinct().ToList();
                            foreach (var itemFTL in lstFTL)
                            {
                                foreach (var objGroup in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == itemFTL.DITOMasterID.Value))
                                {
                                    objGroup.GroupSort = itemFTL.OrderID + "_" + itemFTL.DITOMasterID.Value;
                                    objGroup.ModifiedBy = Account.UserName;
                                    objGroup.ModifiedDate = DateTime.Now;

                                    flag = true;
                                }
                            }

                            var lstLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.GroupSort == item.GroupSort && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new { c.ID, c.ORD_GroupProduct.OrderID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                            foreach (var itemLTL in lstLTL)
                            {
                                var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == itemLTL.ID);
                                if (objGroup != null)
                                {
                                    objGroup.GroupSort = itemLTL.OrderID + "_" + itemLTL.OrderGroupProductID + "_" + itemLTL.ID;
                                    objGroup.ModifiedBy = Account.UserName;
                                    objGroup.ModifiedDate = DateTime.Now;

                                    flag = true;
                                }
                            }

                            if (flag)
                                model.SaveChanges();
                        }
                    }
                    else if (div < 0)
                    {
                        bool flag = false;

                        var lstLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.GroupSort == item.GroupSort && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new { c.ID, c.ORD_GroupProduct.OrderID, OrderGroupProductID = c.OrderGroupProductID.Value }).ToList();
                        foreach (var itemLTL in lstLTL)
                        {
                            var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == itemLTL.ID);
                            if (objGroup != null)
                            {
                                objGroup.GroupSort = itemLTL.OrderID + "_" + itemLTL.OrderGroupProductID + "_" + itemLTL.ID;
                                objGroup.ModifiedBy = Account.UserName;
                                objGroup.ModifiedDate = DateTime.Now;

                                flag = true;
                            }
                        }

                        if (flag)
                            model.SaveChanges();
                    }
                    else if (div > 1)
                    {
                        var lstLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.OrderGroupProductID > 0 && c.GroupSort == item.GroupSort && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new { c.ORD_GroupProduct.OrderID, OrderGroupProductID = c.OrderGroupProductID.Value, c.DNCode }).Distinct().ToList();
                        if (lstLTL.Count() > 1)
                        {
                            var lstGroup = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.OrderGroupProductID > 0 && c.GroupSort == item.GroupSort && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList();
                            foreach (var itemGroup in lstGroup)
                            {
                                itemGroup.Ton = itemGroup.TonTranfer = itemGroup.TonBBGN = itemGroup.Ton / div;
                                itemGroup.CBM = itemGroup.CBMTranfer = itemGroup.CBMBBGN = itemGroup.CBM / div;
                                itemGroup.Quantity = itemGroup.QuantityTranfer = itemGroup.QuantityBBGN = itemGroup.Quantity / div;
                                itemGroup.ModifiedBy = Account.UserName;
                                itemGroup.ModifiedDate = DateTime.Now;
                            }

                            var lstAdd = new List<OPS_DITOGroupProduct>();
                            for (int i = 1; i < div; i++)
                            {
                                foreach (var itemGroup in lstGroup)
                                {
                                    var objGroup = new OPS_DITOGroupProduct();
                                    objGroup.CreatedBy = Account.UserName;
                                    objGroup.CreatedDate = DateTime.Now;

                                    objGroup.DITOGroupProductStatusID = itemGroup.DITOGroupProductStatusID;
                                    objGroup.OrderGroupProductID = itemGroup.OrderGroupProductID;
                                    objGroup.QuantityLoading = 0;
                                    objGroup.IsInput = false;
                                    objGroup.IsSplit = true;
                                    objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                    objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = itemGroup.Ton;
                                    objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = itemGroup.CBM;
                                    objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = itemGroup.Quantity;
                                    objGroup.GroupSort = "";
                                    objGroup.DNCode = itemGroup.DNCode;
                                    objGroup.DateDN = itemGroup.DateDN;
                                    model.OPS_DITOGroupProduct.Add(objGroup);
                                    lstAdd.Add(objGroup);
                                }
                                model.SaveChanges();

                                string groupsort = string.Empty;
                                if (lstAdd.Count > 3)
                                    groupsort = string.Join("_", lstAdd.Select(c => c.ID).ToList());
                                else
                                    groupsort = string.Join("_", lstLTL.Select(c => c.OrderID + "_" + c.OrderGroupProductID).Distinct().ToList());
                                foreach (var obj in lstAdd)
                                    obj.GroupSort = groupsort;
                                model.SaveChanges();
                            }
                        }
                        else
                        {
                            foreach (var itemLTL in lstLTL)
                            {
                                var objFirst = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == null && c.GroupSort == item.GroupSort && c.OrderGroupProductID == itemLTL.OrderGroupProductID && c.DNCode == itemLTL.DNCode && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                                if (objFirst != null)
                                {
                                    objFirst.Ton = objFirst.TonTranfer = objFirst.TonBBGN = objFirst.Ton / div;
                                    objFirst.CBM = objFirst.CBMTranfer = objFirst.CBMBBGN = objFirst.CBM / div;
                                    objFirst.Quantity = objFirst.QuantityTranfer = objFirst.QuantityBBGN = objFirst.Quantity / div;
                                    objFirst.ModifiedBy = Account.UserName;
                                    objFirst.ModifiedDate = DateTime.Now;

                                    var lstAdd = new List<OPS_DITOGroupProduct>();
                                    for (int i = 1; i < div; i++)
                                    {
                                        var objGroup = new OPS_DITOGroupProduct();
                                        objGroup.CreatedBy = Account.UserName;
                                        objGroup.CreatedDate = DateTime.Now;

                                        objGroup.DITOGroupProductStatusID = objFirst.DITOGroupProductStatusID;
                                        objGroup.OrderGroupProductID = itemLTL.OrderGroupProductID;
                                        objGroup.QuantityLoading = 0;
                                        objGroup.IsInput = false;
                                        objGroup.IsSplit = true;
                                        objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                        objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = objFirst.Ton;
                                        objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = objFirst.CBM;
                                        objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = objFirst.Quantity;
                                        objGroup.GroupSort = "";
                                        objGroup.DNCode = objFirst.DNCode;
                                        objGroup.DateDN = objFirst.DateDN;
                                        model.OPS_DITOGroupProduct.Add(objGroup);
                                        lstAdd.Add(objGroup);
                                    }

                                    if (lstAdd.Count > 0)
                                    {
                                        model.SaveChanges();

                                        foreach (var obj in lstAdd)
                                            obj.GroupSort = itemLTL.OrderID + "_" + itemLTL.OrderGroupProductID + "_" + obj.ID;

                                        model.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_OrderGroup(List<DTODIAppointmentOrder> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (lst.Count > 1)
                    {
                        var lstLTL = new List<DTODIAppointmentOrder>();

                        //Remove same
                        var lstLTLSame = lst.Where(c => c.ID > 0 && c.OrderGroupProductID > 0 && c.OrderID > 0).Select(c => new { c.OrderID, OrderGroupProductID = c.OrderGroupProductID.Value, c.DNCode }).Distinct();
                        foreach (var item in lstLTLSame)
                        {
                            var query = lst.Where(c => c.OrderID == item.OrderID && c.OrderGroupProductID == item.OrderGroupProductID && c.DNCode == item.DNCode);
                            if (query.Count() > 1)
                            {
                                var objFirst = query.FirstOrDefault();
                                var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == objFirst.ID);
                                if (obj != null)
                                {
                                    var lstID = query.Select(c => c.ID.Value).ToArray();
                                    var querySum = model.OPS_DITOGroupProduct.Where(c => lstID.Contains(c.ID));
                                    obj.Ton = obj.TonTranfer = obj.TonBBGN = querySum.Sum(c => c.Ton);
                                    obj.CBM = obj.CBMTranfer = obj.CBMBBGN = querySum.Sum(c => c.CBM);
                                    obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = querySum.Sum(c => c.Quantity);
                                    obj.GroupSort = objFirst.OrderID + "_" + obj.OrderGroupProductID + "_" + obj.ID;

                                    foreach (var objSum in querySum.Where(c => c.ID != obj.ID))
                                        model.OPS_DITOGroupProduct.Remove(objSum);

                                    objFirst.GroupSort = obj.GroupSort;
                                    lstLTL.Add(objFirst);
                                }
                            }
                            else if (query.Count() > 0)
                                lstLTL.Add(query.FirstOrDefault());
                        }
                        model.SaveChanges();

                        //Create groupsort
                        string groupsort = string.Empty;
                        if (lstLTL.Count > 3)
                        {
                            var lstGroupSort = lstLTL.Where(c => c.ID > 0).Select(c => c.ID.Value).ToList();
                            lstGroupSort.AddRange(lst.Where(c => c.TOMasterID > 0).Select(c => c.TOMasterID).Distinct().ToList());
                            groupsort = string.Join("_", lstGroupSort);
                        }
                        else
                        {
                            var lstGroupSort = lstLTL.Select(c => c.GroupSort).Distinct().ToList();
                            lstGroupSort.AddRange(lst.Where(c => c.TOMasterID > 0).Select(c => c.TOMasterID.ToString()).Distinct().ToList());
                            groupsort = string.Join("_", lstGroupSort);
                        }

                        //Modified groupsort
                        foreach (var item in lstLTL)
                        {
                            var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                            if (obj != null)
                            {
                                obj.GroupSort = groupsort;
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                        }
                        foreach (var item in lst.Where(c => c.TOMasterID > 0))
                        {
                            var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == item.TOMasterID);
                            if (obj != null)
                            {
                                obj.GroupSort = groupsort;
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentGroupProduct> DIAppointment_Route_OrderDivCustomGet(DTODIAppointmentOrder item)
        {
            try
            {
                var result = new List<DTODIAppointmentGroupProduct>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.OrderGroupProductID > 0 && c.GroupSort == item.GroupSort && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentGroupProduct
                    {
                        ID = c.ID,
                        TOMasterID = c.DITOMasterID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                        IsFTL = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL,
                        AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,
                        OrderGroupProductID = c.OrderGroupProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,
                        TypeEditID = 3,
                        ExchangeTon = 0,
                        ExchangeCBM = 0,
                        ExchangeQuantity = 0,
                        GroupSort = c.GroupSort,
                        DNCode = c.DNCode,
                    }).ToList();

                    foreach (var group in result.Where(c => !c.IsFTL))
                    {
                        var product = model.ORD_Product.Where(c => c.GroupProductID == group.OrderGroupProductID)
                            .Select(c => new { c.CUS_Product.Code, c.CAT_Packing.TypeOfPackageID, c.ExchangeTon, c.ExchangeCBM, c.ExchangeQuantity }).FirstOrDefault();
                        if (product != null)
                        {
                            if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                group.TypeEditID = 1;
                            if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                group.TypeEditID = 2;

                            group.ExchangeTon = (product.ExchangeTon > 0) ? product.ExchangeTon.Value : 0;
                            group.ExchangeCBM = (product.ExchangeCBM > 0) ? product.ExchangeCBM.Value : 0;
                            group.ExchangeQuantity = (product.ExchangeQuantity > 0) ? product.ExchangeQuantity.Value : 0;
                            if (group.TypeEditID == 3)
                                group.ExchangeQuantity = 1;
                            group.ProductCode = product.Code;
                        }

                        if (group.TOMasterID > 0)
                        {
                            if (model.POD_DIMaster.Where(c => c.DITOMasterID == group.TOMasterID).Count() > 0)
                                throw FaultHelper.BusinessFault("Chuyến này đã đã tạo tình trạng. Không cho phép lập chuyến");
                            //if (model.OPS_DITOMasterStatus.Where(c => c.DITOMasterID == group.TOMasterID).Count() > 0)
                            //    throw FaultHelper.BusinessFault("Chuyến này đã đã tạo tình trạng. Không cho phép lập chuyến");
                            //else if (model.POD_DIMaster.Where(c => c.DITOMasterID == group.TOMasterID).Count() > 0)
                            //    throw FaultHelper.BusinessFault("Chuyến này đã đã tạo tình trạng. Không cho phép lập chuyến");
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_OrderDivCustomSave(List<DTODIAppointmentGroupProduct> lstMain, List<DTODIAppointmentGroupProduct> lstSub)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (lstMain.Count > 0 && lstSub.Count > 0)
                    {
                        foreach (var item in lstMain.Where(c => c.ID > 0 && c.Ton > 0 || c.CBM > 0))
                        {
                            var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                            if (obj != null)
                            {
                                obj.Ton = obj.TonTranfer = obj.TonBBGN = item.Ton;
                                obj.CBM = obj.CBMTranfer = obj.CBMBBGN = item.CBM;
                                obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = item.Quantity;
                            }
                        }
                        var lstAdd = new List<OPS_DITOGroupProduct>();
                        foreach (var item in lstSub)
                        {
                            if (item.ID > 0)
                            {
                                var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                                if (obj != null)
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                    obj.Ton = obj.TonTranfer = obj.TonBBGN = item.Ton;
                                    obj.CBM = obj.CBMTranfer = obj.CBMBBGN = item.CBM;
                                    obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = item.Quantity;
                                }
                            }
                            else
                            {
                                if (item.Ton > 0.001 || item.CBM > 0.001)
                                {
                                    var obj = new OPS_DITOGroupProduct();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;

                                    obj.QuantityLoading = 0;
                                    obj.IsInput = false;
                                    obj.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                    obj.OrderGroupProductID = item.OrderGroupProductID;
                                    obj.Ton = obj.TonTranfer = obj.TonBBGN = item.Ton;
                                    obj.CBM = obj.CBMTranfer = obj.CBMBBGN = item.CBM;
                                    obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = item.Quantity;
                                    obj.GroupSort = item.OrderID + "_" + item.OrderGroupProductID;
                                    obj.DNCode = item.DNCode;
                                    var ord = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == item.OrderGroupProductID);
                                    if (ord != null)
                                        obj.DateDN = ord.ORD_Order.RequestDate;
                                    model.OPS_DITOGroupProduct.Add(obj);
                                    lstAdd.Add(obj);
                                }
                            }
                        }
                        model.SaveChanges();

                        var lstGroupSort = new List<string>();
                        foreach (var item in lstAdd)
                            lstGroupSort.Add(item.GroupSort + "_" + item.ID);
                        var groupsort = string.Join(",", lstGroupSort);
                        foreach (var item in lstAdd)
                        {
                            item.GroupSort = groupsort;
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_OrderDNCodeChange(DTODIAppointmentOrder item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item.ID > 0)
                    {
                        var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                        var objGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == item.OrderGroupProductID);
                        if (obj != null && objGroup != null)
                        {
                            if (obj.Ton >= item.Ton - 0.00001)
                            {
                                obj.DNCode = item.DNCode;

                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                if (objGroup.DNCode != null)
                                {
                                    objGroup.DNCode = item.DNCode;
                                    objGroup.ModifiedBy = Account.UserName;
                                    objGroup.ModifiedDate = DateTime.Now;
                                }

                                var sub = obj.Ton - item.Ton;
                                if (sub > 0.001)
                                {
                                    obj.Ton = Math.Round(item.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                    obj.IsSplit = true;

                                    var objSub = new OPS_DITOGroupProduct();
                                    objSub.CreatedBy = Account.UserName;
                                    objSub.CreatedDate = DateTime.Now;
                                    objSub.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;

                                    objSub.OrderGroupProductID = obj.OrderGroupProductID;
                                    objSub.QuantityLoading = 0;
                                    objSub.IsInput = false;
                                    objSub.IsSplit = true;
                                    objSub.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                    objSub.Ton = objSub.TonTranfer = objSub.TonBBGN = Math.Round(sub, NoDigit, MidpointRounding.AwayFromZero);
                                    objSub.CBM = objSub.CBMTranfer = objSub.CBMBBGN = 0;
                                    objSub.Quantity = objSub.QuantityTranfer = objSub.QuantityBBGN = 0;
                                    objSub.GroupSort = "";
                                    objSub.DNCode = "";

                                    objSub.DateDN = obj.DateDN;
                                    model.OPS_DITOGroupProduct.Add(objSub);

                                    model.SaveChanges();

                                    objSub.GroupSort = objGroup.OrderID + "_" + objSub.OrderGroupProductID + "_" + objSub.ID;
                                    model.SaveChanges();
                                }
                                else
                                {
                                    model.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMVehicle> DIAppointment_Route_VehicleList(string request)
        {
            try
            {
                var result = new List<DTOFLMVehicle>();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID != null && c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck).Select(c => new DTOFLMVehicle
                    {
                        ID = c.CAT_Vehicle.ID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        MaxWeightCal = c.CAT_Vehicle.MaxWeightCal,
                        MaxWeight = c.CAT_Vehicle.MaxWeight > 0 ? c.CAT_Vehicle.MaxWeight : 0,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity > 0 ? c.CAT_Vehicle.MaxCapacity : 0,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID == null ? "" : c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName,
                        DriverID = c.CAT_Vehicle.DriverID,
                        DriverTelNo = c.CAT_Vehicle.Cellphone,
                    }).ToDataSourceResult(CreateRequest(request));
                    result = query.Data.Cast<DTOFLMVehicle>().ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMAssetTimeSheet> DIAppointment_Route_VehicleTimeList(string request)
        {
            try
            {
                var result = new List<DTOFLMAssetTimeSheet>();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID != null && c.FLM_Asset.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = c.FLM_Asset.CAT_Vehicle.ID,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        StatusOfAssetTimeSheetName = c.SYS_Var.ValueOfVar,
                        StatusOfAssetTimeSheetID = c.StatusOfAssetTimeSheetID,
                        ReferID = c.ReferID,
                        TypeID = (c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster) ? 1 : 0,
                        Note = ""
                    }).ToDataSourceResult(CreateRequest(request));
                    result = query.Data.Cast<DTOFLMAssetTimeSheet>().ToList();

                    var queryTO = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID)).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = -1,
                        DateFrom = c.ETD.Value,
                        DateTo = c.ETA.Value,
                        StatusOfAssetTimeSheetName = "",
                        TypeID = c.StatusOfDITOMasterID,
                        Note = ""
                    }).ToDataSourceResult(CreateRequest(request));
                    var lstTO = queryTO.Data.Cast<DTOFLMAssetTimeSheet>().ToList();
                    foreach (var item in result)
                    {
                        if (item.TypeID == 1)
                        {
                            var to = lstTO.FirstOrDefault(c => c.ID == item.ReferID);
                            if (to != null)
                            {
                                if (to.TypeID >= -(int)SYSVarType.StatusOfDITOMasterTendered && to.TypeID < -(int)SYSVarType.StatusOfDITOMasterReceived)
                                    item.TypeID = 2;
                                else if (to.TypeID >= -(int)SYSVarType.StatusOfDITOMasterReceived)
                                    item.TypeID = 3;
                            }
                            var objRoute = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == item.ReferID && c.ORD_GroupProduct.CUSRoutingID > 0).Select(c => new { c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code }).FirstOrDefault();
                            if (objRoute != null)
                            {
                                item.Note = objRoute.Code;
                            }
                        }
                        else
                        {
                            if (item.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetMaintence)
                                item.TypeID = -1;
                            else if (item.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetRegistry)
                                item.TypeID = -2;
                            else if (item.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetRepair)
                                item.TypeID = -3;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDIShiptmentRoute DIAppointment_Route_VehicleDetail(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = new DTOOPSDIShiptmentRoute();

                    result.ListTOMaster = model.OPS_DITOMaster.Where(c => c.VehicleID != null && lstid.Contains(c.VehicleID.Value)).Select(c => new DTOOPSDITOMaster
                    {
                        ID = c.ID,
                        Code = c.Code,
                        SortOrder = c.SortOrder,
                        ETD = c.ETD,
                        ETA = c.ETA,
                        GroupOfVehicleID = c.GroupOfVehicleID
                    }).ToList();

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_VehicleAdd(DTODIAppointmentOrder item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item != null && item.ETD != null && item.ETA != null && item.ListGroupProduct != null && item.ListGroupProduct.Count > 0)
                    {
                        item.ListRate = new List<DTODIAppointmentRate>();

                        DIAppointment_Route_Add(model, item);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentGroupProduct> DIAppointment_Route_VehicleGet(DTODIAppointmentOrder item)
        {
            try
            {
                var result = new List<DTODIAppointmentGroupProduct>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOGroupProduct.Where(c => c.GroupSort == item.GroupSort && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentGroupProduct
                    {
                        ID = c.ID,
                        TOMasterID = c.DITOMasterID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : "",
                        GroupOfVehicleID = c.DITOMasterID > 0 ? c.OPS_DITOMaster.GroupOfVehicleID : -1,
                        GroupOfVehicleName = (c.DITOMasterID > 0 && c.OPS_DITOMaster.GroupOfVehicleID != null) ? c.OPS_DITOMaster.CAT_GroupOfVehicle.GroupName : "",
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                        PartnerName = c.DITOMasterID == null && c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                        ProvinceName = c.DITOMasterID == null ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                        DistrictName = c.DITOMasterID == null ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                        SOCode = c.ORD_GroupProduct.SOCode,
                        IsFTL = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL,
                        AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,
                        OrderGroupProductID = c.OrderGroupProductID,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,
                        DNCode = c.DNCode,
                        TypeEditID = 3,
                        ExchangeTon = 0,
                        ExchangeCBM = 0,
                        ExchangeQuantity = 0,
                        GroupSort = c.GroupSort
                    }).ToList();

                    foreach (var group in result.Where(c => !c.IsFTL))
                    {
                        var product = model.ORD_Product.Where(c => c.GroupProductID == group.OrderGroupProductID)
                            .Select(c => new { c.CUS_Product.Code, c.CAT_Packing.TypeOfPackageID, c.ExchangeTon, c.ExchangeCBM, c.ExchangeQuantity }).FirstOrDefault();
                        if (product != null)
                        {
                            if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                group.TypeEditID = 1;
                            if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                group.TypeEditID = 2;

                            group.ExchangeTon = (product.ExchangeTon > 0) ? product.ExchangeTon.Value : 0;
                            group.ExchangeCBM = (product.ExchangeCBM > 0) ? product.ExchangeCBM.Value : 0;
                            group.ExchangeQuantity = (product.ExchangeQuantity > 0) ? product.ExchangeQuantity.Value : 0;
                            if (group.TypeEditID == 3)
                                group.ExchangeQuantity = 1;
                            group.ProductCode = product.Code;
                        }

                        if (group.TOMasterID > 0)
                        {
                            //if (model.OPS_DITOMasterStatus.Where(c => c.DITOMasterID == group.TOMasterID).Count() > 0)
                            //    throw FaultHelper.BusinessFault(null, null, "Chuyến này đã đã tạo tình trạng. Không cho phép lập chuyến");
                            //else 
                            if (model.POD_DIMaster.Where(c => c.DITOMasterID == group.TOMasterID).Count() > 0)
                                throw FaultHelper.BusinessFault(null, null, "Chuyến này đã đã tạo tình trạng. Không cho phép lập chuyến");
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTODIAppointmentOrder DIAppointment_Route_VehicleTimeGet(int id)
        {
            try
            {
                var result = default(DTODIAppointmentOrder);
                using (var model = new DataEntities())
                {
                    var objAsset = model.FLM_AssetTimeSheet.Where(c => c.ID == id).Select(c => new { c.ReferID, c.StatusOfAssetTimeSheetID }).FirstOrDefault();
                    if (objAsset != null)
                    {
                        if (objAsset.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster)
                        {
                            result = model.OPS_DITOMaster.Where(c => c.ID == objAsset.ReferID).Select(c => new DTODIAppointmentOrder
                            {
                                TOMasterID = c.ID,
                                TOMasterCode = c.Code,
                                DriverID = c.DriverID1,
                                DriverName = c.DriverName1,
                                DriverTelNo = c.DriverTel1,
                                ETD = c.ETD,
                                ETA = c.ETA,
                                GroupOfVehicleID = c.GroupOfVehicleID
                            }).FirstOrDefault();
                            if (result != null)
                            {
                                result.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == result.TOMasterID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentGroupProduct
                                {
                                    ID = c.ID,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    IsFTL = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL,
                                    GroupOfVehicleID = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID,
                                    GroupOfVehicleName = (c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID != null) ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : "",
                                    AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,
                                    OrderGroupProductID = c.OrderGroupProductID,
                                    GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                    GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                    PartnerName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL && c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                    ProvinceName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                                    DistrictName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                                    Ton = c.Ton,
                                    CBM = c.CBM,
                                    Quantity = c.Quantity,
                                    TypeEditID = 3,
                                    ExchangeTon = 0,
                                    ExchangeCBM = 0,
                                    ExchangeQuantity = 0,
                                    DNCode = c.DNCode,
                                    SOCode = c.ORD_GroupProduct.SOCode
                                }).ToList();

                                foreach (var group in result.ListGroupProduct)
                                {
                                    result.IsFTL = result.ListGroupProduct.Where(c => c.IsFTL).Count() > 0;

                                    var product = model.ORD_Product.Where(c => c.GroupProductID == group.OrderGroupProductID)
                                        .Select(c => new { c.CUS_Product.Code, c.CAT_Packing.TypeOfPackageID, c.CUS_Product.Weight, c.CUS_Product.CBM }).FirstOrDefault();
                                    if (product != null)
                                    {
                                        if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                            group.TypeEditID = 1;
                                        if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                            group.TypeEditID = 2;

                                        group.ExchangeTon = (product.Weight != null) ? product.Weight.Value : 0;
                                        group.ExchangeCBM = (product.CBM != null) ? product.CBM.Value : 0;

                                        if (group.TypeEditID == 3)
                                            group.ExchangeQuantity = 1;
                                        group.ProductCode = product.Code;
                                    }
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_VehicleRemove(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (id > 0)
                    {
                        var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == id);
                        if (objMaster != null && objMaster.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterApproved)
                        {
                            foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objMaster.ID))
                            {
                                if (model.OPS_DIImportGroupProduct.Count(c => c.DITOGroupProductID == item.ID) > 0)
                                    throw FaultHelper.BusinessFault(null, null, "Có dữ liệu import điều phối. Nhóm [" + item.ORD_GroupProduct.CUS_GroupOfProduct.Code + "].");

                                if (model.OPS_OPTOPSGroupProduct.Count(c => c.DITOGroupProductID == item.ID) > 0)
                                    throw FaultHelper.BusinessFault(null, null, "Có dữ liệu tối ưu xe tải. Nhóm [" + item.ORD_GroupProduct.CUS_GroupOfProduct.Code + "].");

                                if (model.OPS_DIPacketGroupProduct.Count(c => c.DITOGroupProductID == item.ID) > 0)
                                    throw FaultHelper.BusinessFault(null, null, "Có dữ liệu đơn hàng gửi đối tác. Nhóm [" + item.ORD_GroupProduct.CUS_GroupOfProduct.Code + "].");
                            }

                            var lstFTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == id && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel)
                                .Select(c => new { c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID, c.ORD_GroupProduct.OrderID }).Distinct().ToList();

                            foreach (var objFTL in lstFTL)
                            {
                                var objCopy = new OPS_DITOMaster();
                                objCopy.CreatedBy = Account.UserName;
                                objCopy.CreatedDate = DateTime.Now;
                                objCopy.SYSCustomerID = Account.SYSCustomerID;

                                objCopy.Code = DI_GetLastCode(model);
                                objCopy.IsHot = false;
                                objCopy.RateTime = 0;
                                objCopy.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterPlanning;
                                objCopy.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                                objCopy.SortOrder = objMaster.SortOrder;
                                objCopy.ETD = objMaster.ETD;
                                objCopy.ETA = objMaster.ETA;
                                objCopy.IsRouteVendor = objMaster.IsRouteVendor;
                                objCopy.IsRouteCustomer = objMaster.IsRouteCustomer;
                                objCopy.IsLoading = objMaster.IsLoading;
                                objCopy.IsBidding = objMaster.IsBidding;
                                objCopy.BiddingID = objMaster.BiddingID;
                                objCopy.Note = objMaster.Note;
                                objCopy.GroupOfVehicleID = objMaster.GroupOfVehicleID;
                                objCopy.KM = objMaster.KM;
                                objCopy.TransportModeID = objMaster.TransportModeID;
                                objCopy.TypeOfOrderID = objMaster.TypeOfOrderID;
                                objCopy.ContractID = objMaster.ContractID;
                                model.OPS_DITOMaster.Add(objCopy);
                                model.SaveChanges();
                                objCopy.Code = DICodePrefix + objCopy.ID.ToString(DICodeNum);
                                model.SaveChanges();
                                foreach (var objGroup in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == id && c.OrderGroupProductID > 0 &&
                                    c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL && c.ORD_GroupProduct.OrderID == objFTL.OrderID && c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID == objFTL.GroupOfVehicleID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel))
                                {
                                    objGroup.DITOMasterID = objCopy.ID;
                                }
                            }

                            var lstLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == id && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.CUSRoutingID > 0 && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel)
                                .Select(c => new { c.ID, c.ORD_GroupProduct.OrderID, c.ORD_GroupProduct.CUSRoutingID, c.OrderGroupProductID, c.Ton, c.CBM, c.Quantity, c.GroupSort, c.DNCode, c.DateDN }).Distinct();
                            foreach (var item in lstLTL)
                            {
                                var objGroup = new OPS_DITOGroupProduct();
                                objGroup.CreatedBy = Account.UserName;
                                objGroup.CreatedDate = DateTime.Now;
                                objGroup.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;

                                objGroup.OrderGroupProductID = item.OrderGroupProductID;
                                objGroup.QuantityLoading = 0;
                                objGroup.IsInput = false;
                                objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = item.Ton;
                                objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = item.CBM;
                                objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = item.Quantity;
                                objGroup.GroupSort = item.GroupSort;
                                objGroup.DNCode = item.DNCode;
                                objGroup.DateDN = item.DateDN;
                                model.OPS_DITOGroupProduct.Add(objGroup);

                                foreach (var o in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == item.ID))
                                {
                                    var objC = new OPS_DITOProduct();
                                    objC.CreatedBy = Account.UserName;
                                    objC.CreatedDate = DateTime.Now;
                                    objGroup.OPS_DITOProduct.Add(objC);
                                    objC.OrderProductID = o.OrderProductID;
                                    objC.Quantity = o.Quantity;
                                    objC.QuantityBBGN = o.QuantityBBGN;
                                    objC.QuantityExtReturn = o.QuantityExtReturn;
                                    objC.QuantityReturn = o.QuantityReturn;
                                    objC.QuantityTranfer = o.QuantityTranfer;
                                    objC.Note = o.Note;
                                }
                            }

                            foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objMaster.ID))
                            {
                                foreach (var product in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == item.ID))
                                {
                                    model.OPS_DITOProduct.Remove(product);
                                }
                                foreach (var product in model.FIN_Temp.Where(c => c.DITOGroupProductID == item.ID))
                                {
                                    model.FIN_Temp.Remove(product);
                                }
                                foreach (var plGroup in model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID == item.ID))
                                {
                                    foreach (var detail in model.FIN_PLDetails.Where(c => c.PLID == plGroup.PLDetailID))
                                        model.FIN_PLDetails.Remove(detail);

                                    model.FIN_PLGroupOfProduct.Remove(plGroup);
                                }
                                foreach (var plGroup in model.FIN_ManualFix.Where(c => c.DITOGroupProductID == item.ID))
                                {
                                    model.FIN_ManualFix.Remove(plGroup);
                                }
                                model.OPS_DITOGroupProduct.Remove(item);
                            }

                            foreach (var item in model.CAT_Trouble.Where(c => c.DITOMasterID == objMaster.ID))
                                model.CAT_Trouble.Remove(item);
                            foreach (var item in model.FLM_TOMasterCost.Where(c => c.DITOMasterID == objMaster.ID))
                            {
                                foreach (var detail in model.FLM_TOMasterCostDetail.Where(c => c.TOMasterCostID == item.ID))
                                    model.FLM_TOMasterCostDetail.Remove(detail);
                                model.FLM_TOMasterCost.Remove(item);
                            }

                            foreach (var plGroup in model.FIN_PLCosting.Where(c => c.DITOMasterID == objMaster.ID))
                                model.FIN_PLCosting.Remove(plGroup);

                            foreach (var item in model.FIN_PL.Where(c => c.DITOMasterID == objMaster.ID))
                            {
                                //foreach (var plAllocation in model.FIN_PLAllocation.Where(c => c.PLID == item.ID))
                                //    model.FIN_PLAllocation.Remove(plAllocation);
                                foreach (var detail in model.FIN_PLDetails.Where(c => c.PLID == item.ID))
                                {
                                    foreach (var plGroup in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == detail.ID))
                                        model.FIN_PLGroupOfProduct.Remove(plGroup);
                                    model.FIN_PLDetails.Remove(detail);
                                }
                                model.FIN_PL.Remove(item);
                            }
                            foreach (var item in model.FIN_PL.Where(c => c.OPS_COTO.COTOMasterID == objMaster.ID))
                            {
                                foreach (var detail in model.FIN_PLDetails.Where(c => c.PLID == item.ID))
                                    model.FIN_PLDetails.Remove(detail);
                                model.FIN_PL.Remove(item);
                            }
                            foreach (var item in model.POD_DIMaster.Where(c => c.DITOMasterID == objMaster.ID))
                            {
                                foreach (var detail in model.POD_DIMasterHistory.Where(c => c.DIMasterID == objMaster.ID))
                                    model.POD_DIMasterHistory.Remove(detail);
                                foreach (var detail in model.POD_DIProduct.Where(c => c.POD_DIGroupProduct.DIMasterID == item.ID))
                                    model.POD_DIProduct.Remove(detail);
                                foreach (var detail in model.POD_DIGroupProduct.Where(c => c.DIMasterID == item.ID))
                                    model.POD_DIGroupProduct.Remove(detail);
                                model.POD_DIMaster.Remove(item);
                            }
                            foreach (var item in model.OPS_DITODetail.Where(c => c.OPS_DITO.DITOMasterID == objMaster.ID))
                                model.OPS_DITODetail.Remove(item);
                            foreach (var item in model.OPS_DITO.Where(c => c.DITOMasterID == objMaster.ID))
                                model.OPS_DITO.Remove(item);
                            foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objMaster.ID))
                            {
                                foreach (var kpi in model.KPI_KPITime.Where(c => c.DITOGroupProductID == item.ID))
                                    model.KPI_KPITime.Remove(kpi);
                                model.OPS_DITOGroupProduct.Remove(item);
                            }
                            foreach (var item in model.OPS_DITORate.Where(c => c.DITOMasterID == objMaster.ID))
                                model.OPS_DITORate.Remove(item);

                            foreach (var item in model.OPS_DITOLocation.Where(c => c.DITOMasterID == objMaster.ID))
                                model.OPS_DITOLocation.Remove(item);


                            model.OPS_DITOMaster.Remove(objMaster);
                            model.SaveChanges();

                            HelperTimeSheet.Remove(model, Account, id, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_VehicleSave(DTODIAppointmentOrder item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item.ListGroupProduct != null && item.ListGroupProduct.Count > 0)
                    {
                        var objTOMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.TOMasterID);
                        if (objTOMaster != null)
                        {
                            if (objTOMaster.VehicleID != item.VehicleID)
                                HelperTimeSheet.Remove(model, Account, objTOMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                            List<int> lstTotalLocation = new List<int>();
                            var lstSub = new List<DTODIAppointmentGroupProduct>();
                            foreach (var group in item.ListGroupProduct.Where(c => !item.IsFTL))
                            {
                                var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == group.ID);
                                if (objGroup != null)
                                {
                                    objTOMaster.TypeOfOrderID = OPS_FindTypeOfOrder(model, objTOMaster.TypeOfOrderID, objGroup.ID);
                                    OPS_CountLocation(model, lstTotalLocation, objGroup.ID);
                                    if (group.Ton > 0 || group.CBM > 0)
                                    {
                                        switch (group.TypeEditID)
                                        {
                                            case 1:
                                                if (objGroup.Ton > group.Ton)
                                                {
                                                    var objCopy = new DTODIAppointmentGroupProduct();
                                                    objCopy.OrderID = group.OrderID;
                                                    objCopy.CUSRoutingID = group.CUSRoutingID;
                                                    objCopy.OrderGroupProductID = group.OrderGroupProductID;
                                                    objCopy.Ton = objGroup.Ton - group.Ton;
                                                    objCopy.CBM = objGroup.CBM - group.CBM;
                                                    objCopy.Quantity = objGroup.Quantity - group.Quantity;
                                                    objCopy.GroupSort = objGroup.GroupSort;
                                                    lstSub.Add(objCopy);
                                                }
                                                break;
                                            case 2:
                                                if (objGroup.CBM > group.CBM)
                                                {
                                                    var objCopy = new DTODIAppointmentGroupProduct();
                                                    objCopy.OrderID = group.OrderID;
                                                    objCopy.CUSRoutingID = group.CUSRoutingID;
                                                    objCopy.OrderGroupProductID = group.OrderGroupProductID;
                                                    objCopy.Ton = objGroup.Ton - group.Ton;
                                                    objCopy.CBM = objGroup.CBM - group.CBM;
                                                    objCopy.Quantity = objGroup.Quantity - group.Quantity;
                                                    objCopy.GroupSort = objGroup.GroupSort;
                                                    lstSub.Add(objCopy);
                                                }
                                                break;
                                            case 3:
                                                if (objGroup.Quantity > group.Quantity)
                                                {
                                                    var objCopy = new DTODIAppointmentGroupProduct();
                                                    objCopy.OrderID = group.OrderID;
                                                    objCopy.CUSRoutingID = group.CUSRoutingID;
                                                    objCopy.OrderGroupProductID = group.OrderGroupProductID;
                                                    objCopy.Ton = objGroup.Ton - group.Ton;
                                                    objCopy.CBM = objGroup.CBM - group.CBM;
                                                    objCopy.Quantity = objGroup.Quantity - group.Quantity;
                                                    objCopy.GroupSort = objGroup.GroupSort;
                                                    lstSub.Add(objCopy);
                                                }
                                                break;
                                        }
                                        objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = group.Ton;
                                        objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = group.CBM;
                                        objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = group.Quantity;
                                    }
                                    else
                                    {
                                        objGroup.DITOMasterID = null;
                                        foreach (var detail in model.OPS_DITODetail.Where(c => c.DITOGroupProductID == objGroup.ID))
                                            model.OPS_DITODetail.Remove(detail);
                                    }
                                }
                            }
                            objTOMaster.VehicleID = item.VehicleID;
                            objTOMaster.DriverID1 = item.DriverID > 0 ? item.DriverID : null;
                            objTOMaster.DriverName1 = item.DriverName;
                            objTOMaster.DriverTel1 = item.DriverTelNo;
                            objTOMaster.ETD = item.ETD.Value;
                            objTOMaster.ETA = item.ETA.Value;

                            OPS_CheckingTime(model, OPS_SystemSetting_Get(model), objTOMaster.ID, objTOMaster.VehicleID, null, objTOMaster.ETD, objTOMaster.ETA, false);

                            objTOMaster.ModifiedBy = Account.UserName;
                            objTOMaster.ModifiedDate = DateTime.Now;
                            if ((objTOMaster.VendorOfVehicleID == null || objTOMaster.VendorOfVehicleID == Account.SYSCustomerID) && objTOMaster.DriverID1 < 0)
                                objTOMaster.DriverID1 = OPS_FindFLMDriver(model, item.DriverName);
                            objTOMaster.TotalLocation = lstTotalLocation.Count;
                            model.SaveChanges();

                            if (lstSub.Count > 0)
                            {
                                foreach (var itemSub in lstSub)
                                {
                                    var objGroup = new OPS_DITOGroupProduct();
                                    objGroup.CreatedBy = Account.UserName;
                                    objGroup.CreatedDate = DateTime.Now;

                                    objGroup.OrderGroupProductID = itemSub.OrderGroupProductID;
                                    objGroup.QuantityLoading = 0;
                                    objGroup.IsInput = false;
                                    objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                    objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = itemSub.Ton;
                                    objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = itemSub.CBM;
                                    objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = itemSub.Quantity;
                                    objGroup.GroupSort = itemSub.GroupSort;
                                    objGroup.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                                    var ord = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == itemSub.OrderGroupProductID);
                                    if (ord != null)
                                        objGroup.DateDN = ord.ORD_Order.RequestDate;
                                    model.OPS_DITOGroupProduct.Add(objGroup);
                                }
                                model.SaveChanges();
                            }

                            HelperTimeSheet.Create(model, Account, objTOMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_VehicleMonitor(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (id > 0)
                    {
                        var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == id);
                        var objRate = model.OPS_DITORate.Where(c => c.DITOMasterID == id).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objMaster != null && objRate != null)
                        {
                            objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;

                            objRate.IsAccept = null;
                            objRate.IsSend = true;
                            objRate.FirstRateTime = DateTime.Now;
                            objRate.LastRateTime = DateTime.Now.AddHours(2);

                            // Cập nhật thời gian rời kho
                            var obj = model.OPS_DITOLocation.FirstOrDefault(c => c.DITOMasterID == id && c.SortOrder == 2);
                            if (obj != null)
                                obj.DateLeave = objMaster.ETD;
                            var lstOPSGroup = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == id);
                            foreach (var opsGroup in lstOPSGroup)
                            {
                                opsGroup.DateFromLeave = objMaster.ETD;
                                opsGroup.DateFromLoadEnd = objMaster.ETD;
                            }
                            model.SaveChanges();

                            // Tính chi phí offer
                            HelperFinance.DITOMaster_Planning(model, Account, objMaster.ID, objMaster.VendorOfVehicleID);
                            model.SaveChanges();
                        }

                        var lst = model.OPS_DITOMaster.Where(c => c.ID == id).Select(c => new DTOOPSMasterTenderRate
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            VendorOfVehicleID = c.VendorOfVehicleID,
                            IsAccept = true
                        }).ToList();
                        var first = lst.FirstOrDefault();
                        if (first != null && first.VehicleID > 0)
                        {
                            if (first.VendorOfVehicleID == Account.SYSCustomerID || first.VendorOfVehicleID == null)
                            {
                                DIAppointment_Route_Tender_Update(lst);
                            }
                            else
                            {
                                var lstVEN = model.OPS_DITORate.Where(c => c.DITOMasterID == id && c.VendorID == first.VendorOfVehicleID).Select(c => new DTOOPSTenderDITOMaster
                                {
                                    ID = c.ID,
                                    DITOMasterID = c.DITOMasterID,
                                    VehicleID = c.OPS_DITOMaster.VehicleID,
                                    VendorOfVehicleID = c.OPS_DITOMaster.VendorOfVehicleID,
                                    DriverName1 = c.OPS_DITOMaster.DriverName1,
                                    DriverTel1 = c.OPS_DITOMaster.DriverTel1
                                }).ToList();
                                DIAppointment_Route_TenderVendor_Update(lstVEN, true, first.VendorOfVehicleID.Value);
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_VehicleTenderApproved(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (id > 0)
                    {
                        var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == id);
                        var objRate = model.OPS_DITORate.Where(c => c.DITOMasterID == id && c.VendorID == objMaster.VendorOfVehicleID && c.IsSend && c.IsAccept == null).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objMaster != null && objRate != null)
                        {
                            objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;

                            objRate.IsAccept = true;
                            objRate.ModifiedBy = Account.UserName;
                            objRate.ModifiedDate = DateTime.Now;

                            // Cập nhật thời gian rời kho
                            var obj = model.OPS_DITOLocation.FirstOrDefault(c => c.DITOMasterID == id && c.SortOrder == 2);
                            if (obj != null)
                                obj.DateLeave = objMaster.ETD;
                            var lstOPSGroup = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == id);
                            foreach (var opsGroup in lstOPSGroup)
                            {
                                opsGroup.DateFromLeave = objMaster.ETD;
                                opsGroup.DateFromLoadEnd = objMaster.ETD;
                            }
                            model.SaveChanges();
                        }

                        var lst = model.OPS_DITOMaster.Where(c => c.ID == id).Select(c => new DTOOPSMasterTenderRate
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            VendorOfVehicleID = c.VendorOfVehicleID,
                            IsAccept = true
                        }).ToList();
                        var first = lst.FirstOrDefault();
                        if (first != null && first.VehicleID > 0)
                        {
                            if (first.VendorOfVehicleID == Account.SYSCustomerID || first.VendorOfVehicleID == null)
                            {
                                DIAppointment_Route_Tender_Update(lst);
                            }
                            else
                            {
                                var lstVEN = model.OPS_DITORate.Where(c => c.ID == objRate.ID).Select(c => new DTOOPSTenderDITOMaster
                                {
                                    ID = c.ID,
                                    DITOMasterID = c.DITOMasterID,
                                    VehicleID = c.OPS_DITOMaster.VehicleID,
                                    VendorOfVehicleID = c.OPS_DITOMaster.VendorOfVehicleID,
                                    DriverName1 = c.OPS_DITOMaster.DriverName1,
                                    DriverTel1 = c.OPS_DITOMaster.DriverTel1,
                                    DriverName2 = c.OPS_DITOMaster.DriverName2,
                                    DriverTel2 = c.OPS_DITOMaster.DriverTel2,
                                    DriverCard1 = c.OPS_DITOMaster.DriverCard1,
                                    DriverCard2 = c.OPS_DITOMaster.DriverCard2,
                                    DriverID1 = c.OPS_DITOMaster.DriverID1,
                                    DriverID2 = c.OPS_DITOMaster.DriverID2,
                                    //AssistantName1 = c.OPS_DITOMaster.AssistantName1,
                                    //AssistantName2 = c.OPS_DITOMaster.AssistantName2,
                                    //AssistantTel1 = c.OPS_DITOMaster.AssistantTel1,
                                    //AssistantTel2 = c.OPS_DITOMaster.AssistantTel2,
                                    //AssistantCard1 = c.OPS_DITOMaster.AssistantCard1,
                                    //AssistantCard2 = c.OPS_DITOMaster.AssistantCard2,
                                    //AssistantID1 = c.OPS_DITOMaster.AssistantID1,
                                    //AssistantID2 = c.OPS_DITOMaster.AssistantID2,
                                }).ToList();
                                DIAppointment_Route_TenderVendor_Update(lstVEN, true, first.VendorOfVehicleID.Value);
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMailVendor> DIAppointment_Route_VehicleTender(List<int> lstMasterID, List<DTODIAppointmentRouteTender> lstTender, double RateTime)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    List<DTOMailVendor> result = new List<DTOMailVendor>();
                    if (lstTender.Count(c => c.VendorID > 0) > 0)
                    {
                        foreach (var id in lstMasterID)
                        {
                            if (id > 0)
                            {
                                var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == id);
                                if (objMaster != null)
                                {
                                    objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterSendTender;
                                    objMaster.ModifiedBy = Account.UserName;
                                    objMaster.ModifiedDate = DateTime.Now;
                                    objMaster.RateTime = RateTime;
                                    objMaster.VendorOfVehicleID = null;
                                    objMaster.VehicleID = null;
                                    objMaster.DriverTel1 = string.Empty;
                                    objMaster.DriverName2 = string.Empty;
                                    objMaster.DriverID1 = null;

                                    // Xóa rate cũ
                                    foreach (var detail in model.OPS_DITORate.Where(c => c.DITOMasterID == id && ((!c.IsSend && c.VendorID > 0) || (c.IsSend && c.IsAccept == null))))
                                        model.OPS_DITORate.Remove(detail);

                                    model.SaveChanges();
                                    int SortOrder = 1;
                                    var lastSortOrder = 0;
                                    var lastSort = model.OPS_DITORate.Where(c => c.DITOMasterID == id).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                                    if (lastSort != null)
                                        SortOrder = lastSort.SortOrder + 1;

                                    lastSortOrder = SortOrder;

                                    // Add rate mới
                                    DateTime FirstRate = DateTime.Now;
                                    foreach (var tender in lstTender.Where(c => c.VendorID > 0).OrderBy(c => c.SortOrder))
                                    {
                                        var objRate = new OPS_DITORate();
                                        objRate.IsAccept = null;
                                        objRate.SortOrder = SortOrder;
                                        objRate.IsSend = false;
                                        objRate.FirstRateTime = FirstRate;
                                        FirstRate = FirstRate.AddHours(tender.RateTime);
                                        objRate.LastRateTime = FirstRate;
                                        objRate.CreatedBy = Account.UserName;
                                        objRate.CreatedDate = DateTime.Now;
                                        objRate.DITOMasterID = objMaster.ID;
                                        objRate.VendorID = tender.VendorID;
                                        objRate.IsManual = tender.IsManual;
                                        objRate.Debit = tender.IsManual ? tender.Debit : 0;
                                        model.OPS_DITORate.Add(objRate);

                                        // Gửi mail
                                        if (objRate.SortOrder == lastSortOrder)
                                        {
                                            var mail = result.FirstOrDefault(c => c.VendorID == objRate.VendorID && c.SysCustomerID == Account.SYSCustomerID);
                                            if (mail == null)
                                            {
                                                mail = new DTOMailVendor();
                                                mail.VendorID = objRate.VendorID.Value;
                                                mail.SysCustomerID = Account.SYSCustomerID;
                                                mail.ListMaster = new List<DTOMailVendorSort>();
                                                result.Add(mail);
                                            }
                                            var master = new DTOMailVendorSort();
                                            master.MasterID = objMaster.ID;
                                            master.SortOrder = SortOrder;
                                            mail.ListMaster.Add(master);
                                        }
                                        SortOrder++;
                                    }
                                }
                            }
                        }
                        model.SaveChanges();

                        foreach (var mail in result)
                        {
                            mail.ListRateID = new List<int>();
                            foreach (var item in mail.ListMaster)
                            {
                                var rate = model.OPS_DITORate.FirstOrDefault(c => c.DITOMasterID == item.MasterID && c.SortOrder == item.SortOrder);
                                if (rate != null)
                                    mail.ListRateID.Add(rate.ID);
                            }
                        }
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn ít nhất 1 nhà xe!");

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMailVendor> DIAppointment_Route_VehicleTenderReject(DataEntities model, List<int> lstMasterID, DTODIAppointmentRouteTenderReject item)
        {
            try
            {
                List<DTOMailVendor> result = new List<DTOMailVendor>();
                foreach (var id in lstMasterID)
                {
                    var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == id);
                    var objRate = model.OPS_DITORate.Where(c => c.DITOMasterID == id && c.IsSend && c.IsAccept == null).OrderBy(c => c.SortOrder).FirstOrDefault();
                    if (objMaster != null && objRate != null)
                    {
                        objMaster.ModifiedBy = Account.UserName;
                        objMaster.ModifiedDate = DateTime.Now;
                        objMaster.VehicleID = null;
                        objMaster.VendorOfVehicleID = null;
                        objMaster.DriverName1 = string.Empty;
                        objMaster.DriverID1 = null;
                        objMaster.DriverTel1 = string.Empty;

                        objRate.IsAccept = false;
                        objRate.ModifiedBy = Account.UserName;
                        objRate.ModifiedDate = DateTime.Now;
                        objRate.ReasonID = item.ReasonID;
                        objRate.Reason = item.Reason;

                        var nextRate = model.OPS_DITORate.Where(c => c.DITOMasterID == id && !c.IsSend && c.IsAccept == null && c.SortOrder == objRate.SortOrder + 1).FirstOrDefault();
                        if (nextRate != null)
                        {
                            nextRate.ModifiedBy = Account.UserName;
                            nextRate.ModifiedDate = DateTime.Now;
                            nextRate.IsAccept = null;
                            nextRate.FirstRateTime = DateTime.Now.AddMinutes(1);
                            TimeSpan time = nextRate.LastRateTime - nextRate.FirstRateTime ?? TimeSpan.FromHours(objMaster.RateTime ?? 2);
                            nextRate.LastRateTime = DateTime.Now.Add(time);

                            var mail = result.FirstOrDefault(c => c.VendorID == nextRate.VendorID && c.SysCustomerID == objMaster.SYSCustomerID);
                            if (mail == null)
                            {
                                mail = new DTOMailVendor();
                                mail.VendorID = nextRate.VendorID.Value;
                                mail.SysCustomerID = objMaster.SYSCustomerID;
                                mail.ListRateID = new List<int>();
                                result.Add(mail);
                            }
                            mail.ListRateID.Add(nextRate.ID);
                        }
                        else
                            objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    }
                }
                model.SaveChanges();

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public string DIAppointment_Route_VehicleRemoveMonitor(int id)
        {
            try
            {
                string result = string.Empty;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (id > 0)
                    {
                        var master = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == id);
                        if (master != null)
                        {
                            if (master.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered)
                            {
                                master.ModifiedBy = Account.UserName;
                                master.ModifiedDate = DateTime.Now;
                                master.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;

                                foreach (var item in model.CAT_Trouble.Where(c => c.DITOMasterID == master.ID))
                                {
                                    model.CAT_Trouble.Remove(item);
                                }
                                foreach (var item in model.CAT_Trouble.Where(c => c.DITOID > 0 && c.OPS_DITO.DITOMasterID == master.ID))
                                {
                                    model.CAT_Trouble.Remove(item);
                                }
                                foreach (var item in model.FIN_PL.Where(c => c.DITOMasterID == master.ID))
                                {
                                    //foreach (var detail in model.FIN_PLAllocation.Where(c => c.PLID == item.ID))
                                    //    model.FIN_PLAllocation.Remove(detail);
                                    foreach (var detail in model.FIN_PLDetails.Where(c => c.PLID == item.ID))
                                    {
                                        foreach (var grop in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == detail.ID))
                                            model.FIN_PLGroupOfProduct.Remove(grop);
                                        model.FIN_PLDetails.Remove(detail);
                                    }
                                    model.FIN_PL.Remove(item);
                                }
                                foreach (var item in model.POD_DIMaster.Where(c => c.DITOMasterID == master.ID))
                                {
                                    foreach (var detail in model.POD_DIProduct.Where(c => c.POD_DIGroupProduct.DIMasterID == item.ID))
                                        model.POD_DIProduct.Remove(detail);
                                    foreach (var detail in model.POD_DIGroupProduct.Where(c => c.DIMasterID == item.ID))
                                        model.POD_DIGroupProduct.Remove(detail);
                                    model.POD_DIMaster.Remove(item);
                                }
                                foreach (var item in model.KPI_KPITime.Where(c => c.DITOMasterID == master.ID))
                                    model.KPI_KPITime.Remove(item);

                                model.SaveChanges();

                                HelperTimeSheet.Remove(model, Account, master.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                            }
                            else
                                result = "Chỉ trả được lệnh chưa chạy";
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTODIAppointmentOrder DIAppointment_Route_VehicleTimelineChange(DTOFLMAssetTimeSheet source, DTODIAppointmentOrder target)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var result = new DTODIAppointmentOrder();
                    result.IsOrigin = true;

                    var objAsset = model.FLM_AssetTimeSheet.Where(c => c.ID == source.ID).Select(c => new { c.ReferID, c.StatusOfAssetTimeSheetID }).FirstOrDefault();
                    if (objAsset != null)
                    {
                        if (objAsset.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster)
                        {
                            var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == objAsset.ReferID);
                            var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objAsset.ReferID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new { c.Ton, c.CBM });
                            var objVehicle = model.CAT_Vehicle.Where(c => c.ID == target.VehicleID).Select(c => new { c.MaxWeightCal }).FirstOrDefault();
                            if (query.Count() > 0 && objMaster != null && objVehicle != null)
                            {
                                var ton = query.Sum(c => c.Ton);
                                var cbm = query.Sum(c => c.CBM);
                                if (objMaster.VehicleID != target.VehicleID && objVehicle.MaxWeightCal > 0 && objVehicle.MaxWeightCal < ton)
                                {
                                    result.IsOrigin = false;
                                    result = model.OPS_DITOMaster.Where(c => c.ID == objAsset.ReferID).Select(c => new DTODIAppointmentOrder
                                    {
                                        TOMasterID = c.ID,
                                        TOMasterCode = c.Code,
                                        ETD = c.ETD,
                                        ETA = c.ETA,
                                        GroupOfVehicleID = c.GroupOfVehicleID
                                    }).FirstOrDefault();
                                    if (result != null)
                                    {
                                        result.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == result.TOMasterID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentGroupProduct
                                        {
                                            ID = c.ID,
                                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                            IsFTL = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL,
                                            GroupOfVehicleID = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID,
                                            GroupOfVehicleName = (c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID != null) ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : "",
                                            AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,
                                            OrderGroupProductID = c.OrderGroupProductID,
                                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                            Ton = c.Ton,
                                            CBM = c.CBM,
                                            Quantity = c.Quantity,
                                            TypeEditID = 3,
                                            ExchangeTon = 0,
                                            ExchangeCBM = 0,
                                            ExchangeQuantity = 0,
                                            GroupSort = c.GroupSort
                                        }).ToList();

                                        foreach (var group in result.ListGroupProduct)
                                        {
                                            result.IsFTL = result.ListGroupProduct.Where(c => c.IsFTL).Count() > 0;

                                            var product = model.ORD_Product.Where(c => c.GroupProductID == group.OrderGroupProductID)
                                                .Select(c => new { c.CUS_Product.Code, c.CAT_Packing.TypeOfPackageID, c.CUS_Product.Weight, c.CUS_Product.CBM }).FirstOrDefault();
                                            if (product != null)
                                            {
                                                if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                                    group.TypeEditID = 1;
                                                if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                                    group.TypeEditID = 2;

                                                group.ExchangeTon = (product.Weight != null) ? product.Weight.Value : 0;
                                                group.ExchangeCBM = (product.CBM != null) ? product.CBM.Value : 0;

                                                if (group.TypeEditID == 3)
                                                    group.ExchangeQuantity = 1;
                                                group.ProductCode = product.Code;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (objMaster.VehicleID != target.VehicleID)
                                        HelperTimeSheet.Remove(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                                    objMaster.VehicleID = target.VehicleID;

                                    if (objMaster.ETA != null && objMaster.ETD != null)
                                    {
                                        TimeSpan timeSub = objMaster.ETA.Value.Subtract(objMaster.ETD.Value);
                                        objMaster.ETD = target.ETD.Value;
                                        objMaster.ETA = objMaster.ETD.Value.Add(timeSub);
                                    }
                                    model.SaveChanges();

                                    HelperTimeSheet.Create(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                                }
                            }
                        }
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSVehicle> DIAppointment_Route_VehicleListVehicle()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    return Appointment_Route_ListVehicleVendor(model, SYSVarType.TypeOfVehicleTruck);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CATGroupOfVehicle> DIAppointment_Route_VehicleListGroupVehicle()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return model.CAT_GroupOfVehicle.Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_VehicleAddRate(DTODIAppointmentOrder item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item != null && item.ETD != null && item.ETA != null && item.ListRate != null && item.ListGroupProduct != null && item.ListGroupProduct.Count > 0 && item.ListRate.Count > 0)
                    {
                        DIAppointment_Route_Add(model, item);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentVENVehicle> DIAppointment_Route_VehicleTOVENList()
        {
            try
            {
                var result = new List<DTODIAppointmentVENVehicle>();
                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();

                        result = model.CUS_Vehicle.Where(c => lstid.Contains(c.CustomerID) && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTODIAppointmentVENVehicle
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            VendorID = c.CustomerID,
                            VendorCode = c.CUS_Customer.Code,
                            VendorName = c.CUS_Customer.CustomerName,
                            DriverID = c.CAT_Vehicle.DriverID,
                            DriverTelNo = c.CAT_Vehicle.Cellphone
                        }).OrderBy(c => c.VehicleID).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOFLMAssetTimeSheet> DIAppointment_Route_VehicleTOVEN(string request)
        {
            try
            {
                var result = new List<DTOFLMAssetTimeSheet>();
                using (var model = new DataEntities())
                {
                    var lstVehicle = model.CUS_Vehicle.Select(c => new { c.ID, c.VehicleID, c.CustomerID }).ToList();
                    var query = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID && c.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterPlanning)
                        .Select(c => new DTOFLMAssetTimeSheet
                        {
                            ID = c.ID,
                            ReferID = c.ID,
                            AssetID = c.VehicleID.Value,
                            DateFrom = c.ETD.Value,
                            DateTo = c.ETA.Value,
                            StatusOfAssetTimeSheetName = "",
                            Note = "",
                            TypeID = c.StatusOfDITOMasterID,
                            VendorID = c.VendorOfVehicleID.Value
                        }).ToDataSourceResult(CreateRequest(request));
                    result.AddRange(query.Data.Cast<DTOFLMAssetTimeSheet>().ToList());
                    foreach (var item in result)
                    {
                        if (item.TypeID == -(int)SYSVarType.StatusOfDITOMasterTendered)
                            item.TypeID = 2;
                        else if (item.TypeID >= -(int)SYSVarType.StatusOfDITOMasterReceived)
                            item.TypeID = 3;
                        else
                            item.TypeID = 1;

                        var objVehicle = lstVehicle.FirstOrDefault(c => c.VehicleID == item.AssetID && c.CustomerID == item.VendorID);
                        if (objVehicle != null)
                            item.AssetID = objVehicle.ID;
                        else
                            item.AssetID = 0;

                        var objRoute = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == item.ReferID && c.ORD_GroupProduct.CUSRoutingID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new { c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code }).FirstOrDefault();
                        if (objRoute != null)
                            item.Note = objRoute.Code;
                    }

                    model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == null && c.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterPlanning)
                        .Select(c => new DTOFLMAssetTimeSheet
                        {
                            ID = c.ID,
                            ReferID = c.ID,
                            AssetID = -1,
                            DateFrom = c.ETD.Value,
                            DateTo = c.ETA.Value,
                            StatusOfAssetTimeSheetName = "",
                            Note = "",
                            TypeID = 1
                        }).ToDataSourceResult(CreateRequest(request));
                    result.AddRange(query.Data.Cast<DTOFLMAssetTimeSheet>().ToList());
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentOrder> DIAppointment_Route_VehicleTOVENInDate(int id)
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();
                using (var model = new DataEntities())
                {
                    var objTO = model.OPS_DITOMaster.Where(c => c.ID == id).Select(c => new { c.VehicleID, c.VendorOfVehicleID, c.ETD, c.ETA }).FirstOrDefault();
                    if (objTO != null)
                    {
                        if (objTO.VehicleID == null)
                        {
                            result = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == null && c.VendorOfVehicleID == null && c.VendorOfVehicleID != Account.SYSCustomerID && ((c.ETD >= objTO.ETD && c.ETD <= objTO.ETA) || (c.ETA >= objTO.ETD && c.ETA <= objTO.ETA))).Select(c => new DTODIAppointmentOrder
                            {
                                TOMasterID = c.ID,
                                TOMasterCode = c.Code,
                                VehicleID = -1,
                                VehicleCode = "",
                                VendorOfVehicleID = c.VendorOfVehicleID,
                                ETD = c.ETD,
                                ETA = c.ETA,
                                DriverID = c.DriverID1,
                                DriverName = c.DriverName1,
                                DriverTelNo = c.DriverTel1,
                                GroupOfVehicleID = c.GroupOfVehicleID,
                                RateTime = c.RateTime,
                                TypeID = c.StatusOfDITOMasterID
                            }).ToList();
                        }
                        else
                        {
                            result = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == objTO.VehicleID.Value && c.VehicleID > 0 && c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID && c.VendorOfVehicleID == objTO.VendorOfVehicleID && ((c.ETD >= objTO.ETD && c.ETD <= objTO.ETA) || (c.ETA >= objTO.ETD && c.ETA <= objTO.ETA))).Select(c => new DTODIAppointmentOrder
                            {
                                TOMasterID = c.ID,
                                TOMasterCode = c.Code,
                                VehicleID = c.VehicleID.Value,
                                VehicleCode = (c.VehicleID != null) ? c.CAT_Vehicle.RegNo : "",
                                VendorOfVehicleID = c.VendorOfVehicleID,
                                ETD = c.ETD,
                                ETA = c.ETA,
                                DriverID = c.DriverID1,
                                DriverName = c.DriverName1,
                                DriverTelNo = c.DriverTel1,
                                GroupOfVehicleID = c.GroupOfVehicleID,
                                RateTime = c.RateTime,
                                TypeID = c.StatusOfDITOMasterID
                            }).ToList();
                        }

                        foreach (var item in result)
                        {
                            if (item.TypeID == -(int)SYSVarType.StatusOfDITOMasterTendered)
                                item.TypeID = 2;
                            else if (item.TypeID >= -(int)SYSVarType.StatusOfDITOMasterReceived)
                                item.TypeID = 3;
                            else
                                item.TypeID = 1;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTODIAppointmentOrder DIAppointment_Route_VehicleTOVENGet(int id)
        {
            try
            {
                var result = default(DTODIAppointmentOrder);
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOMaster.Where(c => c.ID == id).Select(c => new DTODIAppointmentOrder
                    {
                        TOMasterID = c.ID,
                        TOMasterCode = c.Code,
                        VehicleCode = (c.VehicleID != null) ? c.CAT_Vehicle.RegNo : "",
                        VendorOfVehicleID = c.VendorOfVehicleID,
                        VendorOfVehicleName = c.VendorOfVehicleID > 0 ? c.CUS_Customer.CustomerName : "",
                        ETD = c.ETD,
                        ETA = c.ETA,
                        DriverID = c.DriverID1,
                        DriverName = c.DriverName1,
                        DriverTelNo = c.DriverTel1,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        RateTime = c.RateTime,
                        TransportModeID = c.TransportModeID
                    }).FirstOrDefault();
                    if (result != null)
                    {
                        result.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == result.TOMasterID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentGroupProduct
                        {
                            ID = c.ID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            IsFTL = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL,
                            GroupOfVehicleID = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID,
                            GroupOfVehicleName = (c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID != null) ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : "",
                            AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,
                            OrderGroupProductID = c.OrderGroupProductID,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            PartnerName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL && c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                            ProvinceName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : "",
                            DistrictName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : "",
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            TypeEditID = 3,
                            ExchangeTon = 0,
                            ExchangeCBM = 0,
                            ExchangeQuantity = 0,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode
                        }).ToList();

                        foreach (var group in result.ListGroupProduct)
                        {
                            result.IsFTL = result.ListGroupProduct.Where(c => c.IsFTL).Count() > 0;

                            var product = model.ORD_Product.Where(c => c.GroupProductID == group.OrderGroupProductID)
                                .Select(c => new { c.CUS_Product.Code, c.CAT_Packing.TypeOfPackageID, c.CUS_Product.Weight, c.CUS_Product.CBM }).FirstOrDefault();
                            if (product != null)
                            {
                                if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                    group.TypeEditID = 1;
                                if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                    group.TypeEditID = 2;
                                group.ExchangeTon = (product.Weight != null) ? product.Weight.Value : 0;
                                group.ExchangeCBM = (product.CBM != null) ? product.CBM.Value : 0;
                                if (group.TypeEditID == 3)
                                    group.ExchangeQuantity = 1;
                                group.ProductCode = product.Code;
                            }
                        }

                        result.ListRate = model.OPS_DITORate.Where(c => c.DITOMasterID == result.TOMasterID).Select(c => new DTODIAppointmentRate
                        {
                            VendorID = c.VendorID,
                            SortOrder = c.SortOrder,
                            IsManual = c.IsManual,
                            VehicleCode = "",
                            Debit = c.Debit
                        }).ToList();
                        foreach (var item in result.ListRate)
                        {
                            if (result.VendorOfVehicleID > 0 && item.VendorID == result.VendorOfVehicleID)
                                item.VehicleCode = result.VehicleCode;
                        }
                        while (result.ListRate.Count < 3)
                        {
                            result.ListRate.Add(new DTODIAppointmentRate { VendorID = null, SortOrder = result.ListRate.Count, IsManual = false, VehicleCode = "", Debit = 0 });
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_VehicleSend(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (id > 0)
                    {

                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void DIAppointment_Route_Add(DataEntities model, DTODIAppointmentOrder item)
        {
            var vehicleid = -1;
            var vendorid = -1;
            if (item.ListRate.Count > 0)
            {
                if (item.ListRate.Where(c => c.VendorID > 0 && c.VehicleCode != null && c.VehicleCode != string.Empty).Count() == 1)
                {
                    var itemRate = item.ListRate.FirstOrDefault(c => c.VendorID > 0 && c.VehicleCode != null && c.VehicleCode != string.Empty);
                    if (itemRate != null && itemRate.VehicleCode.Trim() != string.Empty)
                    {
                        string regNo = itemRate.VehicleCode.Trim();
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo == regNo);
                        if (obj == null)
                        {
                            obj = new CAT_Vehicle();
                            obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTruck;
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;

                            obj.RegNo = regNo;
                            obj.IsOwn = false;
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }

                        if (obj.ID < 1)
                            model.CAT_Vehicle.Add(obj);

                        var cusVehicle = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == obj.ID && c.CustomerID == itemRate.VendorID);
                        if (cusVehicle == null)
                        {
                            cusVehicle = new CUS_Vehicle();
                            cusVehicle.CAT_Vehicle = obj;
                            cusVehicle.CustomerID = itemRate.VendorID.Value;
                            cusVehicle.CreatedBy = Account.UserName;
                            cusVehicle.CreatedDate = DateTime.Now;
                            model.CUS_Vehicle.Add(cusVehicle);

                            model.SaveChanges();
                        }
                        vehicleid = obj.ID;
                        vendorid = itemRate.VendorID.Value;
                    }
                }
            }
            else
            {
                vehicleid = item.VehicleID;
                vendorid = Account.SYSCustomerID;
            }

            var objFTL = item.ListGroupProduct.FirstOrDefault(c => c.TOMasterID > 0);
            if (objFTL != null)
            {
                //FTL

                var countFTL = item.ListGroupProduct.Where(c => c.TOMasterID > 0).Select(c => c.TOMasterID.Value).Distinct().Count();
                if (countFTL > 1)
                {
                    var lstTORemoveID = new List<int>();
                    foreach (var group in item.ListGroupProduct.Where(c => c.TOMasterID > 0 && c.TOMasterID != objFTL.TOMasterID))
                    {
                        var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == group.ID);
                        if (objGroup != null)
                        {
                            lstTORemoveID.Add(objGroup.DITOMasterID.Value);
                            //Cap nhat TOMaster
                            objGroup.DITOMasterID = objFTL.TOMasterID;
                        }
                    }
                    foreach (var detail in model.OPS_DITODetail.Where(c => lstTORemoveID.Contains(c.OPS_DITO.DITOMasterID)))
                        model.OPS_DITODetail.Remove(detail);
                    foreach (var detail in model.OPS_DITO.Where(c => lstTORemoveID.Contains(c.DITOMasterID)))
                        model.OPS_DITO.Remove(detail);
                    foreach (var detail in model.OPS_DITOMaster.Where(c => lstTORemoveID.Contains(c.ID)))
                        model.OPS_DITOMaster.Remove(detail);
                    foreach (var detail in model.KPI_KPITime.Where(c => c.DITOMasterID.HasValue && lstTORemoveID.Contains(c.DITOMasterID.Value)))
                        model.KPI_KPITime.Remove(detail);
                    foreach (var detail in model.OPS_DITOLocation.Where(c => lstTORemoveID.Contains(c.DITOMasterID)))
                        model.OPS_DITOLocation.Remove(detail);
                    model.SaveChanges();
                }

                var objTOMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == objFTL.TOMasterID);
                if (objTOMaster != null)
                {
                    objTOMaster.TransportModeID = -(int)SYSVarType.TransportModeFTL;
                    objTOMaster.RateTime = item.RateTime;
                    if (objTOMaster.GroupOfVehicleID > 0)
                        objTOMaster.GroupOfVehicleID = item.GroupOfVehicleID;
                    objTOMaster.ETD = item.ETD.Value;
                    objTOMaster.ETA = item.ETA.Value;
                    objTOMaster.ModifiedBy = Account.UserName;
                    objTOMaster.ModifiedDate = DateTime.Now;

                    var lstRemove = new List<OPS_DITOGroupProduct>();
                    var lstSub = DIAppointment_Route_GetListSub(model, item.ListGroupProduct, ref lstRemove, objTOMaster.ID);

                    if (vehicleid > 0)
                    {
                        objTOMaster.VehicleID = vehicleid;
                        objTOMaster.VendorOfVehicleID = vendorid;
                    }
                    objTOMaster.DriverID1 = item.DriverID > 0 ? item.DriverID : null;
                    objTOMaster.DriverName1 = item.DriverName;
                    objTOMaster.DriverTel1 = item.DriverTelNo;
                    objTOMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    if ((objTOMaster.VendorOfVehicleID == null || objTOMaster.VendorOfVehicleID == Account.SYSCustomerID) && objTOMaster.DriverID1 < 0)
                        objTOMaster.DriverID1 = OPS_FindFLMDriver(model, item.DriverName);
                    //remove emty
                    foreach (var group in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objTOMaster.ID && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL && c.Ton <= 0))
                        model.OPS_DITOGroupProduct.Remove(group);
                    var dateRate = DateTime.Now;
                    objTOMaster.RateTime = 2;
                    if (item.ListRate.Count > 0)
                    {
                        foreach (var rate in item.ListRate)
                        {
                            if (rate.VendorID > 0 & rate.SortOrder > 0)
                            {
                                Appointment_Route_CreateRate(model, true, objTOMaster.ID, rate.VendorID, dateRate, objTOMaster.RateTime.Value, rate.Debit, rate.IsManual, rate.SortOrder);
                                dateRate = dateRate.AddHours(objTOMaster.RateTime.Value);
                            }
                        }
                    }
                    else
                    {
                        Appointment_Route_CreateRate(model, true, objTOMaster.ID, null, dateRate, objTOMaster.RateTime.Value, 0, false, 1);
                    }
                    model.SaveChanges();

                    //sort and route
                    foreach (var objGroup in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objTOMaster.ID))
                        objGroup.GroupSort = objGroup.GroupSort + "_" + objTOMaster.ID;
                    DIAppointment_Route_CreateDITO(model, objTOMaster.ID, item.ETD.Value, item.ETA.Value);
                    DIAppointment_Route_CreateDITOLocation(model, objTOMaster.ID);
                    if (vendorid == Account.SYSCustomerID)
                        HelperTimeSheet.Create(model, Account, objTOMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                    DIAppointment_Route_CreateListSub(model, lstSub, null);
                }

                //FTL end
            }
            else
            {
                //LTL

                var lstRemove = new List<OPS_DITOGroupProduct>();
                var lstSub = DIAppointment_Route_GetListSub(model, item.ListGroupProduct, ref lstRemove);

                var objMaster = DIAppointment_Route_CreateFromOrderGroupProductID(model, item.ListGroupProduct.Select(c => c.ID).ToList(), item.ETD.Value, item.ETA.Value);
                if (objMaster.ListTO.Count > 0)
                {
                    objMaster.TransportModeID = -(int)SYSVarType.TransportModeLTL;
                    objMaster.RateTime = item.RateTime;
                    if (objMaster.GroupOfVehicleID > 0)
                        objMaster.GroupOfVehicleID = item.GroupOfVehicleID;
                    objMaster = DI_TOMasterCreate(model, objMaster);
                    var objTOMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == objMaster.ID);
                    if (vehicleid > 0)
                    {
                        objTOMaster.VehicleID = vehicleid;
                        objTOMaster.VendorOfVehicleID = vendorid;
                    }
                    objTOMaster.DriverID1 = item.DriverID > 0 ? item.DriverID : null;
                    objTOMaster.DriverName1 = item.DriverName;
                    objTOMaster.DriverTel1 = item.DriverTelNo;
                    objTOMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    if ((objTOMaster.VendorOfVehicleID == null || objTOMaster.VendorOfVehicleID == Account.SYSCustomerID) && objTOMaster.DriverID1 < 0)
                        objTOMaster.DriverID1 = OPS_FindFLMDriver(model, item.DriverName);
                    var dateRate = DateTime.Now;
                    objTOMaster.RateTime = 2;
                    if (item.ListRate.Count > 0)
                    {
                        foreach (var rate in item.ListRate)
                        {
                            if (rate.VendorID > 0 & rate.SortOrder > 0)
                            {
                                Appointment_Route_CreateRate(model, true, objTOMaster.ID, rate.VendorID, dateRate, objTOMaster.RateTime.Value, rate.Debit, rate.IsManual, rate.SortOrder);
                                dateRate = dateRate.AddHours(objTOMaster.RateTime.Value);
                            }
                        }
                    }
                    else
                    {
                        Appointment_Route_CreateRate(model, true, objTOMaster.ID, null, dateRate, objTOMaster.RateTime.Value, 0, false, 1);
                    }

                    List<int> lstTotalLocation = new List<int>();
                    foreach (var objGroup in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objTOMaster.ID))
                    {
                        objTOMaster.TypeOfOrderID = OPS_FindTypeOfOrder(model, objTOMaster.TypeOfOrderID, objGroup.ID);
                        OPS_CountLocation(model, lstTotalLocation, objGroup.ID);
                        var itemGroup = item.ListGroupProduct.FirstOrDefault(c => c.OrderGroupProductID == objGroup.OrderGroupProductID);
                        if (itemGroup != null)
                        {
                            objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = itemGroup.Ton;
                            objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = itemGroup.CBM;
                            objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = itemGroup.Quantity;
                        }
                        objGroup.GroupSort = objGroup.GroupSort + "_" + objTOMaster.ID;
                    }
                    objTOMaster.TotalLocation = lstTotalLocation.Count;
                    model.SaveChanges();

                    if (vendorid == Account.SYSCustomerID)
                        HelperTimeSheet.Create(model, Account, objTOMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                    DIAppointment_Route_CreateListSub(model, lstSub, lstRemove);
                }

                //LTL end
            }
        }

        private List<DTODIAppointmentGroupProduct> DIAppointment_Route_GetListSub(DataEntities model, List<DTODIAppointmentGroupProduct> lstGroupProduct, ref List<OPS_DITOGroupProduct> lstRemove, int tomasterid = -1)
        {
            var result = new List<DTODIAppointmentGroupProduct>();

            foreach (var group in lstGroupProduct.Where(c => c.TOMasterID < 1 || c.TOMasterID == null))
            {
                var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == group.ID);
                if (objGroup != null)
                {
                    switch (group.TypeEditID)
                    {
                        case 1:
                            if (objGroup.Ton > group.Ton)
                            {
                                if (objGroup.Ton - group.Ton > 0.001)
                                {
                                    var objCopy = new DTODIAppointmentGroupProduct();
                                    objCopy.OrderID = group.OrderID;
                                    objCopy.OrderGroupProductID = group.OrderGroupProductID;
                                    objCopy.CUSRoutingID = group.CUSRoutingID;
                                    objCopy.OrderGroupProductID = group.OrderGroupProductID;
                                    objCopy.Ton = objGroup.Ton - group.Ton;
                                    objCopy.CBM = objGroup.CBM - group.CBM;
                                    objCopy.Quantity = objGroup.Quantity - group.Quantity;
                                    objCopy.GroupSort = objGroup.GroupSort;
                                    objCopy.DNCode = objGroup.DNCode;
                                    result.Add(objCopy);
                                }
                            }
                            break;
                        case 2:
                            if (objGroup.CBM > group.CBM)
                            {
                                if (objGroup.CBM - group.CBM > 0.001)
                                {
                                    var objCopy = new DTODIAppointmentGroupProduct();
                                    objCopy.OrderID = group.OrderID;
                                    objCopy.OrderGroupProductID = group.OrderGroupProductID;
                                    objCopy.CUSRoutingID = group.CUSRoutingID;
                                    objCopy.OrderGroupProductID = group.OrderGroupProductID;
                                    objCopy.Ton = objGroup.Ton - group.Ton;
                                    objCopy.CBM = objGroup.CBM - group.CBM;
                                    objCopy.Quantity = objGroup.Quantity - group.Quantity;
                                    objCopy.GroupSort = objGroup.GroupSort;
                                    objCopy.DNCode = objGroup.DNCode;
                                    result.Add(objCopy);
                                }
                            }
                            break;
                        case 3:
                            if (objGroup.Quantity > group.Quantity)
                            {
                                if (objGroup.Quantity - group.Quantity > 0.001)
                                {
                                    var objCopy = new DTODIAppointmentGroupProduct();
                                    objCopy.OrderID = group.OrderID;
                                    objCopy.OrderGroupProductID = group.OrderGroupProductID;
                                    objCopy.CUSRoutingID = group.CUSRoutingID;
                                    objCopy.OrderGroupProductID = group.OrderGroupProductID;
                                    objCopy.Ton = objGroup.Ton - group.Ton;
                                    objCopy.CBM = objGroup.CBM - group.CBM;
                                    objCopy.Quantity = objGroup.Quantity - group.Quantity;
                                    objCopy.GroupSort = objGroup.GroupSort;
                                    objCopy.DNCode = objGroup.DNCode;
                                    result.Add(objCopy);
                                }
                            }
                            break;
                    }
                    objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = group.Ton;
                    objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = group.CBM;
                    objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = group.Quantity;

                    if (tomasterid > 0)
                        objGroup.DITOMasterID = tomasterid;
                    if (lstRemove != null)
                        lstRemove.Add(objGroup);
                }
            }

            return result;
        }

        private void DIAppointment_Route_CreateListSub(DataEntities model, List<DTODIAppointmentGroupProduct> lstSub, List<OPS_DITOGroupProduct> lstRemove)
        {
            if (lstSub != null && lstSub.Count > 0)
            {
                var lstAdd = new List<OPS_DITOGroupProduct>();
                foreach (var sub in lstSub)
                {
                    if (sub.Ton >= 0.001 || sub.CBM >= 0.001)
                    {
                        var objGroup = new OPS_DITOGroupProduct();
                        objGroup.CreatedBy = Account.UserName;
                        objGroup.CreatedDate = DateTime.Now;

                        objGroup.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                        objGroup.OrderGroupProductID = sub.OrderGroupProductID;
                        objGroup.QuantityLoading = 0;
                        objGroup.IsInput = false;
                        objGroup.IsSplit = true;
                        objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                        objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = sub.Ton;
                        objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = sub.CBM;
                        objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = sub.Quantity;
                        objGroup.GroupSort = sub.GroupSort;
                        objGroup.DNCode = sub.DNCode;
                        var ord = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == sub.OrderGroupProductID);
                        if (ord != null)
                            objGroup.DateDN = ord.ORD_Order.RequestDate;
                        model.OPS_DITOGroupProduct.Add(objGroup);
                        lstAdd.Add(objGroup);
                    }
                }
                if (lstAdd.Count > 0)
                {
                    model.SaveChanges();

                    string groupsort = string.Empty;
                    if (lstAdd.Count > 3)
                        groupsort = string.Join("_", lstAdd.Select(c => c.ID).ToList());
                    else
                        groupsort = string.Join("_", lstAdd.Select(c => c.ID + "_" + c.OrderGroupProductID.Value).ToList());

                    foreach (var item in lstAdd)
                        item.GroupSort = groupsort;
                    model.SaveChanges();
                }
            }
            if (lstRemove != null && lstRemove.Count > 0)
            {
                foreach (var item in lstRemove)
                    model.OPS_DITOGroupProduct.Remove(item);
                model.SaveChanges();
            }
        }

        private DTOOPSDITOMaster DIAppointment_Route_CreateFromOrderGroupProductID(DataEntities model, List<int> lstid, DateTime etd, DateTime eta)
        {
            var objMaster = new DTOOPSDITOMaster();
            objMaster.SortOrder = 1;
            objMaster.IsRouteVendor = false;
            objMaster.IsRouteCustomer = false;
            objMaster.IsLoading = false;
            objMaster.IsBidding = false;
            objMaster.KM = 0;
            objMaster.ETD = etd;
            objMaster.ETA = eta;

            objMaster.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.CUSRoutingID > 0 &&
                lstid.Contains(c.ID) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDITOGroupProduct
                {
                    ID = c.ID,
                    OrderGroupProductID = c.OrderGroupProductID,
                    CATLocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                    CATLocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,
                    ETD = c.ORD_GroupProduct.ETD,
                    ETA = c.ORD_GroupProduct.ETA,
                    Ton = c.Ton,
                    CBM = c.CBM,
                    Quantity = c.Quantity,
                    TonTranfer = c.TonTranfer,
                    CBMTranfer = c.CBMTranfer,
                    QuantityTranfer = c.QuantityTranfer,
                    TonBBGN = c.TonBBGN,
                    CBMBBGN = c.CBMBBGN,
                    QuantityBBGN = c.QuantityBBGN,
                    QuantityLoading = c.QuantityLoading,
                    GroupSort = c.GroupSort,
                    DNCode = c.DNCode,
                    TypeOfOrderID = c.ORD_GroupProduct.ORD_Order.TypeOfOrderID
                }).ToList();

            objMaster.TypeOfOrderID = OPS_FindTypeOfOrder(model, objMaster.TypeOfOrderID, objMaster.ListGroupProduct.FirstOrDefault().ID);
            var lstFrom = objMaster.ListGroupProduct.Select(c => c.CATLocationFromID).Distinct().ToList();
            var lstTo = objMaster.ListGroupProduct.Select(c => c.CATLocationToID).Distinct().ToList();
            var localFrom = lstFrom.FirstOrDefault();
            //Bat dau tu 2
            int sort = 1 + 1;
            objMaster.ListTO = new List<DTOOPSDITO>();
            if (lstFrom.Count > 2)
            {
                for (int i = 1; i < lstFrom.Count; i++)
                {
                    var localNext = lstFrom[i];
                    var objTO = new DTOOPSDITO();
                    objTO.SortOrder = sort;
                    objTO.LocationFromID = localFrom;
                    objTO.LocationToID = localNext;
                    objTO.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                    objTO.IsOPS = true;
                    objTO.KM = 0;
                    objTO.ETD = etd;
                    objTO.ListOrderGroupProductID = objMaster.ListGroupProduct.Where(c => c.CATLocationFromID == localFrom).Select(c => c.OrderGroupProductID.Value).ToList();
                    //objTO.RoutingID = OPS_CreateRoute(model, localFrom, localNext);
                    objMaster.ListTO.Add(objTO);

                    localFrom = localNext;
                    sort++;
                }
            }
            bool isFirst = true;
            foreach (var localNext in lstTo)
            {
                var objTO = new DTOOPSDITO();
                objTO.SortOrder = sort;
                objTO.LocationFromID = localFrom;
                objTO.LocationToID = localNext;
                if (isFirst) isFirst = false;
                objTO.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                objTO.IsOPS = true;
                objTO.KM = 0;
                objTO.ETA = eta;
                objTO.ListOrderGroupProductID = objMaster.ListGroupProduct.Where(c => c.CATLocationToID == localFrom).Select(c => c.OrderGroupProductID.Value).ToList();
                //objTO.RoutingID = OPS_CreateRoute(model, localFrom, localNext);
                objMaster.ListTO.Add(objTO);

                localFrom = localNext;
                sort++;
            }
            if (objMaster.ListTO.Count > 0)
            {
                var objTO = new DTOOPSDITO();
                objTO.SortOrder = 1;
                objTO.LocationFromID = LocationDefaultID;
                objTO.LocationToID = objMaster.ListTO[0].LocationFromID;
                objTO.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                objTO.IsOPS = false;
                objTO.KM = 0;
                objTO.ETA = etd;
                objTO.ListOrderGroupProductID = new List<int>();
                //objTO.RoutingID = OPS_CreateRoute(model, LocationDefaultID, objMaster.ListTO[0].LocationFromID);

                objMaster.ListTO.Insert(0, objTO);
            }

            return objMaster;
        }

        private void DIAppointment_Route_CreateDITO(DataEntities model, int tomasterid, DateTime etd, DateTime eta)
        {
            foreach (var item in model.OPS_DITODetail.Where(c => c.OPS_DITO.DITOMasterID == tomasterid))
                model.OPS_DITODetail.Remove(item);
            foreach (var item in model.OPS_DITO.Where(c => c.DITOMasterID == tomasterid))
                model.OPS_DITO.Remove(item);

            model.SaveChanges();

            var lstRoute = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == tomasterid).Select(c => new { c.ID, LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID, c.ORD_GroupProduct.ETD, LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID, c.ORD_GroupProduct.ETA }).ToList();
            var lstFrom = lstRoute.Select(c => c.LocationFromID).Distinct().ToList();
            var lstTo = lstRoute.Select(c => c.LocationToID).Distinct().ToList();
            var localFrom = lstFrom.FirstOrDefault();
            //Bat dau tu 2
            int sort = 1 + 1;
            var lstDITO = new List<DTOOPSDITO>();
            var lstDITOGroup = new List<int>();
            if (lstFrom.Count >= 2)
            {
                for (int i = 1; i < lstFrom.Count; i++)
                {
                    var localNext = lstFrom[i];
                    var objTO = new DTOOPSDITO();
                    objTO.SortOrder = sort;
                    objTO.LocationFromID = localFrom;
                    objTO.LocationToID = localNext;
                    objTO.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                    objTO.IsOPS = true;
                    objTO.KM = 0;
                    objTO.ETD = etd;
                    foreach (var groupid in lstRoute.Where(c => c.LocationFromID == localFrom).Select(c => c.ID).Distinct())
                    {
                        if (!lstDITOGroup.Contains(groupid))
                            lstDITOGroup.Add(groupid);
                    }
                    objTO.ListOrderGroupProductID = lstDITOGroup.Select(c => c).ToList();
                    lstDITO.Add(objTO);
                    //objTO.RoutingID = OPS_CreateRoute(model, localFrom, localNext);

                    localFrom = localNext;
                    sort++;
                }
            }
            bool isFirst = true;
            foreach (var localNext in lstTo)
            {
                var objTO = new DTOOPSDITO();
                objTO.SortOrder = sort;
                objTO.LocationFromID = localFrom;
                objTO.LocationToID = localNext;
                if (isFirst)
                {
                    isFirst = false;
                    foreach (var groupid in lstRoute.Where(c => c.LocationFromID == localFrom).Select(c => c.ID).Distinct())
                    {
                        if (!lstDITOGroup.Contains(groupid))
                            lstDITOGroup.Add(groupid);
                    }
                }
                else
                {
                    foreach (var groupid in lstRoute.Where(c => c.LocationToID == localFrom).Select(c => c.ID).Distinct())
                    {
                        if (lstDITOGroup.Contains(groupid))
                            lstDITOGroup.Remove(groupid);
                    }
                }
                objTO.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                objTO.IsOPS = true;
                objTO.KM = 0;
                objTO.ETA = eta;
                objTO.ListOrderGroupProductID = lstDITOGroup.Select(c => c).ToList();
                lstDITO.Add(objTO);
                //objTO.RoutingID = OPS_CreateRoute(model, localFrom, localNext);

                localFrom = localNext;
                sort++;
            }
            if (lstDITO.Count > 0)
            {
                var objTO = new DTOOPSDITO();
                objTO.SortOrder = 1;
                objTO.LocationFromID = LocationDefaultID;
                objTO.LocationToID = lstDITO[0].LocationFromID;
                objTO.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                objTO.IsOPS = false;
                objTO.KM = 0;
                objTO.ETA = etd;
                objTO.ListOrderGroupProductID = new List<int>();
                //objTO.RoutingID = OPS_CreateRoute(model, LocationDefaultID, lstDITO[0].LocationFromID);

                lstDITO.Insert(0, objTO);
            }

            foreach (var to in lstDITO)
            {
                var objTO = new OPS_DITO();
                objTO.CreatedBy = Account.UserName;
                objTO.CreatedDate = DateTime.Now;
                objTO.SortOrder = to.SortOrder;
                objTO.DITOMasterID = tomasterid;
                objTO.RoutingID = to.RoutingID;
                objTO.LocationFromID = to.LocationFromID;
                objTO.LocationToID = to.LocationToID;
                objTO.StatusOfDITOID = to.StatusOfDITOID;
                objTO.IsOPS = to.IsOPS;
                objTO.KM = to.KM;
                model.OPS_DITO.Add(objTO);
            }
            model.SaveChanges();
        }

        private void DIAppointment_Route_CreateDITOLocation(DataEntities model, int tomasterid)
        {
            foreach (var item in model.OPS_DITOLocation.Where(c => c.DITOMasterID == tomasterid))
                model.OPS_DITOLocation.Remove(item);

            var lstLocationFromID = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == tomasterid).Select(c => c.ORD_GroupProduct.CUS_Location.LocationID).Distinct().ToList();
            var lstLocationToID = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == tomasterid).Select(c => c.ORD_GroupProduct.CUS_Location1.LocationID).Distinct().ToList();

            var locationDefault = new OPS_DITOLocation();
            locationDefault.CreatedBy = Account.UserName;
            locationDefault.CreatedDate = DateTime.Now;
            locationDefault.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
            locationDefault.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
            locationDefault.DITOMasterID = tomasterid;
            locationDefault.LocationID = 1;
            locationDefault.SortOrder = 1;
            model.OPS_DITOLocation.Add(locationDefault);

            int sortOrder = 2;
            foreach (var from in lstLocationFromID)
            {
                var location = new OPS_DITOLocation();
                location.CreatedBy = Account.UserName;
                location.CreatedDate = DateTime.Now;
                location.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                location.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                location.DITOMasterID = tomasterid;
                location.SortOrder = sortOrder;
                location.LocationID = from;

                model.OPS_DITOLocation.Add(location);
                sortOrder++;
            }

            foreach (var from in lstLocationToID)
            {
                var location = new OPS_DITOLocation();
                location.CreatedBy = Account.UserName;
                location.CreatedDate = DateTime.Now;
                location.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                location.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                location.DITOMasterID = tomasterid;
                location.SortOrder = sortOrder;
                location.LocationID = from;
                model.OPS_DITOLocation.Add(location);
                sortOrder++;
            }
            model.SaveChanges();
        }

        public void DIAppointment_Route_WinVehicleSave(List<DTOFLMVehicle> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lst)
                    {
                        var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                        if (objVehicle != null)
                        {
                            objVehicle.MaxWeight = objVehicle.MaxWeightCal = item.MaxWeight;
                            objVehicle.MaxCapacity = item.MaxCapacity;
                            objVehicle.ModifiedBy = Account.UserName;
                            objVehicle.ModifiedDate = DateTime.Now;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentPOD> DIAppointment_Route_PODList(DateTime fDate, DateTime tDate)
        {
            try
            {
                var result = new List<DTODIAppointmentPOD>();
                using (var model = new DataEntities())
                {
                    //var count = model.POD_DIGroupProduct.Where(c => c.POD_DIMaster.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode != null).Count();
                    fDate = fDate.Date;
                    tDate = tDate.Date.AddDays(1);
                    result = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID.HasValue && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOMaster.ETD >= fDate && c.OPS_DITOMaster.ETD < tDate && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.SOCode != null && Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID))
                        .Select(c => new DTODIAppointmentPOD
                        {
                            ID = c.ID,
                            VehicleCode = c.OPS_DITOMaster.CAT_Vehicle.RegNo,
                            DateFrom = c.OPS_DITOMaster.ETD.Value,
                            DateTo = c.OPS_DITOMaster.ETA.Value,
                            GroupOfProductName = string.Empty,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            RouteCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            Ton = c.Ton * 1000,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            Description = c.ORD_GroupProduct.Description,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode != null ? c.ORD_GroupProduct.SOCode : string.Empty,

                            IsOrigin = c.IsOrigin,
                            TOMasterCode = c.OPS_DITOMaster.Code,
                            PartnerCode = c.ORD_GroupProduct.CUS_Partner.PartnerCode,
                            PartnerName = c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName,
                            Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                            DriverName = c.OPS_DITOMaster.DriverID1 > 0 ? c.OPS_DITOMaster.FLM_Driver.CAT_Driver.LastName + " " + c.OPS_DITOMaster.FLM_Driver.CAT_Driver.LastName : c.OPS_DITOMaster.DriverName1,
                            ETD = c.OPS_DITOMaster.ETD.Value,
                            ETARequest = c.ORD_GroupProduct.ETARequest
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_PODExcelSave(List<DTODIAppointmentPOD> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (lst.Count > 0)
                    {
                        foreach (var item in lst.Where(c => c.ExcelSuccess))
                        {
                            var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                            if (objGroup != null)
                            {
                                objGroup.IsOrigin = item.IsOrigin;
                                objGroup.DNCode = item.DNCode;
                                objGroup.Note1 = item.Note1;
                                objGroup.Note2 = item.Note2;
                                objGroup.ModifiedBy = Account.UserName;
                                objGroup.ModifiedDate = DateTime.Now;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_PODDiv(List<DTODIAppointmentPOD> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (lst.Count > 1)
                    {
                        int id = lst[0].ID;
                        var lstDITOID = model.OPS_DITODetail.Where(c => c.DITOGroupProductID == id).Select(c => c.DITOID).ToList();
                        var itemGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == id);
                        if (itemGroup != null)
                        {
                            for (int i = 1; i < lst.Count; i++)
                            {
                                var item = lst[i];

                                var objGroup = new OPS_DITOGroupProduct();
                                objGroup.CreatedBy = Account.UserName;
                                objGroup.CreatedDate = DateTime.Now;

                                objGroup.DITOMasterID = itemGroup.DITOMasterID;
                                objGroup.DITOGroupProductStatusID = itemGroup.DITOGroupProductStatusID;
                                objGroup.OrderGroupProductID = itemGroup.OrderGroupProductID;
                                objGroup.QuantityLoading = 0;
                                objGroup.IsInput = false;
                                objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = item.Ton;
                                objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = 0;
                                objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = 0;
                                objGroup.GroupSort = itemGroup.GroupSort;
                                objGroup.DNCode = item.DNCode;

                                objGroup.DateDN = itemGroup.DateDN;
                                model.OPS_DITOGroupProduct.Add(objGroup);
                            }

                            itemGroup.Ton = lst[0].Ton;
                            itemGroup.DNCode = lst[0].DNCode;
                            itemGroup.ModifiedBy = Account.UserName;
                            itemGroup.ModifiedDate = DateTime.Now;
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentPOD> DIAppointment_Route_QuickSearch(DateTime fDate, DateTime tDate)
        {
            try
            {
                var result = new List<DTODIAppointmentPOD>();
                using (var model = new DataEntities())
                {
                    //var count = model.POD_DIGroupProduct.Where(c => c.POD_DIMaster.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode != null).Count();
                    fDate = fDate.Date;
                    tDate = tDate.Date.AddDays(1);
                    result = model.OPS_DITOGroupProduct.Where(c => c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID > 0 && c.OPS_DITOMaster.ETD >= fDate && c.OPS_DITOMaster.ETD < tDate && c.OrderGroupProductID > 0)
                        .Select(c => new DTODIAppointmentPOD
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID.Value,
                            TypeID = c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived ? 3 :
                                    c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered ? 2 : 1,
                            VehicleCode = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                            DateFrom = c.OPS_DITOMaster.ETD.Value,
                            DateTo = c.OPS_DITOMaster.ETA.Value,
                            GroupOfProductName = string.Empty,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            RouteCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            Ton = c.Ton * 1000,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            Description = c.ORD_GroupProduct.Description,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode != null ? c.ORD_GroupProduct.SOCode : string.Empty,

                            TOMasterCode = c.OPS_DITOMaster.Code,
                            PartnerCode = c.ORD_GroupProduct.CUS_Partner.PartnerCode,
                            PartnerName = c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName,
                            Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                            DriverName = c.OPS_DITOMaster.DriverID1 > 0 ? c.OPS_DITOMaster.FLM_Driver.CAT_Driver.LastName + " " + c.OPS_DITOMaster.FLM_Driver.CAT_Driver.FirstName : c.OPS_DITOMaster.DriverName1,
                            ETD = c.OPS_DITOMaster.ETD.Value,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            IsChoose = false
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTODIAppointmentOrder DIAppointment_Route_QuickSearchGet(int id)
        {
            try
            {
                var result = default(DTODIAppointmentOrder);
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOGroupProduct.Where(c => c.ID == id && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                    {
                        TOMasterID = c.DITOMasterID.Value,
                        VehicleID = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID.Value : -1,
                        TypeID = c.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID || (c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterApproved && c.OPS_DITOMaster.VendorOfVehicleID == null) ? 1 : -1,
                        TransportModeID = c.OPS_DITOMaster.StatusOfDITOMasterID,
                        RegNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                        MaxCapacity = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxCapacity : null,
                        MaxWeightCal = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeightCal : null
                    }).FirstOrDefault();
                    if (result != null)
                    {
                        if (result.TypeID > 0)
                        {
                            if (result.TransportModeID == -(int)SYSVarType.StatusOfDITOMasterApproved)
                                result.TypeID = 2;
                            else if (result.TransportModeID > -(int)SYSVarType.StatusOfDITOMasterApproved)
                                result.TypeID = 3;
                            var objTimeSheet = model.FLM_AssetTimeSheet.Where(c => c.ReferID == result.TOMasterID && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster).Select(c => new { c.ID }).FirstOrDefault();
                            if (objTimeSheet != null)
                                result.TOMasterID = objTimeSheet.ID;
                        }
                        else
                        {
                            if (result.TransportModeID == -(int)SYSVarType.StatusOfDITOMasterApproved)
                                result.TypeID = -2;
                            else if (result.TransportModeID > -(int)SYSVarType.StatusOfDITOMasterApproved)
                                result.TypeID = -3;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_QuickSearchApproved(List<int> lstID)
        {
            try
            {
                if (lstID.Count > 0)
                {
                    try
                    {
                        foreach (var id in lstID)
                        {
                            DIAppointment_Route_VehicleMonitor(id);
                        }
                    }
                    catch { }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_QuickSearchUnApproved(List<int> lstid)
        {
            try
            {
                if (lstid.Count > 0)
                {
                    try
                    {
                        foreach (var id in lstid)
                        {
                            DIAppointment_Route_VehicleRemoveMonitor(id);
                        }
                    }
                    catch { }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentRate> DIAppointment_Route_HasDNList(string request)
        {
            try
            {
                var result = new List<DTODIAppointmentRate>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        lstid.Add(Account.SYSCustomerID);

                        result = model.OPS_DITOMaster.Where(c => c.VehicleID > 0 && c.ETD != null && ((c.VendorOfVehicleID > 0 && lstid.Contains(c.VendorOfVehicleID.Value)) || c.VendorOfVehicleID == null) && (c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved || c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered) && c.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.Count > 0 && c.TransportModeID == -(int)SYSVarType.TransportModeLTL).OrderBy(c => c.CreatedDate).Select(c => new DTODIAppointmentRate
                        {
                            TOMasterID = c.ID,
                            CreateVendorID = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.VendorOfVehicleID.Value : -1,
                            CreateVendorName = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.CUS_Customer.CustomerName : "Xe nhà",
                            CreateVehicleCode = c.CAT_Vehicle.RegNo,
                            CreateDateTime = c.ETD.Value,
                            CreateDriverName = c.DriverName1,
                            CreateTelephone = c.DriverTel1,
                            CreateSortOrder = c.ID,
                            TypeID = c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : 2,
                            VendorID = null,
                            SortOrder = 0,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                        }).ToDataSourceResult(CreateRequest(request)).Data.Cast<DTODIAppointmentRate>().ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentOrder> DIAppointment_Route_HasDNOrderList(string request)
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        lstid.Add(Account.SYSCustomerID);

                        var queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.DNCode != null && c.DNCode != "" && lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL &&
                            c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                            {
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = -1,
                                TOMasterCode = "",
                                ID = c.ID,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                IsOrigin = c.IsOrigin,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,

                                TypeID = 1,
                                CreateSortOrder = 0,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                MaxWeightCal = 0,
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                        var lstLTL = queryLTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        result.AddRange(lstLTL);

                        queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && ((c.OPS_DITOMaster.VendorOfVehicleID > 0 && lstid.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value)) || c.OPS_DITOMaster.VendorOfVehicleID == null) && (c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved || c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered) &&
                            c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL).Select(c => new DTODIAppointmentOrder
                            {
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                DriverName = c.OPS_DITOMaster.DriverName1,
                                DriverTelNo = c.OPS_DITOMaster.DriverTel1,
                                VehicleCode = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                                VehicleID = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.VehicleID.Value : 0,
                                VendorOfVehicleID = c.OPS_DITOMaster.VendorOfVehicleID,
                                VendorOfVehicleName = c.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID || c.OPS_DITOMaster.VendorOfVehicleID == null ? "Xe nhà" : c.OPS_DITOMaster.CUS_Customer.CustomerName,
                                TOMasterID = c.DITOMasterID.Value,
                                TOMasterCode = c.OPS_DITOMaster.Code,
                                CreateDateTime = c.OPS_DITOMaster.ETD.Value,

                                ID = c.ID,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                IsOrigin = c.IsOrigin,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,

                                TypeID = c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : 2,
                                CreateSortOrder = c.DITOMasterID.Value,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                MaxWeightCal = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeight : null,
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                        lstLTL = queryLTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        result.AddRange(lstLTL);
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentOrder> DIAppointment_Route_HasDNOrderListDN()
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        lstid.Add(Account.SYSCustomerID);

                        result = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.DNCode != null && c.DNCode != "" && lstid.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 &&
                            c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                            {
                                TOMasterID = c.OrderGroupProductID.Value,
                                DNCode = c.DNCode
                            }).ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentRate> DIAppointment_Route_HasDNListGroupID(List<int> lstid)
        {
            try
            {
                var result = new List<DTODIAppointmentRate>();

                if (lstid != null && lstid.Count > 0)
                {
                    using (var model = new DataEntities())
                    {
                        var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                        if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                        {
                            var dataCusID = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                            dataCusID.Add(Account.SYSCustomerID);

                            result = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.OPS_DITOMaster.VehicleID > 0 && c.OPS_DITOMaster.ETD != null && ((c.OPS_DITOMaster.VendorOfVehicleID > 0 && dataCusID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value)) || c.OPS_DITOMaster.VendorOfVehicleID == null) && c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved &&
                                c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && lstid.Contains(c.OrderGroupProductID.Value) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL).OrderBy(c => c.OPS_DITOMaster.CreatedDate).Select(c => new DTODIAppointmentRate
                            {
                                TOMasterID = c.OPS_DITOMaster.ID,
                                CreateVendorID = c.OPS_DITOMaster.VendorOfVehicleID > 0 && c.OPS_DITOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_DITOMaster.VendorOfVehicleID.Value : -1,
                                CreateVendorName = c.OPS_DITOMaster.VendorOfVehicleID > 0 && c.OPS_DITOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_DITOMaster.CUS_Customer.CustomerName : "Xe nhà",
                                CreateVehicleCode = c.OPS_DITOMaster.CAT_Vehicle.RegNo,
                                CreateDateTime = c.OPS_DITOMaster.ETD.Value,
                                CreateDriverName = c.OPS_DITOMaster.DriverName1,
                                CreateTelephone = c.OPS_DITOMaster.DriverTel1,
                                CreateSortOrder = c.OPS_DITOMaster.ID,
                                TypeID = 1,
                                VendorID = null,
                                SortOrder = 0,
                                MaxWeight = c.OPS_DITOMaster.CAT_Vehicle.MaxWeight,
                            }).Distinct().ToList();
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentOrder> DIAppointment_Route_HasDNOrderListByGroupID(List<int> lstid)
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();

                if (lstid != null && lstid.Count > 0)
                {
                    using (var model = new DataEntities())
                    {
                        var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                        if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                        {
                            var dataCusID = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                            dataCusID.Add(Account.SYSCustomerID);

                            var queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.DNCode != null && c.DNCode != "" && dataCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 &&
                                c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && lstid.Contains(c.OrderGroupProductID.Value) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL).Select(c => new DTODIAppointmentOrder
                                {
                                    GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                    TOMasterID = -1,
                                    TOMasterCode = "",
                                    ID = c.ID,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    ETA = c.ORD_GroupProduct.ETA,
                                    RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                    KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                    OrderID = c.ORD_GroupProduct.OrderID,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                    OrderGroupProductID = c.OrderGroupProductID,
                                    CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                    CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                    CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                    CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                    CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                    CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                    GroupSort = c.GroupSort,

                                    TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                    DNCode = c.DNCode,
                                    IsOrigin = c.IsOrigin,
                                    SOCode = c.ORD_GroupProduct.SOCode,
                                    Description = c.ORD_GroupProduct.Description,
                                    PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                    PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                    Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                    ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                    DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                    RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                    FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                    FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                    FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                    FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                    LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                    LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                    Ton = c.Ton,
                                    CBM = c.CBM,
                                    Quantity = c.Quantity,

                                    TypeID = 1,
                                    CreateSortOrder = 0,
                                    MaxWeightCal = null,
                                }).Distinct();
                            var lstLTL = queryLTL.ToList();
                            result.AddRange(lstLTL);

                            queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && ((c.OPS_DITOMaster.VendorOfVehicleID > 0 && dataCusID.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value)) || c.OPS_DITOMaster.VendorOfVehicleID == null) && c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved &&
                                c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && lstid.Contains(c.OrderGroupProductID.Value) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL).Select(c => new DTODIAppointmentOrder
                                {
                                    GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                    DriverName = c.OPS_DITOMaster.DriverName1,
                                    DriverTelNo = c.OPS_DITOMaster.DriverTel1,
                                    VehicleCode = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                                    VehicleID = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.VehicleID.Value : 0,
                                    VendorOfVehicleID = c.OPS_DITOMaster.VendorOfVehicleID,
                                    VendorOfVehicleName = c.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID || c.OPS_DITOMaster.VendorOfVehicleID == null ? "Xe nhà" : c.OPS_DITOMaster.CUS_Customer.CustomerName,
                                    TOMasterID = c.DITOMasterID.Value,
                                    TOMasterCode = c.OPS_DITOMaster.Code,
                                    CreateDateTime = c.OPS_DITOMaster.ETD.Value,

                                    ID = c.ID,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    ETA = c.ORD_GroupProduct.ETA,
                                    RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                    KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                    OrderID = c.ORD_GroupProduct.OrderID,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                    OrderGroupProductID = c.OrderGroupProductID,
                                    CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                    CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                    CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                    CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                    CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                    CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                    GroupSort = c.GroupSort,

                                    TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                    DNCode = c.DNCode,
                                    IsOrigin = c.IsOrigin,
                                    SOCode = c.ORD_GroupProduct.SOCode,
                                    Description = c.ORD_GroupProduct.Description,
                                    PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                    PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                    Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                    ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                    DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                    RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                    FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                    FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                    FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                    FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                    LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                    LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                    Ton = c.Ton,
                                    CBM = c.CBM,
                                    Quantity = c.Quantity,

                                    TypeID = c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : 2,
                                    CreateSortOrder = c.DITOMasterID.Value,
                                    MaxWeightCal = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeight : null,
                                }).Distinct();
                            lstLTL = queryLTL.ToList();
                            result.AddRange(lstLTL);
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_HasDNSave(List<DTODIAppointmentOrder> lstOrder, List<DTODIAppointmentRate> lstVehicle)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    DI_TOMasterMinCreate(model, lstOrder, lstVehicle);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_HasDNDelete(List<int> lst)
        {
            try
            {
                if (lst != null && lst.Count > 0)
                {
                    foreach (var id in lst)
                    {
                        DIAppointment_Route_VehicleRemove(id);
                    }
                    using (var model = new DataEntities())
                    {
                        try
                        {
                            OPS_DITOGroupProduct_Reset(model);
                        }
                        catch (Exception) { }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_HasDNApproved(List<int> lst)
        {
            try
            {
                if (lst != null && lst.Count > 0)
                {
                    try
                    {
                        foreach (var id in lst)
                        {
                            DIAppointment_Route_VehicleMonitor(id);
                        }
                    }
                    catch (FaultException<DTOError> ex)
                    {
                        throw ex;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_HasDNUnApproved(List<int> lst)
        {
            try
            {
                if (lst != null && lst.Count > 0)
                {
                    try
                    {
                        foreach (var id in lst)
                        {
                            DIAppointment_Route_VehicleRemoveMonitor(id);
                        }
                    }
                    catch { }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentRate> DIAppointment_Route_NoDNList(string request, List<int> dataCusID, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentRate>();

                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = true;

                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null)// && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        //var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        //lstid.Add(Account.SYSCustomerID);
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.AddDays(1).Date;
                        result = model.OPS_DITOMaster.Where(c => c.VehicleID > 0 && c.ETD != null && c.ETD >= DateFrom && c.ETD < DateTo &&
                            ((c.VendorOfVehicleID > 0 && ((isCustomer && !isAdmin) ? Account.ListCustomerID.ToList().Contains(c.VendorOfVehicleID.Value) : true)) || c.VendorOfVehicleID == null) && (c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved || c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered) && c.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.Count > 0 && c.TransportModeID == -(int)SYSVarType.TransportModeLTL && dataCusID.Contains(c.OPS_DITOGroupProduct.FirstOrDefault().ORD_GroupProduct.ORD_Order.CustomerID)).OrderBy(c => c.CreatedDate).Select(c => new DTODIAppointmentRate
                        {
                            TOMasterID = c.ID,
                            CreateVendorID = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.VendorOfVehicleID.Value : -1,
                            CreateVendorName = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.CUS_Customer.CustomerName : "Xe nhà",
                            CreateVehicleCode = c.CAT_Vehicle.RegNo,
                            CreateDateTime = c.ETD.Value,
                            CreateDriverName = c.DriverName1,
                            CreateTelephone = c.DriverTel1,
                            CreateSortOrder = c.ID,
                            TypeID = c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered ? 2 : 3,
                            VendorID = null,
                            SortOrder = 0,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                        }).ToDataSourceResult(CreateRequest(request)).Data.Cast<DTODIAppointmentRate>().ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentOrder> DIAppointment_Route_NoDNOrderList(string request, List<int> dataCusID, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();

                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = true;

                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null)// && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.AddDays(1).Date;
                        //var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        //lstid.Add(Account.SYSCustomerID);

                        var queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && dataCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL &&
                            c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.ORD_GroupProduct.ORD_Order.RequestDate >= DateFrom && c.ORD_GroupProduct.ORD_Order.RequestDate < DateTo && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                            {
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = -1,
                                TOMasterCode = "",
                                ID = c.ID,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                IsOrigin = c.IsOrigin,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,
                                TypeEditID = 3,
                                ProductCode = "",
                                IsSplit = c.IsSplit,

                                TypeID = 1,
                                CreateSortOrder = 0,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                MaxWeightCal = 0,

                                TempMax = c.ORD_GroupProduct.TempMax,
                                TempMin = c.ORD_GroupProduct.TempMin
                            }).Distinct().OrderBy(c => c.OrderGroupProductID).ToDataSourceResult(CreateRequest(request));
                        var lstLTL = queryLTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        result.AddRange(lstLTL);

                        queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0
                            && ((c.OPS_DITOMaster.VendorOfVehicleID > 0 && ((isCustomer && !isAdmin) ? Account.ListCustomerID.ToList().Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value) : true)) || c.OPS_DITOMaster.VendorOfVehicleID == null)
                            && (c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved || c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered || c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterSendTender)
                            && c.OPS_DITOMaster.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL
                            && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && dataCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.OPS_DITOMaster.ETD >= DateFrom && c.OPS_DITOMaster.ETD < DateTo
                            && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                            {
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = -1,
                                TOMasterCode = "",
                                ID = c.ID,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                IsOrigin = c.IsOrigin,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,
                                TypeEditID = 3,
                                ProductCode = "",
                                IsSplit = c.IsSplit,

                                TypeID = c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered ? 2 : 3,
                                CreateSortOrder = c.DITOMasterID.Value,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                MaxWeightCal = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeight : null,

                                TempMax = c.ORD_GroupProduct.TempMax,
                                TempMin = c.ORD_GroupProduct.TempMin
                            }).Distinct().OrderBy(c => c.OrderGroupProductID).ToDataSourceResult(CreateRequest(request));
                        lstLTL = queryLTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        result.AddRange(lstLTL);

                        result = result.OrderBy(c => c.OrderGroupProductID).ToList();
                        var ORDProducts = model.ORD_Product.OrderBy(c => c.GroupProductID);
                        var idx = 0;
                        var resultCount = result.Count;
                        if (resultCount > 0)
                        {
                            foreach (var product in ORDProducts)
                            {
                                if (product.GroupProductID == result[idx].OrderGroupProductID)
                                {
                                    do
                                    {
                                        var item = result[idx];
                                        var dataProduct = model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == item.ID).Select(c => new
                                        {
                                            c.ORD_Product.CUS_Product.Code,
                                            c.ORD_Product.CUS_Product.ProductName
                                        }).ToList();
                                        item.ProductCodeList = dataProduct.Count > 0 ? string.Join(", ", dataProduct.Select(c => c.Code).Distinct().ToList()) : string.Empty;
                                        item.ProductNameList = dataProduct.Count > 0 ? string.Join(", ", dataProduct.Select(c => c.ProductName).Distinct().ToList()) : string.Empty;

                                        if (product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                            item.TypeEditID = 1;
                                        if (product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                            item.TypeEditID = 2;
                                        item.ExchangeTon = (product.ExchangeTon > 0) ? product.ExchangeTon.Value : 0;
                                        item.ExchangeCBM = (product.ExchangeCBM > 0) ? product.ExchangeCBM.Value : 0;
                                        if (item.TypeEditID == 3)
                                            item.ExchangeQuantity = 1;
                                        item.ProductCode = product.CUS_Product.Code;
                                        idx++;

                                    } while (idx < resultCount && product.GroupProductID == result[idx].OrderGroupProductID);

                                    if (idx == resultCount)
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_NoDNSave(List<DTODIAppointmentOrder> lstOrder, List<DTODIAppointmentRate> lstVehicle)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    DI_TOMasterMinCreateNoDN(model, lstOrder, lstVehicle);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void OPS_DITOGroupProduct_Reset(DataEntities model)
        {
            var data = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null).GroupBy(c => c.OrderGroupProductID).ToList();
            foreach (var group in data)
            {
                if (group.ToList().Count > 1)
                {
                    var first = group.Where(c => c.OPS_DITOProduct.Count > 0).FirstOrDefault();
                    if (first == null)
                        first = group.FirstOrDefault();
                    first.ModifiedBy = Account.UserName;
                    first.ModifiedDate = DateTime.Now;
                    foreach (var item in group.Where(c => c.ID != first.ID).ToList())
                    {
                        if (item.OPS_DIPacketGroupProduct.Count == 0 && item.OPS_OPTOPSGroupProduct.Count == 0)
                        {
                            first.Ton += item.Ton;
                            first.CBM += item.CBM;
                            first.Quantity += item.Quantity;
                            model.OPS_DITOGroupProduct.Remove(item);
                        }
                    }
                    first.TonBBGN = first.TonTranfer = first.Ton = Math.Round(first.Ton, NoDigit, MidpointRounding.AwayFromZero);
                    first.CBMBBGN = first.CBMTranfer = first.CBM = Math.Round(first.CBM, NoDigit, MidpointRounding.AwayFromZero);
                    first.QuantityBBGN = first.QuantityTranfer = first.QuantityLoading = first.Quantity = Math.Round(first.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                }
            }
            model.SaveChanges();
        }

        #endregion

        #region FTL

        public List<DTODIAppointmentRate> DIAppointment_Route_FTL_NoDNList(string request, List<int> dataCusID, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentRate>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        lstid.Add(Account.SYSCustomerID);
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.Date;
                        result = model.OPS_DITOMaster.Where(c => c.ETD != null && ((c.VendorOfVehicleID > 0 && lstid.Contains(c.VendorOfVehicleID.Value)) || c.VendorOfVehicleID == null)
                            && c.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterTendered && c.SYSCustomerID == Account.SYSCustomerID
                            && c.OPS_DITOGroupProduct.Count > 0 && c.TransportModeID == -(int)SYSVarType.TransportModeFTL
                            && DbFunctions.TruncateTime(c.ETD) >= DateFrom && DbFunctions.TruncateTime(c.ETD) <= DateTo
                            && dataCusID.Contains(c.OPS_DITOGroupProduct.FirstOrDefault().ORD_GroupProduct.ORD_Order.CustomerID))
                        .OrderBy(c => c.CreatedDate).Select(c => new DTODIAppointmentRate
                        {
                            TOMasterID = c.ID,
                            CreateVendorID = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.VendorOfVehicleID.Value : -1,
                            CreateVendorName = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.CUS_Customer.CustomerName : "Xe nhà",
                            CreateVehicleCode = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : string.Empty,
                            CreateDateTime = c.ETD.Value,
                            CreateDriverName = c.DriverName1,
                            CreateTelephone = c.DriverTel1,
                            CreateSortOrder = c.ID,
                            TypeID = c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered ? 2 : 1,
                            VendorID = null,
                            SortOrder = 0,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                        }).ToDataSourceResult(CreateRequest(request)).Data.Cast<DTODIAppointmentRate>().ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentOrder> DIAppointment_Route_FTL_NoDNOrderList(string request, List<int> dataCusID, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.Date;
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        lstid.Add(Account.SYSCustomerID);

                        var queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && ((c.OPS_DITOMaster.VendorOfVehicleID > 0 && lstid.Contains(c.OPS_DITOMaster.VendorOfVehicleID.Value)) || c.OPS_DITOMaster.VendorOfVehicleID == null) && c.OPS_DITOMaster.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterTendered && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL &&
                            c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && dataCusID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) >= DateFrom && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= DateTo && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                            {
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = -1,
                                TOMasterCode = "",
                                ID = c.ID,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                IsOrigin = c.IsOrigin,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,
                                TypeEditID = 3,
                                ProductCode = "",

                                TypeID = c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered ? 2 : 1,
                                CreateSortOrder = c.DITOMasterID.Value,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                MaxWeightCal = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeight : null,

                                TempMax = c.ORD_GroupProduct.TempMax,
                                TempMin = c.ORD_GroupProduct.TempMin
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                        var lstLTL = queryLTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        result.AddRange(lstLTL);

                        foreach (var group in result)
                        {
                            var product = model.ORD_Product.Where(c => c.GroupProductID == group.OrderGroupProductID)
                                .Select(c => new { c.CUS_Product.Code, c.CAT_Packing.TypeOfPackageID, c.ExchangeTon, c.ExchangeCBM, c.ExchangeQuantity }).FirstOrDefault();
                            if (product != null)
                            {
                                if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                    group.TypeEditID = 1;
                                if (product.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                    group.TypeEditID = 2;

                                group.ExchangeTon = (product.ExchangeTon > 0) ? product.ExchangeTon.Value : 0;
                                group.ExchangeCBM = (product.ExchangeCBM > 0) ? product.ExchangeCBM.Value : 0;
                                group.ExchangeQuantity = (product.ExchangeQuantity > 0) ? product.ExchangeQuantity.Value : 0;

                                if (group.TypeEditID == 3)
                                    group.ExchangeQuantity = 1;
                                group.ProductCode = product.Code;
                            }
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_FTL_NoDNSave(List<DTODIAppointmentRate> lstVehicle)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    DI_TOMasterFTLCreate(model, lstVehicle);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_FTL_NoDNCancel(List<DTODIAppointmentRate> lstVehicle)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var lstOrderID = new List<int>();
                    foreach (var obj in lstVehicle)
                    {
                        var master = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == obj.TOMasterID);
                        if (master != null)
                        {
                            if (master.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered)
                                throw FaultHelper.BusinessFault(null, null, "Chỉ được trả về lệnh chưa duyệt!");
                            foreach (var detail in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.TOMasterID))
                            {
                                lstOrderID.Add(detail.ORD_GroupProduct.OrderID);
                                foreach (var detail2 in model.OPS_DITODetail.Where(c => c.DITOGroupProductID == detail.ID))
                                    model.OPS_DITODetail.Remove(detail2);

                                foreach (var detail2 in model.KPI_KPITime.Where(c => c.DITOGroupProductID == detail.ID))
                                    model.KPI_KPITime.Remove(detail2);

                                foreach (var detail2 in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == detail.ID))
                                    model.OPS_DITOProduct.Remove(detail2);

                                foreach (var detail2 in model.FIN_Temp.Where(c => c.DITOGroupProductID == detail.ID))
                                    model.FIN_Temp.Remove(detail2);

                                if (model.OPS_DIImportGroupProduct.Count(c => c.DITOGroupProductID == detail.ID) > 0)
                                    throw FaultHelper.BusinessFault(null, null, "Có dữ liệu import điều phối. Nhóm [" + detail.ORD_GroupProduct.CUS_GroupOfProduct.Code + "].");

                                if (model.OPS_OPTOPSGroupProduct.Count(c => c.DITOGroupProductID == detail.ID) > 0)
                                    throw FaultHelper.BusinessFault(null, null, "Có dữ liệu tối ưu xe tải. Nhóm [" + detail.ORD_GroupProduct.CUS_GroupOfProduct.Code + "].");

                                if (model.OPS_DIPacketGroupProduct.Count(c => c.DITOGroupProductID == detail.ID) > 0)
                                    throw FaultHelper.BusinessFault(null, null, "Có dữ liệu đơn hàng gửi đối tác. Nhóm [" + detail.ORD_GroupProduct.CUS_GroupOfProduct.Code + "].");

                                model.OPS_DITOGroupProduct.Remove(detail);
                            }

                            foreach (var detail in model.OPS_DITORate.Where(c => c.DITOMasterID == obj.TOMasterID))
                                model.OPS_DITORate.Remove(detail);
                            foreach (var detail in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.TOMasterID))
                                model.OPS_DITOLocation.Remove(detail);
                            foreach (var detail in model.OPS_DITO.Where(c => c.DITOMasterID == obj.TOMasterID))
                                model.OPS_DITO.Remove(detail);

                            foreach (var fin in model.FIN_PL.Where(c => c.DITOMasterID == obj.TOMasterID))
                            {
                                foreach (var detail in model.FIN_PLDetails.Where(c => c.PLID == fin.ID))
                                {
                                    foreach (var detail2 in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == detail.ID))
                                    {
                                        model.FIN_PLGroupOfProduct.Remove(detail2);
                                    }
                                    model.FIN_PLDetails.Remove(detail);
                                }
                            }

                            foreach (var detail in model.FLM_TOMasterCost.Where(c => c.DITOMasterID == obj.TOMasterID))
                            {
                                foreach (var detail2 in model.FLM_TOMasterCostDetail.Where(c => c.TOMasterCostID == detail.ID))
                                    model.FLM_TOMasterCostDetail.Remove(detail2);
                                model.FLM_TOMasterCost.Remove(detail);
                            }

                            model.OPS_DITOMaster.Remove(master);
                        }
                    }
                    model.SaveChanges();
                    foreach (var obj in lstVehicle)
                        HelperTimeSheet.Remove(model, Account, obj.TOMasterID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                    lstOrderID = lstOrderID.Distinct().ToList();
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID));
                    foreach (var order in lstOrder)
                    {
                        order.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                        order.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;

                        foreach (var fin in model.FIN_PLCosting.Where(c => c.OrderID == order.ID))
                        {
                            model.FIN_PLCosting.Remove(fin);
                        }

                        foreach (var fin in model.FIN_PL.Where(c => c.OrderID == order.ID))
                        {
                            foreach (var detail in model.FIN_PLDetails.Where(c => c.PLID == fin.ID))
                            {
                                foreach (var product in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == detail.ID))
                                {
                                    model.FIN_PLGroupOfProduct.Remove(product);
                                }
                                model.FIN_PLDetails.Remove(detail);
                            }
                            model.FIN_PL.Remove(fin);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_FTL_NoDNSplit(int toMasterID, List<DTODIAppointmentOrder> dataGop, List<DTODIAppointmentRate> dataVehicle)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == toMasterID);
                    if (obj != null)
                    {
                        if (obj.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterApproved)
                            throw FaultHelper.BusinessFault(null, null, "Không thể tách các chuyến đã duyệt.");

                        foreach (var item in dataVehicle)
                        {
                            if (dataGop.Count(c => c.CreateSortOrder == item.CreateSortOrder) == 0)
                            {
                                throw FaultHelper.BusinessFault(null, null, "Không có thông tin sản phẩm. Chuyến " + item.CreateSortOrder.ToString());
                            }
                            var objCheck = dataVehicle.FirstOrDefault(c => c.CreateVehicleCode == item.CreateVehicleCode && c.CreateSortOrder != item.CreateSortOrder && c.CreateDateTime == item.CreateDateTime);
                            if (objCheck != null)
                            {
                                throw FaultHelper.BusinessFault(null, null, "Chuyến trùng nhau. Chuyến " + item.CreateSortOrder.ToString() + " - " + objCheck.CreateSortOrder);
                            }

                            var objV = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo == item.CreateVehicleCode.Trim());
                            if (objV != null)
                            {
                                OPS_CheckingTime(model, OPS_SystemSetting_Get(model), toMasterID, objV.ID, null, item.CreateDateTime, item.CreateDateTime.AddHours(2), false);
                            }
                        }

                        var sData = new List<int>();
                        //Xóa chuyến hiện tại
                        foreach (var item in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID).ToList())
                        {
                            model.OPS_DITOLocation.Remove(item);
                        }
                        foreach (var item in model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID).ToList())
                        {
                            model.OPS_DITORate.Remove(item);
                        }
                        foreach (var item in model.OPS_DITO.Where(c => c.DITOMasterID == obj.ID).ToList())
                        {
                            foreach (var o in model.OPS_DITODetail.Where(c => c.DITOID == item.ID).ToList())
                            {
                                model.OPS_DITODetail.Remove(o);
                            }
                            model.OPS_DITO.Remove(item);
                        }
                        foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).ToList())
                        {
                            item.DITOMasterID = null;
                            sData.Add(item.ID);
                        }
                        OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                        model.OPS_DITOMaster.Remove(obj);

                        var dataOPS = model.OPS_DITOGroupProduct.Where(c => sData.Contains(c.ID)).ToList();
                        //Lưu chuyến mới
                        foreach (var item in dataVehicle)
                        {
                            double? maxCBM = null;
                            double? maxWeight = null;

                            string txtTel = string.Empty;
                            string txtName = string.Empty;
                            string txtRegNo = item.CreateVehicleCode.Trim();

                            var cVehicle = dataVehicle.FirstOrDefault(c => c.CreateVehicleCode == item.CreateVehicleCode);
                            if (cVehicle != null)
                            {
                                maxCBM = cVehicle.MaxCBM;
                                maxWeight = cVehicle.MaxWeight;

                                txtTel = cVehicle.CreateTelephone;
                                txtName = !string.IsNullOrEmpty(cVehicle.CreateDriverName) ? cVehicle.CreateDriverName : "";
                            }

                            var objV = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo == txtRegNo);
                            if (objV == null)
                            {
                                objV = new CAT_Vehicle();
                                objV.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTruck;
                                objV.CreatedBy = Account.UserName;
                                objV.CreatedDate = DateTime.Now;
                                objV.MaxWeight = maxWeight;
                                objV.MaxCapacity = maxCBM;
                                objV.RegNo = txtRegNo;
                                objV.IsOwn = false;
                            }
                            else
                            {
                                objV.ModifiedBy = Account.UserName;
                                objV.ModifiedDate = DateTime.Now;
                            }
                            if (!string.IsNullOrEmpty(txtTel))
                                objV.Cellphone = txtTel;
                            if (!string.IsNullOrEmpty(txtName))
                                objV.DriverName = txtName;

                            if (obj.ID < 1)
                                model.CAT_Vehicle.Add(objV);

                            foreach (var objVen in dataVehicle.Where(c => c.CreateVehicleCode == item.CreateVehicleCode).Select(c => new { c.CreateVendorID }).Distinct())
                            {
                                if (objVen.CreateVendorID > 0)
                                {
                                    var objCUS = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == objVen.CreateVendorID && c.VehicleID == objV.ID);
                                    if (objCUS == null)
                                    {
                                        objCUS = new CUS_Vehicle();
                                        objCUS.VehicleID = objV.ID;
                                        objCUS.CustomerID = objVen.CreateVendorID;
                                        objCUS.CreatedBy = Account.UserName;
                                        objCUS.CreatedDate = DateTime.Now;

                                        model.CUS_Vehicle.Add(objCUS);
                                    }
                                }
                            }

                            model.SaveChanges();

                            OPS_DITOMaster objM = new OPS_DITOMaster();
                            objM.Code = DI_GetLastCode(model);
                            objM.CreatedBy = Account.UserName;
                            objM.CreatedDate = DateTime.Now;
                            objM.SYSCustomerID = Account.SYSCustomerID;
                            objM.ETD = item.CreateDateTime;
                            objM.ETA = item.CreateDateTime.AddHours(2);
                            objM.VendorOfVehicleID = item.VendorID;
                            objM.VehicleID = objV.ID;
                            if (item.CreateVendorID > 0)
                                objM.VendorOfVehicleID = item.CreateVendorID;
                            objM.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                            objM.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                            objM.SortOrder = item.SortOrder;
                            objM.TransportModeID = -(int)SYSVarType.TransportModeFTL;
                            objM.DriverName1 = txtName;
                            objM.DriverTel1 = txtTel;
                            objM.DriverID1 = OPS_FindFLMDriver(model, objM.DriverName1);


                            model.OPS_DITOMaster.Add(objM);
                            model.SaveChanges();
                            objM.Code = DICodePrefix + objM.ID.ToString(DICodeNum);
                            model.SaveChanges();

                            //Create Rate
                            OPS_DITORate objR = new OPS_DITORate();
                            objR.CreatedBy = Account.UserName;
                            objR.CreatedDate = DateTime.Now;
                            model.OPS_DITORate.Add(objR);
                            objR.VendorID = item.VendorID;
                            objR.SortOrder = 1;
                            objR.DITOMasterID = objM.ID;
                            objR.FirstRateTime = DateTime.Now;
                            objR.LastRateTime = DateTime.Now;
                            objR.IsSend = true;
                            objR.IsAccept = true;
                            model.SaveChanges();

                            int sLocation = 1;
                            int soLocation = 1;
                            var sSet = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).Select(c => c.Setting).FirstOrDefault();
                            if (!string.IsNullOrEmpty(sSet))
                            {
                                var oSet = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(sSet).FirstOrDefault();
                                if (oSet != null)
                                {
                                    var objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationFromID);
                                    if (objCheck != null)
                                        sLocation = oSet.LocationFromID;
                                    objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationToID);
                                    if (objCheck != null)
                                        soLocation = oSet.LocationToID;
                                }
                            }

                            int idx = 1;
                            OPS_DITOLocation oLocation = new OPS_DITOLocation();
                            oLocation.LocationID = sLocation;
                            oLocation.SortOrder = idx++;
                            oLocation.DITOMasterID = objM.ID;
                            oLocation.CreatedBy = Account.UserName;
                            oLocation.CreatedDate = DateTime.Now;
                            oLocation.DateComeEstimate = objM.ETD;
                            oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                            model.OPS_DITOLocation.Add(oLocation);

                            List<int> dataLocationFrom = new List<int>();
                            List<int> dataLocationTo = new List<int>();
                            Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();

                            foreach (var gop in dataGop.Where(c => c.CreateSortOrder == item.CreateSortOrder).ToList())
                            {
                                var sGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == null && c.ID == gop.ID);
                                if (sGop != null)
                                {
                                    var fID = sGop.ORD_GroupProduct.CUS_Location.LocationID;
                                    var tID = sGop.ORD_GroupProduct.CUS_Location1.LocationID;

                                    dataLocationFrom.Add(fID);
                                    if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                        dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;
                                    else if (dicLocationTime[fID] > sGop.ORD_GroupProduct.ETD)
                                        dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;

                                    dataLocationTo.Add(tID);
                                    if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                        dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;
                                    else if (dicLocationTime[tID] > sGop.ORD_GroupProduct.ETA)
                                        dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;

                                    var flag = false;
                                    switch (sGop.ORD_GroupProduct.CAT_Packing.TypeOfPackageID)
                                    {
                                        case -(int)SYSVarType.TypeOfPackingGOPTon:
                                            if (sGop.Ton > gop.Ton)
                                            {
                                                flag = true;
                                            }
                                            break;
                                        case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                            if (sGop.CBM > gop.CBM)
                                            {
                                                flag = true;
                                            }
                                            break;
                                        case -(int)SYSVarType.TypeOfPackingGOPTU:
                                            if (sGop.Quantity > gop.Quantity)
                                            {
                                                flag = true;
                                            }
                                            break;
                                    }
                                    if (flag)
                                    {
                                        sGop.ModifiedBy = Account.UserName;
                                        sGop.ModifiedDate = DateTime.Now;
                                        sGop.Ton -= gop.Ton;
                                        sGop.CBM -= gop.CBM;
                                        sGop.Quantity -= gop.Quantity;
                                        sGop.TonBBGN = sGop.TonTranfer = sGop.Ton;
                                        sGop.CBMBBGN = sGop.CBMTranfer = sGop.CBM;
                                        sGop.QuantityBBGN = sGop.QuantityLoading = sGop.QuantityTranfer = sGop.Quantity;
                                        sGop.IsSplit = flag;

                                        OPS_DITOGroupProduct oN = new OPS_DITOGroupProduct();
                                        oN.CreatedBy = Account.UserName;
                                        oN.CreatedDate = DateTime.Now;
                                        model.OPS_DITOGroupProduct.Add(oN);

                                        oN.OrderGroupProductID = sGop.OrderGroupProductID;
                                        oN.DITOMasterID = objM.ID;
                                        oN.Ton = oN.TonBBGN = oN.TonTranfer = gop.Ton;
                                        oN.CBM = oN.CBMBBGN = oN.CBMTranfer = gop.CBM;
                                        oN.Quantity = oN.QuantityBBGN = oN.QuantityLoading = oN.QuantityTranfer = gop.Quantity;
                                        oN.Note = sGop.Note;
                                        oN.IsInput = sGop.IsInput;
                                        oN.IsOrigin = sGop.IsOrigin;
                                        oN.IsSplit = flag;
                                        oN.DNCode = sGop.DNCode;
                                        oN.DITOGroupProductStatusID = sGop.DITOGroupProductStatusID;
                                        oN.DateFromCome = sGop.DateFromCome;
                                        oN.DateFromLeave = sGop.DateFromLeave;
                                        oN.DateFromLoadStart = sGop.DateFromLoadStart;
                                        oN.DateFromLoadEnd = sGop.DateFromLoadEnd;
                                        oN.DateToCome = sGop.DateToCome;
                                        oN.DateToLeave = sGop.DateToLeave;
                                        oN.DateToLoadStart = sGop.DateToLoadStart;
                                        oN.DateToLoadEnd = sGop.DateToLoadEnd;
                                        oN.Note1 = sGop.Note1;
                                        oN.Note2 = sGop.Note2;
                                        oN.InvoiceBy = sGop.InvoiceBy;
                                        oN.InvoiceDate = sGop.InvoiceDate;
                                        oN.InvoiceNote = sGop.InvoiceNote;
                                        oN.DateDN = sGop.DateDN;
                                        oN.DITOGroupProductStatusPODID = sGop.DITOGroupProductStatusPODID;
                                        oN.CUSRoutingID = sGop.CUSRoutingID;
                                        oN.TypeOfDITOGroupProductReturnID = sGop.TypeOfDITOGroupProductReturnID;
                                        oN.DateConfig = sGop.DateConfig;
                                        oN.CATRoutingID = sGop.CATRoutingID;

                                        var dataP = model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == sGop.ID).ToList();
                                        foreach (var p in dataP)
                                        {
                                            p.ModifiedBy = Account.UserName;
                                            p.ModifiedDate = DateTime.Now;

                                            OPS_DITOProduct nP = new OPS_DITOProduct();
                                            nP.CreatedBy = Account.UserName;
                                            nP.CreatedDate = DateTime.Now;
                                            nP.OrderProductID = p.OrderProductID;
                                            nP.Note = p.Note;

                                            switch (p.ORD_Product.CAT_Packing.TypeOfPackageID)
                                            {
                                                case -(int)SYSVarType.TypeOfPackingGOPTon:
                                                    p.Quantity = p.QuantityBBGN = p.QuantityTranfer = sGop.Ton;
                                                    nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.Ton;
                                                    break;
                                                case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                                    p.Quantity = p.QuantityBBGN = p.QuantityTranfer = sGop.CBM;
                                                    nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.CBM;
                                                    break;
                                                case -(int)SYSVarType.TypeOfPackingGOPTU:
                                                    p.Quantity = p.QuantityBBGN = p.QuantityTranfer = sGop.Quantity;
                                                    nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.Quantity;
                                                    break;
                                            }

                                            oN.OPS_DITOProduct.Add(nP);
                                        }
                                    }
                                    else
                                    {
                                        sGop.ModifiedBy = Account.UserName;
                                        sGop.ModifiedDate = DateTime.Now;
                                        sGop.DITOMasterID = objM.ID;
                                    }
                                }
                            }

                            var dataL = dataLocationFrom.Distinct().ToList();
                            dataL.AddRange(dataLocationTo.Distinct().ToList());
                            dataL = dataL.Distinct().ToList();
                            for (var i = 0; i < dataL.Count; i++)
                            {
                                //Create DITOLocation
                                OPS_DITOLocation oL = new OPS_DITOLocation();
                                oL.CreatedBy = Account.UserName;
                                oL.CreatedDate = DateTime.Now;
                                model.OPS_DITOLocation.Add(oL);
                                oL.DITOMasterID = objM.ID;
                                oL.LocationID = dataL[i];
                                oL.SortOrder = idx++;
                                oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                                if (dicLocationTime.ContainsKey(dataL[i]))
                                    oL.DateComeEstimate = dicLocationTime[dataL[i]];

                                if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                                if (i != 0)
                                {
                                    //Create DITO
                                    OPS_DITO oD = new OPS_DITO();
                                    oD.CreatedBy = Account.UserName;
                                    oD.CreatedDate = DateTime.Now;
                                    oD.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                                    oD.DITOMasterID = objM.ID;
                                    oD.LocationFromID = dataL[i - 1];
                                    oD.LocationToID = dataL[i];
                                    //oD.RoutingID = OPS_CreateRoute(model, dataL[i - 1], dataL[i]);
                                    oD.SortOrder = i;
                                    oD.IsOPS = true;
                                    model.OPS_DITO.Add(oD);

                                    if (i == dataL.Count - 1)
                                    {
                                        //Create DITO
                                        OPS_DITO oDEnd = new OPS_DITO();
                                        oDEnd.CreatedBy = Account.UserName;
                                        oDEnd.CreatedDate = DateTime.Now;
                                        oDEnd.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                                        oDEnd.DITOMasterID = objM.ID;
                                        oDEnd.LocationFromID = dataL[i];
                                        oDEnd.LocationToID = soLocation;
                                        //oDEnd.RoutingID = OPS_CreateRoute(model, dataL[i], soLocation);
                                        oDEnd.SortOrder = i + 1;
                                        oDEnd.IsOPS = true;
                                        model.OPS_DITO.Add(oDEnd);
                                    }
                                }
                                else
                                {
                                    //Create DITO
                                    OPS_DITO oD = new OPS_DITO();
                                    oD.CreatedBy = Account.UserName;
                                    oD.CreatedDate = DateTime.Now;
                                    oD.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                                    oD.DITOMasterID = objM.ID;
                                    oD.LocationFromID = sLocation;
                                    oD.LocationToID = dataL[i];
                                    //oD.RoutingID = OPS_CreateRoute(model, sLocation, dataL[i]);
                                    oD.SortOrder = 1;
                                    oD.IsOPS = true;
                                    model.OPS_DITO.Add(oD);
                                }
                            }

                            OPS_DITOLocation osLocation = new OPS_DITOLocation();
                            osLocation.LocationID = soLocation;
                            osLocation.SortOrder = idx++;
                            osLocation.DITOMasterID = objM.ID;
                            osLocation.CreatedBy = Account.UserName;
                            osLocation.CreatedDate = DateTime.Now;
                            osLocation.DateComeEstimate = objM.ETA;
                            osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                            model.OPS_DITOLocation.Add(osLocation);

                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Nhập số DN

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <param name="DateFrom"></param>
        /// <param name="DateTo"></param>
        /// <param name="dataCusID"></param>
        /// <param name="statusID">1: Chưa lập lệnh, 2: Đã lập lệnh, 3: Đã hủy</param>
        /// <returns></returns>
        public DTOResult DIAppointment_RouteDN_OrderList(string request, DateTime DateFrom, DateTime DateTo, List<int> dataCusID, int statusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    DateFrom = DateFrom.Date;
                    DateTo = DateTo.Date;
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstID = new List<int>();
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        if (dataCusID.Count > 0)
                            lstID = lstid.Where(c => dataCusID.Contains(c)).ToList();
                        else
                            lstID = lstid;

                        if (statusID == 1)
                        {
                            var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && lstID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 &&
                            c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && DateFrom <= DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= DateTo && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                            {
                                ID = c.ID,
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = -1,
                                TOMasterCode = "",
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                Ton = c.Ton,
                                Kg = c.Ton * 1000,
                                CBM = c.CBM,
                                Note1 = c.Note1,
                                Note2 = c.Note2,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                IsOrigin = true, // Dùng để ktra ko cho edit sản lượng khi đã tạo chuyến
                                UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                                UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,
                                UserDefine3 = c.ORD_GroupProduct.ORD_Order.UserDefine3,
                            }).ToDataSourceResult(CreateRequest(request));
                            result.Total = query.Total;
                            result.Data = query.Data as IEnumerable<DTODIAppointmentOrder>;
                        }

                        if (statusID == 2)
                        {
                            var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID.HasValue && lstID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 &&
                            c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && DateFrom <= DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= DateTo && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                            {
                                ID = c.ID,
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = c.DITOMasterID.Value,
                                TOMasterCode = c.OPS_DITOMaster.Code,
                                VehicleCode = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                                DriverName = c.OPS_DITOMaster.DriverName1,
                                DriverTelNo = c.OPS_DITOMaster.DriverTel1,
                                ETD = c.OPS_DITOMaster.ETD,
                                ETA = c.OPS_DITOMaster.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                Ton = c.Ton,
                                Kg = c.Ton * 1000,
                                CBM = c.CBM,
                                Note1 = c.Note1,
                                Note2 = c.Note2,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                                UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,
                                UserDefine3 = c.ORD_GroupProduct.ORD_Order.UserDefine3,
                            }).ToDataSourceResult(CreateRequest(request));
                            result.Total = query.Total;
                            result.Data = query.Data as IEnumerable<DTODIAppointmentOrder>;
                        }

                        if (statusID == 3)
                        {
                            var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && lstID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 &&
                            c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && DateFrom <= DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= DateTo && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTODIAppointmentOrder
                            {
                                ID = c.ID,
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = -1,
                                TOMasterCode = "",
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                Ton = c.Ton,
                                Kg = c.Ton * 1000,
                                CBM = c.CBM,
                                Note1 = c.Note1,
                                Note2 = c.Note2,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                                UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,
                                UserDefine3 = c.ORD_GroupProduct.ORD_Order.UserDefine3,
                            }).ToDataSourceResult(CreateRequest(request));
                            result.Total = query.Total;
                            result.Data = query.Data as IEnumerable<DTODIAppointmentOrder>;
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_RouteDN_OrderDNCodeChange(DTODIAppointmentOrder item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item.ID > 0)
                    {
                        var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                        var objGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == item.OrderGroupProductID);
                        if (obj != null && objGroup != null && obj.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel)
                        {
                            objGroup.SOCode = item.SOCode;
                            objGroup.ORD_Order.UserDefine1 = item.UserDefine1;
                            objGroup.ORD_Order.UserDefine1 = item.UserDefine2;
                            objGroup.ORD_Order.UserDefine1 = item.UserDefine3;
                            if (obj.Ton >= item.Ton - 0.00001)
                            {
                                obj.DNCode = item.DNCode;
                                obj.Note1 = item.Note1;
                                obj.Note2 = item.Note2;
                                obj.DateDN = item.DateDN;
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                if (objGroup.DNCode != null)
                                {
                                    objGroup.DNCode = item.DNCode;
                                    objGroup.ModifiedBy = Account.UserName;
                                    objGroup.ModifiedDate = DateTime.Now;
                                }

                                var sub = obj.Ton - item.Ton;
                                if (sub > 0.001)
                                {
                                    obj.Ton = Math.Round(item.Ton, NoDigit, MidpointRounding.AwayFromZero);

                                    var objSub = new OPS_DITOGroupProduct();
                                    objSub.CreatedBy = Account.UserName;
                                    objSub.CreatedDate = DateTime.Now;
                                    objSub.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;

                                    objSub.OrderGroupProductID = obj.OrderGroupProductID;
                                    objSub.QuantityLoading = 0;
                                    objSub.IsInput = true;
                                    objSub.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                    objSub.Ton = objSub.TonTranfer = objSub.TonBBGN = Math.Round(sub, NoDigit, MidpointRounding.AwayFromZero);
                                    objSub.CBM = objSub.CBMTranfer = objSub.CBMBBGN = 0;
                                    objSub.Quantity = objSub.QuantityTranfer = objSub.QuantityBBGN = 0;
                                    objSub.GroupSort = "";
                                    objSub.DNCode = "";
                                    objSub.DateDN = item.DateDN;
                                    model.OPS_DITOGroupProduct.Add(objSub);

                                    model.SaveChanges();

                                    objSub.GroupSort = objGroup.OrderID + "_" + objSub.OrderGroupProductID + "_" + objSub.ID;
                                    model.SaveChanges();
                                }
                                else
                                {
                                    model.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_RouteDN_Delete(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (lstid != null && lstid.Count > 0)
                    {
                        List<int> lstOrderID = new List<int>();
                        foreach (var item in lstid)
                        {
                            var objOps = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item);
                            if (objOps != null)
                            {
                                if (objOps.DITOMasterID.HasValue)
                                    throw FaultHelper.BusinessFault(null, null, "Vui lòng xóa chuyến của DN: " + objOps.DNCode + " trước");

                                objOps.ModifiedBy = Account.UserName;
                                objOps.ModifiedDate = DateTime.Now;
                                objOps.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusCancel;
                                if (!lstOrderID.Contains(objOps.ORD_GroupProduct.OrderID))
                                    lstOrderID.Add(objOps.ORD_GroupProduct.OrderID);
                            }
                        }
                        model.SaveChanges();

                        HelperStatus.ORDOrder_Status(model, Account, lstOrderID.Distinct().ToList());
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_RouteDN_Revert(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (lstid != null && lstid.Count > 0)
                    {
                        List<int> lstOrderID = new List<int>();
                        foreach (var item in lstid)
                        {
                            var objOps = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item);
                            if (objOps != null)
                            {
                                objOps.ModifiedBy = Account.UserName;
                                objOps.ModifiedDate = DateTime.Now;
                                objOps.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;

                                if (!lstOrderID.Contains(objOps.ORD_GroupProduct.OrderID))
                                    lstOrderID.Add(objOps.ORD_GroupProduct.OrderID);
                            }
                        }

                        model.SaveChanges();

                        HelperStatus.ORDOrder_Status(model, Account, lstOrderID.Distinct().ToList());
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Tendering

        public List<DTOMailVendor> DIAppointment_Route_SendToTender(List<int> lst, List<DTODIAppointmentRouteTender> lstTender, double RateTime)
        {
            try
            {
                List<DTOMailVendor> result = new List<DTOMailVendor>();
                if (lstTender != null && lstTender.Count > 0 && lst != null && lst.Count > 0)
                {
                    try
                    {
                        result = DIAppointment_Route_VehicleTender(lst, lstTender, RateTime);
                    }
                    catch (FaultException<DTOError> ex)
                    {
                        throw ex;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMailVendor> DIAppointment_Route_TenderReject(List<int> lst, DTODIAppointmentRouteTenderReject item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    return DIAppointment_Route_VehicleTenderReject(model, lst, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_TenderApproved(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (lst != null && lst.Count > 0)
                    {
                        try
                        {
                            foreach (var id in lst)
                            {
                                DIAppointment_Route_VehicleTenderApproved(id);
                            }
                        }
                        catch (FaultException<DTOError> ex)
                        {
                            throw ex;
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_TenderSave(List<DTODIAppointmentRate> lstVehicle)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (lstVehicle != null && lstVehicle.Count > 0)
                    {
                        Dictionary<string, int> dicVehicle = new Dictionary<string, int>();
                        foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0).Select(c => new { c.CreateVehicleCode }).Distinct())
                        {
                            string regNo = itemVehicle.CreateVehicleCode.Trim();
                            string drivername = string.Empty;
                            string cellphone = string.Empty;
                            double? maxWeight = null;
                            double? maxCBM = null;
                            var currentVehicle = lstVehicle.FirstOrDefault(c => c.CreateVehicleCode == itemVehicle.CreateVehicleCode && c.CreateTelephone != null && c.CreateTelephone != "");
                            if (currentVehicle != null)
                            {
                                drivername = !string.IsNullOrEmpty(currentVehicle.CreateDriverName) ? currentVehicle.CreateDriverName : "";
                                cellphone = currentVehicle.CreateTelephone;
                                maxWeight = currentVehicle.MaxWeight;
                                maxCBM = currentVehicle.MaxCBM;
                            }

                            var obj = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo == regNo);
                            if (obj == null)
                            {
                                obj = new CAT_Vehicle();
                                obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTruck;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.MaxWeight = maxWeight;
                                obj.MaxCapacity = maxCBM;
                                obj.RegNo = regNo;
                                obj.IsOwn = false;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            if (!string.IsNullOrEmpty(drivername))
                                obj.DriverName = drivername;
                            if (!string.IsNullOrEmpty(cellphone))
                                obj.Cellphone = cellphone;

                            if (obj.ID < 1)
                                model.CAT_Vehicle.Add(obj);

                            foreach (var itemVendor in lstVehicle.Where(c => c.CreateVehicleCode == itemVehicle.CreateVehicleCode).Select(c => new { c.CreateVendorID }).Distinct())
                            {
                                if (itemVendor.CreateVendorID > 0)
                                {
                                    var objCUS = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == itemVendor.CreateVendorID && c.VehicleID == obj.ID);
                                    if (objCUS == null)
                                    {
                                        objCUS = new CUS_Vehicle();
                                        objCUS.VehicleID = obj.ID;
                                        objCUS.CustomerID = itemVendor.CreateVendorID;
                                        objCUS.CreatedBy = Account.UserName;
                                        objCUS.CreatedDate = DateTime.Now;

                                        model.CUS_Vehicle.Add(objCUS);
                                    }
                                }
                            }

                            model.SaveChanges();
                            dicVehicle.Add(regNo, obj.ID);
                        }

                        foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0 && c.TOMasterID > 0))
                        {
                            if (dicVehicle.ContainsKey(itemVehicle.CreateVehicleCode))
                            {
                                foreach (var item in model.OPS_DITOLocation.Where(c => c.DITOMasterID == itemVehicle.TOMasterID))
                                    model.OPS_DITOLocation.Remove(item);
                            }
                        }
                        model.SaveChanges();

                        foreach (var itemVehicle in lstVehicle.Where(c => c.CreateSortOrder > 0))
                        {
                            if (dicVehicle.ContainsKey(itemVehicle.CreateVehicleCode))
                            {
                                var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == itemVehicle.TOMasterID);
                                if (objMaster != null)
                                {
                                    objMaster.ModifiedBy = Account.UserName;
                                    objMaster.ModifiedDate = DateTime.Now;

                                    objMaster.VendorOfVehicleID = itemVehicle.CreateVendorID;
                                    objMaster.VehicleID = dicVehicle[itemVehicle.CreateVehicleCode];

                                    objMaster.DriverName1 = itemVehicle.CreateDriverName;
                                    objMaster.DriverTel1 = itemVehicle.CreateTelephone;

                                    objMaster.IsHot = false;
                                    objMaster.SortOrder = itemVehicle.CreateSortOrder;
                                    objMaster.ETD = itemVehicle.CreateDateTime;
                                    objMaster.ETA = itemVehicle.CreateDateTime.AddHours(2);
                                    objMaster.DateConfig = itemVehicle.CreateDateTime.AddHours(2);
                                    objMaster.IsRouteVendor = false;
                                    objMaster.IsRouteCustomer = false;
                                    objMaster.IsLoading = false;
                                    objMaster.IsBidding = false;
                                    objMaster.Note = "";
                                    objMaster.KM = 0;

                                    // Tao location
                                    var lstLocation = new List<int>();
                                    lstLocation.Add(LocationDefaultID);

                                    var lstLocationFrom = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objMaster.ID).Select(c => c.ORD_GroupProduct.CUS_Location.LocationID).Distinct().ToList();
                                    var index = 0;
                                    for (int sort = 0; sort < lstLocationFrom.Count; sort++)
                                    {
                                        var objLocation = new OPS_DITOLocation();
                                        objLocation.CreatedBy = Account.UserName;
                                        objLocation.CreatedDate = DateTime.Now;
                                        objLocation.OPS_DITOMaster = objMaster;
                                        objLocation.LocationID = lstLocationFrom[sort];
                                        objLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                                        objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                        objLocation.SortOrder = index + 1;
                                        model.OPS_DITOLocation.Add(objLocation);
                                        index++;
                                    }

                                    var lstLocationTo = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objMaster.ID).Select(c => c.ORD_GroupProduct.CUS_Location1.LocationID).Distinct().ToList();
                                    for (int sort = 0; sort < lstLocationTo.Count; sort++)
                                    {
                                        var objLocation = new OPS_DITOLocation();
                                        objLocation.CreatedBy = Account.UserName;
                                        objLocation.CreatedDate = DateTime.Now;
                                        objLocation.OPS_DITOMaster = objMaster;
                                        objLocation.LocationID = lstLocationTo[sort];
                                        objLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                                        objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                                        objLocation.SortOrder = index + 1;
                                        model.OPS_DITOLocation.Add(objLocation);
                                        index++;
                                    }


                                    objMaster.TotalLocation = lstLocation.Distinct().Count() - 1;
                                    model.SaveChanges();

                                    HelperTimeSheet.Remove(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                                    HelperTimeSheet.Create(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                                    model.SaveChanges();
                                }
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentRate> DIAppointment_Route_TenderRequestList(string request, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentRate>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.AddDays(1).Date;

                        result = model.OPS_DITOMaster.Where(c => c.ETD != null && c.ETD >= DateFrom && c.ETD < DateTo && c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterSendTender && c.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.Count > 0 && c.OPS_DITORate.Count > 0 && c.OPS_DITORate.Any(d => d.VendorID.HasValue && lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == null)).OrderBy(c => c.CreatedDate).Select(c => new DTODIAppointmentRate
                        {
                            TOMasterID = c.ID,
                            CreateVendorID = c.OPS_DITORate.FirstOrDefault(d => lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == null).VendorID.Value,
                            CreateVendorName = c.OPS_DITORate.FirstOrDefault(d => lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == null).CUS_Customer.CustomerName,
                            CreateVehicleCode = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : DIVehicleCode,
                            CreateDateTime = c.ETD.Value,
                            CreateDriverName = c.DriverName1,
                            CreateTelephone = c.DriverTel1,
                            CreateSortOrder = c.ID,
                            TypeID = 1,
                            VendorID = null,
                            SortOrder = 0,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                        }).ToDataSourceResult(CreateRequest(request)).Data.Cast<DTODIAppointmentRate>().ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentRate> DIAppointment_Route_TenderAcceptList(string request, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentRate>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.AddDays(1).Date;

                        result = model.OPS_DITOMaster.Where(c => c.ETD != null && (c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered || c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterDelivery) && c.ETD >= DateFrom && c.ETD < DateTo && c.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.Count > 0 && c.OPS_DITORate.Count > 0 && c.OPS_DITORate.Any(d => d.VendorID.HasValue && lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == true)).OrderBy(c => c.CreatedDate).Select(c => new DTODIAppointmentRate
                        {
                            TOMasterID = c.ID,
                            CreateVendorID = c.OPS_DITORate.FirstOrDefault(d => lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == true).VendorID.Value,
                            CreateVendorName = c.OPS_DITORate.FirstOrDefault(d => lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == true).CUS_Customer.CustomerName,
                            CreateVehicleCode = c.CAT_Vehicle.RegNo,
                            CreateDateTime = c.ETD.Value,
                            CreateDriverName = c.DriverName1,
                            CreateTelephone = c.DriverTel1,
                            CreateSortOrder = c.ID,
                            TypeID = 3,
                            VendorID = null,
                            SortOrder = 0,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                        }).ToDataSourceResult(CreateRequest(request)).Data.Cast<DTODIAppointmentRate>().ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentRate> DIAppointment_Route_TenderRejectList(string request, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentRate>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.AddDays(1).Date;

                        result = model.OPS_DITOMaster.Where(c => c.ETD != null && c.ETD >= DateFrom && c.ETD < DateTo && c.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.Count > 0 && c.OPS_DITORate.Count > 0 && c.OPS_DITORate.Any(d => d.VendorID.HasValue && lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == false)).OrderBy(c => c.CreatedDate).Select(c => new DTODIAppointmentRate
                        {
                            TOMasterID = c.ID,
                            CreateVendorID = 0,
                            CreateVendorName = string.Empty,
                            CreateVehicleCode = string.Empty,
                            CreateDateTime = c.ETD.Value,
                            CreateDriverName = string.Empty,
                            CreateTelephone = string.Empty,
                            CreateSortOrder = c.ID,
                            TypeID = 2,
                            VendorID = null,
                            SortOrder = 0,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                        }).ToDataSourceResult(CreateRequest(request)).Data.Cast<DTODIAppointmentRate>().ToList();
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentOrder> DIAppointment_Route_TenderRequestOrderList(string request, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.AddDays(1).Date;
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();

                        var queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterSendTender && c.OPS_DITOMaster.ETD >= DateFrom && c.OPS_DITOMaster.ETD < DateTo && c.OPS_DITOMaster.OPS_DITORate.Count > 0 && c.OPS_DITOMaster.OPS_DITORate.Any(d => d.VendorID.HasValue && lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == null) &&
                            c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTODIAppointmentOrder
                            {
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = c.DITOMasterID.Value,
                                TOMasterCode = c.OPS_DITOMaster.Code,
                                ID = c.ID,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                IsOrigin = c.IsOrigin,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,
                                TypeEditID = 3,
                                ProductCode = "",

                                TypeID = 1,
                                CreateSortOrder = c.DITOMasterID.Value,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                MaxWeightCal = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeight : null,

                                TempMax = c.ORD_GroupProduct.TempMax,
                                TempMin = c.ORD_GroupProduct.TempMin
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                        var lstLTL = queryLTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        result.AddRange(lstLTL);
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentOrder> DIAppointment_Route_TenderAcceptOrderList(string request, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.AddDays(1).Date;
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();

                        var queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && (c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered || c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterDelivery) && c.OPS_DITOMaster.ETD >= DateFrom && c.OPS_DITOMaster.ETD < DateTo && c.OPS_DITOMaster.OPS_DITORate.Count > 0 && c.OPS_DITOMaster.OPS_DITORate.Any(d => d.VendorID.HasValue && lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == true) &&
                            c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTODIAppointmentOrder
                            {
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = c.DITOMasterID.Value,
                                TOMasterCode = c.OPS_DITOMaster.Code,
                                ID = c.ID,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                IsOrigin = c.IsOrigin,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,
                                TypeEditID = 3,
                                ProductCode = "",

                                TypeID = 2,
                                CreateSortOrder = c.DITOMasterID.Value,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                MaxWeightCal = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeight : null,

                                TempMax = c.ORD_GroupProduct.TempMax,
                                TempMin = c.ORD_GroupProduct.TempMin
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                        var lstLTL = queryLTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        result.AddRange(lstLTL);
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTODIAppointmentOrder> DIAppointment_Route_TenderRejectOrderList(string request, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentOrder>();

                using (var model = new DataEntities())
                {
                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.AddDays(1).Date;
                        var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();

                        var queryLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OPS_DITOMaster.ETD >= DateFrom && c.OPS_DITOMaster.ETD < DateTo && c.OPS_DITOMaster.OPS_DITORate.Count > 0 && c.OPS_DITOMaster.OPS_DITORate.Any(d => d.VendorID.HasValue && lstid.Contains(d.VendorID.Value) && d.IsSend && d.IsAccept == false) &&
                            c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTODIAppointmentOrder
                            {
                                GenID = c.ORD_GroupProduct.OrderID + "_" + c.ORD_GroupProduct.GroupOfProductID + "_" + c.GroupSort,

                                TOMasterID = c.DITOMasterID.Value,
                                TOMasterCode = c.OPS_DITOMaster.Code,
                                ID = c.ID,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                RateTime = c.ORD_GroupProduct.ORD_Order.LeadTime,
                                KM = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.EDistance,

                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                AllowCoLoad = c.ORD_GroupProduct.ORD_Order.AllowCoLoad,

                                OrderGroupProductID = c.OrderGroupProductID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                CUSRoutingCode = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code,
                                CUSRoutingName = c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName,
                                GroupSort = c.GroupSort,

                                TranferItem = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                DNCode = c.DNCode,
                                IsOrigin = c.IsOrigin,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Description = c.ORD_GroupProduct.Description,
                                PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "",
                                PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "",
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                ProvinceName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                DistrictName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,

                                FromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                FromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                FromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                FromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,

                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,

                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,
                                TypeEditID = 3,
                                ProductCode = "",

                                TypeID = 2,
                                CreateSortOrder = c.DITOMasterID.Value,
                                IsChoose = false,
                                DateDN = c.DateDN,
                                MaxWeightCal = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeight : null,

                                TempMax = c.ORD_GroupProduct.TempMax,
                                TempMin = c.ORD_GroupProduct.TempMin
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                        var lstLTL = queryLTL.Data.Cast<DTODIAppointmentOrder>().ToList();
                        result.AddRange(lstLTL);
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_SendMailToTender(List<DTOMailVendor> lst)
        {
            try
            {
                throw new Exception("Function is locked by develop");
                //using (var model = new DataEntities())
                //{
                //    model.EventAccount = Account; model.EventRunning = false;

                //    if (lst != null && lst.Count > 0)
                //    {
                //        foreach (var item in lst)
                //            Truck_SendMailToVendor(item.ListRateID, item.VendorID, item.SysCustomerID);
                //    }
                //}
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region 2 Views

        public List<DTODIAppointmentRate> DIAppointment_Route_MasterList(string request, List<int> dataCusID, DateTime DateFrom, DateTime DateTo)
        {
            try
            {
                var result = new List<DTODIAppointmentRate>();

                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = true;

                    var objUser = model.SYS_User.Where(c => c.ID == Account.UserID).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (objUser != null)// && objUser.ListCustomerID != null && objUser.ListCustomerID.Trim() != string.Empty)
                    {
                        //var lstid = objUser.ListCustomerID.Split(',').Select(c => Convert.ToInt32(c)).ToList();
                        //lstid.Add(Account.SYSCustomerID);
                        DateFrom = DateFrom.Date;
                        DateTo = DateTo.Date;
                        result = model.OPS_DITOMaster.Where(c => c.ETD != null && DbFunctions.TruncateTime(c.ETD) >= DateFrom && DbFunctions.TruncateTime(c.ETD) <= DateTo
                            && ((c.VendorOfVehicleID > 0 && ((isCustomer && !isAdmin) ? Account.ListCustomerID.ToList().Contains(c.VendorOfVehicleID.Value) : true)) || c.VendorOfVehicleID == null)
                            && (c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved || c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered || c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterSendTender)
                            && c.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOGroupProduct.Count > 0 && c.TransportModeID == -(int)SYSVarType.TransportModeLTL && dataCusID.Contains(c.OPS_DITOGroupProduct.FirstOrDefault().ORD_GroupProduct.ORD_Order.CustomerID)).OrderBy(c => c.CreatedDate).Select(c => new DTODIAppointmentRate
                        {
                            TOMasterID = c.ID,
                            CreateVendorID = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.VendorOfVehicleID.Value : -1,
                            CreateVendorName = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.CUS_Customer.CustomerName : "Xe nhà",
                            CreateVehicleCode = c.VehicleID.HasValue ? c.CAT_Vehicle.RegNo : string.Empty,
                            CreateDateTime = c.ETD.Value,
                            CreateDriverName = c.DriverName1 == null ? string.Empty : c.DriverName1,
                            CreateTelephone = c.DriverTel1 == null ? string.Empty : c.DriverTel1,
                            CreateSortOrder = c.ID,
                            TypeID = c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered ? 2 : 3,
                            VendorID = null,
                            SortOrder = 0,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                            Credit = 0,
                            Debit = 0,
                            PL = 0
                        }).ToDataSourceResult(CreateRequest(request)).Data.Cast<DTODIAppointmentRate>().ToList();

                        foreach (var item in result)
                        {
                            var lstPl = model.FIN_PL.Where(c => c.DITOMasterID == item.TOMasterID && c.IsPlanning).Select(c => new { c.Credit, c.Debit });
                            if (lstPl != null && lstPl.Count() > 0)
                            {
                                if (lstPl.Count(c => c.Debit == 0) > 0)
                                    item.Credit = lstPl.Where(c => c.Debit == 0).Sum(c => c.Credit);
                                if (lstPl.Count(c => c.Credit == 0) > 0)
                                    item.Debit = lstPl.Where(c => c.Credit == 0).Sum(c => c.Debit);

                                item.PL = item.Credit - item.Debit;
                            }

                            if (item.TypeID == 3)
                            {
                                var rate = model.OPS_DITORate.Where(c => c.DITOMasterID == item.TOMasterID && c.VendorID.HasValue && c.IsSend && c.IsAccept == null).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                                if (rate != null)
                                {
                                    item.CreateVendorID = rate.VendorID.Value;
                                    item.CreateVendorName = rate.CUS_Customer.CustomerName;
                                }
                            }
                            else
                            {
                                if (item.CreateVehicleCode == string.Empty)
                                    item.CreateVehicleCode = DIVehicleCode;
                            }
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTODIAppointmentRate DIAppointment_Route_Master_OfferPL(DTODIAppointmentRate master, List<DTODIAppointmentOrder> lstOrder)
        {
            try
            {
                var result = new DTODIAppointmentRate();

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (master != null && lstOrder != null && lstOrder.Count > 0)
                    {
                        // Tính P/L
                        result = HelperFinance.DITOMaster_Tendering_Offer(model, master, lstOrder);
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIAppointment_Route_Master_ChangeMode(List<int> data, bool fromFTL)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        int fMode = -(int)SYSVarType.TransportModeLTL;
                        int tMode = -(int)SYSVarType.TransportModeFTL;
                        if (fromFTL)
                        {
                            fMode = -(int)SYSVarType.TransportModeFTL;
                            tMode = -(int)SYSVarType.TransportModeLTL;
                        }
                        var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item && c.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterApproved && c.TransportModeID == fMode);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.TransportModeID = tMode;
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool DIAppointment_Route_Master_CheckDriver(int vehicleID, int driverID, DateTime? etd, DateTime? eta)
        {
            try
            {
                bool result = false;
                if (etd.HasValue)
                    etd = etd.Value.Date;
                using (var model = new DataEntities())
                {
                    //var data = model.FLM_FleetPlanning.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == vehicleID && c.PlanningDate == etd).ToList();
                    //foreach (var item in data)
                    //{
                    //    if (item.DriverID1 == driverID && item.TypeOfDriverID1 == -(int)SYSVarType.TypeOfDriverMain)
                    //        result = true;
                    //    else if (item.DriverID2 == driverID && item.TypeOfDriverID2 == -(int)SYSVarType.TypeOfDriverMain)
                    //        result = true;
                    //    else if (item.DriverID3 == driverID && item.TypeOfDriverID3 == -(int)SYSVarType.TypeOfDriverMain)
                    //        result = true;
                    //}
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Confirm
        public DTOResult DIAppointment_Route_BookingConfirmation_Read(string request, int customerID, DateTime fDate, DateTime tDate)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    fDate = fDate.Date;
                    tDate = tDate.Date.AddDays(1);
                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID.HasValue && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOMaster.ETD >= fDate && c.OPS_DITOMaster.ETD < tDate && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.CustomerID == customerID)
                        .Select(c => new DTOOPSBookingConfirm
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID.Value,
                            TOMasterCode = c.OPS_DITOMaster.Code,
                            VehicleCode = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            ETD = c.OPS_DITOMaster.ETD.Value,
                            ETA = c.OPS_DITOMaster.ETA.Value,
                            DriverName = c.OPS_DITOMaster.DriverName1 != null ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode != null ? c.DNCode : string.Empty,
                            SOCode = c.ORD_GroupProduct.SOCode != null ? c.ORD_GroupProduct.SOCode : string.Empty,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            RoutingCode = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : string.Empty,
                            RoutingName = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : string.Empty,
                            Ton = c.ORD_GroupProduct.Ton,
                            CBM = c.ORD_GroupProduct.CBM,
                            Quantity = c.ORD_GroupProduct.Quantity,
                            TonTransfer = c.TonTranfer,
                            CBMTransfer = c.CBMTranfer,
                            QuantityTransfer = c.QuantityTranfer,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            Description = c.ORD_GroupProduct.Description,
                            PartnerCode = c.ORD_GroupProduct.PartnerID.HasValue ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                            PartnerName = c.ORD_GroupProduct.PartnerID.HasValue ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            PartnerProvinceName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            PartnerDistrictName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                            PartnerAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            StockCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            StockName = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Location : string.Empty,
                            StockProvinceName = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            StockDistrictName = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName : string.Empty,
                            StockAddress = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : string.Empty,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSBookingConfirm>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSBookingConfirm> DIAppointment_Route_BookingConfirmation(List<int> lstCustomerID, DateTime fDate, DateTime tDate)
        {
            try
            {
                var result = new List<DTOOPSBookingConfirm>();
                using (var model = new DataEntities())
                {
                    fDate = fDate.Date;
                    tDate = tDate.Date.AddDays(1);
                    result = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID.HasValue && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOMaster.ETD >= fDate && c.OPS_DITOMaster.ETD < tDate && c.OrderGroupProductID > 0 && lstCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID))
                        .Select(c => new DTOOPSBookingConfirm
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID.Value,
                            TOMasterCode = c.OPS_DITOMaster.Code,
                            VehicleCode = c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            ETD = c.OPS_DITOMaster.ETD.Value,
                            ETA = c.OPS_DITOMaster.ETA.Value,
                            DriverName = c.OPS_DITOMaster.DriverName1 != null ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            DNCode = c.DNCode != null ? c.DNCode : string.Empty,
                            SOCode = c.ORD_GroupProduct.SOCode != null ? c.ORD_GroupProduct.SOCode : string.Empty,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            RoutingCode = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Code : string.Empty,
                            RoutingName = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingName : string.Empty,
                            Ton = c.ORD_GroupProduct.Ton,
                            CBM = c.ORD_GroupProduct.CBM,
                            Quantity = c.ORD_GroupProduct.Quantity,
                            TonTransfer = c.TonTranfer,
                            CBMTransfer = c.CBMTranfer,
                            QuantityTransfer = c.QuantityTranfer,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            Description = c.ORD_GroupProduct.Description,
                            PartnerCode = c.ORD_GroupProduct.PartnerID.HasValue ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                            PartnerName = c.ORD_GroupProduct.PartnerID.HasValue ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            PartnerProvinceName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            PartnerDistrictName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                            PartnerAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            StockCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            StockName = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Location : string.Empty,
                            StockProvinceName = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            StockDistrictName = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName : string.Empty,
                            StockAddress = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : string.Empty,
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        public List<DTOORDImportABA> DIAppointment_Route_ExcelConfirm(DateTime fDate, DateTime tDate)
        {
            try
            {
                var result = new List<DTOORDImportABA>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOMaster.Where(c => c.ETD >= fDate && c.ETD < tDate).Select(c => new DTOORDImportABA
                    {
                        DITOMasterID = c.ID,
                        ETDDate = c.ETD,
                        ETDTime = c.ETD,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.GroupName,
                        VehicleID = c.VehicleID,
                        VehicleCode = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : "",
                        DriverName1 = c.DriverName1,
                        DriverTel1 = c.DriverTel1
                    }).ToList();

                    var lstGroup = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OrderGroupProductID > 0 && c.OPS_DITOMaster.ETD >= fDate && c.OPS_DITOMaster.ETD <= tDate).Select(c => new
                    {
                        OrderGroupProductID = c.ORD_GroupProduct.ID,
                        c.DITOMasterID,
                        c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        StockCode = c.ORD_GroupProduct.CUS_Location.Code,
                        StockName = c.ORD_GroupProduct.CUS_Location.LocationName,
                        GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        Note = c.ORD_GroupProduct.ORD_Order.Note,
                        UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,

                        c.ORD_GroupProduct.SOCode,
                        DistributorCode = c.ORD_GroupProduct.CUS_Partner.PartnerCode,
                        DistributorName = c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName,
                        Address = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : "",
                        c.ORD_GroupProduct.Quantity,
                        c.ORD_GroupProduct.Ton,
                        c.ORD_GroupProduct.CBM
                    }).ToList();

                    var lstGroupID = lstGroup.Select(c => c.OrderGroupProductID).Distinct().ToList();
                    var lstProduct = model.ORD_Product.Where(c => lstGroupID.Contains(c.GroupProductID)).Select(c => new
                    {
                        c.GroupProductID,
                        c.CUS_Product.Code
                    }).Distinct().ToList();

                    foreach (var item in result)
                    {
                        var first = lstGroup.FirstOrDefault(c => c.DITOMasterID == item.DITOMasterID);
                        if (first != null)
                        {
                            item.CustomerCode = first.CustomerCode;
                            item.CustomerName = first.CustomerName;
                            item.OrderCode = first.OrderCode;
                            item.Note = first.Note;
                            item.UserDefine1 = first.UserDefine1;
                        }

                        item.Details = lstGroup.Where(c => c.DITOMasterID == item.DITOMasterID).Select(c => new DTOORDImportABA_Detail
                        {
                            StockCode = c.StockCode,
                            StockName = c.StockName,
                            GroupOfProductID = c.OrderGroupProductID,
                            GroupOfProductCode = c.GroupOfProductCode,
                            SOCode = c.SOCode,
                            DistributorCode = c.DistributorCode,
                            DistributorName = c.DistributorName,
                            Address = c.Address,
                            Quantity = c.Quantity,
                            Ton = c.Ton,
                            CBM = c.CBM
                        }).ToList();

                        foreach (var detail in item.Details)
                        {
                            var product = lstProduct.FirstOrDefault(c => c.GroupProductID == detail.GroupOfProductID);
                            if (product != null)
                            {
                                detail.ProductCode = product.Code;
                            }
                        }
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CO_Common

        #endregion

        #region COApointment

        public DTOResult COAppointment_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    int iStatusOfPlanPlaning = -(int)SYSVarType.StatusOfPlanPlaning;
                    var query = model.ORD_Order.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfPlanID >= iStatusOfPlanPlaning
                        && (!isAdmin ? Account.ListCustomerID.Contains(c.CustomerID) : true) && c.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL).Select(c => new DTOOPSOrderContainer
                    {
                        ID = c.ID,
                        StatusOfOrderName = c.SYS_Var1.ValueOfVar,
                        StatusOfPlanName = c.SYS_Var2.ValueOfVar,
                        TypeOfOrderName = c.SYS_Var5.ValueOfVar,
                        Code = c.Code,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName,
                        CreatedDate = c.CreatedDate,
                        CreatedBy = c.CreatedBy,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        RequestDate = c.RequestDate,
                        LocationFrom = c.LocationFromID.HasValue ? c.CUS_Location.CAT_Location.Location : string.Empty,
                        LocationTo = c.LocationToID.HasValue ? c.CUS_Location1.CAT_Location.Location : string.Empty,
                        URL = string.Empty,
                        IsHot = c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderHot || c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturnHot,
                        IsLocked = false,
                        LocationToAddress = c.LocationToID.HasValue ? c.CUS_Location1.CAT_Location.Address : string.Empty,
                        LocationToCode = c.LocationToID.HasValue ? c.CUS_Location1.Code : string.Empty,
                        LocationToProvince = c.LocationToID.HasValue ? c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationToDistrict = c.LocationToID.HasValue ? c.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                        ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.CAT_ServiceOfOrder.Name : string.Empty
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSOrderContainer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void COAppointment_Cancel(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.ORD_Order.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            if (model.OPS_COTOContainer.Count(c => c.OPS_Container.ORD_Container.OrderID == obj.ID && c.COTOMasterID > 0) > 0)
                            {
                                var dataCon = model.OPS_COTOContainer.Where(c => c.OPS_Container.ORD_Container.OrderID == obj.ID && c.COTOMasterID > 0).Select(c => c.OPS_COTOMaster.Code).Distinct().ToList();
                                throw FaultHelper.BusinessFault(null, null, "Không thể trả về. ĐH " + obj.Code + " có dữ liệu chuyến! Chuyến: [" + string.Join(",", dataCon) + "]");
                            }

                            if (model.OPS_OPTOPSContainer.Count(c => c.OPS_COTOContainer.OPS_Container.ORD_Container.OrderID == obj.ID) > 0)
                            {
                                var dataOPT = model.OPS_OPTOPSContainer.Where(c => c.OPS_COTOContainer.OPS_Container.ORD_Container.OrderID == obj.ID).Select(c => new
                                {
                                    c.OPS_COTOContainer.OPS_Container.ContainerNo,
                                    c.OPS_Optimizer.OptimizerName
                                }).Distinct().ToList();
                                throw FaultHelper.BusinessFault(null, null, "Không thể trả về. ĐH " + obj.Code + " có dữ liệu tối ưu! Gói tối ưu: [" + string.Join(",", dataOPT.Select(c => c.OptimizerName).Distinct().ToList()) + "]");
                            }

                            if (model.OPS_COImportContainer.Count(c => c.OPS_COTOContainer.OPS_Container.ORD_Container.OrderID == obj.ID) > 0)
                            {
                                var dataIMP = model.OPS_COImportContainer.Where(c => c.OPS_COTOContainer.OPS_Container.ORD_Container.OrderID == obj.ID).Select(c => c.OPS_COImportTOMaster.OPS_COImportPacket.PacketName).Distinct().ToList();
                                throw FaultHelper.BusinessFault(null, null, "Không thể trả về. ĐH " + obj.Code + " có dữ liệu import! Gói import: [" + string.Join(",", dataIMP) + "]");
                            }

                            if (model.OPS_COImportORDContainer.Count(c => c.ORD_Container.OrderID == obj.ID) > 0)
                            {
                                var dataIMP = model.OPS_COImportORDContainer.Where(c => c.ORD_Container.OrderID == obj.ID).Select(c => c.OPS_COImportPacket.PacketName).Distinct().ToList();
                                throw FaultHelper.BusinessFault(null, null, "Không thể trả về. ĐH " + obj.Code + " có dữ liệu import! Gói import: [" + string.Join(",", dataIMP) + "]");
                            }

                            foreach (var i in model.OPS_Container.Where(c => c.ORD_Container.OrderID == item))
                            {
                                foreach (var o in model.OPS_COTOContainer.Where(c => c.OPSContainerID == i.ID))
                                {
                                    foreach (var e in model.OPS_COTODetail.Where(c => c.COTOContainerID == o.ID).ToList())
                                        model.OPS_COTODetail.Remove(e);
                                    model.OPS_COTOContainer.Remove(o);
                                }
                                model.OPS_Container.Remove(i);
                            }
                            foreach (var i in model.ORD_Container.Where(c => c.OrderID == item))
                            {
                                i.ETD = i.ETDOld;
                                i.ETA = i.ETAOld;
                            }
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;
                            obj.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                            model.SaveChanges();
                        }
                    }

                    HelperStatus.ORDOrder_Status(model, Account, data.Distinct().ToList());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region COApointment_Route

        #region 2View

        /// <summary>
        /// Danh sách container điều phối chưa lập chuyến
        /// </summary>
        /// <param name="request"></param>
        /// <param name="dataCusID"></param>
        /// <param name="fDate"></param>
        /// <param name="tDate"></param>
        /// <returns></returns>
        public List<DTOOPSCOTOContainer> COAppointment_2View_Container_List(string request, List<int> dataCusID, DateTime fDate, DateTime tDate)
        {
            try
            {
                var result = new List<DTOOPSCOTOContainer>();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = true;

                    fDate = fDate.Date; tDate = tDate.Date;
                    result = model.OPS_COTOContainer.Where(c => c.COTOMasterID == null && c.ETD != null && DbFunctions.TruncateTime(c.ETD) >= fDate && DbFunctions.TruncateTime(c.ETD) <= tDate
                        && ((isCustomer && !isAdmin) ? dataCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)).OrderBy(c => c.CreatedDate).Select(c => new DTOOPSCOTOContainer
                    {
                        ID = c.ID,
                        IsTimeRelax = false,
                        COTOMasterID = c.COTOMasterID,
                        PackingID = c.OPS_Container.ORD_Container.PackingID,
                        PackingName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                        ContainerID = c.OPS_Container.ContainerID,
                        ContainerNo = c.OPS_Container.ContainerNo,
                        SealNo1 = c.OPS_Container.SealNo1,
                        SealNo2 = c.OPS_Container.SealNo2,
                        StatusOfCOContainerID = c.StatusOfCOContainerID,
                        StatusOfCOContainerName = c.SYS_Var.ValueOfVar,
                        ETD = c.ETD,
                        ETA = c.ETA,
                        ETDStart = c.ETDStart,
                        ETAStart = c.ETAStart,
                        SortOrder = c.SortOrder,
                        OrderID = c.OPS_Container.ORD_Container.OrderID,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                        CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                        ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                        Note = c.OPS_Container.ORD_Container.Note,
                        LocationFromID = c.LocationFromID,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromName = c.CAT_Location.Location,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationFromDistrictName = c.CAT_Location.CAT_District.DistrictName,
                        LocationFromProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        LocationToID = c.LocationToID,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToName = c.CAT_Location1.Location,
                        LocationToAddress = c.CAT_Location1.Address,
                        LocationToDistrictName = c.CAT_Location1.CAT_District.DistrictName,
                        LocationToProvinceName = c.CAT_Location1.CAT_Province.ProvinceName,
                        TypeID = 0,
                        Ton = c.OPS_Container.Ton
                    }).ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOOPSCOTOContainer>().OrderBy(c => c.ETD).ThenBy(c => c.OrderID).ThenBy(c => c.ContainerID).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Danh sách container điều phối đã lập chuyến
        /// </summary>
        /// <param name="request"></param>
        /// <param name="dataCusID"></param>
        /// <param name="fDate"></param>
        /// <param name="tDate"></param>
        /// <returns></returns>
        public List<DTOOPSCOTOContainer> COAppointment_2View_ContainerHasMaster_List(string request, List<int> dataCusID, DateTime fDate, DateTime tDate)
        {
            try
            {
                var result = new List<DTOOPSCOTOContainer>();
                using (var model = new DataEntities())
                {
                    fDate = fDate.Date; tDate = tDate.Date;
                    result = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && DbFunctions.TruncateTime(c.OPS_COTOMaster.ETD) >= fDate && DbFunctions.TruncateTime(c.OPS_COTOMaster.ETD) <= tDate
                        && dataCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterTendered).OrderBy(c => c.CreatedDate).Select(c => new DTOOPSCOTOContainer
                    {
                        ID = c.ID,
                        IsTimeRelax = false,
                        COTOMasterID = c.COTOMasterID,
                        PackingID = c.OPS_Container.ORD_Container.PackingID,
                        PackingName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                        ContainerID = c.OPS_Container.ContainerID,
                        ContainerNo = c.OPS_Container.ContainerNo,
                        SealNo1 = c.OPS_Container.SealNo1,
                        SealNo2 = c.OPS_Container.SealNo2,
                        StatusOfCOContainerID = c.StatusOfCOContainerID,
                        StatusOfCOContainerName = c.SYS_Var.ValueOfVar,
                        ETD = c.ETD,
                        ETA = c.ETA,
                        ETDStart = c.ETDStart,
                        ETAStart = c.ETAStart,
                        Ton = c.OPS_Container.Ton,
                        SortOrder = c.SortOrder,
                        OrderID = c.OPS_Container.ORD_Container.OrderID,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                        CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                        ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                        Note = c.OPS_Container.Note,
                        LocationFromID = c.LocationFromID,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromName = c.CAT_Location.Location,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationFromDistrictName = c.CAT_Location.CAT_District.DistrictName,
                        LocationFromProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        LocationToID = c.LocationToID,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToName = c.CAT_Location1.Location,
                        LocationToAddress = c.CAT_Location1.Address,
                        LocationToDistrictName = c.CAT_Location1.CAT_District.DistrictName,
                        LocationToProvinceName = c.CAT_Location1.CAT_Province.ProvinceName,
                        TypeID = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterTendered ? 2 : 3,
                    }).ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOOPSCOTOContainer>().ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Danh sách chuyến.
        /// </summary>
        /// <param name="request"></param>
        /// <param name="dataCusID"></param>
        /// <param name="fDate"></param>
        /// <param name="tDate"></param>
        /// <returns></returns>
        public List<DTOOPSCOTOMaster> COAppointment_2View_Master_List(string request, List<int> dataCusID, DateTime fDate, DateTime tDate)
        {
            try
            {
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                var isCustomer = true;

                List<DTOOPSCOTOMaster> result = new List<DTOOPSCOTOMaster>();
                using (var model = new DataEntities())
                {
                    fDate = fDate.Date; tDate = tDate.Date;
                    result = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 != null && DbFunctions.TruncateTime(c.OPS_COTOMaster.ETD) >= fDate && DbFunctions.TruncateTime(c.OPS_COTOMaster.ETD) <= tDate
                         && ((isCustomer && !isAdmin) ? dataCusID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true) && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterTendered).OrderBy(c => c.CreatedDate).Select(c => new DTOOPSCOTOMaster
                    {
                        ID = c.COTOMasterID.Value,
                        Code = c.OPS_COTOMaster.Code,
                        TypeID = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterTendered ? 2 : 3,
                        DriverID1 = c.OPS_COTOMaster.DriverID1,
                        DriverName1 = c.OPS_COTOMaster.DriverName1,
                        DriverTel1 = c.OPS_COTOMaster.DriverTel1,
                        VendorOfRomoocID = c.OPS_COTOMaster.VendorOfRomoocID,
                        VendorRomoocName = c.OPS_COTOMaster.VendorOfRomoocID > 0 ? c.OPS_COTOMaster.CUS_Customer.CustomerName : "Xe nhà",
                        VendorOfVehicleID = c.OPS_COTOMaster.VendorOfVehicleID,
                        VendorVehicleName = c.OPS_COTOMaster.VendorOfVehicleID > 0 ? c.OPS_COTOMaster.CUS_Customer1.CustomerName : "Xe nhà",
                        VehicleID = c.OPS_COTOMaster.VehicleID,
                        VehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                        RomoocID = c.OPS_COTOMaster.RomoocID,
                        RomoocNo = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                        ETD = c.OPS_COTOMaster.ETD,
                        ETA = c.OPS_COTOMaster.ETA,
                        CreateSortOrder = 0
                    }).Distinct().ToDataSourceResult(CreateRequest(request)).Data.Cast<DTOOPSCOTOMaster>().ToList();

                    foreach (var item in result)
                    {
                        var finPL = model.FIN_PL.Where(c => c.COTOMasterID == item.ID && c.IsPlanning).Select(c => new { c.Credit, c.Debit });
                        if (finPL != null && finPL.Count() > 0)
                        {
                            if (finPL.Count(c => c.Debit == 0) > 0)
                                item.Credit = finPL.Where(c => c.Debit == 0).Sum(c => c.Credit);
                            if (finPL.Count(c => c.Credit == 0) > 0)
                                item.Debit = finPL.Where(c => c.Credit == 0).Sum(c => c.Debit);

                            item.PL = item.Credit - item.Debit;
                        }

                        if (item.TypeID == 3)
                        {
                            var objRate = model.OPS_COTORate.Where(c => c.COTOMasterID == item.ID && c.VendorID.HasValue && c.IsSend && c.IsAccept == null).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                            if (objRate != null)
                            {
                                item.VendorOfVehicleID = objRate.VendorID.Value;
                                item.VendorOfRomoocID = objRate.VendorID.Value;
                                item.VendorRomoocName = item.VendorVehicleName = objRate.CUS_Customer.CustomerName;
                            }
                        }
                        else
                        {
                            if (item.VehicleNo == string.Empty)
                                item.VehicleNo = COVehicleCode;
                            if (item.RomoocNo == string.Empty)
                                item.RomoocNo = CORomoocCode;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Tính doanh thu chi phí theo chuyến
        /// </summary>
        /// <param name="objMaster"></param>
        /// <param name="dataContainer"></param>
        /// <returns></returns>
        public DTOOPSCOTOMaster COAppointment_2View_Master_PL(DTOOPSCOTOMaster objMaster, List<DTOOPSCOTOContainer> dataContainer)
        {
            try
            {
                var result = new DTOOPSCOTOMaster();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;


                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu chuyến. Tạo OPS_COTOLocation
        /// </summary>
        /// <param name="dataMaster"></param>
        /// <param name="dataContainer"></param>
        public void COAppointment_2View_Master_Update(List<DTOOPSCOTOMaster> dataMaster, List<DTOOPSCOTOContainer> dataContainer)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in dataMaster.Where(c => c.CreateSortOrder > 0).ToList())
                    {
                        if (item.VendorOfVehicleID < 1)
                            item.VendorOfVehicleID = item.VendorOfRomoocID = Account.SYSCustomerID;

                        item.ListCOLocation = new List<DTOOPSCOTOLocation>();
                        DTOOPSCOTOLocation sLocation = new DTOOPSCOTOLocation();
                        sLocation.SortOrder = 1;
                        sLocation.LocationID = 1;
                        sLocation.DateComeEstimate = item.ETD;
                        sLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        DTOOPSCOTOLocation eLocation = new DTOOPSCOTOLocation();
                        eLocation.LocationID = 1;
                        eLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                        //Trường hợp xe nhà: Lấy điểm BD + KT trong setting.
                        if (item.VendorOfVehicleID < 0 || item.VendorOfVehicleID == null || item.VendorOfVehicleID == Account.SYSCustomerID)
                        {
                            var sSet = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).Select(c => c.Setting).FirstOrDefault();
                            if (!string.IsNullOrEmpty(sSet))
                            {
                                var oSet = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(sSet).FirstOrDefault();
                                if (oSet != null)
                                {
                                    var f = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationFromID);
                                    if (f != null)
                                    {
                                        sLocation.LocationID = f.ID;
                                    }
                                    var t = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationToID);
                                    if (t != null)
                                    {
                                        eLocation.LocationID = t.ID;
                                    }
                                }
                            }
                        }

                        item.ListCOLocation.Add(sLocation);
                        item.ListCOContainer = new List<DTOOPSCOTOContainer>();

                        foreach (var con in dataContainer.Where(c => c.CreateSortOrder == item.CreateSortOrder).ToList())
                        {
                            var objCO = model.OPS_COTOContainer.Where(c => c.ID == con.ID).FirstOrDefault();
                            if (objCO != null)
                            {
                                item.ListCOContainer.Add(con);
                                if (item.ListCOLocation.Count(c => c.LocationID == objCO.LocationFromID) == 0)
                                {
                                    DTOOPSCOTOLocation oLocation = new DTOOPSCOTOLocation();

                                    oLocation.LocationID = objCO.LocationFromID;
                                    oLocation.SortOrder = item.ListCOLocation.Count + 1;
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;

                                    item.ListCOLocation.Add(oLocation);
                                }
                                else
                                {
                                    var objCheck = item.ListCOLocation.FirstOrDefault(c => c.LocationID == objCO.LocationFromID);
                                    if (objCheck.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery)
                                        objCheck.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                }
                                if (item.ListCOLocation.Count(c => c.LocationID == objCO.LocationToID) == 0)
                                {
                                    DTOOPSCOTOLocation oLocation = new DTOOPSCOTOLocation();

                                    oLocation.LocationID = objCO.LocationToID;
                                    oLocation.SortOrder = item.ListCOLocation.Count + 1;
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                                    item.ListCOLocation.Add(oLocation);
                                }
                                else
                                {
                                    var objCheck = item.ListCOLocation.FirstOrDefault(c => c.LocationID == objCO.LocationToID);
                                    if (objCheck.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet)
                                        objCheck.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                }
                            }
                            if (objCO.ETA.HasValue)
                            {
                                if (item.ETA == null || item.ETA < objCO.ETA)
                                {
                                    item.ETA = objCO.ETA.Value;
                                }
                            }
                        }

                        eLocation.DateComeEstimate = item.ETA;
                        eLocation.SortOrder = item.ListCOLocation.Count + 1;
                        item.ListCOLocation.Add(eLocation);

                        if (item.ListCOContainer.Count == 0)
                        {
                            HelperTOMaster.OPSCO_Tendered(model, Account, new List<int>() { item.ID });
                        }
                        else
                        {
                            item.DriverID1 = OPS_FindFLMDriver(model, item.DriverName1);
                            item.DriverID2 = OPS_FindFLMDriver(model, item.DriverName2);
                            OPS_CO_Create(model, item);
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xóa chuyến (Đang lập)
        /// </summary>
        /// <param name="masterID"></param>
        public void COAppointment_2View_Master_Delete(int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    HelperTOMaster.OPSCO_Tendered(model, Account, new List<int>(new int[] { masterID }));
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Duyệt chuyến => Trạng thái Tendered
        /// </summary>
        /// <param name="masterID"></param>
        public void COAppointment_2View_Master_ToMON(int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (obj != null)
                    {
                        if (obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved)
                        {
                            if (obj.VehicleID == null || obj.RomoocID == null)
                                throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Nhập thông tin đầu kéo và romooc.");

                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterTendered;

                            var sOrder = model.OPS_COTORate.Where(c => c.COTOMasterID == masterID).OrderByDescending(c => c.SortOrder).Select(c => c.SortOrder).FirstOrDefault();

                            var objRate = model.OPS_COTORate.FirstOrDefault(c => c.COTOMasterID == masterID && c.VendorID == obj.VendorOfVehicleID && c.IsSend == true);
                            if (objRate == null)
                            {
                                objRate = new OPS_COTORate();
                                objRate.CreatedBy = Account.UserName;
                                objRate.CreatedDate = DateTime.Now;
                                objRate.COTOMasterID = masterID;
                                objRate.VendorID = obj.VendorOfVehicleID;
                                objRate.SortOrder = sOrder > 0 ? sOrder + 1 : 1;
                                objRate.IsSend = true;
                                objRate.Debit = 0;
                                objRate.IsManual = false;
                                objRate.FirstRateTime = DateTime.Now;
                                objRate.LastRateTime = DateTime.Now.Add(TimeSpan.FromHours(obj.RateTime ?? 2));

                                model.OPS_COTORate.Add(objRate);
                            }
                            else
                            {
                                objRate.ModifiedBy = Account.UserName;
                                objRate.ModifiedDate = DateTime.Now;
                            }
                            objRate.IsAccept = true;

                            model.SaveChanges();
                            HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetCOTOMaster);
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Chỉ được duyệt các chuyến đang lập kế hoạch.");
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Hủy duyệt chuyến => Trở về trạng thái Approved
        /// </summary>
        /// <param name="masterID"></param>
        public void COAppointment_2View_Master_ToOPS(int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (obj != null)
                    {
                        if (obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterTendered)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterApproved;

                            foreach (var item in model.OPS_COTOStation.Where(c => c.COTOMasterID == masterID).ToList())
                            {
                                model.OPS_COTOStation.Remove(item);
                            }
                            foreach (var item in model.CAT_Trouble.Where(c => c.COTOMasterID == masterID).ToList())
                            {
                                model.CAT_Trouble.Remove(item);
                            }
                            foreach (var item in model.OPS_COTORate.Where(c => c.COTOMasterID == masterID && c.IsSend == true).ToList())
                            {
                                item.ModifiedDate = DateTime.Now;
                                item.ModifiedBy = Account.UserName;
                                item.IsAccept = false;
                            }
                            model.OPS_COTORate.RemoveRange(model.OPS_COTORate.Where(c => c.COTOMasterID == masterID && c.IsSend == false).ToList());

                            model.SaveChanges();
                            HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetCOTOMaster);
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không thể trả về! Chỉ được trả về chuyến đã duyệt.");
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Duyệt vendor.
        /// </summary>
        /// <param name="dataMaster"></param>
        /// <param name="dataRate"></param>
        /// <param name="rTime"></param>
        /// <returns></returns>
        public List<DTOMailVendor> COAppointment_2View_Master_ToVendor(List<int> dataMaster, List<DTODIAppointmentRouteTender> dataRate, double rTime)
        {
            try
            {
                List<DTOMailVendor> result = new List<DTOMailVendor>();
                using (var model = new DataEntities())
                {
                    if (dataRate != null && dataRate.Count > 0 && dataMaster != null && dataMaster.Count > 0)
                    {
                        try
                        {
                            foreach (var item in dataMaster)
                            {
                                var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item);
                                if (objMaster != null)
                                {
                                    objMaster.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterSendTender;
                                    objMaster.ModifiedBy = Account.UserName;
                                    objMaster.ModifiedDate = DateTime.Now;
                                    objMaster.RateTime = rTime;
                                    objMaster.VendorOfVehicleID = null;
                                    objMaster.VehicleID = null;
                                    objMaster.DriverID1 = null;
                                    objMaster.DriverName1 = string.Empty;
                                    objMaster.DriverTel1 = string.Empty;

                                    var sOrder = model.OPS_COTORate.Where(c => c.COTOMasterID == item).OrderByDescending(c => c.SortOrder).Select(c => c.SortOrder).FirstOrDefault();
                                    if (sOrder == null)
                                        sOrder = 0;

                                    DateTime firstRateTime = DateTime.Now;

                                    foreach (var o in dataRate.OrderBy(c => c.SortOrder).ToList())
                                    {
                                        var obj = new OPS_COTORate();

                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;

                                        obj.COTOMasterID = item;
                                        obj.IsSend = false;
                                        obj.IsAccept = null;
                                        obj.FirstRateTime = firstRateTime;
                                        firstRateTime.AddHours(o.RateTime);
                                        obj.LastRateTime = firstRateTime;
                                        obj.SortOrder = sOrder++;
                                        obj.VendorID = o.VendorID;
                                        obj.IsManual = o.IsManual;
                                        obj.Debit = o.Debit;

                                        model.OPS_COTORate.Add(obj);
                                    }
                                    model.SaveChanges();

                                    //Gửi mail cho Vendor đầu tiên.
                                    var fRate = model.OPS_COTORate.Where(c => c.COTOMasterID == item && c.IsSend == false).OrderBy(c => c.SortOrder).FirstOrDefault();
                                    if (fRate != null)
                                    {
                                        var mail = result.FirstOrDefault(c => c.VendorID == fRate.VendorID && c.SysCustomerID == Account.SYSCustomerID);
                                        if (mail == null)
                                        {
                                            mail = new DTOMailVendor();
                                            mail.VendorID = fRate.VendorID.Value;
                                            mail.SysCustomerID = Account.SYSCustomerID;
                                            mail.ListMaster = new List<DTOMailVendorSort>();
                                            result.Add(mail);
                                        }
                                        var master = new DTOMailVendorSort();
                                        master.MasterID = fRate.COTOMasterID;
                                        master.SortOrder = fRate.SortOrder;
                                        mail.ListMaster.Add(master);
                                    }
                                }
                            }

                            foreach (var mail in result)
                            {
                                mail.ListRateID = new List<int>();
                                foreach (var item in mail.ListMaster)
                                {
                                    var rate = model.OPS_COTORate.FirstOrDefault(c => c.COTOMasterID == item.MasterID && c.SortOrder == item.SortOrder);
                                    if (rate != null)
                                        mail.ListRateID.Add(rate.ID);
                                }
                            }
                        }
                        catch (FaultException<DTOError> ex)
                        {
                            throw ex;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Gửi mail.
        /// </summary>
        /// <param name="lst"></param>
        public void COAppointment_2View_Master_ToVendor_Email(List<DTOMailVendor> data)
        {
            try
            {
                throw new Exception("Function is locked by develop");
                //using (var model = new DataEntities())
                //{
                //    model.EventAccount = Account; model.EventRunning = false;

                //    if (data != null && data.Count > 0)
                //    {
                //        foreach (var item in data)
                //        {
                //            CO_SendMail(item.ListRateID, item.VendorID, item.SysCustomerID);
                //        }
                //    }
                //}
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool COAppointment_2View_Master_CheckDriver(int vehicleID, int driverID, DateTime? etd, DateTime? eta)
        {
            try
            {
                bool result = false;
                if (etd.HasValue)
                    etd = etd.Value.Date;
                using (var model = new DataEntities())
                {
                    //var data = model.FLM_FleetPlanning.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == vehicleID && c.PlanningDate == etd).ToList();
                    //foreach (var item in data)
                    //{
                    //    if (item.DriverID1 == driverID && item.TypeOfDriverID1 == -(int)SYSVarType.TypeOfDriverMain)
                    //        result = true;
                    //    else if (item.DriverID2 == driverID && item.TypeOfDriverID2 == -(int)SYSVarType.TypeOfDriverMain)
                    //        result = true;
                    //    else if (item.DriverID3 == driverID && item.TypeOfDriverID3 == -(int)SYSVarType.TypeOfDriverMain)
                    //        result = true;
                    //}
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region ViewVendor

        /// <summary>
        /// Từ chối lệnh vận chuyển
        /// </summary>
        /// <param name="dataMaster"></param>
        /// <param name="item"></param>
        /// <returns></returns>
        public List<DTOMailVendor> COAppointment_Tender_Master_Reject(List<int> dataMaster, DTOOPSReaonReject item)
        {
            try
            {
                List<DTOMailVendor> result = new List<DTOMailVendor>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var id in dataMaster)
                    {
                        var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == id);
                        var objRate = model.OPS_COTORate.Where(c => c.COTOMasterID == id && c.IsSend && c.IsAccept == null).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objMaster != null && objRate != null)
                        {
                            objMaster.ModifiedBy = Account.UserName;
                            objMaster.ModifiedDate = DateTime.Now;
                            objMaster.VehicleID = null;
                            objMaster.VendorOfVehicleID = null;
                            objMaster.DriverID1 = null;
                            objMaster.DriverName1 = string.Empty;
                            objMaster.DriverTel1 = string.Empty;

                            objRate.IsAccept = false;
                            objRate.ModifiedBy = Account.UserName;
                            objRate.ModifiedDate = DateTime.Now;
                            objRate.ReasonID = item.ReasonID;
                            objRate.Reason = item.Reason;

                            var nextRate = model.OPS_COTORate.Where(c => c.COTOMasterID == id && !c.IsSend && c.IsAccept == null && c.SortOrder == objRate.SortOrder + 1).FirstOrDefault();
                            if (nextRate != null)
                            {
                                nextRate.ModifiedBy = Account.UserName;
                                nextRate.ModifiedDate = DateTime.Now;
                                nextRate.IsAccept = null;
                                nextRate.FirstRateTime = DateTime.Now.AddMinutes(1);
                                var time = nextRate.LastRateTime - nextRate.FirstRateTime ?? TimeSpan.FromHours(objMaster.RateTime ?? 2);
                                nextRate.LastRateTime = DateTime.Now.Add(time);

                                var mail = result.FirstOrDefault(c => c.VendorID == nextRate.VendorID && c.SysCustomerID == objMaster.SYSCustomerID);
                                if (mail == null)
                                {
                                    mail = new DTOMailVendor();
                                    mail.VendorID = nextRate.VendorID.Value;
                                    mail.SysCustomerID = objMaster.SYSCustomerID;
                                    mail.ListRateID = new List<int>();
                                    result.Add(mail);
                                }
                                mail.ListRateID.Add(nextRate.ID);
                            }
                            else
                                objMaster.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterApproved;
                        }
                    }
                    model.SaveChanges();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Chấp nhận lệnh vận chuyển
        /// </summary>
        /// <param name="data"></param>
        public void COAppointment_Tender_Master_Accept(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    try
                    {
                        foreach (var id in data)
                        {
                            var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == id);
                            var objRate = model.OPS_COTORate.Where(c => c.COTOMasterID == id && c.VendorID == objMaster.VendorOfVehicleID && c.IsSend && c.IsAccept == null).OrderBy(c => c.SortOrder).FirstOrDefault();
                            if (objMaster != null && objRate != null)
                            {
                                objMaster.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                                objMaster.ModifiedBy = Account.UserName;
                                objMaster.ModifiedDate = DateTime.Now;

                                objRate.IsAccept = true;
                                objRate.ModifiedBy = Account.UserName;
                                objRate.ModifiedDate = DateTime.Now;

                                // Cập nhật thời gian
                                var obj = model.OPS_COTOLocation.FirstOrDefault(c => c.COTOMasterID == id && c.SortOrder == 2);
                                if (obj != null)
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                    obj.DateLeave = objMaster.ETD;
                                }

                                model.SaveChanges();
                            }
                        }
                    }
                    catch (FaultException<DTOError> ex)
                    {
                        throw ex;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #endregion

        #endregion

        #region Tendering

        public DTOResult OPS_Tendering_Vendor_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var iVendor = -(int)SYSVarType.TypeOfCustomerVEN;
                    var iBoth = -(int)SYSVarType.TypeOfCustomerBOTH;
                    var query = model.CUS_Customer.Where(c => c.IsSystem == false && (c.TypeOfCustomerID == iVendor || c.TypeOfCustomerID == iBoth) && c.ID != Account.SYSCustomerID).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    result.Data = query as IEnumerable<CUSCustomer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region COTendering

        public DTOResult OPS_CO_Tendering_Setting_Service_List(string request, List<int> dataExist)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ServiceOfOrder.Where(c => !dataExist.Contains(c.ID)).Select(c => new CUSSettingsTenderFCL_Service
                    {
                        ServiceOfOrderID = c.ID,
                        ServiceOfOrderCode = c.Code,
                        ServiceOfOrderName = c.Name
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CUSSettingsTenderFCL_Service>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_CO_Tendering_Setting_Routing_List(string request, List<int> dataExist)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Routing.Where(c => !dataExist.Contains(c.ID) && c.IsUse).Select(c => new CUSSettingsTenderFCL_Routing
                    {
                        RoutingID = c.ID,
                        RoutingCode = c.Code,
                        RoutingName = c.RoutingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CUSSettingsTenderFCL_Routing>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_CO_Tendering_Setting_Customer_List(string request, List<int> dataExist)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && !dataExist.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new CUSSettingsTenderFCL_Customer
                    {
                        CustomerID = c.ID,
                        CustomerCode = c.Code,
                        CustomerName = c.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CUSSettingsTenderFCL_Customer>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_CO_Tendering_Setting_Vendor_List(string request, List<int> dataExist)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && !dataExist.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new CUSSettingsTenderFCL_Vendor
                    {
                        VendorID = c.ID,
                        VendorCode = c.Code,
                        VendorName = c.CustomerName,
                        RateTime = 0,
                        RateTimeConfirm = 0
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CUSSettingsTenderFCL_Vendor>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Tendering_Setting_FCL_Packet_Save(int fID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.Key == SYSUserSettingKey.TenderFCL.ToString() && c.ReferID == fID);
                    if (obj == null)
                    {
                        obj = new SYS_UserSetting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.SYS_UserSetting.Add(obj);
                        obj.Key = SYSUserSettingKey.TenderFCL.ToString();
                        obj.UserID = Account.UserID.Value;
                        obj.ReferID = fID;
                        obj.ReferKey = string.Empty;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CUSSettingsTenderFCL> OPS_CO_Tendering_Setting_FCL_List(int fID)
        {
            try
            {
                var result = new List<CUSSettingsTenderFCL>();
                using (var model = new DataEntities())
                {
                    result = HelperCUSSetting.CUSSettingsTenderFCL_GetList(model, Account, fID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public CUSSettingsTenderFCL OPS_CO_Tendering_Setting_FCL_Get(int sID)
        {
            try
            {
                var result = new CUSSettingsTenderFCL();
                using (var model = new DataEntities())
                {
                    result = HelperCUSSetting.CUSSettingsTenderFCL_Get(model, Account, sID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Tendering_Setting_FCL_Save(CUSSettingsTenderFCL item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperCUSSetting.CUSSettingsTenderFCL_Save(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Tendering_Setting_FCL_Delete(int sID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperCUSSetting.CUSSettingsTenderFCL_Delete(model, Account, sID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region DITendering

        public DTOResult OPS_DI_Tendering_Packet_List(string request)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIPacket.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOOPSDIPacket
                    {
                        ID = c.ID,
                        SYSCustomerID = c.SYSCustomerID,
                        PacketName = c.PacketName,
                        Note = c.Note,
                        TonOrder = c.TonOrder,
                        CBMOrder = c.CBMOrder,
                        QuantityOrder = c.QuantityOrder,
                        DIPacketStatusID = c.DIPacketStatusID,
                        DIPacketStatusName = c.SYS_Var.ValueOfVar,
                        IsSend = c.DIPacketStatusID >= -(int)SYSVarType.DIPacketStatusSended
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDIPacket>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_PacketGroupProduct_List(string request, int packetID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIPacketGroupProduct.Where(c => c.DIPacketID == packetID).Select(c => new DTOOPSDIPacketGroupProduct
                    {
                        ID = c.ID,
                        DITOGroupProductID = c.DITOGroupProductID,
                        GroupProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        GroupProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                        CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                        ETD = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETD,
                        ETA = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETA,
                        ETDStart = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETDStart,
                        ETAStart = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETAStart,
                        Ton = c.OPS_DITOGroupProduct.Ton,
                        CBM = c.OPS_DITOGroupProduct.CBM,
                        Quantity = c.OPS_DITOGroupProduct.Quantity,
                        DNCode = c.OPS_DITOGroupProduct.DNCode,
                        Note = c.OPS_DITOGroupProduct.Note,
                        Note1 = c.OPS_DITOGroupProduct.Note1,
                        Note2 = c.OPS_DITOGroupProduct.Note2,
                        InvoiceNote = c.OPS_DITOGroupProduct.InvoiceNote,
                        PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Partner.PartnerCode,
                        PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Partner.CAT_Partner.PartnerName,
                        LocationFromName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName,
                        LocationFromAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                        LocationFromDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,
                        LocationFromProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                        LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName,
                        LocationToAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                        LocationToDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                        LocationToProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_PacketGroupProduct_NotIn_List(string request, int packetID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var dataExist = model.OPS_DIPacketGroupProduct.Where(c => c.DIPacketID == packetID).Select(c => c.DITOGroupProductID).ToList();
                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.IsInput == true
                        && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL && !dataExist.Contains(c.ID)).Select(c => new DTOOPSDIPacketGroupProduct
                        {
                            ID = c.ID,
                            GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                            ETD = c.ORD_GroupProduct.ETD,
                            ETA = c.ORD_GroupProduct.ETA,
                            ETDStart = c.ORD_GroupProduct.ETDStart,
                            ETAStart = c.ORD_GroupProduct.ETAStart,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            DNCode = c.DNCode,
                            Note = c.Note,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            InvoiceNote = c.InvoiceNote,
                            PartnerCode = c.ORD_GroupProduct.ORD_Order.CUS_Partner.PartnerCode,
                            PartnerName = c.ORD_GroupProduct.ORD_Order.CUS_Partner.CAT_Partner.PartnerName,
                            LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            LocationFromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,
                            LocationFromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                            LocationToName = c.ORD_GroupProduct.CUS_Location1.LocationName,
                            LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                            LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_PacketRate_List(string request, int packetID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIPacketRate.Where(c => c.DIPacketID == packetID).OrderBy(c => c.SortOrder).Select(c => new DTOOPSDIPacketRate
                    {
                        ID = c.ID,
                        VendorID = c.VendorID,
                        VendorName = c.VendorID > 0 ? c.CUS_Customer.CustomerName : "Xe nhà",
                        SortOrder = c.SortOrder,
                        IsAccept = c.IsAccept,
                        IsManual = c.IsManual,
                        IsSend = c.IsSend,
                        Debit = c.Debit,
                        RateTime = c.RateTime,
                        RateTimeConfirm = c.RateTimeConfirm,
                        TonOrder = c.TonOrder,
                        TonPlan = c.TonPlan,
                        CBMOrder = c.CBMOrder,
                        CBMPlan = c.CBMPlan,
                        QuantityOrder = c.QuantityOrder,
                        QuantityPlan = c.QuantityPlan
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_PacketDetail_List(string request, int packetID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIPacketDetail.Where(c => c.DIPacketID == packetID).Select(c => new DTOOPSDIPacketDetail
                    {
                        ID = c.ID,
                        VendorID = c.VendorID,
                        VendorName = c.VendorID > 0 ? c.CUS_Customer.ShortName : string.Empty,
                        DetailName = c.DetailName,
                        DIPacketID = c.DIPacketID,
                        PacketName = c.OPS_DIPacket.PacketName,
                        Note = c.Note,
                        TonOrder = c.TonOrder,
                        CBMOrder = c.CBMOrder,
                        QuantityOrder = c.QuantityOrder,
                        TonAccept = c.TonAccept,
                        CBMAccept = c.CBMAccept,
                        QuantityAccept = c.QuantityAccept,
                        TonRemain = c.VendorID > 0 ? c.TonOrder - c.TonAccept : 0,
                        CBMRemain = c.VendorID > 0 ? c.CBMOrder - c.CBMAccept : 0,
                        QuantityRemain = c.VendorID > 0 ? c.QuantityOrder - c.QuantityAccept : 0
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDIPacketDetail>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_Setting_Location_List(string request, List<int> dataExist)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => !dataExist.Contains(c.ID)).Select(c => new CUSSettingsTenderLTL_Location
                    {
                        LocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.Location,
                        LocationAddress = c.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CUSSettingsTenderLTL_Location>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_Setting_Routing_List(string request, List<int> dataExist)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Routing.Where(c => !dataExist.Contains(c.ID) && c.IsUse).Select(c => new CUSSettingsTenderLTL_Routing
                    {
                        RoutingID = c.ID,
                        RoutingCode = c.Code,
                        RoutingName = c.RoutingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CUSSettingsTenderLTL_Routing>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_Setting_GroupLocation_List(string request, List<int> dataExist)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfLocation.Where(c => !dataExist.Contains(c.ID)).Select(c => new CUSSettingsTenderLTL_GroupLocation
                    {
                        GroupLocationID = c.ID,
                        GroupLocationCode = c.Code,
                        GroupLocationName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CUSSettingsTenderLTL_GroupLocation>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_Setting_Customer_List(string request, List<int> dataExist)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && !dataExist.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new CUSSettingsTenderLTL_Customer
                    {
                        CustomerID = c.ID,
                        CustomerCode = c.Code,
                        CustomerName = c.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CUSSettingsTenderLTL_Customer>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_Setting_Vendor_List(string request, List<int> dataExist)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && !dataExist.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new CUSSettingsTenderLTL_Vendor
                    {
                        VendorID = c.ID,
                        VendorCode = c.Code,
                        VendorName = c.CustomerName,
                        RateTime = 0,
                        RateTimeConfirm = 0
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CUSSettingsTenderLTL_Vendor>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Tendering_Setting_Packet_Order_List(string request, int sID)
        {

            try
            {
                var result = new DTOResult();
                if (Account.ListCustomerID != null && sID > 0)
                {
                    using (var model = new DataEntities())
                    {
                        var obj = HelperCUSSetting.CUSSettingsTenderLTL_Get(model, Account, sID);
                        var data = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL
                            && c.ORD_GroupProduct.CUSRoutingID > 0 && c.OrderGroupProductID > 0 && Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)
                            && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new
                            {
                                c.ID,
                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,
                                CUSRoutingID = c.ORD_GroupProduct.CUS_Routing.RoutingID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                GroupLocationID = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.GroupOfLocationID : -1
                            }).ToList();
                        List<int> dataGop = new List<int>();
                        foreach (var item in data)
                        {
                            if (item.LocationToID > 0 && obj.ListLocation.Select(c => c.LocationID).ToList().Contains(item.LocationToID))
                            {
                                dataGop.Add(item.ID);
                            }
                            else if (item.CUSRoutingID > 0 && obj.ListRouting.Select(c => c.RoutingID).Contains(item.CUSRoutingID))
                            {
                                dataGop.Add(item.ID);
                            }
                            else if (item.GroupLocationID > 0 && obj.ListGroupLocation.Select(c => c.GroupLocationID).Contains(item.GroupLocationID.Value))
                            {
                                dataGop.Add(item.ID);
                            }
                            else if (obj.ListCustomer.Select(c => c.CustomerID).Contains(item.CustomerID))
                            {
                                dataGop.Add(item.ID);
                            }
                        }

                        var query = model.OPS_DITOGroupProduct.Where(c => dataGop.Contains(c.ID)).Select(c => new DTOOPSDIPacketGroupProduct
                        {
                            ID = c.ID,
                            GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                            ETD = c.ORD_GroupProduct.ETD,
                            ETA = c.ORD_GroupProduct.ETA,
                            ETDStart = c.ORD_GroupProduct.ETDStart,
                            ETAStart = c.ORD_GroupProduct.ETAStart,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            DNCode = c.DNCode,
                            Note = c.Note,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            InvoiceNote = c.InvoiceNote,
                            PartnerCode = c.ORD_GroupProduct.ORD_Order.CUS_Partner.PartnerCode,
                            PartnerName = c.ORD_GroupProduct.ORD_Order.CUS_Partner.CAT_Partner.PartnerName,
                            LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            LocationFromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,
                            LocationFromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                            LocationToName = c.ORD_GroupProduct.CUS_Location1.LocationName,
                            LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                            LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Data = query.Data;
                        result.Total = query.Total;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDIPacket OPS_DI_Tendering_Packet_Get(int packetID)
        {
            try
            {
                DTOOPSDIPacket result = new DTOOPSDIPacket();
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DIPacket.FirstOrDefault(c => c.ID == packetID);
                    if (obj != null)
                    {
                        result.ID = obj.ID;
                        result.PacketName = obj.PacketName;
                        result.IsSend = obj.DIPacketStatusID >= -(int)SYSVarType.DIPacketStatusSended;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CUSSettingsTenderLTL> OPS_DI_Tendering_Setting_List(int fID)
        {
            try
            {
                var result = new List<CUSSettingsTenderLTL>();
                using (var model = new DataEntities())
                {
                    result = HelperCUSSetting.CUSSettingsTenderLTL_GetList(model, Account, fID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public CUSSettingsTenderLTL OPS_DI_Tendering_Setting_Get(int sID)
        {
            try
            {
                var result = new CUSSettingsTenderLTL();
                using (var model = new DataEntities())
                {
                    result = HelperCUSSetting.CUSSettingsTenderLTL_Get(model, Account, sID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CUSSettingsTenderLTL> OPS_DI_Tendering_Setting_Packet_List(int fID)
        {
            try
            {
                var result = new List<CUSSettingsTenderLTL>();
                using (var model = new DataEntities())
                {
                    var obj = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.Key == SYSUserSettingKey.TenderLTL.ToString() && c.ReferID == fID);
                    if (obj != null && !string.IsNullOrEmpty(obj.Setting))
                    {
                        var data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(obj.Setting);
                        foreach (var id in data)
                        {
                            var item = HelperCUSSetting.CUSSettingsTenderLTL_Get(model, Account, id);
                            if (item != null && item.ID > 0)
                            {
                                result.Add(item);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_Packet_Save(DTOOPSDIPacket item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.OPS_DIPacket.Count(c => c.ID != item.ID && c.PacketName.ToLower().Trim() == item.PacketName.ToLower().Trim()) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Trùng tên.");
                    var obj = model.OPS_DIPacket.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new OPS_DIPacket();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.OPS_DIPacket.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.PacketName = item.PacketName;
                    obj.Note = item.Note;
                    obj.TonOrder = item.TonOrder;
                    obj.CBMOrder = item.CBMOrder;
                    obj.QuantityOrder = item.QuantityOrder;
                    obj.DIPacketStatusID = -(int)SYSVarType.DIPacketStatusWaiting;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_PacketGroupProduct_Save(int packetID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIPacket.FirstOrDefault(c => c.ID == packetID);
                    if (obj != null)
                    {
                        foreach (var item in data)
                        {
                            var objops = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.IsInput && c.ID == item);
                            if (objops != null)
                            {
                                objops.IsInput = false;
                                objops.ModifiedBy = Account.UserName;
                                objops.ModifiedDate = DateTime.Now;
                                OPS_DIPacketGroupProduct objGop = new OPS_DIPacketGroupProduct();
                                objGop.CreatedBy = Account.UserName;
                                objGop.CreatedDate = DateTime.Now;
                                objGop.DIPacketID = packetID;
                                objGop.DITOGroupProductID = item;
                                model.OPS_DIPacketGroupProduct.Add(objGop);
                            }
                            else
                            {
                                throw FaultHelper.BusinessFault(null, null, "Chi tiết đơn hàng không tồn tại hoặc không khả dụng!");
                            }
                        }
                        model.SaveChanges();
                        OPS_DI_Tendering_Packet_ReSum(model, packetID);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_PacketGroupProduct_Remove(int packetID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIPacket.FirstOrDefault(c => c.ID == packetID);
                    if (obj != null)
                    {
                        foreach (var item in data)
                        {
                            var objGop = model.OPS_DIPacketGroupProduct.FirstOrDefault(c => c.ID == item && c.DIPacketID == packetID);
                            if (objGop != null)
                            {
                                objGop.OPS_DITOGroupProduct.IsInput = true;
                                objGop.OPS_DITOGroupProduct.ModifiedBy = Account.UserName;
                                objGop.OPS_DITOGroupProduct.ModifiedDate = DateTime.Now;
                                model.OPS_DIPacketGroupProduct.Remove(objGop);
                            }
                        }
                        model.SaveChanges();
                        OPS_DI_Tendering_Packet_ReSum(model, packetID);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_PacketRate_Save(int packetID, DTOOPSDIPacketRate item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIPacket.FirstOrDefault(c => c.ID == packetID);
                    if (obj != null)
                    {
                        var objCheck = model.OPS_DIPacketRate.FirstOrDefault(c => c.ID != item.ID && c.VendorID == item.VendorID && c.DIPacketID == packetID);
                        if (objCheck != null)
                            throw FaultHelper.BusinessFault(null, null, "Trùng vendor.");

                        var objRate = model.OPS_DIPacketRate.FirstOrDefault(c => c.ID == item.ID);
                        if (objRate == null)
                        {
                            objRate = new OPS_DIPacketRate();
                            objRate.CreatedBy = Account.UserName;
                            objRate.CreatedDate = DateTime.Now;
                            objRate.DIPacketID = packetID;
                            var sortOrder = model.OPS_DIPacketRate.Where(c => c.DIPacketID == packetID).OrderByDescending(c => c.SortOrder).Select(c => c.SortOrder).FirstOrDefault();
                            if (sortOrder == null)
                                sortOrder = 0;
                            objRate.SortOrder = sortOrder + 1;
                            model.OPS_DIPacketRate.Add(objRate);
                        }
                        else
                        {
                            objRate.ModifiedBy = Account.UserName;
                            objRate.ModifiedDate = DateTime.Now;
                        }
                        objRate.VendorID = item.VendorID;
                        objRate.Debit = item.Debit;
                        objRate.RateTime = item.RateTime ?? 2;
                        objRate.RateTimeConfirm = item.RateTimeConfirm ?? 2;

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_PacketRate_Remove(int packetID, DTOOPSDIPacketRate item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIPacket.FirstOrDefault(c => c.ID == packetID);
                    if (obj != null)
                    {
                        var objRate = model.OPS_DIPacketRate.FirstOrDefault(c => c.ID == item.ID);
                        if (objRate != null)
                        {
                            if (objRate.IsSend)
                                throw FaultHelper.BusinessFault(null, null, "Đã gửi vendor. Không thể xóa!");
                            model.OPS_DIPacketRate.Remove(objRate);
                            model.SaveChanges();
                            OPS_DI_Tendering_PacketRate_ReOrder(model, packetID);
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_Packet_Send(int packetID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIPacket.FirstOrDefault(c => c.ID == packetID);
                    if (obj != null)
                    {
                        if (obj.OPS_DIPacketGroupProduct.Count == 0)
                            throw FaultHelper.BusinessFault(null, null, "Không có thông tin nhóm sản phẩm.");
                        if (obj.OPS_DIPacketRate.Count == 0)
                            throw FaultHelper.BusinessFault(null, null, "Không có thông tin nhà xe.");

                        //Tạo DIPacketDetail
                        OPS_DIPacketDetail objDetail = new OPS_DIPacketDetail();
                        objDetail.CreatedBy = Account.UserName;
                        objDetail.CreatedDate = DateTime.Now;
                        objDetail.DIPacketID = packetID;
                        objDetail.DetailName = obj.PacketName;
                        objDetail.Note = obj.Note;
                        objDetail.TonOrder = obj.TonOrder;
                        objDetail.CBMOrder = obj.CBMOrder;
                        objDetail.QuantityOrder = obj.QuantityOrder;
                        objDetail.DIPacketDetailStatusID = -(int)SYSVarType.DIPacketDetailStatusWaiting;
                        model.OPS_DIPacketDetail.Add(objDetail);

                        //Cập nhật trạng thái DIPacket
                        obj.ModifiedDate = DateTime.Now;
                        obj.ModifiedBy = Account.UserName;
                        obj.DIPacketStatusID = -(int)SYSVarType.DIPacketStatusSended;
                        model.SaveChanges();

                        //Tạo DetailRate
                        var dataRate = model.OPS_DIPacketRate.Where(c => c.DIPacketID == packetID).OrderBy(c => c.SortOrder).ToList();
                        var thisTime = DateTime.Now.AddMinutes(1);
                        foreach (var item in dataRate)
                        {
                            var objRate = new OPS_DIPacketDetailRate();
                            objRate.CreatedBy = Account.UserName;
                            objRate.CreatedDate = DateTime.Now;
                            objRate.DIPacketDetailID = objDetail.ID;
                            objRate.VendorID = item.VendorID;
                            objRate.SortOrder = item.SortOrder;
                            objRate.Debit = item.Debit;
                            objRate.FirstRateTime = thisTime;
                            objRate.LastRateTime = objRate.FirstRateTime.Value.Add(TimeSpan.FromHours(item.RateTime ?? 2));
                            thisTime = objRate.LastRateTime.Value;
                            model.OPS_DIPacketDetailRate.Add(objRate);
                        }
                        model.SaveChanges();

                        //Cập nhật IsSend cho rate đầu tiên
                        var objFirst = model.OPS_DIPacketDetailRate.Where(c => c.DIPacketDetailID == objDetail.ID).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objFirst != null)
                            objFirst.IsSend = true;
                        model.SaveChanges();

                        //Cập nhật PacketDetailID cho nhóm sản phẩm
                        var dataGop = model.OPS_DIPacketGroupProduct.Where(c => c.DIPacketID == packetID).ToList();
                        foreach (var item in dataGop)
                        {
                            item.ModifiedBy = Account.UserName;
                            item.ModifiedDate = DateTime.Now;
                            item.DIPacketDetailID = objDetail.ID;
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_Packet_Delete(int packetID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIPacket.FirstOrDefault(c => c.ID == packetID);
                    if (obj != null)
                    {
                        if (obj.DIPacketStatusID >= -(int)SYSVarType.DIPacketStatusSended)
                            throw FaultHelper.BusinessFault(null, null, "Không thể xóa!");

                        foreach (var item in model.OPS_DIPacketGroupProduct.Where(c => c.DIPacketID == packetID).ToList())
                        {
                            item.OPS_DITOGroupProduct.IsInput = true;
                            item.OPS_DITOGroupProduct.ModifiedBy = Account.UserName;
                            item.OPS_DITOGroupProduct.ModifiedDate = DateTime.Now;
                            model.OPS_DIPacketGroupProduct.Remove(item);
                        }
                        foreach (var item in model.OPS_DIPacketDetail.Where(c => c.DIPacketID == packetID).ToList())
                        {
                            foreach (var o in model.OPS_DIPacketDetailRate.Where(c => c.DIPacketDetailID == item.ID).ToList())
                            {
                                model.OPS_DIPacketDetailRate.Remove(o);
                            }
                            model.OPS_DIPacketDetail.Remove(item);
                        }
                        foreach (var item in model.OPS_DIPacketRate.Where(c => c.DIPacketID == packetID).ToList())
                        {
                            model.OPS_DIPacketRate.Remove(item);
                        }
                        model.OPS_DIPacket.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_Setting_Save(CUSSettingsTenderLTL item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperCUSSetting.CUSSettingsTenderLTL_Save(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_Setting_Delete(int sID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperCUSSetting.CUSSettingsTenderLTL_Delete(model, Account, sID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_Setting_Packet_Save(int fID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.Key == SYSUserSettingKey.TenderLTL.ToString() && c.ReferID == fID);
                    if (obj == null)
                    {
                        obj = new SYS_UserSetting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.SYS_UserSetting.Add(obj);
                        obj.Key = SYSUserSettingKey.TenderLTL.ToString();
                        obj.UserID = Account.UserID.Value;
                        obj.ReferID = fID;
                        obj.ReferKey = string.Empty;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Tendering_Packet_CreateViaSetting(int sID, string name, List<int> dataGop)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = HelperCUSSetting.CUSSettingsTenderLTL_Get(model, Account, sID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thiết lập.");
                    if (obj.ListVendor == null || obj.ListVendor.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Chưa thiết lập đối tác.");
                    if (dataGop.Count > 0)
                    {
                        var objP = new OPS_DIPacket();
                        objP.CreatedBy = Account.UserName;
                        objP.CreatedDate = DateTime.Now;
                        objP.SYSCustomerID = Account.SYSCustomerID;
                        objP.PacketName = obj.Name + "_" + DateTime.Now.ToString("ddMMyyyyhhmmss");
                        objP.Note = string.Empty;
                        objP.DIPacketStatusID = -(int)SYSVarType.DIPacketStatusWaiting;
                        model.OPS_DIPacket.Add(objP);

                        model.SaveChanges();
                        foreach (var item in dataGop)
                        {
                            var objops = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item && c.IsInput);
                            if (objops != null)
                            {
                                objops.IsInput = false;
                                objops.ModifiedBy = Account.UserName;
                                objops.ModifiedDate = DateTime.Now;
                                OPS_DIPacketGroupProduct objProduct = new OPS_DIPacketGroupProduct();
                                objProduct.CreatedBy = Account.UserName;
                                objProduct.CreatedDate = DateTime.Now;
                                objProduct.DIPacketID = objP.ID;
                                objProduct.DITOGroupProductID = item;
                                model.OPS_DIPacketGroupProduct.Add(objProduct);
                            }
                        }
                        int idx = 1;
                        foreach (var item in obj.ListVendor.OrderBy(c => c.SortOrder).ToList())
                        {
                            OPS_DIPacketRate objRate = new OPS_DIPacketRate();
                            objRate.CreatedBy = Account.UserName;
                            objRate.CreatedDate = DateTime.Now;
                            objRate.DIPacketID = objP.ID;
                            objRate.SortOrder = idx++;
                            objRate.VendorID = item.VendorID;
                            objRate.RateTime = item.RateTime > 0 ? item.RateTime : 2;
                            objRate.RateTimeConfirm = item.RateTimeConfirm > 0 ? item.RateTimeConfirm : 2;
                            model.OPS_DIPacketRate.Add(objRate);
                        }
                        model.SaveChanges();

                        OPS_DI_Tendering_Packet_ReSum(model, objP.ID);
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm sản phẩm phù hợp.");
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void OPS_DI_Tendering_PacketRate_ReOrder(DataEntities model, int packetID)
        {
            var dataRate = model.OPS_DIPacketRate.Where(c => c.DIPacketID == packetID).OrderBy(c => c.SortOrder).ToList();
            int idx = 1;
            foreach (var item in dataRate)
            {
                item.ModifiedDate = DateTime.Now;
                item.ModifiedBy = Account.UserName;
                item.SortOrder = idx;
                idx++;
            }
            model.SaveChanges();
        }

        private void OPS_DI_Tendering_Packet_ReSum(DataEntities model, int packetID)
        {
            var objPacket = model.OPS_DIPacket.FirstOrDefault(c => c.ID == packetID);
            if (objPacket != null)
            {
                var dataGop = model.OPS_DIPacketGroupProduct.Where(c => c.DIPacketID == packetID).Select(c => new
                {
                    c.ID,
                    c.DITOGroupProductID,
                    c.OPS_DITOGroupProduct.Ton,
                    c.OPS_DITOGroupProduct.CBM,
                    c.OPS_DITOGroupProduct.Quantity
                }).ToList();
                objPacket.TonOrder = dataGop.Sum(c => c.Ton);
                objPacket.CBMOrder = dataGop.Sum(c => c.CBM);
                objPacket.QuantityOrder = dataGop.Sum(c => c.Quantity);
                objPacket.ModifiedBy = Account.UserName;
                objPacket.ModifiedDate = DateTime.Now;
                model.SaveChanges();
            }
        }

        #region VendorView

        public DTOResult OPS_DI_VEN_Tendering_Rate_List(string request, bool? isAccept)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    DataSourceRequest objRequest = CreateRequest(request);
                    FilterDescriptor objF = new FilterDescriptor();
                    objF.Member = "TypeID";
                    objF.Operator = FilterOperator.IsEqualTo;
                    objF.Value = !isAccept.HasValue ? 3 : isAccept == true ? 1 : 2;
                    objRequest.Filters.Add(objF);

                    var query = model.OPS_DIPacketDetailRate.Where(c => c.VendorID > 0 && Account.ListCustomerID.Contains(c.VendorID.Value)
                        && c.IsSend == true && c.OPS_DIPacketDetail.OPS_DIPacket.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOOPSDIPacketDetailRate
                    {
                        ID = c.ID,
                        VendorID = c.VendorID,
                        VendorName = c.VendorID > 0 ? c.CUS_Customer.CustomerName : string.Empty,
                        DIPacketDetailID = c.DIPacketDetailID,
                        DetailName = c.OPS_DIPacketDetail.DetailName,
                        SortOrder = c.SortOrder,
                        IsAccept = c.IsAccept,
                        Debit = c.Debit,
                        ReasonID = c.ReasonID,
                        ReasonName = c.ReasonID > 0 ? c.CAT_Reason.ReasonName : string.Empty,
                        Reason = c.Reason,
                        IsConfirm = c.IsAccept == true && c.OPS_DIPacketDetail.DIPacketDetailStatusID == -(int)SYSVarType.DIPacketDetailStatusComplete,
                        FirstRateTime = c.FirstRateTime,
                        LastRateTime = c.LastRateTime,
                        LastRateTimeConfirm = c.LastRateTimeConfirm,
                        TonAccept = c.IsAccept == true ? c.TonAccept : c.OPS_DIPacketDetail.TonOrder,
                        TonConfirm = c.TonConfirm,
                        CBMAccept = c.IsAccept == true ? c.CBMAccept : c.OPS_DIPacketDetail.CBMOrder,
                        CBMConfirm = c.CBMConfirm,
                        QuantityAccept = c.IsAccept == true ? c.QuantityAccept : c.OPS_DIPacketDetail.QuantityOrder,
                        QuantityConfirm = c.QuantityConfirm,
                        TypeID = c.IsAccept == true ? 1 : c.IsAccept == false ? 2 : c.FirstRateTime <= DateTime.Now && c.LastRateTime >= DateTime.Now ? 3 : -1
                    }).ToDataSourceResult(objRequest);
                    result.Data = query.Data as IEnumerable<DTOOPSDIPacketDetailRate>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_VEN_Tendering_GroupProduct_List(string request, int packetDetailID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIPacketGroupProduct.Where(c => c.DIPacketDetailID == packetDetailID).Select(c => new DTOOPSDIPacketGroupProduct
                        {
                            ID = c.ID,
                            DITOGroupProductID = c.DITOGroupProductID,
                            GroupProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                            ETD = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETD,
                            ETA = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETA,
                            ETDStart = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETDStart,
                            ETAStart = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETAStart,
                            Ton = c.OPS_DITOGroupProduct.Ton,
                            CBM = c.OPS_DITOGroupProduct.CBM,
                            Quantity = c.OPS_DITOGroupProduct.Quantity,
                            DNCode = c.OPS_DITOGroupProduct.DNCode,
                            Note = c.OPS_DITOGroupProduct.Note,
                            Note1 = c.OPS_DITOGroupProduct.Note1,
                            Note2 = c.OPS_DITOGroupProduct.Note2,
                            InvoiceNote = c.OPS_DITOGroupProduct.InvoiceNote,
                            PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Partner.PartnerCode,
                            PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Partner.CAT_Partner.PartnerName,
                            LocationFromName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName,
                            LocationFromAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            LocationFromDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,
                            LocationFromProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                            LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName,
                            LocationToAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            LocationToDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                            LocationToProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDIPacketGroupProduct>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_VEN_Tendering_Rate_Reject(DTOOPSDIPacketDetailRate item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DIPacketDetailRate.FirstOrDefault(c => c.ID == item.ID && c.IsSend && c.VendorID > 0 && Account.ListCustomerID.Contains(c.VendorID.Value));
                    if (obj != null)
                    {
                        if (obj.FirstRateTime > DateTime.Now || obj.LastRateTime < DateTime.Now)
                            throw FaultHelper.BusinessFault(null, null, "Chưa đến hoặc hết hạn duyệt!");
                        if (obj.IsAccept.HasValue)
                            throw FaultHelper.BusinessFault(null, null, "Không thể duyệt lại!");

                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.IsAccept = false;
                        obj.ReasonID = item.ReasonID;
                        obj.Reason = item.Reason;
                        model.SaveChanges();

                        //Next Rate
                        var dataNext = model.OPS_DIPacketDetailRate.Where(c => c.DIPacketDetailID == obj.DIPacketDetailID && c.IsSend == false && c.SortOrder > obj.SortOrder).OrderBy(c => c.SortOrder).ToList();
                        var flag = true;
                        var thisTime = DateTime.Now.AddMinutes(1);
                        foreach (var objNext in dataNext)
                        {
                            if (flag)
                            {
                                flag = false;
                                objNext.IsSend = true;
                            }
                            var time = objNext.LastRateTime.Value - objNext.FirstRateTime.Value;
                            objNext.FirstRateTime = thisTime;
                            objNext.LastRateTime = objNext.FirstRateTime.Value.Add(time);
                            thisTime = objNext.LastRateTime.Value;
                            objNext.IsAccept = null;
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_VEN_Tendering_Rate_Accept(DTOOPSDIPacketDetailRate item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DIPacketDetailRate.FirstOrDefault(c => c.ID == item.ID && c.IsSend && c.VendorID > 0 && Account.ListCustomerID.Contains(c.VendorID.Value));
                    if (obj != null)
                    {
                        var objDetail = model.OPS_DIPacketDetail.FirstOrDefault(c => c.ID == obj.DIPacketDetailID);
                        if (objDetail != null)
                        {
                            if (obj.FirstRateTime > DateTime.Now || obj.LastRateTime < DateTime.Now)
                                throw FaultHelper.BusinessFault(null, null, "Chưa đến hoặc hết hạn duyệt!");
                            if (obj.IsAccept.HasValue)
                                throw FaultHelper.BusinessFault(null, null, "Không thể duyệt lại!");
                            var data = model.OPS_DIPacketGroupProduct.Where(c => c.DIPacketDetailID == obj.DIPacketDetailID).Select(c => new
                            {
                                c.ID,
                                c.OPS_DITOGroupProduct.Ton,
                                c.OPS_DITOGroupProduct.CBM,
                                c.OPS_DITOGroupProduct.Quantity
                            }).ToList();

                            var objR = model.OPS_DIPacketRate.FirstOrDefault(c => c.VendorID == obj.VendorID && c.DIPacketID == objDetail.DIPacketID);
                            if (objR != null)
                                obj.LastRateTimeConfirm = DateTime.Now.Add(TimeSpan.FromHours(objR.RateTimeConfirm ?? 2));
                            else
                                obj.LastRateTimeConfirm = DateTime.Now.Add(TimeSpan.FromHours(2));
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.TonAccept = data.Sum(c => c.Ton);
                            obj.CBMAccept = data.Sum(c => c.CBM);
                            obj.QuantityAccept = data.Sum(c => c.Quantity);
                            obj.IsAccept = true;
                            model.SaveChanges();

                            objDetail.ModifiedBy = Account.UserName;
                            objDetail.ModifiedDate = DateTime.Now;
                            objDetail.VendorID = obj.VendorID;
                            objDetail.TonAccept = obj.TonAccept;
                            objDetail.CBMAccept = obj.CBMAccept;
                            objDetail.QuantityAccept = obj.QuantityAccept;
                            objDetail.DIPacketDetailStatusID = -(int)SYSVarType.DIPacketDetailStatusSended;

                            OPS_DI_VEN_Tendering_Product_Create(model, obj.DIPacketDetailID, data.Select(c => c.ID).ToList());
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_VEN_Tendering_Rate_AcceptPart(int packetDetailRateID, List<int> dataGop)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DIPacketDetailRate.FirstOrDefault(c => c.ID == packetDetailRateID && c.IsSend && c.VendorID > 0 && Account.ListCustomerID.Contains(c.VendorID.Value));
                    if (obj != null)
                    {
                        if (obj.FirstRateTime > DateTime.Now || obj.LastRateTime < DateTime.Now)
                            throw FaultHelper.BusinessFault(null, null, "Chưa đến hoặc hết hạn duyệt!");
                        if (obj.IsAccept.HasValue)
                            throw FaultHelper.BusinessFault(null, null, "Không thể duyệt lại!");
                        if (dataGop.Count == 0)
                            throw FaultHelper.BusinessFault(null, null, "Chọn nhóm hàng hóa!");

                        var data = model.OPS_DIPacketGroupProduct.Where(c => c.DIPacketDetailID == obj.DIPacketDetailID && dataGop.Contains(c.ID)).Select(c => new
                        {
                            c.ID,
                            c.OPS_DITOGroupProduct.Ton,
                            c.OPS_DITOGroupProduct.CBM,
                            c.OPS_DITOGroupProduct.Quantity
                        }).ToList();

                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.TonAccept = data.Sum(c => c.Ton);
                        obj.CBMAccept = data.Sum(c => c.CBM);
                        obj.QuantityAccept = data.Sum(c => c.Quantity);
                        obj.IsAccept = true;
                        model.SaveChanges();

                        var objDetail = model.OPS_DIPacketDetail.FirstOrDefault(c => c.ID == obj.DIPacketDetailID);
                        if (objDetail != null)
                        {
                            objDetail.ModifiedBy = Account.UserName;
                            objDetail.ModifiedDate = DateTime.Now;
                            objDetail.VendorID = obj.VendorID;
                            objDetail.TonAccept = obj.TonAccept;
                            objDetail.CBMAccept = obj.CBMAccept;
                            objDetail.QuantityAccept = obj.QuantityAccept;
                            objDetail.DIPacketDetailStatusID = -(int)SYSVarType.DIPacketDetailStatusSended;

                            OPS_DI_VEN_Tendering_Product_Create(model, obj.DIPacketDetailID, data.Select(c => c.ID).ToList());

                            OPS_DI_VEN_Tendering_NewPacketDetail(model, objDetail.ID);
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void OPS_DI_VEN_Tendering_Product_Create(DataEntities model, int packetDetailID, List<int> dataGop)
        {
            var data = model.OPS_DIPacketGroupProduct.Where(c => c.DIPacketDetailID == packetDetailID).ToList();
            foreach (var item in data)
            {
                OPS_DIPacketGroupProductVEN obj = new OPS_DIPacketGroupProductVEN();
                obj.CreatedBy = Account.UserName;
                obj.CreatedDate = DateTime.Now;
                model.OPS_DIPacketGroupProductVEN.Add(obj);

                obj.DIPacketGroupProductID = item.ID;
                obj.DIPacketDetailID = packetDetailID;
                if (dataGop.Contains(item.ID))
                    obj.IsPlan = true;
            }
            model.SaveChanges();
            var dataVen = model.OPS_DIPacketGroupProductVEN.Where(c => c.DIPacketDetailID == packetDetailID && c.IsPlan).Select(c => new
            {
                c.ID,
                c.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.Ton,
                c.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.CBM,
                c.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.Quantity
            }).ToList();
            foreach (var item in dataVen)
            {
                OPS_DIPacketTOGroupProduct obj = new OPS_DIPacketTOGroupProduct();
                obj.CreatedBy = Account.UserName;
                obj.CreatedDate = DateTime.Now;
                model.OPS_DIPacketTOGroupProduct.Add(obj);

                obj.DIPacketGroupProductVENID = item.ID;
                obj.Ton = item.Ton;
                obj.CBM = item.CBM;
                obj.Quantity = item.Quantity;
            }
            model.SaveChanges();
        }

        private void OPS_DI_VEN_Tendering_NewPacketDetail(DataEntities model, int packetDetailID)
        {
            var objDetail = model.OPS_DIPacketDetail.FirstOrDefault(c => c.ID == packetDetailID);
            if (objDetail != null)
            {
                var objRate = model.OPS_DIPacketDetailRate.FirstOrDefault(c => c.VendorID == objDetail.VendorID && c.DIPacketDetailID == objDetail.ID);
                if (objRate != null)
                {
                    var dataRate = model.OPS_DIPacketDetailRate.Where(c => c.DIPacketDetailID == objDetail.ID && c.SortOrder > objRate.SortOrder && c.IsSend == false).Select(c => new
                    {
                        c.ID,
                        c.VendorID,
                        c.LastRateTime,
                        c.Debit,
                        c.FirstRateTime,
                        c.SortOrder
                    }).ToList();
                    var dataGop = model.OPS_DIPacketGroupProductVEN.Where(c => c.DIPacketDetailID == objDetail.ID && c.IsPlan == false).Select(c => new
                    {
                        c.ID,
                        c.DIPacketGroupProductID,
                        c.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.Ton,
                        c.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.CBM,
                        c.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.Quantity
                    }).ToList();

                    if (dataGop.Count > 0)
                    {
                        OPS_DIPacketDetail objNewDetail = new OPS_DIPacketDetail();
                        objNewDetail.CreatedBy = Account.UserName;
                        objNewDetail.CreatedDate = DateTime.Now;
                        objNewDetail.DIPacketID = objDetail.DIPacketID;
                        objNewDetail.DetailName = objDetail.DetailName;
                        objNewDetail.Note = objDetail.Note;
                        objNewDetail.TonOrder = dataGop.Sum(c => c.Ton);
                        objNewDetail.CBMOrder = dataGop.Sum(c => c.CBM);
                        objNewDetail.QuantityOrder = dataGop.Sum(c => c.Quantity);
                        objNewDetail.DIPacketDetailStatusID = -(int)SYSVarType.DIPacketDetailStatusWaiting;

                        model.OPS_DIPacketDetail.Add(objNewDetail);
                        model.SaveChanges();

                        var sOrder = 1;
                        var thisTime = DateTime.Now.AddMinutes(1);
                        foreach (var item in dataRate)
                        {
                            var time = item.LastRateTime.Value - item.FirstRateTime.Value;
                            OPS_DIPacketDetailRate objNewRate = new OPS_DIPacketDetailRate();
                            objNewRate.CreatedBy = Account.UserName;
                            objNewRate.CreatedDate = DateTime.Now;
                            model.OPS_DIPacketDetailRate.Add(objNewRate);

                            objNewRate.DIPacketDetailID = objNewDetail.ID;
                            objNewRate.SortOrder = sOrder++;
                            objNewRate.VendorID = item.VendorID;
                            objNewRate.Debit = item.Debit;
                            objNewRate.FirstRateTime = thisTime;
                            objNewRate.LastRateTime = objNewRate.FirstRateTime.Value.Add(time);
                        }
                        model.SaveChanges();

                        //Cập nhật IsSend cho rate đầu tiên
                        var objFirst = model.OPS_DIPacketDetailRate.Where(c => c.DIPacketDetailID == objNewDetail.ID).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objFirst != null)
                            objFirst.IsSend = true;
                        model.SaveChanges();

                        foreach (var gop in dataGop)
                        {
                            var objGop = model.OPS_DIPacketGroupProduct.FirstOrDefault(c => c.ID == gop.DIPacketGroupProductID);
                            if (objGop != null)
                            {
                                objGop.ModifiedBy = Account.UserName;
                                objGop.ModifiedDate = DateTime.Now;
                                objGop.DIPacketDetailID = objNewDetail.ID;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
        }

        #endregion

        #region Vendor2View

        public DTOResult OPS_DI_VEN_2View_GroupProduct_List(string request, int packetDetailID, bool hasMaster)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIPacketTOGroupProduct.Where(c => c.OPS_DIPacketGroupProductVEN.DIPacketDetailID == packetDetailID
                        && (hasMaster ? c.DIPacketTOMasterID.HasValue : c.DIPacketTOMasterID == null)).Select(c => new DTOOPSDIPacketTOGroupProduct
                    {
                        ID = c.ID,
                        CreateSortOrder = 0,
                        IsGopSplit = model.OPS_DIPacketTOGroupProduct.Count(o => o.DIPacketGroupProductVENID == c.DIPacketGroupProductVENID && o.ID != c.ID) > 0,
                        //IsSplit = model.OPS_DIPacketTOGroupProduct.Count(o => o.DIPacketGroupProductVENID == c.DIPacketGroupProductVENID && o.ID != c.ID) > 0,
                        DIPacketGroupProductVENID = c.DIPacketGroupProductVENID,
                        DIPacketTOMasterID = c.DIPacketTOMasterID,
                        DIPacketTOMasterCode = c.DIPacketTOMasterID > 0 ? c.OPS_DIPacketTOMaster.Code : string.Empty,
                        DITOGroupProductID = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.DITOGroupProductID,
                        GroupProductName = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        GroupProductCode = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        OrderCode = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                        CustomerCode = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                        ETD = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ETD,
                        ETA = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ETA,
                        ETDStart = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ETDStart,
                        ETAStart = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ETAStart,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,
                        DNCode = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.DNCode,
                        Note = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.Note,
                        Note1 = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.Note1,
                        Note2 = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.Note2,
                        InvoiceNote = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.InvoiceNote,
                        PartnerCode = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Partner.PartnerCode,
                        PartnerName = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Partner.CAT_Partner.PartnerName,
                        LocationFromName = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName,
                        LocationFromAddress = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                        LocationFromDistrict = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,
                        LocationFromProvince = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                        LocationToName = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName,
                        LocationToAddress = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                        LocationToDistrict = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                        LocationToProvince = c.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Data = query.Data as IEnumerable<DTOOPSDIPacketTOGroupProduct>;
                    result.Total = query.Total;

                    foreach (DTOOPSDIPacketTOGroupProduct item in result.Data as IEnumerable<DTOOPSDIPacketTOGroupProduct>)
                    {
                        var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.DITOGroupProductID);
                        if (objGroup != null)
                        {
                            var objProduct = model.ORD_Product.Where(c => c.GroupProductID == objGroup.OrderGroupProductID).Select(c => new
                            {
                                c.CUS_Product.Code,
                                c.CAT_Packing.TypeOfPackageID,
                                c.ExchangeTon,
                                c.ExchangeCBM,
                                c.ExchangeQuantity
                            }).FirstOrDefault();
                            if (objProduct != null)
                            {
                                if (objProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                    item.EditType = 1;
                                else if (objProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                    item.EditType = 2;
                                else
                                    item.EditType = 3;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_VEN_2View_TOMaster_List(string request, int packetDetailID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIPacketTOMaster.Where(c => c.DIPacketDetailID == packetDetailID).Select(c => new DTOOPSDIPacketTOMaster
                    {
                        ID = c.ID,
                        CreateSortOrder = 0,
                        Code = c.Code,
                        DIPacketDetailID = c.DIPacketDetailID,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                        DriverID1 = c.DriverID1,
                        DriverID2 = c.DriverID2,
                        DriverName1 = c.DriverID1 > 0 ? c.CAT_Driver.FirstName + " " + c.CAT_Driver.LastName : string.Empty,
                        DriverName2 = c.DriverID2 > 0 ? c.CAT_Driver1.FirstName + " " + c.CAT_Driver1.LastName : string.Empty,
                        DriverTel1 = c.DriverID1 > 0 ? c.CAT_Driver.Cellphone : string.Empty,
                        DriverTel2 = c.DriverID2 > 0 ? c.CAT_Driver1.Cellphone : string.Empty,
                        TypeOfDriverID1 = c.TypeOfDriverID1,
                        TypeOfDriverID2 = c.TypeOfDriverID2,
                        TypeOfDriverName1 = c.TypeOfDriverID1 > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                        TypeOfDriverName2 = c.TypeOfDriverID2 > 0 ? c.SYS_Var1.ValueOfVar : string.Empty,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        SortOrder = c.SortOrder
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDIPacketTOMaster>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDIPacketDetailRate OPS_DI_VEN_2View_Get(int packetDetailRateID)
        {
            {
                try
                {
                    DTOOPSDIPacketDetailRate result = new DTOOPSDIPacketDetailRate();
                    using (var model = new DataEntities())
                    {
                        var obj = model.OPS_DIPacketDetailRate.FirstOrDefault(c => c.ID == packetDetailRateID && c.VendorID > 0 && Account.ListCustomerID.Contains(c.VendorID.Value) && c.IsAccept == true);
                        if (obj != null)
                        {
                            result.ID = packetDetailRateID;
                            result.DIPacketDetailID = obj.DIPacketDetailID;
                            result.VendorID = obj.VendorID;
                            result.IsConfirm = obj.OPS_DIPacketDetail.DIPacketDetailStatusID == -(int)SYSVarType.DIPacketDetailStatusComplete;
                        }
                    }
                    return result;
                }
                catch (FaultException<DTOError> ex)
                {
                    throw ex;
                }
                catch (Exception ex)
                {
                    throw FaultHelper.BusinessFault(ex);
                }
            }
        }

        public void OPS_DI_VEN_2View_TOMaster_Save(int packetDetailID, List<DTOOPSDIPacketTOMaster> dataMaster, List<DTOOPSDIPacketTOGroupProduct> dataGop)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_DIPacketDetail.FirstOrDefault(c => c.ID == packetDetailID);
                    if (obj != null)
                    {
                        List<int> sValue = new List<int>();
                        foreach (var item in dataMaster)
                        {
                            var dataDi = dataGop.Where(c => c.CreateSortOrder == item.CreateSortOrder).ToList();
                            if (dataDi.Count == 0)
                            {
                                var objMaster = model.OPS_DIPacketTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objMaster != null)
                                {
                                    sValue.Add(item.ID);
                                    foreach (var o in model.OPS_DIPacketTOGroupProduct.Where(c => c.DIPacketTOMasterID == item.ID).ToList())
                                    {
                                        o.ModifiedBy = Account.UserName;
                                        o.ModifiedDate = DateTime.Now;
                                        o.DIPacketTOMasterID = null;
                                    }
                                    model.OPS_DIPacketTOMaster.Remove(objMaster);
                                }
                            }
                        }
                        model.SaveChanges();

                        foreach (var item in dataMaster.Where(c => !sValue.Contains(c.ID)).ToList())
                        {
                            var dataDi = dataGop.Where(c => c.CreateSortOrder == item.CreateSortOrder).ToList();
                            if (dataDi.Count != 0)
                            {
                                var objMaster = model.OPS_DIPacketTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objMaster != null)
                                {
                                    foreach (var o in model.OPS_DIPacketTOGroupProduct.Where(c => c.DIPacketTOMasterID == item.ID).ToList())
                                    {
                                        o.ModifiedBy = Account.UserName;
                                        o.ModifiedDate = DateTime.Now;
                                        o.DIPacketTOMasterID = null;
                                    }
                                    objMaster.ModifiedBy = Account.UserName;
                                    objMaster.ModifiedDate = DateTime.Now;
                                }
                                else
                                {
                                    objMaster = new OPS_DIPacketTOMaster();
                                    objMaster.CreatedBy = Account.UserName;
                                    objMaster.CreatedDate = DateTime.Now;
                                    model.OPS_DIPacketTOMaster.Add(objMaster);

                                    objMaster.DIPacketDetailID = packetDetailID;
                                    objMaster.SortOrder = 1;
                                    objMaster.Code = DIPacket_GetLastCode(model, packetDetailID);
                                }
                                objMaster.ETD = item.ETD;
                                objMaster.ETA = item.ETA;
                                objMaster.VehicleID = item.VehicleID;
                                objMaster.DriverID1 = item.DriverID1;
                                objMaster.DriverID2 = item.DriverID2;
                                objMaster.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                                objMaster.TypeOfDriverID2 = -(int)SYSVarType.TypeOfDriverEx;
                                model.SaveChanges();

                                foreach (var gop in dataDi)
                                {
                                    var objGop = model.OPS_DIPacketTOGroupProduct.FirstOrDefault(c => c.ID == gop.ID);
                                    if (objGop != null)
                                    {
                                        if (gop.IsSplit && (gop.Ton != objGop.Ton || gop.CBM != objGop.CBM || gop.Quantity != objGop.Quantity))
                                        {
                                            var objNew = new OPS_DIPacketTOGroupProduct();
                                            objNew.CreatedBy = Account.UserName;
                                            objNew.CreatedDate = DateTime.Now;
                                            objNew.DIPacketTOMasterID = objMaster.ID;
                                            objNew.DIPacketGroupProductVENID = objGop.DIPacketGroupProductVENID;
                                            objNew.Ton = gop.Ton;
                                            objNew.CBM = gop.CBM;
                                            objNew.Quantity = gop.Quantity;
                                            objNew.Note = objGop.Note;
                                            objNew.IsInput = true;
                                            model.OPS_DIPacketTOGroupProduct.Add(objNew);

                                            objGop.ModifiedBy = Account.UserName;
                                            objGop.ModifiedDate = DateTime.Now;
                                            objGop.Ton = Math.Round(objGop.Ton - objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                            objGop.CBM = Math.Round(objGop.CBM - objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                            objGop.Quantity = Math.Round(objGop.Quantity - objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                            model.SaveChanges();
                                        }
                                        else
                                        {
                                            objGop.ModifiedBy = Account.UserName;
                                            objGop.ModifiedDate = DateTime.Now;
                                            objGop.DIPacketTOMasterID = objMaster.ID;
                                        }
                                    }
                                }
                                model.SaveChanges();
                            }
                        }

                        OPS_DI_VEN_2View_GroupProduct_Reset(model, packetDetailID);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_VEN_2View_TOMaster_Delete(int packetDetailID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_DIPacketDetail.FirstOrDefault(c => c.ID == packetDetailID);
                    if (obj != null)
                    {
                        foreach (var item in data)
                        {
                            var objM = model.OPS_DIPacketTOMaster.FirstOrDefault(c => c.ID == item);
                            if (objM != null)
                            {
                                foreach (var o in model.OPS_DIPacketTOGroupProduct.Where(c => c.DIPacketTOMasterID == item).ToList())
                                {
                                    o.ModifiedBy = Account.UserName;
                                    o.ModifiedDate = DateTime.Now;
                                    o.DIPacketTOMasterID = null;

                                    //var objO = model.OPS_DIPacketTOGroupProduct.FirstOrDefault(c => c.DIPacketTOMasterID == null && c.DIPacketGroupProductVENID == o.DIPacketGroupProductVENID);
                                    //if (objO != null)
                                    //{
                                    //    o.Ton = Math.Round(o.Ton + objO.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                    //    o.CBM = Math.Round(o.CBM + objO.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                    //    o.Quantity = Math.Round(o.Quantity + objO.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                    //    model.OPS_DIPacketTOGroupProduct.Remove(objO);
                                    //}
                                    //model.SaveChanges();
                                }
                                model.OPS_DIPacketTOMaster.Remove(objM);
                                model.SaveChanges();
                            }
                        }

                        OPS_DI_VEN_2View_GroupProduct_Reset(model, packetDetailID);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_VEN_Tendering_Packet_Confirm(int packetDetailID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objDetail = model.OPS_DIPacketDetail.FirstOrDefault(c => c.ID == packetDetailID);
                    if (objDetail != null)
                    {
                        //if (model.OPS_DIPacketTOMaster.Where(c => c.DIPacketDetailID == packetDetailID).Count() == 0)
                        //    throw FaultHelper.BusinessFault(null, null, "Không có DL chuyến. Không thể xác nhận!");
                        var dataGop = model.OPS_DIPacketTOGroupProduct.Where(c => c.OPS_DIPacketGroupProductVEN.DIPacketDetailID == packetDetailID).GroupBy(c => c.DIPacketGroupProductVENID).ToList();
                        foreach (var item in dataGop)
                        {
                            if (item.Count(c => c.DIPacketTOMasterID.HasValue) > 0 && item.Count(c => !c.DIPacketTOMasterID.HasValue) > 0)
                                throw FaultHelper.BusinessFault(null, null, "Nhóm  + " + item.FirstOrDefault().OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code +
                                    "[" + item.FirstOrDefault().OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.ORD_GroupProduct.DNCode + "] đã tạo chuyến 1 phần. Không thể xác nhận!");
                        }

                        int sLocation = 1;
                        int eLocation = 1;
                        var sSet = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).Select(c => c.Setting).FirstOrDefault();
                        if (!string.IsNullOrEmpty(sSet))
                        {
                            var oSet = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(sSet).FirstOrDefault();
                            if (oSet != null)
                            {
                                var obj1 = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationFromID);
                                if (obj1 != null)
                                    sLocation = obj1.ID;
                                var obj2 = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationToID);
                                if (obj2 != null)
                                    eLocation = obj2.ID;
                            }
                        }

                        //Xác nhận.
                        var dataMaster = model.OPS_DIPacketTOMaster.Where(c => c.DIPacketDetailID == packetDetailID).ToList();
                        foreach (var item in dataMaster)
                        {
                            OPS_DITOMaster obj = new OPS_DITOMaster();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.Code = DI_GetLastCode(model);
                            obj.SYSCustomerID = Account.SYSCustomerID;
                            obj.VehicleID = item.VehicleID;
                            obj.VendorOfVehicleID = objDetail.VendorID;
                            obj.DriverID1 = item.DriverID1;
                            obj.DriverID2 = item.DriverID2;
                            obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                            obj.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                            obj.TransportModeID = -(int)SYSVarType.TransportModeFTL;
                            obj.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                            obj.SortOrder = 1;
                            obj.ETD = item.ETD;
                            obj.ETA = item.ETA;
                            obj.DateConfig = obj.ETA;
                            obj.IsRouteVendor = false;
                            obj.IsRouteCustomer = false;
                            obj.IsLoading = false;
                            obj.IsBidding = false;
                            obj.Note = "";
                            obj.KM = 0;

                            model.OPS_DITOMaster.Add(obj);
                            model.SaveChanges();
                            obj.Code = DICodePrefix + obj.ID.ToString(DICodeNum);
                            model.SaveChanges();

                            List<int> dataLocationFrom = new List<int>();
                            List<int> dataLocationTo = new List<int>();
                            Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();

                            foreach (var gop in item.OPS_DIPacketTOGroupProduct.ToList())
                            {
                                var objG = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gop.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.DITOGroupProductID);
                                if (objG != null)
                                {
                                    var fID = objG.ORD_GroupProduct.CUS_Location.LocationID;
                                    var tID = objG.ORD_GroupProduct.CUS_Location.LocationID;

                                    dataLocationFrom.Add(fID);
                                    if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                        dicLocationTime[fID] = objG.ORD_GroupProduct.ETD;
                                    else if (dicLocationTime[fID] > objG.ORD_GroupProduct.ETD)
                                        dicLocationTime[fID] = objG.ORD_GroupProduct.ETD;

                                    dataLocationTo.Add(tID);
                                    if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                        dicLocationTime[tID] = objG.ORD_GroupProduct.ETA;
                                    else if (dicLocationTime[tID] > objG.ORD_GroupProduct.ETA)
                                        dicLocationTime[tID] = objG.ORD_GroupProduct.ETA;

                                    if (objG.Ton != gop.Ton || objG.CBM != gop.CBM || objG.Quantity != gop.Quantity)
                                    {
                                        if (objG.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel)
                                        {
                                            objG.ModifiedBy = Account.UserName;
                                            objG.ModifiedDate = DateTime.Now;
                                            objG.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusCancel;

                                            var objNew1 = new OPS_DITOGroupProduct();
                                            objNew1.CreatedBy = Account.UserName;
                                            objNew1.CreatedDate = DateTime.Now;
                                            objNew1.DITOMasterID = obj.ID;
                                            objNew1.OrderGroupProductID = objG.OrderGroupProductID;
                                            objNew1.Ton = objNew1.TonTranfer = objNew1.TonBBGN = gop.Ton;
                                            objNew1.CBM = objNew1.CBMTranfer = objNew1.CBMBBGN = gop.CBM;
                                            objNew1.Quantity = objNew1.QuantityTranfer = objNew1.QuantityBBGN = objNew1.QuantityLoading = gop.Quantity;
                                            objNew1.Note = objG.Note;
                                            objNew1.Note1 = objG.Note1;
                                            objNew1.Note2 = objG.Note2;
                                            objNew1.DNCode = objG.DNCode;
                                            objNew1.DITOGroupProductStatusID = objG.DITOGroupProductStatusID;
                                            objNew1.IsInput = true;
                                            objNew1.IsSplit = true;
                                            //objNew1.LocationToID = objG.LocationToID;
                                            objNew1.DateConfig = objG.DateConfig;
                                            objNew1.DateDN = objG.DateDN;
                                            objNew1.InvoiceNote = objG.InvoiceNote;
                                            objNew1.DITOGroupProductStatusPODID = objG.DITOGroupProductStatusPODID;
                                            model.OPS_DITOGroupProduct.Add(objNew1);

                                            var objNew2 = new OPS_DITOGroupProduct();
                                            objNew2.CreatedBy = Account.UserName;
                                            objNew2.CreatedDate = DateTime.Now;
                                            objNew2.DITOMasterID = null;
                                            objNew2.OrderGroupProductID = objG.OrderGroupProductID;
                                            objNew2.Ton = objNew2.TonTranfer = objNew2.TonBBGN = Math.Round(gop.Ton - objNew1.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                            objNew2.CBM = objNew2.CBMTranfer = objNew2.CBMBBGN = Math.Round(gop.CBM - objNew1.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                            objNew2.Quantity = objNew2.QuantityTranfer = objNew2.QuantityBBGN = objNew2.QuantityLoading = Math.Round(gop.Quantity - objNew1.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                            objNew2.Note = objG.Note;
                                            objNew2.Note1 = objG.Note1;
                                            objNew2.Note2 = objG.Note2;
                                            objNew2.DNCode = objG.DNCode;
                                            objNew2.DITOGroupProductStatusID = objG.DITOGroupProductStatusID;
                                            objNew2.IsInput = true;
                                            objNew2.IsSplit = true;
                                            //objNew2.LocationToID = objG.LocationToID;
                                            objNew2.DateConfig = objG.DateConfig;
                                            objNew2.DateDN = objG.DateDN;
                                            objNew2.InvoiceNote = objG.InvoiceNote;
                                            objNew2.DITOGroupProductStatusPODID = objG.DITOGroupProductStatusPODID;
                                            model.OPS_DITOGroupProduct.Add(objNew2);
                                        }
                                        else
                                        {
                                            var objN = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == null && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel
                                                && c.OrderGroupProductID == gop.OPS_DIPacketGroupProductVEN.OPS_DIPacketGroupProduct.OPS_DITOGroupProduct.OrderGroupProductID);
                                            if (objN != null)
                                            {
                                                if (objN.Ton != gop.Ton || objN.CBM != gop.CBM || objN.Quantity != gop.Quantity)
                                                {
                                                    var objNew1 = new OPS_DITOGroupProduct();
                                                    objNew1.CreatedBy = Account.UserName;
                                                    objNew1.CreatedDate = DateTime.Now;
                                                    objNew1.DITOMasterID = obj.ID;
                                                    objNew1.OrderGroupProductID = objN.OrderGroupProductID;
                                                    objNew1.Ton = objNew1.TonTranfer = objNew1.TonBBGN = gop.Ton;
                                                    objNew1.CBM = objNew1.CBMTranfer = objNew1.CBMBBGN = gop.CBM;
                                                    objNew1.Quantity = objNew1.QuantityTranfer = objNew1.QuantityBBGN = objNew1.QuantityLoading = gop.Quantity;
                                                    objNew1.Note = objN.Note;
                                                    objNew1.Note1 = objN.Note1;
                                                    objNew1.Note2 = objN.Note2;
                                                    objNew1.DNCode = objN.DNCode;
                                                    objNew1.DITOGroupProductStatusID = objN.DITOGroupProductStatusID;
                                                    objNew1.IsInput = true;
                                                    objNew1.IsSplit = true;
                                                    //objNew1.LocationToID = objN.LocationToID;
                                                    objNew1.DateConfig = objN.DateConfig;
                                                    objNew1.DateDN = objN.DateDN;
                                                    objNew1.InvoiceNote = objN.InvoiceNote;
                                                    objNew1.DITOGroupProductStatusPODID = objN.DITOGroupProductStatusPODID;
                                                    model.OPS_DITOGroupProduct.Add(objNew1);

                                                    var objNew2 = new OPS_DITOGroupProduct();
                                                    objNew2.CreatedBy = Account.UserName;
                                                    objNew2.CreatedDate = DateTime.Now;
                                                    objNew2.DITOMasterID = null;
                                                    objNew2.OrderGroupProductID = objN.OrderGroupProductID;
                                                    objNew2.Ton = objNew2.TonTranfer = objNew2.TonBBGN = Math.Round(gop.Ton - objNew1.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                    objNew2.CBM = objNew2.CBMTranfer = objNew2.CBMBBGN = Math.Round(gop.CBM - objNew1.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                    objNew2.Quantity = objNew2.QuantityTranfer = objNew2.QuantityBBGN = objNew2.QuantityLoading = Math.Round(gop.Quantity - objNew1.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                    objNew2.Note = objN.Note;
                                                    objNew2.Note1 = objN.Note1;
                                                    objNew2.Note2 = objN.Note2;
                                                    objNew2.DNCode = objN.DNCode;
                                                    objNew2.DITOGroupProductStatusID = objN.DITOGroupProductStatusID;
                                                    objNew2.IsInput = true;
                                                    objNew2.IsSplit = true;
                                                    //objNew2.LocationToID = objN.LocationToID;
                                                    objNew2.DateConfig = objN.DateConfig;
                                                    objNew2.DateDN = objN.DateDN;
                                                    objNew2.InvoiceNote = objN.InvoiceNote;
                                                    objNew2.DITOGroupProductStatusPODID = objN.DITOGroupProductStatusPODID;
                                                    model.OPS_DITOGroupProduct.Add(objNew2);
                                                }
                                                else
                                                {
                                                    objN.ModifiedBy = Account.UserName;
                                                    objN.ModifiedDate = DateTime.Now;
                                                    objN.DITOMasterID = obj.ID;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        objG.ModifiedBy = Account.UserName;
                                        objG.ModifiedDate = DateTime.Now;
                                        objG.DITOMasterID = obj.ID;
                                    }
                                }
                                model.SaveChanges();
                            }

                            int idx = 1;
                            OPS_DITOLocation oLocation = new OPS_DITOLocation();
                            oLocation.LocationID = sLocation;
                            oLocation.SortOrder = idx++;
                            oLocation.DITOMasterID = obj.ID;
                            oLocation.CreatedBy = Account.UserName;
                            oLocation.CreatedDate = DateTime.Now;
                            oLocation.DateComeEstimate = obj.ETD;
                            oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                            model.OPS_DITOLocation.Add(oLocation);

                            foreach (var o in dataLocationFrom.Distinct().ToList())
                            {
                                OPS_DITOLocation v = new OPS_DITOLocation();
                                v.LocationID = o;
                                v.SortOrder = idx++;
                                v.DITOMasterID = obj.ID;
                                v.CreatedBy = Account.UserName;
                                v.CreatedDate = DateTime.Now;
                                v.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                                v.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;

                                if (dataLocationTo.Count(c => c == o) > 0)
                                    v.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;

                                if (dicLocationTime.ContainsKey(o))
                                    v.DateComeEstimate = dicLocationTime[o];

                                model.OPS_DITOLocation.Add(v);
                            }
                            foreach (var o in dataLocationTo.Distinct().ToList())
                            {
                                if (dataLocationFrom.IndexOf(o) < 0)
                                {
                                    OPS_DITOLocation v = new OPS_DITOLocation();
                                    v.LocationID = o;
                                    v.SortOrder = idx++;
                                    v.DITOMasterID = obj.ID;
                                    v.CreatedBy = Account.UserName;
                                    v.CreatedDate = DateTime.Now;
                                    v.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                                    v.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                                    if (dicLocationTime.ContainsKey(o))
                                        v.DateComeEstimate = dicLocationTime[o];

                                    model.OPS_DITOLocation.Add(v);
                                }
                            }

                            OPS_DITOLocation osLocation = new OPS_DITOLocation();
                            osLocation.LocationID = eLocation;
                            osLocation.SortOrder = idx++;
                            osLocation.DITOMasterID = obj.ID;
                            osLocation.CreatedBy = Account.UserName;
                            osLocation.CreatedDate = DateTime.Now;
                            osLocation.DateComeEstimate = obj.ETA;
                            osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                            model.OPS_DITOLocation.Add(osLocation);
                            model.SaveChanges();

                            //Tạo rate
                            OPS_DITORate objR = new OPS_DITORate();
                            objR.CreatedBy = Account.UserName;
                            objR.CreatedDate = DateTime.Now;
                            objR.VendorID = objDetail.VendorID;
                            objR.SortOrder = 1;
                            objR.IsSend = true;
                            objR.IsAccept = true;
                            objR.DITOMasterID = obj.ID;
                            objR.FirstRateTime = DateTime.Now;
                            objR.LastRateTime = DateTime.Now;

                            model.OPS_DITORate.Add(objR);
                            model.SaveChanges();

                            //Gửi giám sát.
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterTendered;

                            // Tính PL
                            HelperFinance.DITOMaster_Planning(model, Account, obj.ID, obj.VendorOfVehicleID);

                            // Tạo sẫn POD
                            POD_CreateByMasterID(model, null, obj.ID);
                        }

                        //Cập nhật detail
                        var dataVenMsGop = model.OPS_DIPacketTOGroupProduct.Where(c => c.DIPacketTOMasterID.HasValue && c.OPS_DIPacketGroupProductVEN.DIPacketDetailID == packetDetailID).ToList();
                        var objRate = model.OPS_DIPacketDetailRate.FirstOrDefault(c => c.VendorID == objDetail.VendorID && c.DIPacketDetailID == objDetail.ID);
                        if (objRate != null)
                        {
                            objDetail.ModifiedBy = Account.UserName;
                            objDetail.ModifiedDate = DateTime.Now;
                            objDetail.DIPacketDetailStatusID = -(int)SYSVarType.DIPacketDetailStatusComplete;

                            objRate.ModifiedBy = Account.UserName;
                            objRate.ModifiedDate = DateTime.Now;
                            objRate.TonConfirm = dataVenMsGop.Sum(c => c.Ton);
                            objRate.CBMConfirm = dataVenMsGop.Sum(c => c.CBM);
                            objRate.QuantityConfirm = dataVenMsGop.Sum(c => c.Quantity);
                            model.SaveChanges();

                            //Tạo new packet.
                            var dataVenGop = model.OPS_DIPacketTOGroupProduct.Where(c => c.DIPacketTOMasterID == null && c.OPS_DIPacketGroupProductVEN.DIPacketDetailID == packetDetailID).ToList();
                            if (dataVenGop.Count > 0)
                            {
                                var dataRate = model.OPS_DIPacketDetailRate.Where(c => c.DIPacketDetailID == objDetail.ID && c.SortOrder > objRate.SortOrder && c.IsSend == false).Select(c => new
                                {
                                    c.ID,
                                    c.VendorID,
                                    c.LastRateTime,
                                    c.Debit,
                                    c.FirstRateTime,
                                    c.SortOrder
                                }).ToList();

                                OPS_DIPacketDetail objNewDetail = new OPS_DIPacketDetail();
                                objNewDetail.CreatedBy = Account.UserName;
                                objNewDetail.CreatedDate = DateTime.Now;
                                objNewDetail.DIPacketID = objDetail.DIPacketID;
                                objNewDetail.DetailName = objDetail.DetailName;
                                objNewDetail.Note = objDetail.Note;
                                objNewDetail.TonOrder = dataVenGop.Sum(c => c.Ton);
                                objNewDetail.CBMOrder = dataVenGop.Sum(c => c.CBM);
                                objNewDetail.QuantityOrder = dataVenGop.Sum(c => c.Quantity);
                                objNewDetail.DIPacketDetailStatusID = -(int)SYSVarType.DIPacketDetailStatusWaiting;

                                model.OPS_DIPacketDetail.Add(objNewDetail);
                                model.SaveChanges();

                                var sOrder = 1;
                                var thisTime = DateTime.Now.AddMinutes(1);
                                foreach (var item in dataRate)
                                {
                                    var time = item.LastRateTime.Value - item.FirstRateTime.Value;
                                    OPS_DIPacketDetailRate objNewRate = new OPS_DIPacketDetailRate();
                                    objNewRate.CreatedBy = Account.UserName;
                                    objNewRate.CreatedDate = DateTime.Now;
                                    model.OPS_DIPacketDetailRate.Add(objNewRate);

                                    objNewRate.DIPacketDetailID = objNewDetail.ID;
                                    objNewRate.SortOrder = sOrder++;
                                    objNewRate.VendorID = item.VendorID;
                                    objNewRate.Debit = item.Debit;
                                    objNewRate.FirstRateTime = thisTime;
                                    objNewRate.LastRateTime = objNewRate.FirstRateTime.Value.Add(time);
                                }
                                model.SaveChanges();

                                //Cập nhật IsSend cho rate đầu tiên
                                var objFirst = model.OPS_DIPacketDetailRate.Where(c => c.DIPacketDetailID == objNewDetail.ID).OrderBy(c => c.SortOrder).FirstOrDefault();
                                if (objFirst != null)
                                    objFirst.IsSend = true;
                                model.SaveChanges();

                                foreach (var gop in dataVenGop)
                                {
                                    var objGop = model.OPS_DIPacketGroupProduct.FirstOrDefault(c => c.ID == gop.OPS_DIPacketGroupProductVEN.DIPacketGroupProductID);
                                    if (objGop != null)
                                    {
                                        objGop.ModifiedBy = Account.UserName;
                                        objGop.ModifiedDate = DateTime.Now;
                                        objGop.DIPacketDetailID = objNewDetail.ID;
                                    }
                                }
                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_VEN_Tendering_Packet_AutoCheck()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void OPS_DI_VEN_2View_GroupProduct_Reset(DataEntities model, int packetDetailID)
        {
            var data = model.OPS_DIPacketTOGroupProduct.Where(c => c.OPS_DIPacketGroupProductVEN.DIPacketDetailID == packetDetailID && c.DIPacketTOMasterID == null).GroupBy(c => c.DIPacketGroupProductVENID).ToList();
            foreach (var group in data)
            {
                if (group.ToList().Count > 1)
                {
                    var first = group.FirstOrDefault();
                    first.ModifiedBy = Account.UserName;
                    first.ModifiedDate = DateTime.Now;
                    foreach (var item in group.Where(c => c.ID != first.ID).ToList())
                    {
                        first.Ton += item.Ton;
                        first.CBM += item.CBM;
                        first.Quantity += item.Quantity;
                        model.OPS_DIPacketTOGroupProduct.Remove(item);
                    }

                    first.Ton = Math.Round(first.Ton, NoDigit, MidpointRounding.AwayFromZero);
                    first.CBM = Math.Round(first.CBM, NoDigit, MidpointRounding.AwayFromZero);
                    first.Quantity = Math.Round(first.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                }
            }
            model.SaveChanges();
        }

        private string DIPacket_GetLastCode(DataEntities model, int packetDetailID)
        {
            long idx = 1;
            var last = model.OPS_DIPacketTOMaster.Where(c => c.DIPacketDetailID == packetDetailID).OrderByDescending(c => c.ID).Select(c => new { c.ID }).FirstOrDefault();
            if (last != null)
                idx = Convert.ToInt64(last.ID) + 1;
            else
                idx = 1;
            return DICodePrefix + idx.ToString(DICodeNum);
        }
        #endregion

        #endregion

        #endregion

        #region Tự động cập nhật lệnh gửi Vendor

        public void OPSMasterTendered_AutoSendMail()
        {
            try
            {
                throw new Exception("Function is locked by develop");
                //using (var model = new DataEntities())
                //{
                //    model.EventAccount = Account; model.EventRunning = false;

                //    var reasonOutOfDate = model.CAT_Reason.FirstOrDefault(c => c.TypeOfReasonID == -(int)SYSVarType.TypeOfReasonTenderSystem);
                //    var dtNow = DateTime.Now;

                //    #region Container
                //    var lstCOTOMaster = model.OPS_COTOMaster.Where(c => c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved && !c.OPS_COTORate.Any(d => d.IsAccept == true) && c.VehicleID == null).ToList();
                //    List<DTOMailVendor> lstMailContainer = new List<DTOMailVendor>();
                //    foreach (var master in lstCOTOMaster)
                //    {
                //        // Hệ thống tự động từ chối các rate quá hạn
                //        int SortOrder = 0;
                //        var latestReject = master.OPS_COTORate.OrderByDescending(c => c.SortOrder).FirstOrDefault(c => c.IsAccept == false);
                //        if (latestReject != null)
                //            SortOrder = latestReject.SortOrder;
                //        var lstOutOfDate = master.OPS_COTORate.Where(c => c.LastRateTime < dtNow && c.IsAccept == null).ToList();
                //        foreach (var rate in lstOutOfDate)
                //        {
                //            rate.ModifiedBy = Account.UserName;
                //            rate.ModifiedDate = DateTime.Now;
                //            rate.IsAccept = false;
                //            rate.ReasonID = reasonOutOfDate.ID;
                //            rate.Reason = reasonOutOfDate.ReasonName;
                //            if (rate.SortOrder > SortOrder)
                //                SortOrder = rate.SortOrder;
                //        }
                //        SortOrder++;
                //        // rate hiện tại
                //        var currentRate = master.OPS_COTORate.FirstOrDefault(c => c.SortOrder == SortOrder && !c.IsSend);
                //        if (currentRate != null)
                //        {
                //            int vendorID = 0;
                //            if (currentRate.VendorID.HasValue)
                //                vendorID = currentRate.VendorID.Value;

                //            var vendor = lstMailContainer.FirstOrDefault(c => c.VendorID == vendorID && c.SysCustomerID == master.SYSCustomerID);
                //            if (vendor != null)
                //                vendor.ListRateID.Add(currentRate.ID);
                //            else
                //            {
                //                vendor = new DTOMailVendor();
                //                vendor.VendorID = vendorID;
                //                vendor.ListRateID = new List<int>();
                //                vendor.ListRateID.Add(currentRate.ID);
                //                vendor.SysCustomerID = master.SYSCustomerID;
                //                lstMailContainer.Add(vendor);
                //            }
                //        }
                //        // Ktra nếu tất cả rate đều bị từ chối => chuyển state gửi phê duyệt lại
                //        if (master.OPS_COTORate.Count(c => c.IsAccept == false) == master.OPS_COTORate.Count())
                //        {
                //            master.ModifiedBy = Account.UserName;
                //            master.ModifiedDate = DateTime.Now;
                //            master.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterApproveAgain;
                //        }
                //    }
                //    #endregion

                //    #region Truck
                //    List<DTOMailVendor> lstMailTruck = new List<DTOMailVendor>();
                //    var lstDITOMaster = model.OPS_DITOMaster.Where(c => c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved && !c.OPS_DITORate.Any(d => d.IsAccept == true) && c.VehicleID == null).ToList();
                //    foreach (var master in lstDITOMaster)
                //    {
                //        // Hệ thống tự động từ chối cái rate quá hạn
                //        int SortOrder = 0;
                //        var latestReject = master.OPS_DITORate.OrderByDescending(c => c.SortOrder).FirstOrDefault(c => c.IsAccept == false);
                //        if (latestReject != null)
                //            SortOrder = latestReject.SortOrder;
                //        var lstOutOfDate = master.OPS_DITORate.Where(c => c.LastRateTime < dtNow && c.IsAccept == null).ToList();
                //        foreach (var rate in lstOutOfDate)
                //        {
                //            rate.ModifiedBy = Account.UserName;
                //            rate.ModifiedDate = DateTime.Now;
                //            rate.IsAccept = false;
                //            rate.ReasonID = reasonOutOfDate.ID;
                //            rate.Reason = reasonOutOfDate.ReasonName;
                //        }
                //        // rate hiện tại
                //        SortOrder++;
                //        var currentRate = master.OPS_DITORate.FirstOrDefault(c => c.SortOrder == SortOrder && !c.IsSend);
                //        if (currentRate != null)
                //        {
                //            int vendorID = 0;
                //            if (currentRate.VendorID.HasValue)
                //                vendorID = currentRate.VendorID.Value;

                //            var vendor = lstMailTruck.FirstOrDefault(c => c.VendorID == vendorID && c.SysCustomerID == master.SYSCustomerID);
                //            if (vendor != null)
                //                vendor.ListRateID.Add(currentRate.ID);
                //            else
                //            {
                //                vendor = new DTOMailVendor();
                //                vendor.VendorID = vendorID;
                //                vendor.ListRateID = new List<int>();
                //                vendor.ListRateID.Add(currentRate.ID);
                //                vendor.SysCustomerID = master.SYSCustomerID;
                //                lstMailTruck.Add(vendor);
                //            }
                //        }

                //        // Ktra nếu tất cả rate đều bị từ chối => chuyển state gửi phê duyệt lại
                //        if (master.OPS_DITORate.Count(c => c.IsAccept == false) == master.OPS_DITORate.Count())
                //        {
                //            master.ModifiedBy = Account.UserName;
                //            master.ModifiedDate = DateTime.Now;
                //            master.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproveAgain;
                //        }
                //    }
                //    #endregion

                //    model.SaveChanges();

                //    #region Gửi mail theo vendor
                //    foreach (var mail in lstMailContainer)
                //        CO_SendMail(mail.ListRateID, mail.VendorID, mail.SysCustomerID);

                //    foreach (var mail in lstMailTruck)
                //        Truck_SendMailToVendor(mail.ListRateID, mail.VendorID, mail.SysCustomerID);
                //    #endregion
                //}
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //private void CO_SendMail(List<int> dataRate, int vendorID, int sysCusID)
        //{
        //    try
        //    {
        //        using (var model = new DataEntities())
        //        {
        //            model.EventAccount = Account; model.EventRunning = false;

        //            var customer = model.CUS_Customer.FirstOrDefault(c => c.ID == sysCusID);
        //            var vendor = model.CUS_Customer.FirstOrDefault(c => c.ID == vendorID);
        //            var lstRate = model.OPS_COTORate.Where(c => dataRate.Contains(c.ID)).ToList();
        //            var mailTemplate = HelperSYSSetting.MailTemplate_GetBySYSCustomerID(model, MailTemplateCode.OPSTenderingContainer, sysCusID);
        //            var mailSetting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, sysCusID);
        //            if (vendor != null && !string.IsNullOrEmpty(vendor.Email) && customer != null && mailTemplate != null && mailSetting != null)
        //            {
        //                string strContent = mailTemplate.Content;
        //                string strDetail = mailTemplate.Details;
        //                string strSubject = MailHelper.StringHTML(mailTemplate.Subject, delegate(MailTemplate obj)
        //                {
        //                    switch (obj.Token)
        //                    {
        //                        default: break;
        //                    }
        //                });

        //                string strMail = MailHelper.StringHTML(strContent, delegate(MailTemplate obj)
        //                {
        //                    switch (obj.Token)
        //                    {
        //                        case "VendorName": obj.HTML = vendor.CustomerName; break;
        //                        case "ExpiredTime": obj.HTML = lstRate.Where(c => c.LastRateTime.HasValue).OrderBy(c => c.LastRateTime).FirstOrDefault().LastRateTime.Value.ToString("dd/MM/yyyy HH:mm:ss"); break;
        //                        case "URLToTenderPage": obj.HTML = mailSetting.Website; break;
        //                        case "CustomerName": obj.HTML = customer.CustomerName; break;
        //                        case "Address": obj.HTML = customer.Address; break;
        //                        case "TelNo": obj.HTML = customer.TelNo; break;
        //                        case "Fax": obj.HTML = customer.Fax; break;
        //                        case "Email": obj.HTML = customer.Email; break;
        //                        case "Details":
        //                            string htmlDetail = string.Empty;
        //                            foreach (var rate in lstRate)
        //                            {
        //                                if (rate != null && !rate.IsSend && rate.VendorID.HasValue)
        //                                {
        //                                    rate.IsSend = true;
        //                                    var objMaster = rate.OPS_COTOMaster;
        //                                    var firstRoute = objMaster.OPS_COTO.OrderBy(c => c.SortOrder).FirstOrDefault(c => c.IsOPS);
        //                                    var lastRoute = objMaster.OPS_COTO.OrderByDescending(c => c.SortOrder).FirstOrDefault(c => c.IsOPS);

        //                                    htmlDetail += obj.HTML = MailHelper.StringHTML(strDetail, delegate(MailTemplate detail)
        //                                    {
        //                                        switch (detail.Token)
        //                                        {
        //                                            case "TripNo": detail.HTML = objMaster.Code; break;
        //                                            case "TypeOfContainer":
        //                                                var lstContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == objMaster.ID).GroupBy(c => c.OPS_Container.ContainerID).Select(c => new
        //                                                {
        //                                                    TypeOfContainerID = c.FirstOrDefault().OPS_Container.ORD_Container.PackingID,
        //                                                    TypeOfContainerName = c.FirstOrDefault().OPS_Container.ORD_Container.CAT_Packing.PackingName
        //                                                });
        //                                                var lstTypeOfContainer = lstContainer.OrderBy(c => c.TypeOfContainerName).GroupBy(c => new { c.TypeOfContainerID, c.TypeOfContainerName }).Select(c => new
        //                                                {
        //                                                    TypeOfContainerName = c.Key.TypeOfContainerName,
        //                                                    NumberOfContainer = c.Count()
        //                                                }).ToList();
        //                                                detail.HTML = string.Empty;
        //                                                foreach (var container in lstTypeOfContainer)
        //                                                    detail.HTML += container.TypeOfContainerName + "x" + container.NumberOfContainer + " ";
        //                                                break;
        //                                            case "LocationFrom": detail.HTML = firstRoute.CAT_Routing.CAT_Location.Location; break;
        //                                            case "LocationTo": detail.HTML = lastRoute.CAT_Routing.CAT_Location1.Location; break;
        //                                            //case "ETD": detail.HTML = firstRoute.ETD.ToString("dd/MM/yyyy HH:mm:ss"); break;
        //                                            //case "ETA": detail.HTML = lastRoute.ETA.ToString("dd/MM/yyyy HH:mm:ss"); break;
        //                                        }
        //                                    });
        //                                }
        //                            }
        //                            obj.HTML = htmlDetail;
        //                            break;
        //                    }
        //                });

        //                MailHelper.SendMail(mailSetting, vendor.Email, vendor.CustomerName, mailTemplate.CC, strSubject, strMail);

        //            }
        //            else
        //            {
        //                foreach (var rate in lstRate)
        //                    rate.IsSend = true;
        //            }
        //            model.SaveChanges();
        //        }
        //    }
        //    catch (FaultException<DTOError> ex)
        //    {
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw FaultHelper.BusinessFault(ex);
        //    }
        //}

        private void Container_SendMailToVendor(int id)
        {

        }

        private void Truck_SendMailToVendor(List<int> lstRateID, int vendorID, int syscustomerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var customer = model.CUS_Customer.FirstOrDefault(c => c.ID == syscustomerid);
                    var vendor = model.CUS_Customer.FirstOrDefault(c => c.ID == vendorID);
                    var lstRate = model.OPS_DITORate.Where(c => lstRateID.Contains(c.ID)).ToList();
                    var mailTemplate = HelperSYSSetting.MailTemplate_GetBySYSCustomerID(model, MailTemplateCode.OPSTenderingDistributor, syscustomerid);
                    var mailSetting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, syscustomerid);
                    // Nếu vendor đã thiết lập mail => Gửi mail
                    if (vendor != null && !string.IsNullOrEmpty(vendor.Email) && customer != null)
                    {
                        string strContent = mailTemplate.Content;
                        string strDetail = mailTemplate.Details;
                        string strSubject = MailHelper.StringHTML(mailTemplate.Subject, delegate(MailTemplate obj)
                        {
                            switch (obj.Token)
                            {
                                default: break;
                            }
                        });

                        string strMail = MailHelper.StringHTML(strContent, delegate(MailTemplate obj)
                        {
                            switch (obj.Token)
                            {
                                case "VendorName": obj.HTML = vendor.CustomerName; break;
                                case "ExpiredTime": obj.HTML = lstRate.Where(c => c.LastRateTime.HasValue).OrderBy(c => c.LastRateTime).FirstOrDefault().LastRateTime.Value.ToString("dd/MM/yyyy HH:mm:ss"); break;
                                case "URLToTenderPage": obj.HTML = mailSetting.Website; break;
                                case "CustomerName": obj.HTML = customer.CustomerName; break;
                                case "Address": obj.HTML = customer.Address; break;
                                case "TelNo": obj.HTML = customer.TelNo; break;
                                case "Fax": obj.HTML = customer.Fax; break;
                                case "Email": obj.HTML = customer.Email; break;
                                case "Details":
                                    string htmlDetail = string.Empty;
                                    foreach (var rate in lstRate)
                                    {
                                        if (rate != null && !rate.IsSend && rate.VendorID.HasValue)
                                        {
                                            rate.IsSend = true;
                                            var objMaster = rate.OPS_DITOMaster;
                                            var lstGroup = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objMaster.ID);
                                            if (lstGroup != null && lstGroup.Count() > 0)
                                            {
                                                foreach (var group in lstGroup)
                                                {
                                                    htmlDetail += obj.HTML = MailHelper.StringHTML(strDetail, delegate(MailTemplate detail)
                                                    {
                                                        switch (detail.Token)
                                                        {
                                                            case "TripNo": detail.HTML = objMaster.Code; break;
                                                            case "TotalTon": detail.HTML = group.Ton.ToString("F3"); break;
                                                            case "TotalCBM": detail.HTML = group.CBM.ToString("F3"); break;
                                                            case "LocationFromName": detail.HTML = group.ORD_GroupProduct.CUS_Location.Code; break;
                                                            case "LocationFrom": detail.HTML = group.ORD_GroupProduct.CUS_Location.CAT_Location.Address; break;
                                                            case "LocationToCode": detail.HTML = group.ORD_GroupProduct.PartnerID.HasValue ? group.ORD_GroupProduct.CUS_Partner.CAT_Partner.Code : string.Empty; break;
                                                            case "LocationToName": detail.HTML = group.ORD_GroupProduct.PartnerID.HasValue ? group.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty; break;
                                                            case "LocationTo": detail.HTML = group.ORD_GroupProduct.CUS_Location1.CAT_Location.Address; break;
                                                            case "ETD": detail.HTML = objMaster.ETD.Value.ToString("dd/MM/yyyy HH:mm:ss"); break;
                                                            case "ETA": detail.HTML = objMaster.ETA.HasValue ? objMaster.ETA.Value.ToString("dd/MM/yyyy HH:mm:ss") : string.Empty; break;
                                                            case "Note": detail.HTML = group.ORD_GroupProduct.Description; break;
                                                        }
                                                    });
                                                }
                                            }
                                        }
                                    }
                                    obj.HTML = htmlDetail;
                                    break;
                            }
                        });

                        try
                        {
                            MailHelper.SendMail(mailSetting, vendor.Email, vendor.CustomerName, mailTemplate.CC, strSubject, strMail);
                        }
                        catch
                        {

                        }
                    }
                    else
                    {
                        // vendor chưa thiết lập mail => chỉ duyệt rate
                        foreach (var rate in lstRate)
                            rate.IsSend = true;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Barcode

        public DTOBarcode DIAppointment_RouteBarcode_SOList(string Barcode)
        {
            try
            {
                DTOSYSSetting setting = new DTOSYSSetting { CollectDataKM = 1 };
                string sKey = SYSSettingKey.System.ToString();

                DTOBarcode result = new DTOBarcode();
                result.DNCode = string.Empty;
                result.SOCode = string.Empty;
                result.Barcode = Barcode;
                result.DateDN = DateTime.Now.Date;
                result.ListGroup = null;
                using (var model = new DataEntities())
                {
                    if (!string.IsNullOrEmpty(Barcode))
                    {
                        var item = model.SYS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == Account.SYSCustomerID);
                        if (item != null)
                        {
                            if (!string.IsNullOrEmpty(item.Setting))
                            {
                                var data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(item.Setting);
                                if (data != null && data.Count > 0)
                                    setting = data.FirstOrDefault();
                            }
                        }

                        if (setting.PODBarcode == null)
                            setting.PODBarcode = new DTOSYSSetting_PODBarcode();

                        result.SOCode = Barcode.Substring(setting.PODBarcode.SOIndex, setting.PODBarcode.SOLength).ToUpper();
                        result.DNCode = Barcode.Substring(setting.PODBarcode.DNIndex, setting.PODBarcode.DNLength);

                        var query = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.ORD_GroupProduct.SOCode.ToLower() == result.SOCode.ToLower() && c.DNCode.ToLower() == result.DNCode.ToLower() && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOBarcodeGroup
                        {
                            DITOGroupProductID = c.ID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            Kg = c.Ton * 1000,
                            DNCode = c.DNCode,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            DateDN = c.DateDN,
                            IsNew = false
                        }).OrderBy(c => c.OrderCode).ToList();
                        if (query.Count > 0)
                        {
                            result.ListGroup = new List<DTOBarcodeGroup>();
                            result.ListCancel = new List<DTOBarcodeGroup>();
                            result.ListGroup.AddRange(query);
                            result.ErrorString = "Số SO đã nhập DN";
                            result.ListCancel = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.ORD_GroupProduct.SOCode.ToLower() == result.SOCode.ToLower() && string.IsNullOrEmpty(c.DNCode) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.DITOMasterID == null).Select(c => new DTOBarcodeGroup
                                {
                                    DITOGroupProductID = c.ID,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    SOCode = c.ORD_GroupProduct.SOCode,
                                    Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                    Kg = c.Ton * 1000,
                                    DNCode = c.DNCode,
                                    Note1 = c.Note1,
                                    Note2 = c.Note2,
                                    DateDN = c.DateDN,
                                    IsNew = false
                                }).ToList();
                            result.IsCancel = result.ListCancel.Count > 0;
                        }
                        else
                        {
                            query = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.ORD_GroupProduct.SOCode.ToLower() == result.SOCode.ToLower() && string.IsNullOrEmpty(c.DNCode)).Select(c => new DTOBarcodeGroup
                            {
                                DITOGroupProductID = c.ID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                Address = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                Kg = c.Ton * 1000,
                                Note1 = c.Note1,
                                Note2 = c.Note2,
                                DateDN = c.DateDN,
                                DNCode = string.Empty,
                                IsNew = false
                            }).OrderBy(c => c.OrderCode).ToList();
                            if (query.Count > 0)
                            {
                                result.ListGroup = new List<DTOBarcodeGroup>();
                                result.ListGroup.AddRange(query);
                            }
                            else
                                result.ErrorString = "Số SO không có";
                        }
                    }
                    else
                        result.ErrorString = "Sai định dạng Barcode";
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }

        }

        public void DIAppointment_RouteBarcode_SOSave(List<DTOBarcodeGroup> lst, bool IsNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var group in lst.GroupBy(c => c.DITOGroupProductID))
                    {
                        // 1 SO chỉ có 1 DN
                        if (group.Count() == 1)
                        {
                            var item = group.FirstOrDefault();
                            var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.DITOGroupProductID);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.DNCode = item.DNCode;
                                obj.Ton = obj.TonTranfer = obj.TonBBGN = item.Kg / 1000;
                                obj.DateDN = item.DateDN;
                                var exchange = model.ORD_Product.FirstOrDefault(c => c.GroupProductID == obj.OrderGroupProductID);
                                if (exchange != null)
                                {
                                    obj.CBM = obj.CBMTranfer = obj.CBMBBGN = exchange.ExchangeTon > 0 && exchange.ExchangeCBM.HasValue ? exchange.ExchangeCBM.Value * obj.Ton / exchange.ExchangeTon.Value : 0;
                                    obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = exchange.ExchangeTon > 0 && exchange.ExchangeQuantity.HasValue ? exchange.ExchangeQuantity.Value * obj.Ton / exchange.ExchangeTon.Value : 0;
                                }
                                if (IsNote)
                                {
                                    obj.Note1 = item.Note1;
                                    obj.Note2 = item.Note2;
                                }
                                // Update OPS_DITOProduct Quantity
                                var objPro = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == obj.ID);
                                if (objPro != null)
                                {
                                    var objORDPro = model.ORD_Product.FirstOrDefault(c => c.GroupProductID == obj.OrderGroupProductID);
                                    if (objORDPro != null)
                                    {
                                        if (objORDPro.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                            objPro.Quantity = objPro.QuantityBBGN = objPro.QuantityTranfer = obj.TonTranfer;
                                        if (objORDPro.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                            objPro.Quantity = objPro.QuantityBBGN = objPro.QuantityTranfer = obj.CBMTranfer;
                                        if (objORDPro.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                                            objPro.Quantity = objPro.QuantityBBGN = objPro.QuantityTranfer = obj.QuantityTranfer;
                                    }
                                }
                            }
                        }
                        else
                        {
                            foreach (var item in group)
                            {
                                if (!item.IsNew)
                                {
                                    var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.DITOGroupProductID);
                                    if (obj != null)
                                    {
                                        obj.ModifiedBy = Account.UserName;
                                        obj.ModifiedDate = DateTime.Now;
                                        obj.DNCode = item.DNCode;
                                        obj.DateDN = item.DateDN;
                                        obj.Ton = obj.TonTranfer = obj.TonBBGN = item.Kg / 1000;
                                        var exchange = model.ORD_Product.FirstOrDefault(c => c.GroupProductID == obj.OrderGroupProductID);
                                        if (exchange != null)
                                        {
                                            obj.CBM = obj.CBMTranfer = obj.CBMBBGN = exchange.ExchangeTon > 0 && exchange.ExchangeCBM.HasValue ? exchange.ExchangeCBM.Value * obj.Ton / exchange.ExchangeTon.Value : 0;
                                            obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = exchange.ExchangeTon > 0 && exchange.ExchangeQuantity.HasValue ? exchange.ExchangeQuantity.Value * obj.Ton / exchange.ExchangeTon.Value : 0;
                                        }
                                        if (IsNote)
                                        {
                                            obj.Note1 = item.Note1;
                                            obj.Note2 = item.Note2;
                                        }
                                        // Update OPS_DITOProduct Quantity
                                        var objPro = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == obj.ID);
                                        if (objPro != null)
                                        {
                                            var objORDPro = model.ORD_Product.FirstOrDefault(c => c.GroupProductID == obj.OrderGroupProductID);
                                            if (objORDPro != null)
                                            {
                                                if (objORDPro.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                                    objPro.Quantity = objPro.QuantityBBGN = objPro.QuantityTranfer = obj.TonTranfer;
                                                if (objORDPro.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                                    objPro.Quantity = objPro.QuantityBBGN = objPro.QuantityTranfer = obj.CBMTranfer;
                                                if (objORDPro.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                                                    objPro.Quantity = objPro.QuantityBBGN = objPro.QuantityTranfer = obj.QuantityTranfer;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    var parent = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.DITOGroupProductID);
                                    if (parent != null)
                                    {
                                        var exchange = model.ORD_Product.FirstOrDefault(c => c.GroupProductID == parent.OrderGroupProductID);
                                        if (exchange != null)
                                        {
                                            OPS_DITOGroupProduct obj = new OPS_DITOGroupProduct();
                                            obj.CreatedBy = Account.UserName;
                                            obj.CreatedDate = DateTime.Now;
                                            obj.DNCode = item.DNCode;
                                            obj.DateDN = item.DateDN;
                                            obj.Ton = obj.TonTranfer = obj.TonBBGN = item.Kg / 1000;
                                            obj.CBM = obj.CBMTranfer = obj.CBMBBGN = exchange.ExchangeTon > 0 && exchange.ExchangeCBM.HasValue ? exchange.ExchangeCBM.Value * obj.Ton / exchange.ExchangeTon.Value : 0;
                                            obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = exchange.ExchangeTon > 0 && exchange.ExchangeQuantity.HasValue ? exchange.ExchangeQuantity.Value * obj.Ton / exchange.ExchangeTon.Value : 0;
                                            obj.DateFromCome = parent.DateFromCome;
                                            obj.DateFromLeave = parent.DateFromLeave;
                                            obj.DateFromLoadEnd = parent.DateFromLoadEnd;
                                            obj.DateFromLoadStart = parent.DateFromLoadStart;
                                            obj.DateToCome = parent.DateToCome;
                                            obj.DateToLeave = parent.DateToLeave;
                                            obj.DateToLoadEnd = parent.DateToLoadEnd;
                                            obj.DateToLoadStart = parent.DateToLoadStart;
                                            obj.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                                            obj.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                            obj.GroupSort = parent.ORD_GroupProduct.OrderID + "_" + parent.ORD_GroupProduct.CUSRoutingID.Value + "_" + parent.OrderGroupProductID;
                                            obj.Note = parent.Note;
                                            obj.OrderGroupProductID = parent.OrderGroupProductID;
                                            obj.DateDN = parent.DateDN;
                                            obj.IsInput = true;
                                            if (IsNote)
                                            {
                                                obj.Note1 = item.Note1;
                                                obj.Note2 = item.Note2;
                                            }
                                            model.OPS_DITOGroupProduct.Add(obj);

                                            OPS_DITOProduct objPro = new OPS_DITOProduct();
                                            objPro.CreatedBy = Account.UserName;
                                            objPro.CreatedDate = DateTime.Now;
                                            objPro.OPS_DITOGroupProduct = obj;
                                            objPro.OrderProductID = exchange.ID;

                                            if (exchange.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                                objPro.Quantity = objPro.QuantityBBGN = objPro.QuantityTranfer = obj.TonTranfer;
                                            if (exchange.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                                objPro.Quantity = objPro.QuantityBBGN = objPro.QuantityTranfer = obj.CBMTranfer;
                                            if (exchange.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                                                objPro.Quantity = objPro.QuantityBBGN = objPro.QuantityTranfer = obj.QuantityTranfer;

                                            model.OPS_DITOProduct.Add(objPro);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region New Code Common.
        private string DI_GetLastCode(DataEntities model)
        {
            long idx = 1;
            var last = model.OPS_DITOMaster.OrderByDescending(c => c.ID).Select(c => new { c.ID }).FirstOrDefault();
            if (last != null)
                idx = Convert.ToInt64(last.ID) + 1;
            else
                idx = 1;
            return DICodePrefix + idx.ToString(DICodeNum);
        }

        private string CO_GetLastCode(DataEntities model)
        {
            long idx = 1;
            var last = model.OPS_COTOMaster.OrderByDescending(c => c.ID).Select(c => new { c.ID }).FirstOrDefault();
            if (last != null)
                idx = Convert.ToInt64(last.ID) + 1;
            else
                idx = 1;
            return COCodePrefix + idx.ToString(COCodeNum);
        }

        private void OPS_DI_Create(List<DTOOPS_DITOMaster> data)
        {

        }

        private void OPS_DI_Update(List<DTOOPS_DITOMaster> data)
        {

        }

        private void OPS_DI_Delete(DataEntities model, List<int> data)
        {
            foreach (var item in data)
            {
                var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item);
                if (obj != null)
                {
                    if (obj.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved)
                    {
                        if (obj.TransportModeID == -(int)SYSVarType.TransportModeFTL)
                        {
                            var SDATA = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID.HasValue && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();
                            var dataGop = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID.HasValue && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL).ToList();
                            foreach (var gop in dataGop)
                            {
                                gop.ModifiedBy = Account.UserName;
                                gop.ModifiedDate = DateTime.Now;
                                gop.DITOMasterID = null;
                                foreach (var product in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == gop.ID).ToList())
                                {
                                    foreach (var o in model.OPS_DITOProductPOD.Where(c => c.DITOProductID == product.ID).ToList())
                                        model.OPS_DITOProductPOD.Remove(o);
                                    foreach (var o in model.OPS_ExtReturnDetail.Where(c => c.DITOProductID == product.ID).ToList())
                                        model.OPS_ExtReturnDetail.Remove(o);
                                    foreach (var o in model.POD_DIProduct.Where(c => c.DITOProductID == product.ID).ToList())
                                        model.POD_DIProduct.Remove(o);
                                }
                            }
                            model.SaveChanges();
                            if (model.OPS_DITOGroupProduct.Count(c => c.DITOMasterID == obj.ID) > 0)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterPlanning;
                                obj.DriverID1 = null;
                                obj.VehicleID = null;
                                obj.VendorOfVehicleID = null;
                                model.OPS_DITORate.RemoveRange(model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID).ToList());
                                model.OPS_DITOLocation.RemoveRange(model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID).ToList());
                                OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                                model.SaveChanges();
                                HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                                HelperStatus.ORDOrder_Status(model, Account, SDATA);
                            }
                            else
                            {
                                model.OPS_DITORate.RemoveRange(model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID).ToList());
                                model.OPS_DITOLocation.RemoveRange(model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID).ToList());
                                model.OPS_DITOGroupProduct.RemoveRange(model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID == null).ToList());
                                OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                                foreach (var o in model.OPS_DITO.Where(c => c.DITOMasterID == obj.ID).ToList())
                                {
                                    foreach (var e in model.OPS_DITODetail.Where(c => c.DITOID == o.ID).ToList())
                                    {
                                        model.OPS_DITODetail.Remove(e);
                                    }
                                    model.OPS_DITO.Remove(o);
                                }
                                foreach (var o in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).ToList())
                                {
                                    o.ModifiedBy = Account.UserName;
                                    o.ModifiedDate = DateTime.Now;
                                    o.DITOMasterID = null;
                                    foreach (var p in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == o.ID).ToList())
                                    {
                                        foreach (var e in model.OPS_DITOProductPOD.Where(c => c.DITOProductID == p.ID).ToList())
                                            model.OPS_DITOProductPOD.Remove(e);
                                        foreach (var e in model.OPS_ExtReturnDetail.Where(c => c.DITOProductID == p.ID).ToList())
                                            model.OPS_ExtReturnDetail.Remove(e);
                                        foreach (var e in model.POD_DIProduct.Where(c => c.DITOProductID == p.ID).ToList())
                                            model.POD_DIProduct.Remove(e);
                                    }
                                }
                                model.OPS_DITOMaster.Remove(obj);
                                model.SaveChanges();
                                HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                                HelperStatus.ORDOrder_Status(model, Account, SDATA);
                            }
                        }
                        else
                        {
                            var SDATA = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID > 0).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();
                            foreach (var o in model.OPS_DITO.Where(c => c.DITOMasterID == obj.ID).ToList())
                            {
                                foreach (var e in model.OPS_DITODetail.Where(c => c.DITOID == o.ID).ToList())
                                {
                                    model.OPS_DITODetail.Remove(e);
                                }
                                model.OPS_DITO.Remove(o);
                            }
                            foreach (var o in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).ToList())
                            {
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.DITOMasterID = null;
                                foreach (var p in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == o.ID).ToList())
                                {
                                    foreach (var e in model.OPS_DITOProductPOD.Where(c => c.DITOProductID == p.ID).ToList())
                                        model.OPS_DITOProductPOD.Remove(e);
                                    foreach (var e in model.OPS_ExtReturnDetail.Where(c => c.DITOProductID == p.ID).ToList())
                                        model.OPS_ExtReturnDetail.Remove(e);
                                    foreach (var e in model.POD_DIProduct.Where(c => c.DITOProductID == p.ID).ToList())
                                        model.POD_DIProduct.Remove(e);
                                }
                            }
                            model.OPS_DITORate.RemoveRange(model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID).ToList());
                            model.OPS_DITOLocation.RemoveRange(model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID).ToList());
                            model.OPS_DITOGroupProduct.RemoveRange(model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID == null).ToList());
                            OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                            model.OPS_DITOMaster.Remove(obj);
                            model.SaveChanges();
                            HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                            HelperStatus.ORDOrder_Status(model, Account, SDATA);
                        }
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa! Chỉ được xóa chuyến đang kế hoạch.");
                    }
                }
            }
        }

        private void OPS_DI_ToOPS(DataEntities model, List<int> data)
        {
            foreach (var item in data)
            {
                var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item);
                if (obj != null)
                {
                    if (obj.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterTendered)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;

                        //Xóa phụ xe.
                        obj.DriverID2 = null;
                        obj.DriverTel2 = string.Empty;
                        obj.DriverName2 = string.Empty;
                        obj.TypeOfDriverID2 = null;

                        foreach (var o in model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID && c.IsSend == true).ToList())
                        {
                            o.ModifiedDate = DateTime.Now;
                            o.ModifiedBy = Account.UserName;
                            o.IsAccept = false;
                        }
                        model.OPS_DITORate.RemoveRange(model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID && c.IsSend == false).ToList());

                        foreach (var o in model.OPS_DITO.Where(c => c.DITOMasterID == obj.ID).ToList())
                        {
                            foreach (var e in model.OPS_DITODetail.Where(c => c.DITOID == o.ID).ToList())
                            {
                                model.OPS_DITODetail.Remove(e);
                            }
                            model.OPS_DITO.Remove(o);
                        }
                        foreach (var o in model.CAT_Trouble.Where(c => c.DITOMasterID == obj.ID).ToList())
                        {
                            model.CAT_Trouble.Remove(o);
                        }
                        foreach (var o in model.OPS_DITOStation.Where(c => c.DITOMasterID == obj.ID).ToList())
                        {
                            model.OPS_DITOStation.Remove(o);
                        }
                        OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                        model.SaveChanges();

                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster, null);

                        var SDATA = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không thể trả về! Chỉ được trả về chuyến đã duyệt.");
                    }
                }
            }
        }
        
        public void OPS_DI_ToMON(DataEntities model, List<int> data)
        {
            foreach (var item in data)
            {
                var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item);
                if (obj != null)
                {
                    if (obj.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved)
                    {
                        if (model.OPS_DITOGroupProduct.Count(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel) == 0)
                            throw FaultHelper.BusinessFault(null, null, "Không có chi tiết hàng hóa. Không thể duyệt. Chuyến " + obj.Code);
                        if (obj.ETA == null || obj.ETD == null)
                            throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA. Không thể duyệt. Chuyến " + obj.Code);
                        if (obj.VehicleID == null && obj.VehicleID <= 2)
                            throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Chưa chọn xe. Chuyến " + obj.Code);
                        if (obj.ETD >= obj.ETA)
                            throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA. Không thể duyệt. Chuyến " + obj.Code);
                        if ((obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID) && string.IsNullOrEmpty(obj.DriverName1))
                            throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin tài xế. Không thể duyệt. Chuyến " + obj.Code);

                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterTendered;

                        var objFLM = model.FLM_VehiclePlan.Where(c => c.VehicleID == obj.VehicleID && c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverEx && c.DateFrom < obj.ETA && c.DateTo > obj.ETD).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objFLM != null)
                        {
                            obj.DriverID2 = objFLM.DriverID;
                            obj.DriverName2 = objFLM.FLM_Driver.CAT_Driver.LastName + " " + objFLM.FLM_Driver.CAT_Driver.FirstName;
                            obj.DriverTel2 = objFLM.FLM_Driver.CAT_Driver.Cellphone;
                            obj.TypeOfDriverID2 = -(int)SYSVarType.TypeOfDriverEx;
                        }
                        else if (obj.CAT_Vehicle.AssistantID > 0)
                        {
                            obj.DriverID2 = obj.CAT_Vehicle.AssistantID.Value;
                            obj.DriverName2 = obj.CAT_Vehicle.FLM_Driver1.CAT_Driver.LastName + " " + obj.CAT_Vehicle.FLM_Driver1.CAT_Driver.FirstName;
                            obj.DriverTel2 = obj.CAT_Vehicle.FLM_Driver1.CAT_Driver.Cellphone;
                            obj.TypeOfDriverID2 = -(int)SYSVarType.TypeOfDriverEx;
                        }

                        //Gom các nhóm hàng cùng chi tiết.
                        List<int> dataGop = new List<int>();
                        while (model.OPS_DITOGroupProduct.FirstOrDefault(c => !dataGop.Contains(c.ID) && c.OrderGroupProductID > 0 && c.DITOMasterID == obj.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel) != null)
                        {
                            var objGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => !dataGop.Contains(c.ID) && c.OrderGroupProductID > 0 && c.DITOMasterID == obj.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                            dataGop.Add(objGop.ID);
                            if (model.OPS_DITOGroupProduct.Count(c => c.DITOMasterID == obj.ID && c.ID != objGop.ID && c.OrderGroupProductID == objGop.OrderGroupProductID && c.DNCode == objGop.DNCode && c.Note == objGop.Note && c.Note1 == objGop.Note1 && c.Note2 == objGop.Note2) > 0)
                            {
                                objGop.ModifiedBy = Account.UserName;
                                objGop.ModifiedDate = DateTime.Now;
                                var dataDel = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.ID != objGop.ID && c.OrderGroupProductID == objGop.OrderGroupProductID && c.DNCode == objGop.DNCode && c.Note == objGop.Note && c.Note1 == objGop.Note1 && c.Note2 == objGop.Note2).ToList();
                                foreach (var o in dataDel)
                                {
                                    objGop.TonBBGN = objGop.TonTranfer = objGop.Ton = Math.Round(objGop.Ton + o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                    objGop.CBMBBGN = objGop.CBMTranfer = objGop.CBM = Math.Round(objGop.CBM + o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                    objGop.QuantityBBGN = objGop.QuantityLoading = objGop.QuantityTranfer = objGop.Quantity = Math.Round(objGop.Quantity + o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                    foreach (var i in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == o.ID))
                                    {
                                        model.OPS_DITOProduct.Remove(i);
                                    }
                                    model.OPS_DITOGroupProduct.Remove(o);
                                }
                                var objProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == objGop.ID);
                                if (objProduct != null)
                                {
                                    objProduct.ModifiedBy = Account.UserName;
                                    objProduct.ModifiedDate = DateTime.Now;
                                    objProduct.Quantity = objProduct.QuantityBBGN = objProduct.QuantityTranfer = objGop.Quantity;
                                    switch (objProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID)
                                    {
                                        case -(int)SYSVarType.TypeOfPackingGOPTon:
                                            objProduct.Quantity = objProduct.QuantityBBGN = objProduct.QuantityTranfer = objGop.Ton;
                                            break;
                                        case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                            objProduct.Quantity = objProduct.QuantityBBGN = objProduct.QuantityTranfer = objGop.CBM;
                                            break;
                                    }
                                }
                                model.SaveChanges();
                            }
                        }

                        var sOrder = model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID).OrderByDescending(c => c.SortOrder).Select(c => c.SortOrder).FirstOrDefault();
                        var objRate = model.OPS_DITORate.FirstOrDefault(c => c.DITOMasterID == obj.ID && c.VendorID == obj.VendorOfVehicleID && c.IsSend == true);
                        if (objRate == null)
                        {
                            objRate = new OPS_DITORate();
                            objRate.CreatedBy = Account.UserName;
                            objRate.CreatedDate = DateTime.Now;
                            objRate.DITOMasterID = obj.ID;
                            objRate.VendorID = obj.VendorOfVehicleID;
                            objRate.SortOrder = sOrder > 0 ? sOrder + 1 : 1;
                            objRate.IsSend = true;
                            objRate.Debit = 0;
                            objRate.IsManual = false;
                            objRate.FirstRateTime = DateTime.Now;
                            objRate.LastRateTime = DateTime.Now.Add(TimeSpan.FromHours(obj.RateTime ?? 2));

                            model.OPS_DITORate.Add(objRate);
                        }
                        else
                        {
                            objRate.ModifiedBy = Account.UserName;
                            objRate.ModifiedDate = DateTime.Now;
                        }
                        objRate.IsAccept = true;
                        model.SaveChanges();

                        var dataLocation = model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID).Select(c => new
                        {
                            c.ID,
                            c.LocationID,
                            c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                        for (var i = 1; i < dataLocation.Count; i++)
                        {
                            OPS_DITO objTO = new OPS_DITO();
                            objTO.CreatedDate = DateTime.Now;
                            objTO.CreatedBy = Account.UserName;
                            objTO.IsOPS = true;
                            objTO.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                            objTO.SortOrder = i;
                            objTO.LocationToID = dataLocation[i].LocationID.Value;
                            objTO.LocationFromID = dataLocation[i - 1].LocationID.Value;
                            objTO.DITOMasterID = obj.ID;
                            model.OPS_DITO.Add(objTO);
                        }

                        //Update VendorLoad & Unload
                        foreach (var gop in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID))
                        {
                            gop.ModifiedBy = Account.UserName;
                            gop.ModifiedDate = DateTime.Now;
                            gop.VendorLoadID = gop.VendorUnLoadID = obj.VendorOfVehicleID;
                            // Tìm xem có thiết lập vendor bốc xếp cho điểm này
                            var venLocation = model.CUS_Location.FirstOrDefault(c => c.CustomerID != obj.VendorOfVehicleID && c.CustomerID != gop.ORD_GroupProduct.ORD_Order.CustomerID && c.LocationID == gop.ORD_GroupProduct.CUS_Location.LocationID && c.IsVendorLoad == true);
                            if (venLocation != null)
                                gop.VendorLoadID = venLocation.CustomerID;
                            venLocation = model.CUS_Location.FirstOrDefault(c => c.CustomerID != obj.VendorOfVehicleID && c.CustomerID != gop.ORD_GroupProduct.ORD_Order.CustomerID && c.LocationID == gop.ORD_GroupProduct.CUS_Location1.LocationID && c.IsVendorUnLoad == true);
                            if (venLocation != null)
                                gop.VendorUnLoadID = venLocation.CustomerID;
                        }
                        model.SaveChanges();

                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                        var SDATA = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Chỉ được duyệt các chuyến đang lập kế hoạch.");
                    }
                }
            }
        }
                
        private DTOOPSCOTOMaster OPS_CO_Create(DataEntities model, DTOOPSCOTOMaster master)
        {
            if (master.ListCOContainer == null || master.ListCOContainer.Count == 0)
                throw FaultHelper.BusinessFault(null, null, "Không có dữ liệu container");
            else
            {
                var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == master.ID);
                if (objMaster == null)
                {
                    objMaster = new OPS_COTOMaster();
                    objMaster.CreatedBy = Account.UserName;
                    objMaster.CreatedDate = DateTime.Now;
                    objMaster.SYSCustomerID = Account.SYSCustomerID;

                    objMaster.Code = CO_GetLastCode(model);
                    objMaster.IsHot = false;
                    objMaster.RateTime = 0;
                    objMaster.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterApproved;

                    model.OPS_COTOMaster.Add(objMaster);
                }
                else
                {
                    objMaster.ModifiedBy = Account.UserName;
                    objMaster.ModifiedDate = DateTime.Now;
                }

                objMaster.SortOrder = master.SortOrder;
                objMaster.VehicleID = master.VehicleID;
                objMaster.VendorOfVehicleID = master.VendorOfVehicleID;
                objMaster.RomoocID = master.RomoocID;
                objMaster.VendorOfRomoocID = master.VendorOfRomoocID;
                objMaster.DriverID1 = master.DriverID1;
                objMaster.DriverID2 = master.DriverID2;
                objMaster.DriverName1 = master.DriverName1;
                objMaster.DriverName2 = master.DriverName2;
                objMaster.DriverCard1 = master.DriverCard1;
                objMaster.DriverCard2 = master.DriverCard2;
                objMaster.DriverTel1 = master.DriverTel1;
                objMaster.DriverTel2 = master.DriverTel2;
                objMaster.ApprovedBy = master.ApprovedBy;
                objMaster.ApprovedDate = master.ApprovedDate;
                objMaster.GroupOfVehicleID = master.GroupOfVehicleID;
                objMaster.RateTime = master.RateTime;
                objMaster.ETD = master.ETD;
                objMaster.ETA = master.ETA;
                objMaster.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;

                OPS_CheckingTime(model, OPS_SystemSetting_Get(model), objMaster.ID, objMaster.VehicleID, objMaster.RomoocID, objMaster.ETD, objMaster.ETA, true);

                objMaster.DateConfig = master.ETD;
                objMaster.Note = master.Note;
                objMaster.IsBidding = master.IsBidding;
                objMaster.BiddingID = master.BiddingID;
                objMaster.KM = master.KM;
                objMaster.TransportModeID = master.TransportModeID;
                objMaster.TypeOfOrderID = master.TypeOfOrderID;
                objMaster.ContractID = master.ContractID;
                objMaster.IsCreateContainer = master.IsCreateContainer;

                model.SaveChanges();
                objMaster.Code = COCodePrefix + objMaster.ID.ToString(COCodeNum);
                model.SaveChanges();

                foreach (var item in model.OPS_COTO.Where(c => c.COTOMasterID == objMaster.ID).ToList())
                {
                    foreach (var o in model.OPS_COTODetail.Where(c => c.COTOID == item.ID).ToList())
                    {
                        model.OPS_COTODetail.Remove(o);
                    }
                    model.OPS_COTO.Remove(item);
                }
                model.OPS_COTORate.RemoveRange(objMaster.OPS_COTORate);
                model.OPS_COTOStation.RemoveRange(objMaster.OPS_COTOStation);
                model.OPS_COTOLocation.RemoveRange(objMaster.OPS_COTOLocation);
                model.SaveChanges();

                //Location
                foreach (var item in master.ListCOLocation)
                {
                    var objCAT = model.CAT_Location.FirstOrDefault(c => c.ID == item.LocationID);
                    if (objCAT != null)
                    {
                        OPS_COTOLocation obj = new OPS_COTOLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.LocationID = item.LocationID;
                        obj.SortOrder = item.SortOrder;
                        obj.COTOMasterID = objMaster.ID;
                        obj.Comment = item.Comment;
                        obj.COTOLocationStatusID = -(int)SYSVarType.COTOLocationStatusPlan;
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID;
                        obj.DateComeEstimate = item.DateComeEstimate;
                        if (obj.DateComeEstimate != null)
                        {
                            obj.DateLeaveEstimate = obj.DateComeEstimate;
                            foreach (var o in master.ListCOContainer)
                            {
                                if (o.LocationFromID == item.LocationID && objCAT.LoadTimeCO.HasValue)
                                {
                                    obj.DateLeaveEstimate = obj.DateLeaveEstimate.Value.AddHours(objCAT.LoadTimeCO.Value);
                                }
                                if (o.LocationToID == item.LocationID && objCAT.UnLoadTimeCO.HasValue)
                                {
                                    obj.DateLeaveEstimate = obj.DateLeaveEstimate.Value.AddHours(objCAT.UnLoadTimeCO.Value);
                                }
                            }
                        }
                        model.OPS_COTOLocation.Add(obj);
                    }
                }
                //Container
                foreach (var item in master.ListCOContainer)
                {
                    var obj = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.ParentID == null)
                        {
                            var obj1 = new OPS_COTOContainer();
                            obj1.CreatedBy = Account.UserName;
                            obj1.CreatedDate = DateTime.Now;
                            obj1.ETD = obj.ETD;
                            obj1.ETA = obj.ETA;
                            obj1.SortOrder = obj.SortOrder;
                            obj1.COTOMasterID = obj.COTOMasterID;
                            obj1.IsSwap = obj.IsSwap;
                            obj1.SwapID = obj.SwapID;
                            obj1.IsSplit = obj.IsSplit;
                            obj1.TypeOfStatusContainerID = obj.TypeOfStatusContainerID;
                            obj1.ETDStart = obj.ETDStart;
                            obj1.ETAStart = obj.ETAStart;
                            obj1.DateFromCome = obj.DateFromCome;
                            obj1.DateFromLeave = obj.DateFromLeave;
                            obj1.DateToCome = obj.DateToCome;
                            obj1.DateToLeave = obj.DateToLeave;
                            obj1.TypeOfStatusContainerPODID = obj.TypeOfStatusContainerPODID;
                            obj1.CATRoutingID = obj.CATRoutingID;
                            obj1.InvoiceNo = obj.InvoiceNo;
                            obj1.InvoiceBy = obj.InvoiceBy;
                            obj1.IsInput = obj.IsInput;
                            obj1.OPSContainerID = obj.OPSContainerID;
                            obj1.CreateByMasterID = objMaster.ID;
                            obj1.COTOMasterID = objMaster.ID;

                            var obj2 = new OPS_COTOContainer();
                            obj2.CreatedBy = Account.UserName;
                            obj2.CreatedDate = DateTime.Now;
                            obj2.ETD = obj.ETD;
                            obj2.ETA = obj.ETA;
                            obj2.SortOrder = obj.SortOrder;
                            obj2.COTOMasterID = obj.COTOMasterID;
                            obj2.IsSwap = obj.IsSwap;
                            obj2.SwapID = obj.SwapID;
                            obj2.IsSplit = obj.IsSplit;
                            obj2.TypeOfStatusContainerID = obj.TypeOfStatusContainerID;
                            obj2.ETDStart = obj.ETDStart;
                            obj2.ETAStart = obj.ETAStart;
                            obj2.DateFromCome = obj.DateFromCome;
                            obj2.DateFromLeave = obj.DateFromLeave;
                            obj2.DateToCome = obj.DateToCome;
                            obj2.DateToLeave = obj.DateToLeave;
                            obj2.TypeOfStatusContainerPODID = obj.TypeOfStatusContainerPODID;
                            obj2.CATRoutingID = obj.CATRoutingID;
                            obj2.InvoiceNo = obj.InvoiceNo;
                            obj2.InvoiceBy = obj.InvoiceBy;
                            obj2.IsInput = obj.IsInput;
                            obj2.OPSContainerID = obj.OPSContainerID;
                            obj2.CreateByMasterID = objMaster.ID;
                            obj2.COTOMasterID = objMaster.ID;

                            if (obj.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXEmpty || obj.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLOGetEmpty)
                            {
                                var objG = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetRomooc);
                                if (objG == null)
                                    objG = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty && c.SortOrder < 2);
                                if (objG != null)
                                {
                                    obj.IsSplit = true;
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;

                                    obj1.LocationFromID = objG.LocationID.Value;
                                    obj1.LocationToID = obj.LocationFromID;
                                    obj1.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerGetEmpty;
                                    obj1.OPS_COTOContainer2 = obj;
                                    model.OPS_COTOContainer.Add(obj1);

                                    obj2.LocationFromID = obj.LocationFromID;
                                    obj2.LocationToID = obj.LocationToID;
                                    obj2.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerShipEmpty;
                                    obj2.OPS_COTOContainer2 = obj;
                                    model.OPS_COTOContainer.Add(obj2);
                                }
                                else
                                {
                                    obj.COTOMasterID = objMaster.ID;
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                            }

                            else if (obj.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXLaden)
                            {
                                obj.COTOMasterID = objMaster.ID;
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;

                                var objR = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationReturnRomooc);
                                if (objR != null)
                                {
                                    obj1.LocationFromID = obj.LocationToID;
                                    obj1.LocationToID = objR.LocationID.Value;
                                    obj1.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerReturnRomooc;
                                    model.OPS_COTOContainer.Add(obj1);

                                    var objE = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty && c.SortOrder > 1);
                                    if (objE != null)
                                    {
                                        obj2.LocationFromID = objR.LocationID.Value;
                                        obj2.LocationToID = objE.LocationID.Value;
                                        obj2.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerStop;
                                        model.OPS_COTOContainer.Add(obj2);
                                    }
                                }
                                else
                                {
                                    var objE = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty && c.SortOrder > 1);
                                    if (objE != null)
                                    {
                                        obj2.LocationFromID = obj.LocationToID;
                                        obj2.LocationToID = objE.LocationID.Value;
                                        obj2.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerStop;
                                        model.OPS_COTOContainer.Add(obj2);
                                    }
                                }
                            }

                            else if (obj.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerIMLaden)
                            {
                                var objG = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetRomooc);
                                if (objG == null)
                                    objG = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty && c.SortOrder < 2);
                                if (objG != null)
                                {
                                    obj.IsSplit = true;
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;

                                    obj1.LocationFromID = objG.LocationID.Value;
                                    obj1.LocationToID = obj.LocationFromID;
                                    obj1.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerGetLaden;
                                    obj1.OPS_COTOContainer2 = obj;
                                    model.OPS_COTOContainer.Add(obj1);

                                    obj2.LocationFromID = obj.LocationFromID;
                                    obj2.LocationToID = obj.LocationToID;
                                    obj2.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerShipLaden;
                                    obj2.OPS_COTOContainer2 = obj;
                                    model.OPS_COTOContainer.Add(obj2);
                                }
                                else
                                {
                                    obj.COTOMasterID = objMaster.ID;
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                            }

                            else if (obj.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerIMEmpty || obj.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLOReturnEmpty)
                            {
                                obj.COTOMasterID = objMaster.ID;
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;

                                var objR = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationReturnRomooc);
                                if (objR != null)
                                {
                                    obj1.LocationFromID = obj.LocationToID;
                                    obj1.LocationToID = objR.LocationID.Value;
                                    obj1.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerReturnRomooc;
                                    model.OPS_COTOContainer.Add(obj1);

                                    var objE = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty && c.SortOrder > 1);
                                    if (objE != null)
                                    {
                                        obj2.LocationFromID = objR.LocationID.Value;
                                        obj2.LocationToID = objE.LocationID.Value;
                                        obj2.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerStop;
                                        model.OPS_COTOContainer.Add(obj2);
                                    }
                                }
                                else
                                {
                                    var objE = master.ListCOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty && c.SortOrder > 1);
                                    if (objE != null)
                                    {
                                        obj2.LocationFromID = obj.LocationToID;
                                        obj2.LocationToID = objE.LocationID.Value;
                                        obj2.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerStop;
                                        model.OPS_COTOContainer.Add(obj2);
                                    }
                                }
                            }

                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                                obj.COTOMasterID = objMaster.ID;
                            }
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                            obj.COTOMasterID = objMaster.ID;
                        }
                    }
                }
                model.SaveChanges();

                master.ID = objMaster.ID;
                master.StatusOfCOTOMasterID = objMaster.StatusOfCOTOMasterID;


                return master;
            }
        }

        private void OPS_CO_Delete(DataEntities model, List<int> data)
        {
            foreach (var item in data)
            {
                var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item);
                if (obj != null)
                {
                    if (obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved)
                    {
                        var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                        List<int> dataP = new List<int>();
                        foreach (var o in model.OPS_COTOContainer.Where(c => c.CreateByMasterID == obj.ID).ToList())
                        {
                            if (o.ParentID > 0)
                                dataP.Add(o.ParentID.Value);
                            model.OPS_COTOContainer.Remove(o);
                        }
                        foreach (var o in model.OPS_COTOContainer.Where(c => dataP.Contains(c.ID)).ToList())
                        {
                            o.IsSplit = false;
                        }
                        foreach (var o in model.OPS_COTOLocation.Where(c => c.COTOMasterID == obj.ID).ToList())
                        {
                            model.OPS_COTOLocation.Remove(o);
                        }
                        foreach (var o in model.OPS_COTOStation.Where(c => c.COTOMasterID == obj.ID).ToList())
                        {
                            model.OPS_COTOStation.Remove(o);
                        }
                        foreach (var o in model.OPS_COTORate.Where(c => c.COTOMasterID == obj.ID).ToList())
                        {
                            model.OPS_COTORate.Remove(o);
                        }
                        foreach (var o in model.OPS_COTO.Where(c => c.COTOMasterID == obj.ID).ToList())
                        {
                            foreach (var e in model.OPS_COTODetail.Where(c => c.COTOID == o.ID).ToList())
                            {
                                model.OPS_COTODetail.Remove(e);
                            }
                            model.OPS_COTO.Remove(o);
                        }
                        OPS_FIN_Delete(model, obj.ID, -1, -1, -1);
                        model.OPS_COTOMaster.Remove(obj);
                        model.SaveChanges();
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetCOTOMaster);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa! Chỉ được xóa các chuyến đang lập kế hoạch.");
                    }
                }
            }
        }

        private void OPS_CO_ToMON(DataEntities model, List<int> data)
        {
            foreach (var item in data)
            {
                var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item);
                if (obj != null)
                {
                    if (obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved)
                    {
                        if (obj.ETD == null || obj.ETA == null)
                            throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA. Không thể duyệt. Chuyến " + obj.Code);
                        if (obj.ETD >= obj.ETA)
                            throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA. Không thể duyệt. Chuyến " + obj.Code);
                        if (obj.VehicleID == null || obj.RomoocID == null || obj.VehicleID <= 2)
                            throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Nhập thông tin đầu kéo hoặc romooc. Chuyến " + obj.Code);
                        if ((obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID) && string.IsNullOrEmpty(obj.DriverName1))
                            throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin tài xế. Không thể duyệt. Chuyến " + obj.Code);
                        if (obj.VehicleID == null || obj.VehicleID <= 2)
                            throw FaultHelper.BusinessFault(null, null, "Chưa nhập xe. Không thể duyệt. Chuyến " + obj.Code);

                        var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                        OPS_CO_Document_CheckInspection(model, SDATA);

                        //Update COTOMaster
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterTendered;
                        model.SaveChanges();

                        //Update Rate
                        var sOrder = model.OPS_COTORate.Where(c => c.COTOMasterID == obj.ID).OrderByDescending(c => c.SortOrder).Select(c => c.SortOrder).FirstOrDefault();
                        var objRate = model.OPS_COTORate.FirstOrDefault(c => c.COTOMasterID == obj.ID && c.VendorID == obj.VendorOfVehicleID && c.IsSend == true);
                        if (objRate == null)
                        {
                            objRate = new OPS_COTORate();
                            objRate.CreatedBy = Account.UserName;
                            objRate.CreatedDate = DateTime.Now;
                            objRate.COTOMasterID = item;
                            objRate.VendorID = obj.VendorOfVehicleID;
                            objRate.SortOrder = sOrder > 0 ? sOrder + 1 : 1;
                            objRate.IsSend = true;
                            objRate.Debit = 0;
                            objRate.IsManual = false;
                            objRate.FirstRateTime = DateTime.Now;
                            objRate.LastRateTime = DateTime.Now.Add(TimeSpan.FromHours(obj.RateTime ?? 2));

                            model.OPS_COTORate.Add(objRate);
                        }
                        else
                        {
                            objRate.ModifiedBy = Account.UserName;
                            objRate.ModifiedDate = DateTime.Now;
                        }
                        objRate.IsAccept = true;
                        model.SaveChanges();

                        HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetCOTOMaster);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Chỉ được duyệt các chuyến đang lập kế hoạch.");
                    }
                }
            }
        }

        private void OPS_CO_ToOPS(DataEntities model, List<int> data)
        {
            foreach (var item in data)
            {

                var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item);
                if (obj != null)
                {
                    if (obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterTendered)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterApproved;

                        foreach (var o in model.OPS_COTORate.Where(c => c.COTOMasterID == obj.ID && c.IsSend == true).ToList())
                        {
                            o.ModifiedDate = DateTime.Now;
                            o.ModifiedBy = Account.UserName;
                            o.IsAccept = false;
                        }
                        model.OPS_COTORate.RemoveRange(model.OPS_COTORate.Where(c => c.COTOMasterID == obj.ID && c.IsSend == false).ToList());
                        foreach (var o in model.CAT_Trouble.Where(c => c.COTOMasterID == obj.ID).ToList())
                        {
                            model.CAT_Trouble.Remove(o);
                        }
                        foreach (var o in model.OPS_COTOStation.Where(c => c.COTOMasterID == obj.ID).ToList())
                        {
                            model.OPS_COTOStation.Remove(o);
                        }
                        OPS_FIN_Delete(model, obj.ID, -1, -1, -1);
                        model.SaveChanges();

                        var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();

                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không thể trả về! Chỉ được trả về chuyến đã duyệt.");
                    }
                }
            }
        }

        private void OPS_CO_Document_CheckInspection(DataEntities model, List<int> data)
        {
            try
            {
                List<string> errors = new List<string>();
                var dataOrd = model.ORD_Order.Where(c => data.Contains(c.ID)).Select(c => new
                {
                    c.ID,
                    c.Code
                }).ToList();
                foreach (var item in dataOrd)
                {
                    if (model.ORD_Document.Count(c => c.OrderID == item.ID) > 0)
                    {
                        if (model.ORD_Document.Count(c => c.OrderID == item.ID) != model.ORD_Document.Count(c => c.OrderID == item.ID && c.DocumentStatusID == -(int)SYSVarType.DocumentStatusComplete))
                            errors.Add(item.Code);
                    }
                }
                if (errors.Count > 0)
                    throw FaultHelper.BusinessFault(null, null, "Các đơn " + string.Join(", ", errors) + " chưa được kiểm hóa xong!");
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void OPS_FIN_Delete(DataEntities model, int cotoMasterID, int ditoMasterID, int gopID, int conID)
        {
            foreach (var item in model.FIN_Temp.Where(c => c.DITOMasterID == ditoMasterID))
            {
                model.FIN_Temp.Remove(item);
            }
            foreach (var item in model.FIN_PL.Where(c => c.DITOMasterID == ditoMasterID))
            {
                foreach (var o in model.FIN_PLDetails.Where(c => c.PLID == item.ID))
                {
                    foreach (var e in model.FIN_PLContainer.Where(c => c.PLDetailID == o.ID))
                    {
                        model.FIN_PLContainer.Remove(e);
                    }
                    foreach (var e in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == o.ID))
                    {
                        model.FIN_PLGroupOfProduct.Remove(e);
                    }
                    model.FIN_PLDetails.Remove(o);
                }
                model.FIN_PL.Remove(item);
            }
            foreach (var item in model.FIN_PL.Where(c => c.COTOMasterID == cotoMasterID))
            {
                foreach (var o in model.FIN_PLDetails.Where(c => c.PLID == item.ID))
                {
                    foreach (var e in model.FIN_PLContainer.Where(c => c.PLDetailID == o.ID))
                    {
                        model.FIN_PLContainer.Remove(e);
                    }
                    foreach (var e in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == o.ID))
                    {
                        model.FIN_PLGroupOfProduct.Remove(e);
                    }
                    model.FIN_PLDetails.Remove(o);
                }
                model.FIN_PL.Remove(item);
            }
            foreach (var item in model.KPI_KPITime.Where(c => c.COTOMasterID == cotoMasterID))
            {
                model.KPI_KPITime.Remove(item);
            }
            foreach (var item in model.KPI_VENTime.Where(c => c.COTOMasterID == cotoMasterID))
            {
                model.KPI_VENTime.Remove(item);
            }
            foreach (var item in model.KPI_VENTime.Where(c => c.DITOMasterID == ditoMasterID))
            {
                model.KPI_VENTime.Remove(item);
            }
            foreach (var item in model.KPI_KPITime.Where(c => c.DITOMasterID == ditoMasterID))
            {
                model.KPI_KPITime.Remove(item);
            }
            foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == ditoMasterID))
            {
                foreach (var o in model.FIN_Temp.Where(c => c.DITOGroupProductID == item.ID))
                {
                    model.FIN_Temp.Remove(o);
                }
                foreach (var o in model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID == item.ID))
                {
                    foreach (var e in model.FIN_PLDetails.Where(c => c.PLID == o.PLDetailID))
                        model.FIN_PLDetails.Remove(e);

                    model.FIN_PLGroupOfProduct.Remove(o);
                }
                foreach (var o in model.FIN_ManualFix.Where(c => c.DITOGroupProductID == item.ID))
                {
                    model.FIN_ManualFix.Remove(o);
                }
                foreach (var o in model.KPI_KPITime.Where(c => c.DITOGroupProductID == item.ID))
                {
                    model.KPI_KPITime.Remove(o);
                }
                foreach (var o in model.KPI_VENTime.Where(c => c.DITOGroupProductID == item.ID))
                {
                    model.KPI_VENTime.Remove(o);
                }
            }
            foreach (var item in model.OPS_COTOContainer.Where(c => c.COTOMasterID == cotoMasterID))
            {
                foreach (var o in model.FIN_Temp.Where(c => c.COTOContainerID == item.ID))
                {
                    model.FIN_Temp.Remove(o);
                }
                foreach (var o in model.FIN_PLContainer.Where(c => c.COTOContainerID == item.ID))
                {
                    foreach (var e in model.FIN_PLDetails.Where(c => c.PLID == o.PLDetailID))
                        model.FIN_PLDetails.Remove(e);

                    model.FIN_PLContainer.Remove(o);
                }
            }
            foreach (var item in model.WFL_PacketDetail.Where(c => c.DITOMasterID == ditoMasterID))
            {
                model.WFL_PacketDetail.Remove(item);
            }
            foreach (var item in model.WFL_PacketDetail.Where(c => c.COTOMasterID == cotoMasterID))
            {
                model.WFL_PacketDetail.Remove(item);
            }
        }

        private void OPS_CheckingTime(DataEntities model, DTOSYSSetting objSetting, int mID, int? vehicleID, int? romoocID, DateTime? ETD, DateTime? ETA, bool isContainer)
        {
            try
            {
                if (objSetting != null && ETA.HasValue && ETD.HasValue)
                {
                    var strETD = String.Format("{0:d/M HH:mm}", ETD.Value);
                    var strETA = String.Format("{0:d/M HH:mm}", ETA.Value);

                    if (objSetting.HasConstraintTimeOPS)
                    {
                        if (isContainer)
                        {
                            var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehicleID);
                            if (vehicleID > 0 && objVehicle == null)
                                throw FaultHelper.BusinessFault(null, null, "Đầu kéo không tồn tại.");
                            var objRomooc = model.CAT_Vehicle.FirstOrDefault(c => c.ID == romoocID);
                            if (romoocID > 0 && objVehicle == null)
                                throw FaultHelper.BusinessFault(null, null, "Romooc không tồn tại.");

                            var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == vehicleID
                                && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster && c.ReferID != mID
                              && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                            if (objV != null)
                            {
                                var objTo = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == objV.ReferID);
                                if (objTo != null)
                                    throw FaultHelper.BusinessFault(null, null, "Đầu kéo " + objVehicle.RegNo + " đã phân chuyến. Số: " + objTo.Code + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateToActual));
                            }
                            else
                            {
                                objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                                    && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster && c.FLM_Asset.VehicleID == vehicleID
                                    && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                                if (objV != null)
                                {
                                    var strCode = string.Empty;
                                    switch (objV.StatusOfAssetTimeSheetID)
                                    {
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                            strCode = "bảo trì";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                            strCode = "đăng kiểm";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                            strCode = "sửa chữa";
                                            break;
                                    }
                                    throw FaultHelper.BusinessFault(null, null, "Đầu kéo " + objVehicle.RegNo + " bận " + strCode + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateToActual));
                                }
                            }

                            var objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID == romoocID
                                && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster && c.ReferID != mID
                                && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                            if (objR != null)
                            {
                                var objTo = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == objV.ReferID);
                                if (objTo != null)
                                    throw FaultHelper.BusinessFault(null, null, "Romooc " + objRomooc.RegNo + "đã phân chuyến. Số: " + objTo.Code + ", từ: " + String.Format("{0:d/M HH:mm}", objR.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objR.DateToActual));
                            }
                            else
                            {
                                objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                                    && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster && c.FLM_Asset.RomoocID == romoocID
                                    && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                                if (objR != null)
                                {
                                    var strCode = string.Empty;
                                    switch (objR.StatusOfAssetTimeSheetID)
                                    {
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                            strCode = "bảo trì";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                            strCode = "đăng kiểm";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                            strCode = "sửa chữa";
                                            break;
                                    }
                                    throw FaultHelper.BusinessFault(null, null, "Romooc " + objRomooc.RegNo + " bận " + strCode + ", từ: " + String.Format("{0:d/M HH:mm}", objR.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objR.DateToActual));
                                }
                            }
                        }
                        else
                        {
                            var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehicleID);
                            if (vehicleID >= 0 && objVehicle == null)
                                throw FaultHelper.BusinessFault(null, null, "Xe không tồn tại.");
                            var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == vehicleID
                                && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.ReferID != mID
                                && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                            if (objV != null)
                            {
                                var objTo = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == objV.ReferID);
                                if (objTo != null)
                                    throw FaultHelper.BusinessFault(null, null, "Xe " + objVehicle.RegNo + " đã phân chuyến. Số: " + objTo.Code + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateToActual));
                            }
                            else
                            {
                                objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                                    && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.FLM_Asset.VehicleID == vehicleID
                                    && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                                if (objV != null)
                                {
                                    var strCode = string.Empty;
                                    switch (objV.StatusOfAssetTimeSheetID)
                                    {
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                            strCode = "bảo trì";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                            strCode = "đăng kiểm";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                            strCode = "sửa chữa";
                                            break;
                                    }
                                    throw FaultHelper.BusinessFault(null, null, "Xe " + objVehicle.RegNo + " bận " + strCode + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateToActual));
                                }
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private DTOSYSSetting OPS_SystemSetting_Get(DataEntities model)
        {
            DTOSYSSetting objSetting = new DTOSYSSetting();
            var sSet = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).Select(c => c.Setting).FirstOrDefault();
            if (!string.IsNullOrEmpty(sSet))
            {
                objSetting = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(sSet).FirstOrDefault();
                if (objSetting != null)
                {
                    var objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationFromID);
                    if (objCheck == null)
                        objCheck = model.CAT_Location.FirstOrDefault();
                    if (objCheck != null)
                        objSetting.LocationFromID = objCheck.ID;
                    objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationToID);
                    if (objCheck == null)
                        objCheck = model.CAT_Location.FirstOrDefault();
                    if (objCheck != null)
                        objSetting.LocationToID = objCheck.ID;
                }
            }
            else
            {
                var objCheck = model.CAT_Location.FirstOrDefault();
                if (objCheck != null)
                {
                    objSetting.LocationFromID = objCheck.ID;
                    objSetting.LocationToID = objCheck.ID;
                }
            }
            return objSetting;
        }

        private List<DTOOPSLocationRequired> OPS_GetLocationRequired(DataEntities model, int cID)
        {
            List<DTOOPSLocationRequired> result = new List<DTOOPSLocationRequired>();

            foreach (var item in model.CAT_LocationRequire.Where(c => c.LocationID == cID).Select(c => new
            {
                c.ID,
                c.ConstraintRequireTypeID,
                c.Weight,
                c.TimeFrom,
                c.TimeTo
            }).ToList())
            {
                switch (item.ConstraintRequireTypeID)
                {
                    case -(int)SYSVarType.ConstraintRequireTypeSizeDay:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue && item.Weight.HasValue)
                        {
                            var obj = new DTOOPSLocationRequired(true, true, item.Weight.Value, -1, item.TimeFrom.Value, item.TimeTo.Value);
                            result.Add(obj);
                        }
                        break;
                    case -(int)SYSVarType.ConstraintRequireTypeSizeWeek:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue && item.Weight.HasValue)
                        {
                            var fDate = (int)item.TimeFrom.Value.Date.DayOfWeek;
                            var tDate = (int)item.TimeTo.Value.Date.DayOfWeek;
                            if (fDate <= tDate)
                            {
                                for (var i = fDate; i <= tDate; i++)
                                {
                                    var obj = new DTOOPSLocationRequired(true, true, item.Weight.Value, i, new DateTime(2000, 1, 1).Add(item.TimeFrom.Value.Subtract(item.TimeFrom.Value.Date)), new DateTime(2000, 1, 1).Add(item.TimeTo.Value.Subtract(item.TimeTo.Value.Date)));
                                    result.Add(obj);
                                }
                            }
                        }
                        break;
                    case -(int)SYSVarType.ConstraintRequireTypeOpenWeek:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue)
                        {
                            var fDate = (int)item.TimeFrom.Value.Date.DayOfWeek;
                            var tDate = (int)item.TimeTo.Value.Date.DayOfWeek;
                            if (fDate <= tDate)
                            {
                                for (var i = fDate; i <= tDate; i++)
                                {
                                    var obj = new DTOOPSLocationRequired(false, true, 0, i, new DateTime(2000, 1, 1).Add(item.TimeFrom.Value.Subtract(item.TimeFrom.Value.Date)), new DateTime(2000, 1, 1).Add(item.TimeTo.Value.Subtract(item.TimeTo.Value.Date)));
                                    result.Add(obj);
                                }
                            }
                        }
                        break;
                    case -(int)SYSVarType.ConstraintRequireTypeOpenDay:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue)
                        {
                            var obj = new DTOOPSLocationRequired(false, true, 0, -1, item.TimeFrom.Value, item.TimeTo.Value);
                            result.Add(obj);
                        }
                        break;
                    case -(int)SYSVarType.ConstraintRequireTypeCloseDay:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue)
                        {
                            var obj = new DTOOPSLocationRequired(false, false, 0, -1, item.TimeFrom.Value, item.TimeTo.Value);
                            result.Add(obj);
                        }
                        break;
                }
            }

            return result;
        }

        #endregion

        #region NewCO - Map

        public DTOResult OPSCO_MAP_Order_List(string request, int typeOfOrder, DateTime? fDate, DateTime? tDate, List<int> dataCus, List<int> dataService, List<int> dataCarrier, List<int> dataSeaport)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (fDate.HasValue)
                        fDate = fDate.Value.Date;
                    if (tDate.HasValue)
                        tDate = tDate.Value.Date.AddDays(1);

                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = true;

                    var iEXLaden = -(int)SYSVarType.StatusOfCOContainerEXLaden;
                    var iIMLaden = -(int)SYSVarType.StatusOfCOContainerIMLaden;
                    var iLOLaden = -(int)SYSVarType.StatusOfCOContainerLOLaden;

                    var objSetting = OPS_SystemSetting_Get(model);
                    var objRequest = CreateRequest(request);
                    if (objRequest.Sorts == null || objRequest.Sorts.Count == 0)
                    {
                        var objSort = new SortDescriptor("GroupSort", System.ComponentModel.ListSortDirection.Ascending);
                        objRequest.Sorts.Add(objSort);
                    }
                    DateTime warningDate = DateTime.Now;
                    if (objSetting != null)
                        warningDate = objSetting.TimeDelayWarning > 0 ? DateTime.Now.AddHours(objSetting.TimeDelayWarning) : DateTime.Now;
                    if (typeOfOrder == 1)
                    {
                        var query = model.OPS_COTOContainer.Where(c => c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                            && ((isCustomer && !isAdmin) ? Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)
                            && c.COTOMasterID == null && (fDate != null && tDate != null ? c.ETD >= fDate && c.ETD < tDate : true) && !c.IsSplit
                            && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad
                            && (dataService.Count > 0 && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)
                            && (dataCus.Count > 0 ? dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)
                            && (dataSeaport.Count > 0 ? (c.OPS_Container.ORD_Container.LocationFromID.HasValue && dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID)) || (c.OPS_Container.ORD_Container.LocationToID.HasValue && dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID)) : true)
                            && (dataCarrier.Count > 0 ? c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.PartnerID.Value) : true)
                            && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.LocationFromID > 0 && c.LocationToID > 0)
                            .Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.OPS_Container.ContainerID,
                            OPSContainerID = c.OPSContainerID,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            ContainerID = c.OPS_Container.ContainerID,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                            ETA = c.OPS_Container.ORD_Container.ETA,
                            ETD = c.OPS_Container.ORD_Container.ETD,
                            DateGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            DateReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                            ETARequest = c.OPS_Container.ORD_Container.ETARequest,
                            Ton = c.OPS_Container.Ton,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            StatusOfContainerName = string.Empty,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            LocationFromAddress = c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.Address,
                            LocationFromCode = c.OPS_Container.ORD_Container.CUS_Location2.Code,
                            LocationToCode = c.OPS_Container.ORD_Container.CUS_Location3.Code,
                            LocationToAddress = c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.Address,
                            LocationFromID = c.OPS_Container.ORD_Container.LocationFromID.Value,
                            LocationToID = c.OPS_Container.ORD_Container.LocationToID.Value,
                            LocationDepotID = c.OPS_Container.LocationDepotID,
                            LocationDepotCode = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Location : string.Empty,
                            LocationDepotAddress = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Address : string.Empty,
                            LocationDepotReturnCode = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Code : string.Empty,
                            LocationDepotReturnName = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Location : string.Empty,
                            LocationDepotReturnAddress = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Address : string.Empty,
                            GroupSort = c.OPS_Container.ORD_Container.GroupSort,
                            ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                            Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode ?? string.Empty,
                            ShipNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            ShipName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            UserDefined1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1 ?? string.Empty,
                            UserDefined2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2 ?? string.Empty,
                            UserDefined3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3 ?? string.Empty,
                            UserDefined4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4 ?? string.Empty,
                            UserDefined5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5 ?? string.Empty,
                            UserDefined6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6 ?? string.Empty,
                            Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                            Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                            Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                        }).Distinct().ToList();
                        var dataORD = query.Select(c => c.OrderID).Distinct().ToList();
                        var dataGOP = model.ORD_GroupProduct.Where(c => dataORD.Contains(c.OrderID) && c.GroupOfProductID.HasValue).Select(c => new
                        {
                            c.OrderID,
                            c.CUS_GroupOfProduct.Code,
                            c.CUS_GroupOfProduct.GroupName
                        }).ToList();
                        foreach (DTOOPSCO_MAP_Container item in query)
                        {
                            if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                item.ServiceType = 1;
                            else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                item.ServiceType = 2;
                            else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                item.ServiceType = 3;
                            else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                item.ServiceType = 4;
                            else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                item.ServiceType = 5;
                            item.ListLocation = new List<DTOCUSLocation>();
                            int?[] sID = { item.LocationFromID, item.LocationToID, item.LocationDepotID, item.LocationDepotReturnID };
                            var data = new List<int?>(sID);
                            var dataLocation = model.CUS_Location.Where(c => data.Contains(c.ID)).Select(c => new DTOCUSLocation
                            {
                                ID = c.ID,
                                LocationID = c.LocationID,
                                LocationName = c.LocationName,
                                Code = c.Code,
                                Address = c.CAT_Location.Address,
                                Lat = c.CAT_Location.Lat,
                                Lng = c.CAT_Location.Lng
                            }).ToList();
                            if (dataLocation.Count > 0)
                            {
                                foreach (var obj in data)
                                {
                                    var oL = dataLocation.FirstOrDefault(c => c.ID == obj);
                                    if (oL != null)
                                    {
                                        item.ListLocation.Add(oL);
                                    }
                                }
                            }
                            if (objSetting.WarningETD)
                            {
                                if (item.ETD.HasValue && item.ETD < warningDate)
                                {
                                    if (item.ETD < DateTime.Now)
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = DateTime.Now.Subtract(item.ETD.Value).TotalHours;
                                        item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                    else
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = item.ETD.Value.Subtract(DateTime.Now).TotalHours;
                                        item.WarningMsg = "Còn " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                }
                            }

                            item.ListGroupProductCode = dataGOP.Where(c => c.OrderID == item.OrderID).Select(c => c.Code).Distinct().ToList();
                            item.ListGroupProductName = dataGOP.Where(c => c.OrderID == item.OrderID).Select(c => c.GroupName).Distinct().ToList();
                            item.GroupProductCode = string.Join(", ", item.ListGroupProductCode);
                            item.GroupProductName = string.Join(", ", item.ListGroupProductName);
                            item.ListCOTOContainer = model.OPS_COTOContainer.Where(c => !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && !c.COTOMasterID.HasValue && c.OPSContainerID == item.OPSContainerID).Select(c => new DTOOPSCO_MAP_Container
                            {
                                ID = c.ID,
                                OPSContainerID = c.OPSContainerID,
                                StatusOfContainerID = c.StatusOfCOContainerID,
                                StatusOfContainerName = c.SYS_Var.ValueOfVar,
                                ETA = c.ETA,
                                ETD = c.ETD
                            }).ToList();
                        }
                        var tmp = query.ToDataSourceResult(objRequest);
                        result.Data = tmp.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                        result.Total = tmp.Total;
                    }
                    else
                    {
                        var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID == null && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                            && ((isCustomer && !isAdmin) ? Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)
                            && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && !c.IsSplit && c.ParentID == null
                            && (c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal ? c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLOLaden : true) //STMS-2331
                            && (dataService.Count > 0 && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)
                            && (dataCus.Count > 0 ? dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)
                            && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad
                            && (dataSeaport.Count > 0 ? (c.OPS_Container.ORD_Container.LocationFromID.HasValue && dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID)) || (c.OPS_Container.ORD_Container.LocationToID.HasValue && dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID)) : true)
                            && (dataCarrier.Count > 0 ? c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.PartnerID.Value) : true)
                            && c.LocationFromID > 0 && c.LocationToID > 0 && !c.IsSplit && (fDate != null && tDate != null ? c.ETD >= fDate && c.ETD < tDate : true))
                            .Select(c => new DTOOPSCO_MAP_Container
                           {
                               ID = c.ID,
                               ParentID = c.ParentID,
                               OPSContainerID = -1,
                               CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                               ContainerID = c.OPS_Container.ContainerID,
                               ContainerNo = c.OPS_Container.ContainerNo,
                               CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                               CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                               CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                               DateGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                               DateReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                               ETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                               ETARequest = c.OPS_Container.ORD_Container.ETARequest,
                               ETA = c.ETA,
                               ETD = c.ETD,
                               OrderID = c.OPS_Container.ORD_Container.OrderID,
                               OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                               TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                               StatusOfContainerID = c.StatusOfCOContainerID,
                               StatusOfContainerName = c.SYS_Var.ValueOfVar,
                               ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                               GroupSort = c.OPS_Container.ORD_Container.GroupSort,
                               LocationFromID = c.LocationFromID,
                               LocationFromAddress = c.CAT_Location.Address,
                               LocationFromCode = c.CAT_Location.Code,
                               LocationToID = c.LocationToID,
                               LocationToCode = c.CAT_Location1.Code,
                               LocationToAddress = c.CAT_Location1.Address,
                               ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                               Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                               SealNo1 = c.OPS_Container.SealNo1,
                               SealNo2 = c.OPS_Container.SealNo2,
                               TripNo = c.OPS_Container.ORD_Container.VesselMasterCode ?? string.Empty,
                               ShipNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                               ShipName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                               UserDefined1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1 ?? string.Empty,
                               UserDefined2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2 ?? string.Empty,
                               UserDefined3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3 ?? string.Empty,
                               UserDefined4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4 ?? string.Empty,
                               UserDefined5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5 ?? string.Empty,
                               UserDefined6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6 ?? string.Empty,
                               Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                               Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                               Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                           }).ToList();
                        var dataORD = query.Select(c => c.OrderID).Distinct().ToList();
                        var dataGOP = model.ORD_GroupProduct.Where(c => dataORD.Contains(c.OrderID) && c.GroupOfProductID.HasValue).Select(c => new
                        {
                            c.OrderID,
                            c.CUS_GroupOfProduct.Code,
                            c.CUS_GroupOfProduct.GroupName
                        }).ToList();
                        foreach (DTOOPSCO_MAP_Container item in query)
                        {
                            if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                item.ServiceType = 1;
                            else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                item.ServiceType = 2;
                            else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                item.ServiceType = 3;
                            else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                item.ServiceType = 4;
                            else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                item.ServiceType = 5;
                            if (item.StatusOfContainerID != iLOLaden && item.StatusOfContainerID != iEXLaden && item.StatusOfContainerID != iIMLaden)
                                item.Ton = 0;
                            if (item.ParentID > 0)
                                item.IsAllowMerge = model.OPS_COTOContainer.Count(c => c.ParentID == item.ParentID && c.IsSplit == true) == 0;
                            item.ListLocation = new List<DTOCUSLocation>();
                            int?[] sID = { item.LocationFromID, item.LocationToID };
                            var data = new List<int?>(sID);
                            var dataLocation = model.CAT_Location.Where(c => data.Contains(c.ID)).Select(c => new DTOCUSLocation
                            {
                                ID = c.ID,
                                LocationID = c.ID,
                                LocationName = c.Location,
                                Code = c.Code,
                                Address = c.Address,
                                Lat = c.Lat,
                                Lng = c.Lng
                            }).ToList();
                            if (dataLocation.Count > 0)
                            {
                                foreach (var obj in data)
                                {
                                    var oL = dataLocation.FirstOrDefault(c => c.ID == obj);
                                    if (oL != null)
                                    {
                                        item.ListLocation.Add(oL);
                                    }
                                }
                            }
                            if (objSetting.WarningETD)
                            {
                                if (item.ETD.HasValue && item.ETD < warningDate)
                                {
                                    if (item.ETD < DateTime.Now)
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = DateTime.Now.Subtract(item.ETD.Value).TotalHours;
                                        item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                    else
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = item.ETD.Value.Subtract(DateTime.Now).TotalHours;
                                        item.WarningMsg = "Còn " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                }
                            }

                            item.ListGroupProductCode = dataGOP.Where(c => c.OrderID == item.OrderID).Select(c => c.Code).Distinct().ToList();
                            item.ListGroupProductName = dataGOP.Where(c => c.OrderID == item.OrderID).Select(c => c.GroupName).Distinct().ToList();
                            item.GroupProductCode = string.Join(", ", item.ListGroupProductCode);
                            item.GroupProductName = string.Join(", ", item.ListGroupProductName);
                        }
                        var tmp = query.ToDataSourceResult(objRequest);
                        result.Data = tmp.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                        result.Total = tmp.Total;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_MAP_Tractor_List(string request, DateTime now)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_MAP_Tractor
                    {
                        ID = c.VehicleID,
                        Regno = c.CAT_Vehicle.RegNo,
                        DriverName = c.CAT_Vehicle.DriverName,
                        MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                        RomoocID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CurrentRomoocID.Value : -1,
                        RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                        RomoocGroupID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.MaxWeight == 1 ? 1 : 2 : 0,
                        LocationCode = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Code : string.Empty,
                        LocationName = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Location : string.Empty,
                        Lat = c.CAT_Vehicle.Lat.HasValue ? c.CAT_Vehicle.Lat : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lat : null,
                        Lng = c.CAT_Vehicle.Lng.HasValue ? c.CAT_Vehicle.Lng : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lng : null
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Tractor>;
                    foreach (DTOOPSCO_MAP_Tractor item in result.Data)
                    {
                        item.CurrentTrip = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == item.ID
                            && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterApproved && ((c.ATD <= now && c.ATA == null) || (c.ETA > now && c.ETD <= now))).Select(c => new DTOOPSCO_MAP_Trip
                            {
                                ID = c.ID,
                                Code = c.Code,
                                DriverName = c.DriverName1,
                                RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : string.Empty,
                                VehicleNo = item.Regno,
                                VehicleID = c.VehicleID ?? -1,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                ATA = c.ATA,
                                ATD = c.ATD,
                                LocationFromCode = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationFromAddress = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Address,
                                LocationToCode = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationToAddress = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Address
                            }).OrderBy(c => c.ATD).ThenBy(c => c.ETD).FirstOrDefault();
                        if (item.CurrentTrip != null)
                        {
                            item.StatusOfTractorName = "Bận";
                        }
                        item.NextTrip = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == item.ID
                            && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterApproved && c.ETD >= now).Select(c => new DTOOPSCO_MAP_Trip
                            {
                                ID = c.ID,
                                Code = c.Code,
                                DriverName = c.DriverName1,
                                RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : string.Empty,
                                VehicleNo = item.Regno,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                ATA = c.ATA,
                                ATD = c.ATD,
                                LocationFromCode = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationFromAddress = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Address,
                                LocationToCode = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationToAddress = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Address
                            }).OrderBy(c => c.ETD).FirstOrDefault();
                        var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == item.ID
                            && !((c.DateFromActual < now && c.DateToActual < now))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                        if (objV != null)
                            item.StatusOfTractorName = "Bận";
                        if (item.RomoocID < 1)
                        {
                            var dataDef = model.CAT_RomoocDefault.Where(c => c.VehicleID == item.ID).Select(c => new
                            {
                                c.RomoocID,
                                c.CAT_Romooc.RegNo,
                                c.SortOrder,
                                c.CAT_Romooc.RegCapacity,
                                MaxWeight = c.CAT_Romooc.MaxWeight ?? 0
                            }).OrderBy(c => c.SortOrder).ToList();
                            int i = 0;
                            while (item.RomoocID < 1 && i < dataDef.Count)
                            {
                                var o = dataDef[i];
                                i++;
                                var objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID == o.RomoocID
                                && !((c.DateFromActual < now && c.DateToActual < now))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                                if (objR == null)
                                {
                                    item.RomoocID = o.RomoocID;
                                    item.RomoocNo = o.RegNo;
                                    item.RomoocGroupID = o.RegCapacity == 1 ? 1 : 2;
                                    item.MaxWeight = Math.Min(item.MaxWeight, o.MaxWeight);
                                }
                            }
                        }
                        else
                        {
                            var objRm = model.CAT_Romooc.FirstOrDefault(c => c.ID == item.RomoocID);
                            if (objRm != null)
                            {
                                item.MaxWeight = Math.Min(item.MaxWeight, objRm.MaxWeight ?? 0);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_MAP_Romooc_List(string request, DateTime now)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Romooc.Where(c => c.RomoocID > 1 && c.CustomerID == Account.SYSCustomerID).Select(c => new DTOOPSCO_MAP_Romooc
                    {
                        ID = c.RomoocID,
                        Regno = c.CAT_Romooc.RegNo,
                        MaxWeight = c.CAT_Romooc.MaxWeight ?? 0,
                        Group = c.CAT_Romooc.RegCapacity == 1 ? 1 : 2,
                        LocationCode = c.CAT_Romooc.LocationID > 0 ? c.CAT_Romooc.CAT_Location.Code : string.Empty,
                        LocationName = c.CAT_Romooc.LocationID > 0 ? c.CAT_Romooc.CAT_Location.Location : string.Empty,
                        GroupOfRomoocName = c.CAT_Romooc.RegCapacity == 1 ? "20" : "40",
                        Lat = c.CAT_Romooc.Lat.HasValue ? c.CAT_Romooc.Lat : c.CAT_Romooc.LocationID.HasValue ? c.CAT_Romooc.CAT_Location.Lat : null,
                        Lng = c.CAT_Romooc.Lng.HasValue ? c.CAT_Romooc.Lat : c.CAT_Romooc.LocationID.HasValue ? c.CAT_Romooc.CAT_Location.Lng : null
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Romooc>;
                    foreach (DTOOPSCO_MAP_Romooc item in result.Data)
                    {
                        item.CurrentTrip = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.RomoocID == item.ID
                            && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterApproved && ((c.ATD <= now && c.ATA == null) || (c.ETA > now && c.ETD <= now))).Select(c => new DTOOPSCO_MAP_Trip
                            {
                                ID = c.ID,
                                Code = c.Code,
                                DriverName = c.DriverName1,
                                RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : string.Empty,
                                VehicleNo = item.Regno,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                ATA = c.ATA,
                                ATD = c.ATD,
                                LocationFromCode = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationFromAddress = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Address,
                                LocationToCode = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationToAddress = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Address
                            }).OrderBy(c => c.ATD).ThenBy(c => c.ETD).FirstOrDefault();
                        if (item.CurrentTrip != null)
                        {
                            item.StatusOfRomoocName = "Bận";
                        }
                        item.NextTrip = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.RomoocID == item.ID
                            && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterApproved && c.ETD >= now).Select(c => new DTOOPSCO_MAP_Trip
                            {
                                ID = c.ID,
                                Code = c.Code,
                                DriverName = c.DriverName1,
                                VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                                RomoocNo = item.Regno,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                ATA = c.ATA,
                                ATD = c.ATD,
                                LocationFromCode = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationFromAddress = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Address,
                                LocationToCode = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationToAddress = c.OPS_COTOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Address
                            }).OrderBy(c => c.ETD).FirstOrDefault();
                        var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID == item.ID
                            && !((c.DateFromActual < now && c.DateToActual < now))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                        if (objV != null)
                            item.StatusOfRomoocName = "Bận";
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_MAP_VehicleVendor_List(string request, int vendorID, int typeofvehicle)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorID < 1)
                    {
                        if (typeofvehicle == 1)
                        {
                            var query = model.CUS_Vehicle.Where(c => c.VehicleID > 0 && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_MAP_Tractor
                            {
                                ID = c.VehicleID,
                                Regno = c.CAT_Vehicle.RegNo,
                                DriverName = c.CAT_Vehicle.DriverName,
                                MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                                RomoocID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CurrentRomoocID.Value : -1,
                                RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                                RomoocGroupID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.MaxWeight == 1 ? 1 : 2 : 0,
                                LocationCode = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Code : string.Empty,
                                LocationName = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Location : string.Empty,
                                Lat = c.CAT_Vehicle.Lat.HasValue ? c.CAT_Vehicle.Lat : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lat : null,
                                Lng = c.CAT_Vehicle.Lng.HasValue ? c.CAT_Vehicle.Lng : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lng : null
                            }).ToDataSourceResult(CreateRequest(request));
                            result.Total = query.Total;
                            result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Tractor>;
                        }
                        else
                        {
                            var query = model.CUS_Romooc.Where(c => c.RomoocID > 0 && c.CustomerID == Account.SYSCustomerID).Select(c => new DTOOPSCO_MAP_Romooc
                            {
                                ID = c.RomoocID,
                                Regno = c.CAT_Romooc.RegNo,
                                MaxWeight = c.CAT_Romooc.MaxWeight ?? 0,
                                Group = c.CAT_Romooc.RegCapacity == 1 ? 1 : 2,
                                GroupOfRomoocName = c.CAT_Romooc.RegCapacity == 1 ? "20" : "40",
                                Lat = c.CAT_Romooc.Lat.HasValue ? c.CAT_Romooc.Lat : c.CAT_Romooc.LocationID.HasValue ? c.CAT_Romooc.CAT_Location.Lat : null,
                                Lng = c.CAT_Romooc.Lng.HasValue ? c.CAT_Romooc.Lat : c.CAT_Romooc.LocationID.HasValue ? c.CAT_Romooc.CAT_Location.Lng : null
                            }).ToDataSourceResult(CreateRequest(request));
                            result.Total = query.Total;
                            result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Romooc>;
                        }
                    }
                    else
                    {
                        if (typeofvehicle == 1)
                        {
                            var query = model.CUS_Vehicle.Where(c => c.VehicleID > 0 && c.CustomerID == vendorID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_MAP_Tractor
                            {
                                ID = c.VehicleID,
                                Regno = c.CAT_Vehicle.RegNo,
                                MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                            result.Total = query.Total;
                            result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Tractor>;
                        }
                        else
                        {
                            var query = model.CUS_Romooc.Where(c => c.RomoocID > 0 && c.CustomerID == vendorID).Select(c => new DTOOPSCO_MAP_Romooc
                            {
                                ID = c.RomoocID,
                                Regno = c.CAT_Romooc.RegNo,
                                MaxWeight = c.CAT_Romooc.MaxWeight ?? 0
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                            result.Total = query.Total;
                            result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Romooc>;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_MAP_TOMaster_List(string request, bool isApproved, bool isTendered, DateTime? fDate, DateTime? tDate)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (fDate.HasValue)
                        fDate = fDate.Value.Date;
                    if (tDate.HasValue)
                        tDate = tDate.Value.Date.AddDays(1);

                    int iGet = -(int)SYSVarType.TypeOfTOLocationGet;
                    int iDel = -(int)SYSVarType.TypeOfTOLocationDelivery;

                    int fSTT = -(int)SYSVarType.StatusOfCOTOMasterApproved;
                    int tSTT = -(int)SYSVarType.StatusOfCOTOMasterTendered;
                    if (!isTendered)
                        tSTT = -(int)SYSVarType.StatusOfCOTOMasterApproved;
                    if (!isApproved)
                        fSTT = -(int)SYSVarType.StatusOfCOTOMasterTendered;

                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var data = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_COTOMaster.StatusOfCOTOMasterID >= fSTT && c.OPS_COTOMaster.StatusOfCOTOMasterID <= tSTT && c.OPS_COTOMaster.StatusOfCOTOMasterID != -(int)SYSVarType.StatusOfCOTOMasterSendTender
                        && (isAdmin ? true : Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)) && (fDate != null && tDate != null ? c.OPS_COTOMaster.ETD >= fDate && c.OPS_COTOMaster.ETD < tDate : true)).Select(c => new
                    {
                        ID = c.OPS_COTOMaster.ID,
                        Code = c.OPS_COTOMaster.Code,
                        TOMasterID = c.COTOMasterID.Value,
                        DriverName = c.OPS_COTOMaster.DriverName1,
                        DriverTel = c.OPS_COTOMaster.DriverTel1,
                        VehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                        RomoocNo = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                        VendorCode = c.OPS_COTOMaster.VendorOfVehicleID > 0 && c.OPS_COTOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_COTOMaster.CUS_Customer1.Code : "Xe nhà",
                        Status = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : 2,
                        VendorOfVehicleID = c.OPS_COTOMaster.VendorOfVehicleID,
                        ETA = c.OPS_COTOMaster.ETA,
                        ETD = c.OPS_COTOMaster.ETD,
                        ATA = c.OPS_COTOMaster.ATA,
                        ATD = c.OPS_COTOMaster.ATD,
                        ContainerNo = c.OPS_Container.ContainerNo,
                        Ton = c.OPS_Container.Ton,
                        LocationFromCode = c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet && o.LocationID > 0) != null ? c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet).CAT_Location.Code : string.Empty,
                        LocationFromAddress = c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet && o.LocationID > 0) != null ? c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet).CAT_Location.Address : string.Empty,
                        LocationToCode = c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel && o.LocationID > 0) != null ? c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel).CAT_Location.Code : string.Empty,
                        LocationToAddress = c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel && o.LocationID > 0) != null ? c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel).CAT_Location.Address : string.Empty,
                    }).ToList();
                    var copy = new CopyHelper();
                    var temp = new List<DTOOPSCO_MAP_Trip>();
                    foreach (var item in data.GroupBy(c => c.TOMasterID).ToList())
                    {
                        DTOOPSCO_MAP_Trip obj = new DTOOPSCO_MAP_Trip();
                        var oTmp = item.FirstOrDefault();
                        copy.Copy(oTmp, obj);
                        obj.ETD = oTmp.ETD;
                        obj.ETA = oTmp.ETA;
                        obj.ID = item.Key;
                        obj.ContainerNoList = string.Join(",", item.Select(c => c.ContainerNo).Distinct().ToList());
                        temp.Add(obj);
                    }
                    var req = temp.ToDataSourceResult(CreateRequest(request));
                    result.Total = req.Total;
                    result.Data = req.Data as IEnumerable<DTOOPSCO_MAP_Trip>;
                    foreach (DTOOPSCO_MAP_Trip item in result.Data)
                    {
                        item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID).Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.ID,
                            ContainerID = c.OPS_Container.ContainerID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            ETA = c.OPS_Container.ORD_Container.ETA,
                            ETD = c.OPS_Container.ORD_Container.ETD,
                            StatusOfContainerName = c.SYS_Var.ValueOfVar,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToAddress = c.CAT_Location1.Address
                        }).Distinct().ToList();
                        item.TotalContainer = item.ListContainer.Select(c => c.ContainerID).Distinct().Count();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_MAP_Location_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        Lat = c.Lat,
                        Lng = c.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CUSCustomer> OPSCO_MAP_Vendor_List()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = model.CUS_Customer.Where(c => !c.IsSystem && Account.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    result.Insert(0, new CUSCustomer { ID = -1, CustomerName = "Xe nhà", Code = "Xe nhà" });
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CUSCustomer> OPSCO_MAP_Customer_List()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = model.CUS_Customer.Where(c => !c.IsSystem && Account.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    //result.Insert(0, new CUSCustomer { ID = -1, CustomerName = "Tất cả", Code = "Tất cả" });
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_MAP_Seaport> OPSCO_MAP_Seaport_List()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = model.CAT_PartnerLocation.Where(c => c.PartnerID > 0 && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerSeaPort).Select(c => new DTOOPSCO_MAP_Seaport
                    {
                        ID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        SeaportCode = c.CAT_Partner.Code,
                        SeaportName = c.CAT_Partner.PartnerName,
                        LocationAddress = c.CAT_Location.Address
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_MAP_Carrier> OPSCO_MAP_Carrier_List()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = model.CAT_Partner.Where(c => c.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier).Select(c => new DTOOPSCO_MAP_Carrier
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CarrierName = c.PartnerName
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<FLMDriver> OPSCO_MAP_Driver_List()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new FLMDriver
                    {
                        ID = c.ID,
                        EmployeeCode = c.CAT_Driver.Code,
                        LastName = c.CAT_Driver.LastName,
                        FirstName = c.CAT_Driver.FirstName,
                        Cellphone = c.CAT_Driver.Cellphone
                    }).ToList();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<FLMDriver> OPSCO_MAP_DriverVendor_List(int vendorID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (vendorID < 1)
                    {
                        return model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new FLMDriver
                        {
                            ID = c.ID,
                            EmployeeCode = c.CAT_Driver.Code,
                            LastName = c.CAT_Driver.LastName,
                            FirstName = c.CAT_Driver.FirstName,
                            Cellphone = c.CAT_Driver.Cellphone
                        }).ToList();
                    }
                    else
                    {
                        return model.CUS_Driver.Where(c => c.CustomerID == vendorID).Select(c => new FLMDriver
                        {
                            ID = c.ID,
                            LastName = c.CAT_Driver.LastName,
                            FirstName = c.CAT_Driver.FirstName,
                            Cellphone = c.CAT_Driver.Cellphone
                        }).ToList();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Setting OPSCO_MAP_Setting()
        {
            try
            {
                DTOOPSCO_MAP_Setting result = new DTOOPSCO_MAP_Setting();
                using (var model = new DataEntities())
                {
                    var objSetting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
                    if (objSetting != null)
                    {
                        var objF = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationFromID);
                        if (objF != null)
                        {
                            result.LocationStartID = objSetting.LocationFromID;
                            result.LocationStartName = objF.Location;
                            result.LocationStartLat = objF.Lat;
                            result.LocationStartLat = objF.Lng;
                        }
                        var objT = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationToID);
                        if (objT != null)
                        {
                            result.LocationEndID = objSetting.LocationToID;
                            result.LocationEndName = objT.Location;
                            result.LocationEndLat = objT.Lat;
                            result.LocationEndLat = objT.Lng;
                        }
                        var objG = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationRomoocReturnID);
                        if (objG != null)
                        {
                            result.LocationRomoocGetID = objSetting.LocationRomoocReturnID;
                            result.LocationRomoocGetName = objG.Location;
                            result.LocationRomoocGetLat = objG.Lat;
                            result.LocationRomoocGetLat = objG.Lng;
                        }
                        result.RomoocReturn = objSetting.IsRomooc;
                        result.WeightConstraint = objSetting.HasConstraintWeight;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Trip OPSCO_MAP_TripByID(int masterID)
        {
            try
            {
                DTOOPSCO_MAP_Trip result = new DTOOPSCO_MAP_Trip();
                using (var model = new DataEntities())
                {
                    if (masterID > 0)
                    {
                        var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == masterID);
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.Code = obj.Code;
                            result.ETD = obj.ETD;
                            result.ETA = obj.ETA;
                            result.VehicleID = obj.VehicleID ?? 0;
                            result.VehicleNo = obj.VehicleID > 0 ? obj.CAT_Vehicle.RegNo : string.Empty;
                            result.RomoocID = obj.RomoocID ?? 0;
                            result.RomoocNo = obj.RomoocID > 0 ? obj.CAT_Romooc.RegNo : string.Empty;
                            result.DriverName = obj.DriverName1;
                            result.Status = obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : obj.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning && obj.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                            result.DriverTel = obj.DriverTel1;
                            result.VendorOfVehicleID = obj.VendorOfVehicleID > 0 && obj.VendorOfVehicleID != Account.SYSCustomerID ? obj.VendorOfVehicleID : null;
                            result.TotalContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPSContainerID).Distinct().Count();
                            result.TotalTon = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => new { c.OPSContainerID, c.OPS_Container.Ton }).Distinct().ToList().Sum(c => c.Ton);
                            result.VendorCode = obj.VendorOfVehicleID > 0 ? obj.CUS_Customer1.Code : "Xe nhà";
                            result.RomoocMaxWeight = obj.RomoocID > 0 ? obj.CAT_Romooc.MaxWeight ?? 0 : 0;
                            result.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_Container
                            {
                                ID = c.ID,
                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                Ton = c.OPS_Container.Ton,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                LocationFromCode = c.CAT_Location.Code,
                                LocationToCode = c.CAT_Location1.Code,
                            }).ToList();
                            var sID = -1;
                            const int iEmt = -(int)SYSVarType.TypeOfTOLocationEmpty;
                            const int iRGet = -(int)SYSVarType.TypeOfTOLocationGetRomooc;
                            const int iRRet = -(int)SYSVarType.TypeOfTOLocationReturnRomooc;
                            var objS = model.OPS_COTOLocation.Where(c => c.COTOMasterID == obj.ID && c.LocationID > 0 && c.TypeOfTOLocationID == iEmt).OrderBy(c => c.SortOrder).FirstOrDefault();
                            if (objS != null)
                            {
                                sID = objS.ID;
                                result.LocationStartID = objS.LocationID.Value;
                                result.LocationStartName = objS.CAT_Location.Location;
                                result.LocationStartLat = objS.CAT_Location.Lat;
                                result.LocationStartLng = objS.CAT_Location.Lng;
                            }
                            var objE = model.OPS_COTOLocation.Where(c => c.COTOMasterID == obj.ID && c.LocationID > 0 && c.ID != sID && c.TypeOfTOLocationID == iEmt).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                            if (objE != null)
                            {
                                result.LocationEndID = objE.LocationID.Value;
                                result.LocationEndName = objE.CAT_Location.Location;
                                result.LocationEndLat = objE.CAT_Location.Lat;
                                result.LocationEndLng = objE.CAT_Location.Lng;
                            }
                            var objG = model.OPS_COTOLocation.Where(c => c.COTOMasterID == obj.ID && c.LocationID > 0 && c.TypeOfTOLocationID == iRGet).FirstOrDefault();
                            if (objG != null)
                            {
                                result.LocationGetRomoocID = objG.LocationID.Value;
                                result.LocationGetRomoocName = objG.CAT_Location.Location;
                                result.LocationGetRomoocLat = objG.CAT_Location.Lat;
                                result.LocationGetRomoocLng = objG.CAT_Location.Lng;
                                result.DateGetRomooc = objG.DateComeEstimate;
                            }
                            var objR = model.OPS_COTOLocation.Where(c => c.COTOMasterID == obj.ID && c.LocationID > 0 && c.TypeOfTOLocationID == iRRet).FirstOrDefault();
                            if (objR != null)
                            {
                                result.LocationReturnRomoocID = objR.LocationID.Value;
                                result.LocationReturnRomoocName = objR.CAT_Location.Location;
                                result.LocationReturnRomoocLat = objR.CAT_Location.Lat;
                                result.LocationReturnRomoocLng = objR.CAT_Location.Lng;
                                result.DateReturnRomooc = objR.DateComeEstimate;
                            }

                            List<int> sType = new List<int>(new int[] { iEmt, iRGet, iRRet });
                            result.ListLocation = model.OPS_COTOLocation.Where(c => c.COTOMasterID == obj.ID && !sType.Contains(c.TypeOfTOLocationID)).Select(c => new DTOOPSCOTOLocation
                            {
                                ID = c.ID,
                                LocationID = c.LocationID.Value,
                                SortOrder = c.SortOrder,
                                COTOMasterID = c.COTOMasterID,
                                LocationCode = c.CAT_Location.Code,
                                LocationAddress = c.CAT_Location.Address,
                                LocationName = c.CAT_Location.Location,
                                TypeOfTOLocationID = c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery ? 2 : 1,
                                Lat = c.CAT_Location.Lat,
                                Lng = c.CAT_Location.Lng,
                                DateComeEstimate = c.DateComeEstimate
                            }).OrderBy(c => c.SortOrder).ToList();
                        }
                        else
                        {
                            foreach (var item in model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.ReferID == masterID && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster).ToList())
                            {
                                foreach (var o in model.FLM_AssetTimeSheetDriver.Where(c => c.AssetTimeSheetID == item.ID).ToList())
                                    model.FLM_AssetTimeSheetDriver.Remove(o);
                                model.FLM_AssetTimeSheet.Remove(item);
                            }
                            model.SaveChanges();
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_MAP_Trip> OPSCO_MAP_TripByVehicle_List(DateTime now, int vehicleID, int romoocID, int total)
        {
            try
            {
                List<DTOOPSCO_MAP_Trip> result = new List<DTOOPSCO_MAP_Trip>();
                using (var model = new DataEntities())
                {
                    if (vehicleID > 0)
                    {
                        var data = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.ETD >= now || c.ETA >= now) && c.VehicleID == vehicleID
                            && c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterCancel && c.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived).Select(c => new DTOOPSCO_MAP_Trip
                        {
                            ID = c.ID,
                            Code = c.Code,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            DriverName = c.DriverName1,
                            VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                            RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : string.Empty,
                            Status = c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered ? 2 : 1
                        }).OrderBy(c => c.ETD).ToList();
                        if (total > 0)
                        {
                            result = data.Take(total).ToList();
                        }
                        else
                        {
                            result = data;
                        }
                    }
                    else
                    {
                        var data = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived
                            && (c.ETD >= now || c.ETA >= now) && c.RomoocID == romoocID).Select(c => new DTOOPSCO_MAP_Trip
                        {
                            ID = c.ID,
                            Code = c.Code,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            DriverName = c.DriverName1,
                            VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                            RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : string.Empty,
                            Status = c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered ? 2 : 1
                        }).OrderBy(c => c.ETD).ToList();
                        if (total > 0)
                        {
                            result = data.Take(total).ToList();
                        }
                        else
                        {
                            result = data;
                        }
                    }

                    foreach (var item in result)
                    {
                        var dataLocation = model.OPS_COTOLocation.Where(c => c.COTOMasterID == item.ID).Select(c => new
                        {
                            c.TypeOfTOLocationID,
                            c.DateComeEstimate
                        }).ToList();
                        var oGet = dataLocation.FirstOrDefault(c => c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetRomooc);
                        if (oGet != null)
                        {
                            item.DateGetRomooc = oGet.DateComeEstimate;
                        }
                        var oReturn = dataLocation.FirstOrDefault(c => c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationReturnRomooc);
                        if (oReturn != null)
                        {
                            item.DateReturnRomooc = oReturn.DateComeEstimate;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_VehicleAvailable OPSCO_MAP_CheckVehicleAvailable(int masterID, int vehicleID, int romoocID, DateTime ETD, DateTime ETA, double Ton, List<int> dataORDCon, List<int> dataOPSCon, List<int> dataCon)
        {
            try
            {
                DTOOPSCO_MAP_VehicleAvailable result = new DTOOPSCO_MAP_VehicleAvailable();
                using (var model = new DataEntities())
                {
                    result.MaxCapacity = 2;
                    var objSetting = OPS_SystemSetting_Get(model);
                    var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == vehicleID && c.ReferID != masterID
                        && !((c.DateFromActual < ETD && c.DateToActual < ETD) || (c.DateFromActual > ETA && c.DateToActual > ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                    if (objV == null)
                        result.IsVehicleAvailable = true;
                    var objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID == romoocID && c.ReferID != masterID
                        && !((c.DateFromActual < ETD && c.DateToActual < ETD) || (c.DateFromActual > ETA && c.DateToActual > ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                    if (objR == null)
                        result.IsRomoocAvailable = true;
                    result.IsVehicleHasRomooc = false;

                    var objRM = model.CAT_Romooc.FirstOrDefault(c => c.ID == romoocID);
                    var objVH = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehicleID);
                    if (objRM != null && objVH != null)
                    {
                        double min = 0;
                        if (objRM.MaxWeight != null)
                        {
                            min = objRM.MaxWeight.Value;
                        }
                        if (objVH.MaxWeight != null)
                        {
                            if (min == 0)
                                min = objVH.MaxWeight.Value;
                            min = Math.Min(min, objVH.MaxWeight.Value);
                        }
                        if (min >= 0 && min < Ton)
                        {
                            result.IsOverWeight = true;
                            if (objSetting.HasConstraintWeight)
                            {
                                result.IsRomoocAvailable = false;
                                result.IsVehicleAvailable = false;
                            }
                        }
                    }
                    if (objVH != null)
                    {
                        var objPlanning = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == objVH.ID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain
                            && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA)));
                        if (objPlanning != null)
                        {
                            result.DriverName = objPlanning.FLM_Driver.CAT_Driver.LastName + " " + objPlanning.FLM_Driver.CAT_Driver.FirstName;
                            result.DriverTel = objPlanning.FLM_Driver.CAT_Driver.Cellphone;
                        }
                        else
                        {
                            if (objVH.DriverID.HasValue || OPS_FindFLMDriver(model, objVH.DriverName) > 0)
                            {
                                if (objVH.DriverID.HasValue)
                                {
                                    result.DriverName = objVH.FLM_Driver.CAT_Driver.LastName + " " + objVH.FLM_Driver.CAT_Driver.FirstName;
                                }
                                else
                                {
                                    result.DriverName = objVH.DriverName;
                                }
                                result.DriverTel = objVH.DriverID > 0 ? objVH.FLM_Driver.CAT_Driver.Cellphone : string.Empty;
                            }
                        }
                    }
                    if (objRM != null)
                    {
                        result.MaxCapacity = objRM.RegCapacity == 1 ? 1 : 2;
                    }

                    var objRV = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.RomoocID == romoocID && c.ETA < ETD).OrderByDescending(c => c.ETA).FirstOrDefault();
                    if (objRV != null)
                    {
                        var objLocation = objRV.OPS_COTOLocation.FirstOrDefault(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationReturnRomooc);
                        if (objLocation != null)
                            result.LocationGetRomoocID = objLocation.LocationID.Value;
                    }

                    if (masterID > 0)
                    {
                        var objOf = HelperTOMaster.OPSCO_ChangeScheduleTimeOfferTime(model, Account, masterID, ETD, ETA);
                        if (objOf != null)
                        {
                            result.AllowAddLocal = objOf.AllowAddLocal;
                            result.AllowChangeRomooc = objOf.AllowChangeRomooc;
                            result.DateMax = objOf.DateMax;
                            result.DateMin = objOf.DateMin;
                            result.HourETAOffer = objOf.HourETAOffer;
                            result.ListCOContainer = objOf.ListCOContainer;
                            result.OfferNoteError = objOf.OfferTimeError;
                            result.OfferNoteWarning = objOf.OfferTimeWarning;
                        }
                    }
                    else
                    {
                        var data = model.OPS_COTOContainer.Where(c => (dataOPSCon.Contains(c.OPSContainerID) || dataORDCon.Contains(c.OPS_Container.ContainerID) || dataCon.Contains(c.ID)) && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).OrderBy(c => c.OPSContainerID).ThenBy(c => c.SortOrder).Select(c => c.ID).ToList();
                        var objOf = HelperTOMaster.OPSCO_CreateItemOfferTime(model, Account, data, ETD, ETA, vehicleID, romoocID);
                        if (objOf != null)
                        {
                            result.AllowAddLocal = objOf.AllowAddLocal;
                            result.AllowChangeRomooc = objOf.AllowChangeRomooc;
                            result.DateMax = objOf.DateMax;
                            result.DateMin = objOf.DateMin;
                            result.HourETAOffer = objOf.HourETAOffer;
                            result.ListCOContainer = objOf.ListCOContainer;
                            result.OfferNoteError = objOf.OfferTimeError;
                            result.OfferNoteWarning = objOf.OfferTimeWarning;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Schedule_Data OPSCO_MAP_Schedule_Data(List<int> dataVehicle)
        {
            try
            {
                DTOOPSCO_MAP_Schedule_Data result = new DTOOPSCO_MAP_Schedule_Data();
                using (var model = new DataEntities())
                {
                    const int iEmt = -(int)SYSVarType.TypeOfTOLocationEmpty;
                    const int iGet = -(int)SYSVarType.TypeOfTOLocationGet;
                    const int iDel = -(int)SYSVarType.TypeOfTOLocationDelivery;
                    const int iRGet = -(int)SYSVarType.TypeOfTOLocationGetRomooc;
                    const int iRRet = -(int)SYSVarType.TypeOfTOLocationReturnRomooc;
                    int fSTT = -(int)SYSVarType.StatusOfCOTOMasterApproved;
                    int tSTT = -(int)SYSVarType.StatusOfCOTOMasterTendered;

                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    result.ListVehicle = model.CUS_Vehicle.Where(c => c.VehicleID > 0 && (dataVehicle.Count > 0 ? dataVehicle.Contains(c.VehicleID) : true) && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_MAP_Tractor
                    {
                        ID = c.VehicleID,
                        Regno = c.CAT_Vehicle.RegNo,
                        DriverName = c.CAT_Vehicle.DriverName,
                        MaxWeight = c.CAT_Vehicle.MaxWeightCal ?? 0,
                        RomoocID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CurrentRomoocID.Value : -1,
                        RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                        Lat = c.CAT_Vehicle.Lat.HasValue ? c.CAT_Vehicle.Lat : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lat : null,
                        Lng = c.CAT_Vehicle.Lng.HasValue ? c.CAT_Vehicle.Lng : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lng : null
                    }).ToList();
                    var data = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.VehicleID > 0
                        && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && (dataVehicle.Count > 0 ? dataVehicle.Contains(c.OPS_COTOMaster.VehicleID.Value) : true)
                        && c.OPS_COTOMaster.StatusOfCOTOMasterID >= fSTT && c.OPS_COTOMaster.StatusOfCOTOMasterID <= tSTT && c.OPS_COTOMaster.StatusOfCOTOMasterID != -(int)SYSVarType.StatusOfCOTOMasterSendTender
                        && (isAdmin ? true : Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID))).Select(c => new
                        {
                            ID = c.OPS_COTOMaster.ID,
                            Code = c.OPS_COTOMaster.Code,
                            TOMasterID = c.COTOMasterID.Value,
                            DriverName = c.OPS_COTOMaster.DriverName1,
                            DriverTel = c.OPS_COTOMaster.DriverTel1,
                            VehicleID = c.OPS_COTOMaster.VehicleID ?? -1,
                            RomoocID = c.OPS_COTOMaster.RomoocID ?? -1,
                            VehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                            RomoocNo = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                            VendorCode = c.OPS_COTOMaster.VendorOfVehicleID > 0 && c.OPS_COTOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_COTOMaster.CUS_Customer1.Code : "Xe nhà",
                            Status = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : 2,
                            VendorOfVehicleID = c.OPS_COTOMaster.VendorOfVehicleID,
                            ETA = c.OPS_COTOMaster.ETA,
                            ETD = c.OPS_COTOMaster.ETD,
                            ATA = c.OPS_COTOMaster.ATA,
                            ATD = c.OPS_COTOMaster.ATD,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            Ton = c.OPS_Container.Ton,
                            LocationFromCode = c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet && o.LocationID > 0) != null ? c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet).CAT_Location.Code : string.Empty,
                            LocationFromAddress = c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet && o.LocationID > 0) != null ? c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet).CAT_Location.Address : string.Empty,
                            LocationToCode = c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel && o.LocationID > 0) != null ? c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel).CAT_Location.Code : string.Empty,
                            LocationToAddress = c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel && o.LocationID > 0) != null ? c.OPS_COTOMaster.OPS_COTOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel).CAT_Location.Address : string.Empty,
                        }).ToList();
                    var copy = new CopyHelper();
                    result.ListTrip = new List<DTOOPSCO_MAP_Trip>();
                    foreach (var item in data.GroupBy(c => c.TOMasterID).ToList())
                    {
                        DTOOPSCO_MAP_Trip obj = new DTOOPSCO_MAP_Trip();
                        var oTmp = item.FirstOrDefault();
                        copy.Copy(oTmp, obj);
                        obj.ETD = oTmp.ETD;
                        obj.ETA = oTmp.ETA;
                        obj.ID = item.Key;
                        if (obj.Status == 1)
                        {
                            if (obj.RomoocID > 0 && obj.VehicleID > 0 && !string.IsNullOrEmpty(obj.DriverName))
                                obj.Status = 11;
                        }
                        obj.ContainerNoList = string.Join(",", item.Select(c => c.ContainerNo).Distinct().ToList());
                        result.ListTrip.Add(obj);
                    }

                    foreach (DTOOPSCO_MAP_Trip item in result.ListTrip)
                    {
                        var sID = -1;
                        var objS = model.OPS_COTOLocation.Where(c => c.COTOMasterID == item.ID && c.LocationID > 0 && c.TypeOfTOLocationID == iEmt).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objS != null)
                        {
                            sID = objS.ID;
                            item.LocationStartID = objS.LocationID.Value;
                            item.LocationStartName = objS.CAT_Location.Location;
                            item.LocationStartLat = objS.CAT_Location.Lat;
                            item.LocationStartLng = objS.CAT_Location.Lng;
                        }
                        var objE = model.OPS_COTOLocation.Where(c => c.COTOMasterID == item.ID && c.LocationID > 0 && c.ID != sID && c.TypeOfTOLocationID == iEmt).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                        if (objE != null)
                        {
                            item.LocationEndID = objE.LocationID.Value;
                            item.LocationEndName = objE.CAT_Location.Location;
                            item.LocationEndLat = objE.CAT_Location.Lat;
                            item.LocationEndLng = objE.CAT_Location.Lng;
                        }
                        var objG = model.OPS_COTOLocation.Where(c => c.COTOMasterID == item.ID && c.LocationID > 0 && c.TypeOfTOLocationID == iRGet).FirstOrDefault();
                        if (objG != null)
                        {
                            item.LocationGetRomoocID = objG.LocationID.Value;
                            item.LocationGetRomoocName = objG.CAT_Location.Location;
                            item.LocationGetRomoocLat = objG.CAT_Location.Lat;
                            item.LocationGetRomoocLng = objG.CAT_Location.Lng;
                            item.DateGetRomooc = objG.DateComeEstimate;
                        }
                        var objR = model.OPS_COTOLocation.Where(c => c.COTOMasterID == item.ID && c.LocationID > 0 && c.TypeOfTOLocationID == iRRet).FirstOrDefault();
                        if (objR != null)
                        {
                            item.LocationReturnRomoocID = objR.LocationID.Value;
                            item.LocationReturnRomoocName = objR.CAT_Location.Location;
                            item.LocationReturnRomoocLat = objR.CAT_Location.Lat;
                            item.LocationReturnRomoocLng = objR.CAT_Location.Lng;
                            item.DateReturnRomooc = objR.DateComeEstimate;
                        }

                        List<int> sType = new List<int>(new int[] { iEmt, iRGet, iRRet });
                        item.ListLocation = model.OPS_COTOLocation.Where(c => c.COTOMasterID == item.ID && !sType.Contains(c.TypeOfTOLocationID)).Select(c => new DTOOPSCOTOLocation
                        {
                            ID = c.ID,
                            LocationID = c.LocationID.Value,
                            SortOrder = c.SortOrder,
                            COTOMasterID = c.COTOMasterID,
                            LocationCode = c.CAT_Location.Code,
                            LocationAddress = c.CAT_Location.Address,
                            LocationName = c.CAT_Location.Location,
                            TypeOfTOLocationID = c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery ? 2 : 1,
                            Lat = c.CAT_Location.Lat,
                            Lng = c.CAT_Location.Lng,
                            DateComeEstimate = c.DateComeEstimate
                        }).OrderBy(c => c.SortOrder).ToList();

                        item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID).Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.ID,
                            ContainerID = c.OPS_Container.ContainerID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            ETA = c.OPS_Container.ORD_Container.ETA,
                            ETD = c.OPS_Container.ORD_Container.ETD,
                            StatusOfContainerName = c.SYS_Var.ValueOfVar,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToAddress = c.CAT_Location1.Address
                        }).Distinct().ToList();
                        item.TotalContainer = item.ListContainer.Select(c => c.ContainerID).Distinct().Count();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_Save(DTOOPSCO_MAP_Trip item)
        {
            try
            {
                if (item.ETD == null || item.ETA == null)
                    throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA");
                if (item.ETD >= item.ETA)
                    throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA");
                using (var model = new DataEntities())
                {
                    var objSetting = OPS_SystemSetting_Get(model);

                    model.EventAccount = Account; model.EventRunning = false;
                    var SDATA = new List<int>();
                    DTOOPSCOTOMaster obj = new DTOOPSCOTOMaster();
                    obj.ETA = item.ETA.Value;
                    obj.ETD = item.ETD.Value;
                    if (item.RomoocID > 0)
                        obj.RomoocID = item.RomoocID;
                    obj.VehicleID = item.VehicleID;
                    obj.DriverName1 = item.DriverName;
                    obj.VendorOfRomoocID = item.VendorOfVehicleID > 0 ? item.VendorOfVehicleID : null;
                    obj.VendorOfVehicleID = item.VendorOfVehicleID > 0 ? item.VendorOfVehicleID : null;
                    obj.DriverTel1 = item.DriverTel;
                    obj.DriverID1 = OPS_FindFLMDriver(model, obj.DriverName1);

                    if (obj.VendorOfVehicleID > 0)
                        OPS_CheckingTime(model, objSetting, obj.ID, obj.VehicleID, obj.RomoocID, obj.ETD, obj.ETA, true);

                    obj.ListCO = new List<DTOOPSCOTO>();
                    obj.ListCOLocation = new List<DTOOPSCOTOLocation>();
                    obj.ListCOContainer = new List<DTOOPSCOTOContainer>();

                    var iEXLaden = -(int)SYSVarType.StatusOfCOContainerEXLaden;
                    var iIMLaden = -(int)SYSVarType.StatusOfCOContainerIMLaden;
                    var iLOLaden = -(int)SYSVarType.StatusOfCOContainerLOLaden;
                    var iGELaden = -(int)SYSVarType.StatusOfCOContainerShipLaden;
                    var iSPLaden = -(int)SYSVarType.StatusOfCOContainerGetLaden;
                    if (item.ListOPSCon.Count > 0 && item.ListORDCon.Count == 0)
                    {
                        obj.ListCOContainer = model.OPS_COTOContainer.Where(c => item.ListOPSCon.Contains(c.ID)).OrderBy(c => c.OPSContainerID).ThenBy(c => c.SortOrder).Select(c => new DTOOPSCOTOContainer
                        {
                            ID = c.ID,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            Ton = c.StatusOfCOContainerID == iEXLaden || c.StatusOfCOContainerID == iIMLaden || c.StatusOfCOContainerID == iLOLaden
                            || c.StatusOfCOContainerID == iSPLaden || c.StatusOfCOContainerID == iGELaden ? c.OPS_Container.Ton : 0,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            ETDStart = c.ETDStart,
                            ETAStart = c.ETAStart
                        }).ToList();
                    }
                    else if (item.ListORDCon.Count > 0 && item.ListOPSCon.Count == 0)
                    {
                        obj.ListCOContainer = model.OPS_COTOContainer.Where(c => item.ListORDCon.Contains(c.OPS_Container.ContainerID) && c.COTOMasterID == null && c.IsSplit == false).OrderBy(c => c.OPSContainerID).ThenBy(c => c.SortOrder).Select(c => new DTOOPSCOTOContainer
                        {
                            ID = c.ID,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            Ton = c.StatusOfCOContainerID == iEXLaden || c.StatusOfCOContainerID == iIMLaden || c.StatusOfCOContainerID == iLOLaden
                            || c.StatusOfCOContainerID == iSPLaden || c.StatusOfCOContainerID == iGELaden ? c.OPS_Container.Ton : 0,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            ETDStart = c.ETDStart,
                            ETAStart = c.ETAStart
                        }).ToList();
                    }

                    if (obj.ListCOContainer == null || obj.ListCOContainer.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Không lấy được thông tin đơn hàng!");
                    var dataID = obj.ListCOContainer.Select(c => c.ID).ToList();
                    var objOf = HelperTOMaster.OPSCO_CreateItemOfferTime(model, Account, dataID, obj.ETD, obj.ETA, obj.VehicleID, obj.RomoocID);
                    if (!string.IsNullOrEmpty(objOf.OfferTimeError))
                        throw FaultHelper.BusinessFault(null, null, objOf.OfferTimeError);
                    obj.ListCOContainer = objOf.ListCOContainer;
                    if (obj.ListCOContainer == null || obj.ListCOContainer.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Thời gian không phù hợp với chuyến");

                    //Lưu chuyến.
                    HelperTOMaster.OPSCO_CreateItem(model, Account, obj, new HelperTOMaster_COParam()
                    {
                        LocationFromID = item.LocationStartID,
                        LocationToID = item.LocationEndID,
                        LocationGetRomoocID = item.LocationGetRomoocID,
                        LocationReturnRomoocID = item.LocationReturnRomoocID,
                        DateGetRomooc = item.DateGetRomooc,
                        HasBreakRomooc = item.IsRomoocBreak,
                        DateEnd = item.ETA,
                        DateStart = item.ETD,
                        DateReturnRomooc = item.DateReturnRomooc
                    });
                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_ToMON(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && data.Contains(c.COTOMasterID.Value)).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                    foreach (var id in data)
                    {
                        var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == id);
                        if (obj != null && (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID))
                        {
                            if (obj.DriverID1 == null && obj.VehicleID > 2)
                            {
                                if (obj.CAT_Vehicle.DriverID.HasValue)
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                    obj.DriverID1 = obj.CAT_Vehicle.DriverID;
                                    obj.DriverName1 = obj.CAT_Vehicle.DriverName;
                                    obj.DriverTel1 = obj.CAT_Vehicle.Cellphone;
                                    obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                                }
                            }
                        }
                    }
                    model.SaveChanges();
                    HelperTOMaster.OPSCO_Tendered(model, Account, data);
                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_ToOPS(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && data.Contains(c.COTOMasterID.Value)).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                    HelperTOMaster.OPSCO_UnTendered(model, Account, data);
                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_Cancel(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var sData = new List<int>();
                    foreach (var obj in model.OPS_COTOContainer.Where(c => data.Contains(c.OPS_Container.ContainerID)))
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerCancel;
                        sData.Add(obj.OPS_Container.ORD_Container.OrderID);
                    }
                    model.SaveChanges();
                    HelperStatus.ORDOrder_Status(model, Account, sData);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_UpdateAndToMON(int mID, string tDriverName, string tDriverTel)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        if (obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved)
                        {
                            if (obj.ETD == null || obj.ETA == null)
                                throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA");
                            if (obj.ETD >= obj.ETA)
                                throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA");
                            if (obj.VehicleID == null || obj.RomoocID == null)
                                throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Nhập thông tin đầu kéo và romooc.");
                            obj.DriverName1 = tDriverName;
                            obj.DriverTel1 = tDriverTel;
                            obj.DriverID1 = OPS_FindFLMDriver(model, tDriverName);
                            model.SaveChanges();

                            HelperTOMaster.OPSCO_Tendered(model, Account, new List<int>(new int[] { mID }));
                            HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetCOTOMaster);
                            var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == mID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                            HelperStatus.ORDOrder_Status(model, Account, SDATA);
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Chỉ được duyệt các chuyến đang lập kế hoạch.");
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_ToVendor(DTOOPSCO_MAP_Trip item, List<DTODIAppointmentRouteTender> data)
        {
            try
            {
                throw new Exception("Chức năng tạm khóa!");

                //if (item.ETD == null || item.ETA == null)
                //    throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA");
                //if (item.ETD >= item.ETA)
                //    throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA");
                //using (var model = new DataEntities())
                //{
                //    model.EventAccount = Account; model.EventRunning = false;

                //    DTOOPSCOTOMaster obj = new DTOOPSCOTOMaster();
                //    obj.ETD = item.ETD.Value;
                //    obj.ETA = item.ETA.Value;
                //    obj.ListCO = new List<DTOOPSCOTO>();
                //    obj.ListCOLocation = new List<DTOOPSCOTOLocation>();
                //    obj.ListCOContainer = new List<DTOOPSCOTOContainer>();

                //    if (item.ListOPSCon.Count > 0 && item.ListORDCon.Count == 0)
                //    {
                //        obj.ListCOContainer = model.OPS_COTOContainer.Where(c => item.ListOPSCon.Contains(c.ID)).Select(c => new DTOOPSCOTOContainer
                //        {
                //            ID = c.ID,
                //            LocationFromID = c.LocationFromID,
                //            LocationToID = c.LocationToID,
                //            ETA = c.ETA
                //        }).ToList();
                //    }
                //    else if (item.ListORDCon.Count > 0 && item.ListOPSCon.Count == 0)
                //    {
                //        obj.ListCOContainer = model.OPS_COTOContainer.Where(c => item.ListORDCon.Contains(c.OPS_Container.ContainerID) && c.COTOMasterID == null).Select(c => new DTOOPSCOTOContainer
                //        {
                //            ID = c.ID,
                //            LocationFromID = c.LocationFromID,
                //            LocationToID = c.LocationToID,
                //            ETA = c.ETA
                //        }).ToList();
                //    }
                //    if (obj.ListCOContainer == null || obj.ListCOContainer.Count == 0)
                //        throw FaultHelper.BusinessFault(null, null, "Không lấy được thông tin đơn hàng!");

                //    obj.RateTime = 2;
                //    obj = OPS_CO_Create(model, obj);

                //    var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == obj.ID);
                //    if (objMaster != null)
                //    {
                //        objMaster.StatusOfCOTOMasterID = -(int)SYSVarType.StatusOfCOTOMasterSendTender;
                //        objMaster.ModifiedBy = Account.UserName;
                //        objMaster.ModifiedDate = DateTime.Now;

                //        var now = DateTime.Now.AddMinutes(1);
                //        foreach (var v in data.OrderBy(c => c.SortOrder))
                //        {
                //            OPS_COTORate objRate = new OPS_COTORate();
                //            objRate.CreatedBy = Account.UserName;
                //            objRate.CreatedDate = DateTime.Now;
                //            objRate.COTOMasterID = obj.ID;
                //            objRate.IsManual = v.IsManual;
                //            objRate.VendorID = v.VendorID;
                //            objRate.Debit = v.Debit;
                //            objRate.SortOrder = v.SortOrder;
                //            objRate.FirstRateTime = now;
                //            objRate.LastRateTime = objRate.FirstRateTime.Value.Add(TimeSpan.FromHours(v.RateTime));
                //            now = objRate.LastRateTime.Value;

                //            model.OPS_COTORate.Add(objRate);
                //        }
                //        model.SaveChanges();

                //        var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == objMaster.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                //        HelperStatus.ORDOrder_Status(model, Account, SDATA);

                //        //Gửi mail cho Vendor đầu tiên.
                //        var fRate = model.OPS_COTORate.Where(c => c.COTOMasterID == obj.ID && c.IsSend == false).OrderBy(c => c.SortOrder).FirstOrDefault();
                //        if (fRate != null)
                //        {
                //            if (fRate.FirstRateTime != null)
                //                fRate.FirstRateTime = fRate.FirstRateTime.Value.AddSeconds(1);
                //            List<int> rID = new List<int>();
                //            rID.Add(fRate.ID);
                //            CO_SendMail(rID, fRate.VendorID.Value, Account.SYSCustomerID);
                //        }
                //    }
                //    else
                //    {
                //        throw FaultHelper.BusinessFault(null, null, "Không thể tạo chuyến.");
                //    }
                //}
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_ToVendorKPI(List<int> dataOPSCon, List<DTOOPSCO_MAP_Vendor_KPI> data, double rateTime)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var idx = 1;
                    var dataRate = new List<OPSCOTORate>();
                    var dataContainer = model.OPS_COTOContainer.Where(c => dataOPSCon.Contains(c.OPSContainerID) && c.COTOMasterID == null).Select(c => new { c.ID, c.OPS_Container.ORD_Container.OrderID }).ToList();
                    if (dataContainer == null || dataContainer.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Không lấy được thông tin đơn hàng!");                    
                    foreach (var o in data)
                    {
                        var obj = new OPSCOTORate();
                        obj.VendorID = o.VendorID;
                        obj.SortOrder = idx; idx++;
                        obj.Debit = o.Debit;
                        obj.IsManual = o.IsManual;
                        obj.Note = o.Note;
                        dataRate.Add(obj);
                    }
                    HelperTOMaster.OPSCO_CreateItemSendVendor(model, Account, dataRate, dataContainer.Select(c => c.ID).ToList(), rateTime);
                    HelperStatus.ORDOrder_Status(model, Account, dataContainer.Select(c => c.OrderID).Distinct().ToList());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_Delete(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && data.Contains(c.COTOMasterID.Value)).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                    HelperTOMaster.OPSCO_RemoveApproved(model, Account, data);
                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_COTOContainer_Split(List<int> data, int hubID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            if (obj.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerCancel)
                                throw FaultHelper.BusinessFault(null, null, "Không thể chia chặng đã hủy.");
                            if (obj.COTOMasterID > 0)
                                throw FaultHelper.BusinessFault(null, null, "Không thể chia chặng đã phân chuyến.");

                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.IsSplit = true;

                            var objNew1 = new OPS_COTOContainer();
                            objNew1.CreatedBy = Account.UserName;
                            objNew1.CreatedDate = DateTime.Now;

                            objNew1.ParentID = obj.ID;
                            objNew1.OPSContainerID = obj.OPSContainerID;
                            objNew1.ETD = obj.ETD;
                            objNew1.ETA = obj.ETA;
                            objNew1.LocationFromID = obj.LocationFromID;
                            objNew1.LocationToID = hubID;
                            objNew1.SortOrder = 1;
                            objNew1.StatusOfCOContainerID = obj.StatusOfCOContainerID;
                            objNew1.TypeOfStatusContainerID = obj.TypeOfStatusContainerID;
                            objNew1.TypeOfStatusContainerPODID = obj.TypeOfStatusContainerPODID;
                            objNew1.ETDStart = obj.ETDStart;
                            objNew1.ETAStart = obj.ETAStart;
                            objNew1.DateFromCome = obj.DateFromCome;
                            objNew1.DateFromLeave = obj.DateFromLeave;
                            objNew1.DateToCome = obj.DateToCome;
                            objNew1.DateToLeave = obj.DateToLeave;
                            objNew1.CATRoutingID = obj.CATRoutingID;
                            objNew1.InvoiceNo = obj.InvoiceNo;
                            objNew1.InvoiceBy = obj.InvoiceBy;
                            objNew1.InvoiceDate = obj.InvoiceDate;
                            objNew1.ReasonCancelID = obj.ReasonCancelID;
                            objNew1.ReasonCancelNote = obj.ReasonCancelNote;

                            model.OPS_COTOContainer.Add(objNew1);

                            var objNew2 = new OPS_COTOContainer();
                            objNew2.CreatedBy = Account.UserName;
                            objNew2.CreatedDate = DateTime.Now;

                            objNew2.ParentID = obj.ID;
                            objNew2.OPSContainerID = obj.OPSContainerID;
                            objNew2.ETD = obj.ETD;
                            objNew2.ETA = obj.ETA;
                            objNew2.LocationFromID = hubID;
                            objNew2.LocationToID = obj.LocationToID;
                            objNew2.SortOrder = 2;
                            objNew2.StatusOfCOContainerID = obj.StatusOfCOContainerID;
                            objNew2.TypeOfStatusContainerID = obj.TypeOfStatusContainerID;
                            objNew2.TypeOfStatusContainerPODID = obj.TypeOfStatusContainerPODID;
                            objNew2.ETDStart = obj.ETDStart;
                            objNew2.ETAStart = obj.ETAStart;
                            objNew2.DateFromCome = obj.DateFromCome;
                            objNew2.DateFromLeave = obj.DateFromLeave;
                            objNew2.DateToCome = obj.DateToCome;
                            objNew2.DateToLeave = obj.DateToLeave;
                            objNew2.CATRoutingID = obj.CATRoutingID;
                            objNew2.InvoiceNo = obj.InvoiceNo;
                            objNew2.InvoiceBy = obj.InvoiceBy;
                            objNew2.InvoiceDate = obj.InvoiceDate;
                            objNew2.ReasonCancelID = obj.ReasonCancelID;
                            objNew2.ReasonCancelNote = obj.ReasonCancelNote;

                            model.OPS_COTOContainer.Add(objNew2);

                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_COTOContainer_Split_Cancel(int conID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == conID);
                    if (obj != null)
                    {
                        if (obj.IsSplit)
                        {
                            var data = model.OPS_COTOContainer.Where(c => c.ParentID == obj.ID).ToList();
                            if (data == null || data.Count == 0)
                                throw FaultHelper.BusinessFault(null, null, "Không tìm thấy container đã chia.");
                            foreach (var item in data)
                            {
                                if (item.COTOMasterID > 0)
                                    throw FaultHelper.BusinessFault(null, null, "Không thể gộp container đã phân chuyến.");
                                model.OPS_COTOContainer.Remove(item);
                            }

                            obj.IsSplit = false;
                            obj.ModifiedDate = DateTime.Now;
                            obj.ModifiedBy = Account.UserName;

                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_CheckLocationRequired(DataEntities model, DTOSYSSetting objSetting, DTOOPSCOTOMaster obj)
        {
            try
            {
                double cWeight = 0;
                double eWeight = 0;
                if (obj.VehicleID > 0)
                {
                    var objV = model.CAT_Vehicle.FirstOrDefault(c => c.ID == obj.VehicleID);
                    if (objV == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy đầu kéo");
                    eWeight = Math.Min(objV.MaxWeight ?? 0, eWeight);
                }
                if (obj.RomoocID > 0)
                {
                    var objR = model.CAT_Romooc.FirstOrDefault(c => c.ID == obj.RomoocID);
                    if (objR == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy romooc");
                    eWeight = Math.Min(objR.MaxWeight ?? 0, eWeight);
                }

                for (var i = 0; i < obj.ListCOLocation.Count; i++)
                {
                    var item = obj.ListCOLocation[i];
                    var catObj = model.CAT_Location.FirstOrDefault(c => c.ID == item.LocationID);
                    if (catObj != null && item.DateComeEstimate.HasValue)
                    {
                        var dataRequired = OPS_GetLocationRequired(model, item.LocationID.Value);
                        if (objSetting.HasConstraintTimeOpenLocation)
                        {
                            if (dataRequired.Count(c => c.IsOpen == true && c.IsSize == false) > 0)
                            {
                                var dayOfWeek = (int)item.DateComeEstimate.Value.DayOfWeek;
                                var esDate = new DateTime(2000, 1, 1).Add(item.DateComeEstimate.Value.Subtract(item.DateComeEstimate.Value.Date));

                                var objCheck = dataRequired.FirstOrDefault(c => c.IsOpen == true && c.IsSize == false && ((c.DayOfWeek == dayOfWeek && esDate >= c.TimeFrom && esDate <= c.TimeTo) || (c.DayOfWeek == -1 && item.DateComeEstimate >= c.TimeFrom && item.DateComeEstimate <= c.TimeTo)));
                                if (objCheck == null)
                                    throw FaultHelper.BusinessFault(null, null, "Điểm " + catObj.Location + " không mở cửa vào tgian: " + String.Format("{0:d/M HH:mm}", item.DateComeEstimate.Value));
                            }
                            foreach (var o in dataRequired.Where(c => c.IsOpen == false && c.IsSize == false))
                            {
                                var dayOfWeek = (int)item.DateComeEstimate.Value.DayOfWeek;
                                var esDate = new DateTime(2000, 1, 1).Add(item.DateComeEstimate.Value.Subtract(item.DateComeEstimate.Value.Date));

                                if ((o.DayOfWeek == dayOfWeek && esDate > o.TimeFrom && esDate < o.TimeTo) || (o.DayOfWeek == -1 && item.DateComeEstimate > o.TimeFrom && item.DateComeEstimate < o.TimeTo))
                                    throw FaultHelper.BusinessFault(null, null, "Điểm " + catObj.Location + " không mở cửa vào tgian: từ " + String.Format("{0:d/M HH:mm}", o.TimeFrom) + " đến " + String.Format("{0:d/M HH:mm}", o.TimeTo));
                            }
                        }
                        //Check trọng tải trước khi vào kho/cảng/bãi
                        if (objSetting.HasConstraintWeight)
                        {
                            foreach (var o in dataRequired.Where(c => c.IsOpen == true && c.IsSize == true))
                            {
                                var dayOfWeek = (int)item.DateComeEstimate.Value.DayOfWeek;
                                var esDate = new DateTime(2000, 1, 1).Add(item.DateComeEstimate.Value.Subtract(item.DateComeEstimate.Value.Date));
                                if (((o.DayOfWeek == dayOfWeek && esDate > o.TimeFrom && esDate < o.TimeTo) || (o.DayOfWeek == -1 && item.DateComeEstimate > o.TimeFrom && item.DateComeEstimate < o.TimeTo)) && o.Weight < cWeight)
                                    throw FaultHelper.BusinessFault(null, null, "Điểm " + catObj.Location + " không đáp ứng trọng tải. Tgian:" + String.Format("{0:d/M HH:mm}", item.DateComeEstimate.Value));
                            }
                        }
                        foreach (var o in obj.ListCOContainer.Where(c => c.LocationFromID == item.LocationID).ToList())
                        {
                            cWeight = cWeight + o.Ton;
                        }
                        foreach (var o in obj.ListCOContainer.Where(c => c.LocationFromID == item.LocationID).ToList())
                        {
                            cWeight = cWeight - o.Ton;
                        }
                        //Check trọng tải sau khi Load/UnLoad hàng
                        if (objSetting.HasConstraintTransport)
                        {
                            if (eWeight > 0 && eWeight < cWeight)
                            {
                                throw FaultHelper.BusinessFault(null, null, "Phương tiện không đáp ứng trọng tải tại điểm " + catObj.Location);
                            }
                        }
                        if (objSetting.HasConstraintWeight)
                        {
                            foreach (var o in dataRequired.Where(c => c.IsOpen == true && c.IsSize == true))
                            {
                                var dayOfWeek = (int)item.DateComeEstimate.Value.DayOfWeek;
                                var esDate = new DateTime(2000, 1, 1).Add(item.DateComeEstimate.Value.Subtract(item.DateComeEstimate.Value.Date));
                                if (((o.DayOfWeek == dayOfWeek && esDate > o.TimeFrom && esDate < o.TimeTo) || (o.DayOfWeek == -1 && item.DateComeEstimate > o.TimeFrom && item.DateComeEstimate < o.TimeTo)) && o.Weight < cWeight)
                                    throw FaultHelper.BusinessFault(null, null, "Điểm " + catObj.Location + " không đáp ứng trọng tải. Tgian:" + String.Format("{0:d/M HH:mm}", item.DateComeEstimate.Value));
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //View xem chuyến mới.
        public DTOResult OPSCO_MAP_COTOContainer_List(string request, bool isApproved, bool isTendered, DateTime? fDate, DateTime? tDate)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (fDate.HasValue)
                        fDate = fDate.Value.Date;
                    if (tDate.HasValue)
                        tDate = tDate.Value.Date.AddDays(1);

                    int fSTT = -(int)SYSVarType.StatusOfCOTOMasterApproved;
                    int tSTT = -(int)SYSVarType.StatusOfCOTOMasterTendered;
                    if (!isTendered)
                        tSTT = -(int)SYSVarType.StatusOfCOTOMasterApproved;
                    if (!isApproved)
                        fSTT = -(int)SYSVarType.StatusOfCOTOMasterTendered;

                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && !c.IsSplit
                        && c.OPS_COTOMaster.StatusOfCOTOMasterID >= fSTT && c.OPS_COTOMaster.StatusOfCOTOMasterID <= tSTT && c.OPS_COTOMaster.StatusOfCOTOMasterID != -(int)SYSVarType.StatusOfCOTOMasterSendTender
                        && (isAdmin ? true : Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID))
                        && (fDate != null && tDate != null ? c.OPS_COTOMaster.ETD >= fDate && c.OPS_COTOMaster.ETD < tDate : true)).Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.OPSContainerID,
                            TOMasterID = c.COTOMasterID.Value,
                            TOMasterCode = c.OPS_COTOMaster.Code,
                            TOVehicleID = c.OPS_COTOMaster.VehicleID ?? -1,
                            TOVehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                            TORomoocID = c.OPS_COTOMaster.RomoocID ?? -1,
                            TORomoocNo = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                            TOVendorID = c.OPS_COTOMaster.VendorOfVehicleID,
                            TOVendorCode = c.OPS_COTOMaster.VendorOfVehicleID > 0 && c.OPS_COTOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà",
                            TODriverName = c.OPS_COTOMaster.DriverName1,
                            TODriverTel = c.OPS_COTOMaster.DriverTel1,
                            TOETA = c.OPS_COTOMaster.ETA,
                            TOETD = c.OPS_COTOMaster.ETD,
                            TOCreatedBy = c.OPS_COTOMaster.CreatedBy,
                            TOCreatedDate = c.OPS_COTOMaster.CreatedDate,
                            TOLastUpdate = string.IsNullOrEmpty(c.OPS_COTOMaster.ModifiedBy) ? c.OPS_COTOMaster.CreatedBy : c.OPS_COTOMaster.ModifiedBy,
                            TOLastUpdateTime = c.OPS_COTOMaster.ModifiedDate ?? c.OPS_COTOMaster.CreatedDate,
                            TOStatus = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : 2,

                            ContainerID = c.OPS_Container.ContainerID,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            ETA = c.OPS_Container.ORD_Container.ETA,
                            ETD = c.OPS_Container.ORD_Container.ETD,
                            LocationFromCode = c.OPS_Container.ORD_Container.CUS_Location2.Code,
                            LocationFromName = c.OPS_Container.ORD_Container.CUS_Location2.LocationName,
                            LocationFromAddress = c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.Address,
                            LocationToCode = c.OPS_Container.ORD_Container.CUS_Location3.Code,
                            LocationToName = c.OPS_Container.ORD_Container.CUS_Location3.LocationName,
                            LocationToAddress = c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.Address,
                            LocationDepotCode = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Location : string.Empty,
                            LocationDepotReturnCode = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Code : string.Empty,
                            LocationDepotReturnName = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Location : string.Empty,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            Ton = c.OPS_Container.Ton,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                            Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                            Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                    var objSetting = OPS_SystemSetting_Get(model);
                    DateTime dtWarning = DateTime.Now;
                    if (objSetting != null)
                        dtWarning = objSetting.TimeDelayWarning > 0 ? DateTime.Now.AddHours(objSetting.TimeDelayWarning) : DateTime.Now;
                    if (objSetting.WarningETD)
                    {
                        foreach (DTOOPSCO_MAP_Container item in result.Data)
                        {
                            if (item.TOStatus == 1 && item.TOETD.HasValue && item.TOETD < dtWarning)
                            {
                                item.IsWarning = true;
                                item.WarningType = 1;
                                item.WarningTime = dtWarning.Subtract(item.TOETD.Value).TotalHours;
                                item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ kế hoạch vận chuyển";
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_MAP_COTOContainer_ByTrip_List(string request, int mID, int opsConID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objRequest = CreateRequest(request);
                    if (objRequest.Sorts == null || objRequest.Sorts.Count == 0)
                    {
                        var objSort = new SortDescriptor("SortOrder", System.ComponentModel.ListSortDirection.Ascending);
                        objRequest.Sorts.Add(objSort);
                    }
                    var query = model.OPS_COTOContainer.Where(c => (mID > 0 ? c.COTOMasterID == mID : c.COTOMasterID == null) && !c.IsSplit && (opsConID > 0 ? c.OPSContainerID == opsConID : true)).Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.ID,
                            SortOrder = c.SortOrder,
                            ContainerID = c.OPS_Container.ContainerID,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            StatusOfContainerName = c.SYS_Var.ValueOfVar,
                            Ton = c.OPS_Container.Ton,
                            OPSContainerID = c.OPSContainerID,
                            COTOStatus = c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerWait ? 0 : c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerTranfer ? 1 : c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerComplete ? 2 : 3,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                            Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                            Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                        }).OrderBy(c => c.SortOrder).Distinct().ToDataSourceResult(objRequest);
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //2View
        public DTOResult OPSCO_MAP_2View_Container_List(string request, List<int> data, DateTime? fDate, DateTime? tDate)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (fDate.HasValue)
                        fDate = fDate.Value.Date;
                    if (tDate.HasValue)
                        tDate = tDate.Value.Date.AddDays(1);
                    var isApproved = -(int)SYSVarType.StatusOfCOTOMasterApproved;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && !c.IsSplit
                       && c.OPS_COTOMaster.StatusOfCOTOMasterID == isApproved && (isAdmin ? true : Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID))
                       && (data.Count > 0 ? data.Contains(c.COTOMasterID.Value) : (fDate != null && tDate != null ? c.OPS_COTOMaster.ETD >= fDate && c.OPS_COTOMaster.ETD < tDate : true)))
                       .Select(c => new DTOOPSCO_MAP_Container
                       {
                           ID = c.OPSContainerID,
                           TOMasterID = c.COTOMasterID.Value,
                           TOMasterCode = c.OPS_COTOMaster.Code,
                           TOVehicleID = c.OPS_COTOMaster.VehicleID ?? -1,
                           TOVehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                           TORomoocID = c.OPS_COTOMaster.RomoocID ?? -1,
                           TORomoocNo = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                           TOVendorID = c.OPS_COTOMaster.VendorOfVehicleID,
                           TOVendorCode = c.OPS_COTOMaster.VendorOfVehicleID > 0 && c.OPS_COTOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà",
                           TODriverName = c.OPS_COTOMaster.DriverName1,
                           TODriverTel = c.OPS_COTOMaster.DriverTel1,
                           TOETA = c.OPS_COTOMaster.ETA,
                           TOETD = c.OPS_COTOMaster.ETD,
                           TOCreatedBy = c.OPS_COTOMaster.CreatedBy,
                           TOCreatedDate = c.OPS_COTOMaster.CreatedDate,
                           TOLastUpdate = string.IsNullOrEmpty(c.OPS_COTOMaster.ModifiedBy) ? c.OPS_COTOMaster.CreatedBy : c.OPS_COTOMaster.ModifiedBy,
                           TOLastUpdateTime = c.OPS_COTOMaster.ModifiedDate ?? c.OPS_COTOMaster.CreatedDate,
                           TOStatus = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : 2,

                           ContainerID = c.OPS_Container.ContainerID,
                           ContainerNo = c.OPS_Container.ContainerNo,
                           SealNo1 = c.OPS_Container.SealNo1,
                           SealNo2 = c.OPS_Container.SealNo2,
                           CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                           CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                           CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                           CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                           CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                           ETA = c.OPS_Container.ORD_Container.ETA,
                           ETD = c.OPS_Container.ORD_Container.ETD,
                           LocationFromCode = c.OPS_Container.ORD_Container.CUS_Location2.Code,
                           LocationFromName = c.OPS_Container.ORD_Container.CUS_Location2.LocationName,
                           LocationFromAddress = c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.Address,
                           LocationToCode = c.OPS_Container.ORD_Container.CUS_Location3.Code,
                           LocationToName = c.OPS_Container.ORD_Container.CUS_Location3.LocationName,
                           LocationToAddress = c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.Address,
                           LocationDepotCode = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Code : string.Empty,
                           LocationDepotName = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Location : string.Empty,
                           LocationDepotReturnCode = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Code : string.Empty,
                           LocationDepotReturnName = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Location : string.Empty,
                           OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                           ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                           Ton = c.OPS_Container.Ton,
                           TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                           Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                           Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                           Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                       }).OrderBy(c => c.TOMasterID).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                    int idx = 1;
                    Dictionary<int, int> dicTO = new Dictionary<int, int>();
                    foreach (var item in result.Data as IEnumerable<DTOOPSCO_MAP_Container>)
                    {
                        if (dicTO.ContainsKey(item.TOMasterID))
                        {
                            item.TOMasterIndex = dicTO[item.TOMasterID];
                        }
                        else
                        {
                            item.TOMasterIndex = idx++;
                            dicTO.Add(item.TOMasterID, item.TOMasterIndex);
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool OPSCO_MAP_2View_Master_Update_Check4Delete(int mID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return model.OPS_COTOContainer.Where(c => c.COTOMasterID == mID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => c.OPSContainerID).Distinct().Count() == 1;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_2View_Master_Update_TimeLine(int mID, int vendorID, int vehicleID, bool isTractor, DateTime ETD, DateTime ETA, List<DTOOPSCOTOContainer> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại!");
                    if (ETD >= ETA)
                        throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA!");
                    if (vendorID < 1)
                    {
                        if (isTractor && obj.VehicleID != vehicleID)
                        {
                            var objVehicle = model.FLM_Asset.FirstOrDefault(c => c.VehicleID == vehicleID && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor);
                            if (objVehicle == null)
                                throw FaultHelper.BusinessFault(null, null, "Xe không tồn tại hoặc đã bị thanh lý!");
                            var driverID = OPS_FindFLMDriver(model, objVehicle.CAT_Vehicle.DriverName);
                            var driverName = objVehicle.CAT_Vehicle.DriverName;
                            var driverTel = objVehicle.CAT_Vehicle.DriverID > 0 ? objVehicle.CAT_Vehicle.FLM_Driver.CAT_Driver.Cellphone : string.Empty;
                            var objPlanning = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == vehicleID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain
                                       && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA)));
                            if (objPlanning != null)
                            {
                                driverID = objPlanning.DriverID;
                                driverTel = objPlanning.FLM_Driver.CAT_Driver.Cellphone;
                                driverName = objPlanning.FLM_Driver.CAT_Driver.LastName + " " + objPlanning.FLM_Driver.CAT_Driver.FirstName;
                            }
                            if (driverID == null)
                                throw FaultHelper.BusinessFault(null, null, "Xe chưa thiết lập tài xế!");
                        }
                    }

                    if (vendorID < 1)
                    {
                        if (isTractor)
                        {
                            OPS_CheckingTime(model, OPS_SystemSetting_Get(model), mID, vehicleID, obj.RomoocID, ETD, ETA, true);
                        }
                        else
                        {
                            OPS_CheckingTime(model, OPS_SystemSetting_Get(model), mID, obj.VehicleID, vehicleID, ETD, ETA, true);
                        }
                        vendorID = Account.SYSCustomerID;
                    }

                    if (isTractor && (obj.VehicleID != vehicleID || (obj.VendorOfVehicleID == null && vendorID != Account.SYSCustomerID) || (obj.VendorOfVehicleID > 0 && obj.VendorOfVehicleID != vendorID)))
                    {
                        HelperTOMaster.OPSCO_ChangeScheduleVehicle(model, Account, obj.ID, vehicleID, null);
                    }
                    else if (!isTractor && (obj.RomoocID != vehicleID || (obj.VendorOfVehicleID == null && vendorID != Account.SYSCustomerID) || (obj.VendorOfVehicleID > 0 && obj.VendorOfVehicleID != vendorID)))
                    {
                        HelperTOMaster.OPSCO_ChangeScheduleRomooc(model, Account, obj.ID, vehicleID);
                    }
                    else
                    {
                        HelperTOMaster.OPSCO_ChangeScheduleTime(model, Account, obj.ID, ETD, ETA, data);
                    }
                    model.SaveChanges();
                    var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_2View_Master_Update_Container(int mID, List<int> dataCon, bool isRemove)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến cần cập nhật!");
                    if (obj.StatusOfCOTOMasterID != -(int)SYSVarType.StatusOfCOTOMasterApproved)
                        throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Chỉ cập nhật chuyến đang kế hoạch");
                    if (isRemove)
                    {
                        obj.ModifiedDate = DateTime.Now;
                        obj.ModifiedBy = Account.UserName;

                        var SDATA = new List<int>();
                        var SDATACO = new List<int>();
                        var dataLocation = new List<int>();
                        foreach (var o in model.OPS_COTOContainer.Where(c => dataCon.Contains(c.OPSContainerID)).ToList())
                        {
                            SDATA.Add(o.OPS_Container.ORD_Container.OrderID);
                            SDATACO.Add(o.ID);
                        }
                        HelperTOMaster.OPSCO_DeleteTOContainerMaster(model, Account, obj.ID, SDATACO);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                    else
                    {
                        var SDATA = new List<int>();
                        var SEvent = new List<DTOOPSCO_Map_Schedule_Event>();
                        foreach (var o in model.OPS_COTOContainer.Where(c => dataCon.Contains(c.OPSContainerID)).ToList())
                        {
                            var item = new DTOOPSCO_Map_Schedule_Event();
                            item.ID = o.ID;
                            item.StartDate = o.ETD.Value;
                            item.EndDate = o.ETA.Value;
                            item.TOMasterID = o.COTOMasterID.HasValue ? o.COTOMasterID.Value : -1;
                            SEvent.Add(item);
                            SDATA.Add(o.OPS_Container.ORD_Container.OrderID);
                        }
                        foreach (var o in model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID && !c.IsSplit).ToList())
                        {
                            var item = new DTOOPSCO_Map_Schedule_Event();
                            item.ID = o.ID;
                            item.StartDate = o.ETD.Value;
                            item.EndDate = o.ETA.Value;
                            item.TOMasterID = o.COTOMasterID.Value;
                            SEvent.Add(item);
                        }
                        var error = HelperTOMaster_Error.None;
                        error = HelperTOMaster.OPSCO_AddTOContainerMasterCheck(model, Account, obj.ID, SEvent);
                        if (error != HelperTOMaster_Error.None)
                            throw FaultHelper.BusinessFault(null, null, error.ToString());
                        HelperTOMaster.OPSCO_AddTOContainerMaster(model, Account, obj.ID, SEvent);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_2View_Master_Update(DTOOPSCO_MAP_Trip item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.ETA == null || item.ETD == null)
                        throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA");
                    if (item.VendorOfVehicleID == null && (item.LocationStartID < 1 || item.LocationEndID < 1))
                        throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin điểm bắt đầu/kết thúc");
                    if (item.ETD >= item.ETA)
                        throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA");
                    if (item.VendorOfVehicleID == null || item.VendorOfVehicleID < 1 || item.VendorOfVehicleID == Account.SYSCustomerID)
                    {
                        var cDriver = OPS_FindFLMDriver(model, item.DriverName);
                        if (cDriver == null || cDriver < 1)
                            throw FaultHelper.BusinessFault(null, null, "Tài xế không tồn tại.");
                    }

                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved)
                        {
                            OPS_CheckingTime(model, OPS_SystemSetting_Get(model), obj.ID, item.VehicleID, item.RomoocID, item.ETD, item.ETA, true);
                            obj.VehicleID = item.VehicleID;
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.VendorOfVehicleID = null;
                            if (item.VendorOfVehicleID > 0)
                                obj.VendorOfVehicleID = item.VendorOfVehicleID;
                            obj.ETA = item.ETA.Value;
                            obj.ETD = item.ETD.Value;
                            obj.DriverTel1 = item.DriverTel;
                            obj.DriverName1 = item.DriverName;
                            obj.DriverID1 = OPS_FindFLMDriver(model, obj.DriverName1);
                            obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                            model.SaveChanges();
                            HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetCOTOMaster);
                            HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetCOTOMaster, null);
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Chỉ được cập nhật các chuyến đang lập kế hoạch.");
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_2View_Master_ChangeVehicle(int mID, int vID, int type)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        if (obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            if (type == 1)
                            {
                                obj.VehicleID = vID;
                            }
                            else if (type == 2)
                            {
                                obj.RomoocID = vID;
                            }
                            OPS_CheckingTime(model, OPS_SystemSetting_Get(model), obj.ID, obj.VehicleID, obj.RomoocID, obj.ETD, obj.ETA, true);
                            model.SaveChanges();
                            HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetCOTOMaster);
                            HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetCOTOMaster, null);
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Chỉ được cập nhật các chuyến đang lập kế hoạch.");
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_VehicleAvailable OPSCO_MAP_2View_Master_ChangeDriver(List<int> data)
        {
            try
            {
                DTOOPSCO_MAP_VehicleAvailable result = new DTOOPSCO_MAP_VehicleAvailable();
                using (var model = new DataEntities())
                {
                    foreach (int masterID in data)
                    {
                        var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == masterID);
                        if (obj != null)
                        {
                            if (obj.VehicleID > 0 && (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID))
                            {
                                var objPlanning = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == obj.VehicleID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain
                                && !((c.DateFrom < obj.ETD && c.DateTo < obj.ETD) || (c.DateFrom > obj.ETA && c.DateTo > obj.ETA)));
                                if (objPlanning != null)
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                    obj.DriverID1 = objPlanning.DriverID;
                                    obj.DriverName1 = objPlanning.FLM_Driver.CAT_Driver.LastName + " " + objPlanning.FLM_Driver.CAT_Driver.FirstName;
                                    obj.DriverTel1 = objPlanning.FLM_Driver.CAT_Driver.Cellphone;
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                    obj.DriverID1 = null;
                                    obj.DriverName1 = string.Empty;
                                    obj.DriverTel1 = string.Empty;

                                    if (obj.CAT_Vehicle.DriverID.HasValue)
                                    {
                                        obj.DriverID1 = obj.CAT_Vehicle.DriverID;
                                        obj.DriverName1 = obj.CAT_Vehicle.FLM_Driver.CAT_Driver.LastName + " " + obj.CAT_Vehicle.FLM_Driver.CAT_Driver.FirstName;
                                        obj.DriverTel1 = obj.CAT_Vehicle.FLM_Driver.CAT_Driver.Cellphone;
                                    }
                                    else
                                    {
                                        obj.DriverTel1 = obj.CAT_Vehicle.Cellphone;
                                        obj.DriverName1 = obj.CAT_Vehicle.DriverName;
                                        obj.DriverID1 = OPS_FindFLMDriver(model, obj.DriverName1);
                                    }
                                }
                            }
                            result.DriverName = obj.DriverName1;
                            result.DriverTel = obj.DriverTel1;
                        }
                    }
                    model.SaveChanges();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_TimeLine_Update_Container(int mID, List<int> dataOPSCon, List<int> dataCon, bool isRemove)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến cần cập nhật!");
                    if (obj.StatusOfCOTOMasterID != -(int)SYSVarType.StatusOfCOTOMasterApproved)
                        throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Chỉ cập nhật chuyến đang kế hoạch");
                    if (isRemove)
                    {
                        obj.ModifiedDate = DateTime.Now;
                        obj.ModifiedBy = Account.UserName;

                        var SDATA = new List<int>();
                        var SDATACO = new List<int>();
                        var dataLocation = new List<int>();
                        foreach (var o in model.OPS_COTOContainer.Where(c => dataOPSCon.Contains(c.OPSContainerID)).ToList())
                        {
                            SDATA.Add(o.OPS_Container.ORD_Container.OrderID);
                            SDATACO.Add(o.ID);
                        }
                        foreach (var o in model.OPS_COTOContainer.Where(c => dataCon.Contains(c.ID)).ToList())
                        {
                            SDATA.Add(o.OPS_Container.ORD_Container.OrderID);
                            SDATACO.Add(o.ID);
                        }
                        HelperTOMaster.OPSCO_DeleteTOContainerMaster(model, Account, obj.ID, SDATACO);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                    else
                    {
                        var SDATA = new List<int>();
                        var SEvent = new List<DTOOPSCO_Map_Schedule_Event>();
                        foreach (var o in model.OPS_COTOContainer.Where(c => dataOPSCon.Contains(c.OPSContainerID)).ToList())
                        {
                            SDATA.Add(o.OPS_Container.ORD_Container.OrderID);
                            var item = new DTOOPSCO_Map_Schedule_Event();
                            item.ID = o.ID;
                            item.StartDate = o.ETD.Value;
                            item.EndDate = o.ETA.Value;
                            item.TOMasterID = o.COTOMasterID.HasValue ? o.COTOMasterID.Value : -1;
                            SEvent.Add(item);
                        }
                        foreach (var o in model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID && !c.IsSplit).ToList())
                        {
                            var item = new DTOOPSCO_Map_Schedule_Event();
                            item.ID = o.ID;
                            item.StartDate = o.ETD.Value;
                            item.EndDate = o.ETA.Value;
                            item.TOMasterID = o.COTOMasterID.Value;
                            SEvent.Add(item);
                        }
                        foreach (var o in model.OPS_COTOContainer.Where(c => dataCon.Contains(c.ID)).ToList())
                        {
                            SDATA.Add(o.OPS_Container.ORD_Container.OrderID);
                            var item = new DTOOPSCO_Map_Schedule_Event();
                            item.ID = o.ID;
                            item.StartDate = o.ETD.Value;
                            item.EndDate = o.ETA.Value;
                            item.TOMasterID = -1;
                            SEvent.Add(item);
                        }
                        var error = HelperTOMaster_Error.None;
                        error = HelperTOMaster.OPSCO_AddTOContainerMasterCheck(model, Account, obj.ID, SEvent);
                        if (error != HelperTOMaster_Error.None)
                            throw FaultHelper.BusinessFault(null, null, error.ToString());
                        HelperTOMaster.OPSCO_AddTOContainerMaster(model, Account, obj.ID, SEvent);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_TimeLine_Create_Master(DTOOPSCO_MAP_Trip item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objSetting = OPS_SystemSetting_Get(model);
                    DTOOPSCOTOMaster obj = new DTOOPSCOTOMaster();
                    obj.ETA = item.ETA.Value;
                    obj.ETD = item.ETD.Value;
                    if (item.RomoocID > 0)
                        obj.RomoocID = item.RomoocID;
                    obj.VehicleID = item.VehicleID;
                    obj.DriverName1 = item.DriverName;
                    obj.DriverTel1 = item.DriverTel;
                    obj.DriverID1 = OPS_FindFLMDriver(model, obj.DriverName1);

                    OPS_CheckingTime(model, objSetting, obj.ID, obj.VehicleID, obj.RomoocID, obj.ETD, obj.ETA, true);

                    obj.ListCO = new List<DTOOPSCOTO>();
                    obj.ListCOLocation = new List<DTOOPSCOTOLocation>();
                    obj.ListCOContainer = new List<DTOOPSCOTOContainer>();

                    var iEXLaden = -(int)SYSVarType.StatusOfCOContainerEXLaden;
                    var iIMLaden = -(int)SYSVarType.StatusOfCOContainerIMLaden;
                    var iLOLaden = -(int)SYSVarType.StatusOfCOContainerLOLaden;
                    var iGELaden = -(int)SYSVarType.StatusOfCOContainerShipLaden;
                    var iSPLaden = -(int)SYSVarType.StatusOfCOContainerGetLaden;
                    if (item.ListOPSCon.Count > 0 && item.ListORDCon.Count == 0)
                    {
                        obj.ListCOContainer = model.OPS_COTOContainer.Where(c => item.ListOPSCon.Contains(c.ID)).OrderBy(c => c.OPSContainerID).ThenBy(c => c.SortOrder).Select(c => new DTOOPSCOTOContainer
                        {
                            ID = c.ID,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            Ton = c.StatusOfCOContainerID == iEXLaden || c.StatusOfCOContainerID == iIMLaden || c.StatusOfCOContainerID == iLOLaden
                            || c.StatusOfCOContainerID == iSPLaden || c.StatusOfCOContainerID == iGELaden ? c.OPS_Container.Ton : 0,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            ETDStart = c.ETDStart,
                            ETAStart = c.ETAStart
                        }).ToList();
                    }
                    else if (item.ListORDCon.Count > 0 && item.ListOPSCon.Count == 0)
                    {
                        obj.ListCOContainer = model.OPS_COTOContainer.Where(c => item.ListORDCon.Contains(c.OPS_Container.ContainerID) && c.COTOMasterID == null && c.IsSplit == false).OrderBy(c => c.OPSContainerID).ThenBy(c => c.SortOrder).Select(c => new DTOOPSCOTOContainer
                        {
                            ID = c.ID,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            Ton = c.StatusOfCOContainerID == iEXLaden || c.StatusOfCOContainerID == iIMLaden || c.StatusOfCOContainerID == iLOLaden
                            || c.StatusOfCOContainerID == iSPLaden || c.StatusOfCOContainerID == iGELaden ? c.OPS_Container.Ton : 0,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            ETDStart = c.ETDStart,
                            ETAStart = c.ETAStart
                        }).ToList();
                    }

                    if (obj.ListCOContainer == null || obj.ListCOContainer.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Không lấy được thông tin đơn hàng!");

                    //Lưu chuyến.
                    var error = HelperTOMaster_Error.None;
                    error = HelperTOMaster.OPSCO_CreateItemCheck(model, Account, obj, new HelperTOMaster_COParam()
                    {
                        LocationFromID = item.LocationStartID,
                        LocationToID = item.LocationEndID,
                        LocationGetRomoocID = item.LocationGetRomoocID,
                        LocationReturnRomoocID = item.LocationReturnRomoocID,
                        DateGetRomooc = item.DateGetRomooc,
                        HasBreakRomooc = item.IsRomoocBreak,
                        DateEnd = item.ETA,
                        DateStart = item.ETD,
                        DateReturnRomooc = item.DateReturnRomooc
                    });
                    if (error != HelperTOMaster_Error.None)
                        throw FaultHelper.BusinessFault(null, null, error.ToString());
                    obj = HelperTOMaster.OPSCO_CreateItem(model, Account, obj, new HelperTOMaster_COParam()
                    {
                        LocationFromID = item.LocationStartID,
                        LocationToID = item.LocationEndID,
                        LocationGetRomoocID = item.LocationGetRomoocID,
                        LocationReturnRomoocID = item.LocationReturnRomoocID,
                        DateGetRomooc = item.DateGetRomooc,
                        HasBreakRomooc = item.IsRomoocBreak,
                        DateEnd = item.ETA,
                        DateStart = item.ETD,
                        DateReturnRomooc = item.DateReturnRomooc
                    });
                    var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Tractor OPSCO_MAP_TimeLine_Vehicle_Info(int venID, int vehID, int romID, DateTime now)
        {
            try
            {
                DTOOPSCO_MAP_Tractor result = new DTOOPSCO_MAP_Tractor();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (venID < 1)
                    {
                        result.VehicleVendorCode = "Xe nhà";
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehID);
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.Regno = obj.RegNo;
                            result.MaxWeight = obj.MaxWeight ?? 0;
                            var objD = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == obj.ID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain && c.DateFrom <= now && c.DateTo >= now);
                            if (objD != null)
                            {
                                result.DriverName = objD.FLM_Driver.CAT_Driver.LastName + " " + objD.FLM_Driver.CAT_Driver.FirstName;
                            }
                            else
                            {
                                if (OPS_FindFLMDriver(model, obj.DriverName) > 0)
                                    result.DriverName = obj.DriverName;
                            }
                            if (obj.CurrentRomoocID > 0)
                            {
                                result.RomoocID = obj.CurrentRomoocID.Value;
                                result.RomoocNo = obj.CAT_Romooc.RegNo;
                                result.MaxWeight = Math.Min(result.MaxWeight, obj.CAT_Romooc.MaxWeight ?? 0);
                                result.RomoocGroupID = obj.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                            }
                            else
                            {
                                var dataDef = model.CAT_RomoocDefault.Where(c => c.VehicleID == result.ID).Select(c => new
                                {
                                    c.RomoocID,
                                    c.CAT_Romooc.RegNo,
                                    c.SortOrder,
                                    c.CAT_Romooc.MaxWeight,
                                    c.CAT_Romooc.RegCapacity
                                }).OrderBy(c => c.SortOrder).ToList();
                                int i = 0;
                                while (result.RomoocID < 1 && i < dataDef.Count)
                                {
                                    var o = dataDef[i];
                                    i++;
                                    var objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID == o.RomoocID
                                    && !((c.DateFromActual < now && c.DateToActual < now))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                                    if (objR == null)
                                    {
                                        result.RomoocID = o.RomoocID;
                                        result.RomoocNo = o.RegNo;
                                        result.MaxWeight = Math.Min(result.MaxWeight, o.MaxWeight ?? 0);
                                        result.RomoocGroupID = o.RegCapacity == 1 ? 1 : 2;
                                    }
                                }
                                if (result.RomoocID < 1)
                                {
                                    var objDef = model.CAT_Romooc.FirstOrDefault();
                                    if (objDef != null)
                                    {
                                        result.RomoocID = objDef.ID;
                                        result.RomoocNo = objDef.RegNo;
                                        result.MaxWeight = Math.Min(result.MaxWeight, objDef.MaxWeight ?? 0);
                                        result.RomoocGroupID = objDef.RegCapacity == 1 ? 1 : 2;
                                    }
                                }
                            }
                        }
                        else
                        {
                            obj = model.CAT_Vehicle.FirstOrDefault();
                            if (obj != null)
                            {
                                result.ID = obj.ID;
                                result.Regno = obj.RegNo;
                                result.MaxWeight = obj.MaxWeight ?? 0;
                                var objD = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == obj.ID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain && c.DateFrom <= now && c.DateTo >= now);
                                if (objD != null)
                                {
                                    result.DriverName = objD.FLM_Driver.CAT_Driver.LastName + " " + objD.FLM_Driver.CAT_Driver.FirstName;
                                }
                                else
                                {
                                    if (OPS_FindFLMDriver(model, obj.DriverName) > 0)
                                        result.DriverName = obj.DriverName;
                                }
                                if (romID > 0)
                                {
                                    var objRomooc = model.CAT_Romooc.FirstOrDefault(c => c.ID == romID);
                                    if (objRomooc != null)
                                    {
                                        result.RomoocID = objRomooc.ID;
                                        result.RomoocNo = objRomooc.RegNo;
                                        result.MaxWeight = Math.Min(result.MaxWeight, objRomooc.MaxWeight ?? 0);
                                        result.RomoocGroupID = objRomooc.RegCapacity == 1 ? 1 : 2;
                                    }
                                    else
                                    {
                                        objRomooc = model.CAT_Romooc.FirstOrDefault();
                                        if (objRomooc != null)
                                        {
                                            result.RomoocID = objRomooc.ID;
                                            result.RomoocNo = objRomooc.RegNo;
                                            result.MaxWeight = Math.Min(result.MaxWeight, objRomooc.MaxWeight ?? 0);
                                            result.RomoocGroupID = objRomooc.RegCapacity == 1 ? 1 : 2;
                                        }
                                    }
                                }
                                else
                                {
                                    if (obj.CurrentRomoocID > 0)
                                    {
                                        result.RomoocID = obj.CurrentRomoocID.Value;
                                        result.RomoocNo = obj.CAT_Romooc.RegNo;
                                        result.MaxWeight = Math.Min(result.MaxWeight, obj.CAT_Romooc.MaxWeight ?? 0);
                                        result.RomoocGroupID = obj.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                    }
                                    else
                                    {
                                        var dataDef = model.CAT_RomoocDefault.Where(c => c.VehicleID == result.ID).Select(c => new
                                        {
                                            c.RomoocID,
                                            c.CAT_Romooc.RegNo,
                                            c.SortOrder,
                                            c.CAT_Romooc.MaxWeight,
                                            c.CAT_Romooc.RegCapacity
                                        }).OrderBy(c => c.SortOrder).ToList();
                                        int i = 0;
                                        while (result.RomoocID < 1 && i < dataDef.Count)
                                        {
                                            var o = dataDef[i];
                                            i++;
                                            var objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID == o.RomoocID
                                            && !((c.DateFromActual < now && c.DateToActual < now))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                                            if (objR == null)
                                            {
                                                result.RomoocID = o.RomoocID;
                                                result.RomoocNo = o.RegNo;
                                                result.MaxWeight = Math.Min(result.MaxWeight, o.MaxWeight ?? 0);
                                                result.RomoocGroupID = o.RegCapacity == 1 ? 1 : 2;
                                            }
                                        }
                                        if (result.RomoocID < 1)
                                        {
                                            var objDef = model.CAT_Romooc.FirstOrDefault();
                                            if (objDef != null)
                                            {
                                                result.RomoocID = objDef.ID;
                                                result.RomoocNo = objDef.RegNo;
                                                result.MaxWeight = Math.Min(result.MaxWeight, objDef.MaxWeight ?? 0);
                                                result.RomoocGroupID = objDef.RegCapacity == 1 ? 1 : 2;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var obj = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == vehID && c.CustomerID == venID);
                        if (obj != null)
                        {
                            result.ID = obj.VehicleID;
                            result.Regno = obj.CAT_Vehicle.RegNo;
                            result.MaxWeight = obj.CAT_Vehicle.MaxWeight ?? 0;
                            result.DriverName = obj.CAT_Vehicle.DriverName;
                            result.VehicleVendorCode = obj.CUS_Customer.Code;
                            var objR = model.CUS_Romooc.FirstOrDefault(c => c.CustomerID == venID);
                            if (objR != null)
                            {
                                result.RomoocID = objR.RomoocID;
                                result.RomoocNo = objR.CAT_Romooc.RegNo;
                                result.RomoocGroupID = objR.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                            }
                        }
                        else
                        {
                            obj = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == venID);
                            if (obj != null)
                            {
                                result.ID = obj.VehicleID;
                                result.Regno = obj.CAT_Vehicle.RegNo;
                                result.DriverName = obj.CAT_Vehicle.DriverName;
                                result.MaxWeight = obj.CAT_Vehicle.MaxWeight ?? 0;
                                result.VehicleVendorCode = obj.CUS_Customer.Code;
                                var objR = model.CUS_Romooc.FirstOrDefault(c => c.CustomerID == venID);
                                if (objR != null)
                                {
                                    result.RomoocID = objR.RomoocID;
                                    result.RomoocNo = objR.CAT_Romooc.RegNo;
                                    result.RomoocGroupID = objR.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_MAP_TimeLine_Master_Container_List(string request, int mID, int typeOfOrder)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objRequest = CreateRequest(request);
                    if (typeOfOrder == 1)
                    {
                        if (objRequest.Sorts == null || objRequest.Sorts.Count == 0)
                        {
                            var objSort = new SortDescriptor("GroupSort", System.ComponentModel.ListSortDirection.Ascending);
                            objRequest.Sorts.Add(objSort);
                        }
                        var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID == mID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_Container
                            {
                                ID = c.OPS_Container.ContainerID,
                                OPSContainerID = c.OPSContainerID,
                                CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                                ContainerID = c.OPS_Container.ContainerID,
                                ContainerNo = c.OPS_Container.ContainerNo,
                                CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                                ETA = c.OPS_Container.ORD_Container.ETA,
                                ETD = c.OPS_Container.ORD_Container.DateGetEmpty != null ? c.OPS_Container.ORD_Container.DateGetEmpty : c.OPS_Container.ORD_Container.ETD,
                                Ton = c.OPS_Container.Ton,
                                OrderID = c.OPS_Container.ORD_Container.OrderID,
                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                StatusOfContainerName = string.Empty,
                                ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                LocationFromAddress = c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.Address,
                                LocationFromCode = c.OPS_Container.ORD_Container.CUS_Location2.Code,
                                LocationToCode = c.OPS_Container.ORD_Container.CUS_Location3.Code,
                                LocationToAddress = c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.Address,
                                LocationFromID = c.OPS_Container.ORD_Container.LocationFromID.Value,
                                LocationToID = c.OPS_Container.ORD_Container.LocationToID.Value,
                                LocationDepotID = c.OPS_Container.LocationDepotID,
                                LocationDepotCode = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Code : string.Empty,
                                LocationDepotName = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Location : string.Empty,
                                LocationDepotAddress = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Address : string.Empty,
                                LocationDepotReturnCode = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Code : string.Empty,
                                LocationDepotReturnName = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Location : string.Empty,
                                LocationDepotReturnAddress = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Address : string.Empty,
                                GroupSort = c.OPS_Container.ORD_Container.GroupSort,
                                Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                                Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                                Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                            }).Distinct().ToDataSourceResult(objRequest);
                        result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                        result.Total = query.Total;
                    }
                    else
                    {
                        if (objRequest.Sorts == null || objRequest.Sorts.Count == 0)
                        {
                            var objSort = new SortDescriptor("SortOrder", System.ComponentModel.ListSortDirection.Ascending);
                            objRequest.Sorts.Add(objSort);
                        }
                        var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID == mID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_Container
                           {
                               ID = c.ID,
                               ParentID = c.ParentID,
                               OPSContainerID = -1,
                               CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                               ContainerID = c.OPS_Container.ContainerID,
                               ContainerNo = c.OPS_Container.ContainerNo,
                               CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                               ETA = c.ETA,
                               ETD = c.ETD,
                               Ton = c.OPS_Container.Ton,
                               OrderID = c.OPS_Container.ORD_Container.OrderID,
                               OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                               TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                               StatusOfContainerID = c.StatusOfCOContainerID,
                               StatusOfContainerName = c.SYS_Var.ValueOfVar,
                               ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                               GroupSort = c.OPS_Container.ORD_Container.GroupSort,
                               LocationFromID = c.LocationFromID,
                               LocationFromAddress = c.CAT_Location.Address,
                               LocationFromCode = c.CAT_Location.Code,
                               LocationToID = c.LocationToID,
                               LocationToCode = c.CAT_Location1.Code,
                               LocationToAddress = c.CAT_Location1.Address,
                               SortOrder = c.SortOrder
                           }).ToDataSourceResult(objRequest);
                        result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                        result.Total = query.Total;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_MAP_Vendor_KPI> OPSCO_MAP_Vendor_KPI_List(List<int> data)
        {
            try
            {
                var result = new List<DTOOPSCO_MAP_Vendor_KPI>();
                using (var model = new DataEntities())
                {
                    var finData = HelperFinance.Container_TenderPrice(model, Account, data);
                    foreach (var item in finData)
                    {
                        foreach (var i in item.ListVendorPrice.Where(c => c.VendorID != Account.SYSCustomerID).ToList())
                        {
                            var o = result.FirstOrDefault(c => c.VendorID == i.VendorID);
                            if (o == null)
                            {
                                o = new DTOOPSCO_MAP_Vendor_KPI();
                                o.VendorID = i.VendorID;
                                o.VendorCode = i.VendorCode;
                                o.VendorName = i.VendorName;
                                o.KPI = model.OPS_COTOMaster.Count(c => c.VendorOfVehicleID == o.VendorID && c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived);
                                result.Add(o);
                            }
                            o.Price += i.Price;
                        }
                    }
                    result = result.OrderBy(c => c.Price).ThenBy(c => c.KPI).ToList();
                    var idx = 1;
                    foreach (var o in result)
                    {
                        o.Note = string.Empty;
                        o.STT = idx;
                        idx++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_Vendor_KPI_Save(int vendorID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var dataCO = model.OPS_COTOContainer.Where(c => data.Contains(c.OPSContainerID) && c.COTOMasterID == null && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && !c.IsSplit).Select(c => new { c.ID, c.ETA, c.ETD }).ToList();
                    if (dataCO.Count > 0)
                    {
                        var ETA = dataCO.Max(c => c.ETA);
                        var ETD = dataCO.Min(c => c.ETD);
                        var obj = HelperTOMaster.OPSCO_CreateItemChooseVendor(model, Account, vendorID, ETD, ETA, dataCO.Select(c => c.ID).ToList());
                        var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_MAP_Vendor_KPI> OPSCO_MAP_Vendor_With_KPI_List(List<int> data)
        {
            try
            {
                var result = new List<DTOOPSCO_MAP_Vendor_KPI>();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Customer.Where(c => c.ID != Account.SYSCustomerID && !c.IsSystem && Account.ListCustomerID.Contains(c.ID) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSCO_MAP_Vendor_KPI
                    {
                        VendorID = c.ID,
                        VendorCode = c.Code,
                        VendorName = c.CustomerName
                    }).ToList();
                    result.Insert(0, new DTOOPSCO_MAP_Vendor_KPI { VendorID = Account.SYSCustomerID, VendorName = "Xe nhà", VendorCode = "Xe nhà" });
                    var finData = HelperFinance.Container_TenderPrice(model, Account, data);
                    foreach (var item in finData)
                    {
                        foreach (var i in item.ListVendorPrice)
                        {
                            var o = result.FirstOrDefault(c => c.VendorID == i.VendorID);
                            if (o != null)
                            {
                                o.Price += i.Price;
                            }
                        }
                    }
                    foreach (var item in result)
                    {
                        if (item.VendorID != Account.SYSCustomerID)
                            item.KPI = model.OPS_COTOMaster.Count(c => c.VendorOfVehicleID == item.VendorID && c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived);
                        else
                            item.KPI = model.OPS_COTOMaster.Count(c => (c.VendorOfVehicleID == item.VendorID || c.VendorOfVehicleID == null) && c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived);
                    }
                    result = result.OrderBy(c => c.Price).ThenBy(c => c.KPI).ToList();
                    var idx = 1;
                    foreach (var o in result)
                    {
                        o.STT = idx;
                        idx++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Schedule_Data OPSCO_MAP_New_Schedule_Data(bool isShowVehicle, string strVehicle, int typeOfResource, List<int> dataCus, List<int> dataService, List<int> dataCarrier, List<int> dataSeaport, List<int> dataStatus)
        {
            try
            {
                DTOOPSCO_MAP_Schedule_Data result = new DTOOPSCO_MAP_Schedule_Data();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    if (typeOfResource == 1)
                    {
                        if (isShowVehicle)
                        {
                            var dataVehHome = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_Map_Schedule_Group
                            {
                                ID = c.ID,
                                VehicleID = c.VehicleID,
                                VehicleNo = c.CAT_Vehicle.RegNo,
                                RomoocID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CurrentRomoocID.Value : -1,
                                RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                                VendorID = -1,
                                VendorCode = "Xe nhà",
                                VendorName = "Xe nhà",
                                Text = c.CAT_Vehicle.RegNo
                            }).ToList();
                            var dataVehVend = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.CustomerID) : true) && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_Map_Schedule_Group
                            {
                                ID = c.ID,
                                VehicleID = c.VehicleID,
                                VehicleNo = c.CAT_Vehicle.RegNo,
                                RomoocID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CurrentRomoocID.Value : -1,
                                RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                                VendorID = c.CustomerID,
                                VendorCode = c.CUS_Customer.Code,
                                VendorName = c.CUS_Customer.CustomerName,
                                Text = c.CAT_Vehicle.RegNo
                            }).ToList();
                            var dataVend = model.CUS_Customer.Where(c => !c.IsSystem && c.ID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ID) : true) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSCO_Map_Schedule_Group
                            {
                                ID = c.ID,
                                VehicleID = -1,
                                VehicleNo = string.Empty,
                                RomoocID = -1,
                                RomoocNo = string.Empty,
                                VendorID = c.ID,
                                VendorCode = c.Code,
                                VendorName = c.CustomerName,
                                Text = c.Code
                            }).ToList();
                            result.Resources = new List<DTOOPSCO_Map_Schedule_Group>();
                            var homeGroup = new DTOOPSCO_Map_Schedule_Group();
                            homeGroup.Text = "Xe nhà";
                            homeGroup.ID = -1;
                            homeGroup.VehicleID = -1;
                            homeGroup.VehicleNo = string.Empty;
                            homeGroup.RomoocID = -1;
                            homeGroup.RomoocNo = string.Empty;
                            homeGroup.VendorID = -1;
                            homeGroup.VendorCode = "Xe nhà";
                            homeGroup.VendorName = "Xe nhà";

                            if (strVehicle.Trim() != string.Empty)
                            {
                                if (dataVehHome.Count(c => c.Text.ToLower().Contains(strVehicle.Trim().ToLower())) > 0)
                                {
                                    result.Resources.Add(homeGroup);
                                    result.Resources.AddRange(dataVehHome.Where(c => c.Text.ToLower().Contains(strVehicle.Trim().ToLower())).ToList());
                                }
                            }
                            else
                            {
                                result.Resources.Add(homeGroup);
                                result.Resources.AddRange(dataVehHome);
                            }

                            foreach (var item in dataVend)
                            {
                                if (strVehicle.Trim() != string.Empty)
                                {
                                    if (dataVehVend.Count(c => c.VendorID == item.VendorID && c.Text.ToLower().Contains(strVehicle.Trim().ToLower())) > 0)
                                    {
                                        result.Resources.Add(item);
                                        result.Resources.AddRange(dataVehVend.Where(c => c.VendorID == item.VendorID && c.Text.ToLower().Contains(strVehicle.Trim().ToLower())).ToList());
                                    }
                                }
                                else
                                {
                                    result.Resources.Add(item);
                                    result.Resources.AddRange(dataVehVend.Where(c => c.VendorID == item.VendorID).ToList());
                                }
                            }

                            var dataFLMTime = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 0 && c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_Map_Schedule_Event
                            {
                                ID = c.ReferID,
                                StartDate = c.DateFromActual,
                                EndDate = c.DateToActual,
                                GroupID = c.FLM_Asset.VehicleID.Value,
                                VehicleID = c.FLM_Asset.VehicleID.Value,
                                VendorID = -1,
                                StatusOfEvent = c.TypeOfAssetTimeSheetID,
                                TypeOfEvent = c.StatusOfAssetTimeSheetID
                            }).ToList();
                            var dataOPSVend = model.OPS_COTOMaster.Where(c => c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning && c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID).Select(c => new DTOOPSCO_Map_Schedule_Event
                            {
                                ID = c.ID,
                                Code = c.Code,
                                RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : "[Chưa nhập]",
                                StartDate = c.ATD ?? c.ETD,
                                EndDate = c.ATA ?? c.ETA,
                                GroupID = c.VehicleID ?? c.VendorOfVehicleID.Value,
                                VendorID = c.VendorOfVehicleID.Value,
                                VehicleID = c.VehicleID ?? -1,
                                StatusOfEvent = c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3,
                                TypeOfEvent = 1
                            }).ToList();

                            result.DataSources = new List<DTOOPSCO_Map_Schedule_Event>();
                            foreach (var item in dataFLMTime)
                            {
                                switch (item.TypeOfEvent)
                                {
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster:
                                        var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                        if (objRef != null)
                                        {
                                            var flag = true;
                                            if (flag && dataCus.Count > 0)
                                            {
                                                flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)) > 0;
                                            }
                                            if (flag && dataService.Count > 0)
                                            {
                                                flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue && dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value)) > 0;
                                            }
                                            if (flag && dataCarrier.Count > 0)
                                            {
                                                flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerID)) > 0;
                                            }
                                            if (flag && dataSeaport.Count > 0)
                                            {
                                                flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel
                                                    && c.OPS_Container.ORD_Container.LocationFromID.HasValue && c.OPS_Container.ORD_Container.LocationToID.HasValue
                                                    && (dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID) || dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID))) > 0;
                                            }
                                            if (flag)
                                            {
                                                item.Code = objRef.Code;
                                                item.RomoocNo = objRef.RomoocID > 0 ? objRef.CAT_Romooc.RegNo : "[Chưa nhập]";
                                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                                item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == objRef.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                                {
                                                    ID = c.OPS_Container.ContainerID,
                                                    Ton = c.OPS_Container.Ton,
                                                    OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                                    ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                                    Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                                    Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                                    Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                                    Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                                    From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                                    To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                                    Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                                }).Distinct().ToList();
                                                foreach (var o in item.ListContainer)
                                                {
                                                    if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                                        o.ServiceType = 1;
                                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                                        o.ServiceType = 2;
                                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                                        o.ServiceType = 3;
                                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                                        o.ServiceType = 4;
                                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                                        o.ServiceType = 5;
                                                }
                                                item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                                if (objRef.RomoocID > 0)
                                                {
                                                    item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                                    item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                                }
                                                else
                                                {
                                                    item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                                }
                                                item.Ton = item.ListContainer.Sum(c => c.Ton);
                                                foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                                {
                                                    item.Title += o.Count() + "*" + o.Key + " ";
                                                }

                                                if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                                {
                                                    item.Title = item.ListContainer[0].Packing;
                                                }
                                                if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                                {
                                                    item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                                }
                                                if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                                {
                                                    item.Title = "2*" + item.ListContainer[0].Packing;
                                                }
                                                if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                                {
                                                    item.Title = item.ListContainer[0].Packing;
                                                }
                                                item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                                item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                                item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                                item.StatusOfEvent = objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : objRef.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                                if (dataStatus.Count == 0 || dataStatus.Contains(item.StatusOfEvent))
                                                {
                                                    if (item.StatusOfEvent == 1)
                                                    {
                                                        if (objRef.VehicleID > 2 && objRef.RomoocID > 1 && objRef.DriverName1 != null && objRef.DriverName1 != string.Empty)
                                                        {
                                                            item.StatusOfEvent = 11;
                                                        }
                                                    }
                                                    item.TypeOfEvent = 1;
                                                    result.DataSources.Add(item);
                                                }
                                                var objEmpty = objRef.OPS_COTOContainer.FirstOrDefault(c => !c.IsSplit && (c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerGetEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerIMEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXEmpty));
                                                if (objEmpty != null)
                                                {
                                                    item.ETDEmpty = objEmpty.ETD;
                                                    item.ETAEmpty = objEmpty.ETA;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (dataStatus.Count == 0 || dataStatus.Contains(4))
                                            {
                                                item.Title = string.Empty;
                                                item.RomoocNo = "Không xác định";
                                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                                item.TypeOfEvent = 1;
                                                item.StatusOfEvent = -1;
                                                result.DataSources.Add(item);
                                            }
                                        }
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                        if (dataStatus.Count == 0 || dataStatus.Contains(4))
                                        {
                                            var objAct = model.FLM_Activity.FirstOrDefault(c => c.ID == item.ID);
                                            if (objAct != null)
                                            {
                                                if (dataCus.Count == 0 && dataService.Count == 0 && dataCarrier.Count == 0 && dataSeaport.Count == 0)
                                                {
                                                    item.Code = "AC" + item.ID.ToString(COCodeNum);
                                                    item.StatusOfEvent = 3;
                                                    item.TypeOfEvent = item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetMaintence ? 2 : item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetRegistry ? 3 : 4;
                                                    item.Title = string.Empty;
                                                    result.DataSources.Add(item);
                                                }
                                            }
                                            else
                                            {
                                                item.Title = string.Empty;
                                                item.RomoocNo = "Không xác định";
                                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                                item.TypeOfEvent = 1;
                                                item.StatusOfEvent = -1;
                                                result.DataSources.Add(item);
                                            }
                                        }
                                        break;
                                    default: break;
                                }
                            }
                            foreach (var item in dataOPSVend)
                            {
                                var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objRef != null)
                                {
                                    var flag = true;
                                    if (flag && dataCus.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)) > 0;
                                    }
                                    if (flag && dataService.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue && dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value)) > 0;
                                    }
                                    if (flag && dataCarrier.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerID)) > 0;
                                    }
                                    if (flag && dataSeaport.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel
                                            && c.OPS_Container.ORD_Container.LocationFromID.HasValue && c.OPS_Container.ORD_Container.LocationToID.HasValue
                                            && (dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID) || dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID))) > 0;
                                    }
                                    if (flag && dataStatus.Count > 0)
                                    {
                                        flag = dataStatus.Contains(item.StatusOfEvent);
                                    }
                                    if (flag)
                                    {
                                        item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                        {
                                            ID = c.OPS_Container.ContainerID,
                                            Ton = c.OPS_Container.Ton,
                                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                            ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                            Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                            Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                            Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                            Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                            From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                            To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                            Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                        }).Distinct().ToList();
                                        foreach (var o in item.ListContainer)
                                        {
                                            if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                                o.ServiceType = 1;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                                o.ServiceType = 2;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                                o.ServiceType = 3;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                                o.ServiceType = 4;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                                o.ServiceType = 5;
                                        }
                                        item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                        if (objRef.RomoocID > 0)
                                        {
                                            item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                            item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                        }
                                        else
                                        {
                                            item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                        }
                                        if (item.StatusOfEvent == 1)
                                        {
                                            if (objRef.VehicleID > 2 && objRef.RomoocID > 1 && objRef.DriverName1 != null && objRef.DriverName1 != string.Empty)
                                            {
                                                item.StatusOfEvent = 11;
                                            }
                                        }
                                        foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                        {
                                            item.Title += o.Count() + "*" + o.Key + " ";
                                        }
                                        item.Ton = item.ListContainer.Sum(c => c.Ton);
                                        if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                        {
                                            item.Title = item.ListContainer[0].Packing;
                                        }
                                        if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                        {
                                            item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                        }
                                        if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                        {
                                            item.Title = "2*" + item.ListContainer[0].Packing;
                                        }
                                        if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                        {
                                            item.Title = item.ListContainer[0].Packing;
                                        }
                                        item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                        item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                        item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                        var objEmpty = objRef.OPS_COTOContainer.FirstOrDefault(c => !c.IsSplit && (c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerGetEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerIMEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXEmpty));
                                        if (objEmpty != null)
                                        {
                                            item.ETDEmpty = objEmpty.ETD;
                                            item.ETAEmpty = objEmpty.ETA;
                                        }
                                        result.DataSources.Add(item);
                                    }
                                }
                            }
                            foreach (var e in result.DataSources)
                            {
                                if (e.TypeOfEvent == 1 && e.ListContainer != null)
                                {
                                    e.Connections = e.ListContainer.Select(c => c.ID).Distinct().ToList();
                                }
                            }
                        }
                        else
                        {
                            var dataVend = model.CUS_Customer.Where(c => !c.IsSystem && c.ID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ID) : true) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSCO_Map_Schedule_Group
                            {
                                ID = c.ID,
                                VehicleID = -1,
                                VehicleNo = string.Empty,
                                RomoocID = -1,
                                RomoocNo = string.Empty,
                                VendorID = c.ID,
                                VendorCode = c.Code,
                                VendorName = c.CustomerName,
                                Text = c.Code
                            }).ToList();
                            result.Resources = new List<DTOOPSCO_Map_Schedule_Group>();
                            var homeGroup = new DTOOPSCO_Map_Schedule_Group();
                            homeGroup.Text = "Xe nhà";
                            homeGroup.ID = Account.SYSCustomerID;
                            homeGroup.VehicleID = -1;
                            homeGroup.VehicleNo = string.Empty;
                            homeGroup.RomoocID = -1;
                            homeGroup.RomoocNo = string.Empty;
                            homeGroup.VendorID = -1;
                            homeGroup.VendorCode = "Xe nhà";
                            homeGroup.VendorName = "Xe nhà";
                            result.Resources.Add(homeGroup);
                            result.Resources.AddRange(dataVend);

                            var dataFLMTimeTemp = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 0 && c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_Map_Schedule_Event
                            {
                                ID = c.ReferID,
                                StartDate = c.DateFromActual,
                                EndDate = c.DateToActual,
                                GroupID = c.FLM_Asset.VehicleID.Value,
                                VehicleID = -1,
                                VendorID = -1,
                                StatusOfEvent = c.TypeOfAssetTimeSheetID,
                                TypeOfEvent = c.StatusOfAssetTimeSheetID
                            }).OrderBy(c => c.StartDate).ThenBy(c => c.EndDate).ToList();
                            var dataOPSVendTemp = model.OPS_COTOMaster.Where(c => c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning && c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID).Select(c => new DTOOPSCO_Map_Schedule_Event
                            {
                                ID = c.ID,
                                Code = c.Code,
                                StartDate = c.ATD ?? c.ETD,
                                EndDate = c.ATA ?? c.ETA,
                                GroupID = c.VehicleID ?? c.VendorOfVehicleID.Value,
                                VendorID = c.VendorOfVehicleID.Value,
                                VehicleID = -1,
                                StatusOfEvent = c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : 2,
                                TypeOfEvent = 1
                            }).ToList();

                            result.DataSources = new List<DTOOPSCO_Map_Schedule_Event>();
                            var objEvent = new DTOOPSCO_Map_Schedule_Event();
                            objEvent.ID = Account.SYSCustomerID;
                            objEvent.VendorID = -1;
                            objEvent.Code = string.Empty;
                            objEvent.Title = "";
                            objEvent.VehicleID = -1;
                            objEvent.TypeOfEvent = -1;

                            var dataFLMTime = new List<DTOOPSCO_Map_Schedule_Event>();
                            var dataOPSVend = new List<DTOOPSCO_Map_Schedule_Event>();
                            foreach (var item in dataFLMTimeTemp)
                            {
                                var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objRef != null)
                                {
                                    var flag = true;
                                    if (flag && dataCus.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)) > 0;
                                    }
                                    if (flag && dataService.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue && dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value)) > 0;
                                    }
                                    if (flag && dataCarrier.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerID)) > 0;
                                    }
                                    if (flag && dataSeaport.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel
                                            && c.OPS_Container.ORD_Container.LocationFromID.HasValue && c.OPS_Container.ORD_Container.LocationToID.HasValue
                                            && (dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID) || dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID))) > 0;
                                    }
                                    item.StatusOfEvent = objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : objRef.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                    if (flag && dataStatus.Count > 0)
                                    {
                                        flag = dataStatus.Contains(item.StatusOfEvent);
                                    }
                                    if (flag)
                                    {
                                        dataFLMTime.Add(item);
                                    }
                                }
                            }
                            foreach (var item in dataOPSVendTemp)
                            {
                                var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objRef != null)
                                {
                                    var flag = true;
                                    if (flag && dataCus.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)) > 0;
                                    }
                                    if (flag && dataService.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue && dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value)) > 0;
                                    }
                                    if (flag && dataCarrier.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerID)) > 0;
                                    }
                                    if (flag && dataSeaport.Count > 0)
                                    {
                                        flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel
                                            && c.OPS_Container.ORD_Container.LocationFromID.HasValue && c.OPS_Container.ORD_Container.LocationToID.HasValue
                                            && (dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID) || dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID))) > 0;
                                    }
                                    if (flag && dataStatus.Count > 0)
                                    {
                                        flag = dataStatus.Contains(item.StatusOfEvent);
                                    }
                                    if (flag)
                                    {
                                        dataOPSVend.Add(item);
                                    }
                                }
                            }

                            foreach (var item in dataFLMTime.OrderBy(c => c.StartDate).ThenBy(c => c.EndDate).ToList())
                            {
                                if (objEvent.StartDate == DateTime.MinValue) objEvent.StartDate = item.StartDate;
                                if (objEvent.EndDate == DateTime.MinValue) objEvent.EndDate = item.EndDate;
                                if (item.StartDate > objEvent.EndDate)
                                {
                                    result.DataSources.Add(objEvent);
                                    objEvent = new DTOOPSCO_Map_Schedule_Event();
                                    objEvent.ID = Account.SYSCustomerID;
                                    objEvent.VendorID = -1;
                                    objEvent.Code = string.Empty;
                                    objEvent.Title = "";
                                    objEvent.VehicleID = -1;
                                    objEvent.TypeOfEvent = -1;
                                    objEvent.StartDate = item.StartDate;
                                    objEvent.EndDate = item.EndDate;
                                }
                                if (objEvent.EndDate < item.EndDate)
                                    objEvent.EndDate = item.EndDate;
                            }
                            if (objEvent.StartDate != null && objEvent.EndDate != null)
                                result.DataSources.Add(objEvent);
                            foreach (var group in dataOPSVend.GroupBy(c => c.VendorID).ToList())
                            {
                                objEvent = new DTOOPSCO_Map_Schedule_Event();
                                objEvent.ID = group.Key;
                                objEvent.VendorID = group.Key;
                                objEvent.VehicleID = -1;
                                objEvent.TypeOfEvent = -1;
                                objEvent.Code = string.Empty;
                                objEvent.Title = "";
                                foreach (var item in group.OrderBy(c => c.StartDate).ThenBy(c => c.EndDate).ToList())
                                {
                                    if (objEvent.StartDate == DateTime.MinValue) objEvent.StartDate = item.StartDate;
                                    if (objEvent.EndDate == DateTime.MinValue) objEvent.EndDate = item.EndDate;
                                    if (item.StartDate > objEvent.EndDate)
                                    {
                                        result.DataSources.Add(objEvent);
                                        objEvent = new DTOOPSCO_Map_Schedule_Event();
                                        objEvent.ID = group.Key;
                                        objEvent.VendorID = group.Key;
                                        objEvent.VehicleID = -1;
                                        objEvent.TypeOfEvent = -1;
                                        objEvent.Code = string.Empty;
                                        objEvent.Title = "";
                                        objEvent.StartDate = item.StartDate;
                                        objEvent.EndDate = item.EndDate;
                                    }
                                    if (objEvent.EndDate < item.EndDate)
                                        objEvent.EndDate = item.EndDate;
                                }
                                if (objEvent.StartDate != null && objEvent.EndDate != null)
                                    result.DataSources.Add(objEvent);
                            }
                        }
                    }
                    else if (typeOfResource == 2)
                    {
                        result.Resources = model.CUS_Romooc.Where(c => c.CustomerID == Account.SYSCustomerID && c.RomoocID > 1).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.ID,
                            RomoocID = c.RomoocID,
                            RomoocNo = c.CAT_Romooc.RegNo,
                            VehicleNo = string.Empty,
                            VehicleID = -1,
                            VendorID = -1,
                            VendorCode = "Xe nhà",
                            VendorName = "Xe nhà",
                            Text = c.CAT_Romooc.RegNo
                        }).ToList();
                        if (strVehicle.Trim() != string.Empty)
                        {
                            result.Resources = result.Resources.Where(c => c.Text.ToLower().Contains(strVehicle.Trim().ToLower())).ToList();
                        }
                        var homeGroup = new DTOOPSCO_Map_Schedule_Group();
                        homeGroup.Text = "Romooc nhà";
                        homeGroup.ID = -1;
                        homeGroup.VehicleID = -1;
                        homeGroup.VehicleNo = string.Empty;
                        homeGroup.RomoocID = -1;
                        homeGroup.RomoocNo = string.Empty;
                        homeGroup.VendorID = -1;
                        homeGroup.VendorCode = "Xe nhà";
                        homeGroup.VendorName = "Xe nhà";
                        result.Resources.IndexOf(homeGroup, 0);
                        var dataFLMTime = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID > 0).Select(c => new DTOOPSCO_Map_Schedule_Event
                        {
                            ID = c.ReferID,
                            StartDate = c.DateFromActual,
                            EndDate = c.DateToActual,
                            GroupID = c.FLM_Asset.RomoocID.Value,
                            VehicleID = c.FLM_Asset.RomoocID.Value,
                            RomoocNo = c.FLM_Asset.CAT_Romooc.RegNo,
                            VendorID = -1,
                            StatusOfEvent = c.TypeOfAssetTimeSheetID,
                            TypeOfEvent = c.StatusOfAssetTimeSheetID
                        }).ToList();
                        result.DataSources = new List<DTOOPSCO_Map_Schedule_Event>();
                        foreach (var item in dataFLMTime)
                        {
                            switch (item.TypeOfEvent)
                            {
                                case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster:
                                case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMasterEmpty:
                                case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMasterLaden:
                                case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMasterInStock:
                                    var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                    if (objRef != null)
                                    {
                                        var flag = true;
                                        if (flag && dataCus.Count > 0)
                                        {
                                            flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)) > 0;
                                        }
                                        if (flag && dataService.Count > 0)
                                        {
                                            flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue && dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value)) > 0;
                                        }
                                        if (flag && dataCarrier.Count > 0)
                                        {
                                            flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerID)) > 0;
                                        }
                                        if (flag && dataSeaport.Count > 0)
                                        {
                                            flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel
                                                && c.OPS_Container.ORD_Container.LocationFromID.HasValue && c.OPS_Container.ORD_Container.LocationToID.HasValue
                                                && (dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID) || dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID))) > 0;
                                        }
                                        if (flag)
                                        {
                                            item.Code = objRef.Code;
                                            item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                            item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                            item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == objRef.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                            {
                                                ID = c.OPS_Container.ContainerID,
                                                Ton = c.OPS_Container.Ton,
                                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                                ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                                Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                                Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                                Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                                Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                                From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                                To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                                Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                            }).Distinct().ToList();
                                            foreach (var o in item.ListContainer)
                                            {
                                                if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                                    o.ServiceType = 1;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                                    o.ServiceType = 2;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                                    o.ServiceType = 3;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                                    o.ServiceType = 4;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                                    o.ServiceType = 5;
                                            }
                                            item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                            if (objRef.RomoocID > 0)
                                            {
                                                item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                                item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                            }
                                            else
                                            {
                                                item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                            }
                                            item.Ton = item.ListContainer.Sum(c => c.Ton);
                                            foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                            {
                                                item.Title += o.Count() + "*" + o.Key + " ";
                                            }

                                            if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                            {
                                                item.Title = item.ListContainer[0].Packing;
                                            }
                                            if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                            {
                                                item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                            }
                                            if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                            {
                                                item.Title = "2*" + item.ListContainer[0].Packing;
                                            }
                                            if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                            {
                                                item.Title = item.ListContainer[0].Packing;
                                            }
                                            item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                            item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                            item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                            item.StatusOfEvent = objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : objRef.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                            if (dataStatus.Count == 0 || dataStatus.Contains(item.StatusOfEvent))
                                            {
                                                if (item.StatusOfEvent == 1)
                                                {
                                                    if (objRef.VehicleID > 2 && objRef.RomoocID > 1 && objRef.DriverName1 != null && objRef.DriverName1 != string.Empty)
                                                    {
                                                        item.StatusOfEvent = 11;
                                                    }
                                                }
                                                item.TypeOfEvent = 1;
                                                result.DataSources.Add(item);
                                            }
                                            var objEmpty = objRef.OPS_COTOContainer.FirstOrDefault(c => !c.IsSplit && (c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerGetEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerIMEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXEmpty));
                                            if (objEmpty != null)
                                            {
                                                item.ETDEmpty = objEmpty.ETD;
                                                item.ETAEmpty = objEmpty.ETA;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (dataStatus.Count == 0 || dataStatus.Contains(4))
                                        {
                                            item.Title = string.Empty;
                                            item.RomoocNo = "Không xác định";
                                            item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                            item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                            item.TypeOfEvent = 1;
                                            item.StatusOfEvent = -1;
                                            result.DataSources.Add(item);
                                        }
                                    }
                                    break;
                                case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                    if (dataStatus.Count == 0 || dataStatus.Contains(4))
                                    {
                                        var objAct = model.FLM_Activity.FirstOrDefault(c => c.ID == item.ID);
                                        if (objAct != null)
                                        {
                                            if (dataCus.Count == 0 && dataService.Count == 0 && dataCarrier.Count == 0 && dataSeaport.Count == 0)
                                            {
                                                item.Code = "AC" + item.ID.ToString(COCodeNum);
                                                item.StatusOfEvent = 3;
                                                item.TypeOfEvent = item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetMaintence ? 2 : item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetRegistry ? 3 : 4;
                                                item.Title = string.Empty;
                                                result.DataSources.Add(item);
                                            }
                                        }
                                        else
                                        {
                                            item.Title = string.Empty;
                                            item.RomoocNo = "Không xác định";
                                            item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                            item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                            item.TypeOfEvent = 1;
                                            item.StatusOfEvent = -1;
                                            result.DataSources.Add(item);
                                        }
                                    }
                                    break;
                                default: break;
                            }
                        }
                        foreach (var e in result.DataSources)
                        {
                            if (e.TypeOfEvent == 1 && e.ListContainer != null)
                            {
                                e.Connections = e.ListContainer.Select(c => c.ID).Distinct().ToList();
                            }
                        }
                    }
                    else if (typeOfResource == 3)
                    {
                        result.Resources = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && (dataCus.Count > 0 ? dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)
                            && (dataService.Count > 0 ? dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true) && !c.IsSplit
                            && (dataCarrier.Count > 0 && c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue ? dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerID) : true)
                            && (dataSeaport.Count > 0 && c.OPS_Container.ORD_Container.LocationFromID.HasValue && c.OPS_Container.ORD_Container.LocationToID.HasValue ? (dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID) || dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID)) : true)
                            && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.OPS_Container.ContainerID,
                            VehicleID = -1,
                            RomoocID = -1,
                            TOMasterETD = c.OPS_COTOMaster.ETD,
                            TOMasterETA = c.OPS_COTOMaster.ETA,
                            TOMasterID = c.COTOMasterID.Value,
                            Value = c.OPS_Container.ContainerID,
                            Text = c.OPS_Container.ORD_Container.ORD_Order.Code + "-" + c.OPS_Container.ORD_Container.CAT_Packing.Code + "-" + c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name
                        }).Distinct().ToList();
                        var dataOPSTemp = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning).Select(c => new DTOOPSCO_Map_Schedule_Event
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : "[Chưa nhập]",
                            StartDate = c.ATD ?? c.ETD,
                            EndDate = c.ATA ?? c.ETA,
                            GroupID = c.ID,
                            Title = "",
                            VendorID = -1,
                            VehicleID = c.RomoocID ?? -1,
                            StatusOfEvent = c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3,
                            TypeOfEvent = 1
                        }).ToList();

                        var copy = new CopyHelper();
                        result.DataSources = new List<DTOOPSCO_Map_Schedule_Event>();
                        foreach (var item in dataOPSTemp)
                        {
                            var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                            if (objRef != null)
                            {
                                var flag = true;
                                if (flag && dataCus.Count > 0)
                                {
                                    flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)) > 0;
                                }
                                if (flag && dataService.Count > 0)
                                {
                                    flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue && dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value)) > 0;
                                }
                                if (flag && dataCarrier.Count > 0)
                                {
                                    flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerID)) > 0;
                                }
                                if (flag && dataSeaport.Count > 0)
                                {
                                    flag = model.OPS_COTOContainer.Count(c => !c.IsSplit && c.COTOMasterID == objRef.ID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel
                                        && c.OPS_Container.ORD_Container.LocationFromID.HasValue && c.OPS_Container.ORD_Container.LocationToID.HasValue
                                        && (dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID) || dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID))) > 0;
                                }
                                if (flag && dataStatus.Count > 0)
                                {
                                    flag = dataStatus.Contains(item.StatusOfEvent);
                                }
                                if (flag)
                                {
                                    item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                    item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                    item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                    {
                                        ID = c.OPS_Container.ContainerID,
                                        Ton = c.OPS_Container.Ton,
                                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                        ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                        Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                        Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                        Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                        Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                        From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                        To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                        Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                    }).Distinct().ToList();
                                    item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                    if (objRef.RomoocID > 0)
                                        foreach (var o in item.ListContainer)
                                        {
                                            if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                                o.ServiceType = 1;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                                o.ServiceType = 2;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                                o.ServiceType = 3;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                                o.ServiceType = 4;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                                o.ServiceType = 5;
                                        }
                                    else
                                    {
                                        item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                    }
                                    if (item.StatusOfEvent == 1)
                                    {
                                        if (objRef.VehicleID > 2 && objRef.RomoocID > 1 && objRef.DriverName1 != null && objRef.DriverName1 != string.Empty)
                                        {
                                            item.StatusOfEvent = 11;
                                        }
                                    }
                                    foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                    {
                                        item.Title += o.Count() + "*" + o.Key + " ";
                                    }
                                    item.Ton = item.ListContainer.Sum(c => c.Ton);
                                    if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                    {
                                        item.Title = item.ListContainer[0].Packing;
                                    }
                                    if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                    {
                                        item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                    }
                                    if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                    {
                                        item.Title = "2*" + item.ListContainer[0].Packing;
                                    }
                                    if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                    {
                                        item.Title = item.ListContainer[0].Packing;
                                    }
                                    item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                    item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                    item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                    foreach (var o in result.Resources.Where(c => c.TOMasterID == item.ID))
                                    {
                                        DTOOPSCO_Map_Schedule_Event tmp = new DTOOPSCO_Map_Schedule_Event();
                                        copy.Copy(item, tmp);
                                        tmp.GroupID = o.ID;
                                        result.DataSources.Add(tmp);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {

                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_MAP_New_Schedule_COTOContainer_List(string request, int vendorID, DateTime fDate, DateTime tDate, List<int> dataCus, List<int> dataService, List<int> dataCarrier, List<int> dataSeaport, List<int> dataStatus)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var dataStatusNew = new List<int>();
                    if (dataStatus.Count > 0)
                    {
                        if (dataStatus.Contains(1))
                        {
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfCOTOMasterPlanning);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfCOTOMasterApproved);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfCOTOMasterApproveAgain);
                        }
                        if (dataStatus.Contains(2))
                        {
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfCOTOMasterTendered);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfCOTOMasterDelivery);
                        }
                        if (dataStatus.Contains(3))
                        {
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfCOTOMasterReceived);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfCOTOMasterInvoicePart);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfCOTOMasterInvoice);
                        }
                    }
                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && !c.IsSplit
                        && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterPlanning && c.OPS_COTOMaster.StatusOfCOTOMasterID != -(int)SYSVarType.StatusOfCOTOMasterSendTender
                        && (isAdmin ? true : Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID))
                        && (dataService.Count > 0 && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)
                        && (dataCus.Count > 0 ? dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)
                        && (dataStatus.Count > 0 ? dataStatusNew.Contains(c.OPS_COTOMaster.StatusOfCOTOMasterID) : true)
                        && (dataSeaport.Count > 0 ? (c.OPS_Container.ORD_Container.LocationFromID.HasValue && dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location2.LocationID)) || (c.OPS_Container.ORD_Container.LocationToID.HasValue && dataSeaport.Contains(c.OPS_Container.ORD_Container.CUS_Location3.LocationID)) : true)
                        && (dataCarrier.Count > 0 ? c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.PartnerID.Value) : true)
                        && c.OPS_COTOMaster.ETD >= fDate && c.OPS_COTOMaster.ETD < tDate).Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.OPSContainerID,
                            TOMasterID = c.COTOMasterID.Value,
                            TOMasterCode = c.OPS_COTOMaster.Code,
                            TOVehicleID = c.OPS_COTOMaster.VehicleID ?? -1,
                            TOVehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                            TORomoocID = c.OPS_COTOMaster.RomoocID ?? -1,
                            TORomoocNo = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                            TOVendorID = c.OPS_COTOMaster.VendorOfVehicleID,
                            TOVendorCode = c.OPS_COTOMaster.VendorOfVehicleID > 0 && c.OPS_COTOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà",
                            TODriverName = c.OPS_COTOMaster.DriverName1,
                            TODriverTel = c.OPS_COTOMaster.DriverTel1,
                            TOETA = c.OPS_COTOMaster.ETA,
                            TOETD = c.OPS_COTOMaster.ETD,
                            TOCreatedBy = c.OPS_COTOMaster.CreatedBy,
                            TOCreatedDate = c.OPS_COTOMaster.CreatedDate,
                            TOLastUpdate = string.IsNullOrEmpty(c.OPS_COTOMaster.ModifiedBy) ? c.OPS_COTOMaster.CreatedBy : c.OPS_COTOMaster.ModifiedBy,
                            TOLastUpdateTime = c.OPS_COTOMaster.ModifiedDate ?? c.OPS_COTOMaster.CreatedDate,
                            TOStatus = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : 2,

                            ContainerID = c.OPS_Container.ContainerID,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            ETA = c.OPS_Container.ORD_Container.ETA,
                            ETD = c.OPS_Container.ORD_Container.ETD,
                            LocationFromCode = c.OPS_Container.ORD_Container.CUS_Location2.Code,
                            LocationFromName = c.OPS_Container.ORD_Container.CUS_Location2.LocationName,
                            LocationFromAddress = c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.Address,
                            LocationToCode = c.OPS_Container.ORD_Container.CUS_Location3.Code,
                            LocationToName = c.OPS_Container.ORD_Container.CUS_Location3.LocationName,
                            LocationToAddress = c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.Address,
                            LocationDepotCode = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Location : string.Empty,
                            LocationDepotReturnCode = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Code : string.Empty,
                            LocationDepotReturnName = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Location : string.Empty,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            Ton = c.OPS_Container.Ton,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                            Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                            Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                    var objSetting = OPS_SystemSetting_Get(model);
                    if (objSetting.WarningETD)
                    {
                        foreach (DTOOPSCO_MAP_Container item in result.Data)
                        {
                            if (item.TOStatus == 1 && item.TOETD.HasValue && item.TOETD < DateTime.Now)
                            {
                                item.IsWarning = true;
                                item.WarningType = 1;
                                item.WarningTime = DateTime.Now.Subtract(item.TOETD.Value).TotalHours;
                                item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ kế hoạch vận chuyển";
                            }
                            else if (item.TOStatus == 1 && objSetting.TimeDelayWarning > 0 && item.TOETD.HasValue && item.TOETD < DateTime.Now.AddHours(objSetting.TimeDelayWarning))
                            {
                                item.IsWarning = true;
                                item.WarningType = 1;
                                item.WarningTime = DateTime.Now.Subtract(item.TOETD.Value).TotalHours;
                                item.WarningMsg = "Còn " + Math.Round(item.WarningTime, 1) + " giờ để kịp kế hoạch vận chuyển";
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_Vehicle_New(int vendorID, string regNo, double maxWeight, int typeofvehicle)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var dataCode = new List<string>();
                    var dataChar = new char[] { '-', ' ', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '/', '?', '<', ',', '>', '~', '`' };
                    var sCode = regNo.Split(dataChar, StringSplitOptions.RemoveEmptyEntries).ToArray();
                    foreach (var c in dataChar)
                    {
                        dataCode.Add(string.Join(c.ToString(), sCode).ToLower());
                    }

                    if (typeofvehicle == 1)
                    {
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => dataCode.Contains(c.RegNo.Trim().ToLower()));
                        if (obj != null)
                        {
                            if (obj.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTractor)
                                throw FaultHelper.BusinessFault(null, null, "Đầu kéo đã tồn tại.");
                            var objCus = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == obj.ID && c.CustomerID == vendorID);
                            if (objCus != null)
                                throw FaultHelper.BusinessFault(null, null, "Đầu kéo đã tồn tại.");

                            objCus = new CUS_Vehicle();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.VehicleID = obj.ID;

                            model.CUS_Vehicle.Add(objCus);
                            model.SaveChanges();
                        }
                        else
                        {
                            obj = new CAT_Vehicle();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.RegNo = regNo;
                            obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTractor;
                            obj.IsOwn = false;
                            if (maxWeight > 0)
                                obj.MaxCapacity = maxWeight;
                            model.CAT_Vehicle.Add(obj);

                            var objCus = new CUS_Vehicle();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.CAT_Vehicle = obj;

                            model.CUS_Vehicle.Add(objCus);
                            model.SaveChanges();
                        }
                    }
                    else
                    {
                        var obj = model.CAT_Romooc.FirstOrDefault(c => dataCode.Contains(c.RegNo.Trim().ToLower()));
                        if (obj != null)
                        {
                            var objCus = model.CUS_Romooc.FirstOrDefault(c => c.RomoocID == obj.ID && c.CustomerID == vendorID);
                            if (objCus != null)
                                throw FaultHelper.BusinessFault(null, null, "Romooc đã tồn tại.");

                            objCus = new CUS_Romooc();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.RomoocID = obj.ID;

                            model.CUS_Romooc.Add(objCus);
                            model.SaveChanges();
                        }
                        else
                        {
                            obj = new CAT_Romooc();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.RegNo = regNo;
                            obj.IsOwn = false;
                            if (maxWeight > 0)
                                obj.MaxWeight = maxWeight;
                            model.CAT_Romooc.Add(obj);

                            var objCus = new CUS_Romooc();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.CAT_Romooc = obj;

                            model.CUS_Romooc.Add(objCus);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_TimeLine_Create_Item(DTOOPSCO_MAP_Trip item, List<DTOOPSCOTOContainer> dataOffer)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objSetting = OPS_SystemSetting_Get(model);
                    var SDATA = new List<int>();
                    DTOOPSCOTOMaster obj = new DTOOPSCOTOMaster();
                    obj.ETA = item.ETA.Value;
                    obj.ETD = item.ETD.Value;
                    if (item.RomoocID > 0)
                        obj.RomoocID = item.RomoocID;
                    obj.VehicleID = item.VehicleID;
                    obj.DriverName1 = item.DriverName;
                    obj.DriverTel1 = item.DriverTel;
                    obj.DriverID1 = OPS_FindFLMDriver(model, obj.DriverName1);
                    obj.VendorOfVehicleID = item.VendorOfVehicleID > 0 ? item.VendorOfVehicleID : null;

                    if (obj.VendorOfVehicleID < 1 || obj.VendorOfVehicleID == null)
                        OPS_CheckingTime(model, objSetting, obj.ID, obj.VehicleID, obj.RomoocID, obj.ETD, obj.ETA, true);

                    obj.ListCO = new List<DTOOPSCOTO>();
                    obj.ListCOLocation = new List<DTOOPSCOTOLocation>();
                    obj.ListCOContainer = dataOffer;
                    foreach (var con in obj.ListCOContainer)
                    {
                        var o = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == con.ID);
                        if (o != null)
                        {
                            if (!SDATA.Contains(o.OPS_Container.ORD_Container.OrderID))
                                SDATA.Add(o.OPS_Container.ORD_Container.OrderID);
                            con.LocationFromID = o.LocationFromID;
                            con.LocationToID = o.LocationToID;
                        }
                    }

                    if (obj.ListCOContainer == null || obj.ListCOContainer.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Thời gian không phù hợp với chuyến!");

                    //Lưu chuyến.
                    if (item.VendorOfVehicleID > 0)
                    {
                        HelperTOMaster.OPSCO_CreateItemVendor(model, Account, obj);
                    }
                    else
                    {
                        var error = HelperTOMaster_Error.None;
                        error = HelperTOMaster.OPSCO_CreateItemCheck(model, Account, obj, new HelperTOMaster_COParam()
                        {
                            LocationFromID = item.LocationStartID,
                            LocationToID = item.LocationEndID,
                            LocationGetRomoocID = item.LocationGetRomoocID,
                            LocationReturnRomoocID = item.LocationReturnRomoocID,
                            DateGetRomooc = item.DateGetRomooc,
                            HasBreakRomooc = item.IsRomoocBreak,
                            DateEnd = item.ETA,
                            DateStart = item.ETD,
                            DateReturnRomooc = item.DateReturnRomooc
                        });
                        if (error != HelperTOMaster_Error.None)
                            throw FaultHelper.BusinessFault(null, null, error.ToString());

                        HelperTOMaster.OPSCO_CreateItem(model, Account, obj, new HelperTOMaster_COParam()
                        {
                            LocationFromID = item.LocationStartID,
                            LocationToID = item.LocationEndID,
                            LocationGetRomoocID = item.LocationGetRomoocID,
                            LocationReturnRomoocID = item.LocationReturnRomoocID,
                            DateGetRomooc = item.DateGetRomooc,
                            HasBreakRomooc = item.IsRomoocBreak,
                            DateEnd = item.ETA,
                            DateStart = item.ETD,
                            DateReturnRomooc = item.DateReturnRomooc
                        });
                    }
                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Schedule_Data OPSCO_MAP_Info_Schedule_Data(int m1ID, int m2ID, int venID, int vehID, int romID, int typeOfResource, DateTime ETD, DateTime ETA, List<int> dataOPSCon, List<int> dataCon)
        {
            try
            {
                DTOOPSCO_MAP_Schedule_Data result = new DTOOPSCO_MAP_Schedule_Data();
                result.Resources = new List<DTOOPSCO_Map_Schedule_Group>();
                result.DataSources = new List<DTOOPSCO_Map_Schedule_Event>();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == m1ID);
                    if (obj != null)
                    {
                        #region Đầu kéo + Romooc
                        var objG = new DTOOPSCO_Map_Schedule_Group();
                        objG.VehicleID = obj.VehicleID ?? -1;
                        objG.TypeOfGroupID = 1;
                        objG.VehicleNo = obj.VehicleID.HasValue ? obj.CAT_Vehicle.RegNo : "Chưa nhập";
                        objG.VendorID = obj.VendorOfVehicleID.HasValue && obj.VendorOfVehicleID != Account.SYSCustomerID ? obj.VendorOfVehicleID.Value : -1;
                        objG.VendorCode = obj.VendorOfVehicleID.HasValue && obj.VendorOfVehicleID != Account.SYSCustomerID ? obj.CUS_Customer.Code : "Xe nhà";
                        objG.Value = objG.VehicleID;
                        objG.Text = objG.VehicleNo;
                        result.Resources.Add(objG);
                        if (objG.VendorID == -1)
                        {
                            var dataFLMTime = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == objG.VehicleID).Select(c => new DTOOPSCO_Map_Schedule_Event
                            {
                                ID = c.ReferID,
                                TypeOfGroupID = 1,
                                StartDate = c.DateFromActual,
                                EndDate = c.DateToActual,
                                GroupID = c.FLM_Asset.VehicleID.Value,
                                VehicleID = c.FLM_Asset.VehicleID.Value,
                                VendorID = -1,
                                StatusOfEvent = c.TypeOfAssetTimeSheetID,
                                TypeOfEvent = c.StatusOfAssetTimeSheetID
                            }).ToList();
                            foreach (var item in dataFLMTime)
                            {
                                switch (item.TypeOfEvent)
                                {
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster:
                                        var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                        if (objRef != null)
                                        {
                                            item.Code = objRef.Code;
                                            item.RomoocNo = objRef.RomoocID > 0 ? objRef.CAT_Romooc.RegNo : "[Chưa nhập]";
                                            item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                            item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                            item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == objRef.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                            {
                                                ID = c.OPS_Container.ContainerID,
                                                Ton = c.OPS_Container.Ton,
                                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                                ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                                Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                                Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                                Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                                Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                                From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                                To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                                Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                            }).Distinct().ToList();
                                            foreach (var o in item.ListContainer)
                                            {
                                                if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                                    o.ServiceType = 1;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                                    o.ServiceType = 2;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                                    o.ServiceType = 3;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                                    o.ServiceType = 4;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                                    o.ServiceType = 5;
                                            }
                                            item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                            if (objRef.RomoocID > 0)
                                            {
                                                item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                                item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                            }
                                            else
                                            {
                                                item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                            }
                                            item.Ton = item.ListContainer.Sum(c => c.Ton);
                                            foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                            {
                                                item.Title += o.Count() + "*" + o.Key + " ";
                                            }

                                            if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                            {
                                                item.Title = item.ListContainer[0].Packing;
                                            }
                                            if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                            {
                                                item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                            }
                                            if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                            {
                                                item.Title = "2*" + item.ListContainer[0].Packing;
                                            }
                                            if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                            {
                                                item.Title = item.ListContainer[0].Packing;
                                            }
                                            item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                            item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                            item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                            item.StatusOfEvent = objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : objRef.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                            item.TypeOfEvent = 1;
                                            result.DataSources.Add(item);
                                        }
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                        var objAct = model.FLM_Activity.FirstOrDefault(c => c.ID == item.ID);
                                        if (objAct != null)
                                        {
                                            item.Code = "AC" + item.ID.ToString(COCodeNum);
                                            item.StatusOfEvent = 3;
                                            item.TypeOfEvent = item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetMaintence ? 2 : item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetRegistry ? 3 : 4;
                                            item.Title = string.Empty;
                                            result.DataSources.Add(item);
                                        }
                                        break;
                                    default: break;
                                }
                            }
                        }
                        else
                        {
                            var dataOPSVend = model.OPS_COTOMaster.Where(c => c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning && c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID == objG.VendorID && c.VehicleID == objG.VehicleID).Select(c => new DTOOPSCO_Map_Schedule_Event
                            {
                                ID = c.ID,
                                Code = c.Code,
                                TypeOfGroupID = 1,
                                RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : "[Chưa nhập]",
                                StartDate = c.ATD ?? c.ETD,
                                EndDate = c.ATA ?? c.ETA,
                                GroupID = c.VehicleID ?? -1,
                                VendorID = c.VendorOfVehicleID.HasValue && c.VendorOfVehicleID != Account.SYSCustomerID ? c.VendorOfVehicleID.Value : -1,
                                VehicleID = c.VehicleID ?? -1,
                                StatusOfEvent = c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3,
                                TypeOfEvent = 1
                            }).ToList();
                            foreach (var item in dataOPSVend)
                            {
                                var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objRef != null)
                                {
                                    item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                    item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                    item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                    {
                                        ID = c.OPS_Container.ContainerID,
                                        Ton = c.OPS_Container.Ton,
                                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                        ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                        Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                        Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                        Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                        Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                        From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                        To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                        Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                    }).Distinct().ToList();
                                    foreach (var o in item.ListContainer)
                                    {
                                        if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                            o.ServiceType = 1;
                                        else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                            o.ServiceType = 2;
                                        else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                            o.ServiceType = 3;
                                        else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                            o.ServiceType = 4;
                                        else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                            o.ServiceType = 5;
                                    }
                                    item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                    if (objRef.RomoocID > 0)
                                    {
                                        item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                        item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                    }
                                    else
                                    {
                                        item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                    }

                                    foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                    {
                                        item.Title += o.Count() + "*" + o.Key + " ";
                                    }
                                    item.Ton = item.ListContainer.Sum(c => c.Ton);
                                    if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                    {
                                        item.Title = item.ListContainer[0].Packing;
                                    }
                                    if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                    {
                                        item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                    }
                                    if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                    {
                                        item.Title = "2*" + item.ListContainer[0].Packing;
                                    }
                                    if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                    {
                                        item.Title = item.ListContainer[0].Packing;
                                    }
                                    item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                    item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                    item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                    result.DataSources.Add(item);
                                }
                            }
                        }
                        var objG2 = new DTOOPSCO_Map_Schedule_Group();
                        objG2.RomoocID = obj.RomoocID ?? -1;
                        objG2.TypeOfGroupID = 2;
                        objG2.RomoocNo = obj.RomoocID.HasValue ? obj.CAT_Romooc.RegNo : "Chưa nhập";
                        objG2.VendorID = obj.VendorOfVehicleID.HasValue && obj.VendorOfVehicleID != Account.SYSCustomerID ? obj.VendorOfVehicleID.Value : -1;
                        objG2.VendorCode = obj.VendorOfVehicleID.HasValue && obj.VendorOfVehicleID != Account.SYSCustomerID ? obj.CUS_Customer.Code : "Xe nhà";
                        objG2.Value = objG2.RomoocID;
                        objG2.Text = objG2.RomoocNo;
                        result.Resources.Add(objG2);
                        var dataOPS = model.OPS_COTOMaster.Where(c => c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning && c.SYSCustomerID == Account.SYSCustomerID && (objG2.VendorID > 0 ? c.VendorOfVehicleID == objG2.VendorID : c.VendorOfVehicleID == null) && c.RomoocID == objG2.RomoocID).Select(c => new DTOOPSCO_Map_Schedule_Event
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeOfGroupID = 2,
                            RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : "[Chưa nhập]",
                            StartDate = c.ATD ?? c.ETD,
                            EndDate = c.ATA ?? c.ETA,
                            GroupID = c.RomoocID ?? -1,
                            VendorID = c.VendorOfVehicleID.HasValue && c.VendorOfVehicleID != Account.SYSCustomerID ? c.VendorOfVehicleID.Value : -1,
                            VehicleID = c.VehicleID ?? -1,
                            StatusOfEvent = c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3,
                            TypeOfEvent = 1
                        }).ToList();
                        foreach (var item in dataOPS)
                        {
                            var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                            if (objRef != null)
                            {
                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                {
                                    ID = c.OPS_Container.ContainerID,
                                    Ton = c.OPS_Container.Ton,
                                    OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                    ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                    Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                    Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                    Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                    Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                    From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                    To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                    Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                }).Distinct().ToList();
                                foreach (var o in item.ListContainer)
                                {
                                    if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                        o.ServiceType = 1;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                        o.ServiceType = 2;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                        o.ServiceType = 3;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                        o.ServiceType = 4;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                        o.ServiceType = 5;
                                }
                                item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                if (objRef.RomoocID > 0)
                                {
                                    item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                    item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                }
                                else
                                {
                                    item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                }

                                foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                {
                                    item.Title += o.Count() + "*" + o.Key + " ";
                                }
                                item.Ton = item.ListContainer.Sum(c => c.Ton);
                                if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                {
                                    item.Title = item.ListContainer[0].Packing;
                                }
                                if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                {
                                    item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                }
                                if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                {
                                    item.Title = "2*" + item.ListContainer[0].Packing;
                                }
                                if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                {
                                    item.Title = item.ListContainer[0].Packing;
                                }
                                item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                result.DataSources.Add(item);
                            }
                        }
                        #endregion

                        #region Điều chỉnh thời gian chuyến
                        if (m2ID < 1 && dataCon.Count == 0 && dataOPSCon.Count == 0)
                        {
                            var data = model.OPS_COTOContainer.Where(c => c.COTOMasterID == m1ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new
                                {
                                    c.ID,
                                    c.OPSContainerID,
                                    c.COTOMasterID,
                                    c.OPS_Container.ContainerID,
                                    c.OPS_Container.ORD_Container.CAT_Packing.Code,
                                    c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                                    c.OPS_Container.ORD_Container.ETA,
                                    c.OPS_Container.ORD_Container.ETD,
                                    c.OPS_Container.ORD_Container.ETARequest,
                                    c.OPS_Container.ORD_Container.ETDRequest,
                                    c.OPS_Container.ORD_Container.CutOffTime,
                                    c.TypeOfStatusContainerID
                                }).ToList();
                            var offerData = HelperTOMaster.OPSCO_ChangeScheduleTimeOfferTime(model, Account, obj.ID, ETD, ETA).ListCOContainer;
                            foreach (var o in offerData)
                            {
                                var i = data.FirstOrDefault(c => c.ID == o.ID);
                                if (i != null)
                                {
                                    o.ContainerID = i.ContainerID;
                                    o.OrderID = i.OPSContainerID;
                                    o.COTOMasterID = i.COTOMasterID;
                                    o.StatusOfCOContainerID = i.TypeOfStatusContainerID;
                                }
                            }
                            foreach (var group in data.GroupBy(c => c.OPSContainerID).ToList())
                            {
                                var item = group.FirstOrDefault();
                                var objord = new DTOOPSCO_Map_Schedule_Group();
                                objord.ContainerID = item.ContainerID;
                                objord.TypeOfGroupID = 3;
                                objord.Value = objord.ContainerID;
                                objord.TOMasterID = item.COTOMasterID ?? -1;
                                objord.Text = item.Code + "-" + item.Name;
                                result.Resources.Add(objord);

                                if (item.ETD.HasValue && item.ETA.HasValue)
                                {
                                    var objDs1 = new DTOOPSCO_Map_Schedule_Event();
                                    objDs1.TypeOfEvent = 1;
                                    objDs1.TOMasterID = objord.TOMasterID;
                                    objDs1.TypeOfGroupID = 3;
                                    objDs1.StatusOfEvent = -1;
                                    objDs1.StartDate = item.ETD.Value;
                                    objDs1.EndDate = item.ETA.Value;
                                    objDs1.Code = "ETD-ETA";
                                    objDs1.GroupID = objord.Value;
                                    objDs1.ID = objord.Value;
                                    objDs1.Title = string.Empty;
                                    result.DataSources.Add(objDs1);
                                }
                                if (item.ETDRequest.HasValue)
                                {
                                    var objDs2 = new DTOOPSCO_Map_Schedule_Event();
                                    objDs2.TypeOfEvent = 1;
                                    objDs2.TOMasterID = objord.TOMasterID;
                                    objDs2.TypeOfGroupID = 3;
                                    objDs2.StatusOfEvent = -11;
                                    objDs2.StartDate = item.ETDRequest.Value.AddMinutes(-15);
                                    objDs2.EndDate = item.ETDRequest.Value;
                                    objDs2.Code = "ETDRequest";
                                    objDs2.GroupID = objord.Value;
                                    objDs2.ID = objord.Value;
                                    objDs2.Title = string.Empty;
                                    result.DataSources.Add(objDs2);
                                }
                                if (item.ETARequest.HasValue)
                                {
                                    var objDs3 = new DTOOPSCO_Map_Schedule_Event();
                                    objDs3.TypeOfEvent = 1;
                                    objDs3.TOMasterID = objord.TOMasterID;
                                    objDs3.TypeOfGroupID = 3;
                                    objDs3.StatusOfEvent = -11;
                                    objDs3.StartDate = item.ETARequest.Value.AddMinutes(-15);
                                    objDs3.EndDate = item.ETARequest.Value;
                                    objDs3.Code = "ETARequest";
                                    objDs3.GroupID = objord.Value;
                                    objDs3.ID = objord.Value;
                                    objDs3.Title = string.Empty;
                                    result.DataSources.Add(objDs3);
                                }
                                if (item.CutOffTime.HasValue)
                                {
                                    var objDs4 = new DTOOPSCO_Map_Schedule_Event();
                                    objDs4.TypeOfEvent = 1;
                                    objDs4.TOMasterID = objord.TOMasterID;
                                    objDs4.TypeOfGroupID = 3;
                                    objDs4.StatusOfEvent = -2;
                                    objDs4.StartDate = item.CutOffTime.Value.AddMinutes(-15);
                                    objDs4.EndDate = item.CutOffTime.Value;
                                    objDs4.Code = "CutOffTime";
                                    objDs4.GroupID = objord.Value;
                                    objDs4.ID = objord.Value;
                                    objDs4.Title = string.Empty;
                                    result.DataSources.Add(objDs4);
                                }

                                var objops = new DTOOPSCO_Map_Schedule_Group();
                                objops.ContainerID = group.Key;
                                objops.TypeOfGroupID = 4;
                                objops.Value = objops.ContainerID;
                                objops.TOMasterID = item.COTOMasterID ?? -1;
                                objops.Text = string.Empty; //item.Code + "-" + item.Name;
                                result.Resources.Add(objops);
                                foreach (var o in offerData.Where(c => c.OrderID == group.Key).ToList())
                                {
                                    var objDs = new DTOOPSCO_Map_Schedule_Event();
                                    objDs.TypeOfEvent = 1;
                                    objDs.TOMasterID = objops.TOMasterID;
                                    objDs.TypeOfGroupID = 4;
                                    objDs.StartDate = o.ETD.Value;
                                    objDs.EndDate = o.ETA.Value;
                                    objDs.Code = "ETD-ETA";
                                    objDs.GroupID = objops.Value;
                                    objDs.SortOrder = o.SortOrder;
                                    objDs.ID = o.ID;
                                    if (o.StatusOfCOContainerID > -(int)SYSVarType.TypeOfStatusContainerTranfer)
                                        objDs.StatusOfEvent = 3;
                                    else if (o.StatusOfCOContainerID == -(int)SYSVarType.TypeOfStatusContainerTranfer)
                                        objDs.StatusOfEvent = 2;
                                    else
                                        objDs.StatusOfEvent = 1;
                                    objDs.Title = string.Empty;
                                    result.DataSources.Add(objDs);
                                }
                            }
                        }
                        #endregion

                        #region Bổ sung container vào chuyến
                        else
                        {
                            var data = model.OPS_COTOContainer.Where(c => (dataOPSCon.Contains(c.OPSContainerID) || dataCon.Contains(c.ID) || c.COTOMasterID == m2ID || c.COTOMasterID == m1ID)
                                && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new
                                {
                                    c.ID,
                                    c.OPSContainerID,
                                    c.COTOMasterID,
                                    c.OPS_Container.ContainerID,
                                    c.OPS_Container.ORD_Container.CAT_Packing.Code,
                                    c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                                    c.OPS_Container.ORD_Container.ETA,
                                    c.OPS_Container.ORD_Container.ETD,
                                    c.OPS_Container.ORD_Container.ETARequest,
                                    c.OPS_Container.ORD_Container.ETDRequest,
                                    c.OPS_Container.ORD_Container.CutOffTime,
                                    c.TypeOfStatusContainerID
                                }).ToList();
                            var offerData = HelperTOMaster.OPSCO_MasterAddTOContainerOffer(model, Account, m1ID, data.Where(c => c.COTOMasterID != m1ID).Select(c => c.ID).ToList()).ListCOContainer;
                            foreach (var o in offerData)
                            {
                                var i = data.FirstOrDefault(c => c.ID == o.ID);
                                if (i != null)
                                {
                                    o.ContainerID = i.ContainerID;
                                    o.OrderID = i.OPSContainerID;
                                    o.COTOMasterID = i.COTOMasterID;
                                    o.StatusOfCOContainerID = i.TypeOfStatusContainerID;
                                }
                            }
                            foreach (var group in data.GroupBy(c => c.OPSContainerID).ToList())
                            {
                                var item = group.FirstOrDefault();
                                var objord = new DTOOPSCO_Map_Schedule_Group();
                                objord.ContainerID = item.ContainerID;
                                objord.TypeOfGroupID = 3;
                                objord.Value = objord.ContainerID;
                                objord.TOMasterID = item.COTOMasterID ?? -1;
                                objord.Text = item.Code + "-" + item.Name;
                                result.Resources.Add(objord);

                                if (item.ETD.HasValue && item.ETA.HasValue)
                                {
                                    var objDs1 = new DTOOPSCO_Map_Schedule_Event();
                                    objDs1.TypeOfEvent = 1;
                                    objDs1.TOMasterID = objord.TOMasterID;
                                    objDs1.TypeOfGroupID = 3;
                                    objDs1.StatusOfEvent = -1;
                                    objDs1.StartDate = item.ETD.Value;
                                    objDs1.EndDate = item.ETA.Value;
                                    objDs1.Code = "ETD-ETA";
                                    objDs1.GroupID = objord.Value;
                                    objDs1.ID = objord.Value;
                                    objDs1.Title = string.Empty;
                                    result.DataSources.Add(objDs1);
                                }
                                if (item.ETDRequest.HasValue)
                                {
                                    var objDs2 = new DTOOPSCO_Map_Schedule_Event();
                                    objDs2.TypeOfEvent = 1;
                                    objDs2.TOMasterID = objord.TOMasterID;
                                    objDs2.TypeOfGroupID = 3;
                                    objDs2.StatusOfEvent = -11;
                                    objDs2.StartDate = item.ETDRequest.Value.AddMinutes(-15);
                                    objDs2.EndDate = item.ETDRequest.Value;
                                    objDs2.Code = "ETDRequest";
                                    objDs2.GroupID = objord.Value;
                                    objDs2.ID = objord.Value;
                                    objDs2.Title = string.Empty;
                                    result.DataSources.Add(objDs2);
                                }
                                if (item.ETARequest.HasValue)
                                {
                                    var objDs3 = new DTOOPSCO_Map_Schedule_Event();
                                    objDs3.TypeOfEvent = 1;
                                    objDs3.TOMasterID = objord.TOMasterID;
                                    objDs3.TypeOfGroupID = 3;
                                    objDs3.StatusOfEvent = -11;
                                    objDs3.StartDate = item.ETARequest.Value.AddMinutes(-15);
                                    objDs3.EndDate = item.ETARequest.Value;
                                    objDs3.Code = "ETARequest";
                                    objDs3.GroupID = objord.Value;
                                    objDs3.ID = objord.Value;
                                    objDs3.Title = string.Empty;
                                    result.DataSources.Add(objDs3);
                                }
                                if (item.CutOffTime.HasValue)
                                {
                                    var objDs4 = new DTOOPSCO_Map_Schedule_Event();
                                    objDs4.TypeOfEvent = 1;
                                    objDs4.TOMasterID = objord.TOMasterID;
                                    objDs4.TypeOfGroupID = 3;
                                    objDs4.StatusOfEvent = -2;
                                    objDs4.StartDate = item.CutOffTime.Value.AddMinutes(-15);
                                    objDs4.EndDate = item.CutOffTime.Value;
                                    objDs4.Code = "CutOffTime";
                                    objDs4.GroupID = objord.Value;
                                    objDs4.ID = objord.Value;
                                    objDs4.Title = string.Empty;
                                    result.DataSources.Add(objDs4);
                                }

                                var objops = new DTOOPSCO_Map_Schedule_Group();
                                objops.ContainerID = group.Key;
                                objops.TypeOfGroupID = 4;
                                objops.Value = objops.ContainerID;
                                objops.TOMasterID = item.COTOMasterID ?? -1;
                                objops.Text = string.Empty; //item.Code + "-" + item.Name;
                                result.Resources.Add(objops);
                                foreach (var o in offerData.Where(c => c.OrderID == group.Key).ToList())
                                {
                                    var objDs = new DTOOPSCO_Map_Schedule_Event();
                                    objDs.TypeOfEvent = 1;
                                    objDs.TOMasterID = objops.TOMasterID;
                                    objDs.TypeOfGroupID = 4;
                                    objDs.StartDate = o.ETD.Value;
                                    objDs.EndDate = o.ETA.Value;
                                    objDs.Code = "ETD-ETA";
                                    objDs.GroupID = objops.Value;
                                    objDs.SortOrder = o.SortOrder;
                                    objDs.ID = o.ID;
                                    if (o.StatusOfCOContainerID > -(int)SYSVarType.TypeOfStatusContainerTranfer)
                                        objDs.StatusOfEvent = 3;
                                    else if (o.StatusOfCOContainerID == -(int)SYSVarType.TypeOfStatusContainerTranfer)
                                        objDs.StatusOfEvent = 2;
                                    else
                                        objDs.StatusOfEvent = 1;
                                    objDs.Title = string.Empty;
                                    result.DataSources.Add(objDs);
                                }
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehID);
                        var objG = new DTOOPSCO_Map_Schedule_Group();
                        objG.VehicleID = vehID;
                        objG.TypeOfGroupID = 1;
                        if (objVehicle != null)
                        {
                            objG.VehicleNo = objVehicle.RegNo;
                        }
                        else
                        {
                            objG.VehicleNo = "[Không xác định]";
                        }
                        objG.VendorID = venID;
                        objG.Value = objG.VehicleID;
                        objG.Text = objG.VehicleNo;
                        result.Resources.Add(objG);
                        if (objG.VendorID == -1)
                        {
                            var dataFLMTime = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == objG.VehicleID).Select(c => new DTOOPSCO_Map_Schedule_Event
                            {
                                ID = c.ReferID,
                                TypeOfGroupID = 1,
                                StartDate = c.DateFromActual,
                                EndDate = c.DateToActual,
                                GroupID = c.FLM_Asset.VehicleID.Value,
                                VehicleID = c.FLM_Asset.VehicleID.Value,
                                VendorID = -1,
                                StatusOfEvent = c.TypeOfAssetTimeSheetID,
                                TypeOfEvent = c.StatusOfAssetTimeSheetID
                            }).ToList();
                            foreach (var item in dataFLMTime)
                            {
                                switch (item.TypeOfEvent)
                                {
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster:
                                        var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                        if (objRef != null)
                                        {
                                            item.Code = objRef.Code;
                                            item.RomoocNo = objRef.RomoocID > 0 ? objRef.CAT_Romooc.RegNo : "[Chưa nhập]";
                                            item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                            item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                            item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == objRef.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                            {
                                                ID = c.OPS_Container.ContainerID,
                                                Ton = c.OPS_Container.Ton,
                                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                                ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                                Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                                Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                                Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                                Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                                From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                                To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                                Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                            }).Distinct().ToList();
                                            foreach (var o in item.ListContainer)
                                            {
                                                if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                                    o.ServiceType = 1;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                                    o.ServiceType = 2;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                                    o.ServiceType = 3;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                                    o.ServiceType = 4;
                                                else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                                    o.ServiceType = 5;
                                            }
                                            item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                            if (objRef.RomoocID > 0)
                                            {
                                                item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                                item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                            }
                                            else
                                            {
                                                item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                            }
                                            item.Ton = item.ListContainer.Sum(c => c.Ton);
                                            foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                            {
                                                item.Title += o.Count() + "*" + o.Key + " ";
                                            }

                                            if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                            {
                                                item.Title = item.ListContainer[0].Packing;
                                            }
                                            if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                            {
                                                item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                            }
                                            if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                            {
                                                item.Title = "2*" + item.ListContainer[0].Packing;
                                            }
                                            if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                            {
                                                item.Title = item.ListContainer[0].Packing;
                                            }
                                            item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                            item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                            item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                            item.StatusOfEvent = objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : objRef.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                            item.TypeOfEvent = 1;
                                            result.DataSources.Add(item);
                                        }
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                        var objAct = model.FLM_Activity.FirstOrDefault(c => c.ID == item.ID);
                                        if (objAct != null)
                                        {
                                            item.Code = "AC" + item.ID.ToString(COCodeNum);
                                            item.StatusOfEvent = 3;
                                            item.TypeOfEvent = item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetMaintence ? 2 : item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetRegistry ? 3 : 4;
                                            item.Title = string.Empty;
                                            result.DataSources.Add(item);
                                        }
                                        break;
                                    default: break;
                                }
                            }
                        }
                        else
                        {
                            var dataOPSVend = model.OPS_COTOMaster.Where(c => c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning && c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID == objG.VendorID && c.VehicleID == objG.VehicleID).Select(c => new DTOOPSCO_Map_Schedule_Event
                            {
                                ID = c.ID,
                                Code = c.Code,
                                TypeOfGroupID = 1,
                                RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : "[Chưa nhập]",
                                StartDate = c.ATD ?? c.ETD,
                                EndDate = c.ATA ?? c.ETA,
                                GroupID = c.VehicleID ?? -1,
                                VendorID = c.VendorOfVehicleID.HasValue && c.VendorOfVehicleID != Account.SYSCustomerID ? c.VendorOfVehicleID.Value : -1,
                                VehicleID = c.VehicleID ?? -1,
                                StatusOfEvent = c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3,
                                TypeOfEvent = 1
                            }).ToList();
                            foreach (var item in dataOPSVend)
                            {
                                var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objRef != null)
                                {
                                    item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                    item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                    item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                    {
                                        ID = c.OPS_Container.ContainerID,
                                        Ton = c.OPS_Container.Ton,
                                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                        ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                        Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                        Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                        Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                        Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                        From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                        To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                        Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                    }).Distinct().ToList();
                                    foreach (var o in item.ListContainer)
                                    {
                                        if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                            o.ServiceType = 1;
                                        else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                            o.ServiceType = 2;
                                        else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                            o.ServiceType = 3;
                                        else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                            o.ServiceType = 4;
                                        else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                            o.ServiceType = 5;
                                    }
                                    item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                    if (objRef.RomoocID > 0)
                                    {
                                        item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                        item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                    }
                                    else
                                    {
                                        item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                    }

                                    foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                    {
                                        item.Title += o.Count() + "*" + o.Key + " ";
                                    }
                                    item.Ton = item.ListContainer.Sum(c => c.Ton);
                                    if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                    {
                                        item.Title = item.ListContainer[0].Packing;
                                    }
                                    if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                    {
                                        item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                    }
                                    if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                    {
                                        item.Title = "2*" + item.ListContainer[0].Packing;
                                    }
                                    if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                    {
                                        item.Title = item.ListContainer[0].Packing;
                                    }
                                    item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                    item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                    item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                    result.DataSources.Add(item);
                                }
                            }
                        }

                        var objDsv = new DTOOPSCO_Map_Schedule_Event();
                        objDsv.TypeOfEvent = 1;
                        objDsv.TOMasterID = -1;
                        objDsv.TypeOfGroupID = 1;
                        objDsv.StartDate = ETD;
                        objDsv.EndDate = ETA;
                        objDsv.Code = "New";
                        objDsv.GroupID = objG.Value;
                        objDsv.ID = -1;
                        objDsv.Title = string.Empty;
                        result.DataSources.Add(objDsv);

                        var objRomooc = model.CAT_Romooc.FirstOrDefault(c => c.ID == romID);
                        var objG2 = new DTOOPSCO_Map_Schedule_Group();
                        objG2.RomoocID = romID;
                        objG2.TypeOfGroupID = 2;
                        if (objRomooc != null)
                        {
                            objG2.RomoocNo = objRomooc.RegNo;
                        }
                        else
                        {
                            objG2.RomoocNo = "[Không xác định]";
                        }
                        objG2.VendorID = venID;
                        objG2.Value = objG2.RomoocID;
                        objG2.Text = objG2.RomoocNo;
                        result.Resources.Add(objG2);
                        var dataOPS = model.OPS_COTOMaster.Where(c => c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning && c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID == objG.VendorID && c.RomoocID == objG.RomoocID).Select(c => new DTOOPSCO_Map_Schedule_Event
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeOfGroupID = 2,
                            RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : "[Chưa nhập]",
                            StartDate = c.ATD ?? c.ETD,
                            EndDate = c.ATA ?? c.ETA,
                            GroupID = c.RomoocID ?? -1,
                            VendorID = c.VendorOfVehicleID.HasValue && c.VendorOfVehicleID != Account.SYSCustomerID ? c.VendorOfVehicleID.Value : -1,
                            VehicleID = c.VehicleID ?? -1,
                            StatusOfEvent = c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3,
                            TypeOfEvent = 1
                        }).ToList();
                        foreach (var item in dataOPS)
                        {
                            var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                            if (objRef != null)
                            {
                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                {
                                    ID = c.OPS_Container.ContainerID,
                                    Ton = c.OPS_Container.Ton,
                                    OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                    ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                    Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                    Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                    Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                    Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                    From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                    To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                    Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                }).Distinct().ToList();
                                foreach (var o in item.ListContainer)
                                {
                                    if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                        o.ServiceType = 1;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                        o.ServiceType = 2;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                        o.ServiceType = 3;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                        o.ServiceType = 4;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                        o.ServiceType = 5;
                                }
                                item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                if (objRef.RomoocID > 0)
                                {
                                    item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                    item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                }
                                else
                                {
                                    item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                }

                                foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                {
                                    item.Title += o.Count() + "*" + o.Key + " ";
                                }
                                item.Ton = item.ListContainer.Sum(c => c.Ton);
                                if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                {
                                    item.Title = item.ListContainer[0].Packing;
                                }
                                if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                {
                                    item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                }
                                if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                {
                                    item.Title = "2*" + item.ListContainer[0].Packing;
                                }
                                if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                {
                                    item.Title = item.ListContainer[0].Packing;
                                }
                                item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                result.DataSources.Add(item);
                            }
                        }

                        var objDsr = new DTOOPSCO_Map_Schedule_Event();
                        objDsr.TypeOfEvent = 1;
                        objDsr.TOMasterID = -1;
                        objDsr.TypeOfGroupID = 2;
                        objDsr.StartDate = ETD;
                        objDsr.EndDate = ETA;
                        objDsr.Code = "New";
                        objDsr.GroupID = objG2.Value;
                        objDsr.ID = -1;
                        objDsr.Title = string.Empty;
                        result.DataSources.Add(objDsr);

                        var data = model.OPS_COTOContainer.Where(c => (dataOPSCon.Contains(c.OPSContainerID) || dataCon.Contains(c.ID))
                            && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new
                            {
                                c.ID,
                                c.OPSContainerID,
                                c.OPS_Container.ContainerID,
                                c.OPS_Container.ORD_Container.CAT_Packing.Code,
                                c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                                c.OPS_Container.ORD_Container.ETA,
                                c.OPS_Container.ORD_Container.ETD,
                                c.OPS_Container.ORD_Container.ETARequest,
                                c.OPS_Container.ORD_Container.ETDRequest,
                                c.OPS_Container.ORD_Container.CutOffTime
                            }).ToList();
                        var offerData = HelperTOMaster.OPSCO_CreateItemOfferTime(model, Account, data.Select(c => c.ID).ToList(), ETD, ETA, vehID, romID).ListCOContainer;
                        foreach (var o in offerData)
                        {
                            var i = data.FirstOrDefault(c => c.ID == o.ID);
                            if (i != null)
                            {
                                o.ContainerID = i.ContainerID;
                                o.OrderID = i.OPSContainerID;
                            }
                        }

                        foreach (var group in data.GroupBy(c => c.OPSContainerID).ToList())
                        {
                            var item = group.FirstOrDefault();
                            var objord = new DTOOPSCO_Map_Schedule_Group();
                            objord.ContainerID = item.ContainerID;
                            objord.TypeOfGroupID = 3;
                            objord.Value = objord.ContainerID;
                            objord.TOMasterID = -1;
                            objord.Text = item.Code + "-" + item.Name;
                            result.Resources.Add(objord);

                            if (item.ETD.HasValue && item.ETA.HasValue)
                            {
                                var objDs1 = new DTOOPSCO_Map_Schedule_Event();
                                objDs1.TypeOfEvent = 1;
                                objDs1.TOMasterID = -1;
                                objDs1.TypeOfGroupID = 3;
                                objDs1.StatusOfEvent = -1;
                                objDs1.StartDate = item.ETD.Value;
                                objDs1.EndDate = item.ETA.Value;
                                objDs1.Code = "ETD-ETA";
                                objDs1.GroupID = objord.Value;
                                objDs1.ID = objord.Value;
                                objDs1.Title = string.Empty;
                                result.DataSources.Add(objDs1);
                            }
                            if (item.ETDRequest.HasValue)
                            {
                                var objDs2 = new DTOOPSCO_Map_Schedule_Event();
                                objDs2.TypeOfEvent = 1;
                                objDs2.TOMasterID = -1;
                                objDs2.TypeOfGroupID = 3;
                                objDs2.StatusOfEvent = -11;
                                objDs2.StartDate = item.ETDRequest.Value.AddMinutes(-15);
                                objDs2.EndDate = item.ETDRequest.Value;
                                objDs2.Code = "ETDRequest";
                                objDs2.GroupID = objord.Value;
                                objDs2.ID = objord.Value;
                                objDs2.Title = string.Empty;
                                result.DataSources.Add(objDs2);
                            }
                            if (item.ETARequest.HasValue)
                            {
                                var objDs3 = new DTOOPSCO_Map_Schedule_Event();
                                objDs3.TypeOfEvent = 1;
                                objDs3.TOMasterID = -1;
                                objDs3.TypeOfGroupID = 3;
                                objDs3.StatusOfEvent = -11;
                                objDs3.StartDate = item.ETARequest.Value.AddMinutes(-15);
                                objDs3.EndDate = item.ETARequest.Value;
                                objDs3.Code = "ETARequest";
                                objDs3.GroupID = objord.Value;
                                objDs3.ID = objord.Value;
                                objDs3.Title = string.Empty;
                                result.DataSources.Add(objDs3);
                            }
                            if (item.CutOffTime.HasValue)
                            {
                                var objDs4 = new DTOOPSCO_Map_Schedule_Event();
                                objDs4.TypeOfEvent = 1;
                                objDs4.TOMasterID = -1;
                                objDs4.TypeOfGroupID = 3;
                                objDs4.StatusOfEvent = -2;
                                objDs4.StartDate = item.CutOffTime.Value.AddMinutes(-15);
                                objDs4.EndDate = item.CutOffTime.Value;
                                objDs4.Code = "CutOffTime";
                                objDs4.GroupID = objord.Value;
                                objDs4.ID = objord.Value;
                                objDs4.Title = string.Empty;
                                result.DataSources.Add(objDs4);
                            }

                            var objops = new DTOOPSCO_Map_Schedule_Group();
                            objops.ContainerID = group.Key;
                            objops.TypeOfGroupID = 4;
                            objops.Value = objops.ContainerID;
                            objops.TOMasterID = -1;
                            objops.Text = string.Empty; //item.Code + "-" + item.Name;
                            result.Resources.Add(objops);
                            foreach (var o in offerData.Where(c => c.OrderID == group.Key).ToList())
                            {
                                var objDs = new DTOOPSCO_Map_Schedule_Event();
                                objDs.TypeOfEvent = 1;
                                objDs.TOMasterID = -1;
                                objDs.TypeOfGroupID = 4;
                                objDs.StartDate = o.ETD.Value;
                                objDs.EndDate = o.ETA.Value;
                                objDs.Code = "ETD-ETA";
                                objDs.GroupID = objops.Value;
                                objDs.SortOrder = o.SortOrder;
                                objDs.ID = o.ID;
                                objDs.Title = string.Empty;
                                result.DataSources.Add(objDs);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CATServiceOfOrder> OPSCO_MAP_ServiceOfOrder_List()
        {
            try
            {
                List<CATServiceOfOrder> result = new List<CATServiceOfOrder>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ServiceOfOrder.Select(c => new CATServiceOfOrder
                    {
                        ID = c.ID,
                        ServiceOfOrderID = c.ServiceOfOrderID,
                        Name = c.Name,
                        Code = c.Code
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_Info_Schedule_DragDrop_Save(int mID, List<DTOOPSCO_Map_Schedule_Event> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        HelperTOMaster.OPSCO_AddTOContainerMaster(model, Account, obj.ID, data);
                        var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public string OPSCO_MAP_Info_Schedule_DragDrop_Save_Check(int mID, List<DTOOPSCO_Map_Schedule_Event> data)
        {
            try
            {
                string str = string.Empty;
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        var error = HelperTOMaster_Error.None;
                        error = HelperTOMaster.OPSCO_AddTOContainerMasterCheck(model, Account, obj.ID, data);
                        if (error != HelperTOMaster_Error.None)
                            str = error.ToString();
                    }
                }
                return str;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Schedule_Data OPSCO_MAP_Vehicle_Schedule_Data(int mID, int typeOfResource, int vehID, int romID, DateTime fDate, DateTime tDate)
        {
            try
            {
                DTOOPSCO_MAP_Schedule_Data result = new DTOOPSCO_MAP_Schedule_Data();
                using (var model = new DataEntities())
                {
                    fDate = fDate.Date;
                    tDate = tDate.Date.AddDays(1);
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    if (typeOfResource == 1)
                    {
                        result.Resources = model.CUS_Vehicle.Where(c => c.CustomerID == Account.SYSCustomerID).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            VehicleNo = c.CAT_Vehicle.RegNo,
                            Text = c.CAT_Vehicle.RegNo,
                            RomoocID = c.CAT_Vehicle.CurrentRomoocID ?? -1,
                            RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                            MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                            VendorID = -1,
                            Option1 = c.CAT_Vehicle.GroupOfVehicleID.HasValue ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                            Lat = c.CAT_Vehicle.Lat.HasValue ? c.CAT_Vehicle.Lat : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lat : null,
                            Lng = c.CAT_Vehicle.Lng.HasValue ? c.CAT_Vehicle.Lng : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lng : null
                        }).ToList();
                        var dataFLMTime = model.FLM_AssetTimeSheet.Where(c => c.ReferID != mID && c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 0
                            && c.DateFromActual < tDate && c.DateToActual > fDate && c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_Map_Schedule_Event
                        {
                            ID = c.ReferID,
                            StartDate = c.DateFromActual,
                            EndDate = c.DateToActual,
                            GroupID = c.FLM_Asset.VehicleID.Value,
                            VehicleID = c.FLM_Asset.VehicleID.Value,
                            VendorID = -1,
                            StatusOfEvent = c.TypeOfAssetTimeSheetID,
                            TypeOfEvent = c.StatusOfAssetTimeSheetID
                        }).ToList();
                        result.DataSources = new List<DTOOPSCO_Map_Schedule_Event>();
                        foreach (var item in dataFLMTime)
                        {
                            switch (item.TypeOfEvent)
                            {
                                case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster:
                                    var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                                    if (objRef != null)
                                    {
                                        item.Code = objRef.Code;
                                        item.RomoocNo = objRef.RomoocID > 0 ? objRef.CAT_Romooc.RegNo : "[Chưa nhập]";
                                        item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == objRef.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                        {
                                            ID = c.OPS_Container.ContainerID,
                                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                            Ton = c.OPS_Container.Ton,
                                            ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                            Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                            Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                            Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                            Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                            From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                            To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                            Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                        }).Distinct().ToList();
                                        foreach (var o in item.ListContainer)
                                        {
                                            if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                                o.ServiceType = 1;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                                o.ServiceType = 2;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                                o.ServiceType = 3;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                                o.ServiceType = 4;
                                            else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                                o.ServiceType = 5;
                                        }
                                        item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                        if (objRef.RomoocID > 0)
                                        {
                                            item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                            item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                        }
                                        else
                                        {
                                            item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                        }
                                        item.Ton = item.ListContainer.Sum(c => c.Ton);
                                        foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                        {
                                            item.Title += o.Count() + "*" + o.Key + " ";
                                        }

                                        if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                        {
                                            item.Title = item.ListContainer[0].Packing;
                                        }
                                        if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                        {
                                            item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                        }
                                        if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                        {
                                            item.Title = "2*" + item.ListContainer[0].Packing;
                                        }
                                        if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                        {
                                            item.Title = item.ListContainer[0].Packing;
                                        }
                                        item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                        item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                        item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                        item.StatusOfEvent = objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || objRef.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : objRef.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                        if (item.StatusOfEvent == 1)
                                        {
                                            if (objRef.VehicleID > 2 && objRef.RomoocID > 1 && objRef.DriverName1 != null && objRef.DriverName1 != string.Empty && objRef.DriverID1.HasValue)
                                            {
                                                item.StatusOfEvent = 11;
                                            }
                                        }
                                        item.TypeOfEvent = 1;
                                        result.DataSources.Add(item);
                                    }
                                    else
                                    {
                                        item.Title = string.Empty;
                                        item.RomoocNo = "Không xác định";
                                        item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                        item.TypeOfEvent = 1;
                                        item.StatusOfEvent = -1;
                                        result.DataSources.Add(item);
                                    }
                                    break;
                                case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                    var objAct = model.FLM_Activity.FirstOrDefault(c => c.ID == item.ID);
                                    if (objAct != null)
                                    {
                                        item.Code = "AC" + item.ID.ToString(COCodeNum);
                                        item.StatusOfEvent = 3;
                                        item.TypeOfEvent = item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetMaintence ? 2 : item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetRegistry ? 3 : 4;
                                        item.Title = string.Empty;
                                        result.DataSources.Add(item);
                                    }
                                    else
                                    {
                                        item.Title = string.Empty;
                                        item.RomoocNo = "Không xác định";
                                        item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                        item.TypeOfEvent = 1;
                                        item.StatusOfEvent = -1;
                                        result.DataSources.Add(item);
                                    }
                                    break;
                                default: break;
                            }
                        }
                    }
                    else
                    {
                        result.Resources = model.CUS_Romooc.Where(c => c.CustomerID == Account.SYSCustomerID).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.ID,
                            RomoocID = c.RomoocID,
                            VehicleNo = c.CAT_Romooc.RegNo,
                            Text = c.CAT_Romooc.RegNo,
                            MaxWeight = c.CAT_Romooc.MaxWeight ?? 0,
                            MaxCapacity = c.CAT_Romooc.RegCapacity == 1 ? 1 : 2,
                            Option1 = c.CAT_Romooc.GroupOfRomoocID > 0 ? c.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty,
                            VendorID = -1,
                            Lat = c.CAT_Romooc.Lat.HasValue ? c.CAT_Romooc.Lat : c.CAT_Romooc.LocationID.HasValue ? c.CAT_Romooc.CAT_Location.Lat : null,
                            Lng = c.CAT_Romooc.Lng.HasValue ? c.CAT_Romooc.Lng : c.CAT_Romooc.LocationID.HasValue ? c.CAT_Romooc.CAT_Location.Lng : null
                        }).ToList();
                        if (vehID > 0)
                        {
                            var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehID);
                            if (objVehicle != null)
                            {
                                foreach (var i in objVehicle.CAT_RomoocDefault.OrderBy(c => c.SortOrder).ToList())
                                {
                                    var item = result.Resources.FirstOrDefault(c => c.RomoocID == i.RomoocID);
                                    if (item != null)
                                    {
                                        item.SortOrder = i.SortOrder;
                                        result.Resources.Remove(item);
                                        result.Resources.Insert(0, item);
                                    }
                                }
                            }
                        }
                        //result.Resources = result.Resources.OrderBy(c => c.SortOrder).ToList();
                        var dataOPSTemp = model.OPS_COTOMaster.Where(c => c.ID != mID && c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning
                            && c.ETD < tDate && c.ETA > fDate && (c.VendorOfRomoocID == null || c.VendorOfRomoocID == Account.SYSCustomerID)).Select(c => new DTOOPSCO_Map_Schedule_Event
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RomoocNo = c.RomoocID > 0 ? c.CAT_Romooc.RegNo : "[Chưa nhập]",
                            StartDate = c.ATD ?? c.ETD,
                            EndDate = c.ATA ?? c.ETA,
                            GroupID = c.RomoocID ?? -1,
                            Title = "",
                            VendorID = -1,
                            VehicleID = c.RomoocID ?? -1,
                            StatusOfEvent = c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3,
                            TypeOfEvent = 1
                        }).ToList();
                        result.DataSources = new List<DTOOPSCO_Map_Schedule_Event>();
                        foreach (var item in dataOPSTemp)
                        {
                            var objRef = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                            if (objRef != null)
                            {
                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                item.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_ContainerLite
                                {
                                    ID = c.OPS_Container.ContainerID,
                                    Ton = c.OPS_Container.Ton,
                                    OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                    ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                    Service = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                    Customer = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                    Packing = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                    Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                    From = c.OPS_Container.ORD_Container.LocationFromID > 0 ? c.OPS_Container.ORD_Container.CUS_Location2.Code : string.Empty,
                                    To = c.OPS_Container.ORD_Container.LocationToID > 0 ? c.OPS_Container.ORD_Container.CUS_Location3.Code : string.Empty,
                                    Route = c.OPS_Container.ORD_Container.CUSRoutingID > 0 ? c.OPS_Container.ORD_Container.CUS_Routing.Code : string.Empty
                                }).Distinct().ToList();
                                foreach (var o in item.ListContainer)
                                {
                                    if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                                        o.ServiceType = 1;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                                        o.ServiceType = 2;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                                        o.ServiceType = 3;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                        o.ServiceType = 4;
                                    else if (o.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                        o.ServiceType = 5;
                                }
                                item.Title = string.Empty; item.MaxTon = 0; item.MaxQty = 2;
                                if (objRef.RomoocID > 0)
                                {
                                    item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, objRef.CAT_Romooc.MaxWeight ?? 0);
                                    item.MaxQty = objRef.CAT_Romooc.RegCapacity == 1 ? 1 : 2;
                                }
                                else
                                {
                                    item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                }
                                if (item.StatusOfEvent == 1)
                                {
                                    if (objRef.VehicleID > 2 && objRef.RomoocID > 1 && objRef.DriverName1 != null && objRef.DriverName1 != string.Empty && (objRef.VendorOfVehicleID == Account.SYSCustomerID || objRef.VendorOfVehicleID == null ? objRef.DriverID1.HasValue : true))
                                    {
                                        item.StatusOfEvent = 11;
                                    }
                                }
                                foreach (var o in item.ListContainer.GroupBy(c => c.Packing).ToList())
                                {
                                    item.Title += o.Count() + "*" + o.Key + " ";
                                }
                                item.Ton = item.ListContainer.Sum(c => c.Ton);
                                if (item.MaxQty == 1 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                {
                                    item.Title = item.ListContainer[0].Packing;
                                }
                                if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("20"))
                                {
                                    item.Title = "1*" + item.ListContainer[0].Packing + "/" + item.MaxQty;
                                }
                                if (item.MaxQty == 2 && item.ListContainer.Count == 2 && item.ListContainer.All(c => c.Packing.StartsWith("20")))
                                {
                                    item.Title = "2*" + item.ListContainer[0].Packing;
                                }
                                if (item.MaxQty == 2 && item.ListContainer.Count == 1 && item.ListContainer[0].Packing.StartsWith("40"))
                                {
                                    item.Title = item.ListContainer[0].Packing;
                                }
                                item.Title += " " + item.ListContainer.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T [";
                                item.Title += string.Join(",", item.ListContainer.Select(c => c.Service).Distinct().ToList()) + "] ";
                                item.Title += string.Join(",", item.ListContainer.Select(c => c.Route).Distinct().ToList());
                                result.DataSources.Add(item);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public string OPSCO_MAP_Schedule_Check(int vehicleID, int romoocID, List<int> dataContainer, List<int> dataOPSContainer)
        {
            try
            {
                string str = string.Empty;
                using (var model = new DataEntities())
                {
                    var data = model.OPS_COTOContainer.Where(c => (dataOPSContainer.Contains(c.OPSContainerID) || dataContainer.Contains(c.ID)) && !c.IsSplit).Select(c => new
                    {
                        c.OPSContainerID,
                        c.OPS_Container.ContainerID,
                        c.OPS_Container.ORD_Container.PackingID,
                        c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID,
                        c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID,
                        c.OPS_Container.ORD_Container.ORD_Order.PartnerID
                    }).Distinct().ToList();
                    int maxCapacity = 2;
                    if (vehicleID > 0)
                    {
                        var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehicleID);
                        if (objVehicle == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy đầu kéo!");
                    }
                    if (romoocID > 0)
                    {
                        var objRomooc = model.CAT_Romooc.FirstOrDefault(c => c.ID == romoocID);
                        if (objRomooc == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy romooc!");
                        var objGroupPacking = model.CAT_GroupOfRomoocPacking.FirstOrDefault(c => c.GroupOfRomoocID == objRomooc.GroupOfRomoocID);
                        if (objGroupPacking != null)
                        {
                            if (objGroupPacking.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R)
                                maxCapacity = 1;
                        }
                    }

                    if (data.Count > 4)
                    {
                        str = "Quá khả năng chuyên chở!";
                    }
                    else if (data.Count > 1)
                    {
                        var total20LO = data.Count(c => (c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal || c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty || c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                            && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R));
                        var total20IM = data.Count(c => c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R));
                        var total20EX = data.Count(c => c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R));
                        var total40LO = data.Count(c => (c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal || c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty || c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                                 && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R));
                        var total40IM = data.Count(c => c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R));
                        var total40EX = data.Count(c => c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R));
                        if (data.Count == 4)
                        {
                            if (maxCapacity == 1)
                            {
                                str = "Đáp ứng tối đa 1 container 20!";
                            }
                            else
                            {
                                if ((total20EX == 2 || total20IM == 2) && total20LO == 2)
                                {
                                    //Kiểm tra điểm
                                    var flag = true; var reqName = string.Empty;
                                    var dataLocation = model.OPS_COTOContainer.Where(c => (dataOPSContainer.Contains(c.OPSContainerID) || dataContainer.Contains(c.ID)) && !c.IsSplit
                                        && (c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                        && (c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R)).Select(c => new
                                    {
                                        c.LocationFromID,
                                        c.LocationToID
                                    }).ToList();
                                    Dictionary<int, bool> dicLocationCheck = new Dictionary<int, bool>();
                                    foreach (var item in dataLocation)
                                    {
                                        if (!dicLocationCheck.ContainsKey(item.LocationFromID) && flag)
                                        {
                                            dicLocationCheck.Add(item.LocationFromID, true);
                                            var dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationFromID).ToList();
                                            foreach (var i in dataReq)
                                            {
                                                if (i.IsOneContainer != null && i.IsOneContainer == true)
                                                {
                                                    flag = false;
                                                    reqName = i.CAT_Location.Location;
                                                    break;
                                                }
                                            }
                                            if (flag)
                                            {
                                                dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationToID).ToList();
                                                foreach (var i in dataReq)
                                                {
                                                    if (i.IsOneContainer != null && i.IsOneContainer == true)
                                                    {
                                                        flag = false;
                                                        reqName = i.CAT_Location.Location;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (!flag)
                                        str = "Điểm " + reqName + " chỉ đáp ứng 1 container 20!";
                                }
                                else if (total20IM == 2 && total20EX == 2)
                                {
                                    //Kiểm tra hãng tàu
                                    if (data.Select(c => c.PartnerID).Distinct().Count() == 2)
                                    {
                                        str = "Không cùng hãng tàu!";
                                    }
                                    else
                                    {
                                        //Kiểm tra điểm
                                        var flag = true; var reqName = string.Empty;
                                        var dataLocation = model.OPS_COTOContainer.Where(c => (dataOPSContainer.Contains(c.OPSContainerID) || dataContainer.Contains(c.ID)) && !c.IsSplit
                                            && (c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                            && (c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R)).Select(c => new
                                            {
                                                c.LocationFromID,
                                                c.LocationToID
                                            }).ToList();
                                        Dictionary<int, bool> dicLocationCheck = new Dictionary<int, bool>();
                                        foreach (var item in dataLocation)
                                        {
                                            if (!dicLocationCheck.ContainsKey(item.LocationFromID) && flag)
                                            {
                                                dicLocationCheck.Add(item.LocationFromID, true);
                                                var dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationFromID).ToList();
                                                foreach (var i in dataReq)
                                                {
                                                    if (i.IsOneContainer != null && i.IsOneContainer == true)
                                                    {
                                                        flag = false;
                                                        reqName = i.CAT_Location.Location;
                                                        break;
                                                    }
                                                }
                                                if (flag)
                                                {
                                                    dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationToID).ToList();
                                                    foreach (var i in dataReq)
                                                    {
                                                        if (i.IsOneContainer != null && i.IsOneContainer == true)
                                                        {
                                                            flag = false;
                                                            reqName = i.CAT_Location.Location;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (!flag)
                                            str = "Điểm " + reqName + " chỉ đáp ứng 1 container 20!";
                                    }
                                }
                                else
                                {
                                    str = "Không thỏa điều kiện ghép container!";
                                }
                            }
                        }
                        else if (data.Count == 3)
                        {
                            if (maxCapacity == 1)
                            {
                                str = "Đáp ứng tối đa 1 container 20!";
                            }
                            else
                            {
                                if ((total20EX == 2 || total20IM == 2) && (total20LO == 1 || total40LO == 1))
                                {
                                    //Kiểm tra điểm
                                    var flag = true; var reqName = string.Empty;
                                    var dataLocation = model.OPS_COTOContainer.Where(c => (dataOPSContainer.Contains(c.OPSContainerID) || dataContainer.Contains(c.ID)) && !c.IsSplit
                                        && (c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)).Select(c => new
                                        {
                                            c.LocationFromID,
                                            c.LocationToID
                                        }).ToList();
                                    Dictionary<int, bool> dicLocationCheck = new Dictionary<int, bool>();
                                    foreach (var item in dataLocation)
                                    {
                                        if (!dicLocationCheck.ContainsKey(item.LocationFromID) && flag)
                                        {
                                            dicLocationCheck.Add(item.LocationFromID, true);
                                            var dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationFromID);
                                            foreach (var i in dataReq)
                                            {
                                                if (i.IsOneContainer != null && i.IsOneContainer == true)
                                                {
                                                    flag = false;
                                                    reqName = i.CAT_Location.Location;
                                                }
                                            }
                                        }
                                    }
                                    if (!flag)
                                        str = "Điểm " + reqName + " chỉ đáp ứng 1 container 20!";
                                }
                                else if ((total40IM == 1 || total40EX == 1) && total20LO == 2)
                                {
                                    var flag = true; var reqName = string.Empty;
                                    var dataLocation = model.OPS_COTOContainer.Where(c => (dataOPSContainer.Contains(c.OPSContainerID) || dataContainer.Contains(c.ID)) && !c.IsSplit
                                        && (c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                        && (c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R)).Select(c => new
                                        {
                                            c.LocationFromID,
                                            c.LocationToID
                                        }).ToList();
                                    Dictionary<int, bool> dicLocationCheck = new Dictionary<int, bool>();
                                    foreach (var item in dataLocation)
                                    {
                                        if (!dicLocationCheck.ContainsKey(item.LocationFromID) && flag)
                                        {
                                            dicLocationCheck.Add(item.LocationFromID, true);
                                            var dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationFromID).ToList();
                                            foreach (var i in dataReq)
                                            {
                                                if (i.IsOneContainer != null && i.IsOneContainer == true)
                                                {
                                                    flag = false;
                                                    reqName = i.CAT_Location.Location;
                                                    break;
                                                }
                                            }
                                            if (flag)
                                            {
                                                dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationToID).ToList();
                                                foreach (var i in dataReq)
                                                {
                                                    if (i.IsOneContainer != null && i.IsOneContainer == true)
                                                    {
                                                        flag = false;
                                                        reqName = i.CAT_Location.Location;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (!flag)
                                        str = "Điểm " + reqName + " chỉ đáp ứng 1 container 20!";
                                }
                                else
                                {
                                    str = "Không thỏa điều kiện ghép container!";
                                }
                            }
                        }
                        else if (data.Count == 2)
                        {
                            if (total40IM > 1 || total40LO > 1 || total40EX > 1)
                            {
                                str = "Không thỏa điều kiện ghép container!";
                            }
                            else if (total40EX == 1 && total40IM == 1)
                            {
                                //KT Hãng tàu
                                if (data.Select(c => c.PartnerID).Distinct().Count() == 2)
                                {
                                    str = "Không cùng hãng tàu!";
                                }
                            }
                            else if ((total40IM == 1 || total40EX == 1) && total40LO == 1)
                            {
                                //KT
                                var flag = true; var reqName = string.Empty;
                                var dataLocation = model.OPS_COTOContainer.Where(c => (dataOPSContainer.Contains(c.OPSContainerID) || dataContainer.Contains(c.ID)) && !c.IsSplit
                                    && (c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                    && (c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R)).Select(c => new
                                    {
                                        c.LocationFromID,
                                        c.LocationToID
                                    }).ToList();
                                Dictionary<int, bool> dicLocationCheck = new Dictionary<int, bool>();
                                foreach (var item in dataLocation)
                                {
                                    if (!dicLocationCheck.ContainsKey(item.LocationFromID) && flag)
                                    {
                                        dicLocationCheck.Add(item.LocationFromID, true);
                                        var dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationFromID).ToList();
                                        foreach (var i in dataReq)
                                        {
                                            if (i.IsOneContainer != null && i.IsOneContainer == true)
                                            {
                                                flag = false;
                                                reqName = i.CAT_Location.Location;
                                                break;
                                            }
                                        }
                                        if (flag)
                                        {
                                            dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationToID).ToList();
                                            foreach (var i in dataReq)
                                            {
                                                if (i.IsOneContainer != null && i.IsOneContainer == true)
                                                {
                                                    flag = false;
                                                    reqName = i.CAT_Location.Location;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (!flag)
                                    str = "Điểm " + reqName + " chỉ đáp ứng 1 container 20!";
                            }
                            else if (total40EX == 0 && total40IM == 0 && total40LO == 0)
                            {
                                if (maxCapacity == 1)
                                    str = "Đáp ứng tối đa 1 container 20!";
                                //KT
                                var flag = true; var reqName = string.Empty;
                                var dataLocation = model.OPS_COTOContainer.Where(c => (dataOPSContainer.Contains(c.OPSContainerID) || dataContainer.Contains(c.ID)) && !c.IsSplit
                                    && (c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                    && (c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.OPS_Container.ORD_Container.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R)).Select(c => new
                                    {
                                        c.LocationFromID,
                                        c.LocationToID
                                    }).ToList();
                                Dictionary<int, bool> dicLocationCheck = new Dictionary<int, bool>();
                                foreach (var item in dataLocation)
                                {
                                    if (!dicLocationCheck.ContainsKey(item.LocationFromID) && flag)
                                    {
                                        dicLocationCheck.Add(item.LocationFromID, true);
                                        var dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationFromID).ToList();
                                        foreach (var i in dataReq)
                                        {
                                            if (i.IsOneContainer != null && i.IsOneContainer == true)
                                            {
                                                flag = false;
                                                reqName = i.CAT_Location.Location;
                                                break;
                                            }
                                        }
                                        if (flag)
                                        {
                                            dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationToID).ToList();
                                            foreach (var i in dataReq)
                                            {
                                                if (i.IsOneContainer != null && i.IsOneContainer == true)
                                                {
                                                    flag = false;
                                                    reqName = i.CAT_Location.Location;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (!flag)
                                    str = "Điểm " + reqName + " chỉ đáp ứng 1 container 20!";
                            }
                            else
                            {
                                str = "Không thỏa điều kiện ghép container!";
                            }
                        }
                    }
                    else if (data.Count == 1)
                    {
                        var obj = data.FirstOrDefault();
                        if (obj.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || obj.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || obj.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R)
                        {

                        }
                        else
                        {
                            if (maxCapacity == 1)
                            {
                                str = "Quá khả năng chuyên chở!";
                            }
                            var flag = true; var reqName = string.Empty;
                            var dataLocation = model.OPS_COTOContainer.Where(c => (dataOPSContainer.Contains(c.OPSContainerID) || dataContainer.Contains(c.ID)) && !c.IsSplit).Select(c => new
                            {
                                c.LocationFromID,
                                c.LocationToID
                            }).ToList();
                            Dictionary<int, bool> dicLocationCheck = new Dictionary<int, bool>();
                            foreach (var item in dataLocation)
                            {
                                if (!dicLocationCheck.ContainsKey(item.LocationFromID) && flag)
                                {
                                    dicLocationCheck.Add(item.LocationFromID, true);
                                    var dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationFromID).ToList();
                                    foreach (var i in dataReq)
                                    {
                                        if (i.IsOneContainer != null && i.IsOneContainer == true)
                                        {
                                            flag = false;
                                            reqName = i.CAT_Location.Location;
                                            break;
                                        }
                                    }
                                    if (flag)
                                    {
                                        dataReq = model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationToID).ToList();
                                        foreach (var i in dataReq)
                                        {
                                            if (i.IsOneContainer != null && i.IsOneContainer == true)
                                            {
                                                flag = false;
                                                reqName = i.CAT_Location.Location;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            if (!flag)
                                str = "Điểm " + reqName + " chỉ đáp ứng 1 container 20!";
                        }
                    }
                    else
                    {
                        str = "Không tìm thấy đơn hàng!";
                    }
                }
                return str;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCOTOMaster OPSCO_MAP_Schedule_NewTime_Offer(DTOOPSCO_MAP_Trip item)
        {
            try
            {
                DTOOPSCOTOMaster result = new DTOOPSCOTOMaster();
                using (var model = new DataEntities())
                {
                    if (item.ListOPSCon != null && item.ListORDCon != null)
                    {
                        if (item.ID < 1 && item.ListOPSCon.Count > 0 && item.ListORDCon.Count == 0)
                        {
                            var data = model.OPS_COTOContainer.Where(c => item.ListOPSCon.Contains(c.ID) && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).OrderBy(c => c.OPSContainerID).ThenBy(c => c.SortOrder).Select(c => c.ID).ToList();
                            result = HelperTOMaster.OPSCO_CreateItemOfferTime(model, Account, data, item.ETD.Value, item.ETA.Value, item.VehicleID, item.RomoocID);
                        }
                        else if (item.ID < 1 && item.ListORDCon.Count > 0 && item.ListOPSCon.Count == 0)
                        {
                            var data = model.OPS_COTOContainer.Where(c => item.ListORDCon.Contains(c.OPS_Container.ContainerID) && c.COTOMasterID == null && c.IsSplit == false && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).OrderBy(c => c.OPSContainerID).ThenBy(c => c.SortOrder).Select(c => c.ID).ToList();
                            result = HelperTOMaster.OPSCO_CreateItemOfferTime(model, Account, data, item.ETD.Value, item.ETA.Value, item.VehicleID, item.RomoocID);
                        }
                        else if (item.ID > 0 && item.ETA.HasValue && item.ETD.HasValue)
                        {
                            result = HelperTOMaster.OPSCO_ChangeScheduleTimeOfferTime(model, Account, item.ID, item.ETD.Value, item.ETA.Value);
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCOTOMaster OPSCO_MAP_Schedule_TOMaster_Vehicle_Offer(int mID, int vehID, int? venID, bool istractor)
        {
            try
            {
                DTOOPSCOTOMaster result = new DTOOPSCOTOMaster();
                using (var model = new DataEntities())
                {
                    if (istractor)
                        result = HelperTOMaster.OPSCO_ChangeScheduleVehicleOffer(model, Account, mID, vehID, venID > 0 ? venID : null);
                    else
                        result = HelperTOMaster.OPSCO_ChangeScheduleRomoocOffer(model, Account, mID, vehID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_Schedule_TOMaster_Change_Vehicle(int mID, int vehID, int? venID, bool istractor)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (istractor)
                        HelperTOMaster.OPSCO_ChangeScheduleVehicle(model, Account, mID, vehID, venID > 0 ? venID : null);
                    else
                        HelperTOMaster.OPSCO_ChangeScheduleRomooc(model, Account, mID, vehID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_Schedule_TOMaster_Change_Time(int mID, DateTime ETD, DateTime ETA, List<DTOOPSCOTOContainer> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại!");
                    if (ETD >= ETA)
                        throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA!");
                    HelperTOMaster.OPSCO_ChangeScheduleTime(model, Account, obj.ID, ETD, ETA, data);
                    model.SaveChanges();
                    var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCOTOMaster OPSCO_MAP_Schedule_LeadTime_Offer(List<int> dataOPSCon, List<int> dataCon)
        {
            try
            {
                DTOOPSCOTOMaster result = new DTOOPSCOTOMaster();
                using (var model = new DataEntities())
                {
                    var data = model.OPS_COTOContainer.Where(c => (dataOPSCon.Contains(c.OPSContainerID) || dataCon.Contains(c.ID)) && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).OrderBy(c => c.OPSContainerID).ThenBy(c => c.SortOrder).Select(c => c.ID).ToList();
                    result = HelperTOMaster.OPSCO_CreateItemOfferLeadtime(model, Account, data);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCOTOMaster OPSCO_MAP_Schedule_AddTOContainer_Offer(int mID, List<int> data, int typeOfData)
        {
            try
            {
                DTOOPSCOTOMaster result = new DTOOPSCOTOMaster();
                using (var model = new DataEntities())
                {
                    if (typeOfData == 1)
                    {
                        result = HelperTOMaster.OPSCO_MasterAddTOContainerOffer(model, Account, mID, data);
                    }
                    else
                    {
                        var temp = model.OPS_COTOContainer.Where(c => c.COTOMasterID == null && !c.IsSplit && data.Contains(c.OPS_Container.ContainerID)
                        && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad
                        && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.LocationFromID > 0 && c.LocationToID > 0).Select(c => c.ID).ToList();
                        result = HelperTOMaster.OPSCO_MasterAddTOContainerOffer(model, Account, mID, temp);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_MAP_Schedule_AddTOContainer(int mID, DateTime ETD, DateTime ETA, List<DTOOPSCO_Map_Schedule_Event> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        List<DTOOPSCOTOContainer> dataS = new List<DTOOPSCOTOContainer>();
                        foreach (var item in data)
                        {
                            var o = new DTOOPSCOTOContainer();
                            o.ID = item.ID;
                            o.ETD = item.StartDate;
                            o.ETA = item.EndDate;
                            dataS.Add(o);
                        }
                        HelperTOMaster.OPSCO_MasterAddTOContainer(model, Account, obj.ID, ETD, ETA, dataS);
                        var SDATA = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPS_Container.ORD_Container.OrderID).Distinct().ToList();
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //TimeLine
        public DTOResult OPSCO_TimeLine_Order_List(string request, int typeOfOrder, bool isOwnerPlanning, DateTime fDate, DateTime tDate, List<int> dataCus, List<int> dataService, List<int> dataCarrier, List<int> dataSeaport)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    fDate = fDate.Date;
                    tDate = tDate.Date.AddDays(1);
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var objRequest = CreateRequest(request);
                    if (objRequest.Sorts == null || objRequest.Sorts.Count == 0)
                    {
                        var objSort = new SortDescriptor("GroupSort", System.ComponentModel.ListSortDirection.Ascending);
                        objRequest.Sorts.Add(objSort);
                    }
                    var query = model.OPS_COTOContainer.Where(c => c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                        && (!isAdmin ? Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)
                        && (isOwnerPlanning == true ? c.IsOwnerPlanning == true : c.IsOwnerPlanning == null)
                        && (typeOfOrder == 1 ? c.COTOMasterID == null : true) && (fDate != null && tDate != null ? c.ETD >= fDate && c.ETD < tDate : true)
                        && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.LocationFromID > 0 && c.LocationToID > 0 && c.ParentID == null
                        && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad
                        && (dataService.Count > 0 && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? dataService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value) : true)
                        && (dataCus.Count > 0 ? dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)
                        && (dataSeaport.Count > 0 ? dataSeaport.Contains(c.LocationFromID) || dataSeaport.Contains(c.LocationToID) : true)
                        && (dataCarrier.Count > 0 ? c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && dataCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.PartnerID.Value) : true)
                        ).Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.OPS_Container.ContainerID,                            
                            OPSContainerID = c.OPSContainerID,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            ContainerID = c.OPS_Container.ContainerID,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                            ETA = c.OPS_Container.ORD_Container.ETA,
                            ETD = c.OPS_Container.ORD_Container.ETD,
                            TOETD = c.OPS_Container.ORD_Container.ETDOld,
                            TOETA = c.OPS_Container.ORD_Container.ETAOld,
                            DateGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            DateReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                            ETARequest = c.OPS_Container.ORD_Container.ETARequest,
                            Ton = c.OPS_Container.Ton,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            StatusOfContainerName = string.Empty,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            LocationFromAddress = c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.Address,
                            LocationFromCode = c.OPS_Container.ORD_Container.CUS_Location2.Code,
                            LocationToCode = c.OPS_Container.ORD_Container.CUS_Location3.Code,
                            LocationToAddress = c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.Address,
                            LocationFromID = c.OPS_Container.ORD_Container.LocationFromID.Value,
                            LocationToID = c.OPS_Container.ORD_Container.LocationToID.Value,
                            LocationDepotID = c.OPS_Container.LocationDepotID,
                            LocationDepotCode = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Location : string.Empty,
                            LocationDepotAddress = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Address : string.Empty,
                            LocationDepotReturnCode = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Code : string.Empty,
                            LocationDepotReturnName = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Location : string.Empty,
                            LocationDepotReturnAddress = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Address : string.Empty,
                            GroupSort = c.OPS_Container.ORD_Container.GroupSort,
                            ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                            Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode ?? string.Empty,
                            ShipNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            ShipName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            UserDefined1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1 ?? string.Empty,
                            UserDefined2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2 ?? string.Empty,
                            UserDefined3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3 ?? string.Empty,
                            UserDefined4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4 ?? string.Empty,
                            UserDefined5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5 ?? string.Empty,
                            UserDefined6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6 ?? string.Empty,
                            Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                            Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                            Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                        }).Distinct().ToDataSourceResult(objRequest);
                    var dataORD = query.Data.Cast<DTOOPSCO_MAP_Container>().Select(c => c.OrderID).Distinct().ToList();
                    var dataGOP = model.ORD_GroupProduct.Where(c => dataORD.Contains(c.OrderID) && c.GroupOfProductID.HasValue).Select(c => new
                    {
                        c.OrderID,
                        c.CUS_GroupOfProduct.Code,
                        c.CUS_GroupOfProduct.GroupName
                    }).ToList();
                    foreach (DTOOPSCO_MAP_Container item in query.Data as IEnumerable<DTOOPSCO_MAP_Container>)
                    {
                        if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderExport)
                            item.ServiceType = 1;
                        else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderImport)
                            item.ServiceType = 2;
                        else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderLocal)
                            item.ServiceType = 3;
                        else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                            item.ServiceType = 4;
                        else if (item.ServiceType == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                            item.ServiceType = 5;
                        item.ListLocation = new List<DTOCUSLocation>();

                        item.ListGroupProductCode = dataGOP.Where(c => c.OrderID == item.OrderID).Select(c => c.Code).Distinct().ToList();
                        item.ListGroupProductName = dataGOP.Where(c => c.OrderID == item.OrderID).Select(c => c.GroupName).Distinct().ToList();
                        item.GroupProductCode = string.Join(", ", item.ListGroupProductCode);
                        item.GroupProductName = string.Join(", ", item.ListGroupProductName);
                        item.ListCOTOContainer = model.OPS_COTOContainer.Where(c => !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && (typeOfOrder == 1 ? !c.COTOMasterID.HasValue : true) && c.OPSContainerID == item.OPSContainerID
                            && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad
                            && (dataSeaport.Count > 0 ? dataSeaport.Contains(c.LocationFromID) || dataSeaport.Contains(c.LocationToID) : true)).Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.ID,
                            TOMasterID = c.COTOMasterID > 0 ? c.COTOMasterID.Value : -1,
                            TOMasterCode = c.COTOMasterID > 0 ? c.OPS_COTOMaster.Code : string.Empty,
                            OPSContainerID = c.OPSContainerID,
                            StatusOfContainerID = c.StatusOfCOContainerID,
                            StatusOfContainerName = c.SYS_Var.ValueOfVar,
                            COTOStatus = c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerGetEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerIMEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXEmpty ? 1 : 2,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            SortOrder = c.SortOrder,
                            TOMasterIndex = c.COTOMasterID > 0 ? c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : c.OPS_COTOMaster.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3 : -1
                        }).OrderBy(c => c.SortOrder).ToList();
                        item.IsAllowCreateTO = item.ListCOTOContainer.Any(c => c.TOMasterID == -1); //Hiển thị button tạo chuyến
                        item.IsAllowChangeOwnerPlan = !item.ListCOTOContainer.Any(c => c.TOMasterID > 0);
                    }
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_TimeLine_Vehicle_List(string request, DateTime fDate, DateTime tDate, int typeOfView)
        {
            try
            {
                fDate = fDate.Date;
                tDate = tDate.Date.AddDays(1);
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (typeOfView == 1)
                    {
                        #region View 1 - Chuyến thực tế
                        var dataTOVeh = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && (c.OPS_COTOMaster.VendorOfVehicleID == null || c.OPS_COTOMaster.VendorOfVehicleID == Account.SYSCustomerID) && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_COTOMaster.VehicleID > 2 && c.OPS_Container.RomoocID > 1
                            && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.DateFromCome.HasValue && c.DateToCome.HasValue && !((c.DateFromCome < fDate && c.DateFromCome < fDate) || (c.DateToCome > tDate && c.DateToCome > tDate))).Select(c => new
                            {
                                ID = c.ID,
                                c.COTOMasterID,
                                c.OPS_COTOMaster.Code,
                                c.OPS_COTOMaster.VehicleID,
                                VehicleMaxWeight = c.OPS_COTOMaster.CAT_Vehicle.MaxWeight,
                                VehicleNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                                Location = c.OPS_COTOMaster.CAT_Vehicle.LocationID.HasValue ? c.OPS_COTOMaster.CAT_Vehicle.CAT_Location.Location : string.Empty,
                                Lat = c.OPS_COTOMaster.CAT_Vehicle.Lat ?? 0,
                                Lng = c.OPS_COTOMaster.CAT_Vehicle.Lng ?? 0,
                                c.OPS_COTOMaster.RomoocID,
                                RomoocNo = c.OPS_Container.CAT_Romooc.RegNo,
                                RomoocMaxWeight = c.OPS_Container.CAT_Romooc.MaxWeight,
                                RegCapacity = c.OPS_Container.CAT_Romooc.NoOfDelivery ?? 2,
                                RomoocLocation = c.OPS_Container.CAT_Romooc.LocationID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_Location.Location : string.Empty,
                                GroupOfRomoocName = c.OPS_Container.RomoocID.HasValue ? c.OPS_Container.CAT_Romooc.GroupOfRomoocID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty : string.Empty,
                                GroupOfRomoocCode = c.OPS_Container.RomoocID.HasValue ? c.OPS_Container.CAT_Romooc.GroupOfRomoocID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_GroupOfRomooc.Code : string.Empty : string.Empty,
                                RomoocLat = c.OPS_Container.CAT_Romooc.Lat ?? 0,
                                RomoocLng = c.OPS_Container.CAT_Romooc.Lng ?? 0
                            }).ToList();

                        var temp = new List<DTOOPSCO_TimeLine_Vehicle>();
                        foreach (var obj in dataTOVeh)
                        {
                            var str = "1-" + obj.VehicleID.ToString() + "--1";
                            if (temp.Count(c => c.Text == str) == 0 && temp.Count(c => c.VehicleID == obj.VehicleID) == 0)
                            {
                                temp.Add(new DTOOPSCO_TimeLine_Vehicle
                                {
                                    TypeOfGroupID = 1,
                                    Value = obj.VehicleID.Value,
                                    Text = str,
                                    VehicleID = obj.VehicleID.Value,
                                    RomoocID = -1,
                                    VehicleNo = obj.VehicleNo,
                                    RomoocNo = string.Empty,
                                    MaxWeight = obj.VehicleMaxWeight ?? 0,
                                    VehicleMaxWeight = obj.VehicleMaxWeight ?? 0,
                                    LocationName = string.Empty,
                                    VehicleLocationName = obj.Location ?? string.Empty,
                                    MaxCapacity = 0,
                                    Lat = null,
                                    Lng = null,
                                    VehicleLat = obj.Lat,
                                    VehicleLng = obj.Lng,
                                    GroupOfRomoocName = string.Empty,
                                    GroupOfRomoocCode = string.Empty
                                });
                            }
                            if (obj.RomoocID.HasValue)
                            {
                                str = "2-" + obj.VehicleID.ToString() + "-" + obj.RomoocID.Value.ToString();
                                if (temp.Count(c => c.Text == str) == 0)
                                {
                                    temp.Add(new DTOOPSCO_TimeLine_Vehicle
                                    {
                                        TypeOfGroupID = 2,
                                        Value = obj.VehicleID.Value,
                                        Text = str,
                                        VehicleID = obj.VehicleID.Value,
                                        RomoocID = obj.RomoocID.Value,
                                        VehicleNo = obj.VehicleNo,
                                        RomoocNo = obj.RomoocNo,
                                        MaxWeight = Math.Min(obj.VehicleMaxWeight ?? 0, obj.RomoocMaxWeight ?? 0),
                                        VehicleMaxWeight = obj.VehicleMaxWeight ?? 0,
                                        LocationName = obj.RomoocLocation,
                                        VehicleLocationName = obj.Location,
                                        MaxCapacity = obj.RegCapacity,
                                        Lat = obj.RomoocLat,
                                        Lng = obj.RomoocLng,
                                        VehicleLat = obj.Lat,
                                        VehicleLng = obj.Lng,
                                        GroupOfRomoocName = obj.GroupOfRomoocName,
                                        GroupOfRomoocCode = obj.GroupOfRomoocCode
                                    });
                                }
                            }
                        }
                        foreach (var item in temp.Where(c => c.RomoocID == -1 && c.TypeOfGroupID == 1).ToList())
                        {
                            if (temp.Count(c => c.VehicleID == item.VehicleID && c.RomoocID > 0) > 0)
                            {
                                temp.Remove(item);
                            }
                        }
                        var query = temp.ToDataSourceResult(CreateRequest(request));
                        result.Data = query.Data as IEnumerable<DTOOPSCO_TimeLine_Vehicle>;
                        result.Total = query.Total;
                        #endregion
                    }
                    else if (typeOfView == 2)
                    {
                        #region View 2 - Hiện romooc chờ + thực tế
                        var dataTOVeh = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && (c.OPS_COTOMaster.VendorOfVehicleID == null || c.OPS_COTOMaster.VendorOfVehicleID == Account.SYSCustomerID) && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_COTOMaster.VehicleID > 2 && c.OPS_Container.RomoocID > 1
                            && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.DateFromCome.HasValue && c.DateToCome.HasValue && !((c.DateFromCome < fDate && c.DateFromCome < fDate) || (c.DateToCome > tDate && c.DateToCome > tDate))).Select(c => new
                            {
                                ID = c.ID,
                                c.COTOMasterID,
                                c.OPS_COTOMaster.Code,
                                c.OPS_COTOMaster.VehicleID,
                                VehicleMaxWeight = c.OPS_COTOMaster.CAT_Vehicle.MaxWeight,
                                VehicleNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                                Location = c.OPS_COTOMaster.CAT_Vehicle.LocationID.HasValue ? c.OPS_COTOMaster.CAT_Vehicle.CAT_Location.Location : string.Empty,
                                Lat = c.OPS_COTOMaster.CAT_Vehicle.Lat ?? 0,
                                Lng = c.OPS_COTOMaster.CAT_Vehicle.Lng ?? 0,
                                c.OPS_COTOMaster.RomoocID,
                                RomoocNo = c.OPS_Container.CAT_Romooc.RegNo,
                                RomoocMaxWeight = c.OPS_Container.CAT_Romooc.MaxWeight,
                                RegCapacity = c.OPS_Container.CAT_Romooc.NoOfDelivery ?? 2,
                                RomoocLocation = c.OPS_Container.CAT_Romooc.LocationID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_Location.Location : string.Empty,
                                GroupOfRomoocName = c.OPS_Container.RomoocID.HasValue ? c.OPS_Container.CAT_Romooc.GroupOfRomoocID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty : string.Empty,
                                GroupOfRomoocCode = c.OPS_Container.RomoocID.HasValue ? c.OPS_Container.CAT_Romooc.GroupOfRomoocID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_GroupOfRomooc.Code : string.Empty : string.Empty,
                                RomoocLat = c.OPS_Container.CAT_Romooc.Lat ?? 0,
                                RomoocLng = c.OPS_Container.CAT_Romooc.Lng ?? 0
                            }).ToList();
                        var dataCusVeh = model.CUS_Vehicle.Where(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID > 2 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new
                        {
                            c.ID,
                            c.CAT_Vehicle.RegNo,
                            c.CAT_Vehicle.MaxWeight,
                            c.VehicleID,
                            c.CAT_Vehicle.CAT_Location.Location,
                            c.CAT_Vehicle.Lat,
                            c.CAT_Vehicle.Lng
                        }).ToList();
                        var temp = new List<DTOOPSCO_TimeLine_Vehicle>();
                        foreach (var obj in dataTOVeh)
                        {
                            var str = "1-" + obj.VehicleID.ToString() + "--1";
                            if (temp.Count(c => c.Text == str) == 0 && temp.Count(c => c.VehicleID == obj.VehicleID) == 0)
                            {
                                temp.Add(new DTOOPSCO_TimeLine_Vehicle
                                {
                                    TypeOfGroupID = 1,
                                    Value = obj.VehicleID.Value,
                                    Text = str,
                                    VehicleID = obj.VehicleID.Value,
                                    RomoocID = -1,
                                    VehicleNo = obj.VehicleNo,
                                    RomoocNo = string.Empty,
                                    MaxWeight = obj.VehicleMaxWeight ?? 0,
                                    VehicleMaxWeight = obj.VehicleMaxWeight ?? 0,
                                    LocationName = string.Empty,
                                    VehicleLocationName = obj.Location ?? string.Empty,
                                    MaxCapacity = 0,
                                    Lat = null,
                                    Lng = null,
                                    VehicleLat = obj.Lat,
                                    VehicleLng = obj.Lng,
                                    GroupOfRomoocName = string.Empty,
                                    GroupOfRomoocCode = string.Empty
                                });
                            }
                            if (obj.RomoocID.HasValue)
                            {
                                str = "2-" + obj.VehicleID.ToString() + "-" + obj.RomoocID.Value.ToString();
                                if (temp.Count(c => c.Text == str) == 0)
                                {
                                    temp.Add(new DTOOPSCO_TimeLine_Vehicle
                                    {
                                        TypeOfGroupID = 2,
                                        Value = obj.VehicleID.Value,
                                        Text = str,
                                        VehicleID = obj.VehicleID.Value,
                                        RomoocID = obj.RomoocID.Value,
                                        VehicleNo = obj.VehicleNo,
                                        RomoocNo = obj.RomoocNo,
                                        MaxWeight = Math.Min(obj.VehicleMaxWeight ?? 0, obj.RomoocMaxWeight ?? 0),
                                        VehicleMaxWeight = obj.VehicleMaxWeight ?? 0,
                                        LocationName = obj.RomoocLocation,
                                        VehicleLocationName = obj.Location,
                                        MaxCapacity = obj.RegCapacity,
                                        Lat = obj.RomoocLat,
                                        Lng = obj.RomoocLng,
                                        VehicleLat = obj.Lat,
                                        VehicleLng = obj.Lng,
                                        GroupOfRomoocName = obj.GroupOfRomoocName,
                                        GroupOfRomoocCode = obj.GroupOfRomoocCode
                                    });
                                }
                            }
                        }
                        foreach (var item in temp.Where(c => c.RomoocID == -1 && c.TypeOfGroupID == 1).ToList())
                        {
                            if (temp.Count(c => c.VehicleID == item.VehicleID && c.RomoocID > 0) > 0)
                            {
                                temp.Remove(item);
                            }
                        }

                        foreach (var item in dataCusVeh)
                        {
                            var index = temp.IndexOf(temp.FirstOrDefault(c => c.VehicleID == item.VehicleID));
                            if (index == -1)
                                index = 0;

                            temp.Insert(index, new DTOOPSCO_TimeLine_Vehicle
                            {
                                TypeOfGroupID = 2,
                                Value = item.VehicleID,
                                Text = "2-" + item.VehicleID.ToString() + "-0",
                                VehicleID = item.VehicleID,
                                RomoocID = -1,
                                VehicleNo = item.RegNo,
                                RomoocNo = "[Chờ nhập]",
                                MaxWeight = item.MaxWeight ?? 0,
                                VehicleMaxWeight = item.MaxWeight ?? 0,
                                LocationName = string.Empty,
                                VehicleLocationName = item.Location ?? string.Empty,
                                MaxCapacity = 2,
                                Lat = null,
                                Lng = null,
                                VehicleLat = item.Lat,
                                VehicleLng = item.Lng,
                                GroupOfRomoocName = string.Empty
                            });
                        }
                        var query = temp.OrderBy(c => c.RomoocID).ToDataSourceResult(CreateRequest(request));
                        result.Data = query.Data as IEnumerable<DTOOPSCO_TimeLine_Vehicle>;
                        result.Total = query.Total;
                        #endregion
                    }
                    else if (typeOfView == 3)
                    {
                        #region view 3 - Hiện romooc mặc định + thực tế

                        #endregion
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_TimeLine_RomoocWait_List(string request, List<int> data)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Romooc.Where(c => c.CustomerID == Account.SYSCustomerID && c.RomoocID > 1 && !data.Contains(c.RomoocID)).Select(c => new DTOOPSCO_TimeLine_Vehicle
                    {
                        ID = c.RomoocID,
                        RomoocID = c.RomoocID,
                        RomoocNo = c.CAT_Romooc.RegNo,
                        Lat = c.CAT_Romooc.Lat ?? 0,
                        Lng = c.CAT_Romooc.Lng ?? 0,
                        GroupOfRomoocName = c.CAT_Romooc.GroupOfRomoocID.HasValue ? c.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty,
                        MaxWeight = c.CAT_Romooc.MaxWeight ?? 0,
                        MaxCapacity = c.CAT_Romooc.NoOfDelivery ?? 2,
                        LocationName = c.CAT_Romooc.LocationID.HasValue ? c.CAT_Romooc.CAT_Location.Location : string.Empty
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSCO_TimeLine_Vehicle>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Schedule_Data OPSCO_TimeLine_Schedule_Data(DateTime fDate, DateTime tDate, List<string> dataRes, int typeOfView)
        {
            try
            {
                fDate = fDate.Date;
                tDate = tDate.Date.AddDays(1);
                DTOOPSCO_MAP_Schedule_Data result = new DTOOPSCO_MAP_Schedule_Data();
                result.DataSources = new List<DTOOPSCO_Map_Schedule_Event>();
                result.Resources = new List<DTOOPSCO_Map_Schedule_Group>();
                var copy = new CopyHelper();
                using (var model = new DataEntities())
                {
                    List<int> dataRom = new List<int>();
                    List<int> dataVeh = new List<int>();
                    var dataEmpty = new List<int>
                        {
                            -(int)SYSVarType.StatusOfCOContainerEXEmpty,
                            -(int)SYSVarType.StatusOfCOContainerIMEmpty,
                            -(int)SYSVarType.StatusOfCOContainerLOEmpty,
                            -(int)SYSVarType.StatusOfCOContainerLOGetEmpty,
                            -(int)SYSVarType.StatusOfCOContainerLOReturnEmpty,
                            -(int)SYSVarType.StatusOfCOContainerRepairEmpty,
                            -(int)SYSVarType.StatusOfCOContainerReturnEmptyFail,
                            -(int)SYSVarType.StatusOfCOContainerReturnEmpty,
                            -(int)SYSVarType.StatusOfCOContainerShipEmpty
                        };
                    foreach (var res in dataRes)
                    {
                        if (!string.IsNullOrEmpty(res))
                        {
                            var s = res.Split('_').ToArray().Select(int.Parse).ToList();
                            if (!dataVeh.Contains(s[0]))
                                dataVeh.Add(s[0]);
                            if (s[1] > 0 && !dataRom.Contains(s[1]))
                                dataRom.Add(s[1]);
                        }
                    }
                    var dataTOVeh = model.OPS_COTOContainer.Where(c => c.DateFromCome != c.DateToCome && c.COTOMasterID.HasValue && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_COTOMaster.VehicleID.HasValue && dataVeh.Contains(c.OPS_COTOMaster.VehicleID.Value)
                        && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad
                        && (typeOfView == 1 ? c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerReturnRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetEmpty && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetLaden : true)
                        && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.DateFromCome.HasValue && c.DateToCome.HasValue && !((c.DateFromCome < fDate && c.DateFromCome < fDate) || (c.DateToCome > tDate && c.DateToCome > tDate))).Select(c => new
                       {
                           ID = c.ID,
                           c.COTOMasterID,
                           c.OPSContainerID,
                           c.IsDuplicateHidden,
                           c.OPS_COTOMaster.Code,
                           c.OPS_Container.ContainerID,
                           c.OPS_COTOMaster.DriverName1,
                           c.OPS_COTOMaster.DriverTel1,
                           c.OPS_COTOMaster.DriverID1,
                           c.OPS_COTOMaster.VehicleID,
                           c.OPS_COTOMaster.CAT_Vehicle.MaxWeight,
                           c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                           c.OPS_COTOMaster.CAT_Vehicle.RegCapacity,
                           c.OPS_COTOMaster.CreatedDate,
                           c.OPS_COTOMaster.RomoocID,
                           c.StatusOfCOContainerID,
                           c.OPS_COTOMaster.StatusOfCOTOMasterID,
                           c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID,
                           c.ETA,
                           c.ETD,
                           c.DateFromCome,
                           c.DateToCome,
                           c.OPS_Container.Ton,
                           c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                           CATServiceOfOrderID = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID,
                           c.OPS_Container.ORD_Container.ORD_Order.PartnerID,
                           c.LocationFromID,
                           c.LocationToID,
                           c.COTOSort,
                           c.SortOrder,
                           IsEmpty = dataEmpty.Contains(c.StatusOfCOContainerID)
                       }).ToList();
                    var dataTORom = model.OPS_COTOContainer.Where(c => c.DateFromCome != c.DateToCome && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_Container.RomoocID.HasValue && dataRom.Contains(c.OPS_Container.RomoocID.Value)
                        && (typeOfView == 1 ? c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerReturnRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetEmpty && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetLaden && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad : true)
                        && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerReturnStation
                        && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.DateFromCome.HasValue && c.DateToCome.HasValue && !((c.DateFromCome < fDate && c.DateFromCome < fDate) || (c.DateToCome > tDate && c.DateToCome > tDate))).Select(c => new
                        {
                            c.ID,
                            c.COTOMasterID,
                            c.OPSContainerID,
                            c.IsDuplicateHidden,
                            c.OPS_COTOMaster.Code,
                            c.OPS_Container.ContainerID,
                            c.OPS_COTOMaster.DriverName1,
                            c.OPS_COTOMaster.DriverTel1,
                            c.OPS_COTOMaster.DriverID1,
                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID.Value : -1,
                            CreatedDate = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.CreatedDate : DateTime.Now,
                            c.StatusOfCOContainerID,
                            StatusOfCOTOMasterID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.StatusOfCOTOMasterID : -1,
                            c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID,
                            c.ETA,
                            c.ETD,
                            c.DateFromCome,
                            c.DateToCome,
                            c.OPS_Container.RomoocID,
                            c.OPS_Container.CAT_Romooc.RegNo,
                            c.OPS_Container.CAT_Romooc.MaxWeight,
                            c.OPS_Container.CAT_Romooc.NoOfDelivery,
                            c.OPS_Container.Ton,
                            c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CATServiceOfOrderID = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID,
                            c.OPS_Container.ORD_Container.ORD_Order.PartnerID,
                            c.LocationFromID,
                            c.LocationToID,
                            c.COTOSort,
                            c.SortOrder,
                            IsEmpty = dataEmpty.Contains(c.StatusOfCOContainerID)
                        }).ToList();

                    Dictionary<int, bool> dicValue = new Dictionary<int, bool>();
                    var dataLoad = new List<int>
                        {
                            -(int)SYSVarType.StatusOfCOContainerLoad,
                            -(int)SYSVarType.StatusOfCOContainerUnLoad,
                            -(int)SYSVarType.StatusOfCOContainerStop
                        };
                    var dataGet = new List<int>
                        {
                            -(int)SYSVarType.StatusOfCOContainerGetLaden,
                            -(int)SYSVarType.StatusOfCOContainerGetEmpty,
                            -(int)SYSVarType.StatusOfCOContainerReturnRomooc
                        };
                    var dataStation = new List<int>
                        {
                            -(int)SYSVarType.StatusOfCOContainerGetRomooc,
                            -(int)SYSVarType.StatusOfCOContainerReturnStation 
                        };
                    foreach (var res in dataRes)
                    {
                        if (!string.IsNullOrEmpty(res))
                        {
                            var s = res.Split('_').ToArray().Select(int.Parse).ToList();
                            var vehID = s[0]; var romID = s[1];
                            if (!dicValue.ContainsKey(vehID) || dicValue[vehID] != true)
                            {
                                dicValue.Add(vehID, true);
                                var dataV = dataTOVeh.Where(c => c.VehicleID == vehID).ToList();
                                foreach (var item in dataV)
                                {
                                    var objE = new DTOOPSCO_Map_Schedule_Event();
                                    objE.StatusOfTimeSheet = 1;
                                    if (item.IsEmpty)
                                    {
                                        objE.StatusOfTimeSheet = 2;
                                    }
                                    else if (dataLoad.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 3;
                                    }
                                    else if (dataStation.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 4;
                                    }
                                    else if (dataGet.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 5;
                                    }

                                    objE.ID = item.ID;
                                    objE.TOMasterID = item.COTOMasterID ?? -1;
                                    objE.Code = item.Code;
                                    objE.EndDate = item.DateToCome.Value;
                                    objE.StartDate = item.DateFromCome.Value;
                                    objE.GroupID = item.VehicleID.Value;
                                    objE.TypeOfGroupID = 1;
                                    objE.VehicleID = item.VehicleID.Value;
                                    objE.ETA = objE.EndDate.ToString("dd/MM/yyyy hh:mm");
                                    objE.ETD = objE.StartDate.ToString("dd/MM/yyyy hh:mm");
                                    objE.IsNew = DateTime.Now.Subtract(item.CreatedDate).TotalSeconds < 900;
                                    objE.IsDoubleContainer = item.IsDuplicateHidden == false;
                                    objE.IsDuplicateHidden = item.IsDuplicateHidden;
                                    if (objE.IsDoubleContainer)
                                    {
                                        var dataT = dataTOVeh.Where(c => c.COTOMasterID == item.COTOMasterID && c.OPSContainerID != item.OPSContainerID && (c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport || c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)).Select(c => c.IsEmpty).Distinct().ToList();
                                        if (dataT.Count > 0)
                                        {
                                            if (item.IsEmpty && dataT.FirstOrDefault() == true)
                                                objE.TypeOfDoubleContainer = 1;
                                            else if (!item.IsEmpty && dataT.FirstOrDefault() == false)
                                                objE.TypeOfDoubleContainer = 2;
                                            else if (item.IsEmpty && dataT.FirstOrDefault() == false)
                                                objE.TypeOfDoubleContainer = 3;
                                        }
                                    }
                                    objE.Title = string.Empty; objE.MaxTon = item.MaxWeight ?? 0; objE.MaxQty = 2; objE.Ton = item.Ton;
                                    if (item.COTOSort == 1)
                                    {
                                        objE.IsStart = true;
                                    }
                                    else if (item.COTOSort == -1)
                                    {
                                        objE.IsEnd = true;
                                    }
                                    else if (item.COTOSort == 0)
                                    {
                                        objE.IsEnd = true;
                                        objE.IsStart = true;
                                    }

                                    List<string> stitle = new List<string>();
                                    if (dataTOVeh.Count(c => c.COTOMasterID == item.COTOMasterID && c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal) > 0)
                                    {
                                        objE.IsLocal = true;
                                    }
                                    if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                                        stitle.Add("XK");
                                    else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                        stitle.Add("NK");
                                    else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                        stitle.Add("CR");
                                    else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                        stitle.Add("CD");
                                    else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                                        stitle.Add("CK");
                                    objE.Title = string.Join("-", stitle);
                                    objE.NoC = dataTOVeh.Where(c => c.COTOMasterID == objE.TOMasterID).Select(c => c.ServiceOfOrderID).Distinct().Count();

                                    objE.StatusOfEvent = item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : item.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                    if (objE.StatusOfEvent == 1)
                                    {
                                        if (item.VehicleID > 2 && item.RomoocID > 1 && item.DriverName1 != null && item.DriverName1 != string.Empty && item.DriverID1.HasValue)
                                        {
                                            objE.StatusOfEvent = 11;
                                        }
                                    }
                                    objE.TypeOfEvent = 1;
                                    objE.Connections = new List<int>();
                                    objE.Option1 = item.CATServiceOfOrderID > 0 ? item.CATServiceOfOrderID.Value.ToString() : "-1";
                                    objE.Option2 = item.CustomerID.ToString();
                                    objE.Option3 = item.PartnerID > 0 ? item.PartnerID.Value.ToString() : "-1";
                                    objE.Option4 = item.LocationFromID.ToString();
                                    objE.Option5 = item.LocationToID.ToString();
                                    objE.Option6 = item.ContainerID.ToString();
                                    result.DataSources.Add(objE);
                                }
                            }

                            var dataR = dataTORom.Where(c => c.RomoocID == romID && (typeOfView == 1 ? c.VehicleID == vehID : true)).ToList();
                            foreach (var item in dataR)
                            {
                                var objE = new DTOOPSCO_Map_Schedule_Event();
                                if (item.COTOMasterID.HasValue)
                                {
                                    objE.StatusOfTimeSheet = 1;
                                    if (item.IsEmpty)
                                    {
                                        objE.StatusOfTimeSheet = 2;
                                    }
                                    else if (dataLoad.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 3;
                                    }
                                    else if (dataStation.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 4;
                                    }
                                    else if (dataGet.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 5;
                                    }
                                }
                                else
                                {
                                    objE.StatusOfTimeSheet = 1;
                                    if (item.IsEmpty)
                                    {
                                        objE.StatusOfTimeSheet = 2;
                                    }
                                    else if (dataLoad.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 3;
                                    }
                                    else if (dataStation.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 4;
                                    }
                                    else if (dataGet.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 5;
                                    }
                                }

                                objE.ID = item.ID;
                                objE.TOMasterID = item.COTOMasterID ?? -1;
                                objE.Code = item.Code;
                                objE.EndDate = item.DateToCome.Value;
                                objE.StartDate = item.DateFromCome.Value;
                                objE.GroupID = item.RomoocID.Value;
                                objE.TypeOfGroupID = 2;
                                objE.VehicleID = vehID;
                                objE.ETA = objE.EndDate.ToString("dd/MM/yyyy hh:mm");
                                objE.ETD = objE.StartDate.ToString("dd/MM/yyyy hh:mm");
                                objE.IsNew = DateTime.Now.Subtract(item.CreatedDate).TotalSeconds < 900 && objE.TOMasterID > 0;
                                objE.IsDoubleContainer = item.IsDuplicateHidden == false;
                                if (objE.IsDoubleContainer)
                                {
                                    var dataT = dataTORom.Where(c => c.COTOMasterID == item.COTOMasterID && c.OPSContainerID != item.OPSContainerID && (c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport || c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)).Select(c => c.IsEmpty).Distinct().ToList();
                                    if (dataT.Count > 0)
                                    {
                                        if (item.IsEmpty && dataT.FirstOrDefault() == true)
                                            objE.TypeOfDoubleContainer = 1;
                                        else if (!item.IsEmpty && dataT.FirstOrDefault() == false)
                                            objE.TypeOfDoubleContainer = 2;
                                        else if (item.IsEmpty && dataT.FirstOrDefault() == false)
                                            objE.TypeOfDoubleContainer = 3;
                                    }
                                }
                                objE.IsDuplicateHidden = item.IsDuplicateHidden;
                                objE.Title = string.Empty; objE.MaxTon = item.MaxWeight ?? 0; objE.MaxQty = item.NoOfDelivery ?? 2; objE.Ton = item.Ton;
                                if (item.COTOSort == 1)
                                {
                                    objE.IsStart = true;
                                }
                                else if (item.COTOSort == -1)
                                {
                                    objE.IsEnd = true;
                                }
                                else if (item.COTOSort == 0)
                                {
                                    objE.IsEnd = true;
                                    objE.IsStart = true;
                                }

                                List<string> stitle = new List<string>();                                
                                if (dataTORom.Count(c => c.COTOMasterID == item.COTOMasterID && c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal) > 0)
                                {
                                    objE.IsLocal = true;
                                }
                                if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                                    stitle.Add("XK");
                                else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                    stitle.Add("NK");
                                else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                    stitle.Add("CR");
                                else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                    stitle.Add("CD");
                                else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                                    stitle.Add("CK");
                                objE.Title = string.Join("-", stitle);
                                objE.NoC = dataTORom.Where(c => c.COTOMasterID == objE.TOMasterID).Select(c => c.ServiceOfOrderID).Distinct().Count();

                                if (objE.TOMasterID > 0)
                                    objE.StatusOfEvent = item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : item.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                else
                                    objE.StatusOfEvent = 1;

                                if (objE.StatusOfEvent == 1)
                                {
                                    if (item.VehicleID > 2 && item.RomoocID > 1 && item.DriverName1 != null && item.DriverName1 != string.Empty && item.DriverID1.HasValue)
                                    {
                                        objE.StatusOfEvent = 11;
                                    }
                                }
                                objE.TypeOfEvent = 1;
                                objE.Connections = new List<int>();
                                objE.Option1 = item.CATServiceOfOrderID > 0 ? item.CATServiceOfOrderID.Value.ToString() : "-1";
                                objE.Option2 = item.CustomerID.ToString();
                                objE.Option3 = item.PartnerID > 0 ? item.PartnerID.Value.ToString() : "-1";
                                objE.Option4 = item.LocationFromID.ToString();
                                objE.Option5 = item.LocationToID.ToString();
                                objE.Option6 = item.ContainerID.ToString();
                                result.DataSources.Add(objE);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_TimeLine_COTOContainer_ByTrip_List(string request, int mID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objRequest = CreateRequest(request);
                    if (objRequest.Sorts == null || objRequest.Sorts.Count == 0)
                    {
                        var objSort = new SortDescriptor("SortOrder", System.ComponentModel.ListSortDirection.Ascending);
                        objRequest.Sorts.Add(objSort);
                    }
                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID == mID && c.ParentID == null && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad).Select(c => new DTOOPSCO_MAP_Container
                    {
                        ID = c.ID,
                        SortOrder = c.SortOrder,
                        ContainerID = c.OPS_Container.ContainerID,
                        ContainerNo = c.OPS_Container.ContainerNo,
                        SealNo1 = c.OPS_Container.SealNo1,
                        SealNo2 = c.OPS_Container.SealNo2,
                        CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                        CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                        CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                        CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromName = c.CAT_Location.Location,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToName = c.CAT_Location1.Location,
                        LocationToAddress = c.CAT_Location1.Address,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                        StatusOfContainerName = c.SYS_Var.ValueOfVar,
                        Ton = c.OPS_Container.Ton,
                        OPSContainerID = c.OPSContainerID,
                        COTOStatus = c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerWait ? 0 : c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerTranfer ? 1 : c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerComplete ? 2 : 3,
                        TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                        Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                        Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                        Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                    }).OrderBy(c => c.SortOrder).Distinct().ToDataSourceResult(objRequest);
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_TimeLine_COTOContainer_Remove(int mID, int conID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    HelperTOMaster.OPSCO_MasterRemoveTOContainer(model, Account, mID, conID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCOTOMaster OPSCO_TimeLine_Event_ChangeTime_Offer(int mID, int conID, DateTime ETD, DateTime ETA)
        {
            try
            {
                DTOOPSCOTOMaster result = new DTOOPSCOTOMaster();
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến!");
                    result = HelperTOMaster.OPSCO_ChangeScheduleTimeOfferTime(model, Account, obj.ID, obj.ETD, obj.ETA, new DTOOPSCOTOContainer { ID = conID, ETA = ETA, ETD = ETD });
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Trip OPSCO_TimeLine_TOMaster_ByID(int mID, int conID)
        {
            try
            {
                DTOOPSCO_MAP_Trip result = new DTOOPSCO_MAP_Trip();
                using (var model = new DataEntities())
                {
                    if (mID > 0)
                    {
                        var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.Code = obj.Code;
                            result.ETD = obj.ETD;
                            result.ETA = obj.ETA;
                            result.VehicleID = obj.VehicleID ?? 0;
                            result.VehicleNo = obj.VehicleID > 0 ? obj.CAT_Vehicle.RegNo : string.Empty;
                            result.RomoocID = obj.RomoocID ?? 0;
                            result.RomoocNo = obj.RomoocID > 0 ? obj.CAT_Romooc.RegNo : string.Empty;
                            result.DriverName = obj.DriverName1;
                            result.Status = obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved || obj.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning ? 1 : obj.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterPlanning && obj.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                            result.DriverTel = obj.DriverTel1;
                            result.VendorOfVehicleID = obj.VendorOfVehicleID > 0 && obj.VendorOfVehicleID != Account.SYSCustomerID ? obj.VendorOfVehicleID : null;
                            result.TotalContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => c.OPSContainerID).Distinct().Count();
                            result.TotalTon = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID).Select(c => new { c.OPSContainerID, c.OPS_Container.Ton }).Distinct().ToList().Sum(c => c.Ton);
                            result.VendorCode = obj.VendorOfVehicleID > 0 ? obj.CUS_Customer1.Code : "Xe nhà";
                            result.RomoocMaxWeight = obj.RomoocID > 0 ? obj.CAT_Romooc.MaxWeight ?? 0 : 0;
                            result.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID && c.ID == conID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_Container
                            {
                                ID = c.ID,
                                IsDuplicateHidden = c.IsDuplicateHidden,
                                OrderID = c.OPS_Container.ORD_Container.OrderID,
                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                Ton = c.OPS_Container.Ton,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                StatusOfContainerName = c.SYS_Var.ValueOfVar,
                                LocationFromCode = c.CAT_Location.Code,
                                LocationToCode = c.CAT_Location1.Code
                            }).ToList();
                            if (result.ListContainer.Count > 0 && result.ListContainer.FirstOrDefault().IsDuplicateHidden == false)
                            {
                                var objDouble = model.OPS_COTOContainer.Where(c => c.COTOMasterID == result.ID && c.IsDuplicateHidden == true).Select(c => new DTOOPSCO_MAP_Container
                                {
                                    ID = c.ID,
                                    IsDuplicateHidden = c.IsDuplicateHidden,
                                    OrderID = c.OPS_Container.ORD_Container.OrderID,
                                    OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                    Ton = c.OPS_Container.Ton,
                                    ETA = c.ETA,
                                    ETD = c.ETD,
                                    ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                    ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                    CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                    TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                    Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                    StatusOfContainerName = c.SYS_Var.ValueOfVar,
                                    LocationFromCode = c.CAT_Location.Code,
                                    LocationToCode = c.CAT_Location1.Code
                                }).FirstOrDefault();
                                if (objDouble != null && objDouble.OrderID != result.ListContainer.FirstOrDefault().OrderID)
                                {
                                    result.ListContainer.Add(objDouble);
                                }
                            }
                        }
                    }
                    else
                    {
                        result.ID = mID;
                        result.Code = "";
                        result.ETD = new DateTime();
                        result.ETA = new DateTime();
                        result.VehicleID = 0;
                        result.VehicleNo = "";
                        result.RomoocID = 0;
                        result.RomoocNo = "";
                        result.DriverName = "";
                        result.Status = 0;
                        result.DriverTel = "";
                        result.ListContainer = model.OPS_COTOContainer.Where(c => c.ID == conID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.ID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            Ton = c.OPS_Container.Ton,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationToCode = c.CAT_Location1.Code
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_Trip OPSCO_TimeLine_DataContainerLocal_ByTOMasterID(int mID)
        {
            try
            {
                DTOOPSCO_MAP_Trip result = new DTOOPSCO_MAP_Trip();
                using (var model = new DataEntities())
                {
                    if (mID > 0)
                    {
                        var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                        if (obj != null)
                        {
                            result.ListContainer = model.OPS_COTOContainer.Where(c => c.COTOMasterID == obj.ID && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel
                                && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad && c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal).Select(c => new DTOOPSCO_MAP_Container
                            {
                                ID = c.ID,
                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                Ton = c.OPS_Container.Ton,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                                ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                                CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                                TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                                Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                                LocationFromCode = c.CAT_Location.Code,
                                LocationToCode = c.CAT_Location1.Code
                            }).ToList();
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_TimeLine_OrderToTOMaster_List(string request, int typeofserviceorder)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iLo = -(int)SYSVarType.ServiceOfOrderLocal;
                    int iIm = -(int)SYSVarType.ServiceOfOrderImport;
                    int iEx = -(int)SYSVarType.ServiceOfOrderExport;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var query = model.OPS_COTOContainer.Where(c => c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                        && (!isAdmin ? Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true) && c.COTOMasterID == null && !c.IsSplit 
                        && (typeofserviceorder == 1 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == iLo : (c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == iEx || c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == iIm)) 
                        && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad
                        && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.LocationFromID > 0 && c.LocationToID > 0)
                        .Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.OPS_Container.ContainerID,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            ContainerID = c.OPS_Container.ContainerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                            ETA = c.OPS_Container.ORD_Container.ETA,
                            ETD = c.OPS_Container.ORD_Container.ETD,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            LocationFromAddress = c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.Address,
                            LocationFromCode = c.OPS_Container.ORD_Container.CUS_Location2.Code,
                            LocationToCode = c.OPS_Container.ORD_Container.CUS_Location3.Code,
                            LocationToAddress = c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.Address,
                            LocationFromID = c.OPS_Container.ORD_Container.LocationFromID.Value,
                            LocationToID = c.OPS_Container.ORD_Container.LocationToID.Value,
                            UserDefined1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1 ?? string.Empty,
                            UserDefined2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2 ?? string.Empty,
                            UserDefined3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3 ?? string.Empty,
                            UserDefined4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4 ?? string.Empty,
                            UserDefined5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5 ?? string.Empty,
                            UserDefined6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6 ?? string.Empty,
                            Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                            Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                            Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_TimeLine_Order_OwnerPlanning_Update(List<int> data, bool value)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    if (value == true)
                    {
                        foreach (var con in data)
                        {
                            foreach (var o in model.OPS_COTOContainer.Where(c => c.OPSContainerID == con).ToList())
                            {
                                if (o.COTOMasterID.HasValue && o.OPS_COTOMaster.VendorOfVehicleID != Account.SYSCustomerID && o.OPS_COTOMaster.VendorOfVehicleID != null)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + o.OPS_Container.ORD_Container.ORD_Order.Code + " đã lập chuyến. Không thể cập nhật!");
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.IsOwnerPlanning = true;
                            }
                        }
                        model.SaveChanges();
                    }
                    else
                    {
                        foreach (var con in data)
                        {
                            foreach (var o in model.OPS_COTOContainer.Where(c => c.OPSContainerID == con).ToList())
                            {
                                if (o.COTOMasterID.HasValue && (o.OPS_COTOMaster.VendorOfVehicleID == Account.SYSCustomerID || o.OPS_COTOMaster.VendorOfVehicleID == null))
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + o.OPS_Container.ORD_Container.ORD_Order.Code + " đã lập chuyến. Không thể cập nhật!");
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.IsOwnerPlanning = null;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_TimeLine_Vehicle> OPSCO_TimeLine_Vehicle_OnMap_List()
        {
            try
            {
                List<DTOOPSCO_TimeLine_Vehicle> result = new List<DTOOPSCO_TimeLine_Vehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Vehicle.Where(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID > 2).Select(c => new DTOOPSCO_TimeLine_Vehicle
                    {
                        ID = c.ID,
                        VehicleID =  c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VehicleMaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                        TypeOfGroupID = 1,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng
                    }).ToList();
                    result.AddRange(model.CUS_Romooc.Where(c => c.CustomerID == Account.SYSCustomerID && c.RomoocID > 1).Select(c => new DTOOPSCO_TimeLine_Vehicle
                    {
                        ID = c.ID,
                        VehicleID = c.RomoocID,
                        VehicleNo = c.CAT_Romooc.RegNo,
                        VehicleMaxWeight = c.CAT_Romooc.MaxWeight ?? 0,
                        TypeOfGroupID = 2,                           
                        Lat = c.CAT_Romooc.Lat,
                        Lng = c.CAT_Romooc.Lng
                    }).ToList());
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        
        public DTOResult OPSCO_TimeLine_OrderFilter_List(string request, DateTime fDate, DateTime tDate)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    fDate = fDate.Date;
                    tDate = tDate.Date.AddDays(1);
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var query = model.OPS_COTOContainer.Where(c => c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                        && (!isAdmin ? Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) : true)
                        && c.COTOMasterID.HasValue && (fDate != null && tDate != null ? c.ETD >= fDate && c.ETD < tDate : true) && c.ParentID == null
                        && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.LocationFromID > 0 && c.LocationToID > 0
                        && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad
                        ).Select(c => new DTOOPSCO_MAP_Container
                        {
                            ID = c.OPS_Container.ContainerID,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            ContainerID = c.OPS_Container.ContainerID,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerShortName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                            ETA = c.OPS_Container.ORD_Container.ETA,
                            ETD = c.OPS_Container.ORD_Container.ETD,
                            TOETD = c.OPS_Container.ORD_Container.ETDOld,
                            TOETA = c.OPS_Container.ORD_Container.ETAOld,
                            DateGetEmpty = c.OPS_Container.ORD_Container.DateGetEmpty,
                            DateReturnEmpty = c.OPS_Container.ORD_Container.DateReturnEmpty,
                            ETDRequest = c.OPS_Container.ORD_Container.ETDRequest,
                            ETARequest = c.OPS_Container.ORD_Container.ETARequest,
                            OrderID = c.OPS_Container.ORD_Container.OrderID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            LocationFromAddress = c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.Address,
                            LocationFromCode = c.OPS_Container.ORD_Container.CUS_Location2.Code,
                            LocationToCode = c.OPS_Container.ORD_Container.CUS_Location3.Code,
                            LocationToAddress = c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.Address,
                            LocationFromID = c.OPS_Container.ORD_Container.LocationFromID.Value,
                            LocationToID = c.OPS_Container.ORD_Container.LocationToID.Value,
                            GroupSort = c.OPS_Container.ORD_Container.GroupSort,
                            ServiceType = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                            Qty = c.OPS_Container.ORD_Container.CAT_Packing.NoOfDelivery == 1 ? 2 : 1,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            TripNo = c.OPS_Container.ORD_Container.VesselMasterCode ?? string.Empty,
                            ShipNo = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.Code : string.Empty,
                            ShipName = c.OPS_Container.ORD_Container.VesselID > 0 ? c.OPS_Container.ORD_Container.CAT_Vessel.VesselName : string.Empty,
                            UserDefined1 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine1 ?? string.Empty,
                            UserDefined2 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine2 ?? string.Empty,
                            UserDefined3 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine3 ?? string.Empty,
                            UserDefined4 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine4 ?? string.Empty,
                            UserDefined5 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine5 ?? string.Empty,
                            UserDefined6 = c.OPS_Container.ORD_Container.ORD_Order.UserDefine6 ?? string.Empty,
                            Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                            Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                            Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSCO_MAP_Container>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCUSLocation> OPSCO_TimeLine_ORDLocation_OnMap_List(int conID)
        {
            try
            {
                List<DTOCUSLocation> result = new List<DTOCUSLocation>();
                using (var model = new DataEntities())
                {
                    var obj = model.ORD_Container.FirstOrDefault(c => c.ID == conID);
                    if (obj != null)
                    {
                        if (obj.LocationDepotID.HasValue)
                        {
                            result.Add(new DTOCUSLocation
                            {
                                ID = obj.CUS_Location.LocationID,
                                Location = obj.CUS_Location.LocationName,
                                Lat = obj.CUS_Location.CAT_Location.Lat,
                                Lng = obj.CUS_Location.CAT_Location.Lng,
                                Address = obj.CUS_Location.CAT_Location.Address,
                                Code = obj.CUS_Location.Code,
                                GroupOfLocationID = obj.CUS_Location.CusPartID.HasValue ? obj.CUS_Location.CUS_Partner.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier ? 1 : 2 : 3
                            });
                        }
                        if (obj.LocationFromID.HasValue)
                        {
                            result.Add(new DTOCUSLocation
                            {
                                ID = obj.CUS_Location2.LocationID,
                                Location = obj.CUS_Location2.LocationName,
                                Lat = obj.CUS_Location2.CAT_Location.Lat,
                                Lng = obj.CUS_Location2.CAT_Location.Lng,
                                Address = obj.CUS_Location2.CAT_Location.Address,
                                Code = obj.CUS_Location2.Code,
                                GroupOfLocationID = obj.CUS_Location2.CusPartID.HasValue ? obj.CUS_Location2.CUS_Partner.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier ? 1 : 2 : 3
                            });
                        }
                        if (obj.LocationToID.HasValue)
                        {
                            result.Add(new DTOCUSLocation
                            {
                                ID = obj.CUS_Location3.LocationID,
                                Location = obj.CUS_Location3.LocationName,
                                Lat = obj.CUS_Location3.CAT_Location.Lat,
                                Lng = obj.CUS_Location3.CAT_Location.Lng,
                                Address = obj.CUS_Location3.CAT_Location.Address,
                                Code = obj.CUS_Location3.Code,
                                GroupOfLocationID = obj.CUS_Location3.CusPartID.HasValue ? obj.CUS_Location3.CUS_Partner.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier ? 1 : 2 : 3
                            });
                        }
                        if (obj.LocationDepotReturnID.HasValue)
                        {
                            result.Add(new DTOCUSLocation
                            {
                                ID = obj.CUS_Location1.LocationID,
                                Location = obj.CUS_Location1.LocationName,
                                Lat = obj.CUS_Location1.CAT_Location.Lat,
                                Lng = obj.CUS_Location1.CAT_Location.Lng,
                                Address = obj.CUS_Location1.CAT_Location.Address,
                                Code = obj.CUS_Location1.Code,
                                GroupOfLocationID = obj.CUS_Location1.CusPartID.HasValue ? obj.CUS_Location1.CUS_Partner.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier ? 1 : 2 : 3
                            });
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        
        public DTOOPSCO_MAP_Schedule_Data OPSCO_TimeLine_Vehicle_Schedule_Data(int typeofvehicle)
        {
            try
            {
                DTOOPSCO_MAP_Schedule_Data result = new DTOOPSCO_MAP_Schedule_Data();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    if (typeofvehicle == 1)
                    {
                        result.Resources = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.VehicleID,
                            Text = c.CAT_Vehicle.RegNo
                        }).ToList();
                        result.DataSources = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 2 && c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_Map_Schedule_Event
                        {
                            ID = c.ReferID,
                            EndDate = c.DateToActual,
                            StartDate = c.DateFromActual,
                            Title = c.ReferID.ToString(),
                            TypeOfEvent = c.StatusOfAssetTimeSheetID,
                            VehicleID = c.FLM_Asset.VehicleID.Value
                        }).ToList();
                        foreach (var item in result.DataSources)
                        {
                            if (item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster)
                                item.TypeOfEvent = 1;
                            else
                                item.TypeOfEvent = 2;
                        }
                    }
                    else
                    {
                        result.Resources = model.CUS_Romooc.Where(c => c.RomoocID > 1 && c.CustomerID == Account.SYSCustomerID).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.RomoocID,
                            Text = c.CAT_Romooc.RegNo
                        }).ToList();
                        result.DataSources = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID > 1).Select(c => new DTOOPSCO_Map_Schedule_Event
                        {
                            ID = c.ReferID,
                            EndDate = c.DateToActual,
                            StartDate = c.DateFromActual,
                            Title = c.ReferID.ToString(),
                            TypeOfEvent = c.StatusOfAssetTimeSheetID,
                            VehicleID = c.FLM_Asset.RomoocID.Value
                        }).ToList();
                        foreach (var item in result.DataSources)
                        {
                            if (item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster || item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMasterEmpty || item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMasterInStock ||item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMasterLaden)
                                item.TypeOfEvent = 1;
                            else
                                item.TypeOfEvent = 2;
                        }
                    }                   
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        #endregion

        #region NewDI - Map

        public DTOResult OPSDI_MAP_Order_List(string request, int typeOfOrder, DateTime? fDate, DateTime? tDate, List<int> dataCus)
        {
            try
            {
                var result = new DTOResult();
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                using (var model = new DataEntities())
                {
                    if (fDate.HasValue)
                        fDate = fDate.Value.Date;
                    if (tDate.HasValue)
                        tDate = tDate.Value.Date.AddDays(1);
                    var objRequest = CreateRequest(request);
                    if (objRequest.Sorts == null || objRequest.Sorts.Count == 0)
                    {
                        var objSort = new SortDescriptor("GroupSort", System.ComponentModel.ListSortDirection.Ascending);
                        objRequest.Sorts.Add(objSort);
                    }
                    var objSetting = OPS_SystemSetting_Get(model);
                    DateTime dtWarning = DateTime.Now;
                    if (objSetting != null)
                        dtWarning = objSetting.TimeDelayWarning > 0 ? DateTime.Now.AddHours(objSetting.TimeDelayWarning) : DateTime.Now;
                    if (typeOfOrder == 1) //LTL
                    {
                        var query = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OrderGroupProductID > 0
                            && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && (dataCus.Count > 0 ? dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) : true) : dataCus.Count > 0 ? dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) : true)
                            && c.ORD_GroupProduct.LocationFromID > 0 && c.ORD_GroupProduct.LocationToID > 0 && c.DITOMasterID == null && c.IsInput == true
                            && (fDate != null && tDate != null ? c.ORD_GroupProduct.ETD >= fDate && c.ORD_GroupProduct.ETD < tDate : true) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel
                            && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL).Select(c => new DTOOPSDI_MAP_GroupProduct
                            {
                                ID = c.ID,
                                CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                                TOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                                TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,
                                IsFTL = false,
                                IsSplit = c.IsSplit,
                                OrderGroupProductID = c.OrderGroupProductID.Value,
                                ETA = c.ORD_GroupProduct.ETA,
                                ETD = c.ORD_GroupProduct.ETD,
                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                TransportModeName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,
                                TempMin = c.ORD_GroupProduct.TempMin,
                                TempMax = c.ORD_GroupProduct.TempMax,
                                DistributorCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                                DistributorName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                                GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                ProductCode = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code,
                                ProductName = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName,
                                LocationFromID = c.ORD_GroupProduct.LocationFromID.Value,
                                LocationToID = c.ORD_GroupProduct.LocationToID.Value,
                                LocationFromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                                LocationFromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,
                                LocationFromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                LocationToCode = c.ORD_GroupProduct.CUS_Location1.Code,
                                LocationToName = c.ORD_GroupProduct.CUS_Location1.LocationName,
                                LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                SOCode = c.ORD_GroupProduct.SOCode,
                                DNCode = c.DNCode,
                                UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                                UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,
                                CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                                CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                                CUSRoutingNote = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Note : string.Empty,
                                GroupSort = c.GroupSort
                            }).Distinct().ToDataSourceResult(objRequest);
                        result.Data = query.Data as IEnumerable<DTOOPSDI_MAP_GroupProduct>;
                        result.Total = query.Total;

                        foreach (DTOOPSDI_MAP_GroupProduct item in result.Data)
                        {
                            var objPacking = model.ORD_Product.Where(c => c.GroupProductID == item.OrderGroupProductID).FirstOrDefault();
                            if (objPacking != null)
                            {
                                switch (objPacking.CAT_Packing.TypeOfPackageID)
                                {
                                    case -(int)SYSVarType.TypeOfPackingGOPTon:
                                        item.PackingType = 1;
                                        break;
                                    case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                        item.PackingType = 2;
                                        break;
                                    case -(int)SYSVarType.TypeOfPackingGOPTU:
                                        item.PackingType = 3;
                                        break;
                                }
                            }
                            if (item.IsSplit)
                            {
                                if (model.OPS_DITOGroupProduct.Count(c => c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OrderGroupProductID == item.OrderGroupProductID && c.DITOMasterID == null && c.ID != item.ID) == 0)
                                    item.IsSplit = false;
                            }

                            item.ListLocation = new List<DTOCUSLocation>();
                            int?[] sID = { item.LocationFromID, item.LocationToID };
                            var data = new List<int?>(sID);
                            var dataLocation = model.CUS_Location.Where(c => data.Contains(c.ID)).Select(c => new DTOCUSLocation
                            {
                                ID = c.ID,
                                LocationID = c.LocationID,
                                LocationName = c.LocationName,
                                Code = c.Code,
                                Address = c.CAT_Location.Address,
                                Lat = c.CAT_Location.Lat,
                                Lng = c.CAT_Location.Lng
                            }).ToList();
                            if (dataLocation.Count > 0)
                            {
                                foreach (var obj in data)
                                {
                                    var oL = dataLocation.FirstOrDefault(c => c.ID == obj);
                                    if (oL != null)
                                    {
                                        item.ListLocation.Add(oL);
                                    }
                                }
                            }

                            if (objSetting.WarningETD)
                            {
                                if (item.ETD.HasValue && item.ETD < dtWarning)
                                {
                                    if (item.ETD < DateTime.Now)
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = DateTime.Now.Subtract(item.ETD.Value).TotalHours;
                                        item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                    else
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = item.ETD.Value.Subtract(DateTime.Now).TotalHours;
                                        item.WarningMsg = "Còn " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        var query = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OrderGroupProductID > 0
                             && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && (dataCus.Count > 0 ? dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) : true) : dataCus.Count > 0 ? dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) : true)
                             && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.ORD_GroupProduct.LocationFromID > 0 && c.ORD_GroupProduct.LocationToID > 0 && c.IsInput == true
                             && (fDate != null && tDate != null ? c.ORD_GroupProduct.ETD >= fDate && c.ORD_GroupProduct.ETD < tDate : true) && c.DITOMasterID > 0 && c.OPS_DITOMaster.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL
                             && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL && c.OPS_DITOMaster.StatusOfDITOMasterID < -(int)SYSVarType.StatusOfDITOMasterApproved).Select(c => new DTOOPSDI_MAP_GroupProduct
                             {
                                 ID = c.ID,
                                 CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                                 CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                 CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                                 TOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                                 TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,
                                 TOETA = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ETA : null,
                                 TOETD = c.DITOMasterID > 0 ? c.OPS_DITOMaster.ETD : null,
                                 IsFTL = true,
                                 OrderGroupProductID = c.OrderGroupProductID.Value,
                                 ETA = c.ORD_GroupProduct.ETA,
                                 ETD = c.ORD_GroupProduct.ETD,
                                 OrderID = c.ORD_GroupProduct.OrderID,
                                 OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                 TransportModeName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                 Ton = c.Ton,
                                 CBM = c.CBM,
                                 Quantity = c.Quantity,
                                 TempMin = c.ORD_GroupProduct.TempMin,
                                 TempMax = c.ORD_GroupProduct.TempMax,
                                 DistributorCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                                 DistributorName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                                 GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                 GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                 ProductCode = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code,
                                 ProductName = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName,
                                 LocationToID = c.ORD_GroupProduct.LocationToID.Value,
                                 LocationFromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                 LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                                 LocationFromDistrict = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_District.DistrictName,
                                 LocationFromProvince = c.ORD_GroupProduct.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                                 LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                                 LocationToCode = c.ORD_GroupProduct.CUS_Location1.Code,
                                 LocationToName = c.ORD_GroupProduct.CUS_Location1.LocationName,
                                 LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                 LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                 LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                 UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                                 UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,
                                 SOCode = c.ORD_GroupProduct.SOCode,
                                 DNCode = c.DNCode,
                                 CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                                 CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                                 CUSRoutingNote = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.CAT_Routing.Note : string.Empty,
                                 GroupSort = c.GroupSort
                             }).Distinct().ToDataSourceResult(objRequest);
                        result.Data = query.Data as IEnumerable<DTOOPSDI_MAP_GroupProduct>;
                        result.Total = query.Total;

                        foreach (DTOOPSDI_MAP_GroupProduct item in result.Data)
                        {
                            item.ListLocation = new List<DTOCUSLocation>();
                            int?[] sID = { item.LocationFromID, item.LocationToID };
                            var data = new List<int?>(sID);
                            var dataLocation = model.CUS_Location.Where(c => data.Contains(c.ID)).Select(c => new DTOCUSLocation
                            {
                                ID = c.ID,
                                LocationID = c.LocationID,
                                LocationName = c.LocationName,
                                Code = c.Code,
                                Address = c.CAT_Location.Address,
                                Lat = c.CAT_Location.Lat,
                                Lng = c.CAT_Location.Lng
                            }).ToList();
                            if (dataLocation.Count > 0)
                            {
                                foreach (var obj in data)
                                {
                                    var oL = dataLocation.FirstOrDefault(c => c.ID == obj);
                                    if (oL != null)
                                    {
                                        item.ListLocation.Add(oL);
                                    }
                                }
                            }
                            if (objSetting.WarningETD)
                            {
                                if (item.ETD.HasValue && item.ETD < dtWarning)
                                {
                                    if (item.ETD < DateTime.Now)
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = DateTime.Now.Subtract(item.ETD.Value).TotalHours;
                                        item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                    else
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = item.ETD.Value.Subtract(DateTime.Now).TotalHours;
                                        item.WarningMsg = "Còn " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSDI_MAP_Vehicle_List(string request, DateTime now)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Asset.Where(c => c.VehicleID > 2 && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_MAP_Vehicle
                    {
                        ID = c.VehicleID.Value,
                        Regno = c.CAT_Vehicle.RegNo,
                        DriverName = c.CAT_Vehicle.DriverName,
                        MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID ?? -1,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID > 0 ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                        Lat = c.CAT_Vehicle.Lat.HasValue ? c.CAT_Vehicle.Lat : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lat : null,
                        Lng = c.CAT_Vehicle.Lng.HasValue ? c.CAT_Vehicle.Lng : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lng : null,
                        LocationName = c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Location : string.Empty
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSDI_MAP_Vehicle>;
                    foreach (DTOOPSDI_MAP_Vehicle item in result.Data)
                    {
                        item.CurrentTrip = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == item.ID
                            && c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterApproved && ((c.ATD <= now && c.ATA == null) || (c.ETA > now && c.ETD <= now))).Select(c => new DTOOPSDI_MAP_Trip
                            {
                                ID = c.ID,
                                Code = c.Code,
                                DriverName = c.DriverName1,
                                VehicleNo = item.Regno,
                                VehicleID = c.VehicleID ?? -1,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                ATA = c.ATA,
                                VendorOfVehicleID = c.VendorOfVehicleID,
                                VendorCode = c.VendorOfVehicleID > 0 ? c.CUS_Customer.Code : "Xe nhà",
                                ATD = c.ATD,
                                LocationFromCode = c.OPS_DITOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationFromAddress = c.OPS_DITOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Address,
                                LocationToCode = c.OPS_DITOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationToAddress = c.OPS_DITOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Address,
                            }).OrderBy(c => c.ATD).ThenBy(c => c.ETD).FirstOrDefault();
                        if (item.CurrentTrip != null)
                            item.StatusOfVehicleName = "Bận";
                        item.NextTrip = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID == item.ID
                            && c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterApproved && c.ETD >= now).Select(c => new DTOOPSDI_MAP_Trip
                            {
                                ID = c.ID,
                                Code = c.Code,
                                DriverName = c.DriverName1,
                                VehicleNo = item.Regno,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                ATA = c.ATA,
                                ATD = c.ATD,
                                VendorOfVehicleID = c.VendorOfVehicleID,
                                VendorCode = c.VendorOfVehicleID > 0 ? c.CUS_Customer.Code : "Xe nhà",
                                LocationFromCode = c.OPS_DITOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationFromAddress = c.OPS_DITOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && o.LocationID > 0).OrderBy(o => o.SortOrder).FirstOrDefault().CAT_Location.Address,
                                LocationToCode = c.OPS_DITOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Code,
                                LocationToAddress = c.OPS_DITOLocation.Where(o => o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && o.LocationID > 0).OrderByDescending(o => c.SortOrder).FirstOrDefault().CAT_Location.Address,
                            }).OrderBy(c => c.ETD).FirstOrDefault();
                        var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == item.ID
                            && !((c.DateFromActual < now && c.DateToActual < now))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                        if (objV != null)
                            item.StatusOfVehicleName = "Bận";
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSDI_MAP_VehicleVendor_List(string request, int vendorID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorID < 1)
                    {
                        var query = model.FLM_Asset.Where(c => c.VehicleID > 2 && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_MAP_Vehicle
                        {
                            ID = c.VehicleID.Value,
                            Regno = c.CAT_Vehicle.RegNo,
                            DriverName = c.CAT_Vehicle.DriverName,
                            GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID ?? -1,
                            GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID > 0 ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                            MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOOPSDI_MAP_Vehicle>;
                    }
                    else
                    {
                        var query = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID == vendorID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_MAP_Vehicle
                        {
                            ID = c.VehicleID,
                            Regno = c.CAT_Vehicle.RegNo,
                            MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOOPSDI_MAP_Vehicle>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSDI_MAP_TOMaster_List(string request, bool isApproved, bool isTendered, DateTime? fDate, DateTime? tDate)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (fDate.HasValue)
                        fDate = fDate.Value.Date;
                    if (tDate.HasValue)
                        tDate = tDate.Value.Date.AddDays(1);

                    int iGet = -(int)SYSVarType.TypeOfTOLocationGet;
                    int iDel = -(int)SYSVarType.TypeOfTOLocationDelivery;

                    int fSTT = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    int tSTT = -(int)SYSVarType.StatusOfDITOMasterTendered;
                    if (!isTendered)
                        tSTT = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    if (!isApproved)
                        fSTT = -(int)SYSVarType.StatusOfDITOMasterTendered;

                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var data = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OrderGroupProductID > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_DITOMaster.StatusOfDITOMasterID >= fSTT && c.OPS_DITOMaster.StatusOfDITOMasterID <= tSTT && c.OPS_DITOMaster.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterSendTender
                        && (isAdmin ? true : Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)) && (fDate != null && tDate != null ? c.OPS_DITOMaster.ETD >= fDate && c.OPS_DITOMaster.ETD < tDate : true)).Select(c => new
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID.Value,
                            Code = c.OPS_DITOMaster.Code,
                            DriverName = c.OPS_DITOMaster.DriverName1,
                            DriverTel = c.OPS_DITOMaster.DriverTel1,
                            VendorOfVehicleID = c.OPS_DITOMaster.VendorOfVehicleID,
                            VehicleNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 && c.OPS_DITOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà",
                            Status = c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : 2,
                            ETA = c.OPS_DITOMaster.ETA,
                            ETD = c.OPS_DITOMaster.ETD,
                            ATA = c.OPS_DITOMaster.ATA,
                            ATD = c.OPS_DITOMaster.ATD,
                            Ton = c.Ton,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            LocationFromCode = c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet && o.LocationID > 0) != null ? c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet).CAT_Location.Code : string.Empty,
                            LocationFromAddress = c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet && o.LocationID > 0) != null ? c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet).CAT_Location.Address : string.Empty,
                            LocationToCode = c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel && o.LocationID > 0) != null ? c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel).CAT_Location.Code : string.Empty,
                            LocationToAddress = c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel && o.LocationID > 0) != null ? c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel).CAT_Location.Address : string.Empty,
                        }).ToList();

                    var copy = new CopyHelper();
                    var temp = new List<DTOOPSDI_MAP_Trip>();
                    foreach (var item in data.GroupBy(c => c.TOMasterID).ToList())
                    {
                        DTOOPSDI_MAP_Trip obj = new DTOOPSDI_MAP_Trip();
                        var oTmp = item.FirstOrDefault();
                        copy.Copy(oTmp, obj);
                        obj.ETD = oTmp.ETD;
                        obj.ETA = oTmp.ETA;
                        obj.ID = item.Key;
                        obj.ListOrderCode = string.Join(",", item.Select(c => c.OrderCode).Distinct().ToList());
                        obj.ListCustomer = string.Join(",", item.Select(c => c.CustomerCode).Distinct().ToList());
                        obj.TotalTon = item.Sum(c => c.Ton);
                        temp.Add(obj);
                    }
                    var req = temp.ToDataSourceResult(CreateRequest(request));
                    result.Total = req.Total;
                    result.Data = req.Data as IEnumerable<DTOOPSDI_MAP_Trip>;
                    foreach (DTOOPSDI_MAP_Trip item in result.Data)
                    {
                        item.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == item.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_MAP_GroupProduct
                        {
                            ID = c.ID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            ProductCode = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty,
                            ETA = c.ORD_GroupProduct.ETA,
                            ETD = c.ORD_GroupProduct.ETD,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            LocationFromCode = c.ORD_GroupProduct.CUS_Location.CAT_Location.Code,
                            LocationToCode = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Code,
                            LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address
                        }).Distinct().ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSDI_MAP_TOMaster_GroupProduct_List(string request, int mID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == mID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_MAP_GroupProduct
                    {
                        ID = c.ID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                        GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        ProductCode = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty,
                        ETA = c.ORD_GroupProduct.ETA,
                        ETD = c.ORD_GroupProduct.ETD,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,
                        SOCode = c.ORD_GroupProduct.SOCode,
                        DNCode = c.DNCode,
                        LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                        LocationFromCode = c.ORD_GroupProduct.CUS_Location.CAT_Location.Code,
                        LocationToCode = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Code,
                        LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDI_MAP_GroupProduct>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDI_MAP_Trip OPSDI_MAP_TripByID(int masterID)
        {
            try
            {
                DTOOPSDI_MAP_Trip result = new DTOOPSDI_MAP_Trip();
                using (var model = new DataEntities())
                {
                    if (masterID > 0)
                    {
                        var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.Code = obj.Code;
                            result.ETD = obj.ETD;
                            result.ETA = obj.ETA;
                            result.VehicleID = obj.VehicleID ?? 0;
                            result.VehicleNo = obj.VehicleID > 0 ? obj.CAT_Vehicle.RegNo : string.Empty;
                            result.DriverName = obj.DriverName1;
                            result.DriverTel = obj.DriverTel1;
                            result.VendorOfVehicleID = obj.VendorOfVehicleID > 0 && obj.VendorOfVehicleID != Account.SYSCustomerID ? obj.VendorOfVehicleID : null;
                            result.TotalTon = obj.OPS_DITOGroupProduct.Sum(c => c.Ton);
                            result.TotalCBM = obj.OPS_DITOGroupProduct.Sum(c => c.CBM);
                            result.VendorCode = obj.VendorOfVehicleID > 0 ? obj.CUS_Customer.Code : "Xe nhà";
                            result.Status = obj.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : 2;

                            var sID = -1;
                            var objS = obj.OPS_DITOLocation.Where(c => c.LocationID > 0 && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty).OrderBy(c => c.SortOrder).FirstOrDefault();
                            if (objS != null)
                            {
                                sID = objS.ID;
                                result.LocationStartID = objS.LocationID.Value;
                                result.LocationStartName = objS.CAT_Location.Location;
                                result.LocationStartLat = objS.CAT_Location.Lat;
                                result.LocationStartLng = objS.CAT_Location.Lng;
                            }
                            var objE = obj.OPS_DITOLocation.Where(c => c.LocationID > 0 && c.ID != sID && c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                            if (objE != null)
                            {
                                result.LocationEndID = objE.LocationID.Value;
                                result.LocationEndName = objE.CAT_Location.Location;
                                result.LocationEndLat = objE.CAT_Location.Lat;
                                result.LocationEndLng = objE.CAT_Location.Lng;
                            }
                            result.ListLocation = obj.OPS_DITOLocation.Where(c => c.LocationID > 0 && c.TypeOfTOLocationID != -(int)SYSVarType.TypeOfTOLocationEmpty).Select(c => new DTOOPSDITOLocation
                            {
                                ID = c.ID,
                                SortOrder = c.SortOrder,
                                TypeOfTOLocationID = c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery ? 2 : 1,
                                LocationID = c.LocationID.Value,
                                LocationName = c.CAT_Location.Location,
                                Lat = c.CAT_Location.Lat,
                                Lng = c.CAT_Location.Lng
                            }).OrderBy(c => c.SortOrder).ToList();
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSDI_MAP_Trip> OPSDI_MAP_TripByVehicle_List(DateTime now, int vehicleID, int total)
        {
            try
            {
                List<DTOOPSDI_MAP_Trip> result = new List<DTOOPSDI_MAP_Trip>();
                using (var model = new DataEntities())
                {
                    if (vehicleID > 0)
                    {
                        var data = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.ETD >= now || c.ETA >= now) && c.VehicleID == vehicleID
                           && c.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterCancel && c.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterReceived).Select(c => new DTOOPSDI_MAP_Trip
                            {
                                ID = c.ID,
                                Code = c.Code,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                VendorOfVehicleID = c.VendorOfVehicleID,
                                VendorCode = c.VendorOfVehicleID > 0 ? c.CUS_Customer.Code : "Xe nhà",
                                DriverName = c.DriverName1,
                                VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                                Status = c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered ? 2 : 1
                            }).OrderBy(c => c.ETD).ToList();
                        if (total > 0)
                        {
                            result = data.Take(total).ToList();
                        }
                        else
                        {
                            result = data;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCO_MAP_VehicleAvailable OPSDI_MAP_CheckVehicleAvailable(int masterID, int vehicleID, DateTime ETD, DateTime ETA, double Ton)
        {
            try
            {
                DTOOPSCO_MAP_VehicleAvailable result = new DTOOPSCO_MAP_VehicleAvailable();
                using (var model = new DataEntities())
                {
                    var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == vehicleID
                        && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.ReferID != masterID
                        && !((c.DateFromActual < ETD && c.DateToActual < ETD) || (c.DateFromActual > ETA && c.DateToActual > ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                    if (objV == null)
                    {
                        objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                            && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.FLM_Asset.VehicleID == vehicleID
                            && !((c.DateFromActual < ETD && c.DateToActual < ETD) || (c.DateFromActual > ETA && c.DateToActual > ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                        if (objV == null)
                            result.IsVehicleAvailable = true;
                    }

                    if (masterID > 0)
                    {
                        Ton = 0;
                        var dataGop = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == masterID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => c.Ton).ToList();
                        if (dataGop.Count > 0)
                        {
                            Ton = dataGop.Sum();
                        }
                    }
                    var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehicleID);
                    if (obj != null)
                    {
                        if (obj.MaxWeight.HasValue && obj.MaxWeight < Ton)
                        {
                            result.IsOverWeight = true;
                            result.IsVehicleAvailable = false;
                        }
                        var objPlanning = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == obj.ID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain
                            && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA)));
                        if (objPlanning != null)
                        {
                            result.DriverName = objPlanning.FLM_Driver.CAT_Driver.LastName + " " + objPlanning.FLM_Driver.CAT_Driver.FirstName;
                            result.DriverTel = objPlanning.FLM_Driver.CAT_Driver.Cellphone;
                        }
                        else
                        {
                            if (OPS_FindFLMDriver(model, obj.DriverName) > 0)
                            {
                                result.DriverName = obj.DriverName;
                                result.DriverTel = obj.DriverID > 0 ? obj.FLM_Driver.CAT_Driver.Cellphone : string.Empty;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDI_MAP_Schedule_Data OPSDI_MAP_Schedule_Data(List<int> dataVehicle)
        {
            try
            {
                DTOOPSDI_MAP_Schedule_Data result = new DTOOPSDI_MAP_Schedule_Data();
                using (var model = new DataEntities())
                {
                    const int iEmt = -(int)SYSVarType.TypeOfTOLocationEmpty;
                    const int iGet = -(int)SYSVarType.TypeOfTOLocationGet;
                    const int iDel = -(int)SYSVarType.TypeOfTOLocationDelivery;
                    int fSTT = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    int tSTT = -(int)SYSVarType.StatusOfDITOMasterTendered;

                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    result.ListVehicle = model.FLM_Asset.Where(c => c.VehicleID > 2 && (dataVehicle.Count > 0 ? dataVehicle.Contains(c.VehicleID.Value) : true) && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_MAP_Vehicle
                    {
                        ID = c.VehicleID.Value,
                        Regno = c.CAT_Vehicle.RegNo,
                        DriverName = c.CAT_Vehicle.DriverName,
                        MaxWeight = c.CAT_Vehicle.MaxWeightCal ?? 0,
                        GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID ?? -1,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID > 0 ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty,
                        Lat = c.CAT_Vehicle.Lat.HasValue ? c.CAT_Vehicle.Lat : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lat : null,
                        Lng = c.CAT_Vehicle.Lng.HasValue ? c.CAT_Vehicle.Lng : c.CAT_Vehicle.LocationID.HasValue ? c.CAT_Vehicle.CAT_Location.Lng : null
                    }).ToList();

                    var data = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OrderGroupProductID > 0 && c.OPS_DITOMaster.VehicleID.HasValue && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && (dataVehicle.Count > 0 ? dataVehicle.Contains(c.OPS_DITOMaster.VehicleID.Value) : true)
                        && c.OPS_DITOMaster.StatusOfDITOMasterID >= fSTT && c.OPS_DITOMaster.StatusOfDITOMasterID <= tSTT && c.OPS_DITOMaster.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterSendTender
                        && (isAdmin ? true : Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID))).Select(c => new
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID.Value,
                            Code = c.OPS_DITOMaster.Code,
                            DriverName = c.OPS_DITOMaster.DriverName1,
                            DriverTel = c.OPS_DITOMaster.DriverTel1,
                            VendorOfVehicleID = c.OPS_DITOMaster.VendorOfVehicleID,
                            VehicleID = c.OPS_DITOMaster.VehicleID ?? -1,
                            VehicleNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 && c.OPS_DITOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà",
                            Status = c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : 2,
                            ETA = c.OPS_DITOMaster.ETA,
                            ETD = c.OPS_DITOMaster.ETD,
                            ATA = c.OPS_DITOMaster.ATA,
                            ATD = c.OPS_DITOMaster.ATD,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            Ton = c.Ton,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                            LocationFromCode = c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet && o.LocationID > 0) != null ? c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet).CAT_Location.Code : string.Empty,
                            LocationFromAddress = c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet && o.LocationID > 0) != null ? c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iGet).CAT_Location.Address : string.Empty,
                            LocationToCode = c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel && o.LocationID > 0) != null ? c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel).CAT_Location.Code : string.Empty,
                            LocationToAddress = c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel && o.LocationID > 0) != null ? c.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(o => o.TypeOfTOLocationID == iDel).CAT_Location.Address : string.Empty,
                        }).ToList();
                    var copy = new CopyHelper();
                    result.ListTrip = new List<DTOOPSDI_MAP_Trip>();
                    foreach (var item in data.GroupBy(c => c.TOMasterID).ToList())
                    {
                        DTOOPSDI_MAP_Trip obj = new DTOOPSDI_MAP_Trip();
                        var oTmp = item.FirstOrDefault();
                        copy.Copy(oTmp, obj);
                        obj.ETD = oTmp.ETD;
                        obj.ETA = oTmp.ETA;
                        obj.ID = item.Key;
                        obj.VendorOfVehicleID = obj.VendorOfVehicleID > 0 && obj.VendorOfVehicleID != Account.SYSCustomerID ? obj.VendorOfVehicleID : null;
                        obj.ListOrderCode = string.Join(",", item.Select(c => c.OrderCode).Distinct().ToList());
                        obj.ListCustomer = string.Join(",", item.Select(c => c.CustomerCode).Distinct().ToList());
                        obj.TotalTon = item.Sum(c => c.Ton);
                        result.ListTrip.Add(obj);
                    }
                    foreach (DTOOPSDI_MAP_Trip item in result.ListTrip)
                    {
                        var sID = -1;
                        var objS = model.OPS_DITOLocation.Where(c => c.DITOMasterID == item.ID && c.LocationID > 0 && c.TypeOfTOLocationID == iEmt).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objS != null)
                        {
                            sID = objS.ID;
                            item.LocationStartID = objS.LocationID.Value;
                            item.LocationStartName = objS.CAT_Location.Location;
                            item.LocationStartLat = objS.CAT_Location.Lat;
                            item.LocationStartLng = objS.CAT_Location.Lng;
                        }
                        var objE = model.OPS_DITOLocation.Where(c => c.DITOMasterID == item.ID && c.LocationID > 0 && c.ID != sID && c.TypeOfTOLocationID == iEmt).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                        if (objE != null)
                        {
                            item.LocationEndID = objE.LocationID.Value;
                            item.LocationEndName = objE.CAT_Location.Location;
                            item.LocationEndLat = objE.CAT_Location.Lat;
                            item.LocationEndLng = objE.CAT_Location.Lng;
                        }
                        item.ListLocation = model.OPS_DITOLocation.Where(c => c.DITOMasterID == item.ID && c.TypeOfTOLocationID != -(int)SYSVarType.TypeOfTOLocationEmpty).Select(c => new DTOOPSDITOLocation
                        {
                            ID = c.ID,
                            LocationID = c.LocationID.Value,
                            SortOrder = c.SortOrder,
                            DITOMasterID = c.DITOMasterID,
                            LocationAddress = c.CAT_Location.Address,
                            LocationName = c.CAT_Location.Location,
                            TypeOfTOLocationID = c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery ? 2 : 1,
                            Lat = c.CAT_Location.Lat,
                            Lng = c.CAT_Location.Lng,
                            DateComeEstimate = c.DateComeEstimate
                        }).OrderBy(c => c.SortOrder).ToList();

                        item.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == item.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_MAP_GroupProduct
                        {
                            ID = c.ID,
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                            TOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                            TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            ETA = c.ORD_GroupProduct.ETA,
                            ETD = c.ORD_GroupProduct.ETD,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            TransportModeName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            TempMin = c.ORD_GroupProduct.TempMin,
                            TempMax = c.ORD_GroupProduct.TempMax,
                            GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            ProductCode = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code,
                            ProductName = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName,
                            LocationFromID = c.ORD_GroupProduct.LocationFromID.Value,
                            LocationToID = c.ORD_GroupProduct.LocationToID.Value,
                            LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                            LocationFromCode = c.ORD_GroupProduct.CUS_Location.Code,
                            LocationToCode = c.ORD_GroupProduct.CUS_Location1.Code,
                            LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address
                        }).Distinct().ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSDI_MAP_GroupProduct> OPSDI_MAP_GroupByTrip_List(int tID)
        {
            try
            {
                List<DTOOPSDI_MAP_GroupProduct> result = new List<DTOOPSDI_MAP_GroupProduct>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == tID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OrderGroupProductID > 0).Select(c => new DTOOPSDI_MAP_GroupProduct
                    {
                        ID = c.ID,
                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerShortName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                        TOMasterID = 1,
                        TOMasterCode = string.Empty,
                        IsFTL = true,
                        OrderGroupProductID = c.OrderGroupProductID.Value,
                        ETA = c.ORD_GroupProduct.ETA,
                        ETD = c.ORD_GroupProduct.ETD,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        TransportModeName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,
                        DNCode = c.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,
                        TempMin = c.ORD_GroupProduct.TempMin,
                        TempMax = c.ORD_GroupProduct.TempMax,
                        GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        ProductCode = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code,
                        ProductName = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName,
                        LocationFromID = c.ORD_GroupProduct.LocationFromID.Value,
                        LocationToID = c.ORD_GroupProduct.LocationToID.Value,
                        LocationFromAddress = c.ORD_GroupProduct.CUS_Location.CAT_Location.Address,
                        LocationFromCode = c.ORD_GroupProduct.CUS_Location.Code,
                        LocationToCode = c.ORD_GroupProduct.CUS_Location1.Code,
                        LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address
                    }).Distinct().ToList();
                    foreach (var item in result)
                    {
                        var objPacking = model.ORD_Product.Where(c => c.GroupProductID == item.OrderGroupProductID).FirstOrDefault();
                        if (objPacking != null)
                        {
                            item.ExchangeTon = objPacking.ExchangeTon ?? 0;
                            item.ExchangeCBM = objPacking.ExchangeCBM ?? 0;
                            item.ExchangeQuantity = objPacking.ExchangeQuantity ?? 0;
                            switch (objPacking.CAT_Packing.TypeOfPackageID)
                            {
                                case -(int)SYSVarType.TypeOfPackingGOPTon:
                                    item.PackingType = 1;
                                    break;
                                case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                    item.PackingType = 2;
                                    break;
                                case -(int)SYSVarType.TypeOfPackingGOPTU:
                                    item.PackingType = 3;
                                    break;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int OPSDI_MAP_Save(DTOOPSDI_MAP_Trip item)
        {
            try
            {
                int result = -1;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item.ETA == null || item.ETD == null)
                        throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA");
                    if (item.ETD >= item.ETA)
                        throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA");
                    if (item.VendorOfVehicleID == null || item.VendorOfVehicleID < 1 || item.VendorOfVehicleID == Account.SYSCustomerID)
                    {
                        var cDriver = OPS_FindFLMDriver(model, item.DriverName);
                        if (cDriver == null || cDriver < 1)
                            throw FaultHelper.BusinessFault(null, null, "Tài xế không tồn tại.");
                    }

                    //Nếu ID > 0 => Chuyến FTL.
                    var objSetting = OPS_SystemSetting_Get(model);
                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        OPS_CheckingTime(model, objSetting, obj.ID, item.VehicleID, null, item.ETD, item.ETA, false);
                        var objVeh = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                        if (objVeh == null)
                            throw FaultHelper.BusinessFault(null, null, "Xe không tồn tại!");
                        obj.VehicleID = item.VehicleID;
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.VendorOfVehicleID = null;
                        if (item.VendorOfVehicleID > 0)
                            obj.VendorOfVehicleID = item.VendorOfVehicleID;
                        obj.ETA = item.ETA;
                        obj.ETD = item.ETD;
                        obj.DriverTel1 = item.DriverTel;
                        obj.DriverName1 = item.DriverName;
                        obj.DriverID1 = OPS_FindFLMDriver(model, obj.DriverName1);
                        obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                        obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;

                        Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();
                        foreach (var o in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID).ToList())
                        {
                            model.OPS_DITOLocation.Remove(o);
                        }

                        var SDATA = new List<int>();
                        var dataGop = new List<DTOOPSDITOGroupProduct>();
                        var dataLocation = new List<DTOOPSDITOLocation>();
                        List<int> dataLocationFrom = new List<int>();
                        List<int> dataLocationTo = new List<int>();

                        int idx = 1;
                        OPS_DITOLocation oLocation = new OPS_DITOLocation();
                        oLocation.LocationID = item.LocationStartID;
                        oLocation.OPS_DITOMaster = obj;
                        oLocation.CreatedBy = Account.UserName;
                        oLocation.CreatedDate = DateTime.Now;
                        oLocation.DateComeEstimate = obj.ETD;
                        oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                        var oLs = new DTOOPSDITOLocation();
                        oLs.LocationID = oLocation.LocationID.Value;
                        oLs.DateComeEstimate = oLocation.DateComeEstimate;
                        if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                        {
                            oLocation.SortOrder = idx++;
                            model.OPS_DITOLocation.Add(oLocation);
                            dataLocation.Add(oLs);
                        }

                        foreach (var objGop in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList())
                        {
                            var objG = new DTOOPSDITOGroupProduct();
                            objG.CATLocationToID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;
                            objG.CATLocationFromID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                            objG.Ton = objGop.Ton;
                            dataGop.Add(objG);

                            SDATA.Add(objGop.ORD_GroupProduct.OrderID);

                            var fID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                            var tID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;

                            dataLocationFrom.Add(fID);
                            if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;
                            else if (dicLocationTime[fID] > objGop.ORD_GroupProduct.ETD)
                                dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;

                            dataLocationTo.Add(tID);
                            if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                            else if (dicLocationTime[tID] > objGop.ORD_GroupProduct.ETA)
                                dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                        }

                        var tmpID = -1;
                        var dataL = dataLocationFrom.Distinct().ToList();
                        dataL.AddRange(dataLocationTo.Distinct().ToList());
                        dataL = dataL.Distinct().ToList();
                        for (var i = 0; i < dataL.Count; i++)
                        {
                            tmpID = dataL[i];
                            if (i == 0 && tmpID == oLocation.LocationID && (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID))
                            {
                                if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(dataL[i]))
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                            }
                            else
                            {
                                //Create DITOLocation
                                OPS_DITOLocation oL = new OPS_DITOLocation();
                                oL.CreatedBy = Account.UserName;
                                oL.CreatedDate = DateTime.Now;
                                model.OPS_DITOLocation.Add(oL);
                                oL.OPS_DITOMaster = obj;
                                oL.LocationID = tmpID;
                                oL.SortOrder = idx++;
                                oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                                if (dicLocationTime.ContainsKey(tmpID))
                                    oL.DateComeEstimate = dicLocationTime[tmpID];

                                if (dataLocationFrom.Contains(tmpID) && dataLocationTo.Contains(tmpID))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(tmpID))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                                var oLsx = new DTOOPSDITOLocation();
                                oLsx.LocationID = oL.LocationID.Value;
                                oLsx.DateComeEstimate = oL.DateComeEstimate;
                                dataLocation.Add(oLsx);
                            }
                        }

                        if (tmpID != item.LocationEndID)
                        {
                            OPS_DITOLocation osLocation = new OPS_DITOLocation();
                            osLocation.LocationID = item.LocationEndID;
                            osLocation.OPS_DITOMaster = obj;
                            osLocation.CreatedBy = Account.UserName;
                            osLocation.CreatedDate = DateTime.Now;
                            osLocation.DateComeEstimate = obj.ETA;
                            osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                            var oLse = new DTOOPSDITOLocation();
                            oLse.LocationID = osLocation.LocationID.Value;
                            oLse.DateComeEstimate = osLocation.DateComeEstimate;

                            if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                            {
                                osLocation.SortOrder = idx++;
                                model.OPS_DITOLocation.Add(osLocation);
                                dataLocation.Add(oLse);
                            }
                        }

                        obj.TotalLocation = idx - 1;

                        if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                            OPSDI_CheckLocationRequired(model, objSetting, dataGop, dataLocation, obj.VehicleID.Value);

                        model.SaveChanges();

                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster, null);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                    else
                    {
                        obj = new OPS_DITOMaster();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Code = "";
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.RateTime = 0;
                        obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                        obj.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;

                        obj.VehicleID = item.VehicleID;
                        obj.VendorOfVehicleID = null;
                        if (item.VendorOfVehicleID > 0)
                            obj.VendorOfVehicleID = item.VendorOfVehicleID;
                        obj.ETA = item.ETA;
                        obj.ETD = item.ETD;
                        obj.DriverTel1 = item.DriverTel;
                        obj.DriverName1 = item.DriverName;
                        obj.DriverID1 = OPS_FindFLMDriver(model, obj.DriverName1);
                        obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                        obj.SortOrder = 1;
                        obj.TransportModeID = -(int)SYSVarType.TransportModeLTL;

                        OPS_CheckingTime(model, objSetting, obj.ID, item.VehicleID, null, item.ETD, item.ETA, false);
                        model.OPS_DITOMaster.Add(obj);

                        int idx = 1;
                        OPS_DITOLocation oLocation = new OPS_DITOLocation();
                        oLocation.LocationID = item.LocationStartID;
                        oLocation.OPS_DITOMaster = obj;
                        oLocation.CreatedBy = Account.UserName;
                        oLocation.CreatedDate = DateTime.Now;
                        oLocation.DateComeEstimate = obj.ETD;
                        oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                        List<int> dataLocationFrom = new List<int>();
                        List<int> dataLocationTo = new List<int>();
                        Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();

                        var SDATA = new List<int>();
                        var dataGop = new List<DTOOPSDITOGroupProduct>();
                        var dataLocation = new List<DTOOPSDITOLocation>();

                        var oLs = new DTOOPSDITOLocation();
                        oLs.LocationID = oLocation.LocationID.Value;
                        oLs.DateComeEstimate = oLocation.DateComeEstimate;
                        if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                        {
                            oLocation.SortOrder = idx++;
                            model.OPS_DITOLocation.Add(oLocation);
                            dataLocation.Add(oLs);
                        }

                        foreach (var gop in item.ListOPSGOP)
                        {
                            var objGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gop);
                            if (objGop != null)
                            {
                                var objG = new DTOOPSDITOGroupProduct();
                                objG.CATLocationToID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;
                                objG.CATLocationFromID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                                objG.Ton = objGop.Ton;
                                dataGop.Add(objG);

                                SDATA.Add(objGop.ORD_GroupProduct.OrderID);

                                objGop.ModifiedBy = Account.UserName;
                                objGop.ModifiedDate = DateTime.Now;
                                objGop.OPS_DITOMaster = obj;

                                var fID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                                var tID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;

                                dataLocationFrom.Add(fID);
                                if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                    dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;
                                else if (dicLocationTime[fID] > objGop.ORD_GroupProduct.ETD)
                                    dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;

                                dataLocationTo.Add(tID);
                                if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                    dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                                else if (dicLocationTime[tID] > objGop.ORD_GroupProduct.ETA)
                                    dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                            }
                        }

                        var tmpID = -1;
                        var dataL = dataLocationFrom.Distinct().ToList();
                        dataL.AddRange(dataLocationTo.Distinct().ToList());
                        dataL = dataL.Distinct().ToList();
                        for (var i = 0; i < dataL.Count; i++)
                        {
                            tmpID = dataL[i];
                            if (i == 0 && tmpID == oLocation.LocationID && (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID))
                            {
                                if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(dataL[i]))
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                            }
                            else
                            {
                                //Create DITOLocation
                                OPS_DITOLocation oL = new OPS_DITOLocation();
                                oL.CreatedBy = Account.UserName;
                                oL.CreatedDate = DateTime.Now;
                                model.OPS_DITOLocation.Add(oL);
                                oL.OPS_DITOMaster = obj;
                                oL.LocationID = dataL[i];
                                oL.SortOrder = idx++;
                                oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                                if (dicLocationTime.ContainsKey(dataL[i]))
                                    oL.DateComeEstimate = dicLocationTime[dataL[i]];

                                if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                                var oLsx = new DTOOPSDITOLocation();
                                oLsx.LocationID = oL.LocationID.Value;
                                oLsx.DateComeEstimate = oL.DateComeEstimate;
                                dataLocation.Add(oLsx);
                            }
                        }
                        if (tmpID != item.LocationEndID)
                        {
                            OPS_DITOLocation osLocation = new OPS_DITOLocation();
                            osLocation.LocationID = item.LocationEndID;
                            osLocation.OPS_DITOMaster = obj;
                            osLocation.CreatedBy = Account.UserName;
                            osLocation.CreatedDate = DateTime.Now;
                            osLocation.DateComeEstimate = obj.ETA;
                            osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                            var oLse = new DTOOPSDITOLocation();
                            oLse.LocationID = osLocation.LocationID.Value;
                            oLse.DateComeEstimate = osLocation.DateComeEstimate;

                            if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                            {
                                osLocation.SortOrder = idx++;
                                model.OPS_DITOLocation.Add(osLocation);
                                dataLocation.Add(oLse);
                            }
                        }

                        obj.TotalLocation = idx - 1;

                        if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                            OPSDI_CheckLocationRequired(model, objSetting, dataGop, dataLocation, obj.VehicleID.Value);

                        model.SaveChanges();
                        obj.Code = DICodePrefix + obj.ID.ToString(DICodeNum);
                        model.SaveChanges();
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster, null);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                    result = obj.ID;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_Map_Update(DTOOPSDI_MAP_Trip item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item.ETA == null || item.ETD == null)
                        throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA");
                    if (item.VendorOfVehicleID == null && (item.LocationStartID < 1 || item.LocationEndID < 1))
                        throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin điểm bắt đầu/kết thúc");
                    if (item.ETD >= item.ETA)
                        throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA");
                    if (item.VendorOfVehicleID == null || item.VendorOfVehicleID < 1 || item.VendorOfVehicleID == Account.SYSCustomerID)
                    {
                        var cDriver = OPS_FindFLMDriver(model, item.DriverName);
                        if (cDriver == null || cDriver < 1)
                            throw FaultHelper.BusinessFault(null, null, "Tài xế không tồn tại.");
                    }

                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        var objSetting = OPS_SystemSetting_Get(model);
                        OPS_CheckingTime(model, objSetting, obj.ID, item.VehicleID, null, item.ETD, item.ETA, false);

                        obj.VehicleID = item.VehicleID;
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.VendorOfVehicleID = null;
                        if (item.VendorOfVehicleID > 0)
                            obj.VendorOfVehicleID = item.VendorOfVehicleID;
                        obj.ETA = item.ETA;
                        obj.ETD = item.ETD;
                        obj.DriverTel1 = item.DriverTel;
                        obj.DriverName1 = item.DriverName;
                        obj.DriverID1 = OPS_FindFLMDriver(model, obj.DriverName1);
                        obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;

                        Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();
                        foreach (var o in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID).ToList())
                        {
                            model.OPS_DITOLocation.Remove(o);
                        }

                        int idx = 1;
                        OPS_DITOLocation oLocation = new OPS_DITOLocation();
                        oLocation.LocationID = item.LocationStartID;
                        oLocation.OPS_DITOMaster = obj;
                        oLocation.CreatedBy = Account.UserName;
                        oLocation.CreatedDate = DateTime.Now;
                        oLocation.DateComeEstimate = obj.ETD;
                        oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                        var SDATA = new List<int>();
                        var dataGop = new List<DTOOPSDITOGroupProduct>();
                        var dataLocation = new List<DTOOPSDITOLocation>();
                        List<int> dataLocationFrom = new List<int>();
                        List<int> dataLocationTo = new List<int>();

                        var oLs = new DTOOPSDITOLocation();
                        oLs.LocationID = oLocation.LocationID.Value;
                        oLs.DateComeEstimate = oLocation.DateComeEstimate;
                        if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                        {
                            oLocation.SortOrder = idx++;
                            model.OPS_DITOLocation.Add(oLocation);
                            dataLocation.Add(oLs);
                        }

                        var dataOPSGroup = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OrderGroupProductID > 0).ToList();
                        foreach (var objGop in dataOPSGroup)
                        {
                            var objG = new DTOOPSDITOGroupProduct();
                            objG.CATLocationToID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;
                            objG.CATLocationFromID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                            objG.Ton = objGop.Ton;
                            dataGop.Add(objG);

                            SDATA.Add(objGop.ORD_GroupProduct.OrderID);

                            objGop.ModifiedBy = Account.UserName;
                            objGop.ModifiedDate = DateTime.Now;
                            objGop.OPS_DITOMaster = obj;

                            var fID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                            var tID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;

                            dataLocationFrom.Add(fID);
                            if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;
                            else if (dicLocationTime[fID] > objGop.ORD_GroupProduct.ETD)
                                dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;

                            dataLocationTo.Add(tID);
                            if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                            else if (dicLocationTime[tID] > objGop.ORD_GroupProduct.ETA)
                                dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                        }

                        var tmpID = -1;
                        var dataL = dataLocationFrom.Distinct().ToList();
                        dataL.AddRange(dataLocationTo.Distinct().ToList());
                        dataL = dataL.Distinct().ToList();
                        for (var i = 0; i < dataL.Count; i++)
                        {
                            tmpID = dataL[i];
                            if (i == 0 && tmpID == oLocation.LocationID && (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID))
                            {
                                if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(dataL[i]))
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                            }
                            else
                            {
                                //Create DITOLocation
                                OPS_DITOLocation oL = new OPS_DITOLocation();
                                oL.CreatedBy = Account.UserName;
                                oL.CreatedDate = DateTime.Now;
                                model.OPS_DITOLocation.Add(oL);
                                oL.OPS_DITOMaster = obj;
                                oL.LocationID = dataL[i];
                                oL.SortOrder = idx++;
                                oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                                if (dicLocationTime.ContainsKey(dataL[i]))
                                    oL.DateComeEstimate = dicLocationTime[dataL[i]];

                                if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                                var oLsx = new DTOOPSDITOLocation();
                                oLsx.LocationID = oL.LocationID.Value;
                                oLsx.DateComeEstimate = oL.DateComeEstimate;
                                dataLocation.Add(oLsx);
                            }
                        }

                        if (tmpID != item.LocationEndID)
                        {
                            OPS_DITOLocation osLocation = new OPS_DITOLocation();
                            osLocation.LocationID = item.LocationEndID;
                            osLocation.OPS_DITOMaster = obj;
                            osLocation.CreatedBy = Account.UserName;
                            osLocation.CreatedDate = DateTime.Now;
                            osLocation.DateComeEstimate = obj.ETA;
                            osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                            var oLse = new DTOOPSDITOLocation();
                            oLse.LocationID = osLocation.LocationID.Value;
                            oLse.DateComeEstimate = osLocation.DateComeEstimate;

                            if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                            {
                                osLocation.SortOrder = idx++;
                                model.OPS_DITOLocation.Add(osLocation);
                                dataLocation.Add(oLse);
                            }
                        }

                        obj.TotalLocation = idx - 1;

                        if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                            OPSDI_CheckLocationRequired(model, objSetting, dataGop, dataLocation, obj.VehicleID.Value);

                        model.SaveChanges();
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster, null);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_ToMON(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.OPS_DI_ToMON(model, data, Account);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_ToOPS(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    OPS_DI_ToOPS(model, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_Cancel(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var sData = new List<int>();
                    foreach (var obj in model.OPS_DITOGroupProduct.Where(c => data.Contains(c.ID)).ToList())
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusCancel;
                        sData.Add(obj.ORD_GroupProduct.OrderID);
                    }
                    model.SaveChanges();
                    HelperStatus.ORDOrder_Status(model, Account, sData);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_UpdateAndToMON(int mID, string tDriverName, string tDriverTel)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        if (obj.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved)
                        {
                            if (obj.ETA == null || obj.ETD == null)
                                throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA");
                            if (obj.VehicleID == null && obj.VehicleID <= 2)
                                throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Chưa chọn xe.");
                            if (obj.ETD >= obj.ETA)
                                throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA");
                            if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID < 1 || obj.VendorOfVehicleID == Account.SYSCustomerID)
                            {
                                var cDriver = OPS_FindFLMDriver(model, tDriverName);
                                if (cDriver == null || cDriver < 1)
                                    throw FaultHelper.BusinessFault(null, null, "Tài xế không tồn tại.");
                            }

                            //Cập nhật thông tin
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.DriverName1 = tDriverName;
                            obj.DriverTel1 = tDriverTel;
                            obj.DriverID1 = OPS_FindFLMDriver(model, tDriverName);
                            model.SaveChanges();

                            //Gửi giám sát
                            HelperTOMaster.OPS_DI_ToMON(model, new List<int>(new int[] { obj.ID }), Account);
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không thể duyệt! Chỉ được duyệt các chuyến đang lập kế hoạch.");
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_ToVendor(DTOOPSDI_MAP_Trip item, List<DTODIAppointmentRouteTender> dataRate)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (dataRate.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Không có thông tin đối tác.");
                    if (item.ETD >= item.ETA)
                        throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA");

                    //Nếu ID > 0 => Chuyến FTL.
                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.DriverName1 = string.Empty;
                        obj.DriverTel1 = string.Empty;
                        obj.VendorOfVehicleID = null;
                        obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterSendTender;
                        obj.VehicleID = null;
                        obj.DriverID1 = null;
                        obj.ETA = item.ETA;
                        obj.ETD = item.ETD;
                        obj.RateTime = 2;
                        model.SaveChanges();

                        var now = DateTime.Now.AddMinutes(1);
                        foreach (var v in dataRate.OrderBy(c => c.SortOrder))
                        {
                            OPS_DITORate objRate = new OPS_DITORate();
                            objRate.CreatedBy = Account.UserName;
                            objRate.CreatedDate = DateTime.Now;
                            objRate.DITOMasterID = obj.ID;
                            objRate.IsManual = v.IsManual;
                            objRate.VendorID = v.VendorID;
                            objRate.Debit = v.Debit;
                            objRate.SortOrder = v.SortOrder;
                            objRate.FirstRateTime = now;
                            objRate.LastRateTime = objRate.FirstRateTime.Value.Add(TimeSpan.FromHours(v.RateTime));
                            now = objRate.LastRateTime.Value;

                            model.OPS_DITORate.Add(objRate);
                        }
                        model.SaveChanges();

                        var SDATA = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);

                        //Gửi mail cho Vendor đầu tiên.
                        var fRate = model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID && c.IsSend == false).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (fRate != null)
                        {
                            List<int> rID = new List<int>();
                            rID.Add(fRate.ID);
                            Truck_SendMailToVendor(rID, fRate.VendorID.Value, Account.SYSCustomerID);
                        }
                    }
                    else
                    {
                        obj = new OPS_DITOMaster();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Code = "";
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.RateTime = 0;
                        obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterSendTender;
                        obj.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;

                        obj.VendorOfVehicleID = null;
                        obj.ETA = item.ETA;
                        obj.ETD = item.ETD;
                        obj.SortOrder = 1;
                        obj.TransportModeID = -(int)SYSVarType.TransportModeLTL;

                        model.OPS_DITOMaster.Add(obj);

                        List<int> dataLocationFrom = new List<int>();
                        List<int> dataLocationTo = new List<int>();
                        Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();

                        var SDATA = new List<int>();
                        foreach (var gop in item.ListOPSGOP)
                        {
                            var objGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gop);
                            if (objGop != null)
                            {
                                SDATA.Add(objGop.ORD_GroupProduct.OrderID);

                                objGop.ModifiedBy = Account.UserName;
                                objGop.ModifiedDate = DateTime.Now;
                                objGop.OPS_DITOMaster = obj;

                                var fID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                                var tID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;

                                dataLocationFrom.Add(fID);
                                if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                    dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;
                                else if (dicLocationTime[fID] > objGop.ORD_GroupProduct.ETD)
                                    dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;

                                dataLocationTo.Add(tID);
                                if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                    dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                                else if (dicLocationTime[tID] > objGop.ORD_GroupProduct.ETA)
                                    dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                            }
                        }

                        int idx = 1;
                        var dataL = dataLocationFrom.Distinct().ToList();
                        dataL.AddRange(dataLocationTo.Distinct().ToList());
                        dataL = dataL.Distinct().ToList();
                        for (var i = 0; i < dataL.Count; i++)
                        {
                            //Create DITOLocation
                            OPS_DITOLocation oL = new OPS_DITOLocation();
                            oL.CreatedBy = Account.UserName;
                            oL.CreatedDate = DateTime.Now;
                            model.OPS_DITOLocation.Add(oL);
                            oL.OPS_DITOMaster = obj;
                            oL.LocationID = dataL[i];
                            oL.SortOrder = idx++;
                            oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                            if (dicLocationTime.ContainsKey(dataL[i]))
                                oL.DateComeEstimate = dicLocationTime[dataL[i]];

                            if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                            else if (dataLocationFrom.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            else
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                        }
                        obj.TotalLocation = idx;

                        model.SaveChanges();
                        obj.Code = DICodePrefix + obj.ID.ToString(DICodeNum);
                        model.SaveChanges();

                        HelperStatus.ORDOrder_Status(model, Account, SDATA);

                        var now = DateTime.Now.AddMinutes(1);
                        foreach (var v in dataRate.OrderBy(c => c.SortOrder))
                        {
                            OPS_DITORate objRate = new OPS_DITORate();
                            objRate.CreatedBy = Account.UserName;
                            objRate.CreatedDate = DateTime.Now;
                            objRate.DITOMasterID = obj.ID;
                            objRate.IsManual = v.IsManual;
                            objRate.VendorID = v.VendorID;
                            objRate.Debit = v.Debit;
                            objRate.SortOrder = v.SortOrder;
                            objRate.FirstRateTime = now;
                            objRate.LastRateTime = objRate.FirstRateTime.Value.Add(TimeSpan.FromHours(v.RateTime));
                            now = objRate.LastRateTime.Value;

                            model.OPS_DITORate.Add(objRate);
                        }
                        model.SaveChanges();

                        //Gửi mail cho Vendor đầu tiên.
                        var fRate = model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID && c.IsSend == false).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (fRate != null)
                        {
                            List<int> rID = new List<int>();
                            rID.Add(fRate.ID);
                            Truck_SendMailToVendor(rID, fRate.VendorID.Value, Account.SYSCustomerID);
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_Delete(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    OPS_DI_Delete(model, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_GroupProduct_Split(int gopID, int total, double value, int packingType)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gopID && c.OrderGroupProductID > 0);
                    if (obj != null)
                    {
                        if (obj.DITOMasterID > 0)
                        {
                            obj.OPS_DITOMaster.ModifiedBy = Account.UserName;
                            obj.OPS_DITOMaster.ModifiedDate = DateTime.Now;
                        }

                        obj.IsSplit = true;
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        var objNew = new OPS_DITOGroupProduct();
                        objNew.CreatedBy = Account.UserName;
                        objNew.CreatedDate = DateTime.Now;

                        objNew.IsSplit = true;
                        objNew.Note = obj.Note;
                        objNew.Note1 = obj.Note1;
                        objNew.Note2 = obj.Note2;
                        objNew.DNCode = obj.DNCode;
                        objNew.IsInput = obj.IsInput;
                        objNew.IsOrigin = obj.IsOrigin;
                        objNew.GroupSort = obj.GroupSort;
                        objNew.OrderGroupProductID = obj.OrderGroupProductID;
                        objNew.DITOGroupProductStatusID = obj.DITOGroupProductStatusID;
                        objNew.DITOGroupProductStatusPODID = obj.DITOGroupProductStatusPODID;
                        objNew.TypeOfDITOGroupProductReturnID = obj.TypeOfDITOGroupProductReturnID;

                        if (total > 0)
                        {
                            switch (total)
                            {
                                case 2: //Chia 2                                    
                                    objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(obj.Ton / 2, NoDigit, MidpointRounding.AwayFromZero);
                                    objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(obj.CBM / 2, NoDigit, MidpointRounding.AwayFromZero);
                                    objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(obj.Quantity / 2, NoDigit, MidpointRounding.AwayFromZero);

                                    obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                    obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                    obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                    model.OPS_DITOGroupProduct.Add(objNew);

                                    foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                                    {
                                        var itemNew = new OPS_DITOProduct();
                                        itemNew.CreatedBy = Account.UserName;
                                        itemNew.CreatedDate = DateTime.Now;
                                        itemNew.Note = item.Note;
                                        itemNew.OrderProductID = item.OrderProductID;
                                        itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(item.Quantity / 2, NoDigit, MidpointRounding.AwayFromZero);

                                        item.ModifiedBy = Account.UserName;
                                        item.ModifiedDate = DateTime.Now;
                                        item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(item.Quantity - itemNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                        objNew.OPS_DITOProduct.Add(itemNew);
                                    }

                                    model.SaveChanges();
                                    break;
                                case 3: //Chia 3
                                    objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(obj.Ton / 3, NoDigit, MidpointRounding.AwayFromZero);
                                    objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(obj.CBM / 3, NoDigit, MidpointRounding.AwayFromZero);
                                    objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(obj.Quantity / 3, NoDigit, MidpointRounding.AwayFromZero);

                                    var copy = new CopyHelper();
                                    var objNew1 = new OPS_DITOGroupProduct();
                                    copy.Copy(objNew, objNew1);

                                    model.OPS_DITOGroupProduct.Add(objNew);
                                    model.OPS_DITOGroupProduct.Add(objNew1);

                                    obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton * 2, NoDigit, MidpointRounding.AwayFromZero);
                                    obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM * 2, NoDigit, MidpointRounding.AwayFromZero);
                                    obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity * 2, NoDigit, MidpointRounding.AwayFromZero);

                                    foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                                    {
                                        var itemNew = new OPS_DITOProduct();
                                        itemNew.CreatedBy = Account.UserName;
                                        itemNew.CreatedDate = DateTime.Now;
                                        itemNew.Note = item.Note;
                                        itemNew.OrderProductID = item.OrderProductID;
                                        itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(item.Quantity / 3, NoDigit, MidpointRounding.AwayFromZero);

                                        var itemNew1 = new OPS_DITOProduct();
                                        copy.Copy(itemNew, itemNew1);

                                        item.ModifiedBy = Account.UserName;
                                        item.ModifiedDate = DateTime.Now;
                                        item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(item.Quantity - itemNew.Quantity * 2, NoDigit, MidpointRounding.AwayFromZero);

                                        objNew.OPS_DITOProduct.Add(itemNew);
                                        objNew1.OPS_DITOProduct.Add(itemNew1);
                                    }

                                    model.SaveChanges();
                                    break;
                            }
                        }
                        else
                        {
                            #region Tính theo ProductPacking
                            //var exTon = obj.ORD_GroupProduct.ORD_Product.FirstOrDefault().ExchangeTon ?? 0;
                            //var exCBM = obj.ORD_GroupProduct.ORD_Product.FirstOrDefault().ExchangeCBM ?? 0;
                            //var exQuanity = obj.ORD_GroupProduct.ORD_Product.FirstOrDefault().ExchangeQuantity ?? 0;
                            //var pID = obj.ORD_GroupProduct.ORD_Product.FirstOrDefault().CAT_Packing.TypeOfPackageID;

                            //switch (pID)
                            //{
                            //    case -(int)SYSVarType.TypeOfPackingGOPTon:
                            //        if (obj.Ton > value)
                            //        {
                            //            objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(obj.Ton - value, NoDigit, MidpointRounding.AwayFromZero);
                            //            objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(objNew.Ton * exCBM, NoDigit, MidpointRounding.AwayFromZero);
                            //            objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(objNew.Ton * exQuanity, NoDigit, MidpointRounding.AwayFromZero);

                            //            obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);
                            //            obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);
                            //            obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                            //            foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                            //            {
                            //                var itemNew = new OPS_DITOProduct();
                            //                itemNew.CreatedBy = Account.UserName;
                            //                itemNew.CreatedDate = DateTime.Now;
                            //                itemNew.Note = item.Note;
                            //                itemNew.OrderProductID = item.OrderProductID;
                            //                itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);

                            //                item.ModifiedBy = Account.UserName;
                            //                item.ModifiedDate = DateTime.Now;
                            //                item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(obj.Ton, NoDigit, MidpointRounding.AwayFromZero);

                            //                objNew.OPS_DITOProduct.Add(itemNew);
                            //            }
                            //        }
                            //        break;
                            //    case -(int)SYSVarType.TypeOfPackingGOPCBM:
                            //        if (obj.CBM > value)
                            //        {
                            //            objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(obj.CBM - value, NoDigit, MidpointRounding.AwayFromZero);
                            //            objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(objNew.CBM + exTon, NoDigit, MidpointRounding.AwayFromZero);
                            //            objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(objNew.CBM * exQuanity, NoDigit, MidpointRounding.AwayFromZero);

                            //            obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);
                            //            obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);
                            //            obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                            //            foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                            //            {
                            //                var itemNew = new OPS_DITOProduct();
                            //                itemNew.CreatedBy = Account.UserName;
                            //                itemNew.CreatedDate = DateTime.Now;
                            //                itemNew.Note = item.Note;
                            //                itemNew.OrderProductID = item.OrderProductID;
                            //                itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);

                            //                item.ModifiedBy = Account.UserName;
                            //                item.ModifiedDate = DateTime.Now;
                            //                item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(obj.CBM, NoDigit, MidpointRounding.AwayFromZero);

                            //                objNew.OPS_DITOProduct.Add(itemNew);
                            //            }
                            //        }
                            //        break;
                            //    case -(int)SYSVarType.TypeOfPackingGOPTU:
                            //        if (obj.Quantity > value)
                            //        {
                            //            objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(obj.Quantity - value, NoDigit, MidpointRounding.AwayFromZero);
                            //            objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(objNew.Quantity * exTon, NoDigit, MidpointRounding.AwayFromZero);
                            //            objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(objNew.Quantity * exCBM, NoDigit, MidpointRounding.AwayFromZero);

                            //            obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);
                            //            obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);
                            //            obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                            //            foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                            //            {
                            //                var itemNew = new OPS_DITOProduct();
                            //                itemNew.CreatedBy = Account.UserName;
                            //                itemNew.CreatedDate = DateTime.Now;
                            //                itemNew.Note = item.Note;
                            //                itemNew.OrderProductID = item.OrderProductID;
                            //                itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                            //                item.ModifiedBy = Account.UserName;
                            //                item.ModifiedDate = DateTime.Now;
                            //                item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(obj.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                            //                objNew.OPS_DITOProduct.Add(itemNew);
                            //            }
                            //        }
                            //        break;
                            //}
                            #endregion

                            #region Tính theo tỉ lệ
                            double exVal = 1;
                            switch (packingType)
                            {
                                case 1:
                                    exVal -= (double)value / obj.Ton;
                                    if (obj.Ton > value)
                                    {
                                        objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(obj.Ton - value, NoDigit, MidpointRounding.AwayFromZero);
                                        objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(obj.CBM * exVal, NoDigit, MidpointRounding.AwayFromZero);
                                        objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(obj.Quantity * exVal, NoDigit, MidpointRounding.AwayFromZero);

                                        obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                        obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                        obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                        foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                                        {
                                            var itemNew = new OPS_DITOProduct();
                                            itemNew.CreatedBy = Account.UserName;
                                            itemNew.CreatedDate = DateTime.Now;
                                            itemNew.Note = item.Note;
                                            itemNew.OrderProductID = item.OrderProductID;
                                            itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);

                                            item.ModifiedBy = Account.UserName;
                                            item.ModifiedDate = DateTime.Now;
                                            item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(obj.Ton, NoDigit, MidpointRounding.AwayFromZero);

                                            objNew.OPS_DITOProduct.Add(itemNew);
                                        }
                                    }
                                    break;
                                case 2:
                                    exVal -= (double)value / obj.CBM;
                                    if (obj.CBM > value)
                                    {
                                        objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(obj.CBM - value, NoDigit, MidpointRounding.AwayFromZero);
                                        objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(obj.Ton * exVal, NoDigit, MidpointRounding.AwayFromZero);
                                        objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(obj.Quantity * exVal, NoDigit, MidpointRounding.AwayFromZero);

                                        obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                        obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                        obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                        foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                                        {
                                            var itemNew = new OPS_DITOProduct();
                                            itemNew.CreatedBy = Account.UserName;
                                            itemNew.CreatedDate = DateTime.Now;
                                            itemNew.Note = item.Note;
                                            itemNew.OrderProductID = item.OrderProductID;
                                            itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);

                                            item.ModifiedBy = Account.UserName;
                                            item.ModifiedDate = DateTime.Now;
                                            item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(obj.CBM, NoDigit, MidpointRounding.AwayFromZero);

                                            objNew.OPS_DITOProduct.Add(itemNew);
                                        }
                                    }
                                    break;
                                case 3:
                                    exVal -= (double)value / obj.Quantity;
                                    if (obj.Quantity > value)
                                    {
                                        objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(obj.Quantity - value, NoDigit, MidpointRounding.AwayFromZero);
                                        objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(obj.Ton * exVal, NoDigit, MidpointRounding.AwayFromZero);
                                        objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(obj.CBM * exVal, NoDigit, MidpointRounding.AwayFromZero);

                                        obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                        obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                        obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                        foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                                        {
                                            var itemNew = new OPS_DITOProduct();
                                            itemNew.CreatedBy = Account.UserName;
                                            itemNew.CreatedDate = DateTime.Now;
                                            itemNew.Note = item.Note;
                                            itemNew.OrderProductID = item.OrderProductID;
                                            itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(objNew.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                            item.ModifiedBy = Account.UserName;
                                            item.ModifiedDate = DateTime.Now;
                                            item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(obj.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                            objNew.OPS_DITOProduct.Add(itemNew);
                                        }
                                    }
                                    break;
                            }
                            #endregion

                            model.OPS_DITOGroupProduct.Add(objNew);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_GroupProduct_Split_Cancel(int orderGopID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var dataOPS = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.OrderGroupProductID == orderGopID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList();
                    if (dataOPS.Count > 1)
                    {
                        var flag = true;
                        if (data.Count > 0 && data.Count != dataOPS.Count)
                        {
                            dataOPS = dataOPS.Where(c => data.Contains(c.ID)).ToList();
                            flag = false;
                        }

                        var obj = dataOPS.FirstOrDefault();
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.IsSplit = !flag;

                        var objP = obj.OPS_DITOProduct.FirstOrDefault();
                        if (objP != null)
                        {
                            objP.ModifiedBy = Account.UserName;
                            objP.ModifiedDate = DateTime.Now;
                        }
                        foreach (var item in dataOPS.Skip(1).ToList())
                        {
                            foreach (var o in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == item.ID).ToList())
                            {
                                if (objP != null)
                                {
                                    objP.Quantity = objP.QuantityBBGN = objP.QuantityTranfer = objP.Quantity += o.Quantity;
                                }
                                model.OPS_DITOProduct.Remove(o);
                            }
                        }

                        obj.Ton = obj.TonBBGN = obj.TonTranfer = dataOPS.Sum(c => c.Ton);
                        obj.CBM = obj.CBMTranfer = obj.CBMBBGN = dataOPS.Sum(c => c.CBM);
                        obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = dataOPS.Sum(c => c.Quantity);

                        model.OPS_DITOGroupProduct.RemoveRange(dataOPS.Skip(1).ToList());

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_CheckLocationRequired(DataEntities model, DTOSYSSetting objSetting, List<DTOOPSDITOGroupProduct> dataGop, List<DTOOPSDITOLocation> dataLocation, int vehicleID)
        {
            try
            {
                double cWeight = 0;
                double eWeight = 0;
                if (vehicleID > 0)
                {
                    var objV = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehicleID);
                    if (objV == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy xe");
                    eWeight = objV.MaxWeight ?? 0;
                }
                for (var i = 0; i < dataLocation.Count; i++)
                {
                    var item = dataLocation[i];
                    var catObj = model.CAT_Location.FirstOrDefault(c => c.ID == item.LocationID);
                    if (catObj != null && item.DateComeEstimate.HasValue)
                    {
                        var dataRequired = OPS_GetLocationRequired(model, item.LocationID.Value);

                        //Check thời gian mở cửa
                        if (objSetting.HasConstraintTimeOpenLocation)
                        {
                            if (dataRequired.Count(c => c.IsOpen == true && c.IsSize == false) > 0)
                            {
                                var dayOfWeek = (int)item.DateComeEstimate.Value.DayOfWeek;
                                var esDate = new DateTime(2000, 1, 1).Add(item.DateComeEstimate.Value.Subtract(item.DateComeEstimate.Value.Date));

                                var objCheck = dataRequired.FirstOrDefault(c => c.IsOpen == true && c.IsSize == false && ((c.DayOfWeek == dayOfWeek && esDate >= c.TimeFrom && esDate <= c.TimeTo) || (c.DayOfWeek == -1 && item.DateComeEstimate >= c.TimeFrom && item.DateComeEstimate <= c.TimeTo)));
                                if (objCheck == null)
                                    throw FaultHelper.BusinessFault(null, null, "Điểm " + catObj.Location + " không mở cửa vào tgian: " + String.Format("{0:d/M HH:mm}", item.DateComeEstimate.Value));
                            }
                            foreach (var o in dataRequired.Where(c => c.IsOpen == false && c.IsSize == false))
                            {
                                var dayOfWeek = (int)item.DateComeEstimate.Value.DayOfWeek;
                                var esDate = new DateTime(2000, 1, 1).Add(item.DateComeEstimate.Value.Subtract(item.DateComeEstimate.Value.Date));

                                if ((o.DayOfWeek == dayOfWeek && esDate > o.TimeFrom && esDate < o.TimeTo) || (o.DayOfWeek == -1 && item.DateComeEstimate > o.TimeFrom && item.DateComeEstimate < o.TimeTo))
                                    throw FaultHelper.BusinessFault(null, null, "Điểm " + catObj.Location + " không mở cửa vào tgian: từ " + String.Format("{0:d/M HH:mm}", o.TimeFrom) + " đến " + String.Format("{0:d/M HH:mm}", o.TimeTo));
                            }
                        }

                        //Check trọng tải trước khi vảo điểm.
                        if (objSetting.HasConstraintWeight)
                        {
                            foreach (var o in dataRequired.Where(c => c.IsOpen == true && c.IsSize == true))
                            {
                                var dayOfWeek = (int)item.DateComeEstimate.Value.DayOfWeek;
                                var esDate = new DateTime(2000, 1, 1).Add(item.DateComeEstimate.Value.Subtract(item.DateComeEstimate.Value.Date));

                                if (((o.DayOfWeek == dayOfWeek && esDate > o.TimeFrom && esDate < o.TimeTo) || (o.DayOfWeek == -1 && item.DateComeEstimate > o.TimeFrom && item.DateComeEstimate < o.TimeTo)) && o.Weight < cWeight)
                                    throw FaultHelper.BusinessFault(null, null, "Điểm " + catObj.Location + " không đáp ứng trọng tải. Tgian:" + String.Format("{0:d/M HH:mm}", item.DateComeEstimate.Value));
                            }
                        }

                        foreach (var o in dataGop.Where(c => c.CATLocationFromID == item.LocationID).ToList())
                        {
                            cWeight = cWeight + o.Ton;
                        }
                        foreach (var o in dataGop.Where(c => c.CATLocationToID == item.LocationID).ToList())
                        {
                            cWeight = cWeight - o.Ton;
                        }

                        //Check trọng tải xe sau khi Load/UnLoad hàng
                        if (objSetting.HasConstraintTransport)
                        {
                            if (eWeight > 0 && eWeight < cWeight)
                            {
                                throw FaultHelper.BusinessFault(null, null, "Xe không đáp ứng trọng tải tại điểm " + catObj.Location);
                            }
                        }

                        //Check trọng tải sau khi Load/UnLoad hàng                        
                        if (objSetting.HasConstraintWeight)
                        {
                            foreach (var o in dataRequired.Where(c => c.IsOpen == true && c.IsSize == true))
                            {
                                var dayOfWeek = (int)item.DateComeEstimate.Value.DayOfWeek;
                                var esDate = new DateTime(2000, 1, 1).Add(item.DateComeEstimate.Value.Subtract(item.DateComeEstimate.Value.Date));
                                if (((o.DayOfWeek == dayOfWeek && esDate > o.TimeFrom && esDate < o.TimeTo) || (o.DayOfWeek == -1 && item.DateComeEstimate > o.TimeFrom && item.DateComeEstimate < o.TimeTo)) && o.Weight < cWeight)
                                    throw FaultHelper.BusinessFault(null, null, "Điểm " + catObj.Location + " không đáp ứng trọng tải. Tgian:" + String.Format("{0:d/M HH:mm}", item.DateComeEstimate.Value));
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool OPSDI_MAP_FTL_Split_Check(int tomasterID)
        {
            try
            {
                var result = false;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var data = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == tomasterID && c.OrderGroupProductID > 0).Select(c => c.ORD_GroupProduct.OrderID).Distinct().Count();
                    result = data > 1;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_FTL_Split(int toMasterID, List<DTOOPSDI_MAP_GroupProduct> dataGop)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (dataGop.Count == 0)
                    {
                        var data = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == toMasterID).Select(c => new DTOOPSDI_MAP_GroupProduct
                        {
                            ID = c.ID,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            OrderID = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.OrderID : -1
                        }).ToList();
                        var idx = data.FirstOrDefault(c => c.OrderID > 0);
                        if (idx != null)
                        {
                            foreach (var o in data)
                            {
                                if (o.OrderID < 1)
                                    o.OrderID = idx.OrderID;
                                o.TOMasterID = o.OrderID;
                                dataGop.Add(o);
                            }
                        }
                    }

                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == toMasterID);
                    if (obj != null)
                    {
                        if (obj.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPlanning)
                            throw FaultHelper.BusinessFault(null, null, "Chỉ được chia các chuyến mới tạo!");
                        if (dataGop.GroupBy(c => c.TOMasterID).Count() > 1)
                        {
                            var ETA = obj.ETA;
                            var ETD = obj.ETD;
                            var sData = new List<int>();
                            foreach (var item in model.OPS_DITODetail.Where(c => c.OPS_DITO.DITOMasterID == obj.ID))
                                model.OPS_DITODetail.Remove(item);
                            foreach (var item in model.OPS_DITO.Where(c => c.DITOMasterID == obj.ID))
                                model.OPS_DITO.Remove(item);
                            foreach (var item in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID))
                                model.OPS_DITOLocation.Remove(item);
                            foreach (var item in model.OPS_DITOStation.Where(c => c.DITOMasterID == obj.ID))
                                model.OPS_DITOStation.Remove(item);
                            foreach (var item in model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID))
                                model.OPS_DITORate.Remove(item);
                            foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).ToList())
                            {
                                item.DITOMasterID = null;
                                sData.Add(item.ID);
                            }
                            OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                            model.OPS_DITOMaster.Remove(obj);

                            int sLocation = 1, soLocation = 1;
                            var objSetting = OPS_SystemSetting_Get(model);
                            var objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationFromID);
                            if (objCheck != null)
                                sLocation = objSetting.LocationFromID;
                            objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationToID);
                            if (objCheck != null)
                                soLocation = objSetting.LocationToID;

                            var dataOPS = model.OPS_DITOGroupProduct.Where(c => sData.Contains(c.ID)).ToList();
                            foreach (var item in dataGop.GroupBy(c => c.TOMasterID).ToList())
                            {
                                OPS_DITOMaster objM = new OPS_DITOMaster();
                                objM.Code = DI_GetLastCode(model);
                                objM.CreatedBy = Account.UserName;
                                objM.CreatedDate = DateTime.Now;
                                objM.SYSCustomerID = Account.SYSCustomerID;
                                objM.ETD = ETD;
                                objM.ETA = ETA;
                                objM.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterPlanning;
                                objM.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                                objM.TransportModeID = -(int)SYSVarType.TransportModeFTL;
                                model.OPS_DITOMaster.Add(objM);
                                model.SaveChanges();
                                objM.Code = DICodePrefix + objM.ID.ToString(DICodeNum);
                                model.SaveChanges();

                                int idx = 1;
                                OPS_DITOLocation oLocation = new OPS_DITOLocation();
                                oLocation.LocationID = sLocation;
                                oLocation.SortOrder = idx++;
                                oLocation.DITOMasterID = objM.ID;
                                oLocation.CreatedBy = Account.UserName;
                                oLocation.CreatedDate = DateTime.Now;
                                oLocation.DateComeEstimate = objM.ETD;
                                oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                                oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                                model.OPS_DITOLocation.Add(oLocation);

                                List<int> dataLocationFrom = new List<int>();
                                List<int> dataLocationTo = new List<int>();
                                Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();

                                foreach (var gop in item.ToList())
                                {
                                    var sGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == null && c.ID == gop.ID);
                                    if (sGop != null)
                                    {
                                        var fID = sGop.ORD_GroupProduct.CUS_Location.LocationID;
                                        var tID = sGop.ORD_GroupProduct.CUS_Location1.LocationID;

                                        dataLocationFrom.Add(fID);
                                        if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                            dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;
                                        else if (dicLocationTime[fID] > sGop.ORD_GroupProduct.ETD)
                                            dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;

                                        dataLocationTo.Add(tID);
                                        if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                            dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;
                                        else if (dicLocationTime[tID] > sGop.ORD_GroupProduct.ETA)
                                            dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;

                                        var flag = false;
                                        switch (sGop.ORD_GroupProduct.CAT_Packing.TypeOfPackageID)
                                        {
                                            case -(int)SYSVarType.TypeOfPackingGOPTon:
                                                if (sGop.Ton > gop.Ton)
                                                {
                                                    flag = true;
                                                }
                                                break;
                                            case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                                if (sGop.CBM > gop.CBM)
                                                {
                                                    flag = true;
                                                }
                                                break;
                                            case -(int)SYSVarType.TypeOfPackingGOPTU:
                                                if (sGop.Quantity > gop.Quantity)
                                                {
                                                    flag = true;
                                                }
                                                break;
                                        }
                                        if (flag)
                                        {
                                            sGop.ModifiedBy = Account.UserName;
                                            sGop.ModifiedDate = DateTime.Now;
                                            sGop.Ton -= gop.Ton;
                                            sGop.CBM -= gop.CBM;
                                            sGop.Quantity -= gop.Quantity;
                                            sGop.TonBBGN = sGop.TonTranfer = sGop.Ton;
                                            sGop.CBMBBGN = sGop.CBMTranfer = sGop.CBM;
                                            sGop.QuantityBBGN = sGop.QuantityLoading = sGop.QuantityTranfer = sGop.Quantity;
                                            sGop.IsSplit = flag;

                                            OPS_DITOGroupProduct oN = new OPS_DITOGroupProduct();
                                            oN.CreatedBy = Account.UserName;
                                            oN.CreatedDate = DateTime.Now;
                                            model.OPS_DITOGroupProduct.Add(oN);

                                            oN.OrderGroupProductID = sGop.OrderGroupProductID;
                                            oN.DITOMasterID = objM.ID;
                                            oN.Ton = oN.TonBBGN = oN.TonTranfer = gop.Ton;
                                            oN.CBM = oN.CBMBBGN = oN.CBMTranfer = gop.CBM;
                                            oN.Quantity = oN.QuantityBBGN = oN.QuantityLoading = oN.QuantityTranfer = gop.Quantity;
                                            oN.Note = sGop.Note;
                                            oN.IsInput = sGop.IsInput;
                                            oN.IsOrigin = sGop.IsOrigin;
                                            oN.IsSplit = flag;
                                            oN.DNCode = sGop.DNCode;
                                            oN.DITOGroupProductStatusID = sGop.DITOGroupProductStatusID;
                                            oN.DateFromCome = sGop.DateFromCome;
                                            oN.DateFromLeave = sGop.DateFromLeave;
                                            oN.DateFromLoadStart = sGop.DateFromLoadStart;
                                            oN.DateFromLoadEnd = sGop.DateFromLoadEnd;
                                            oN.DateToCome = sGop.DateToCome;
                                            oN.DateToLeave = sGop.DateToLeave;
                                            oN.DateToLoadStart = sGop.DateToLoadStart;
                                            oN.DateToLoadEnd = sGop.DateToLoadEnd;
                                            oN.Note1 = sGop.Note1;
                                            oN.Note2 = sGop.Note2;
                                            oN.InvoiceBy = sGop.InvoiceBy;
                                            oN.InvoiceDate = sGop.InvoiceDate;
                                            oN.InvoiceNote = sGop.InvoiceNote;
                                            oN.DateDN = sGop.DateDN;
                                            oN.DITOGroupProductStatusPODID = sGop.DITOGroupProductStatusPODID;
                                            oN.CUSRoutingID = sGop.CUSRoutingID;
                                            oN.TypeOfDITOGroupProductReturnID = sGop.TypeOfDITOGroupProductReturnID;
                                            oN.DateConfig = sGop.DateConfig;
                                            oN.CATRoutingID = sGop.CATRoutingID;
                                            oN.GroupSort = sGop.GroupSort;

                                            var dataP = model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == sGop.ID).ToList();
                                            foreach (var p in dataP)
                                            {
                                                p.ModifiedBy = Account.UserName;
                                                p.ModifiedDate = DateTime.Now;

                                                OPS_DITOProduct nP = new OPS_DITOProduct();
                                                nP.CreatedBy = Account.UserName;
                                                nP.CreatedDate = DateTime.Now;
                                                nP.OrderProductID = p.OrderProductID;
                                                nP.Note = p.Note;

                                                switch (p.ORD_Product.CAT_Packing.TypeOfPackageID)
                                                {
                                                    case -(int)SYSVarType.TypeOfPackingGOPTon:
                                                        p.Quantity = p.QuantityBBGN = p.QuantityTranfer = sGop.Ton;
                                                        nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.Ton;
                                                        break;
                                                    case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                                        p.Quantity = p.QuantityBBGN = p.QuantityTranfer = sGop.CBM;
                                                        nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.CBM;
                                                        break;
                                                    case -(int)SYSVarType.TypeOfPackingGOPTU:
                                                        p.Quantity = p.QuantityBBGN = p.QuantityTranfer = sGop.Quantity;
                                                        nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.Quantity;
                                                        break;
                                                }

                                                oN.OPS_DITOProduct.Add(nP);
                                            }
                                        }
                                        else
                                        {
                                            sGop.ModifiedBy = Account.UserName;
                                            sGop.ModifiedDate = DateTime.Now;
                                            sGop.DITOMasterID = objM.ID;
                                        }
                                    }
                                }

                                var tmpID = -1;
                                var dataL = dataLocationFrom.Distinct().ToList();
                                dataL.AddRange(dataLocationTo.Distinct().ToList());
                                dataL = dataL.Distinct().ToList();
                                for (var i = 0; i < dataL.Count; i++)
                                {
                                    tmpID = dataL[i];
                                    if (i == 0 && tmpID == oLocation.LocationID && (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID))
                                    {
                                        if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                            oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                        else if (dataLocationFrom.Contains(dataL[i]))
                                            oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                        else
                                            oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                                    }
                                    else
                                    {
                                        //Create DITOLocation
                                        OPS_DITOLocation oL = new OPS_DITOLocation();
                                        oL.CreatedBy = Account.UserName;
                                        oL.CreatedDate = DateTime.Now;
                                        model.OPS_DITOLocation.Add(oL);
                                        oL.DITOMasterID = objM.ID;
                                        oL.LocationID = dataL[i];
                                        oL.SortOrder = idx++;
                                        oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                                        if (dicLocationTime.ContainsKey(dataL[i]))
                                            oL.DateComeEstimate = dicLocationTime[dataL[i]];

                                        if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                            oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                        else if (dataLocationFrom.Contains(dataL[i]))
                                            oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                        else
                                            oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                                    }
                                }

                                if (tmpID != soLocation)
                                {
                                    OPS_DITOLocation osLocation = new OPS_DITOLocation();
                                    osLocation.LocationID = soLocation;
                                    osLocation.SortOrder = idx++;
                                    osLocation.DITOMasterID = objM.ID;
                                    osLocation.CreatedBy = Account.UserName;
                                    osLocation.CreatedDate = DateTime.Now;
                                    osLocation.DateComeEstimate = objM.ETA;
                                    osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                                    osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                                    model.OPS_DITOLocation.Add(osLocation);
                                }
                                objM.TotalLocation = idx - 1;

                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_FTL_Merge(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    //Gom các nhóm hàng lại thành 1 chuyến
                    var mID = data.FirstOrDefault();
                    foreach (var item in data)
                    {
                        var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item && c.TransportModeID == -(int)SYSVarType.TransportModeFTL);
                        if (obj == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến để gộp!");
                        if (obj.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPlanning)
                            throw FaultHelper.BusinessFault(null, null, "Chỉ được gộp các đơn chưa xác nhận chuyến!");

                        if (obj.ID != mID)
                        {
                            foreach (var gop in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == item))
                            {
                                gop.ModifiedBy = Account.UserName;
                                gop.ModifiedDate = DateTime.Now;
                                gop.DITOMasterID = mID;
                            }
                            foreach (var o in model.OPS_DITO.Where(c => c.DITOMasterID == obj.ID))
                                model.OPS_DITO.Remove(o);
                            foreach (var o in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID))
                                model.OPS_DITOLocation.Remove(o);
                            foreach (var o in model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID))
                                model.OPS_DITORate.Remove(o);
                            foreach (var o in model.WFL_PacketDetail.Where(c => c.DITOMasterID == obj.ID))
                                model.WFL_PacketDetail.Remove(o);
                            model.OPS_DITOMaster.Remove(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                    }

                    model.SaveChanges();

                    //Cập nhật lại thông tin chuyến
                    var objM = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);

                    int idx = 1;
                    int sLocation = 1, soLocation = 1;
                    var objSetting = OPS_SystemSetting_Get(model);
                    var objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationFromID);
                    if (objCheck != null)
                        sLocation = objSetting.LocationFromID;
                    objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationToID);
                    if (objCheck != null)
                        soLocation = objSetting.LocationToID;

                    OPS_DITOLocation oLocation = new OPS_DITOLocation();
                    oLocation.LocationID = sLocation;
                    oLocation.SortOrder = idx++;
                    oLocation.DITOMasterID = objM.ID;
                    oLocation.CreatedBy = Account.UserName;
                    oLocation.CreatedDate = DateTime.Now;
                    oLocation.DateComeEstimate = objM.ETD;
                    oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                    model.OPS_DITOLocation.Add(oLocation);

                    List<int> dataLocationFrom = new List<int>();
                    List<int> dataLocationTo = new List<int>();
                    Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();

                    foreach (var sGop in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == mID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList())
                    {
                        var fID = sGop.ORD_GroupProduct.CUS_Location.LocationID;
                        var tID = sGop.ORD_GroupProduct.CUS_Location1.LocationID;

                        dataLocationFrom.Add(fID);
                        if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                            dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;
                        else if (dicLocationTime[fID] > sGop.ORD_GroupProduct.ETD)
                            dicLocationTime[fID] = sGop.ORD_GroupProduct.ETD;

                        dataLocationTo.Add(tID);
                        if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                            dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;
                        else if (dicLocationTime[tID] > sGop.ORD_GroupProduct.ETA)
                            dicLocationTime[tID] = sGop.ORD_GroupProduct.ETA;
                    }

                    var tmpID = -1;
                    var dataL = dataLocationFrom.Distinct().ToList();
                    dataL.AddRange(dataLocationTo.Distinct().ToList());
                    dataL = dataL.Distinct().ToList();
                    for (var i = 0; i < dataL.Count; i++)
                    {
                        tmpID = dataL[i];
                        if (i == 0 && tmpID == oLocation.LocationID && (objM.VendorOfVehicleID == null || objM.VendorOfVehicleID == Account.SYSCustomerID))
                        {
                            if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                            else if (dataLocationFrom.Contains(dataL[i]))
                                oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            else
                                oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                        }
                        else
                        {
                            //Create DITOLocation
                            OPS_DITOLocation oL = new OPS_DITOLocation();
                            oL.CreatedBy = Account.UserName;
                            oL.CreatedDate = DateTime.Now;
                            model.OPS_DITOLocation.Add(oL);
                            oL.DITOMasterID = objM.ID;
                            oL.LocationID = dataL[i];
                            oL.SortOrder = idx++;
                            oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                            if (dicLocationTime.ContainsKey(dataL[i]))
                                oL.DateComeEstimate = dicLocationTime[dataL[i]];

                            if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                            else if (dataLocationFrom.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            else
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                        }
                    }

                    if (tmpID != soLocation)
                    {
                        OPS_DITOLocation osLocation = new OPS_DITOLocation();
                        osLocation.LocationID = soLocation;
                        osLocation.SortOrder = idx++;
                        osLocation.DITOMasterID = objM.ID;
                        osLocation.CreatedBy = Account.UserName;
                        osLocation.CreatedDate = DateTime.Now;
                        osLocation.DateComeEstimate = objM.ETA;
                        osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        model.OPS_DITOLocation.Add(osLocation);
                    }
                    objM.TotalLocation = idx - 1;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_Vehicle_New(int vendorID, string regNo, double maxWeight)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo.Trim().ToLower() == regNo.Trim().ToLower());
                    if (obj != null)
                    {
                        if (obj.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTruck)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã tồn tại.");
                        var objCus = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == obj.ID && c.CustomerID == vendorID);
                        if (objCus != null)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã tồn tại.");

                        objCus = new CUS_Vehicle();
                        objCus.CreatedBy = Account.UserName;
                        objCus.CreatedDate = DateTime.Now;
                        objCus.CustomerID = vendorID;
                        objCus.VehicleID = obj.ID;

                        model.CUS_Vehicle.Add(objCus);
                        model.SaveChanges();
                    }
                    else
                    {
                        obj = new CAT_Vehicle();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.RegNo = regNo;
                        obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTruck;
                        obj.IsOwn = false;
                        if (maxWeight > 0)
                            obj.MaxWeight = maxWeight;
                        model.CAT_Vehicle.Add(obj);

                        var objCus = new CUS_Vehicle();
                        objCus.CreatedBy = Account.UserName;
                        objCus.CreatedDate = DateTime.Now;
                        objCus.CustomerID = vendorID;
                        objCus.CAT_Vehicle = obj;

                        model.CUS_Vehicle.Add(objCus);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //View Xem Chuyến Mới
        public DTOResult OPSDI_MAP_DITOGroupProduct_List(string request, bool isApproved, bool isTendered, DateTime? fDate, DateTime? tDate)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (fDate.HasValue)
                        fDate = fDate.Value.Date;
                    if (tDate.HasValue)
                        tDate = tDate.Value.Date.AddDays(1);

                    int fSTT = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    int tSTT = -(int)SYSVarType.StatusOfDITOMasterTendered;
                    if (!isTendered)
                        tSTT = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    if (!isApproved)
                        fSTT = -(int)SYSVarType.StatusOfDITOMasterTendered;

                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_DITOMaster.StatusOfDITOMasterID >= fSTT && c.OPS_DITOMaster.StatusOfDITOMasterID <= tSTT && c.OPS_DITOMaster.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterSendTender
                        && (isAdmin ? true : c.OrderGroupProductID == null || Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID))
                        && (fDate != null && tDate != null ? c.OPS_DITOMaster.ETD >= fDate && c.OPS_DITOMaster.ETD < tDate : true)).Select(c => new DTOOPSDI_MAP_GroupProduct
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID.Value,
                            TOMasterCode = c.OPS_DITOMaster.Code,
                            TOVehicleID = c.OPS_DITOMaster.VehicleID ?? -1,
                            TOVehicleNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            TOVendorID = c.OPS_DITOMaster.VendorOfVehicleID,
                            TOVendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 && c.OPS_DITOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà",
                            TODriverName = c.OPS_DITOMaster.DriverName1,
                            TODriverTel = c.OPS_DITOMaster.DriverTel1,
                            TOETA = c.OPS_DITOMaster.ETA,
                            TOETD = c.OPS_DITOMaster.ETD,
                            TOCreatedBy = c.OPS_DITOMaster.CreatedBy,
                            TOCreatedDate = c.OPS_DITOMaster.CreatedDate,
                            TOLastUpdate = string.IsNullOrEmpty(c.OPS_DITOMaster.ModifiedBy) ? c.OPS_DITOMaster.CreatedBy : c.OPS_DITOMaster.ModifiedBy,
                            TOLastUpdateTime = c.OPS_DITOMaster.ModifiedDate ?? c.OPS_DITOMaster.CreatedDate,
                            TOStatus = c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : 2,
                            IsFTL = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL : false,

                            OrderCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.Code : string.Empty,
                            CustomerCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code : string.Empty,
                            CustomerShortName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName : string.Empty,
                            DistributorCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty : string.Empty,
                            DistributorName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty : string.Empty,
                            OrderGroupProductID = c.OrderGroupProductID ?? -1,
                            GroupProductCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_GroupOfProduct.Code : string.Empty,
                            GroupProductName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName : string.Empty,
                            ProductCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty : string.Empty,
                            ProductName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName : string.Empty : string.Empty,
                            GroupSort = c.GroupSort,
                            TransportModeName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name : string.Empty,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            ETA = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ETA : null,
                            ETD = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ETD : null,
                            DNCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.DNCode : string.Empty,
                            SOCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.SOCode : string.Empty,
                            TempMax = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.TempMax : null,
                            TempMin = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.TempMin : null,
                            UserDefine1 = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.UserDefine1 : string.Empty,
                            UserDefine2 = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.UserDefine2 : string.Empty,
                            LocationFromID = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationID : -1,
                            LocationFromCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationFromName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : string.Empty,
                            LocationFromAddress = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : string.Empty,
                            LocationToID = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationID : -1,
                            LocationToCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSDI_MAP_GroupProduct>;
                    var objSetting = OPS_SystemSetting_Get(model);
                    DateTime dtWarning = DateTime.Now;
                    if (objSetting != null)
                        dtWarning = objSetting.TimeDelayWarning > 0 ? DateTime.Now.AddHours(objSetting.TimeDelayWarning) : DateTime.Now;
                    if (objSetting.WarningETD)
                    {
                        foreach (DTOOPSDI_MAP_GroupProduct item in result.Data)
                        {
                            if (item.TOStatus == 1 && item.TOETD.HasValue && item.TOETD < dtWarning)
                            {
                                item.IsWarning = true;
                                item.WarningType = 1;
                                item.WarningTime = dtWarning.Subtract(item.TOETD.Value).TotalHours;
                                item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ kế hoạch vận chuyển";
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //2View
        public DTOResult OPSDI_MAP_2View_GroupProduct_List(string request, List<int> data, DateTime? fDate, DateTime? tDate)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (fDate.HasValue)
                        fDate = fDate.Value.Date;
                    if (tDate.HasValue)
                        tDate = tDate.Value.Date.AddDays(1);
                    var isApproved = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_DITOMaster.StatusOfDITOMasterID == isApproved && (isAdmin ? true : Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) || c.OrderGroupProductID == null)
                        && (data.Count > 0 ? data.Contains(c.DITOMasterID.Value) : (fDate != null && tDate != null ? c.OPS_DITOMaster.ETD >= fDate && c.OPS_DITOMaster.ETD < tDate : true)))
                        .Select(c => new DTOOPSDI_MAP_GroupProduct
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID.Value,
                            TOMasterCode = c.OPS_DITOMaster.Code,
                            TOVehicleID = c.OPS_DITOMaster.VehicleID ?? -1,
                            TOVehicleNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            TOVendorID = c.OPS_DITOMaster.VendorOfVehicleID,
                            TOVendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 && c.OPS_DITOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà",
                            TODriverName = c.OPS_DITOMaster.DriverName1,
                            TODriverTel = c.OPS_DITOMaster.DriverTel1,
                            TOMasterIndex = 0,
                            TOETA = c.OPS_DITOMaster.ETA,
                            TOETD = c.OPS_DITOMaster.ETD,
                            TOCreatedBy = c.OPS_DITOMaster.CreatedBy,
                            TOCreatedDate = c.OPS_DITOMaster.CreatedDate,
                            TOLastUpdate = string.IsNullOrEmpty(c.OPS_DITOMaster.ModifiedBy) ? c.OPS_DITOMaster.CreatedBy : c.OPS_DITOMaster.ModifiedBy,
                            TOLastUpdateTime = c.OPS_DITOMaster.ModifiedDate ?? c.OPS_DITOMaster.CreatedDate,
                            IsFTL = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL : false,

                            OrderCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.Code : string.Empty,
                            CustomerCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code : string.Empty,
                            CustomerShortName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName : string.Empty,
                            DistributorCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty : string.Empty,
                            DistributorName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty : string.Empty,
                            OrderGroupProductID = c.OrderGroupProductID ?? -1,
                            GroupProductCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_GroupOfProduct.Code : string.Empty,
                            GroupProductName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName : string.Empty,
                            ProductCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty : string.Empty,
                            ProductName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName : string.Empty : string.Empty,
                            GroupSort = c.GroupSort,
                            TransportModeName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name : string.Empty,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            ETA = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ETA : null,
                            ETD = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ETD : null,
                            DNCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.DNCode : string.Empty,
                            SOCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.SOCode : string.Empty,
                            TempMax = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.TempMax : null,
                            TempMin = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.TempMin : null,
                            UserDefine1 = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.UserDefine1 : string.Empty,
                            UserDefine2 = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.UserDefine2 : string.Empty,
                            LocationFromID = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationID : -1,
                            LocationFromCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationFromName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : string.Empty,
                            LocationFromAddress = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : string.Empty,
                            LocationToID = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationID : -1,
                            LocationToCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty
                        }).OrderBy(c => c.TOMasterID).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSDI_MAP_GroupProduct>;
                    int idx = 1;
                    Dictionary<int, int> dicTO = new Dictionary<int, int>();
                    foreach (var item in result.Data as IEnumerable<DTOOPSDI_MAP_GroupProduct>)
                    {
                        if (dicTO.ContainsKey(item.TOMasterID))
                        {
                            item.TOMasterIndex = dicTO[item.TOMasterID];
                        }
                        else
                        {
                            item.TOMasterIndex = idx++;
                            dicTO.Add(item.TOMasterID, item.TOMasterIndex);
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool OPSDI_MAP_2View_Master_Update_Check4Delete(int mID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return model.OPS_DITOGroupProduct.Count(c => c.DITOMasterID == mID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel) == 1;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool OPSDI_MAP_2View_Master_Update_Check4Update(int mID, int gopID, double value, int packingType)
        {
            try
            {
                var result = true;
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến!");
                    var objGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID > 0 && c.ID == gopID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                    if (objGop == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm hàng!");
                    var dataGop = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && c.OrderGroupProductID == objGop.OrderGroupProductID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new { c.ID, c.Ton, c.CBM, c.Quantity }).ToList();
                    switch (packingType)
                    {
                        case 1:
                            if (Math.Round(value - objGop.Ton, NoDigit, MidpointRounding.AwayFromZero) > Math.Round(dataGop.Sum(c => c.Ton), NoDigit, MidpointRounding.AwayFromZero))
                                result = false;
                            break;
                        case 2:
                            if (Math.Round(value - objGop.CBM, NoDigit, MidpointRounding.AwayFromZero) > Math.Round(dataGop.Sum(c => c.CBM), NoDigit, MidpointRounding.AwayFromZero))
                                result = false;
                            break;
                        case 3:
                            if (Math.Round(value - objGop.Quantity, NoDigit, MidpointRounding.AwayFromZero) > Math.Round(dataGop.Sum(c => c.Quantity), NoDigit, MidpointRounding.AwayFromZero))
                                result = false;
                            break;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool OPSDI_MAP_2View_Master_Update_Check4Consolidate(int mID, int gopID)
        {
            try
            {
                var result = true;
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến cần bổ sung!");
                    if (obj.TransportModeID == -(int)SYSVarType.TransportModeFTL)
                    {
                        var objGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == null && c.OrderGroupProductID > 0 && c.ID == gopID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                        if (objGop == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm hàng bổ sung!");
                        var conID = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.ContractID > 0).Select(c => c.ORD_GroupProduct.ORD_Order.ContractID.Value).FirstOrDefault();
                        if (conID > 0)
                        {
                            var objCon = model.CAT_Contract.FirstOrDefault(c => c.ID == conID);
                            if (objCon != null && !objCon.AllowCoLoad)
                                result = false;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_2View_Master_Update_TimeLine(int mID, int vehicleID, DateTime ETD, DateTime ETA)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại!");
                    if (ETD >= ETA)
                        throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA!");
                    var objVehicle = model.FLM_Asset.FirstOrDefault(c => c.VehicleID == vehicleID && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck);
                    if (objVehicle == null)
                        throw FaultHelper.BusinessFault(null, null, "Xe không tồn tại hoặc đã bị thanh lý!");
                    var driverID = OPS_FindFLMDriver(model, objVehicle.CAT_Vehicle.DriverName);
                    var driverName = objVehicle.CAT_Vehicle.DriverName;
                    var driverTel = objVehicle.CAT_Vehicle.DriverID > 0 ? objVehicle.CAT_Vehicle.FLM_Driver.CAT_Driver.Cellphone : string.Empty;
                    var objPlanning = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == vehicleID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain
                               && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA)));
                    if (objPlanning != null)
                    {
                        driverID = objPlanning.DriverID;
                        driverTel = objPlanning.FLM_Driver.CAT_Driver.Cellphone;
                        driverName = objPlanning.FLM_Driver.CAT_Driver.LastName + " " + objPlanning.FLM_Driver.CAT_Driver.FirstName;
                    }
                    if (driverID == null)
                        throw FaultHelper.BusinessFault(null, null, "Xe chưa thiết lập tài xế!");

                    obj.ModifiedBy = Account.UserName;
                    obj.ModifiedDate = DateTime.Now;
                    obj.VehicleID = vehicleID;
                    obj.ETA = ETA;
                    obj.ETD = ETD;
                    obj.DriverID1 = driverID;
                    obj.DriverTel1 = driverTel;
                    obj.DriverName1 = driverName;
                    OPS_CheckingTime(model, OPS_SystemSetting_Get(model), mID, vehicleID, null, ETD, ETA, false);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_2View_Master_Update_Group(int mID, int gopID, bool isRemove)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến cần cập nhật!");
                    if (obj.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterApproved)
                        throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Chỉ cập nhật chuyến đang kế hoạch");
                    if (isRemove)
                    {
                        obj.ModifiedDate = DateTime.Now;
                        obj.ModifiedBy = Account.UserName;
                        var objGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gopID && c.DITOMasterID == obj.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                        if (objGop == null)
                            throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Không tìm thấy nhóm hàng!");
                        if (model.OPS_DITOGroupProduct.Count(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel) == 1)
                        {
                            var SDATA = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();
                            //Cập nhật
                            objGop.ModifiedDate = DateTime.Now;
                            objGop.ModifiedBy = Account.UserName;
                            objGop.DITOMasterID = null;
                            model.SaveChanges();

                            foreach (var o in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID && c.LocationID > 0 && c.TypeOfTOLocationID != -(int)SYSVarType.TypeOfTOLocationEmpty).ToList())
                            {
                                model.OPS_DITOLocation.Remove(o);
                            }

                            var objEmpty = new OPS_DITOGroupProduct();
                            objEmpty.CreatedBy = Account.UserName;
                            objEmpty.CreatedDate = DateTime.Now;

                            objEmpty.DITOMasterID = obj.ID;
                            objEmpty.IsInput = true;
                            objEmpty.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                            objEmpty.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                            model.OPS_DITOGroupProduct.Add(objEmpty);
                            model.SaveChanges();
                            HelperStatus.ORDOrder_Status(model, Account, SDATA);
                        }
                        else
                        {
                            var SDATA = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();
                            //Cập nhật
                            objGop.ModifiedDate = DateTime.Now;
                            objGop.ModifiedBy = Account.UserName;
                            objGop.DITOMasterID = null;
                            model.SaveChanges();

                            //Xóa điểm không tồn tại.
                            var dataGop = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new
                            {
                                ID = c.ID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,
                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID
                            }).ToList();
                            var objLocation = model.OPS_DITOLocation.FirstOrDefault(c => c.LocationID == objGop.ORD_GroupProduct.CUS_Location.LocationID && c.DITOMasterID == obj.ID && c.TypeOfTOLocationID != (int)SYSVarType.TypeOfTOLocationEmpty);
                            if (objLocation != null)
                            {
                                if (dataGop.Count(c => objLocation.LocationID == c.LocationFromID || objLocation.LocationID == c.LocationToID) == 0)
                                {
                                    model.OPS_DITOLocation.Remove(objLocation);
                                }
                            }
                            objLocation = model.OPS_DITOLocation.FirstOrDefault(c => c.LocationID == objGop.ORD_GroupProduct.CUS_Location1.LocationID && c.DITOMasterID == obj.ID && c.TypeOfTOLocationID != (int)SYSVarType.TypeOfTOLocationEmpty);
                            if (objLocation != null)
                            {
                                if (dataGop.Count(c => objLocation.LocationID == c.LocationFromID || objLocation.LocationID == c.LocationToID) == 0)
                                {
                                    model.OPS_DITOLocation.Remove(objLocation);
                                }
                            }
                            model.SaveChanges();
                            int idx = 1;
                            foreach (var o in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID).OrderBy(c => c.SortOrder).ToList())
                            {
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.SortOrder = idx;
                                o.SortOrderReal = idx;
                                idx++;
                            }
                            model.SaveChanges();
                            HelperStatus.ORDOrder_Status(model, Account, SDATA);
                        }
                    }
                    else
                    {
                        var sysGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gopID && c.DITOMasterID == null && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                        if (sysGop == null)
                            throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Không tìm thấy nhóm hàng!");

                        obj.ModifiedDate = DateTime.Now;
                        obj.ModifiedBy = Account.UserName;

                        //Xóa nhóm empty.
                        model.OPS_DITOGroupProduct.RemoveRange(model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID == null).ToList());

                        int sLocation = -1, eLocation = -1;
                        Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();
                        foreach (var o in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID && c.LocationID > 0).ToList())
                        {
                            if (o.SortOrder == 1 && o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty)
                                sLocation = o.LocationID.Value;
                            if (o.SortOrder > 1 && o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty)
                                eLocation = o.LocationID.Value;
                            model.OPS_DITOLocation.Remove(o);
                        }

                        int idx = 1;
                        OPS_DITOLocation oLocation = new OPS_DITOLocation();
                        oLocation.LocationID = sLocation;
                        oLocation.OPS_DITOMaster = obj;
                        oLocation.CreatedBy = Account.UserName;
                        oLocation.CreatedDate = DateTime.Now;
                        oLocation.DateComeEstimate = obj.ETD;
                        oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                        var SDATA = new List<int>();
                        var dataGop = new List<DTOOPSDITOGroupProduct>();
                        var dataLocation = new List<DTOOPSDITOLocation>();
                        List<int> dataLocationFrom = new List<int>();
                        List<int> dataLocationTo = new List<int>();

                        var oLs = new DTOOPSDITOLocation();
                        oLs.LocationID = oLocation.LocationID.Value;
                        oLs.DateComeEstimate = oLocation.DateComeEstimate;
                        if ((obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID) && sLocation > 0)
                        {
                            oLocation.SortOrder = idx++;
                            model.OPS_DITOLocation.Add(oLocation);
                            dataLocation.Add(oLs);
                        }

                        var dataOPSGroup = model.OPS_DITOGroupProduct.Where(c => (c.ID == sysGop.ID || c.DITOMasterID == obj.ID) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OrderGroupProductID > 0).ToList();
                        foreach (var objGop in dataOPSGroup)
                        {
                            var objG = new DTOOPSDITOGroupProduct();
                            objG.CATLocationToID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;
                            objG.CATLocationFromID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                            objG.Ton = objGop.Ton;
                            dataGop.Add(objG);

                            SDATA.Add(objGop.ORD_GroupProduct.OrderID);

                            if (objGop.DITOMasterID == null)
                            {
                                objGop.ModifiedBy = Account.UserName;
                                objGop.ModifiedDate = DateTime.Now;
                                objGop.OPS_DITOMaster = obj;
                            }

                            var fID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                            var tID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;

                            dataLocationFrom.Add(fID);
                            if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;
                            else if (dicLocationTime[fID] > objGop.ORD_GroupProduct.ETD)
                                dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;

                            dataLocationTo.Add(tID);
                            if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                            else if (dicLocationTime[tID] > objGop.ORD_GroupProduct.ETA)
                                dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                        }

                        var tmpID = -1;
                        var dataL = dataLocationFrom.Distinct().ToList();
                        dataL.AddRange(dataLocationTo.Distinct().ToList());
                        dataL = dataL.Distinct().ToList();
                        for (var i = 0; i < dataL.Count; i++)
                        {
                            tmpID = dataL[i];
                            if (i == 0 && tmpID == oLocation.LocationID && (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID))
                            {
                                if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(dataL[i]))
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                            }
                            else
                            {
                                //Create DITOLocation
                                OPS_DITOLocation oL = new OPS_DITOLocation();
                                oL.CreatedBy = Account.UserName;
                                oL.CreatedDate = DateTime.Now;
                                model.OPS_DITOLocation.Add(oL);
                                oL.OPS_DITOMaster = obj;
                                oL.LocationID = dataL[i];
                                oL.SortOrder = idx++;
                                oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                                if (dicLocationTime.ContainsKey(dataL[i]))
                                    oL.DateComeEstimate = dicLocationTime[dataL[i]];

                                if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                                else if (dataLocationFrom.Contains(dataL[i]))
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                                else
                                    oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                                var oLsx = new DTOOPSDITOLocation();
                                oLsx.LocationID = oL.LocationID.Value;
                                oLsx.DateComeEstimate = oL.DateComeEstimate;
                                dataLocation.Add(oLsx);
                            }
                        }

                        if (tmpID != eLocation && eLocation > 0)
                        {
                            OPS_DITOLocation osLocation = new OPS_DITOLocation();
                            osLocation.LocationID = eLocation;
                            osLocation.OPS_DITOMaster = obj;
                            osLocation.CreatedBy = Account.UserName;
                            osLocation.CreatedDate = DateTime.Now;
                            osLocation.DateComeEstimate = obj.ETA;
                            osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                            var oLse = new DTOOPSDITOLocation();
                            oLse.LocationID = osLocation.LocationID.Value;
                            oLse.DateComeEstimate = osLocation.DateComeEstimate;

                            if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                            {
                                osLocation.SortOrder = idx++;
                                model.OPS_DITOLocation.Add(osLocation);
                                dataLocation.Add(oLse);
                            }
                        }

                        obj.TotalLocation = idx - 1;

                        if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                            OPSDI_CheckLocationRequired(model, OPS_SystemSetting_Get(model), dataGop, dataLocation, obj.VehicleID.Value);

                        model.SaveChanges();
                        HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster, null);
                        HelperStatus.ORDOrder_Status(model, Account, SDATA);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_2View_Master_Update_Group_Quantity(int mID, int gopID, double value, int packingType)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến cần cập nhật!");
                    if (obj.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterApproved)
                        throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Chỉ cập nhật chuyến đang kế hoạch");
                    var objGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID > 0 && c.ID == gopID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                    if (objGop == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm hàng!");
                    var cusPackingType = objGop.ORD_GroupProduct.ORD_Product.FirstOrDefault().CAT_Packing.TypeOfPackageID;
                    var tmp = new List<int>();
                    obj.ModifiedDate = DateTime.Now;
                    obj.ModifiedBy = Account.UserName;
                    switch (packingType)
                    {
                        case 1:
                            if (value > objGop.Ton + 0.001)
                            {
                                while (objGop.Ton < value && model.OPS_DITOGroupProduct.Count(c => c.DITOMasterID == null && !tmp.Contains(c.ID) && c.OrderGroupProductID == objGop.OrderGroupProductID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel) > 0)
                                {
                                    var objS = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == null && !tmp.Contains(c.ID) && c.OrderGroupProductID == objGop.OrderGroupProductID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                                    tmp.Add(objS.ID);
                                    if (objS.Ton <= Math.Round(value - objGop.Ton, NoDigit, MidpointRounding.AwayFromZero))
                                    {
                                        objGop.ModifiedBy = Account.UserName;
                                        objGop.ModifiedDate = DateTime.Now;
                                        objGop.TonBBGN = objGop.TonTranfer = objGop.Ton = Math.Round(objGop.Ton + objS.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.CBMBBGN = objGop.CBMTranfer = objGop.CBM = Math.Round(objGop.CBM + objS.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.QuantityBBGN = objGop.QuantityTranfer = objGop.QuantityLoading = objGop.Quantity = Math.Round(objGop.Quantity + objS.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                        //Xóa nhóm hàng.
                                        foreach (var o in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == objS.ID))
                                        {
                                            model.OPS_DITOProduct.Remove(o);
                                        }
                                        model.OPS_DITOGroupProduct.Remove(objS);
                                    }
                                    else
                                    {
                                        //Giảm sản lượng nhóm hàng.
                                        double baseCBM = objS.CBM / objS.Ton;
                                        double baseQty = objS.Quantity / objS.Ton;

                                        objGop.ModifiedBy = Account.UserName;
                                        objGop.ModifiedDate = DateTime.Now;
                                        var tmpValue = (value - objGop.Ton);
                                        objGop.TonBBGN = objGop.TonTranfer = objGop.Ton = Math.Round(objGop.Ton + tmpValue, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.CBMBBGN = objGop.CBMTranfer = objGop.CBM = Math.Round(objGop.Ton * baseCBM, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.QuantityBBGN = objGop.QuantityTranfer = objGop.QuantityLoading = objGop.Quantity = Math.Round(objGop.Ton * baseQty, NoDigit, MidpointRounding.AwayFromZero);

                                        objS.ModifiedBy = Account.UserName;
                                        objS.ModifiedDate = DateTime.Now;
                                        objS.TonBBGN = objS.TonTranfer = objS.Ton = Math.Round(objS.Ton - tmpValue, NoDigit, MidpointRounding.AwayFromZero);
                                        objS.CBMBBGN = objS.CBMTranfer = objS.CBM = Math.Round(objS.Ton * baseCBM, NoDigit, MidpointRounding.AwayFromZero);
                                        objS.QuantityBBGN = objS.QuantityTranfer = objS.QuantityLoading = objS.Quantity = Math.Round(objS.Ton * baseQty, NoDigit, MidpointRounding.AwayFromZero);
                                        var objPs = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == objS.ID);
                                        if (objPs != null)
                                        {
                                            objPs.ModifiedBy = Account.UserName;
                                            objPs.ModifiedDate = DateTime.Now;
                                            objPs.Quantity = objPs.QuantityBBGN = objPs.QuantityTranfer = objS.Ton;
                                        }
                                    }
                                }
                                var objGPs = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == objGop.ID);
                                if (objGPs != null)
                                {
                                    objGPs.ModifiedBy = Account.UserName;
                                    objGPs.ModifiedDate = DateTime.Now;
                                    objGPs.Quantity = objGPs.QuantityBBGN = objGPs.QuantityTranfer = objGop.Ton;
                                }
                                model.SaveChanges();
                            }
                            break;
                        case 2:
                            if (value > objGop.CBM + 0.001)
                            {
                                while (objGop.CBM < value && model.OPS_DITOGroupProduct.Count(c => c.DITOMasterID == null && !tmp.Contains(c.ID) && c.OrderGroupProductID == objGop.OrderGroupProductID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel) > 0)
                                {
                                    var objS = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == null && !tmp.Contains(c.ID) && c.OrderGroupProductID == objGop.OrderGroupProductID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                                    tmp.Add(objS.ID);
                                    if (objS.CBM <= Math.Round(value - objGop.CBM, NoDigit, MidpointRounding.AwayFromZero))
                                    {
                                        objGop.ModifiedBy = Account.UserName;
                                        objGop.ModifiedDate = DateTime.Now;
                                        objGop.TonBBGN = objGop.TonTranfer = objGop.Ton = Math.Round(objGop.Ton + objS.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.CBMBBGN = objGop.CBMTranfer = objGop.CBM = Math.Round(objGop.CBM + objS.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.QuantityBBGN = objGop.QuantityTranfer = objGop.QuantityLoading = objGop.Quantity = Math.Round(objGop.Quantity + objS.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                        //Xóa nhóm hàng.
                                        foreach (var o in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == objS.ID))
                                        {
                                            model.OPS_DITOProduct.Remove(o);
                                        }
                                        model.OPS_DITOGroupProduct.Remove(objS);
                                    }
                                    else
                                    {
                                        //Giảm sản lượng nhóm hàng.
                                        double baseTon = objS.Ton / objS.CBM;
                                        double baseQty = objS.Quantity / objS.CBM;

                                        objGop.ModifiedBy = Account.UserName;
                                        objGop.ModifiedDate = DateTime.Now;
                                        var tmpValue = (value - objGop.CBM);
                                        objGop.CBMBBGN = objGop.CBMTranfer = objGop.CBM = Math.Round(objGop.CBM + tmpValue, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.TonBBGN = objGop.TonTranfer = objGop.Ton = Math.Round(objGop.CBM * baseTon, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.QuantityBBGN = objGop.QuantityTranfer = objGop.QuantityLoading = objGop.Quantity = Math.Round(objGop.CBM * baseQty, NoDigit, MidpointRounding.AwayFromZero);

                                        objS.ModifiedBy = Account.UserName;
                                        objS.ModifiedDate = DateTime.Now;
                                        objS.CBMBBGN = objS.CBMTranfer = objS.CBM = Math.Round(objS.CBM - tmpValue, NoDigit, MidpointRounding.AwayFromZero);
                                        objS.TonBBGN = objS.TonTranfer = objS.Ton = Math.Round(objS.CBM * baseTon, NoDigit, MidpointRounding.AwayFromZero);
                                        objS.QuantityBBGN = objS.QuantityTranfer = objS.QuantityLoading = objS.Quantity = Math.Round(objS.CBM * baseQty, NoDigit, MidpointRounding.AwayFromZero);
                                        var objPs = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == objS.ID);
                                        if (objPs != null)
                                        {
                                            objPs.ModifiedBy = Account.UserName;
                                            objPs.ModifiedDate = DateTime.Now;
                                            objPs.Quantity = objPs.QuantityBBGN = objPs.QuantityTranfer = objS.CBM;
                                        }
                                    }
                                }
                                var objGPs = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == objGop.ID);
                                if (objGPs != null)
                                {
                                    objGPs.ModifiedBy = Account.UserName;
                                    objGPs.ModifiedDate = DateTime.Now;
                                    objGPs.Quantity = objGPs.QuantityBBGN = objGPs.QuantityTranfer = objGop.CBM;
                                }
                                model.SaveChanges();
                            }
                            break;
                        case 3:
                            if (value > objGop.Quantity + 0.001)
                            {
                                while (objGop.Quantity < value && model.OPS_DITOGroupProduct.Count(c => c.DITOMasterID == null && !tmp.Contains(c.ID) && c.OrderGroupProductID == objGop.OrderGroupProductID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel) > 0)
                                {
                                    var objS = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == null && !tmp.Contains(c.ID) && c.OrderGroupProductID == objGop.OrderGroupProductID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                                    tmp.Add(objS.ID);
                                    if (objS.Quantity <= Math.Round(value - objGop.Quantity, NoDigit, MidpointRounding.AwayFromZero))
                                    {
                                        objGop.ModifiedBy = Account.UserName;
                                        objGop.ModifiedDate = DateTime.Now;
                                        objGop.TonBBGN = objGop.TonTranfer = objGop.Ton = Math.Round(objGop.Ton + objS.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.CBMBBGN = objGop.CBMTranfer = objGop.CBM = Math.Round(objGop.CBM + objS.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.QuantityBBGN = objGop.QuantityTranfer = objGop.QuantityLoading = objGop.Quantity = Math.Round(objGop.Quantity + objS.Quantity, NoDigit, MidpointRounding.AwayFromZero);

                                        //Xóa nhóm hàng.
                                        foreach (var o in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == objS.ID))
                                        {
                                            model.OPS_DITOProduct.Remove(o);
                                        }
                                        model.OPS_DITOGroupProduct.Remove(objS);
                                    }
                                    else
                                    {
                                        //Giảm sản lượng nhóm hàng.
                                        double baseTon = objS.Ton / objS.Quantity;
                                        double baseCBM = objS.CBM / objS.Quantity;

                                        objGop.ModifiedBy = Account.UserName;
                                        objGop.ModifiedDate = DateTime.Now;
                                        var tmpValue = (value - objGop.Quantity);
                                        objGop.QuantityBBGN = objGop.QuantityTranfer = objGop.QuantityLoading = objGop.Quantity = Math.Round(objGop.Quantity + tmpValue, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.TonBBGN = objGop.TonTranfer = objGop.Ton = Math.Round(objGop.Quantity * baseTon, NoDigit, MidpointRounding.AwayFromZero);
                                        objGop.CBMBBGN = objGop.CBMTranfer = objGop.CBM = Math.Round(objGop.Quantity * baseCBM, NoDigit, MidpointRounding.AwayFromZero);

                                        objS.ModifiedBy = Account.UserName;
                                        objS.ModifiedDate = DateTime.Now;
                                        objS.QuantityBBGN = objS.QuantityTranfer = objS.QuantityLoading = objS.Quantity = Math.Round(objS.Quantity - tmpValue, NoDigit, MidpointRounding.AwayFromZero);
                                        objS.TonBBGN = objS.TonTranfer = objS.Ton = Math.Round(objS.Quantity * baseTon, NoDigit, MidpointRounding.AwayFromZero);
                                        objS.CBMBBGN = objS.CBMTranfer = objS.CBM = Math.Round(objS.Quantity * baseCBM, NoDigit, MidpointRounding.AwayFromZero);
                                        var objPs = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == objS.ID);
                                        if (objPs != null)
                                        {
                                            objPs.ModifiedBy = Account.UserName;
                                            objPs.ModifiedDate = DateTime.Now;
                                            objPs.Quantity = objPs.QuantityBBGN = objPs.QuantityTranfer = objS.Quantity;
                                        }
                                    }
                                }
                                var objGPs = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == objGop.ID);
                                if (objGPs != null)
                                {
                                    objGPs.ModifiedBy = Account.UserName;
                                    objGPs.ModifiedDate = DateTime.Now;
                                    objGPs.Quantity = objGPs.QuantityBBGN = objGPs.QuantityTranfer = objGop.Quantity;
                                }
                                model.SaveChanges();
                            }
                            break;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_2View_Master_Update(DTOOPSDI_MAP_Trip item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.ETA == null || item.ETD == null)
                        throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA");
                    if (item.VendorOfVehicleID == null && (item.LocationStartID < 1 || item.LocationEndID < 1))
                        throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin điểm bắt đầu/kết thúc");
                    if (item.ETD >= item.ETA)
                        throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA");
                    if (item.VendorOfVehicleID == null || item.VendorOfVehicleID < 1 || item.VendorOfVehicleID == Account.SYSCustomerID)
                    {
                        var cDriver = OPS_FindFLMDriver(model, item.DriverName);
                        if (cDriver == null || cDriver < 1)
                            throw FaultHelper.BusinessFault(null, null, "Tài xế không tồn tại.");
                    }

                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved)
                        {
                            OPS_CheckingTime(model, OPS_SystemSetting_Get(model), obj.ID, item.VehicleID, null, item.ETD, item.ETA, false);
                            obj.VehicleID = item.VehicleID;
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.VendorOfVehicleID = null;
                            if (item.VendorOfVehicleID > 0)
                                obj.VendorOfVehicleID = item.VendorOfVehicleID;
                            obj.ETA = item.ETA;
                            obj.ETD = item.ETD;
                            obj.DriverTel1 = item.DriverTel;
                            obj.DriverName1 = item.DriverName;
                            obj.DriverID1 = OPS_FindFLMDriver(model, obj.DriverName1);
                            obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                            model.SaveChanges();
                            HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                            HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster, null);
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Chỉ được cập nhật các chuyến đang lập kế hoạch.");
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDI_MAP_Schedule_Data OPSDI_MAP_New_Schedule_Data(bool isShowVehicle, string strVehicle, int typeOfResource, List<int> dataCus, List<int> dataStatus)
        {
            try
            {
                DTOOPSDI_MAP_Schedule_Data result = new DTOOPSDI_MAP_Schedule_Data();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    if (typeOfResource == 1)
                    {
                        if (isShowVehicle)
                        {
                            var dataVehHome = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_Map_Schedule_Group
                            {
                                ID = c.ID,
                                VehicleID = c.VehicleID,
                                VehicleNo = c.CAT_Vehicle.RegNo,
                                VendorID = -1,
                                VendorCode = "Xe nhà",
                                VendorName = "Xe nhà",
                                Text = c.CAT_Vehicle.RegNo
                            }).ToList();
                            var dataVehVend = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.CustomerID) : true) && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_Map_Schedule_Group
                            {
                                ID = c.ID,
                                VehicleID = c.VehicleID,
                                VehicleNo = c.CAT_Vehicle.RegNo,
                                VendorID = c.CustomerID,
                                VendorCode = c.CUS_Customer.Code,
                                VendorName = c.CUS_Customer.CustomerName,
                                Text = c.CAT_Vehicle.RegNo
                            }).ToList();
                            var dataVend = model.CUS_Customer.Where(c => !c.IsSystem && c.ID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ID) : true) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSDI_Map_Schedule_Group
                            {
                                ID = c.ID,
                                VehicleID = -1,
                                VehicleNo = string.Empty,
                                VendorID = c.ID,
                                VendorCode = c.Code,
                                VendorName = c.CustomerName,
                                Text = c.Code
                            }).ToList();
                            result.Resources = new List<DTOOPSDI_Map_Schedule_Group>();
                            var homeGroup = new DTOOPSDI_Map_Schedule_Group();
                            homeGroup.Text = "Xe nhà";
                            homeGroup.ID = -1;
                            homeGroup.VehicleID = -1;
                            homeGroup.VehicleNo = string.Empty;
                            homeGroup.VendorID = -1;
                            homeGroup.VendorCode = "Xe nhà";
                            homeGroup.VendorName = "Xe nhà";

                            if (strVehicle.Trim() != string.Empty)
                            {
                                if (dataVehHome.Count(c => c.Text.ToLower().Contains(strVehicle.Trim().ToLower())) > 0)
                                {
                                    result.Resources.Add(homeGroup);
                                    result.Resources.AddRange(dataVehHome.Where(c => c.Text.ToLower().Contains(strVehicle.Trim().ToLower())).ToList());
                                }
                            }
                            else
                            {
                                result.Resources.Add(homeGroup);
                                result.Resources.AddRange(dataVehHome);
                            }

                            foreach (var item in dataVend)
                            {
                                if (strVehicle.Trim() != string.Empty)
                                {
                                    if (dataVehVend.Count(c => c.VendorID == item.VendorID && c.Text.ToLower().Contains(strVehicle.Trim().ToLower())) > 0)
                                    {
                                        result.Resources.Add(item);
                                        result.Resources.AddRange(dataVehVend.Where(c => c.VendorID == item.VendorID && c.Text.ToLower().Contains(strVehicle.Trim().ToLower())).ToList());
                                    }
                                }
                                else
                                {
                                    result.Resources.Add(item);
                                    result.Resources.AddRange(dataVehVend.Where(c => c.VendorID == item.VendorID).ToList());
                                }
                            }

                            var dataFLMTime = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 0 && c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_Map_Schedule_Event
                            {
                                ID = c.ReferID,
                                StartDate = c.DateFromActual,
                                EndDate = c.DateToActual,
                                GroupID = c.FLM_Asset.VehicleID.Value,
                                VehicleID = c.FLM_Asset.VehicleID.Value,
                                VendorID = -1,
                                StatusOfEvent = c.TypeOfAssetTimeSheetID,
                                TypeOfEvent = c.StatusOfAssetTimeSheetID
                            }).ToList();
                            var dataOPSVend = model.OPS_DITOMaster.Where(c => c.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterPlanning && c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID).Select(c => new DTOOPSDI_Map_Schedule_Event
                            {
                                ID = c.ID,
                                Code = c.Code,
                                StartDate = c.ATD ?? c.ETD.Value,
                                EndDate = c.ATA ?? c.ETA.Value,
                                GroupID = c.VehicleID ?? c.VendorOfVehicleID.Value,
                                VendorID = c.VendorOfVehicleID.Value,
                                VehicleID = c.VehicleID ?? -1,
                                StatusOfEvent = c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved || c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPlanning ? 1 : c.StatusOfDITOMasterID < -(int)SYSVarType.StatusOfDITOMasterReceived ? 2 : 3,
                                TypeOfEvent = 1,
                                TOMasterMode = c.TransportModeID.HasValue && c.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL ? 1 : 2
                            }).ToList();

                            result.DataSources = new List<DTOOPSDI_Map_Schedule_Event>();
                            foreach (var item in dataFLMTime)
                            {
                                switch (item.TypeOfEvent)
                                {
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster:
                                        var objRef = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                                        if (objRef != null)
                                        {
                                            var flag = true;
                                            if (flag && dataCus.Count > 0)
                                            {
                                                flag = model.OPS_DITOGroupProduct.Count(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)) > 0;
                                            }

                                            if (flag)
                                            {
                                                item.Code = objRef.Code;
                                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                                item.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_MAP_GroupProductLite
                                                {
                                                    ID = c.ID,
                                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                                    CusCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                                                    DisCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "Kho KH",
                                                    GOPCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                                    PROCode = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty,
                                                    DNCode = c.DNCode,
                                                    SOCode = c.ORD_GroupProduct.SOCode,
                                                    ModeName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                                    Ton = c.Ton,
                                                    CBM = c.CBM,
                                                    Qty = c.Quantity,
                                                    TempMax = c.ORD_GroupProduct.TempMax,
                                                    TempMin = c.ORD_GroupProduct.TempMin,
                                                    ETA = c.ORD_GroupProduct.ETA,
                                                    ETD = c.ORD_GroupProduct.ETD,
                                                    From = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                                    To = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                                    Route = c.CUSRoutingID.HasValue ? c.CUS_Routing.Code : string.Empty
                                                }).Distinct().ToList();

                                                item.Title = string.Empty;
                                                item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                                item.Ton = item.ListGroupProduct.Sum(c => c.Ton);
                                                item.Title += item.ListGroupProduct.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T ";
                                                item.Title += string.Join(",", item.ListGroupProduct.Select(c => c.Route).Distinct().ToList());
                                                item.StatusOfEvent = objRef.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPlanning || objRef.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : objRef.StatusOfDITOMasterID < -(int)SYSVarType.StatusOfDITOMasterReceived ? 2 : 3;
                                                if (dataStatus.Count == 0 || dataStatus.Contains(item.StatusOfEvent))
                                                {
                                                    if (item.StatusOfEvent == 1)
                                                    {
                                                        if (objRef.VehicleID > 2 && objRef.DriverName1 != null && objRef.DriverName1 != string.Empty)
                                                        {
                                                            item.StatusOfEvent = 11;
                                                        }
                                                    }
                                                    item.TypeOfEvent = 1;
                                                    result.DataSources.Add(item);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (dataStatus.Count == 0 || dataStatus.Contains(4))
                                            {
                                                item.Title = string.Empty;
                                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                                item.TypeOfEvent = 1;
                                                item.StatusOfEvent = -1;
                                                result.DataSources.Add(item);
                                            }
                                        }
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                        if (dataStatus.Count == 0 || dataStatus.Contains(4))
                                        {
                                            var objAct = model.FLM_Activity.FirstOrDefault(c => c.ID == item.ID);
                                            if (objAct != null)
                                            {
                                                if (dataCus.Count == 0)
                                                {
                                                    item.Code = "AC" + item.ID.ToString(COCodeNum);
                                                    item.StatusOfEvent = 3;
                                                    item.TypeOfEvent = item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetMaintence ? 2 : item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetRegistry ? 3 : 4;
                                                    item.Title = string.Empty;
                                                    result.DataSources.Add(item);
                                                }
                                            }
                                            else
                                            {
                                                item.Title = string.Empty;
                                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                                item.TypeOfEvent = 1;
                                                item.StatusOfEvent = -1;
                                                result.DataSources.Add(item);
                                            }
                                        }
                                        break;
                                    default: break;
                                }
                            }
                            foreach (var item in dataOPSVend)
                            {
                                var objRef = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objRef != null)
                                {
                                    var flag = true;
                                    if (flag && dataCus.Count > 0)
                                    {
                                        flag = model.OPS_DITOGroupProduct.Count(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)) > 0;
                                    }
                                    if (flag && dataStatus.Count > 0)
                                    {
                                        flag = dataStatus.Contains(item.StatusOfEvent);
                                    }
                                    if (flag)
                                    {
                                        item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_MAP_GroupProductLite
                                        {
                                            ID = c.ID,
                                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                            CusCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                                            DisCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "Kho KH",
                                            GOPCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                            PROCode = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty,
                                            DNCode = c.DNCode,
                                            SOCode = c.ORD_GroupProduct.SOCode,
                                            ModeName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                            Ton = c.Ton,
                                            CBM = c.CBM,
                                            Qty = c.Quantity,
                                            TempMax = c.ORD_GroupProduct.TempMax,
                                            TempMin = c.ORD_GroupProduct.TempMin,
                                            ETA = c.ORD_GroupProduct.ETA,
                                            ETD = c.ORD_GroupProduct.ETD,
                                            From = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                            To = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                            Route = c.CUSRoutingID.HasValue ? c.CUS_Routing.Code : string.Empty
                                        }).Distinct().ToList();

                                        item.Title = string.Empty;
                                        item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                        item.Ton = item.ListGroupProduct.Sum(c => c.Ton);
                                        item.Title += item.ListGroupProduct.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T ";
                                        item.Title += string.Join(",", item.ListGroupProduct.Select(c => c.Route).Distinct().ToList());
                                        result.DataSources.Add(item);
                                    }
                                }
                            }
                        }
                        else
                        {
                            var dataVend = model.CUS_Customer.Where(c => !c.IsSystem && c.ID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ID) : true) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSDI_Map_Schedule_Group
                            {
                                ID = c.ID,
                                VehicleID = -1,
                                VehicleNo = string.Empty,
                                VendorID = c.ID,
                                VendorCode = c.Code,
                                VendorName = c.CustomerName,
                                Text = c.Code
                            }).ToList();
                            result.Resources = new List<DTOOPSDI_Map_Schedule_Group>();
                            var homeGroup = new DTOOPSDI_Map_Schedule_Group();
                            homeGroup.Text = "Xe nhà";
                            homeGroup.ID = Account.SYSCustomerID;
                            homeGroup.VehicleID = -1;
                            homeGroup.VehicleNo = string.Empty;
                            homeGroup.VendorID = -1;
                            homeGroup.VendorCode = "Xe nhà";
                            homeGroup.VendorName = "Xe nhà";
                            result.Resources.Add(homeGroup);
                            result.Resources.AddRange(dataVend);

                            var dataFLMTimeTemp = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 0 && c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_Map_Schedule_Event
                            {
                                ID = c.ReferID,
                                StartDate = c.DateFromActual,
                                EndDate = c.DateToActual,
                                GroupID = c.FLM_Asset.VehicleID.Value,
                                VehicleID = -1,
                                VendorID = -1,
                                StatusOfEvent = c.TypeOfAssetTimeSheetID,
                                TypeOfEvent = c.StatusOfAssetTimeSheetID
                            }).OrderBy(c => c.StartDate).ThenBy(c => c.EndDate).ToList();
                            var dataOPSVendTemp = model.OPS_DITOMaster.Where(c => c.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterPlanning && c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID).Select(c => new DTOOPSDI_Map_Schedule_Event
                            {
                                ID = c.ID,
                                Code = c.Code,
                                StartDate = c.ATD ?? c.ETD.Value,
                                EndDate = c.ATA ?? c.ETA.Value,
                                GroupID = c.VehicleID ?? c.VendorOfVehicleID.Value,
                                VendorID = c.VendorOfVehicleID.Value,
                                VehicleID = -1,
                                StatusOfEvent = c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved || c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPlanning ? 1 : 2,
                                TypeOfEvent = 1
                            }).ToList();

                            result.DataSources = new List<DTOOPSDI_Map_Schedule_Event>();
                            var objEvent = new DTOOPSDI_Map_Schedule_Event();
                            objEvent.ID = Account.SYSCustomerID;
                            objEvent.VendorID = -1;
                            objEvent.Code = string.Empty;
                            objEvent.Title = "";
                            objEvent.VehicleID = -1;
                            objEvent.TypeOfEvent = -1;

                            var dataFLMTime = new List<DTOOPSDI_Map_Schedule_Event>();
                            var dataOPSVend = new List<DTOOPSDI_Map_Schedule_Event>();
                            foreach (var item in dataFLMTimeTemp)
                            {
                                var objRef = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objRef != null)
                                {
                                    var flag = true;
                                    if (flag && dataCus.Count > 0)
                                    {
                                        flag = model.OPS_DITOGroupProduct.Count(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)) > 0;
                                    }
                                    item.StatusOfEvent = objRef.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPlanning || objRef.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : objRef.StatusOfDITOMasterID < -(int)SYSVarType.StatusOfDITOMasterReceived ? 2 : 3;
                                    if (flag && dataStatus.Count > 0)
                                    {
                                        flag = dataStatus.Contains(item.StatusOfEvent);
                                    }
                                    if (flag)
                                    {
                                        dataFLMTime.Add(item);
                                    }
                                }
                            }
                            foreach (var item in dataOPSVendTemp)
                            {
                                var objRef = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objRef != null)
                                {
                                    var flag = true;
                                    if (flag && dataCus.Count > 0)
                                    {
                                        flag = model.OPS_DITOGroupProduct.Count(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)) > 0;
                                    }
                                    if (flag && dataStatus.Count > 0)
                                    {
                                        flag = dataStatus.Contains(item.StatusOfEvent);
                                    }
                                    if (flag)
                                    {
                                        dataOPSVend.Add(item);
                                    }
                                }
                            }

                            foreach (var item in dataFLMTime.OrderBy(c => c.StartDate).ThenBy(c => c.EndDate).ToList())
                            {
                                if (objEvent.StartDate == DateTime.MinValue) objEvent.StartDate = item.StartDate;
                                if (objEvent.EndDate == DateTime.MinValue) objEvent.EndDate = item.EndDate;
                                if (item.StartDate > objEvent.EndDate)
                                {
                                    result.DataSources.Add(objEvent);
                                    objEvent = new DTOOPSDI_Map_Schedule_Event();
                                    objEvent.ID = Account.SYSCustomerID;
                                    objEvent.VendorID = -1;
                                    objEvent.Code = string.Empty;
                                    objEvent.Title = "";
                                    objEvent.VehicleID = -1;
                                    objEvent.TypeOfEvent = -1;
                                    objEvent.StartDate = item.StartDate;
                                    objEvent.EndDate = item.EndDate;
                                }
                                if (objEvent.EndDate < item.EndDate)
                                    objEvent.EndDate = item.EndDate;
                            }
                            if (objEvent.StartDate != null && objEvent.EndDate != null)
                                result.DataSources.Add(objEvent);
                            foreach (var group in dataOPSVend.GroupBy(c => c.VendorID).ToList())
                            {
                                objEvent = new DTOOPSDI_Map_Schedule_Event();
                                objEvent.ID = group.Key;
                                objEvent.VendorID = group.Key;
                                objEvent.VehicleID = -1;
                                objEvent.TypeOfEvent = -1;
                                objEvent.Code = string.Empty;
                                objEvent.Title = "";
                                foreach (var item in group.OrderBy(c => c.StartDate).ThenBy(c => c.EndDate).ToList())
                                {
                                    if (objEvent.StartDate == DateTime.MinValue) objEvent.StartDate = item.StartDate;
                                    if (objEvent.EndDate == DateTime.MinValue) objEvent.EndDate = item.EndDate;
                                    if (item.StartDate > objEvent.EndDate)
                                    {
                                        result.DataSources.Add(objEvent);
                                        objEvent = new DTOOPSDI_Map_Schedule_Event();
                                        objEvent.ID = group.Key;
                                        objEvent.VendorID = group.Key;
                                        objEvent.VehicleID = -1;
                                        objEvent.TypeOfEvent = -1;
                                        objEvent.Code = string.Empty;
                                        objEvent.Title = "";
                                        objEvent.StartDate = item.StartDate;
                                        objEvent.EndDate = item.EndDate;
                                    }
                                    if (objEvent.EndDate < item.EndDate)
                                        objEvent.EndDate = item.EndDate;
                                }
                                if (objEvent.StartDate != null && objEvent.EndDate != null)
                                    result.DataSources.Add(objEvent);
                            }
                        }
                    }
                    else if (typeOfResource == 2)
                    {
                        result.Resources = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.DITOMasterID > 0 && (dataCus.Count > 0 ? dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) : true)
                            && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_Map_Schedule_Group
                            {
                                ID = c.ORD_GroupProduct.OrderID,
                                VehicleID = -1,
                                TOMasterID = c.DITOMasterID.Value,
                                Value = c.ORD_GroupProduct.OrderID,
                                Text = c.ORD_GroupProduct.ORD_Order.Code + "-" + c.ORD_GroupProduct.CUS_GroupOfProduct.Code + "-" + c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name
                            }).Distinct().ToList();
                        var dataOPSTemp = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterPlanning).Select(c => new DTOOPSDI_Map_Schedule_Event
                        {
                            ID = c.ID,
                            Code = c.Code,
                            StartDate = c.ATD ?? c.ETD.Value,
                            EndDate = c.ATA ?? c.ETA.Value,
                            GroupID = c.ID,
                            Title = "",
                            VendorID = -1,
                            StatusOfEvent = c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved || c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPlanning ? 1 : c.StatusOfDITOMasterID < -(int)SYSVarType.StatusOfDITOMasterReceived ? 2 : 3,
                            TypeOfEvent = 1
                        }).ToList();

                        var copy = new CopyHelper();
                        result.DataSources = new List<DTOOPSDI_Map_Schedule_Event>();
                        foreach (var item in dataOPSTemp)
                        {
                            var objRef = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                            if (objRef != null)
                            {
                                var flag = true;
                                if (flag && dataCus.Count > 0)
                                {
                                    flag = model.OPS_DITOGroupProduct.Count(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)) > 0;
                                }
                                if (flag && dataStatus.Count > 0)
                                {
                                    flag = dataStatus.Contains(item.StatusOfEvent);
                                }
                                if (flag)
                                {
                                    item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                    item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                    item.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_MAP_GroupProductLite
                                    {
                                        ID = c.ID,
                                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                        CusCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                                        DisCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "Kho KH",
                                        GOPCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                        PROCode = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty,
                                        DNCode = c.DNCode,
                                        SOCode = c.ORD_GroupProduct.SOCode,
                                        ModeName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                        Ton = c.Ton,
                                        CBM = c.CBM,
                                        Qty = c.Quantity,
                                        TempMax = c.ORD_GroupProduct.TempMax,
                                        TempMin = c.ORD_GroupProduct.TempMin,
                                        ETA = c.ORD_GroupProduct.ETA,
                                        ETD = c.ORD_GroupProduct.ETD,
                                        From = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                        To = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                        Route = c.CUSRoutingID.HasValue ? c.CUS_Routing.Code : string.Empty
                                    }).Distinct().ToList();

                                    item.Title = string.Empty;
                                    item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                    item.Ton = item.ListGroupProduct.Sum(c => c.Ton);
                                    item.Title += item.ListGroupProduct.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T ";
                                    item.Title += string.Join(",", item.ListGroupProduct.Select(c => c.Route).Distinct().ToList());
                                    if (item.StatusOfEvent == 1)
                                    {
                                        if (objRef.VehicleID > 2 && objRef.DriverName1 != null && objRef.DriverName1 != string.Empty)
                                        {
                                            item.StatusOfEvent = 11;
                                        }
                                    }
                                    foreach (var o in result.Resources.Where(c => c.TOMasterID == item.ID))
                                    {
                                        DTOOPSDI_Map_Schedule_Event tmp = new DTOOPSDI_Map_Schedule_Event();
                                        copy.Copy(item, tmp);
                                        tmp.GroupID = o.ID;
                                        result.DataSources.Add(tmp);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {

                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSDI_MAP_New_Schedule_DITOGroupProduct_List(string request, int vendorID, DateTime fDate, DateTime tDate, List<int> dataCus, List<int> dataStatus)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var dataStatusNew = new List<int>();
                    if (dataStatus.Count > 0)
                    {
                        if (dataStatus.Contains(1))
                        {
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfDITOMasterPlanning);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfDITOMasterApproved);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfDITOMasterApproveAgain);
                        }
                        if (dataStatus.Contains(2))
                        {
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfDITOMasterTendered);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfDITOMasterDelivery);
                        }
                        if (dataStatus.Contains(3))
                        {
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfDITOMasterReceived);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfDITOMasterInvoicePart);
                            dataStatusNew.Add(-(int)SYSVarType.StatusOfDITOMasterInvoice);
                        }
                    }
                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterPlanning && c.OPS_DITOMaster.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterSendTender
                        && (isAdmin ? true : c.OrderGroupProductID == null || (Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)) && (dataCus.Count > 0 ? dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) : true))
                        && (dataStatus.Count > 0 ? dataStatusNew.Contains(c.OPS_DITOMaster.StatusOfDITOMasterID) : true) && c.OPS_DITOMaster.ETD >= fDate && c.OPS_DITOMaster.ETD < tDate).Select(c => new DTOOPSDI_MAP_GroupProduct
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID.Value,
                            TOMasterCode = c.OPS_DITOMaster.Code,
                            TOVehicleID = c.OPS_DITOMaster.VehicleID ?? -1,
                            TOVehicleNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            TOVendorID = c.OPS_DITOMaster.VendorOfVehicleID,
                            TOVendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 && c.OPS_DITOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà",
                            TODriverName = c.OPS_DITOMaster.DriverName1,
                            TODriverTel = c.OPS_DITOMaster.DriverTel1,
                            TOETA = c.OPS_DITOMaster.ETA,
                            TOETD = c.OPS_DITOMaster.ETD,
                            TOCreatedBy = c.OPS_DITOMaster.CreatedBy,
                            TOCreatedDate = c.OPS_DITOMaster.CreatedDate,
                            TOLastUpdate = string.IsNullOrEmpty(c.OPS_DITOMaster.ModifiedBy) ? c.OPS_DITOMaster.CreatedBy : c.OPS_DITOMaster.ModifiedBy,
                            TOLastUpdateTime = c.OPS_DITOMaster.ModifiedDate ?? c.OPS_DITOMaster.CreatedDate,
                            TOStatus = c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : 2,
                            IsFTL = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL : false,

                            OrderCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.Code : string.Empty,
                            CustomerCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code : string.Empty,
                            CustomerShortName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName : string.Empty,
                            DistributorCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty : string.Empty,
                            DistributorName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty : string.Empty,
                            OrderGroupProductID = c.OrderGroupProductID ?? -1,
                            GroupProductCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_GroupOfProduct.Code : string.Empty,
                            GroupProductName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName : string.Empty,
                            ProductCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty : string.Empty,
                            ProductName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName : string.Empty : string.Empty,
                            GroupSort = c.GroupSort,
                            TransportModeName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name : string.Empty,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            ETA = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ETA : null,
                            ETD = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ETD : null,
                            DNCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.DNCode : string.Empty,
                            SOCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.SOCode : string.Empty,
                            TempMax = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.TempMax : null,
                            TempMin = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.TempMin : null,
                            UserDefine1 = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.UserDefine1 : string.Empty,
                            UserDefine2 = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.UserDefine2 : string.Empty,
                            LocationFromID = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationID : -1,
                            LocationFromCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationFromName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : string.Empty,
                            LocationFromAddress = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : string.Empty,
                            LocationToID = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationID : -1,
                            LocationToCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSDI_MAP_GroupProduct>;
                    var objSetting = OPS_SystemSetting_Get(model);
                    if (objSetting.WarningETD)
                    {
                        foreach (DTOOPSDI_MAP_GroupProduct item in result.Data)
                        {
                            if (item.TOStatus == 1 && item.TOETD.HasValue && item.TOETD < DateTime.Now)
                            {
                                item.IsWarning = true;
                                item.WarningType = 1;
                                item.WarningTime = DateTime.Now.Subtract(item.TOETD.Value).TotalHours;
                                item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ kế hoạch vận chuyển";
                            }
                            else if (item.TOStatus == 1 && objSetting.TimeDelayWarning > 0 && item.TOETD.HasValue && item.TOETD < DateTime.Now.AddHours(objSetting.TimeDelayWarning))
                            {
                                item.IsWarning = true;
                                item.WarningType = 1;
                                item.WarningTime = DateTime.Now.Subtract(item.TOETD.Value).TotalHours;
                                item.WarningMsg = "Còn " + Math.Round(item.WarningTime, 1) + " giờ để kịp kế hoạch vận chuyển";
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDI_MAP_Vehicle OPSDI_MAP_TimeLine_Vehicle_Info(int venID, int vehID, DateTime now)
        {
            try
            {
                DTOOPSDI_MAP_Vehicle result = new DTOOPSDI_MAP_Vehicle();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (venID < 1)
                    {
                        result.VendorName = "Xe nhà";
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehID);
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.Regno = obj.RegNo;
                            result.MaxWeight = obj.MaxWeight ?? 0;
                            var objD = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == obj.ID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain && c.DateFrom <= now && c.DateTo >= now);
                            if (objD != null)
                            {
                                result.DriverName = objD.FLM_Driver.CAT_Driver.LastName + " " + objD.FLM_Driver.CAT_Driver.FirstName;
                            }
                            else
                            {
                                if (OPS_FindFLMDriver(model, obj.DriverName) > 0)
                                    result.DriverName = obj.DriverName;
                            }
                        }
                        else
                        {
                            obj = model.CAT_Vehicle.FirstOrDefault();
                            if (obj != null)
                            {
                                result.ID = obj.ID;
                                result.Regno = obj.RegNo;
                                result.MaxWeight = obj.MaxWeight ?? 0;
                                var objD = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == obj.ID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain && c.DateFrom <= now && c.DateTo >= now);
                                if (objD != null)
                                {
                                    result.DriverName = objD.FLM_Driver.CAT_Driver.LastName + " " + objD.FLM_Driver.CAT_Driver.FirstName;
                                }
                                else
                                {
                                    if (OPS_FindFLMDriver(model, obj.DriverName) > 0)
                                        result.DriverName = obj.DriverName;
                                }
                            }
                        }
                    }
                    else
                    {
                        var obj = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == vehID && c.CustomerID == venID);
                        if (obj != null)
                        {
                            result.ID = obj.VehicleID;
                            result.Regno = obj.CAT_Vehicle.RegNo;
                            result.MaxWeight = obj.CAT_Vehicle.MaxWeight ?? 0;
                            result.DriverName = obj.CAT_Vehicle.DriverName;
                            result.VendorName = obj.CUS_Customer.Code;
                            result.VendorID = venID;
                        }
                        else
                        {
                            obj = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == venID);
                            if (obj != null)
                            {
                                result.ID = obj.VehicleID;
                                result.Regno = obj.CAT_Vehicle.RegNo;
                                result.DriverName = obj.CAT_Vehicle.DriverName;
                                result.MaxWeight = obj.CAT_Vehicle.MaxWeight ?? 0;
                                result.VendorName = obj.CUS_Customer.Code;
                                result.VendorID = venID;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSDI_MAP_TimeLine_Master_Update_Group(int mID, List<int> dataGroupProduct)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến cần cập nhật!");
                    if (obj.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterApproved)
                        throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Chỉ cập nhật chuyến đang kế hoạch");
                    foreach (var gopID in dataGroupProduct)
                    {
                        var sysGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gopID && c.DITOMasterID == null && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel);
                        if (sysGop == null)
                            throw FaultHelper.BusinessFault(null, null, "Không thể cập nhật! Không tìm thấy nhóm hàng!");
                    }

                    obj.ModifiedDate = DateTime.Now;
                    obj.ModifiedBy = Account.UserName;

                    //Xóa nhóm empty.
                    model.OPS_DITOGroupProduct.RemoveRange(model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID && c.OrderGroupProductID == null).ToList());

                    int sLocation = -1, eLocation = -1;
                    Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();
                    foreach (var o in model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID && c.LocationID > 0).ToList())
                    {
                        if (o.SortOrder == 1 && o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty)
                            sLocation = o.LocationID.Value;
                        if (o.SortOrder > 1 && o.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty)
                            eLocation = o.LocationID.Value;
                        model.OPS_DITOLocation.Remove(o);
                    }

                    int idx = 1;
                    OPS_DITOLocation oLocation = new OPS_DITOLocation();
                    oLocation.LocationID = sLocation;
                    oLocation.OPS_DITOMaster = obj;
                    oLocation.CreatedBy = Account.UserName;
                    oLocation.CreatedDate = DateTime.Now;
                    oLocation.DateComeEstimate = obj.ETD;
                    oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                    var SDATA = new List<int>();
                    var dataGop = new List<DTOOPSDITOGroupProduct>();
                    var dataLocation = new List<DTOOPSDITOLocation>();
                    List<int> dataLocationFrom = new List<int>();
                    List<int> dataLocationTo = new List<int>();

                    var oLs = new DTOOPSDITOLocation();
                    oLs.LocationID = oLocation.LocationID.Value;
                    oLs.DateComeEstimate = oLocation.DateComeEstimate;
                    if ((obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID) && sLocation > 0)
                    {
                        oLocation.SortOrder = idx++;
                        model.OPS_DITOLocation.Add(oLocation);
                        dataLocation.Add(oLs);
                    }

                    var dataOPSGroup = model.OPS_DITOGroupProduct.Where(c => (dataGroupProduct.Contains(c.ID) || c.DITOMasterID == obj.ID) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OrderGroupProductID > 0).ToList();
                    foreach (var objGop in dataOPSGroup)
                    {
                        var objG = new DTOOPSDITOGroupProduct();
                        objG.CATLocationToID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;
                        objG.CATLocationFromID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                        objG.Ton = objGop.Ton;
                        dataGop.Add(objG);

                        SDATA.Add(objGop.ORD_GroupProduct.OrderID);

                        if (objGop.DITOMasterID == null)
                        {
                            objGop.ModifiedBy = Account.UserName;
                            objGop.ModifiedDate = DateTime.Now;
                            objGop.OPS_DITOMaster = obj;
                        }

                        var fID = objGop.ORD_GroupProduct.CUS_Location.LocationID;
                        var tID = objGop.ORD_GroupProduct.CUS_Location1.LocationID;

                        dataLocationFrom.Add(fID);
                        if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                            dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;
                        else if (dicLocationTime[fID] > objGop.ORD_GroupProduct.ETD)
                            dicLocationTime[fID] = objGop.ORD_GroupProduct.ETD;

                        dataLocationTo.Add(tID);
                        if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                            dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                        else if (dicLocationTime[tID] > objGop.ORD_GroupProduct.ETA)
                            dicLocationTime[tID] = objGop.ORD_GroupProduct.ETA;
                    }

                    var tmpID = -1;
                    var dataL = dataLocationFrom.Distinct().ToList();
                    dataL.AddRange(dataLocationTo.Distinct().ToList());
                    dataL = dataL.Distinct().ToList();
                    for (var i = 0; i < dataL.Count; i++)
                    {
                        tmpID = dataL[i];
                        if (i == 0 && tmpID == oLocation.LocationID && (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID))
                        {
                            if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                            else if (dataLocationFrom.Contains(dataL[i]))
                                oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            else
                                oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                        }
                        else
                        {
                            //Create DITOLocation
                            OPS_DITOLocation oL = new OPS_DITOLocation();
                            oL.CreatedBy = Account.UserName;
                            oL.CreatedDate = DateTime.Now;
                            model.OPS_DITOLocation.Add(oL);
                            oL.OPS_DITOMaster = obj;
                            oL.LocationID = dataL[i];
                            oL.SortOrder = idx++;
                            oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                            if (dicLocationTime.ContainsKey(dataL[i]))
                                oL.DateComeEstimate = dicLocationTime[dataL[i]];

                            if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                            else if (dataLocationFrom.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            else
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;

                            var oLsx = new DTOOPSDITOLocation();
                            oLsx.LocationID = oL.LocationID.Value;
                            oLsx.DateComeEstimate = oL.DateComeEstimate;
                            dataLocation.Add(oLsx);
                        }
                    }

                    if (tmpID != eLocation && eLocation > 0)
                    {
                        OPS_DITOLocation osLocation = new OPS_DITOLocation();
                        osLocation.LocationID = eLocation;
                        osLocation.OPS_DITOMaster = obj;
                        osLocation.CreatedBy = Account.UserName;
                        osLocation.CreatedDate = DateTime.Now;
                        osLocation.DateComeEstimate = obj.ETA;
                        osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                        var oLse = new DTOOPSDITOLocation();
                        oLse.LocationID = osLocation.LocationID.Value;
                        oLse.DateComeEstimate = osLocation.DateComeEstimate;

                        if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                        {
                            osLocation.SortOrder = idx++;
                            model.OPS_DITOLocation.Add(osLocation);
                            dataLocation.Add(oLse);
                        }
                    }

                    obj.TotalLocation = idx - 1;

                    if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                        OPSDI_CheckLocationRequired(model, OPS_SystemSetting_Get(model), dataGop, dataLocation, obj.VehicleID.Value);

                    model.SaveChanges();
                    HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                    HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster, null);
                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region NewDI - Import
        public DTOResult OPS_DI_Import_Packet_List(string request, bool isCreated)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());

                    var query = model.OPS_DIImportPacket.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (isCreated ? true : c.IsCreated == false) && ((isAdmin || c.CUS_Setting.CustomerID == Account.SYSCustomerID) ? true : Account.ListCustomerID.Contains(c.CUS_Setting.CustomerID))).Select(c => new DTOOPSDIImportPacket
                    {
                        ID = c.ID,
                        SYSCustomerID = c.SYSCustomerID,
                        PacketName = c.PacketName,
                        Note = c.Note,
                        TotalCBM = c.TotalCBM,
                        TotalQuantity = c.TotalQuantity,
                        TotalTon = c.TotalTon,
                        CUSSettingID = c.CUSSettingID > 0 ? c.CUSSettingID.Value : -1,
                        IsCreated = c.IsCreated
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDIImportPacket>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Import_Packet_Setting_List(string request)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var data = HelperCUSSetting.CUSSettingsOPSImport_GetList(model, Account);
                    var query = data.ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOCUSSettingPlan>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Import_Packet_TOMaster_List(string request, int pID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIImportTOMaster.Where(c => c.DIImportPacketID == pID).Select(c => new DTOOPSDIImportPacketTOMaster
                    {
                        ID = c.ID,
                        CreateSortOrder = c.SortOrder,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        ETD = c.ETD,
                        ETA = c.ETA,
                        SortOrder = c.SortOrder,
                        Note = c.Note,
                        VendorID = c.VendorID,
                        VendorCode = c.VendorID == Account.SYSCustomerID || c.VendorID == null ? "Xe nhà" : c.CUS_Customer.Code,
                        VendorName = c.VendorID == Account.SYSCustomerID || c.VendorID == null ? "Xe nhà" : c.CUS_Customer.CustomerName,
                        IsWarning = c.IsWarning,
                        DriverName = c.DriverName1 ?? string.Empty,
                        DriverTel = c.DriverTel1 ?? string.Empty
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDIImportPacketTOMaster>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Import_Packet_GroupProduct_ByMaster_List(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIImportGroupProduct.Where(c => c.DIImportTOMasterID == masterID).Select(c => new DTOOPSDIImportPacket_GroupProduct
                    {
                        ID = c.ID,
                        GroupName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        GroupCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                        DNCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.DNCode,
                        ETA = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETA,
                        ETD = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETD,
                        LocationFromName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName,
                        LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDIImportPacket_GroupProduct>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Import_Packet_GroupProduct_List(string request, int pID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIImportGroupProduct.Where(c => c.OPS_DIImportTOMaster.DIImportPacketID == pID).Select(c => new DTOOPSDIImportPacketGroupProduct
                    {
                        ID = c.ID,
                        CreateSortOrder = c.OPS_DIImportTOMaster.SortOrder,
                        DIImportTOMasterID = c.DIImportTOMasterID,
                        DITOGroupProductID = c.DITOGroupProductID,
                        GroupProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        GroupProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                        DNCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.DNCode,
                        ETA = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETA,
                        ETD = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETD,
                        ETDStart = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETDStart,
                        ETAStart = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETAStart,
                        CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.Code : "Kho khách hàng",
                        PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "Kho khách hàng",
                        LocationFromName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName,
                        LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName,
                        Note = c.OPS_DITOGroupProduct.Note,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDIImportPacketGroupProduct>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Import_Packet_ORDGroupProduct_List(string request, int pID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == pID).Select(c => new DTOOPSDIImportPacket_GroupProductExport
                    {
                        ID = c.ID,
                        GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        DNCode = c.ORD_GroupProduct.DNCode,
                        SOCode = c.ORD_GroupProduct.SOCode,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                        TypeOfTransportMode = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                        DistributorCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                        ETA = c.ORD_GroupProduct.ETA,
                        ETD = c.ORD_GroupProduct.ETD,
                        LocationFromCode = c.ORD_GroupProduct.CUS_Location.Code,
                        LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                        LocationToCode = c.ORD_GroupProduct.CUS_Location1.Code,
                        LocationToName = c.ORD_GroupProduct.CUS_Location1.LocationName,
                        Ton = c.ORD_GroupProduct.Ton,
                        CBM = c.ORD_GroupProduct.CBM,
                        Quantity = c.ORD_GroupProduct.Quantity
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDIImportPacket_GroupProductExport>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_DI_Import_Packet_ORDGroupProduct_NotIn_List(string request, int sID, int pID)
        {
            try
            {
                var iDICancel = -(int)SYSVarType.DITOGroupProductStatusCancel;
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objSetting = HelperCUSSetting.CUSSettingsOPSImport_Get(model, Account, sID);
                    if (objSetting != null)
                    {
                        var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                        var sKey = CUSSettingKey.Order.ToString();
                        var objSettingOrder = new DTOCUSSettingOrder();
                        var item = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == objSetting.CUSSettingOrderID);
                        if (item != null && !string.IsNullOrEmpty(item.Setting))
                        {
                            var dataExists = model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == pID).Select(c => c.ORDGroupProductID).ToList();
                            objSettingOrder = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrder>(item.Setting);
                            var query = model.OPS_DITOGroupProduct.Where(c => c.IsInput && c.OrderGroupProductID > 0 && (c.DITOMasterID == null || (c.DITOMasterID > 0 && c.OPS_DITOMaster.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL && c.OPS_DITOMaster.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterPlanning))
                            && !dataExists.Contains(c.OrderGroupProductID.Value) && c.DITOGroupProductStatusID != iDICancel && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && (objSettingOrder.TypeOfTransportModeID < 1 ? true : c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == objSettingOrder.TypeOfTransportModeID) && (isAdmin ? true : Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID))).Select(c => new DTOOPSDIImportPacket_GroupProductExport
                            {
                                ID = c.OrderGroupProductID.Value,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                TypeOfTransportMode = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                                GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                Packing = c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty,
                                PackingName = c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName : string.Empty,
                                DistributorCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                                DistributorName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                                LocationFromCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                LocationFromName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : string.Empty,
                                LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                DNCode = c.DNCode,
                                SOCode = c.ORD_GroupProduct.SOCode,
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                            result.Total = query.Total;
                            result.Data = query.Data as IEnumerable<DTOOPSDIImportPacket_GroupProductExport>;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSSettingPlan OPS_DI_Import_Packet_Setting_Get(int sID)
        {
            try
            {
                DTOCUSSettingPlan result = new DTOCUSSettingPlan();
                using (var model = new DataEntities())
                {
                    result = HelperCUSSetting.CUSSettingsOPSImport_Get(model, Account, sID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCUSSettingPlan> OPS_DI_Import_Packet_SettingPlan()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    List<DTOCUSSettingPlan> result = new List<DTOCUSSettingPlan>();
                    result = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.Plan.ToString()).Select(c => new DTOCUSSettingPlan
                    {
                        ID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDIImportPacket OPS_DI_Import_Packet_Get(int pID)
        {
            try
            {
                DTOOPSDIImportPacket result = new DTOOPSDIImportPacket();
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DIImportPacket.FirstOrDefault(c => c.ID == pID && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                    {
                        result.ID = obj.ID;
                        result.IsCreated = obj.IsCreated;
                        result.CUSSettingID = obj.CUSSettingID > 0 ? obj.CUSSettingID.Value : -1;
                        result.CUSSettingName = obj.CUSSettingID > 0 ? obj.CUS_Setting.Name : string.Empty;
                        result.PacketName = obj.PacketName;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDIImportPacket_Data OPS_DI_Import_Packet_Data(int pID, List<string> dataOrders)
        {
            try
            {
                DTOOPSDIImportPacket_Data result = new DTOOPSDIImportPacket_Data();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var dataORD = model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == pID).Select(c => c.ORDGroupProductID).ToList();

                    result.ListVendor = model.CUS_Customer.Where(c => !c.IsSystem && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ID) : true)
                        && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSDIImportPacket_Vendor
                        {
                            ID = c.ID,
                            IsVendor = c.ID != Account.SYSCustomerID,
                            VendorCode = c.Code,
                            VendorName = c.CustomerName
                        }).ToList();
                    var objNew = new DTOOPSDIImportPacket_Vendor();
                    objNew.ID = Account.SYSCustomerID;
                    objNew.IsVendor = false;
                    objNew.VendorName = objNew.VendorCode = "Xe nhà";
                    if (result.ListVendor.Count(c => c.ID == objNew.ID) == 0)
                        result.ListVendor.Insert(0, objNew);

                    result.ListDriver = model.CUS_Driver.Where(c => c.CustomerID != Account.SYSCustomerID).Select(c => new DTOOPSDIImportPacket_Driver
                    {
                        ID = c.CAT_Driver.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        DriverTel = c.CAT_Driver.Cellphone,
                        VendorID = c.CustomerID
                    }).ToList();

                    var dataDriverHome = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOOPSDIImportPacket_Driver
                    {
                        ID = c.CAT_Driver.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        DriverTel = c.CAT_Driver.Cellphone,
                        VendorID = Account.SYSCustomerID
                    }).ToList();

                    result.ListDriver.AddRange(dataDriverHome);

                    result.ListVehicle = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID != Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDIImportPacket_Vehicle
                    {
                        ID = c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VendorID = c.CustomerID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight > 0 ? c.CAT_Vehicle.MaxWeight.Value : 0,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).ToList();

                    var dataVehicleHome = model.FLM_Asset.Where(c => c.VehicleID > 2 && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDIImportPacket_Vehicle
                    {
                        ID = c.VehicleID.Value,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VendorID = Account.SYSCustomerID,
                        DriverName = c.CAT_Vehicle.DriverName,
                        DriverTel = c.CAT_Vehicle.Cellphone,
                        MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).Distinct().ToList();

                    result.ListVehicle.AddRange(dataVehicleHome);

                    result.ListDITOGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && dataORD.Contains(c.OrderGroupProductID.Value) && dataOrders.Contains(c.ORD_GroupProduct.ORD_Order.Code.Trim().ToLower())).Select(c => new DTOOPSDIImportPacket_GroupProduct
                    {
                        ID = c.ID,
                        DNCode = c.ORD_GroupProduct.DNCode ?? string.Empty,
                        SOCode = c.ORD_GroupProduct.SOCode ?? string.Empty,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        TOMasterID = c.DITOMasterID,
                        IsFTL = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        ETA = c.ORD_GroupProduct.ETA,
                        ETD = c.ORD_GroupProduct.ETD,
                        ETARequest = c.ORD_GroupProduct.ETARequest,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                        LocationFromID = c.ORD_GroupProduct.LocationFromID.Value,
                        LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                        LocationToID = c.ORD_GroupProduct.LocationToID.Value,
                        LocationToName = c.ORD_GroupProduct.CUS_Location1.LocationName,
                        GroupID = c.ORD_GroupProduct.GroupOfProductID.Value,
                        GroupCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        TypeOfPacking = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,
                        ProductID = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().ProductID,
                        ProductCode = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code,
                        ProductName = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName,
                        ExchangeTon = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().ExchangeTon,
                        ExchangeCBM = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().ExchangeCBM,
                        ExchangeQuantity = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().ExchangeQuantity,
                        TempMax = c.ORD_GroupProduct.TempMax,
                        TempMin = c.ORD_GroupProduct.TempMin
                    }).ToList();

                    result.ListVehicleTimeSheet = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 0 && c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = c.FLM_Asset.VehicleID.Value,
                        DateFrom = c.DateFromActual,
                        DateTo = c.DateToActual
                    }).ToList();

                    result.ListVehiclePlan = model.FLM_VehiclePlan.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain).Select(c => new DTOFLMVehiclePlan
                    {
                        ID = c.ID,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        DriverID = c.FLM_Driver.DriverID,
                        DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                        VehicleID = c.VehicleID
                    }).ToList();

                    foreach (var item in result.ListDITOGroupProduct)
                    {
                        if (item.TypeOfPacking == -(int)SYSVarType.TypeOfPackingGOPTon)
                            item.TypeOfPacking = 1;
                        else if (item.TypeOfPacking == -(int)SYSVarType.TypeOfPackingGOPCBM)
                            item.TypeOfPacking = 2;
                        else if (item.TypeOfPacking == -(int)SYSVarType.TypeOfPackingGOPTU)
                            item.TypeOfPacking = 3;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSDIImportPacket_GroupProductExport> OPS_DI_Import_Packet_ORDGroupProductExport_List(int pID, List<int> data)
        {
            try
            {
                var iDICancel = -(int)SYSVarType.DITOGroupProductStatusCancel;
                List<DTOOPSDIImportPacket_GroupProductExport> result = new List<DTOOPSDIImportPacket_GroupProductExport>();
                using (var model = new DataEntities())
                {
                    var dataORD = new List<int>();
                    if (data.Count == 0)
                    {
                        dataORD = model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == pID).Select(c => c.ORDGroupProductID).Distinct().ToList();
                    }
                    else
                    {
                        dataORD = model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == pID && data.Contains(c.ID)).Select(c => c.ORDGroupProductID).Distinct().ToList();
                    }
                    result = model.OPS_DITOGroupProduct.Where(c => (c.DITOMasterID == null || (c.DITOMasterID > 0 && c.OPS_DITOMaster.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL && c.OPS_DITOMaster.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterPlanning))
                        && c.DITOGroupProductStatusID != iDICancel && c.OrderGroupProductID > 0 && dataORD.Contains(c.OrderGroupProductID.Value)).Select(c => new DTOOPSDIImportPacket_GroupProductExport
                        {
                            ID = c.ID,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            GroupProductID = c.ORD_GroupProduct.GroupOfProductID.Value,
                            PackingID = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().ProductID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            DistributorCode = c.ORD_GroupProduct.CUS_Partner.PartnerCode,
                            DistributorName = c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            RequestDate_Time = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            RequestTime = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            ETD = c.ORD_GroupProduct.ETD,
                            ETA = c.ORD_GroupProduct.ETA,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            ETARequestTime = c.ORD_GroupProduct.ETARequest,
                            GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupVehicle = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                            HasCashCollect = c.ORD_GroupProduct.HasCashCollect,
                            IsHot = c.ORD_GroupProduct.ORD_Order.IsHot,
                            StockID = c.ORD_GroupProduct.LocationFromID.Value,
                            LocationFromCode = c.ORD_GroupProduct.CUS_Location.Code,
                            LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                            LocationToCode = c.ORD_GroupProduct.CUS_Location1.Code,
                            LocationToName = c.ORD_GroupProduct.CUS_Location1.LocationName,
                            LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                            LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                            LocationToNote = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note,
                            LocationToNote1 = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1,
                            Note = c.ORD_GroupProduct.ORD_Order.Note,
                            Packing = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code,
                            PriceTOMaster = c.ORD_GroupProduct.ORD_Order.RoutePrice,
                            RoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            TemperatureMax = c.ORD_GroupProduct.TempMax,
                            TemperatureMin = c.ORD_GroupProduct.TempMin,
                            Ton = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.IsKg ? c.Ton * 1000 : c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            PriceTon = c.ORD_GroupProduct.Price,
                            PriceCBM = c.ORD_GroupProduct.Price,
                            PriceQuantity = c.ORD_GroupProduct.Price,
                            TypeOfTransportMode = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Code,
                            UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,
                            UserDefine3 = c.ORD_GroupProduct.ORD_Order.UserDefine3,
                            UserDefine4 = c.ORD_GroupProduct.ORD_Order.UserDefine4,
                            UserDefine5 = c.ORD_GroupProduct.ORD_Order.UserDefine5,
                            UserDefine6 = c.ORD_GroupProduct.ORD_Order.UserDefine6,
                            UserDefine7 = c.ORD_GroupProduct.ORD_Order.UserDefine7,
                            UserDefine8 = c.ORD_GroupProduct.ORD_Order.UserDefine8,
                            UserDefine9 = c.ORD_GroupProduct.ORD_Order.UserDefine9
                        }).OrderBy(c => c.OrderID).ToList();
                    foreach (var item in result)
                    {
                        if (item.RequestDate != null)
                        {
                            if (item.ETA != null)
                                item.ETATime_RequestDate = item.ETA.Value.Subtract(item.RequestDate.Value);
                            if (item.ETD != null)
                                item.ETDTime_RequestDate = item.ETD.Value.Subtract(item.RequestDate.Value);
                        }
                        item.ProductCodeWithoutGroup = item.Packing;
                        item.PackingNotUnicode = StringHelper.RemoveSign4VietnameseString(item.Packing);
                        item.GroupProductCodeNotUnicode = StringHelper.RemoveSign4VietnameseString(item.GroupProductCode);
                        item.DistributorCodeName = item.DistributorCode + "-" + item.DistributorName;
                        item.CustomerCodeName = item.CustomerCode + "-" + item.CustomerName;
                        item.LocationFromCodeName = item.LocationFromCode + "-" + item.LocationFromName;
                        item.LocationToCodeName = item.LocationToCode + "-" + item.LocationToName;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int OPS_DI_Import_Packet_Save(DTOOPSDIImportPacket item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (model.OPS_DIImportPacket.Count(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID != item.ID && c.PacketName == item.PacketName) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Trùng tên");

                    if (item.CUSSettingID < 1)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Chưa chọn thiết lập.");
                    }

                    var obj = model.OPS_DIImportPacket.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new OPS_DIImportPacket();
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.OPS_DIImportPacket.Add(obj);
                    }
                    else
                    {
                        if (obj.IsCreated == true)
                            throw FaultHelper.BusinessFault(null, null, "Không thể sửa.");
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Note = item.Note;
                    obj.PacketName = item.PacketName;
                    obj.CUSSettingID = item.CUSSettingID;
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Import_Packet_Import(int pID, int sID, List<DTOOPSDIImportPacketTOMaster_Import> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIImportPacket.FirstOrDefault(c => c.ID == pID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu.");
                    foreach (var item in data)
                    {
                        var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                        if (objVehicle == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy xe [" + item.VehicleNo + "]");
                        if (item.ETA == null || item.ETD == null)
                            throw FaultHelper.BusinessFault(null, null, "Chuyến " + item.SortOrder + " không có thông tin ETD - ETA");
                    }

                    foreach (var o in model.OPS_DIImportTOMaster.Where(c => c.DIImportPacketID == obj.ID).ToList())
                    {
                        foreach (var i in model.OPS_DIImportGroupProduct.Where(c => c.DIImportTOMasterID == o.ID).ToList())
                        {
                            model.OPS_DIImportGroupProduct.Remove(i);
                        }
                        model.OPS_DIImportTOMaster.Remove(o);
                    }
                    obj.TotalTon = 0;
                    obj.TotalQuantity = 0;
                    obj.TotalQuantity = 0;
                    model.SaveChanges();

                    obj.ModifiedDate = DateTime.Now;
                    obj.ModifiedBy = Account.UserName;
                    obj.CUSSettingID = sID;

                    List<int> lstOrderID = new List<int>();
                    foreach (var item in data)
                    {
                        OPS_DIImportTOMaster objMaster = new OPS_DIImportTOMaster();
                        objMaster.CreatedDate = DateTime.Now;
                        objMaster.CreatedBy = Account.UserName;
                        objMaster.DIImportPacketID = obj.ID;
                        objMaster.SortOrder = item.SortOrder;
                        objMaster.VehicleID = item.VehicleID;
                        objMaster.VendorID = item.VendorID;
                        objMaster.DriverName1 = item.DriverName;
                        objMaster.DriverTel1 = item.DriverTel;
                        objMaster.Note = item.Note;
                        objMaster.ETD = item.ETD.Value;
                        objMaster.ETA = item.ETA.Value;

                        model.OPS_DIImportTOMaster.Add(objMaster);
                        model.SaveChanges();

                        var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                        foreach (var gop in item.ListDITOGroupProduct)
                        {
                            var objDITO = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gop.ID);
                            if (objDITO != null)
                            {
                                OPS_DIImportGroupProduct objG = new OPS_DIImportGroupProduct();
                                objG.CreatedDate = DateTime.Now;
                                objG.CreatedBy = Account.UserName;
                                objG.DIImportTOMasterID = objMaster.ID;
                                objG.DITOGroupProductID = gop.ID;
                                objG.Ton = gop.Ton;
                                objG.CBM = gop.CBM;
                                objG.Quantity = gop.Quantity;
                                objG.QuantityLoading = objG.Quantity;
                                objG.QuantityTranfer = objG.Quantity;
                                model.OPS_DIImportGroupProduct.Add(objG);

                                objMaster.Ton += objG.Ton;
                                objMaster.CBM += objG.CBM;
                                objMaster.Quantity += objG.Quantity;
                                var max = objVehicle.MaxWeight ?? 0;
                                if (objMaster.Ton > max)
                                    objMaster.IsWarning = true;
                                obj.TotalTon += objG.Ton;
                                obj.TotalCBM += objG.CBM;
                                obj.TotalQuantity += objG.Quantity;

                                lstOrderID.Add(objDITO.ORD_GroupProduct.ORD_Order.ID);
                            }
                        }
                        model.SaveChanges();
                    }

                    if (lstOrderID != null && lstOrderID.Count > 0)
                        HelperStatus.ORDOrder_Status(model, Account, lstOrderID.Distinct().ToList());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Import_Packet_2View_Save(List<DTOOPSDIImportPacketTOMaster> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.OPS_DIImportTOMaster.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            if (item.ETA == null || item.ETD == null)
                                throw FaultHelper.BusinessFault(null, null, "Chuyến " + item.SortOrder + " không có thông tin ETD - ETA");
                            if (item.VendorID == null || item.VendorID < 1 || item.VendorID == Account.SYSCustomerID)
                            {
                                var objPlanning = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == item.VehicleID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain
                                  && !((c.DateFrom < item.ETD && c.DateTo < item.ETD) || (c.DateFrom > item.ETA && c.DateTo > item.ETA)));
                                if (objPlanning != null)
                                {
                                    item.DriverName = objPlanning.FLM_Driver.CAT_Driver.FirstName + " " + objPlanning.FLM_Driver.CAT_Driver.LastName;
                                    item.DriverTel = objPlanning.FLM_Driver.CAT_Driver.Cellphone;
                                }
                                else
                                {
                                    var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                                    if (objVehicle == null)
                                        throw FaultHelper.BusinessFault(null, null, "Chuyến " + item.SortOrder + ", xe " + item.VehicleNo + " không tồn tại.");

                                    if (OPS_FindFLMDriver(model, objVehicle.DriverName) > 0)
                                    {
                                        item.DriverName = objVehicle.DriverName;
                                        item.DriverTel = objVehicle.Cellphone;
                                    }
                                }
                                if (string.IsNullOrEmpty(item.DriverName))
                                    throw FaultHelper.BusinessFault(null, null, "Chuyến " + item.SortOrder + ", xe " + item.VehicleNo + " chưa thiết lập tài xế.");
                            }
                            if (obj.VendorID != item.VendorID || obj.VehicleID != item.VehicleID || obj.ETD != item.ETD || obj.ETA != item.ETA || obj.DriverName1 != item.DriverName || obj.DriverTel1 != item.DriverTel)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.VehicleID = item.VehicleID.Value;
                                obj.VendorID = item.VendorID;
                                obj.DriverName1 = item.DriverName;
                                obj.DriverTel1 = item.DriverTel;
                                obj.ETD = item.ETD.Value;
                                obj.ETA = item.ETA.Value;
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Import_Packet_ToOPS(int pID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIImportPacket.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == pID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu.");
                    var data = model.OPS_DIImportTOMaster.Where(c => c.DIImportPacketID == pID).ToList();
                    if (data.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Không có thông tin chuyến.");

                    //Check Data
                    List<int> dataOrders = new List<int>();
                    var dataG = model.OPS_DIImportGroupProduct.Where(c => c.OPS_DIImportTOMaster.DIImportPacketID == pID).Select(c => new
                    {
                        c.ID,
                        c.DITOGroupProductID,
                        c.Ton,
                        c.CBM,
                        c.Quantity
                    }).GroupBy(c => c.DITOGroupProductID).ToList();
                    foreach (var item in dataG)
                    {
                        var o = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.Key);
                        if (o == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm sản phẩm.");
                        if (o.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID != -(int)SYSVarType.TransportModeFTL && o.DITOMasterID != null)
                            throw FaultHelper.BusinessFault(null, null, "Nhóm sản phẩm [" + o.ORD_GroupProduct.CUS_GroupOfProduct.Code + " - " + o.ORD_GroupProduct.ORD_Order.Code + "] đã phân chuyến.");
                        dataOrders.Add(o.ORD_GroupProduct.OrderID);
                        switch (o.ORD_GroupProduct.CAT_Packing.TypeOfPackageID)
                        {
                            case -(int)SYSVarType.TypeOfPackingGOPTon:
                                var xTon = Math.Round(item.Sum(c => c.Ton), NoDigit, MidpointRounding.AwayFromZero);
                                if (o.Ton < xTon)
                                    throw FaultHelper.BusinessFault(null, null, "Nhóm sản phẩm [" + o.ORD_GroupProduct.CUS_GroupOfProduct.Code + " - " + o.ORD_GroupProduct.ORD_Order.Code + "] quá số tấn.");
                                break;
                            case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                var xCBM = Math.Round(item.Sum(c => c.CBM), NoDigit, MidpointRounding.AwayFromZero);
                                if (o.CBM < xCBM)
                                    throw FaultHelper.BusinessFault(null, null, "Nhóm sản phẩm [" + o.ORD_GroupProduct.CUS_GroupOfProduct.Code + " - " + o.ORD_GroupProduct.ORD_Order.Code + "] quá số khối.");
                                break;
                            case -(int)SYSVarType.TypeOfPackingGOPTU:
                                var xQuantity = Math.Round(item.Sum(c => c.Quantity), NoDigit, MidpointRounding.AwayFromZero);
                                if (o.Quantity < xQuantity)
                                    throw FaultHelper.BusinessFault(null, null, "Nhóm sản phẩm [" + o.ORD_GroupProduct.CUS_GroupOfProduct.Code + " - " + o.ORD_GroupProduct.ORD_Order.Code + "] quá số lượng.");
                                break;
                        }
                    }

                    var objSetting = OPS_SystemSetting_Get(model);
                    //Kiểm tra thông tin chuyến
                    foreach (var item in data)
                    {
                        if (item.ETA == null || item.ETD == null)
                            throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA. Chuyến " + item.SortOrder);
                        if (item.ETD >= item.ETA)
                            throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA. Chuyến " + item.SortOrder);
                        if ((item.VendorID == null || item.VendorID == Account.SYSCustomerID) && string.IsNullOrEmpty(item.DriverName1))
                            throw FaultHelper.BusinessFault(null, null, "Không có thông tin tài xế. Chuyến " + item.SortOrder);
                        OPS_CheckingTime_DIIMP(model, objSetting, pID, item.ID, item.VehicleID, item.ETD, item.ETA.Value);
                        var dataGop = model.OPS_DIImportGroupProduct.Where(c => c.DIImportTOMasterID == item.ID).ToList();
                        var sID = dataGop.Select(c => c.DITOGroupProductID).Distinct().ToList();
                        var dataOPS = model.OPS_DITOGroupProduct.Where(c => sID.Contains(c.ID)).ToList();
                        if (dataOPS.Count == 0)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm sản phẩm. Chuyến " + item.SortOrder);
                    }

                    //Xóa các chuyến FTL
                    var dataOPSTO = new List<int>();
                    var dataOPSTOFTL = model.OPS_DIImportGroupProduct.Where(c => c.OPS_DIImportTOMaster.DIImportPacketID == pID && c.OPS_DITOGroupProduct.OrderGroupProductID > 0
                        && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL).Select(c => new
                        {
                            ID = c.ID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            DITOGroupProductID = c.DITOGroupProductID,
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID
                        }).GroupBy(c => c.OrderID).ToList();
                    foreach (var item in dataOPSTOFTL)
                    {
                        var temp = item.Select(c => c.DITOMasterID).Distinct().ToList();
                        if (temp.Count == 1)
                        {
                            var masterID = item.FirstOrDefault().DITOMasterID;
                            var objM = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                            if (objM == null)
                                throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến FTL đơn hàng " + item.FirstOrDefault().OrderCode);
                            if (objM.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPlanning)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng FTL" + item.FirstOrDefault().OrderCode + " đã hoàn tất kế hoạch. Không thể lưu. Chuyến: " + objM.Code);

                            model.OPS_DITORate.RemoveRange(model.OPS_DITORate.Where(c => c.DITOMasterID == objM.ID).ToList());
                            model.OPS_DITOLocation.RemoveRange(model.OPS_DITOLocation.Where(c => c.DITOMasterID == objM.ID).ToList());
                            foreach (var o in model.OPS_DITO.Where(c => c.DITOMasterID == objM.ID).ToList())
                            {
                                foreach (var e in model.OPS_DITODetail.Where(c => c.DITOID == o.ID).ToList())
                                {
                                    model.OPS_DITODetail.Remove(e);
                                }
                                model.OPS_DITO.Remove(o);
                            }
                            foreach (var o in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objM.ID).ToList())
                            {
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.DITOMasterID = null;
                                o.IsInput = true;
                            }
                            OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                            model.OPS_DITOMaster.Remove(objM);
                            dataOPSTO.Add(objM.ID);
                        }
                        else
                        {
                            foreach (var mID in temp)
                            {
                                var objM = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
                                if (objM == null)
                                    throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến FTL đơn hàng " + item.FirstOrDefault().OrderCode);
                                if (objM.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPlanning)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng FTL" + item.FirstOrDefault().OrderCode + " đã hoàn tất kế hoạch. Không thể lưu. Chuyến: " + objM.Code);

                                model.OPS_DITORate.RemoveRange(model.OPS_DITORate.Where(c => c.DITOMasterID == objM.ID).ToList());
                                model.OPS_DITOLocation.RemoveRange(model.OPS_DITOLocation.Where(c => c.DITOMasterID == objM.ID).ToList());
                                foreach (var o in model.OPS_DITO.Where(c => c.DITOMasterID == objM.ID).ToList())
                                {
                                    foreach (var e in model.OPS_DITODetail.Where(c => c.DITOID == o.ID).ToList())
                                    {
                                        model.OPS_DITODetail.Remove(e);
                                    }
                                    model.OPS_DITO.Remove(o);
                                }
                                foreach (var o in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objM.ID).ToList())
                                {
                                    o.ModifiedBy = Account.UserName;
                                    o.ModifiedDate = DateTime.Now;
                                    o.DITOMasterID = null;
                                    o.IsInput = true;
                                }
                                OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                                model.OPS_DITOMaster.Remove(objM);
                                dataOPSTO.Add(objM.ID);
                            }
                        }
                    }
                    model.SaveChanges();

                    //Trả về trạng thái IsInput = true.
                    foreach (var item in model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == obj.ID).ToList())
                    {
                        var dataOPS = model.OPS_DITOGroupProduct.Where(c => c.IsInput == false && c.OrderGroupProductID == item.ORDGroupProductID
                          && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList();
                        foreach (var gop in dataOPS)
                        {
                            gop.ModifiedBy = Account.UserName;
                            gop.ModifiedDate = DateTime.Now;
                            gop.IsInput = true;
                        }
                        model.OPS_DIImportORDGroupProduct.Remove(item);
                    }
                    model.SaveChanges();

                    //Xóa TimeSheet
                    foreach (var item in dataOPSTO.Distinct().ToList())
                    {
                        HelperTimeSheet.Remove(model, Account, item, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                    }

                    dataOPSTO = new List<int>();
                    int sLocation = 1, eLocation = 1;
                    var objCheckL = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationFromID);
                    if (objCheckL != null)
                        sLocation = objSetting.LocationFromID;
                    objCheckL = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationToID);
                    if (objCheckL != null)
                        eLocation = objSetting.LocationToID;

                    foreach (var item in data)
                    {
                        var dataGop = model.OPS_DIImportGroupProduct.Where(c => c.DIImportTOMasterID == item.ID).ToList();
                        var sID = dataGop.Select(c => c.DITOGroupProductID).Distinct().ToList();
                        var dataOPS = model.OPS_DITOGroupProduct.Where(c => sID.Contains(c.ID)).ToList();
                        var objCheck = dataOPS.FirstOrDefault();
                        OPS_DITOMaster objM = new OPS_DITOMaster();
                        objM.Code = DI_GetLastCode(model);
                        objM.CreatedBy = Account.UserName;
                        objM.CreatedDate = DateTime.Now;
                        objM.SYSCustomerID = Account.SYSCustomerID;
                        objM.ETD = item.ETD;
                        objM.ETA = item.ETA;
                        objM.SortOrder = 1;
                        objM.VendorOfVehicleID = item.VendorID;
                        objM.VehicleID = item.VehicleID;
                        objM.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                        objM.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                        objM.SortOrder = item.SortOrder;
                        objM.TransportModeID = objCheck.ORD_GroupProduct.ORD_Order.TransportModeID;

                        objM.DriverTel1 = item.DriverTel1;
                        objM.DriverName1 = item.DriverName1;
                        objM.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                        objM.DriverID1 = OPS_FindFLMDriver(model, objM.DriverName1);

                        //Kiểm tra thời gian.
                        OPS_CheckingTime(model, objSetting, objM.ID, objM.VehicleID, null, objM.ETD, objM.ETA, false);
                        model.OPS_DITOMaster.Add(objM);
                        model.SaveChanges();
                        objM.Code = DICodePrefix + objM.ID.ToString(DICodeNum);
                        model.SaveChanges();
                        dataOPSTO.Add(objM.ID);

                        HelperTimeSheet.Remove(model, Account, objM.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, objM.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                        int idx = 1;
                        OPS_DITOLocation oLocation = new OPS_DITOLocation();
                        oLocation.LocationID = sLocation;
                        oLocation.SortOrder = idx++;
                        oLocation.DITOMasterID = objM.ID;
                        oLocation.CreatedBy = Account.UserName;
                        oLocation.CreatedDate = DateTime.Now;
                        oLocation.DateComeEstimate = objM.ETD;
                        oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        model.OPS_DITOLocation.Add(oLocation);

                        List<int> dataLocationFrom = new List<int>();
                        List<int> dataLocationTo = new List<int>();
                        Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();
                        foreach (var gop in dataGop)
                        {
                            var o = dataOPS.FirstOrDefault(c => c.ID == gop.DITOGroupProductID);
                            if (o.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL)
                                objM.TransportModeID = -(int)SYSVarType.TransportModeFTL;

                            var fID = o.ORD_GroupProduct.CUS_Location.LocationID;
                            var tID = o.ORD_GroupProduct.CUS_Location1.LocationID;

                            dataLocationFrom.Add(fID);
                            if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                dicLocationTime[fID] = o.ORD_GroupProduct.ETD;
                            else if (dicLocationTime[fID] > o.ORD_GroupProduct.ETD)
                                dicLocationTime[fID] = o.ORD_GroupProduct.ETD;

                            dataLocationTo.Add(tID);
                            if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                dicLocationTime[tID] = o.ORD_GroupProduct.ETA;
                            else if (dicLocationTime[tID] > o.ORD_GroupProduct.ETA)
                                dicLocationTime[tID] = o.ORD_GroupProduct.ETA;

                            var flag = false;
                            switch (o.ORD_GroupProduct.CAT_Packing.TypeOfPackageID)
                            {
                                case -(int)SYSVarType.TypeOfPackingGOPTon:
                                    if (Math.Round(o.Ton - gop.Ton, NoDigit, MidpointRounding.AwayFromZero) > 0)
                                    {
                                        flag = true;
                                    }
                                    break;
                                case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                    if (Math.Round(o.CBM - gop.CBM, NoDigit, MidpointRounding.AwayFromZero) > 0)
                                    {
                                        flag = true;
                                    }
                                    break;
                                case -(int)SYSVarType.TypeOfPackingGOPTU:
                                    if (Math.Round(o.Quantity - gop.Quantity, NoDigit, MidpointRounding.AwayFromZero) > 0)
                                    {
                                        flag = true;
                                    }
                                    break;
                            }
                            if (flag)
                            {
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.Ton = Math.Round(o.Ton - gop.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                o.CBM = Math.Round(o.CBM - gop.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                o.Quantity = Math.Round(o.Quantity - gop.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                o.TonBBGN = o.TonTranfer = o.Ton;
                                o.CBMBBGN = o.CBMTranfer = o.CBM;
                                o.QuantityBBGN = o.QuantityLoading = o.QuantityTranfer = o.Quantity;
                                o.IsSplit = flag;

                                OPS_DITOGroupProduct oN = new OPS_DITOGroupProduct();
                                oN.CreatedBy = Account.UserName;
                                oN.CreatedDate = DateTime.Now;
                                model.OPS_DITOGroupProduct.Add(oN);

                                oN.OrderGroupProductID = o.OrderGroupProductID;
                                oN.DITOMasterID = objM.ID;
                                oN.Ton = oN.TonBBGN = oN.TonTranfer = gop.Ton;
                                oN.CBM = oN.CBMBBGN = oN.CBMTranfer = gop.CBM;
                                oN.Quantity = oN.QuantityBBGN = oN.QuantityLoading = oN.QuantityTranfer = gop.Quantity;
                                oN.Note = o.Note;
                                oN.IsInput = o.IsInput;
                                oN.IsOrigin = o.IsOrigin;
                                oN.IsSplit = flag;
                                oN.DNCode = o.DNCode;
                                oN.DITOGroupProductStatusID = o.DITOGroupProductStatusID;
                                oN.DateFromCome = o.DateFromCome;
                                oN.DateFromLeave = o.DateFromLeave;
                                oN.DateFromLoadStart = o.DateFromLoadStart;
                                oN.DateFromLoadEnd = o.DateFromLoadEnd;
                                oN.DateToCome = o.DateToCome;
                                oN.DateToLeave = o.DateToLeave;
                                oN.DateToLoadStart = o.DateToLoadStart;
                                oN.DateToLoadEnd = o.DateToLoadEnd;
                                oN.Note1 = o.Note1;
                                oN.Note2 = o.Note2;
                                oN.InvoiceBy = o.InvoiceBy;
                                oN.InvoiceDate = o.InvoiceDate;
                                oN.InvoiceNote = o.InvoiceNote;
                                oN.DateDN = o.DateDN;
                                oN.DITOGroupProductStatusPODID = o.DITOGroupProductStatusPODID;
                                oN.CUSRoutingID = o.CUSRoutingID;
                                oN.TypeOfDITOGroupProductReturnID = o.TypeOfDITOGroupProductReturnID;
                                oN.DateConfig = o.DateConfig;
                                oN.CATRoutingID = o.CATRoutingID;

                                var dataP = model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == o.ID).ToList();
                                foreach (var p in dataP)
                                {
                                    p.ModifiedBy = Account.UserName;
                                    p.ModifiedDate = DateTime.Now;

                                    OPS_DITOProduct nP = new OPS_DITOProduct();
                                    nP.CreatedBy = Account.UserName;
                                    nP.CreatedDate = DateTime.Now;
                                    nP.OrderProductID = p.OrderProductID;
                                    nP.Note = p.Note;

                                    switch (p.ORD_Product.CAT_Packing.TypeOfPackageID)
                                    {
                                        case -(int)SYSVarType.TypeOfPackingGOPTon:
                                            p.Quantity = p.QuantityBBGN = p.QuantityTranfer = o.Ton;
                                            nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.Ton;
                                            break;
                                        case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                            p.Quantity = p.QuantityBBGN = p.QuantityTranfer = o.CBM;
                                            nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.CBM;
                                            break;
                                        case -(int)SYSVarType.TypeOfPackingGOPTU:
                                            p.Quantity = p.QuantityBBGN = p.QuantityTranfer = o.Quantity;
                                            nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.Quantity;
                                            break;
                                    }

                                    oN.OPS_DITOProduct.Add(nP);
                                }
                            }
                            else
                            {
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.DITOMasterID = objM.ID;
                            }
                        }

                        var dataL = dataLocationFrom.Distinct().ToList();
                        dataL.AddRange(dataLocationTo.Distinct().ToList());
                        dataL = dataL.Distinct().ToList();
                        for (var i = 0; i < dataL.Count; i++)
                        {
                            OPS_DITOLocation oL = new OPS_DITOLocation();
                            oL.CreatedBy = Account.UserName;
                            oL.CreatedDate = DateTime.Now;
                            model.OPS_DITOLocation.Add(oL);

                            oL.DITOMasterID = objM.ID;
                            oL.LocationID = dataL[i];
                            oL.SortOrder = idx++;

                            if (dicLocationTime.ContainsKey(dataL[i]))
                                oL.DateComeEstimate = dicLocationTime[dataL[i]];

                            oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                            else if (dataLocationFrom.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            else
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                        }

                        OPS_DITOLocation osLocation = new OPS_DITOLocation();
                        osLocation.LocationID = eLocation;
                        osLocation.SortOrder = idx++;
                        osLocation.DITOMasterID = objM.ID;
                        osLocation.CreatedBy = Account.UserName;
                        osLocation.CreatedDate = DateTime.Now;
                        osLocation.DateComeEstimate = objM.ETA;
                        osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        model.OPS_DITOLocation.Add(osLocation);

                        model.SaveChanges();
                    }

                    obj.IsCreated = true;
                    model.SaveChanges();

                    //Cập nhật trạng thái đơn hàng.

                    HelperStatus.ORDOrder_Status(model, Account, dataOrders.Distinct().ToList());
                    //OPSDI_MAP_ToMON(dataOPSTO);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Import_Packet_ToMON(int pID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIImportPacket.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == pID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu.");
                    var data = model.OPS_DIImportTOMaster.Where(c => c.DIImportPacketID == pID).ToList();
                    if (data.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Không có thông tin chuyến.");

                    //Check Data
                    List<int> dataOrders = new List<int>();
                    var dataG = model.OPS_DIImportGroupProduct.Where(c => c.OPS_DIImportTOMaster.DIImportPacketID == pID).Select(c => new
                    {
                        c.ID,
                        c.DITOGroupProductID,
                        c.Ton,
                        c.CBM,
                        c.Quantity
                    }).GroupBy(c => c.DITOGroupProductID).ToList();
                    foreach (var item in dataG)
                    {
                        var o = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.Key);
                        if (o == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm sản phẩm.");
                        if (o.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID != -(int)SYSVarType.TransportModeFTL && o.DITOMasterID != null)
                            throw FaultHelper.BusinessFault(null, null, "Nhóm sản phẩm [" + o.ORD_GroupProduct.CUS_GroupOfProduct.Code + " - " + o.ORD_GroupProduct.ORD_Order.Code + "] đã phân chuyến.");
                        dataOrders.Add(o.ORD_GroupProduct.OrderID);
                        switch (o.ORD_GroupProduct.CAT_Packing.TypeOfPackageID)
                        {
                            case -(int)SYSVarType.TypeOfPackingGOPTon:
                                if (o.Ton < item.Sum(c => c.Ton))
                                    throw FaultHelper.BusinessFault(null, null, "Nhóm sản phẩm [" + o.ORD_GroupProduct.CUS_GroupOfProduct.Code + " - " + o.ORD_GroupProduct.ORD_Order.Code + "] quá số tấn.");
                                break;
                            case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                if (o.CBM < item.Sum(c => c.CBM))
                                    throw FaultHelper.BusinessFault(null, null, "Nhóm sản phẩm [" + o.ORD_GroupProduct.CUS_GroupOfProduct.Code + " - " + o.ORD_GroupProduct.ORD_Order.Code + "] quá số khối.");
                                break;
                            case -(int)SYSVarType.TypeOfPackingGOPTU:
                                if (o.Quantity < item.Sum(c => c.Quantity))
                                    throw FaultHelper.BusinessFault(null, null, "Nhóm sản phẩm [" + o.ORD_GroupProduct.CUS_GroupOfProduct.Code + " - " + o.ORD_GroupProduct.ORD_Order.Code + "] quá số lượng.");
                                break;
                        }
                    }

                    var objSetting = OPS_SystemSetting_Get(model);
                    //Kiểm tra thông tin chuyến
                    foreach (var item in data)
                    {
                        if (item.ETA == null || item.ETD == null)
                            throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA. Chuyến " + item.SortOrder);
                        if (item.ETD >= item.ETA)
                            throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA. Chuyến " + item.SortOrder);
                        if ((item.VendorID == null || item.VendorID == Account.SYSCustomerID) && string.IsNullOrEmpty(item.DriverName1))
                            throw FaultHelper.BusinessFault(null, null, "Không có thông tin tài xế. Chuyến " + item.SortOrder);
                        OPS_CheckingTime_DIIMP(model, objSetting, pID, item.ID, item.VehicleID, item.ETD, item.ETA.Value);
                        var dataGop = model.OPS_DIImportGroupProduct.Where(c => c.DIImportTOMasterID == item.ID).ToList();
                        var sID = dataGop.Select(c => c.DITOGroupProductID).Distinct().ToList();
                        var dataOPS = model.OPS_DITOGroupProduct.Where(c => sID.Contains(c.ID)).ToList();
                        if (dataOPS.Count == 0)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm sản phẩm. Chuyến " + item.SortOrder);
                    }

                    //Xóa các chuyến FTL
                    var dataOPSTO = new List<int>();
                    var dataOPSTOFTL = model.OPS_DIImportGroupProduct.Where(c => c.OPS_DIImportTOMaster.DIImportPacketID == pID && c.OPS_DITOGroupProduct.OrderGroupProductID > 0
                        && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL).Select(c => new
                        {
                            ID = c.ID,
                            OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                            OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            DITOGroupProductID = c.DITOGroupProductID,
                            DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID
                        }).GroupBy(c => c.OrderID).ToList();
                    foreach (var item in dataOPSTOFTL)
                    {
                        var temp = item.Select(c => c.DITOMasterID).Distinct().ToList();
                        if (temp.Count == 1)
                        {
                            var objM = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.FirstOrDefault().DITOMasterID);
                            if (objM == null)
                                throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến FTL đơn hàng " + item.FirstOrDefault().OrderCode);
                            if (objM.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPlanning)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng FTL" + item.FirstOrDefault().OrderCode + " đã hoàn tất kế hoạch. Không thể lưu. Chuyến: " + objM.Code);

                            model.OPS_DITORate.RemoveRange(model.OPS_DITORate.Where(c => c.DITOMasterID == objM.ID).ToList());
                            model.OPS_DITOLocation.RemoveRange(model.OPS_DITOLocation.Where(c => c.DITOMasterID == objM.ID).ToList());
                            foreach (var o in model.OPS_DITO.Where(c => c.DITOMasterID == objM.ID).ToList())
                            {
                                foreach (var e in model.OPS_DITODetail.Where(c => c.DITOID == o.ID).ToList())
                                {
                                    model.OPS_DITODetail.Remove(e);
                                }
                                model.OPS_DITO.Remove(o);
                            }
                            foreach (var o in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objM.ID).ToList())
                            {
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.DITOMasterID = null;
                            }
                            OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                            model.OPS_DITOMaster.Remove(objM);
                            dataOPSTO.Add(objM.ID);
                        }
                        else
                        {
                            foreach (var mID in temp)
                            {
                                var objM = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
                                if (objM == null)
                                    throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến FTL đơn hàng " + item.FirstOrDefault().OrderCode);
                                if (objM.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPlanning)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng FTL" + item.FirstOrDefault().OrderCode + " đã hoàn tất kế hoạch. Không thể lưu. Chuyến: " + objM.Code);

                                model.OPS_DITORate.RemoveRange(model.OPS_DITORate.Where(c => c.DITOMasterID == objM.ID).ToList());
                                model.OPS_DITOLocation.RemoveRange(model.OPS_DITOLocation.Where(c => c.DITOMasterID == objM.ID).ToList());
                                foreach (var o in model.OPS_DITO.Where(c => c.DITOMasterID == objM.ID).ToList())
                                {
                                    foreach (var e in model.OPS_DITODetail.Where(c => c.DITOID == o.ID).ToList())
                                    {
                                        model.OPS_DITODetail.Remove(e);
                                    }
                                    model.OPS_DITO.Remove(o);
                                }
                                foreach (var o in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objM.ID).ToList())
                                {
                                    o.ModifiedBy = Account.UserName;
                                    o.ModifiedDate = DateTime.Now;
                                    o.DITOMasterID = null;
                                }
                                OPS_FIN_Delete(model, -1, obj.ID, -1, -1);
                                model.OPS_DITOMaster.Remove(objM);
                                dataOPSTO.Add(objM.ID);
                            }
                        }
                    }
                    model.SaveChanges();

                    //Trả về trạng thái IsInput = true.
                    foreach (var item in model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == obj.ID).ToList())
                    {
                        var dataOPS = model.OPS_DITOGroupProduct.Where(c => c.IsInput == false && c.OrderGroupProductID == item.ORDGroupProductID
                          && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList();
                        foreach (var gop in dataOPS)
                        {
                            gop.ModifiedBy = Account.UserName;
                            gop.ModifiedDate = DateTime.Now;
                            gop.IsInput = true;
                        }
                        model.OPS_DIImportORDGroupProduct.Remove(item);
                    }
                    model.SaveChanges();

                    //Xóa TimeSheet
                    foreach (var item in dataOPSTO.Distinct().ToList())
                    {
                        HelperTimeSheet.Remove(model, Account, item, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                    }

                    dataOPSTO = new List<int>();
                    int sLocation = 1, eLocation = 1;
                    var objCheckL = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationFromID);
                    if (objCheckL != null)
                        sLocation = objSetting.LocationFromID;
                    objCheckL = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationToID);
                    if (objCheckL != null)
                        eLocation = objSetting.LocationToID;

                    foreach (var item in data)
                    {
                        var dataGop = model.OPS_DIImportGroupProduct.Where(c => c.DIImportTOMasterID == item.ID).ToList();
                        var sID = dataGop.Select(c => c.DITOGroupProductID).Distinct().ToList();
                        var dataOPS = model.OPS_DITOGroupProduct.Where(c => sID.Contains(c.ID)).ToList();
                        var objCheck = dataOPS.FirstOrDefault();
                        OPS_DITOMaster objM = new OPS_DITOMaster();
                        objM.Code = DI_GetLastCode(model);
                        objM.CreatedBy = Account.UserName;
                        objM.CreatedDate = DateTime.Now;
                        objM.SYSCustomerID = Account.SYSCustomerID;
                        objM.ETD = item.ETD;
                        objM.ETA = item.ETA;
                        objM.SortOrder = 1;
                        objM.VendorOfVehicleID = item.VendorID;
                        objM.VehicleID = item.VehicleID;
                        objM.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                        objM.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                        objM.SortOrder = item.SortOrder;
                        objM.TransportModeID = objCheck.ORD_GroupProduct.ORD_Order.TransportModeID;

                        objM.DriverTel1 = item.DriverTel1;
                        objM.DriverName1 = item.DriverName1;
                        objM.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                        objM.DriverID1 = OPS_FindFLMDriver(model, objM.DriverName1);

                        //Kiểm tra thời gian.
                        OPS_CheckingTime(model, objSetting, objM.ID, objM.VehicleID, null, objM.ETD, objM.ETA, false);
                        model.OPS_DITOMaster.Add(objM);
                        model.SaveChanges();
                        objM.Code = DICodePrefix + objM.ID.ToString(DICodeNum);
                        model.SaveChanges();
                        dataOPSTO.Add(objM.ID);

                        HelperTimeSheet.Remove(model, Account, objM.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, objM.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                        int idx = 1;
                        OPS_DITOLocation oLocation = new OPS_DITOLocation();
                        oLocation.LocationID = sLocation;
                        oLocation.SortOrder = idx++;
                        oLocation.DITOMasterID = objM.ID;
                        oLocation.CreatedBy = Account.UserName;
                        oLocation.CreatedDate = DateTime.Now;
                        oLocation.DateComeEstimate = objM.ETD;
                        oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        model.OPS_DITOLocation.Add(oLocation);

                        List<int> dataLocationFrom = new List<int>();
                        List<int> dataLocationTo = new List<int>();
                        Dictionary<int, DateTime?> dicLocationTime = new Dictionary<int, DateTime?>();
                        foreach (var gop in dataGop)
                        {
                            var o = dataOPS.FirstOrDefault(c => c.ID == gop.DITOGroupProductID);
                            if (o.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL)
                                objM.TransportModeID = -(int)SYSVarType.TransportModeFTL;

                            var fID = o.ORD_GroupProduct.CUS_Location.LocationID;
                            var tID = o.ORD_GroupProduct.CUS_Location1.LocationID;

                            dataLocationFrom.Add(fID);
                            if (!dicLocationTime.ContainsKey(fID) || dicLocationTime[fID] == null)
                                dicLocationTime[fID] = o.ORD_GroupProduct.ETD;
                            else if (dicLocationTime[fID] > o.ORD_GroupProduct.ETD)
                                dicLocationTime[fID] = o.ORD_GroupProduct.ETD;

                            dataLocationTo.Add(tID);
                            if (!dicLocationTime.ContainsKey(tID) || dicLocationTime[tID] == null)
                                dicLocationTime[tID] = o.ORD_GroupProduct.ETA;
                            else if (dicLocationTime[tID] > o.ORD_GroupProduct.ETA)
                                dicLocationTime[tID] = o.ORD_GroupProduct.ETA;

                            var flag = false;
                            switch (o.ORD_GroupProduct.CAT_Packing.TypeOfPackageID)
                            {
                                case -(int)SYSVarType.TypeOfPackingGOPTon:
                                    if (Math.Round(o.Ton - gop.Ton, NoDigit, MidpointRounding.AwayFromZero) > 0)
                                    {
                                        flag = true;
                                    }
                                    break;
                                case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                    if (Math.Round(o.CBM - gop.CBM, NoDigit, MidpointRounding.AwayFromZero) > 0)
                                    {
                                        flag = true;
                                    }
                                    break;
                                case -(int)SYSVarType.TypeOfPackingGOPTU:
                                    if (Math.Round(o.Quantity - gop.Quantity, NoDigit, MidpointRounding.AwayFromZero) > 0)
                                    {
                                        flag = true;
                                    }
                                    break;
                            }
                            if (flag)
                            {
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.Ton = Math.Round(o.Ton - gop.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                o.CBM = Math.Round(o.CBM - gop.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                o.Quantity = Math.Round(o.Quantity - gop.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                o.TonBBGN = o.TonTranfer = o.Ton;
                                o.CBMBBGN = o.CBMTranfer = o.CBM;
                                o.QuantityBBGN = o.QuantityLoading = o.QuantityTranfer = o.Quantity;
                                o.IsSplit = flag;

                                OPS_DITOGroupProduct oN = new OPS_DITOGroupProduct();
                                oN.CreatedBy = Account.UserName;
                                oN.CreatedDate = DateTime.Now;
                                model.OPS_DITOGroupProduct.Add(oN);

                                oN.OrderGroupProductID = o.OrderGroupProductID;
                                oN.DITOMasterID = objM.ID;
                                oN.Ton = oN.TonBBGN = oN.TonTranfer = gop.Ton;
                                oN.CBM = oN.CBMBBGN = oN.CBMTranfer = gop.CBM;
                                oN.Quantity = oN.QuantityBBGN = oN.QuantityLoading = oN.QuantityTranfer = gop.Quantity;
                                oN.Note = o.Note;
                                oN.IsInput = o.IsInput;
                                oN.IsOrigin = o.IsOrigin;
                                oN.IsSplit = flag;
                                oN.DNCode = o.DNCode;
                                oN.DITOGroupProductStatusID = o.DITOGroupProductStatusID;
                                oN.DateFromCome = o.DateFromCome;
                                oN.DateFromLeave = o.DateFromLeave;
                                oN.DateFromLoadStart = o.DateFromLoadStart;
                                oN.DateFromLoadEnd = o.DateFromLoadEnd;
                                oN.DateToCome = o.DateToCome;
                                oN.DateToLeave = o.DateToLeave;
                                oN.DateToLoadStart = o.DateToLoadStart;
                                oN.DateToLoadEnd = o.DateToLoadEnd;
                                oN.Note1 = o.Note1;
                                oN.Note2 = o.Note2;
                                oN.InvoiceBy = o.InvoiceBy;
                                oN.InvoiceDate = o.InvoiceDate;
                                oN.InvoiceNote = o.InvoiceNote;
                                oN.DateDN = o.DateDN;
                                oN.DITOGroupProductStatusPODID = o.DITOGroupProductStatusPODID;
                                oN.CUSRoutingID = o.CUSRoutingID;
                                oN.TypeOfDITOGroupProductReturnID = o.TypeOfDITOGroupProductReturnID;
                                oN.DateConfig = o.DateConfig;
                                oN.CATRoutingID = o.CATRoutingID;

                                var dataP = model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == o.ID).ToList();
                                foreach (var p in dataP)
                                {
                                    p.ModifiedBy = Account.UserName;
                                    p.ModifiedDate = DateTime.Now;

                                    OPS_DITOProduct nP = new OPS_DITOProduct();
                                    nP.CreatedBy = Account.UserName;
                                    nP.CreatedDate = DateTime.Now;
                                    nP.OrderProductID = p.OrderProductID;
                                    nP.Note = p.Note;

                                    switch (p.ORD_Product.CAT_Packing.TypeOfPackageID)
                                    {
                                        case -(int)SYSVarType.TypeOfPackingGOPTon:
                                            p.Quantity = p.QuantityBBGN = p.QuantityTranfer = o.Ton;
                                            nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.Ton;
                                            break;
                                        case -(int)SYSVarType.TypeOfPackingGOPCBM:
                                            p.Quantity = p.QuantityBBGN = p.QuantityTranfer = o.CBM;
                                            nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.CBM;
                                            break;
                                        case -(int)SYSVarType.TypeOfPackingGOPTU:
                                            p.Quantity = p.QuantityBBGN = p.QuantityTranfer = o.Quantity;
                                            nP.Quantity = nP.QuantityBBGN = nP.QuantityTranfer = oN.Quantity;
                                            break;
                                    }

                                    oN.OPS_DITOProduct.Add(nP);
                                }
                            }
                            else
                            {
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.DITOMasterID = objM.ID;
                            }
                        }

                        var dataL = dataLocationFrom.Distinct().ToList();
                        dataL.AddRange(dataLocationTo.Distinct().ToList());
                        dataL = dataL.Distinct().ToList();
                        for (var i = 0; i < dataL.Count; i++)
                        {
                            OPS_DITOLocation oL = new OPS_DITOLocation();
                            oL.CreatedBy = Account.UserName;
                            oL.CreatedDate = DateTime.Now;
                            model.OPS_DITOLocation.Add(oL);

                            oL.DITOMasterID = objM.ID;
                            oL.LocationID = dataL[i];
                            oL.SortOrder = idx++;

                            if (dicLocationTime.ContainsKey(dataL[i]))
                                oL.DateComeEstimate = dicLocationTime[dataL[i]];

                            oL.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            if (dataLocationFrom.Contains(dataL[i]) && dataLocationTo.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                            else if (dataLocationFrom.Contains(dataL[i]))
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            else
                                oL.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                        }

                        OPS_DITOLocation osLocation = new OPS_DITOLocation();
                        osLocation.LocationID = eLocation;
                        osLocation.SortOrder = idx++;
                        osLocation.DITOMasterID = objM.ID;
                        osLocation.CreatedBy = Account.UserName;
                        osLocation.CreatedDate = DateTime.Now;
                        osLocation.DateComeEstimate = objM.ETA;
                        osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        model.OPS_DITOLocation.Add(osLocation);

                        model.SaveChanges();
                    }

                    obj.IsCreated = true;
                    model.SaveChanges();

                    //Cập nhật trạng thái đơn hàng.
                    HelperStatus.ORDOrder_Status(model, Account, dataOrders.Distinct().ToList());
                    OPSDI_MAP_ToMON(dataOPSTO);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Import_Packet_Delete(int pID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIImportPacket.FirstOrDefault(c => c.ID == pID && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                    {
                        foreach (var item in model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == obj.ID).ToList())
                        {
                            var dataOPS = model.OPS_DITOGroupProduct.Where(c => c.IsInput == false && c.OrderGroupProductID == item.ORDGroupProductID
                              && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList();
                            foreach (var gop in dataOPS)
                            {
                                gop.ModifiedBy = Account.UserName;
                                gop.ModifiedDate = DateTime.Now;
                                gop.IsInput = true;
                            }
                            model.OPS_DIImportORDGroupProduct.Remove(item);
                        }
                        foreach (var item in model.OPS_DIImportTOMaster.Where(c => c.DIImportPacketID == pID).ToList())
                        {
                            foreach (var o in model.OPS_DIImportGroupProduct.Where(c => c.DIImportTOMasterID == item.ID).ToList())
                            {
                                model.OPS_DIImportGroupProduct.Remove(o);
                            }
                            model.OPS_DIImportTOMaster.Remove(item);
                        }
                        model.OPS_DIImportPacket.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Import_Packet_Reset(int pID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DIImportPacket.FirstOrDefault(c => c.ID == pID && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                    {
                        foreach (var item in model.OPS_DIImportTOMaster.Where(c => c.DIImportPacketID == pID).ToList())
                        {
                            foreach (var o in model.OPS_DIImportGroupProduct.Where(c => c.DIImportTOMasterID == item.ID).ToList())
                            {
                                model.OPS_DIImportGroupProduct.Remove(o);
                            }
                            model.OPS_DIImportTOMaster.Remove(item);
                        }
                        foreach (var item in model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == pID).ToList())
                        {
                            var dataOPS = model.OPS_DITOGroupProduct.Where(c => c.IsInput == false && c.OrderGroupProductID == item.ORDGroupProductID
                                 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList();
                            foreach (var gop in dataOPS)
                            {
                                gop.ModifiedBy = Account.UserName;
                                gop.ModifiedDate = DateTime.Now;
                                gop.IsInput = true;
                            }
                            model.OPS_DIImportORDGroupProduct.Remove(item);
                        }
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.TotalCBM = obj.TotalQuantity = obj.TotalTon = 0;
                        obj.IsCreated = false;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Import_Packet_Vehicle_Update(List<DTOOPSDIImportPacket_Vehicle> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var dataCode = new List<string>();
                        var dataChar = new char[] { '-', ' ', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '/', '?', '<', ',', '>', '~', '`' };
                        var sCode = item.VehicleNo.Split(dataChar, StringSplitOptions.RemoveEmptyEntries).ToArray();
                        foreach (var c in dataChar)
                        {
                            dataCode.Add(string.Join(c.ToString(), sCode).ToLower());
                        }
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => dataCode.Contains(c.RegNo.Trim().ToLower()));
                        if (obj == null)
                        {
                            obj = new CAT_Vehicle();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.RegNo = item.VehicleNo;
                            obj.CurrentVendorID = item.VendorID;
                            obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTruck;
                            model.CAT_Vehicle.Add(obj);
                            model.SaveChanges();
                        }
                        var objCus = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == obj.ID && c.CustomerID == item.VendorID);
                        if (objCus == null)
                        {
                            objCus = new CUS_Vehicle();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.VehicleID = obj.ID;
                            objCus.CustomerID = item.VendorID;
                            model.CUS_Vehicle.Add(objCus);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Import_Packet_ORDGroupProduct_SaveList(int pID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            var dataCheck = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID == item && c.IsInput == true && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel
                                && (c.DITOMasterID == null || (c.DITOMasterID > 0 && c.OPS_DITOMaster.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL && c.OPS_DITOMaster.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterPlanning))).ToList();
                            if (dataCheck.Count > 0)
                            {
                                var objOrd = model.OPS_DIImportORDGroupProduct.FirstOrDefault(c => c.DIImportPacketID == pID && c.ORDGroupProductID == obj.ID);
                                if (objOrd == null)
                                {
                                    objOrd = new OPS_DIImportORDGroupProduct();
                                    objOrd.CreatedBy = Account.UserName;
                                    objOrd.CreatedDate = DateTime.Now;
                                    objOrd.DIImportPacketID = pID;
                                    objOrd.ORDGroupProductID = obj.ID;
                                    model.OPS_DIImportORDGroupProduct.Add(objOrd);
                                }
                                foreach (var gop in dataCheck)
                                {
                                    gop.ModifiedBy = Account.UserName;
                                    gop.ModifiedDate = DateTime.Now;
                                    gop.IsInput = false;
                                }
                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_DI_Import_Packet_ORDGroupProduct_DeleteList(int pID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.OPS_DIImportORDGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            var dataOPS = model.OPS_DITOGroupProduct.Where(c => c.IsInput == false && c.OrderGroupProductID == obj.ORDGroupProductID
                                && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList();
                            foreach (var gop in dataOPS)
                            {
                                gop.ModifiedBy = Account.UserName;
                                gop.ModifiedDate = DateTime.Now;
                                gop.IsInput = true;
                            }
                            model.OPS_DIImportORDGroupProduct.Remove(obj);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CheckingTime_DIIMP(DataEntities model, DTOSYSSetting objSetting, int pID, int mID, int vehicleID, DateTime ETD, DateTime ETA)
        {
            try
            {
                var strETD = String.Format("{0:d/M HH:mm}", ETD);
                var strETA = String.Format("{0:d/M HH:mm}", ETA);
                var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehicleID);
                if (vehicleID >= 0 && objVehicle == null)
                    throw FaultHelper.BusinessFault(null, null, "Xe không tồn tại.");
                if (objSetting.HasConstraintTimeOPS)
                {
                    var obj = model.OPS_DIImportTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        //Kiểm tra chéo trong DIImportTOMaster
                        var objT = model.OPS_DIImportTOMaster.Where(c => c.DIImportPacketID == pID && c.ID != mID && c.VehicleID == vehicleID
                            && !((c.ETD <= ETD && c.ETA <= ETD) || (c.ETD >= ETA && c.ETA >= ETA))).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objT != null)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Chuyến " + obj.SortOrder + " và chuyến " + objT.SortOrder + "trùng thời gian.");
                        }

                        //Kiểm tra chéo trong DITOMaster
                        var objG = model.OPS_DIImportGroupProduct.FirstOrDefault(c => c.DIImportTOMasterID == mID);
                        if (objG == null)
                            throw FaultHelper.BusinessFault(null, null, "Chuyến " + obj.SortOrder + " không có thông tin sản phẩm.");
                        var data = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.OrderID == objG.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID).Select(c => c.DITOMasterID).Distinct().ToList();
                        var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == vehicleID
                            && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && !data.Contains(c.ReferID)
                            && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                        if (objV != null)
                        {
                            var objTo = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == objV.ReferID);
                            if (objTo != null)
                                throw FaultHelper.BusinessFault(null, null, "Xe " + objVehicle.RegNo + " đã phân chuyến. Số: " + objTo.Code + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateToActual));
                        }
                        else
                        {
                            objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                                && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.FLM_Asset.VehicleID == vehicleID
                                && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                            if (objV != null)
                            {
                                var strCode = string.Empty;
                                switch (objV.StatusOfAssetTimeSheetID)
                                {
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                        strCode = "bảo trì";
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                        strCode = "đăng kiểm";
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                        strCode = "sửa chữa";
                                        break;
                                }
                                throw FaultHelper.BusinessFault(null, null, "Xe " + objVehicle.RegNo + " bận " + strCode + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateToActual));
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region NewCO - Import

        public DTOResult OPS_CO_Import_Packet_List(string request, bool isCreated)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());

                    var query = model.OPS_COImportPacket.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (isCreated ? true : c.IsCreated == false) && ((isAdmin || c.CUS_Setting.CustomerID == Account.SYSCustomerID) ? true : Account.ListCustomerID.Contains(c.CUS_Setting.CustomerID))).Select(c => new DTOOPSCOImportPacket
                    {
                        ID = c.ID,
                        SYSCustomerID = c.SYSCustomerID,
                        PacketName = c.PacketName,
                        Note = c.Note,
                        TotalContainer = c.TotalContainer,
                        TotalTon = c.TotalTon,
                        CUSSettingID = c.CUSSettingID > 0 ? c.CUSSettingID.Value : -1,
                        IsCreated = c.IsCreated
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSCOImportPacket>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_CO_Import_Packet_Setting_List(string request)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var data = HelperCUSSetting.CUSSettingsOPSImport_GetList(model, Account);
                    var query = data.ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOCUSSettingPlan>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_CO_Import_Packet_TOMaster_List(string request, int pID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COImportTOMaster.Where(c => c.COImportPacketID == pID).Select(c => new DTOOPSCOImportPacketTOMaster
                    {
                        ID = c.ID,
                        CreateSortOrder = c.SortOrder,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        RomoocID = c.RomoocID,
                        RomoocNo = c.CAT_Romooc.RegNo,
                        COImportPacketID = c.COImportPacketID,
                        ETD = c.ETD,
                        ETA = c.ETA,
                        SortOrder = c.SortOrder,
                        Note = c.Note,
                        VendorID = c.VendorID,
                        VendorCode = c.VendorID == Account.SYSCustomerID || c.VendorID == null ? "Xe nhà" : c.CUS_Customer.Code,
                        VendorName = c.VendorID == Account.SYSCustomerID || c.VendorID == null ? "Xe nhà" : c.CUS_Customer.CustomerName,
                        IsWarning = c.IsWarning,
                        DriverName = c.DriverName1 ?? string.Empty,
                        DriverTel = c.DriverTel1 ?? string.Empty
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSCOImportPacketTOMaster>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_CO_Import_Packet_Container_ByMaster_List(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COImportContainer.Where(c => c.COImportTOMasterID == masterID).Select(c => new DTOOPSCOImportPacket_Container
                    {
                        ID = c.ID,
                        OrderCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.Code,
                        CustomerCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                        ContainerNo = c.OPS_COTOContainer.OPS_Container.ContainerNo,
                        SealNo1 = c.OPS_COTOContainer.OPS_Container.SealNo1,
                        SealNo2 = c.OPS_COTOContainer.OPS_Container.SealNo2,
                        ETA = c.OPS_COTOContainer.ETA,
                        ETD = c.OPS_COTOContainer.ETD,
                        PartnerCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                        LocationFromCode = c.OPS_COTOContainer.CAT_Location.Code,
                        LocationFromName = c.OPS_COTOContainer.CAT_Location.Location,
                        LocationToCode = c.OPS_COTOContainer.CAT_Location1.Code,
                        LocationToName = c.OPS_COTOContainer.CAT_Location1.Location,
                        Ton = c.OPS_COTOContainer.OPS_Container.Ton,
                        StatusOfCOContainerName = c.OPS_COTOContainer.SYS_Var.ValueOfVar,
                        PackingName = c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Packing.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSCOImportPacket_Container>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_CO_Import_Packet_Container_List(string request, int pID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COImportContainer.Where(c => c.OPS_COImportTOMaster.COImportPacketID == pID).Select(c => new DTOOPSCOImportPacketContainer
                    {
                        ID = c.ID,
                        CreateSortOrder = c.OPS_COImportTOMaster.SortOrder,
                        OrderCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.Code,
                        CustomerCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                        ContainerNo = c.OPS_COTOContainer.OPS_Container.ContainerNo,
                        SealNo1 = c.OPS_COTOContainer.OPS_Container.SealNo1,
                        SealNo2 = c.OPS_COTOContainer.OPS_Container.SealNo2,
                        ETA = c.OPS_COTOContainer.ETA,
                        ETD = c.OPS_COTOContainer.ETD,
                        PartnerCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                        LocationFromCode = c.OPS_COTOContainer.CAT_Location.Code,
                        LocationFromName = c.OPS_COTOContainer.CAT_Location.Location,
                        LocationToCode = c.OPS_COTOContainer.CAT_Location1.Code,
                        LocationToName = c.OPS_COTOContainer.CAT_Location1.Location,
                        Ton = c.OPS_COTOContainer.OPS_Container.Ton,
                        StatusOfCOContainerName = c.OPS_COTOContainer.SYS_Var.ValueOfVar,
                        PackingName = c.OPS_COTOContainer.OPS_Container.ORD_Container.CAT_Packing.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSCOImportPacketContainer>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_CO_Import_Packet_ORDContainer_List(string request, int pID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COImportORDContainer.Where(c => c.COImportPacketID == pID).Select(c => new DTOOPSCOImportPacket_ContainerExport
                    {
                        ID = c.ID,
                        OrderCode = c.ORD_Container.ORD_Order.Code,
                        CustomerCode = c.ORD_Container.ORD_Order.CUS_Customer.Code,
                        ContainerNo = c.ORD_Container.ContainerNo,
                        SealNo1 = c.ORD_Container.SealNo1,
                        SealNo2 = c.ORD_Container.SealNo2,
                        ETA = c.ORD_Container.ETA,
                        ETD = c.ORD_Container.ETD,
                        Ton = c.ORD_Container.Ton,
                        CarrierCode = c.ORD_Container.ORD_Order.PartnerID > 0 ? c.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                        CarrierName = c.ORD_Container.ORD_Order.PartnerID > 0 ? c.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                        LocationFromCode = c.ORD_Container.CUS_Location2.Code,
                        LocationFromName = c.ORD_Container.CUS_Location2.LocationName,
                        LocationToCode = c.ORD_Container.CUS_Location3.Code,
                        LocationToName = c.ORD_Container.CUS_Location3.LocationName,
                        LocationDepotCode = c.ORD_Container.LocationDepotID > 0 ? c.ORD_Container.CUS_Location.Code : string.Empty,
                        LocationDepotName = c.ORD_Container.LocationDepotID > 0 ? c.ORD_Container.CUS_Location.LocationName : string.Empty,
                        LocationReturnCode = c.ORD_Container.LocationDepotReturnID > 0 ? c.ORD_Container.CUS_Location1.Code : string.Empty,
                        LocationReturnName = c.ORD_Container.LocationDepotReturnID > 0 ? c.ORD_Container.CUS_Location1.LocationName : string.Empty,
                        TypeOfContainerName = c.ORD_Container.CAT_Packing.PackingName,
                        DateGetEmpty = c.ORD_Container.DateGetEmpty,
                        DateReturnEmpty = c.ORD_Container.DateReturnEmpty,
                        RequestDate = c.ORD_Container.ORD_Order.RequestDate,
                        TypeOfTransportMode = c.ORD_Container.ORD_Order.CAT_TransportMode.Name,
                        ServiceOfOrder = c.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSCOImportPacket_ContainerExport>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPS_CO_Import_Packet_ORDContainer_NotIn_List(string request, int sID, int pID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objSetting = HelperCUSSetting.CUSSettingsOPSImport_Get(model, Account, sID);
                    if (objSetting != null)
                    {
                        var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                        var sKey = CUSSettingKey.Order.ToString();
                        var objSettingOrder = new DTOCUSSettingOrder();
                        var item = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == objSetting.CUSSettingOrderID);
                        if (item != null && !string.IsNullOrEmpty(item.Setting))
                        {
                            objSettingOrder = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrder>(item.Setting);
                            var dataExists = model.OPS_COImportORDContainer.Where(c => c.COImportPacketID == pID).Select(c => c.ORDContainerID).ToList();
                            var query = model.ORD_Container.Where(c => !dataExists.Contains(c.ID) && c.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                                && c.OPS_Container.Count == 1 && c.OPS_Container.FirstOrDefault().OPS_COTOContainer.All(o => o.IsInput && o.COTOMasterID == null)
                            && (objSettingOrder.TypeOfTransportModeID < 1 ? true : c.ORD_Order.CAT_TransportMode.TransportModeID == objSettingOrder.TypeOfTransportModeID) && (isAdmin ? true : Account.ListCustomerID.Contains(c.ORD_Order.CustomerID))).Select(c => new DTOOPSCOImportPacket_ContainerExport
                            {
                                ID = c.ID,
                                OrderCode = c.ORD_Order.Code,
                                CustomerCode = c.ORD_Order.CUS_Customer.Code,
                                ContainerNo = c.ContainerNo,
                                SealNo1 = c.SealNo1,
                                SealNo2 = c.SealNo2,
                                ETA = c.ETA,
                                ETD = c.ETD,
                                Ton = c.Ton,
                                CarrierCode = c.ORD_Order.PartnerID > 0 ? c.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                                CarrierName = c.ORD_Order.PartnerID > 0 ? c.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                                LocationFromCode = c.CUS_Location2.Code,
                                LocationFromName = c.CUS_Location2.LocationName,
                                LocationToCode = c.CUS_Location3.Code,
                                LocationToName = c.CUS_Location3.LocationName,
                                LocationDepotCode = c.LocationDepotID > 0 ? c.CUS_Location.Code : string.Empty,
                                LocationDepotName = c.LocationDepotID > 0 ? c.CUS_Location.LocationName : string.Empty,
                                LocationReturnCode = c.LocationDepotReturnID > 0 ? c.CUS_Location1.Code : string.Empty,
                                LocationReturnName = c.LocationDepotReturnID > 0 ? c.CUS_Location1.LocationName : string.Empty,
                                TypeOfContainerName = c.CAT_Packing.PackingName,
                                DateGetEmpty = c.DateGetEmpty,
                                DateReturnEmpty = c.DateReturnEmpty,
                                RequestDate = c.ORD_Order.RequestDate,
                                TypeOfTransportMode = c.ORD_Order.CAT_TransportMode.Name,
                                ServiceOfOrder = c.ORD_Order.CAT_ServiceOfOrder.Name
                            }).Distinct().ToDataSourceResult(CreateRequest(request));
                            result.Total = query.Total;
                            result.Data = query.Data as IEnumerable<DTOOPSCOImportPacket_ContainerExport>;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSSettingPlan OPS_CO_Import_Packet_Setting_Get(int sID)
        {
            try
            {
                DTOCUSSettingPlan result = new DTOCUSSettingPlan();
                using (var model = new DataEntities())
                {
                    result = HelperCUSSetting.CUSSettingsOPSImport_Get(model, Account, sID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCUSSettingPlan> OPS_CO_Import_Packet_SettingPlan()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    List<DTOCUSSettingPlan> result = new List<DTOCUSSettingPlan>();
                    result = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.Plan.ToString()).Select(c => new DTOCUSSettingPlan
                    {
                        ID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDIImportPacket OPS_CO_Import_Packet_Get(int pID)
        {
            try
            {
                DTOOPSDIImportPacket result = new DTOOPSDIImportPacket();
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_COImportPacket.FirstOrDefault(c => c.ID == pID && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                    {
                        result.ID = obj.ID;
                        result.IsCreated = obj.IsCreated;
                        result.CUSSettingID = obj.CUSSettingID > 0 ? obj.CUSSettingID.Value : -1;
                        result.CUSSettingName = obj.CUSSettingID > 0 ? obj.CUS_Setting.Name : string.Empty;
                        result.PacketName = obj.PacketName;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSCOImportPacket_Data OPS_CO_Import_Packet_Data(int pID, List<string> dataOrders)
        {
            try
            {
                DTOOPSCOImportPacket_Data result = new DTOOPSCOImportPacket_Data();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var dataORD = model.OPS_DIImportORDGroupProduct.Where(c => c.DIImportPacketID == pID).Select(c => c.ORDGroupProductID).ToList();

                    result.ListVendor = model.CUS_Customer.Where(c => !c.IsSystem && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ID) : true)
                        && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSDIImportPacket_Vendor
                        {
                            ID = c.ID,
                            IsVendor = c.ID != Account.SYSCustomerID,
                            VendorCode = c.Code,
                            VendorName = c.CustomerName
                        }).ToList();
                    var objNew = new DTOOPSDIImportPacket_Vendor();
                    objNew.ID = Account.SYSCustomerID;
                    objNew.IsVendor = false;
                    objNew.VendorName = objNew.VendorCode = "Xe nhà";
                    if (result.ListVendor.Count(c => c.ID == objNew.ID) == 0)
                        result.ListVendor.Insert(0, objNew);

                    result.ListDriver = model.CUS_Driver.Where(c => c.CustomerID != Account.SYSCustomerID).Select(c => new DTOOPSDIImportPacket_Driver
                    {
                        ID = c.CAT_Driver.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        DriverTel = c.CAT_Driver.Cellphone,
                        VendorID = c.CustomerID
                    }).ToList();

                    var dataDriverHome = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOOPSDIImportPacket_Driver
                    {
                        ID = c.CAT_Driver.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        DriverTel = c.CAT_Driver.Cellphone,
                        VendorID = Account.SYSCustomerID
                    }).ToList();
                    result.ListDriver.AddRange(dataDriverHome);

                    result.ListVehicle = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID != Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSDIImportPacket_Vehicle
                    {
                        ID = c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VendorID = c.CustomerID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight > 0 ? c.CAT_Vehicle.MaxWeight.Value : 0,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).ToList();

                    var dataVehicleHome = model.FLM_Asset.Where(c => c.VehicleID > 2 && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSDIImportPacket_Vehicle
                    {
                        ID = c.VehicleID.Value,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VendorID = Account.SYSCustomerID,
                        CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID ?? -1,
                        CurrentRomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                        DriverName = c.CAT_Vehicle.DriverName,
                        DriverTel = c.CAT_Vehicle.Cellphone,
                        MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).Distinct().ToList();
                    result.ListVehicle.AddRange(dataVehicleHome);

                    result.ListRomooc = model.CUS_Romooc.Where(c => c.RomoocID > 2 && c.CustomerID != Account.SYSCustomerID).Select(c => new DTOOPSDIImportPacket_Vehicle
                    {
                        ID = c.RomoocID,
                        VehicleNo = c.CAT_Romooc.RegNo,
                        VendorID = c.CustomerID,
                        MaxWeight = c.CAT_Romooc.MaxWeight > 0 ? c.CAT_Romooc.MaxWeight.Value : 0
                    }).ToList();

                    var dataRomoocHome = model.FLM_Asset.Where(c => c.RomoocID > 0 && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOOPSDIImportPacket_Vehicle
                    {
                        ID = c.RomoocID.Value,
                        VehicleNo = c.CAT_Romooc.RegNo,
                        VendorID = Account.SYSCustomerID,
                        MaxWeight = c.CAT_Romooc.MaxWeight ?? 0
                    }).Distinct().ToList();
                    result.ListRomooc.AddRange(dataRomoocHome);

                    result.ListVehicleTimeSheet = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 0 && c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = c.FLM_Asset.VehicleID.Value,
                        DateFrom = c.DateFromActual,
                        DateTo = c.DateToActual
                    }).ToList();

                    result.ListVehiclePlan = model.FLM_VehiclePlan.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain).Select(c => new DTOFLMVehiclePlan
                    {
                        ID = c.ID,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        DriverID = c.FLM_Driver.DriverID,
                        DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                        VehicleID = c.VehicleID
                    }).ToList();

                    result.ListORDContainer = model.ORD_Container.Where(c => dataOrders.Contains(c.ORD_Order.Code)).Select(c => new DTOOPSCOImportPacket_Container
                    {
                        ID = c.ID,
                        OrderID = c.OrderID,
                        OrderCode = c.ORD_Order.Code,
                        CustomerID = c.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                        RequestDate = c.ORD_Order.RequestDate,
                        ETD = c.ETD,
                        ETA = c.ETA,
                        LocationFromID = c.LocationFromID.Value,
                        LocationFromCode = c.CUS_Location2.Code,
                        LocationFromName = c.CUS_Location2.LocationName,
                        LocationToID = c.LocationToID.Value,
                        LocationToCode = c.CUS_Location3.Code,
                        LocationToName = c.CUS_Location3.LocationName,
                        LocationDepotID = c.LocationDepotID,
                        LocationDepotCode = c.LocationDepotID > 0 ? c.CUS_Location.Code : string.Empty,
                        LocationDepotName = c.LocationDepotID > 0 ? c.CUS_Location.LocationName : string.Empty,
                        LocationReturnID = c.LocationDepotReturnID,
                        LocationReturnCode = c.LocationDepotReturnID > 0 ? c.CUS_Location1.Code : string.Empty,
                        LocationReturnName = c.LocationDepotReturnID > 0 ? c.CUS_Location1.LocationName : string.Empty,
                        Ton = c.Ton,
                        CutOffTime = c.CutOffTime,
                        DateGetEmpty = c.DateGetEmpty,
                        DateReturnEmpty = c.DateReturnEmpty,
                        InspectionDate = c.DateInspect,
                        ContainerNo = c.ContainerNo,
                        SealNo1 = c.SealNo1,
                        SealNo2 = c.SealNo2,
                        VesselNo = c.ORD_Order.VesselNo ?? string.Empty,
                        TripNo = c.VesselMasterCode ?? string.Empty,
                        VesselName = c.ORD_Order.VesselName ?? string.Empty,
                        PartnerID = c.ORD_Order.PartnerID,
                        PackingID = c.PackingID
                    }).ToList();

                    result.ListOPSContainer = model.OPS_COTOContainer.Where(c => c.OPS_Container.ContainerID > 0 && c.COTOMasterID == null && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && dataOrders.Contains(c.OPS_Container.ORD_Container.ORD_Order.Code)).Select(c => new DTOOPSCOImportPacket_Container
                    {
                        ID = c.ID,
                        ORDContainerID = c.OPS_Container.ContainerID,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                        ContainerNo = c.OPS_Container.ContainerNo,
                        SealNo1 = c.OPS_Container.SealNo1,
                        SealNo2 = c.OPS_Container.SealNo2,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        PartnerCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromName = c.CAT_Location.Location,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToName = c.CAT_Location1.Location,
                        LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : string.Empty,
                        LocationDepotName = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.LocationName : string.Empty,
                        LocationReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : string.Empty,
                        LocationReturnName = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.LocationName : string.Empty,
                        ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                        TypeOfTransportMode = c.OPS_Container.ORD_Container.ORD_Order.CAT_TransportMode.Name,
                        Ton = c.OPS_Container.Ton,
                        StatusOfCOContainerName = c.SYS_Var.ValueOfVar,
                        PackingName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCOImportPacket_ContainerExport> OPS_CO_Import_Packet_ORDContainerExport_List(int pID, List<int> data)
        {
            try
            {
                List<DTOOPSCOImportPacket_ContainerExport> result = new List<DTOOPSCOImportPacket_ContainerExport>();
                using (var model = new DataEntities())
                {
                    var dataORD = new List<int>();
                    if (data.Count == 0)
                    {
                        dataORD = model.OPS_COImportORDContainer.Where(c => c.COImportPacketID == pID).Select(c => c.ORDContainerID).Distinct().ToList();
                    }
                    else
                    {
                        dataORD = model.OPS_COImportORDContainer.Where(c => c.COImportPacketID == pID && data.Contains(c.ID)).Select(c => c.ORDContainerID).Distinct().ToList();
                    }
                    result = model.ORD_Container.Where(c => dataORD.Contains(c.ID)).Select(c => new DTOOPSCOImportPacket_ContainerExport
                        {
                            ID = c.ID,
                            OrderID = c.OrderID,
                            OrderCode = c.ORD_Order.Code,
                            CustomerCode = c.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                            RequestDate = c.ORD_Order.RequestDate,
                            RequestDate_Time = c.ORD_Order.RequestDate,
                            RequestTime = c.ORD_Order.RequestDate,
                            ETD = c.ETD,
                            ETA = c.ETA,
                            IsHot = c.ORD_Order.IsHot,
                            LocationFromCode = c.CUS_Location2.Code,
                            LocationFromName = c.CUS_Location2.LocationName,
                            LocationToCode = c.CUS_Location3.Code,
                            LocationToName = c.CUS_Location3.LocationName,
                            LocationToAddress = c.CUS_Location3.CAT_Location.Address,
                            LocationToProvince = c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName,
                            LocationToDistrict = c.CUS_Location3.CAT_Location.CAT_District.DistrictName,
                            LocationToNote = c.CUS_Location3.CAT_Location.Note,
                            LocationToNote1 = c.CUS_Location3.CAT_Location.Note1,
                            LocationDepotCode = c.LocationDepotID > 0 ? c.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.LocationDepotID > 0 ? c.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = c.LocationDepotReturnID > 0 ? c.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.LocationDepotReturnID > 0 ? c.CUS_Location1.LocationName : string.Empty,
                            Note = c.ORD_Order.Note,
                            PriceTOMaster = c.ORD_Order.RoutePrice,
                            RoutingCode = c.CUSRoutingID > 0 ? c.CUS_Routing.Code : string.Empty,
                            ServiceOfOrder = c.ORD_Order.CAT_ServiceOfOrder.Name,
                            Ton = c.Ton,
                            TypeOfTransportMode = c.ORD_Order.CAT_TransportMode.Name,
                            UserDefine1 = c.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_Order.UserDefine2,
                            UserDefine3 = c.ORD_Order.UserDefine3,
                            UserDefine4 = c.ORD_Order.UserDefine4,
                            UserDefine5 = c.ORD_Order.UserDefine5,
                            UserDefine6 = c.ORD_Order.UserDefine6,
                            UserDefine7 = c.ORD_Order.UserDefine7,
                            UserDefine8 = c.ORD_Order.UserDefine8,
                            UserDefine9 = c.ORD_Order.UserDefine9,
                            CutOffTime = c.CutOffTime,
                            DateGetEmpty = c.DateGetEmpty,
                            DateReturnEmpty = c.DateReturnEmpty,
                            InspectionDate = c.DateInspect,
                            TimeGetEmpty = c.DateGetEmpty,
                            TimeReturnEmpty = c.DateReturnEmpty,
                            Date_TimeGetEmpty = c.DateGetEmpty,
                            Date_TimeReturnEmpty = c.DateReturnEmpty,
                            TypeOfContainerName = c.CAT_Packing.Code,
                            TypeOfWAInspectionStatus = c.TypeOfWAInspectionStatusID == -(int)SYSVarType.TypeOfWAInspectionNo,
                            ContainerNo = c.ContainerNo,
                            SealNo1 = c.SealNo1,
                            SealNo2 = c.SealNo2,
                            CarrierCode = c.ORD_Order.PartnerID > 0 ? c.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.ORD_Order.PartnerID > 0 ? c.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            VesselName = c.ORD_Order.VesselName,
                            VesselNo = c.ORD_Order.VesselNo,
                            TripNo = c.VesselMasterCode
                        }).OrderBy(c => c.OrderID).ToList();
                    foreach (var item in result)
                    {
                        if (item.RequestDate != null)
                        {
                            if (item.ETA != null)
                                item.ETATime_RequestDate = item.ETA.Value.Subtract(item.RequestDate.Value);
                            if (item.ETD != null)
                                item.ETDTime_RequestDate = item.ETD.Value.Subtract(item.RequestDate.Value);
                        }
                        item.CarrierCodeName = item.CarrierCode + "-" + item.CarrierName;
                        item.CustomerCodeName = item.CustomerCode + "-" + item.CustomerName;
                        item.LocationFromCodeName = item.LocationFromCode + "-" + item.LocationFromName;
                        item.LocationToCodeName = item.LocationToCode + "-" + item.LocationToName;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int OPS_CO_Import_Packet_Save(DTOOPSCOImportPacket item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (model.OPS_COImportPacket.Count(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID != item.ID && c.PacketName == item.PacketName) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Trùng tên");
                    var obj = model.OPS_COImportPacket.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new OPS_COImportPacket();
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.OPS_COImportPacket.Add(obj);
                    }
                    else
                    {
                        if (obj.IsCreated == true)
                            throw FaultHelper.BusinessFault(null, null, "Không thể sửa.");
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Note = item.Note;
                    obj.PacketName = item.PacketName;
                    obj.CUSSettingID = item.CUSSettingID;
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Import_Packet_Delete(int pID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_COImportPacket.FirstOrDefault(c => c.ID == pID && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                    {

                        model.OPS_COImportPacket.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Import_Packet_Reset(int pID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_COImportPacket.FirstOrDefault(c => c.ID == pID && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                    {

                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.TotalContainer = 0;
                        obj.TotalTon = 0;
                        obj.IsCreated = false;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Import_Packet_Import(int pID, int sID, List<DTOOPSCOImportPacketTOMaster_Import> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_COImportPacket.FirstOrDefault(c => c.ID == pID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu.");
                    foreach (var item in data)
                    {
                        var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                        if (objVehicle == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy xe [" + item.VehicleNo + "]");
                        if (item.ETA == null || item.ETD == null)
                            throw FaultHelper.BusinessFault(null, null, "Chuyến " + item.SortOrder + " không có thông tin ETD - ETA");
                    }

                    foreach (var o in model.OPS_COImportTOMaster.Where(c => c.COImportPacketID == obj.ID).ToList())
                    {
                        foreach (var i in model.OPS_COImportContainer.Where(c => c.COImportTOMasterID == o.ID).ToList())
                        {
                            model.OPS_COImportContainer.Remove(i);
                        }
                        model.OPS_COImportTOMaster.Remove(o);
                    }
                    obj.TotalTon = 0;
                    obj.TotalContainer = 0;
                    model.SaveChanges();

                    obj.ModifiedDate = DateTime.Now;
                    obj.ModifiedBy = Account.UserName;
                    obj.CUSSettingID = sID;

                    foreach (var item in data)
                    {
                        OPS_COImportTOMaster objMaster = new OPS_COImportTOMaster();
                        objMaster.CreatedDate = DateTime.Now;
                        objMaster.CreatedBy = Account.UserName;
                        objMaster.COImportPacketID = obj.ID;
                        objMaster.SortOrder = item.SortOrder;
                        objMaster.VehicleID = item.VehicleID;
                        objMaster.RomoocID = item.RomoocID;
                        objMaster.VendorID = item.VendorID;
                        objMaster.DriverName1 = item.DriverName;
                        objMaster.DriverTel1 = item.DriverTel;
                        objMaster.Note = item.Note;
                        objMaster.ETD = item.ETD.Value;
                        objMaster.ETA = item.ETA.Value;

                        model.OPS_COImportTOMaster.Add(objMaster);
                        model.SaveChanges();

                        List<int> dataCoTemp = new List<int>();
                        var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                        foreach (var con in item.ListContainer)
                        {
                            var objCon = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == con.ID);
                            if (objCon != null)
                            {
                                OPS_COImportContainer objC = new OPS_COImportContainer();
                                objC.CreatedDate = DateTime.Now;
                                objC.CreatedBy = Account.UserName;
                                objC.COImportTOMasterID = objMaster.ID;
                                objC.COTOContainerID = con.ID;
                                model.OPS_COImportContainer.Add(objC);

                                objMaster.Ton += objCon.OPS_Container.Ton;
                                var max = objVehicle.MaxWeight ?? 0;
                                if (objMaster.Ton > max)
                                    objMaster.IsWarning = true;
                                if (!dataCoTemp.Contains(objCon.OPSContainerID))
                                {
                                    obj.TotalTon += objCon.OPS_Container.Ton;
                                    obj.TotalContainer += 1;
                                    dataCoTemp.Add(objCon.OPSContainerID);
                                }
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Import_Packet_2View_Save(List<DTOOPSCOImportPacketTOMaster> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.OPS_COImportTOMaster.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            if (item.ETA == null || item.ETD == null)
                                throw FaultHelper.BusinessFault(null, null, "Chuyến " + item.SortOrder + " không có thông tin ETD - ETA");
                            if (item.VendorID == null || item.VendorID < 1 || item.VendorID == Account.SYSCustomerID)
                            {
                                var objPlanning = model.FLM_VehiclePlan.FirstOrDefault(c => c.VehicleID == item.VehicleID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain
                                  && !((c.DateFrom < item.ETD && c.DateTo < item.ETD) || (c.DateFrom > item.ETA && c.DateTo > item.ETA)));
                                if (objPlanning != null)
                                {
                                    item.DriverName = objPlanning.FLM_Driver.CAT_Driver.FirstName + " " + objPlanning.FLM_Driver.CAT_Driver.LastName;
                                    item.DriverTel = objPlanning.FLM_Driver.CAT_Driver.Cellphone;
                                }
                                else
                                {
                                    var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                                    if (objVehicle == null)
                                        throw FaultHelper.BusinessFault(null, null, "Chuyến " + item.SortOrder + ", xe " + item.VehicleNo + " không tồn tại.");
                                    if (OPS_FindFLMDriver(model, objVehicle.DriverName) > 0)
                                    {
                                        item.DriverName = objVehicle.DriverName;
                                        item.DriverTel = objVehicle.Cellphone;
                                    }
                                }
                                if (string.IsNullOrEmpty(item.DriverName))
                                    throw FaultHelper.BusinessFault(null, null, "Chuyến " + item.SortOrder + ", xe " + item.VehicleNo + " chưa thiết lập tài xế.");
                            }
                            if (obj.VendorID != item.VendorID || obj.RomoocID != item.RomoocID || obj.VehicleID != item.VehicleID || obj.ETD != item.ETD || obj.ETA != item.ETA || obj.DriverName1 != item.DriverName || obj.DriverTel1 != item.DriverTel)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.VehicleID = item.VehicleID.Value;
                                obj.RomoocID = item.RomoocID.Value;
                                obj.VendorID = item.VendorID;
                                obj.DriverName1 = item.DriverName;
                                obj.DriverTel1 = item.DriverTel;
                                obj.ETD = item.ETD.Value;
                                obj.ETA = item.ETA.Value;
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Import_Packet_ToOPS(int pID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    OPS_CO_Import_Packet_CreateTO(model, pID, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Import_Packet_ToMON(int pID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    OPS_CO_Import_Packet_CreateTO(model, pID, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Import_Packet_Vehicle_Update(List<DTOOPSDIImportPacket_Vehicle> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var dataCode = new List<string>();
                        var dataChar = new char[] { '-', ' ', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '/', '?', '<', ',', '>', '~', '`' };
                        var sCode = item.VehicleNo.Split(dataChar, StringSplitOptions.RemoveEmptyEntries).ToArray();
                        foreach (var c in dataChar)
                        {
                            dataCode.Add(string.Join(c.ToString(), sCode).ToLower());
                        }
                        if (item.TypeOfVehicleID == 1)
                        {
                            var obj = model.CAT_Vehicle.FirstOrDefault(c => dataCode.Contains(c.RegNo.Trim().ToLower()));
                            if (obj == null)
                            {
                                obj = new CAT_Vehicle();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.RegNo = item.VehicleNo;
                                obj.CurrentVendorID = item.VendorID;
                                obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTractor;
                                model.CAT_Vehicle.Add(obj);
                                model.SaveChanges();
                            }
                            var objCus = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == obj.ID && c.CustomerID == item.VendorID);
                            if (objCus == null)
                            {
                                objCus = new CUS_Vehicle();
                                objCus.CreatedBy = Account.UserName;
                                objCus.CreatedDate = DateTime.Now;
                                objCus.VehicleID = obj.ID;
                                objCus.CustomerID = item.VendorID;
                                model.CUS_Vehicle.Add(objCus);
                                model.SaveChanges();
                            }
                        }
                        else
                        {
                            var obj = model.CAT_Romooc.FirstOrDefault(c => dataCode.Contains(c.RegNo.Trim().ToLower()));
                            if (obj == null)
                            {
                                obj = new CAT_Romooc();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.RegNo = item.VehicleNo;
                                obj.CurrentVendorID = item.VendorID;
                                model.CAT_Romooc.Add(obj);
                                model.SaveChanges();
                            }
                            var objCus = model.CUS_Romooc.FirstOrDefault(c => c.RomoocID == obj.ID && c.CustomerID == item.VendorID);
                            if (objCus == null)
                            {
                                objCus = new CUS_Romooc();
                                objCus.CreatedBy = Account.UserName;
                                objCus.CreatedDate = DateTime.Now;
                                objCus.RomoocID = obj.ID;
                                objCus.CustomerID = item.VendorID;
                                model.CUS_Romooc.Add(objCus);
                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Import_Packet_ORDContainer_SaveList(int pID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.ORD_Container.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            var dataCheck = model.OPS_COTOContainer.Where(c => c.OPS_Container.ContainerID == item && c.IsInput == true
                                && c.COTOMasterID == null && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).ToList();
                            if (dataCheck.Count > 0)
                            {
                                var objOrd = model.OPS_COImportORDContainer.FirstOrDefault(c => c.COImportPacketID == pID && c.ORDContainerID == obj.ID);
                                if (objOrd == null)
                                {
                                    objOrd = new OPS_COImportORDContainer();
                                    objOrd.CreatedBy = Account.UserName;
                                    objOrd.CreatedDate = DateTime.Now;
                                    objOrd.COImportPacketID = pID;
                                    objOrd.ORDContainerID = obj.ID;
                                    model.OPS_COImportORDContainer.Add(objOrd);
                                }
                                foreach (var con in dataCheck)
                                {
                                    con.ModifiedBy = Account.UserName;
                                    con.ModifiedDate = DateTime.Now;
                                    con.IsInput = false;
                                }
                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CO_Import_Packet_ORDContainer_DeleteList(int pID, List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.OPS_COImportORDContainer.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            var dataOPS = model.OPS_COTOContainer.Where(c => c.IsInput == false && c.OPS_Container.ContainerID == obj.ORDContainerID
                                && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).ToList();
                            foreach (var con in dataOPS)
                            {
                                con.ModifiedBy = Account.UserName;
                                con.ModifiedDate = DateTime.Now;
                                con.IsInput = true;
                            }
                            model.OPS_COImportORDContainer.Remove(obj);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPS_CheckingTime_COIMP(DataEntities model, DTOSYSSetting objSetting, int pID, int mID, int vehicleID, int romoocID, DateTime ETD, DateTime ETA)
        {
            try
            {
                var strETD = String.Format("{0:d/M HH:mm}", ETD);
                var strETA = String.Format("{0:d/M HH:mm}", ETA);
                var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.ID == vehicleID);
                if (vehicleID >= 0 && objVehicle == null)
                    throw FaultHelper.BusinessFault(null, null, "Đầu kéo không tồn tại.");
                var objRomooc = model.CAT_Romooc.FirstOrDefault(c => c.ID == romoocID);
                if (romoocID >= 0 && objRomooc == null)
                    throw FaultHelper.BusinessFault(null, null, "Romooc không tồn tại.");
                if (objSetting.HasConstraintTimeOPS)
                {
                    var obj = model.OPS_COImportTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        //Kiểm tra chéo trong COImportTOMaster
                        var objT = model.OPS_COImportTOMaster.Where(c => c.COImportPacketID == pID && c.ID != mID && (c.VehicleID == vehicleID || c.RomoocID == romoocID)
                            && !((c.ETD <= ETD && c.ETA <= ETD) || (c.ETD >= ETA && c.ETA >= ETA))).OrderBy(c => c.SortOrder).FirstOrDefault();
                        if (objT != null)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Chuyến " + obj.SortOrder + " và chuyến " + objT.SortOrder + "trùng thời gian.");
                        }

                        //Kiểm tra chéo trong COTOMaster
                        var objC = model.OPS_COImportContainer.FirstOrDefault(c => c.COImportTOMasterID == mID);
                        if (objC == null)
                            throw FaultHelper.BusinessFault(null, null, "Chuyến " + obj.SortOrder + " không có thông tin container.");
                        var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == vehicleID && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster
                            && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                        if (objV != null)
                        {
                            var objTo = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == objV.ReferID);
                            if (objTo != null)
                                throw FaultHelper.BusinessFault(null, null, "Đầu kéo " + objVehicle.RegNo + " đã phân chuyến. Số: " + objTo.Code + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateToActual));
                        }
                        else
                        {
                            objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                                && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.FLM_Asset.VehicleID == vehicleID
                                && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                            if (objV != null)
                            {
                                var strCode = string.Empty;
                                switch (objV.StatusOfAssetTimeSheetID)
                                {
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                        strCode = "bảo trì";
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                        strCode = "đăng kiểm";
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                        strCode = "sửa chữa";
                                        break;
                                }
                                throw FaultHelper.BusinessFault(null, null, "Đầu kéo " + objVehicle.RegNo + " bận " + strCode + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateToActual));
                            }
                        }

                        var objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID == romoocID && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster
                           && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                        if (objR != null)
                        {
                            var objTo = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == objR.ReferID);
                            if (objTo != null)
                                throw FaultHelper.BusinessFault(null, null, "Đầu kéo " + objVehicle.RegNo + " đã phân chuyến. Số: " + objTo.Code + ", từ: " + String.Format("{0:d/M HH:mm}", objR.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objR.DateToActual));
                        }
                        else
                        {
                            objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                                && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.FLM_Asset.RomoocID == romoocID
                                && !((c.DateFromActual <= ETD && c.DateToActual <= ETD) || (c.DateFromActual >= ETA && c.DateToActual >= ETA))).OrderBy(c => c.DateFromActual).FirstOrDefault();
                            if (objR != null)
                            {
                                var strCode = string.Empty;
                                switch (objR.StatusOfAssetTimeSheetID)
                                {
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                        strCode = "bảo trì";
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                        strCode = "đăng kiểm";
                                        break;
                                    case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                        strCode = "sửa chữa";
                                        break;
                                }
                                throw FaultHelper.BusinessFault(null, null, "Đầu kéo " + objVehicle.RegNo + " bận " + strCode + ", từ: " + String.Format("{0:d/M HH:mm}", objR.DateFromActual) + " đến: " + String.Format("{0:d/M HH:mm}", objR.DateToActual));
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public string OPS_CO_Import_Packet_CheckLocation()
        {
            string sError = string.Empty;
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
                    if (obj != null)
                    {
                        if (obj.LocationFromID <= 0 && obj.LocationToID <= 0)
                            sError += "Vui lòng thiết lập điểm bắt đầu, kết thúc chuyến mặc định";

                        if (obj.LocationFromID <= 0)
                            sError += "Vui lòng thiết lập điểm bắt đầu chuyến mặc định";

                        if (obj.LocationToID <= 0)
                            sError += "Vui lòng thiết lập điểm kết thúc chuyến mặc định";

                        if (obj.LocationRomoocReturnID <= 0)
                            sError += "Vui lòng thiết lập bãi romooc mặc định";
                    }
                }
                return sError;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void OPS_CO_Import_Packet_CreateTO(DataEntities model, int pID, bool isMON)
        {
            List<int> lstMasterID = new List<int>();
            var objSetting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);

            if (objSetting == null || (objSetting.LocationFromID <= 0 && objSetting.LocationToID <= 0))
                throw FaultHelper.BusinessFault(null, null, "Vui lòng thiết lập điểm bắt đầu, kết thúc chuyến mặc định trước.");

            if (objSetting.LocationFromID <= 0)
                throw FaultHelper.BusinessFault(null, null, "Vui lòng thiết lập điểm bắt đầu chuyến mặc định trước.");

            if (objSetting.LocationToID <= 0)
                throw FaultHelper.BusinessFault(null, null, "Vui lòng thiết lập điểm kết thúc chuyến mặc định trước.");

            if (objSetting.LocationRomoocReturnID <= 0)
                throw FaultHelper.BusinessFault(null, null, "Vui lòng thiết lập bãi chứa romooc mặc định trước.");

            var objCheckL = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationFromID);
            if (objCheckL == null)
                throw FaultHelper.BusinessFault(null, null, "Điểm bắt đầu chuyến không tồn tại.");
            objCheckL = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationToID);
            if (objCheckL == null)
                throw FaultHelper.BusinessFault(null, null, "Điểm kết thúc chuyến không tồn tại.");
            objCheckL = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationRomoocReturnID);
            if (objCheckL == null)
                throw FaultHelper.BusinessFault(null, null, "Bãi chứa romooc không tồn tại.");

            var obj = model.OPS_COImportPacket.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == pID);
            if (obj == null)
                throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu.");
            var dataMaster = model.OPS_COImportTOMaster.Where(c => c.COImportPacketID == pID).ToList();
            if (dataMaster.Count == 0)
                throw FaultHelper.BusinessFault(null, null, "Không có thông tin chuyến.");

            if (obj.CUSSettingID == null)
                throw FaultHelper.BusinessFault(null, null, "Không có thông tin thiết lập import.");

            //Check Data
            List<int> dataOrders = new List<int>();
            var dataContainer = model.OPS_COImportContainer.Where(c => c.OPS_COImportTOMaster.COImportPacketID == pID).Select(c => new
            {
                c.ID,
                c.COTOContainerID,
                c.COImportTOMasterID,
                ContainerNo = c.OPS_COTOContainer.OPS_Container.ORD_Container.ContainerNo,
                OrderID = c.OPS_COTOContainer.OPS_Container.ORD_Container.OrderID,
                OrderCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.Code,
                COTOMasterID = c.OPS_COTOContainer.COTOMasterID,
                c.OPS_COTOContainer.LocationFromID,
                c.OPS_COTOContainer.LocationToID,
                c.OPS_COTOContainer.ETD,
                c.OPS_COTOContainer.ETA
            }).ToList();
            foreach (var item in dataContainer)
            {
                if (item.COTOMasterID > 0)
                    throw FaultHelper.BusinessFault(null, null, "Container '" + item.ContainerNo + "' ĐH: '" + item.OrderCode + "' đã lập chuyến.");
                dataOrders.Add(item.OrderID);
            }

            //Kiểm tra thông tin chuyến
            foreach (var item in dataMaster)
            {
                if (item.ETA == null || item.ETD == null)
                    throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin thời gian ETD hoặc ETA. Chuyến " + item.SortOrder);
                if (item.ETD >= item.ETA)
                    throw FaultHelper.BusinessFault(null, null, "Sai ràng buộc thời gian ETD - ETA. Chuyến " + item.SortOrder);
                if ((item.VendorID == null || item.VendorID == Account.SYSCustomerID) && string.IsNullOrEmpty(item.DriverName1))
                    throw FaultHelper.BusinessFault(null, null, "Không có thông tin tài xế. Chuyến " + item.SortOrder);
                OPS_CheckingTime_COIMP(model, objSetting, pID, item.ID, item.VehicleID, item.RomoocID, item.ETD, item.ETA);
                var dataCon = model.OPS_COImportContainer.Where(c => c.COImportTOMasterID == item.ID).ToList();
                var sID = dataCon.Select(c => c.COTOContainerID).ToList();
                var dataOPS = model.OPS_COTOContainer.Where(c => sID.Contains(c.ID)).ToList();
                if (dataOPS.Count == 0)
                    throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu container. Chuyến " + item.SortOrder);
            }
            model.SaveChanges();

            // Xử lý cho từng chuyến
            foreach (var item in dataMaster)
            {
                DTOOPSCOTOMaster master = new DTOOPSCOTOMaster();
                master.ETD = item.ETD;
                master.ETA = item.ETA;
                master.VehicleID = item.VehicleID;
                master.RomoocID = item.RomoocID;
                master.VendorOfVehicleID = item.VendorID;
                master.VendorOfRomoocID = item.VendorID;
                master.DriverID1 = item.DriverID1;
                master.DriverName1 = item.DriverName1;
                master.DriverTel1 = item.DriverTel1;
                master.DriverCard1 = item.DriverCard1;
                master.Note = item.Note;
                master.SortOrder = item.SortOrder;

                master.ListCOContainer = new List<DTOOPSCOTOContainer>();
                master.ListCOContainer = dataContainer.Where(c => c.COImportTOMasterID == item.ID).Select(c => new DTOOPSCOTOContainer
                {
                    ID = c.COTOContainerID,
                    LocationFromID = c.LocationFromID,
                    LocationToID = c.LocationToID,
                    ETA = c.ETA,
                    ETD = c.ETD,
                }).ToList();

                var objMaster = HelperTOMaster.OPSCO_CreateItem(model, Account, master, null);
                if (objMaster.ID > 0)
                {
                    lstMasterID.Add(objMaster.ID);
                    // Update các OPS_COTOContainer IsInput = true
                    foreach (var itemContainer in master.ListCOContainer)
                    {
                        var objContainer = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == itemContainer.ID);
                        if (objContainer != null)
                        {
                            objContainer.ModifiedBy = Account.UserName;
                            objContainer.ModifiedDate = DateTime.Now;
                            objContainer.IsInput = true;
                        }
                    }
                }
            }

            if (isMON)
            {
                HelperTOMaster.OPSCO_Tendered(model, Account, lstMasterID);
            }

            //Cập nhật trạng thái đơn hàng.
            HelperStatus.ORDOrder_Status(model, Account, dataOrders.Distinct().ToList());
        }
        #endregion

        #region DI Import ExcelOnline
        public DTOCUSSettingOrder OPS_Order_Excel_Setting_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingOrder result = new DTOCUSSettingOrder();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrder>(obj.Setting);
                            if (result != null)
                            {
                                var transportID = HelperContract.GetTransportMode(model, result.TypeOfTransportModeID);
                                result.IsContainer = transportID == -(int)SYSVarType.TransportModeFCL || transportID == -(int)SYSVarType.TransportModeLCL;
                            }
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_ImportCheck OPS_Order_Excel_Import_Data(int cusID)
        {
            try
            {
                int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;

                int iTon = -(int)SYSVarType.PriceOfGOPTon;
                int iCBM = -(int)SYSVarType.PriceOfGOPCBM;

                DTOORDOrder_ImportCheck result = new DTOORDOrder_ImportCheck();
                result.Setting = new DTOSYSSetting();
                result.CUSSetting = new CUSSettingsCutOffTimeSuggest();
                result.SYSCustomerID = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var defTon = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon);
                    var defCBM = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM);
                    var defTU = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU);

                    result.Setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
                    result.CUSSetting = HelperCUSSetting.CUSSettingsReport_CutOfTimeSuggest_Get(model, Account, cusID);
                    result.ListCode = model.ORD_Order.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOORDOrder { Code = c.Code, CustomerID = c.CustomerID, RequestDate = c.RequestDate, SYSCustomerID = c.SYSCustomerID }).ToList();

                    result.ListCustomer = model.CUS_Customer.Where(c => !c.IsSystem && c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS && (isAdmin ? true : Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName,
                        IsFindEconomicZone = c.IsFindEconomicZone
                    }).ToList();

                    result.ListService = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName,
                        PackingID = 0,
                        PackingName = string.Empty
                    }).ToList();

                    result.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                    }).ToList();

                    result.ListDepot = model.CUS_Location.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iCarrier).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListStock = model.CUS_Location.Where(c => c.CusPartID == null && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListDistributor = model.CUS_Partner.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CAT_Partner.TypeOfPartnerID == iDistributor).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();

                    result.ListGroupOfProduct = model.CUS_GroupOfProductInStock.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == cusID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_GroupProduct
                    {
                        ID = c.GroupOfProductID,
                        Code = c.CUS_GroupOfProduct.Code,
                        GroupName = c.CUS_GroupOfProduct.GroupName,
                        CUSStockID = c.StockID,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        StockID = c.CUS_Location.LocationID,
                        IsDefault = c.CUS_GroupOfProduct.IsDefault,
                        PackingType = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? 1 : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? 2 : 3,
                        DefaultPackingID = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.ID : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.ID : defTU.ID,
                        DefaultPackingName = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.PackingName : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.PackingName : defTU.PackingName
                    }).ToList();

                    result.ListSeaPort = model.CUS_Location.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        CustomerID = c.CustomerID,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListCarrier = model.CUS_Partner.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CAT_Partner.TypeOfPartnerID == iCarrier).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();

                    result.ListProduct = model.CUS_Product.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == cusID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_Product
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        PackingID = c.PackingID,
                        PackingTypeGOP = c.PackingID > 0 ? c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3 : 0,
                        Length = c.Length,
                        Height = c.Height,
                        Width = c.Width,
                        Weight = c.Weight,
                        CBM = c.CBM,
                        IsKg = c.IsKg,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        SortOrder = c.SortOrder,
                        IsDefault = c.IsDefault
                    }).ToList();

                    result.ListCUSLocation = model.CUS_Location.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListGroupOfVehicle = model.CAT_GroupOfVehicle.Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Ton = c.Ton.HasValue ? c.Ton.Value : 0,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    result.ListDistributorLocation = model.CUS_Location.Where(c => c.CusPartID != null && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iDistributor).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID
                    }).ToList();

                    result.ListRoute = model.CUS_Routing.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        CustomerID = c.CustomerID,
                        RoutingAreaToID = c.CAT_Routing.RoutingAreaToID
                    }).ToList();

                    var lstRoutingAreaToID = result.ListRoute.Where(c => c.RoutingAreaToID > 0).Select(c => c.RoutingAreaToID.Value).Distinct().ToList();

                    result.ListRouteArea = model.CAT_RoutingAreaDetail.Where(c => lstRoutingAreaToID.Contains(c.RoutingAreaID)).Select(c => new CATRoutingAreaDetail
                        {
                            RoutingAreaID = c.RoutingAreaID,
                            ProvinceID = c.ProvinceID,
                            DistrictID = c.DistrictID,
                        }).ToList();

                    result.ListServiceOfOrder = model.CAT_ServiceOfOrder.Select(c => new CATServiceOfOrder
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.Name,
                            ServiceOfOrderID = c.ServiceOfOrderID,
                            ServiceOfOrderName = c.SYS_Var.ValueOfVar
                        }).ToList();

                    result.ListTransportMode = model.CAT_TransportMode.Select(c => new CATTransportMode
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        TransportModeID = c.TransportModeID,
                        TransportModeName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    DateTime dtNow = DateTime.Now.Date;
                    result.ListContractTerm = model.CAT_ContractTerm.Where(c => c.CAT_Contract.SYSCustomerID == Account.SYSCustomerID && c.CAT_Contract.CustomerID > 0 && c.CAT_Contract.CUS_Customer.IsSystem == false
                        && (c.CAT_Contract.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.CAT_Contract.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)
                        && (isCus && isAdmin ? true : !isCus ? c.CAT_Contract.CustomerID == cusID : Account.ListCustomerID.Contains(c.CAT_Contract.CustomerID.Value))
                        && c.CAT_Contract.EffectDate <= dtNow && c.CAT_Contract.ExpiredDate >= dtNow).Select(c => new DTOORDOrder_Import_Contract
                    {
                        ID = c.ContractID,
                        ContractTermID = c.ID,
                        ContractNo = c.DisplayName,
                        CustomerID = c.CAT_Contract.CustomerID.Value,
                        ServiceOfOrderID = c.ServiceOfOrderID > 0 ? c.ServiceOfOrderID.Value : -1,
                        TransportModeID = c.CAT_Contract.TransportModeID.Value
                    }).ToList();

                    result.ListContract = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID > 0 && c.CUS_Customer.IsSystem == false
                    && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)
                    && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID.Value))
                    && c.EffectDate <= dtNow && c.ExpiredDate >= dtNow).Select(c => new DTOORDOrder_Import_Contract
                    {
                        ID = c.ID,
                        ContractTermID = -1,
                        ContractNo = c.DisplayName,
                        CustomerID = c.CustomerID.Value,
                        //ServiceOfOrderID = c.ServiceOfOrderID > 0 ? c.ServiceOfOrderID.Value : -1,
                        TransportModeID = c.TransportModeID.Value
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel OPS_DI_Import_ExcelOnline_Init(int templateID, int pID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                var objSetting = new DTOCUSSettingPlan();
                var objSettingOrder = new DTOCUSSettingOrder();
                var dataOrder = new DTOORDOrder_ImportCheck();
                //var data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                var data = new List<int>();
                var dataExport = new List<DTOOPSDIImportPacket_GroupProductExport>();

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {

                        objSetting = OPS_DI_Import_Packet_Setting_Get(templateID);
                        dataExport = OPS_DI_Import_Packet_ORDGroupProductExport_List(pID, data);

                        if (objSetting != null && objSetting.CUSSettingOrderID > 0)
                        {
                            objSettingOrder = OPS_Order_Excel_Setting_Get(objSetting.CUSSettingOrderID);

                            if (objSettingOrder == null)
                                throw new Exception("Không tìm thấy thiết lập đơn hàng.");

                            dataOrder = OPS_Order_Excel_Import_Data(objSettingOrder.CustomerID);

                            List<Worksheet> dataExcel = HelperExcel.GetWorksheetByID(model, id);
                            var ws = dataExcel[0];
                            ws.Rows.Clear();

                            double[] arrColumnWidth = new double[objSetting.TotalColumn.Value];
                            for (int i = 0; i < objSetting.TotalColumn; i++)
                            {
                                arrColumnWidth[i] = 100;
                            }
                            ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                            #region header
                            var customerID = objSettingOrder.CustomerID;
                            string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                                "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn", "CUSSettingOrderID", "FileID", "FileName", "FilePath" };
                            List<string> sValue = new List<string>(aValue);
                            Dictionary<string, string> dicName = GetDataName();

                            var cells = new List<Cell>();
                            foreach (var prop in objSettingOrder.GetType().GetProperties())
                            {
                                try
                                {
                                    var p = prop.Name;
                                    if (!sValue.Contains(p))
                                    {
                                        var v = (int)prop.GetValue(objSettingOrder, null);
                                        if (v > 0)
                                        {
                                            if (dicName.ContainsKey(p))
                                                cells.Add(HelperExcel.NewCell(v - 1, dicName[p], HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            else
                                                cells.Add(HelperExcel.NewCell(v - 1, p, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                }
                            }
                            if (objSettingOrder.HasStock && objSettingOrder.ListStock != null && objSettingOrder.ListStock.Count > 0)
                            {
                                foreach (var obj in objSettingOrder.ListStock)
                                {
                                    var cusStock = dataOrder.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                    if (cusStock != null)
                                    {
                                        if (obj.Ton > 0)
                                            cells.Add(HelperExcel.NewCell(obj.Ton - 1, cusStock.LocationCode + "_Tấn", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        if (obj.CBM > 0)
                                            cells.Add(HelperExcel.NewCell(obj.CBM - 1, cusStock.LocationCode + "_Khối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        if (obj.Quantity > 0)
                                            cells.Add(HelperExcel.NewCell(obj.Quantity - 1, cusStock.LocationCode + "_SL", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                    }
                                }
                            }
                            if (objSettingOrder.HasStockProduct && objSettingOrder.ListStockWithProduct != null && objSettingOrder.ListStockWithProduct.Count > 0)
                            {
                                foreach (var obj in objSettingOrder.ListStockWithProduct)
                                {
                                    var cusStock = dataOrder.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                    var cusGroup = dataOrder.ListGroupOfProduct.FirstOrDefault(c => c.ID == obj.GroupOfProductID && c.CUSStockID == obj.StockID);
                                    var cusProduct = dataOrder.ListProduct.FirstOrDefault(c => c.ID == obj.ProductID && c.GroupOfProductID == obj.GroupOfProductID);
                                    if (cusStock != null && cusGroup != null && cusProduct != null)
                                    {
                                        if (obj.Ton > 0)
                                            cells.Add(HelperExcel.NewCell(obj.Ton - 1, cusStock.LocationCode + "_" + cusGroup.Code + "_" + cusProduct.Code + "_Tấn", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        if (obj.CBM > 0)
                                            cells.Add(HelperExcel.NewCell(obj.CBM - 1, cusStock.LocationCode + "_" + cusGroup.Code + "_" + cusProduct.Code + "_Khối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        if (obj.Quantity > 0)
                                            cells.Add(HelperExcel.NewCell(obj.Quantity - 1, cusStock.LocationCode + "_" + cusGroup.Code + "_" + cusProduct.Code + "_SL", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                    }
                                }
                            }
                            else
                            {
                                if (objSettingOrder.HasContainer && objSettingOrder.ListContainer != null && objSettingOrder.ListContainer.Count > 0)
                                {
                                    foreach (var obj in objSettingOrder.ListContainer)
                                    {
                                        var cusPacking = dataOrder.ListPackingCO.FirstOrDefault(c => c.ID == obj.PackingID);
                                        if (cusPacking != null)
                                        {
                                            if (obj.PackingCOQuantity > 0)
                                                cells.Add(HelperExcel.NewCell(obj.PackingCOQuantity - 1, cusPacking.Code + "_Loại Cont", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        }
                                    }
                                }
                            }

                            foreach (var prop in objSetting.GetType().GetProperties())
                            {
                                try
                                {
                                    var p = prop.Name;
                                    if (!sValue.Contains(p))
                                    {
                                        var v = (int)prop.GetValue(objSetting, null);
                                        if (v > 0)
                                        {
                                            if (dicName.ContainsKey(p))
                                                cells.Add(HelperExcel.NewCell(v - 1, dicName[p], HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            else
                                                cells.Add(HelperExcel.NewCell(v - 1, p, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                }
                            }

                            ws.Rows.Add(HelperExcel.NewRow(0, cells));
                            #endregion

                            #region body
                            var cRow = objSettingOrder.RowStart - 1;
                            List<string> timeProps = new List<string>(new string[] { "RequestTime", "ETARequestTime", "TimeGetEmpty", "TimeReturnEmpty" });
                            if (objSettingOrder.HasStock)
                            {
                                var dataGop = dataExport.GroupBy(c => new { c.OrderCode, c.GroupProductCode, c.Packing, c.DistributorCode, c.LocationToCode, c.ETD, c.ETA }).ToList();
                                foreach (var gop in dataGop)
                                {
                                    cells = new List<Cell>();
                                    int max = 1;
                                    var item = gop.FirstOrDefault();
                                    foreach (var sto in objSettingOrder.ListStock)
                                    {
                                        var o = gop.Count(c => c.StockID == sto.StockID);
                                        if (o > max)
                                            max = o;
                                    }
                                    var dataContains = new List<int>();
                                    for (var i = 0; i < max; i++)
                                    {
                                        foreach (var prop in objSettingOrder.GetType().GetProperties())
                                        {
                                            try
                                            {
                                                var p = prop.Name;
                                                if (!sValue.Contains(p))
                                                {
                                                    var v = (int)prop.GetValue(objSettingOrder, null);
                                                    var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                    var txt = string.Empty;
                                                    if (val != null)
                                                    {
                                                        if (val.GetType() == typeof(DateTime))
                                                        {
                                                            if (timeProps.Contains(p))
                                                            {
                                                                txt = String.Format("{0:HH:mm}", val);
                                                            }
                                                            else
                                                            {
                                                                txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                            }
                                                        }
                                                        else if (val.GetType() == typeof(TimeSpan))
                                                        {
                                                            txt = val.ToString();
                                                        }
                                                        else
                                                        {
                                                            txt = val.ToString();
                                                        }
                                                    }
                                                    if (v > 0 && v <= objSetting.TotalColumn)
                                                        cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                }
                                            }
                                            catch (Exception)
                                            {
                                            }
                                        }
                                        if (objSetting.LocationToProvince > 0)
                                        {
                                            if (objSetting.LocationToProvince > 0 && objSetting.LocationToProvince <= objSetting.TotalColumn)
                                                cells.Add(HelperExcel.NewCell(objSetting.LocationToProvince - 1, item.LocationToProvince));
                                        }
                                        if (objSetting.LocationToDistrict > 0)
                                        {
                                            if (objSetting.LocationToDistrict > 0 && objSetting.LocationToDistrict <= objSetting.TotalColumn)
                                                cells.Add(HelperExcel.NewCell(objSetting.LocationToDistrict - 1, item.LocationToDistrict));
                                        }
                                        foreach (var stock in objSettingOrder.ListStock)
                                        {
                                            var objGopInStock = gop.FirstOrDefault(c => c.StockID == stock.StockID && !dataContains.Contains(c.ID));
                                            if (objGopInStock != null)
                                            {
                                                dataContains.Add(objGopInStock.ID);
                                                foreach (var prop in stock.GetType().GetProperties())
                                                {
                                                    try
                                                    {
                                                        var p = prop.Name;
                                                        if (p != "StockID")
                                                        {
                                                            var v = (int)prop.GetValue(stock, null);
                                                            var val = objGopInStock.GetType().GetProperty(p).GetValue(objGopInStock, null);
                                                            if (val != null)
                                                            {
                                                                if (v > 0 && v <= objSetting.TotalColumn)
                                                                    cells.Add(HelperExcel.NewCell(v - 1, val.ToString()));
                                                            }
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                }
                                            }
                                        }
                                        ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                        cRow++;
                                    }
                                }
                            }
                            else if (objSettingOrder.HasStockProduct)
                            {
                                var dataGop = dataExport.GroupBy(c => new { c.OrderCode, c.DistributorCode, c.LocationToCode, c.ETD, c.ETA }).ToList();
                                foreach (var gop in dataGop)
                                {
                                    int max = 1;
                                    var item = gop.FirstOrDefault();
                                    foreach (var sto in objSettingOrder.ListStockWithProduct)
                                    {
                                        var o = gop.Count(c => c.StockID == sto.StockID && c.GroupProductID == sto.GroupOfProductID && c.PackingID == sto.ProductID);
                                        if (o > max)
                                            max = o;
                                    }
                                    var dataContains = new List<int>();
                                    for (var i = 0; i < max; i++)
                                    {
                                        foreach (var prop in objSettingOrder.GetType().GetProperties())
                                        {
                                            try
                                            {
                                                var p = prop.Name;
                                                if (!sValue.Contains(p))
                                                {
                                                    var v = (int)prop.GetValue(objSettingOrder, null);
                                                    var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                    var txt = string.Empty;
                                                    if (val != null)
                                                    {
                                                        if (val.GetType() == typeof(DateTime))
                                                        {
                                                            if (timeProps.Contains(p))
                                                            {
                                                                txt = String.Format("{0:HH:mm}", val);
                                                            }
                                                            else
                                                            {
                                                                txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                            }
                                                        }
                                                        else if (val.GetType() == typeof(TimeSpan))
                                                        {
                                                            txt = val.ToString();
                                                        }
                                                        else
                                                        {
                                                            txt = val.ToString();
                                                        }
                                                    }
                                                    if (v > 0 && v <= objSetting.TotalColumn)
                                                        cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                }
                                            }
                                            catch (Exception)
                                            {
                                            }
                                        }
                                        if (objSetting.LocationToProvince > 0)
                                        {
                                            if (objSetting.LocationToProvince > 0 && objSetting.LocationToProvince <= objSetting.TotalColumn)
                                                cells.Add(HelperExcel.NewCell(objSetting.LocationToProvince - 1, item.LocationToProvince));
                                        }
                                        if (objSetting.LocationToDistrict > 0)
                                        {
                                            if (objSetting.LocationToDistrict > 0 && objSetting.LocationToDistrict <= objSetting.TotalColumn)
                                                cells.Add(HelperExcel.NewCell(objSetting.LocationToDistrict - 1, item.LocationToDistrict));
                                        }
                                        foreach (var stock in objSettingOrder.ListStockWithProduct)
                                        {
                                            var objGopInStock = gop.FirstOrDefault(c => c.StockID == stock.StockID && c.GroupProductID == stock.GroupOfProductID && c.PackingID == stock.ProductID && !dataContains.Contains(c.ID));
                                            if (objGopInStock != null)
                                            {
                                                dataContains.Add(objGopInStock.ID);
                                                foreach (var prop in stock.GetType().GetProperties())
                                                {
                                                    try
                                                    {
                                                        var p = prop.Name;
                                                        if (p != "StockID" && p != "GroupOfProductID" && p != "ProductID")
                                                        {
                                                            var v = (int)prop.GetValue(stock, null);
                                                            var val = objGopInStock.GetType().GetProperty(p).GetValue(objGopInStock, null);
                                                            if (val != null)
                                                            {
                                                                if (v > 0 && v <= objSetting.TotalColumn)
                                                                    cells.Add(HelperExcel.NewCell(v - 1, val.ToString()));
                                                            }
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                }
                                            }
                                        }
                                        ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                        cRow++;
                                    }
                                }
                            }
                            else
                            {
                                foreach (var item in dataExport)
                                {
                                    item.Quantity_SKU = item.Quantity;
                                    item.Ton_SKU = item.Ton;
                                    item.CBM_SKU = item.CBM;
                                    foreach (var prop in objSettingOrder.GetType().GetProperties())
                                    {
                                        try
                                        {
                                            var p = prop.Name;
                                            if (!sValue.Contains(p))
                                            {
                                                var v = (int)prop.GetValue(objSettingOrder, null);
                                                var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                var txt = string.Empty;
                                                if (val != null)
                                                {
                                                    if (val.GetType() == typeof(DateTime))
                                                    {
                                                        if (timeProps.Contains(p))
                                                        {
                                                            txt = String.Format("{0:HH:mm}", val);
                                                        }
                                                        else
                                                        {
                                                            txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                        }
                                                    }
                                                    else if (val.GetType() == typeof(TimeSpan))
                                                    {
                                                        txt = val.ToString();
                                                    }
                                                    else
                                                    {
                                                        txt = val.ToString();
                                                    }
                                                }
                                                if (v > 0 && v <= objSetting.TotalColumn)
                                                    cells.Add(HelperExcel.NewCell(v - 1, txt));
                                            }
                                        }
                                        catch (Exception)
                                        {
                                        }
                                    }
                                    if (objSetting.LocationToProvince > 0)
                                    {
                                        if (objSetting.LocationToProvince > 0 && objSetting.LocationToProvince <= objSetting.TotalColumn)
                                            cells.Add(HelperExcel.NewCell(objSetting.LocationToProvince - 1, item.LocationToProvince));
                                    }
                                    if (objSetting.LocationToDistrict > 0)
                                    {
                                        if (objSetting.LocationToDistrict > 0 && objSetting.LocationToDistrict <= objSetting.TotalColumn)
                                            cells.Add(HelperExcel.NewCell(objSetting.LocationToDistrict - 1, item.LocationToDistrict));
                                    }
                                    ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                    cRow++;
                                }
                            }
                            #endregion

                            result = HelperExcel.GetByKey(model, functionid, functionkey);
                            result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(dataExcel);
                            result = HelperExcel.Save(model, Account, result);
                        }
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDIImportPacket_Row OPS_DI_Import_ExcelOnline_Change(int templateID, int pID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                DTOOPSDIImportPacket_Row result = new DTOOPSDIImportPacket_Row();
                result.Row = new Row();
                result.ListDITOGroupProduct = new List<DTOOPSDIImportPacket_GroupProduct>();

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var dataTOMaster = new List<DTOOPSDIImportPacketTOMaster_Import>();
                    DTOCUSSettingPlan objSetting = new DTOCUSSettingPlan();
                    DTOCUSSettingOrder objSettingOrder = new DTOCUSSettingOrder();
                    DTOOPSDIImportPacket_Data data = new DTOOPSDIImportPacket_Data();
                    DTOORDOrder_ImportCheck dataOrder = new DTOORDOrder_ImportCheck();

                    objSetting = OPS_DI_Import_Packet_Setting_Get(templateID);
                    objSettingOrder = OPS_Order_Excel_Setting_Get(objSetting.CUSSettingOrderID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSettingOrder.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colCheckNote1 = objSetting.TotalColumn.Value + 2;
                    int colVenID = objSetting.TotalColumn.Value + 3;
                    int colVehID = objSetting.TotalColumn.Value + 4;
                    int colGovID = objSetting.TotalColumn.Value + 5;
                    int colListDITOGroupProduct = objSetting.TotalColumn.Value + 6;

                    int failMax = 2;
                    int failCurrent = 0;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var lstCode = new List<string>();

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    failCurrent = 0;

                    if (objSettingOrder == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thiết lập đơn hàng.");

                    List<string> dataOrders = new List<string>();
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {

                            foreach (var cell in eRow.Cells)
                            {
                                if (cell.Index == objSettingOrder.OrderCode - 1)
                                {
                                    if (cell.Value != null && !string.IsNullOrEmpty(cell.Value.ToString()))
                                    {
                                        dataOrders.Add(cell.Value.ToString());
                                    }
                                    else if (failCurrent >= failMax)
                                    {
                                        break;
                                    }
                                    else
                                        failCurrent++;

                                    break;
                                }
                            }
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        if (dataOrders.Count == 0)
                            throw FaultHelper.BusinessFault(null, null, "Không có thông tin đơn hàng.");
                        data = OPS_DI_Import_Packet_Data(pID, dataOrders);

                        foreach (var cell in checkRow.Cells)
                        {
                            if (cell.Index == colListDITOGroupProduct)
                            {
                                if (cell.Value != null && !string.IsNullOrEmpty(cell.Value.ToString()))
                                {
                                    data.ListDITOGroupProduct = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOOPSDIImportPacket_GroupProduct>>(cell.Value.ToString());
                                }
                            }
                        }

                        bool isContinue = true;

                        if (objSetting != null)
                        {
                            string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                        "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID" };
                            var sValue = new List<string>(aValue);

                            dataOrder = OPS_Order_Excel_Import_Data(objSettingOrder.CustomerID);

                            //if (dataOrders.Count == 0)
                            //    throw FaultHelper.BusinessFault(null, null, "Không có thông tin đơn hàng.");

                            //data = OPS_DI_Import_Packet_Data(pID, dataOrders);

                            Dictionary<int, int> dicTOMaster = new Dictionary<int, int>();

                            var excelInput = GetDataValue(checkRow, objSettingOrder, sValue);
                            var excelPlanInput = GetDataValue(checkRow, objSetting, sValue);

                            if (!string.IsNullOrEmpty(excelPlanInput["VehicleNo"]))
                            {
                                #region check thời gian
                                DateTime? ETD = null;
                                if (objSetting.MasterETDDate < 1 && objSetting.MasterETDDate_Time < 1)
                                    throw FaultHelper.BusinessFault(null, null, "Chưa thiết lập cột ETD.");

                                try
                                {
                                    ETD = HelperExcel.ValueToDateVN(excelPlanInput["MasterETDDate"]);
                                }
                                catch (Exception)
                                {
                                }

                                if (objSetting.MasterETDTime > 0 && ETD != null)
                                {
                                    if (!string.IsNullOrEmpty(excelPlanInput["MasterETDTime"]))
                                    {
                                        try
                                        {
                                            ETD = ETD.Value.Date.Add(TimeSpan.Parse(excelPlanInput["MasterETDTime"]));
                                        }
                                        catch
                                        {
                                            //excelError.Add("Sai giờ ETD.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(0, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                }

                                if (isContinue)
                                {
                                    if (objSetting.MasterETDDate_Time > 0)
                                    {
                                        try
                                        {
                                            ETD = HelperExcel.ValueToDateVN(excelPlanInput["MasterETDDate_Time"]);
                                        }
                                        catch
                                        {
                                            //excelError.Add("Sai ETD.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                }

                                DateTime? ETA = null;
                                if (isContinue)
                                {
                                    if (objSetting.MasterHours > 0)
                                    {
                                        if (ETD != null)
                                        {
                                            try
                                            {
                                                ETA = ETD.Value.AddHours(Convert.ToDouble(excelPlanInput["MasterHours"]));
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai thời gian chuyến.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(2, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (objSetting.MasterETADate < 1 && objSetting.MasterETADate_Time < 1)
                                            throw FaultHelper.BusinessFault(null, null, "Chưa thiết lập cột ETA.");

                                        try
                                        {
                                            ETA = HelperExcel.ValueToDateVN(excelPlanInput["MasterETADate"]);
                                        }
                                        catch (Exception)
                                        {
                                        }

                                        if (objSetting.MasterETATime > 0 && ETA != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelPlanInput["MasterETATime"]))
                                            {
                                                try
                                                {
                                                    ETA = ETD.Value.Date.Add(TimeSpan.Parse(excelPlanInput["MasterETATime"]));
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        if (objSetting.MasterETADate_Time > 0 && isContinue)
                                        {
                                            try
                                            {
                                                ETA = HelperExcel.ValueToDateVN(excelPlanInput["MasterETADate_Time"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(4, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                }

                                if (isContinue)
                                {
                                    if (ETA != null && ETD != null && ETD >= ETA)
                                    {
                                        //excelError.Add("Sai ràng buộc thời gian ETD-ETA");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(5, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                #endregion

                                var isNewVehicle = false;
                                int venID = -1, vehID = -1, govID = -1;
                                string venCode = excelPlanInput["VendorCode"].Trim(), vehCode = excelPlanInput["VehicleNo"].Trim();
                                string driverName = excelPlanInput["DriverName"], driverTel = excelPlanInput["DriverTel"];

                                #region Kiểm tra chuyến
                                if (isContinue)
                                {
                                    if (!string.IsNullOrEmpty(excelPlanInput["VendorCode"]))
                                    {
                                        var objVendor = data.ListVendor.FirstOrDefault(c => c.VendorCode.Trim().ToLower() == excelPlanInput["VendorCode"].Trim().ToLower());
                                        if (objVendor != null)
                                        {
                                            venID = objVendor.ID;
                                            venCode = objVendor.VendorCode;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVenID, venID.ToString());
                                        }
                                        else
                                        {
                                            //excelError.Add("Nhà xe [" + excelPlanInput["VendorCode"] + "] không tồn tại.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(6, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                    else
                                    {
                                        var objVendor = data.ListVendor.FirstOrDefault(c => c.IsVendor == false);
                                        if (objVendor != null)
                                        {
                                            venID = objVendor.ID;
                                            venCode = "Xe nhà";
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVenID, venID.ToString());
                                        }
                                        else
                                        {
                                            //excelError.Add("Nhà xe không xác định.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(7, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    var dataCode = new List<string>();
                                    var dataChar = new char[] { '-', ' ', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '/', '?', '<', ',', '>', '~', '`' };
                                    var sCode = vehCode.Split(dataChar, StringSplitOptions.RemoveEmptyEntries).ToArray();
                                    foreach (var c in dataChar)
                                    {
                                        dataCode.Add(string.Join(c.ToString(), sCode).ToLower());
                                    }

                                    if (isContinue)
                                    {
                                        var objVehicle = data.ListVehicle.FirstOrDefault(c => c.VendorID == venID && dataCode.Contains(c.VehicleNo.Trim().ToLower()));
                                        if (objVehicle != null)
                                        {
                                            vehID = objVehicle.ID;
                                            vehCode = objVehicle.VehicleNo;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVehID, vehID.ToString());
                                            if (venID > 0 && venCode == "Xe nhà")
                                            {
                                                var objPlanning = data.ListVehiclePlan.FirstOrDefault(c => c.VehicleID == vehID && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA)));
                                                if (objPlanning != null)
                                                {
                                                    var objDriver = data.ListDriver.FirstOrDefault(c => c.ID == objPlanning.DriverID);
                                                    if (objDriver != null)
                                                    {
                                                        driverName = objDriver.DriverName;
                                                        driverTel = objDriver.DriverTel;
                                                    }
                                                }
                                                else
                                                {
                                                    driverName = objVehicle.DriverName;
                                                    driverTel = objVehicle.DriverTel;
                                                }
                                                if (string.IsNullOrEmpty(driverName))
                                                {
                                                    //excelError.Add("Không có thông tin tài xế.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (venID > 0)
                                            {
                                                if (venCode != "Xe nhà")
                                                {
                                                    isNewVehicle = true;
                                                }
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                                                isContinue = false;
                                                //excelError.Add("Xe [" + excelPlanInput["VehicleNo"] + "] không tồn tại.");
                                            }
                                        }

                                        if (!string.IsNullOrEmpty(excelInput["GroupVehicle"]))
                                        {
                                            var objCheck = dataOrder.ListGroupOfVehicle.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["GroupVehicle"].Trim().ToLower());
                                            if (objCheck != null)
                                            {
                                                govID = objCheck.ID;
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGovID, govID.ToString());
                                            }
                                            else
                                            {
                                                //excelError.Add("Không tìm thấy loại xe [" + excelInput["GroupVehicle"] + "]");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Lưu thông tin chuyến
                                var obj = new DTOOPSDIImportPacketTOMaster_Import();
                                if (venID > 0 && vehID > 0 && ETD != null && ETA != null)
                                {
                                    obj = dataTOMaster.FirstOrDefault(c => c.VendorID == venID && (c.VehicleID == vehID || c.VehicleNo == vehCode) && c.ETD == ETD);
                                    if (obj == null)
                                    {
                                        obj = new DTOOPSDIImportPacketTOMaster_Import();
                                        obj.ETD = ETD;
                                        obj.ETA = ETA;
                                        obj.IsNewVendorVehicle = isNewVehicle;
                                        //obj.SortOrder = idx++;
                                        obj.VehicleID = vehID;
                                        obj.VendorID = venID;
                                        obj.VehicleNo = vehCode;
                                        obj.VendorCode = venCode;
                                        obj.GroupOfVehicleID = govID;
                                        obj.DriverTel = driverTel;
                                        obj.DriverName = driverName;
                                        obj.Note = excelPlanInput["MasterNote"];
                                        obj.Error = new List<string>();
                                        obj.ListDITOGroupProduct = new List<DTOOPSDIImportPacket_GroupProduct>();
                                        //foreach (var item in excelError)
                                        //{
                                        //    obj.Error.Add(item);
                                        //}
                                        dataTOMaster.Add(obj);
                                        dicTOMaster.Add(row, obj.SortOrder);
                                    }
                                    else
                                    {
                                        if (obj.IsFTL && obj.GroupOfVehicleID != govID)
                                        {
                                            obj = dataTOMaster.FirstOrDefault(c => c.VendorID == venID && (c.VehicleID == vehID || c.VehicleNo == vehCode) && c.ETD == ETD && c.GroupOfVehicleID == govID);
                                            if (obj == null)
                                            {
                                                obj = new DTOOPSDIImportPacketTOMaster_Import();
                                                obj.ETD = ETD;
                                                obj.ETA = ETA;
                                                obj.IsNewVendorVehicle = isNewVehicle;
                                                //obj.SortOrder = idx++;
                                                obj.VehicleID = vehID;
                                                obj.VendorID = venID;
                                                obj.VehicleNo = vehCode;
                                                obj.VendorCode = venCode;
                                                obj.GroupOfVehicleID = govID;
                                                obj.DriverTel = driverTel;
                                                obj.DriverName = driverName;
                                                obj.Note = excelPlanInput["MasterNote"];
                                                obj.Error = new List<string>();
                                                obj.ListDITOGroupProduct = new List<DTOOPSDIImportPacket_GroupProduct>();
                                                //foreach (var item in excelError)
                                                //{
                                                //    obj.Error.Add(item);
                                                //}
                                                dataTOMaster.Add(obj);
                                                dicTOMaster.Add(row, obj.SortOrder);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    obj.ETD = ETD;
                                    obj.ETA = ETA;
                                    obj.IsNewVendorVehicle = isNewVehicle;
                                    //obj.SortOrder = idx++;
                                    obj.VehicleID = vehID;
                                    obj.VendorID = venID;
                                    obj.VehicleNo = vehCode;
                                    obj.VendorCode = venCode;
                                    obj.GroupOfVehicleID = govID;
                                    obj.DriverTel = driverTel;
                                    obj.DriverName = driverName;
                                    obj.Note = excelPlanInput["MasterNote"];
                                    obj.Error = new List<string>();
                                    obj.ListDITOGroupProduct = new List<DTOOPSDIImportPacket_GroupProduct>();
                                    //foreach (var item in excelError)
                                    //{
                                    //    obj.Error.Add(item);
                                    //}
                                    dataTOMaster.Add(obj);
                                    dicTOMaster.Add(row, obj.SortOrder);
                                }
                                #endregion

                                #region Kiểm tra nhóm sản phẩm
                                if (isContinue)
                                {
                                    var objCopy = new CopyHelper();
                                    var oData = GetDataGroupProduct(checkRow, excelInput, dataOrder, objSettingOrder, sValue);
                                    var isSettingETD = objSettingOrder.ETD > 0 || objSettingOrder.ETDTime_RequestDate > 0;
                                    foreach (var o in oData)
                                    {
                                        if (o.IsFTL)
                                        {
                                            if (obj.ListDITOGroupProduct.Count == 0)
                                            {
                                                obj.IsFTL = true;
                                            }
                                            if (!obj.IsFTL)
                                            {
                                                //obj.Error.Add("Chuyến LTL không thể chạy đơn FTL. Nhóm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                                isContinue = false;
                                            }

                                            if (isContinue)
                                            {
                                                var objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                        && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                        && (isSettingETD ? c.ETD == o.ETD : true) && c.GroupID == o.GroupID && c.ProductID == o.ProductID
                                                        && (c.TypeOfPacking == 1 ? c.Ton == o.Ton : c.TypeOfPacking == 2 ? c.CBM == o.CBM : c.Quantity == o.Quantity));
                                                if (objDITO == null)
                                                    objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                        && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                        && (isSettingETD ? c.ETD == o.ETD : true) && c.GroupID == o.GroupID && c.ProductID == o.ProductID);
                                                if (objDITO != null)
                                                {
                                                    if (obj.FTLOrderID < 1)
                                                        obj.FTLOrderID = objDITO.OrderID;
                                                    if (obj.FTLOrderID != objDITO.OrderID)
                                                    {
                                                        //obj.Error.Add("Không thể chạy 2 đơn FTL. Nhóm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                                        isContinue = false;
                                                    }

                                                    if (isContinue)
                                                    {
                                                        o.ID = objDITO.ID;
                                                        o.ETA = objDITO.ETA;
                                                        o.ETARequest = objDITO.ETARequest;
                                                        o.ETD = objDITO.ETD;
                                                        o.LocationFromName = objDITO.LocationFromName;
                                                        o.LocationToName = objDITO.LocationToName;
                                                        switch (objDITO.TypeOfPacking)
                                                        {
                                                            case 1:
                                                                if (objDITO.Ton > o.Ton)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.Ton = Math.Round(objDITO.Ton - o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * objTmp.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.CBM = Math.Round(objDITO.ExchangeCBM.Value * objTmp.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.Ton == o.Ton)
                                                                {
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá số tấn. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 2:
                                                                if (objDITO.CBM > o.CBM)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.CBM = Math.Round(objDITO.CBM - o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Ton = Math.Round(objDITO.ExchangeTon.Value * objTmp.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * objTmp.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.CBM == o.CBM)
                                                                {
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá số khối. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 3:
                                                                if (objDITO.Quantity > o.Quantity)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.Quantity = Math.Round(objDITO.Quantity - o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Ton = Math.Round(objDITO.ExchangeTon.Value * objTmp.Quantity, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.CBM = Math.Round(objDITO.ExchangeCBM.Value * objTmp.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.Quantity == o.Quantity)
                                                                {
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá SL. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //obj.Error.Add("Không tìm thấy sản phẩm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (obj.IsFTL)
                                            {
                                                //obj.Error.Add("Chuyến FTL không thể chạy đơn LTL. Nhóm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                if (o.Ton == 0 && o.CBM == 0 && o.Quantity == 0 && o.ProductID > 0 && o.GroupID > 0)
                                                {
                                                    //obj.Error.Add("Không có thông tin sản lượng. Nhóm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    var objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.TOMasterID == null && c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                           && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                           && c.GroupID == o.GroupID && c.ProductID == o.ProductID && (c.TypeOfPacking == 1 ? c.Ton == o.Ton : (c.TypeOfPacking == 2 ? c.CBM == o.CBM : c.Quantity == o.Quantity)));
                                                    if (objDITO == null)
                                                        objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.TOMasterID == null && c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                           && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                           && c.GroupID == o.GroupID && c.ProductID == o.ProductID && (c.TypeOfPacking == 1 ? c.Ton > o.Ton : (c.TypeOfPacking == 2 ? c.CBM > o.CBM : c.Quantity > o.Quantity)));
                                                    if (objDITO == null)
                                                        objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.TOMasterID == null && c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                           && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                           && c.GroupID == o.GroupID && c.ProductID == o.ProductID);
                                                    if (objDITO == null)
                                                        objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                           && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                           && c.GroupID == o.GroupID && c.ProductID == o.ProductID);
                                                    if (objDITO != null)
                                                    {
                                                        o.ID = objDITO.ID;
                                                        o.ETA = objDITO.ETA;
                                                        o.ETARequest = objDITO.ETARequest;
                                                        o.ETD = objDITO.ETD;
                                                        o.LocationFromName = objDITO.LocationFromName;
                                                        o.LocationToName = objDITO.LocationToName;
                                                        switch (objDITO.TypeOfPacking)
                                                        {
                                                            case 1:
                                                                if (objDITO.Ton > o.Ton)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.Ton = Math.Round(objDITO.Ton - o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * objTmp.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.CBM = Math.Round(objDITO.ExchangeCBM.Value * objTmp.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.Ton == o.Ton)
                                                                {
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá số tấn. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 2:
                                                                if (objDITO.CBM > o.CBM)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.CBM = Math.Round(objDITO.CBM - o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Ton = Math.Round(objDITO.ExchangeTon.Value * objTmp.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * objTmp.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.CBM == o.CBM)
                                                                {
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá số khối. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 3:
                                                                if (objDITO.Quantity > o.Quantity)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.Quantity = Math.Round(objDITO.Quantity - o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Ton = Math.Round(objDITO.ExchangeTon.Value * objTmp.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.CBM = Math.Round(objDITO.ExchangeCBM.Value * objTmp.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.Quantity == o.Quantity)
                                                                {
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá SL. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //obj.Error.Add("Không tìm thấy sản phẩm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }

                            if (isContinue)
                            {
                                foreach (var item in dataTOMaster.Where(c => c.IsFTL == true && c.FTLOrderID > 0).ToList())
                                {
                                    var objCheck = data.ListDITOGroupProduct.Where(c => c.OrderID == item.FTLOrderID && c.IsFTL == true).ToList();
                                    if (objCheck.Count > 0)
                                    {
                                        //item.Error.Add("Chưa phân chuyến hết đơn FTL. ĐH [" + objCheck.FirstOrDefault().OrderCode + "]");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                            }

                            if (isContinue)
                            {
                                foreach (var item in dataTOMaster)
                                {
                                    var objV = data.ListVehicle.FirstOrDefault(c => c.VendorID == item.VendorID && c.ID == item.VehicleID);
                                    if (objV != null && item.ListDITOGroupProduct.Sum(c => c.Ton) > objV.MaxWeight)
                                    {
                                        //item.ExcelError = "Quá trọng tải.";
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckNote1, HelperExcel.MessageError(20, lstMessageError));
                                    }
                                }
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result.Row = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOOPSDIImportPacket_Result OPS_DI_Import_ExcelOnline_Import(int templateID, int pID, long id, List<Row> lst, List<DTOORDOrder_ImportOnline> lstDetail, List<string> lstMessageError)
        {
            try
            {
                DTOOPSDIImportPacket_Result result = new DTOOPSDIImportPacket_Result();
                result.SYSExcel = new SYSExcel();
                result.ListRowResult = new List<DTOOPSDIImportPacket_Row>();

                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DateTime dtNow = DateTime.Now.Date;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var dataTOMaster = new List<DTOOPSDIImportPacketTOMaster_Import>();
                    DTOCUSSettingPlan objSetting = new DTOCUSSettingPlan();
                    DTOCUSSettingOrder objSettingOrder = new DTOCUSSettingOrder();
                    DTOOPSDIImportPacket_Data data = new DTOOPSDIImportPacket_Data();
                    DTOORDOrder_ImportCheck dataOrder = new DTOORDOrder_ImportCheck();

                    objSetting = OPS_DI_Import_Packet_Setting_Get(templateID);
                    objSettingOrder = OPS_Order_Excel_Setting_Get(objSetting.CUSSettingOrderID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSettingOrder.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colCheckNote1 = objSetting.TotalColumn.Value + 2;
                    int colVenID = objSetting.TotalColumn.Value + 3;
                    int colVehID = objSetting.TotalColumn.Value + 4;
                    int colGovID = objSetting.TotalColumn.Value + 5;
                    int colListDITOGroupProduct = objSetting.TotalColumn.Value + 6;

                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = rowStart + 1;
                    if (lst.Count() > 0)
                    {
                        rowEnd = lst[lst.Count() - 1].Index.Value + 1;
                    }

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;

                    if (objSettingOrder == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thiết lập đơn hàng.");

                    List<string> dataOrders = new List<string>();
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart)
                        {

                            foreach (var cell in eRow.Cells)
                            {
                                if (cell.Index == objSettingOrder.OrderCode - 1)
                                {
                                    if (cell.Value != null && !string.IsNullOrEmpty(cell.Value.ToString()))
                                    {
                                        dataOrders.Add(cell.Value.ToString());
                                    }
                                    else if (failCurrent >= failMax)
                                    {
                                        rowEnd = eRow.Index.Value;
                                        break;
                                    }
                                    else
                                        failCurrent++;

                                    break;
                                }
                            }
                        }
                    }


                    if (dataOrders.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Không có thông tin đơn hàng.");

                    data = OPS_DI_Import_Packet_Data(pID, dataOrders);
                    dataOrder = OPS_Order_Excel_Import_Data(objSettingOrder.CustomerID);
                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        //data = OPS_DI_Import_Packet_Data(pID, dataOrders);
                        //foreach (var cell in checkRow.Cells)
                        //{
                        //    if (cell.Index == colListDITOGroupProduct)
                        //    {
                        //        if (cell.Value != null && !string.IsNullOrEmpty(cell.Value.ToString()))
                        //        {
                        //            data.ListDITOGroupProduct = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOOPSDIImportPacket_GroupProduct>>(cell.Value.ToString());
                        //        }
                        //    }
                        //}

                        DTOOPSDIImportPacket_Row rowResult = new DTOOPSDIImportPacket_Row();
                        rowResult.Index = checkRow.Index.HasValue ? checkRow.Index.Value : -1;
                        rowResult.ListDITOGroupProduct = new List<DTOOPSDIImportPacket_GroupProduct>();
                        bool isContinue = true;
                        if (objSetting != null)
                        {
                            string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                        "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID" };
                            var sValue = new List<string>(aValue);

                            //if (dataOrders.Count == 0)
                            //    throw FaultHelper.BusinessFault(null, null, "Không có thông tin đơn hàng.");

                            //data = OPS_DI_Import_Packet_Data(pID, dataOrders);

                            Dictionary<int, int> dicTOMaster = new Dictionary<int, int>();

                            var excelInput = GetDataValue(checkRow, objSettingOrder, sValue);
                            var excelPlanInput = GetDataValue(checkRow, objSetting, sValue);

                            if (!string.IsNullOrEmpty(excelPlanInput["VehicleNo"]))
                            {
                                #region check thời gian
                                DateTime? ETD = null;
                                if (objSetting.MasterETDDate < 1 && objSetting.MasterETDDate_Time < 1)
                                    throw FaultHelper.BusinessFault(null, null, "Chưa thiết lập cột ETD.");

                                try
                                {
                                    ETD = HelperExcel.ValueToDateVN(excelPlanInput["MasterETDDate"]);
                                }
                                catch (Exception)
                                {
                                }

                                if (objSetting.MasterETDTime > 0 && ETD != null)
                                {
                                    if (!string.IsNullOrEmpty(excelPlanInput["MasterETDTime"]))
                                    {
                                        try
                                        {
                                            ETD = ETD.Value.Date.Add(TimeSpan.Parse(excelPlanInput["MasterETDTime"]));
                                        }
                                        catch
                                        {
                                            //excelError.Add("Sai giờ ETD.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(0, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                }

                                if (isContinue)
                                {
                                    if (objSetting.MasterETDDate_Time > 0)
                                    {
                                        try
                                        {
                                            ETD = HelperExcel.ValueToDateVN(excelPlanInput["MasterETDDate_Time"]);
                                        }
                                        catch
                                        {
                                            //excelError.Add("Sai ETD.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                }

                                DateTime? ETA = null;
                                if (isContinue)
                                {
                                    if (objSetting.MasterHours > 0)
                                    {
                                        if (ETD != null)
                                        {
                                            try
                                            {
                                                ETA = ETD.Value.AddHours(Convert.ToDouble(excelPlanInput["MasterHours"]));
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai thời gian chuyến.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(2, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (objSetting.MasterETADate < 1 && objSetting.MasterETADate_Time < 1)
                                            throw FaultHelper.BusinessFault(null, null, "Chưa thiết lập cột ETA.");

                                        try
                                        {
                                            ETA = HelperExcel.ValueToDateVN(excelPlanInput["MasterETADate"]);
                                        }
                                        catch (Exception)
                                        {
                                        }

                                        if (objSetting.MasterETATime > 0 && ETA != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelPlanInput["MasterETATime"]))
                                            {
                                                try
                                                {
                                                    ETA = ETD.Value.Date.Add(TimeSpan.Parse(excelPlanInput["MasterETATime"]));
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        if (objSetting.MasterETADate_Time > 0 && isContinue)
                                        {
                                            try
                                            {
                                                ETA = HelperExcel.ValueToDateVN(excelPlanInput["MasterETADate_Time"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(4, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                }

                                if (isContinue)
                                {
                                    if (ETA != null && ETD != null && ETD >= ETA)
                                    {
                                        //excelError.Add("Sai ràng buộc thời gian ETD-ETA");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(5, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                #endregion

                                var isNewVehicle = false;
                                int venID = -1, vehID = -1, govID = -1;
                                string venCode = excelPlanInput["VendorCode"].Trim(), vehCode = excelPlanInput["VehicleNo"].Trim();
                                string driverName = excelPlanInput["DriverName"], driverTel = excelPlanInput["DriverTel"];

                                #region Kiểm tra chuyến
                                if (isContinue)
                                {
                                    if (!string.IsNullOrEmpty(excelPlanInput["VendorCode"]))
                                    {
                                        var objVendor = data.ListVendor.FirstOrDefault(c => c.VendorCode.Trim().ToLower() == excelPlanInput["VendorCode"].Trim().ToLower());
                                        if (objVendor != null)
                                        {
                                            venID = objVendor.ID;
                                            venCode = objVendor.VendorCode;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVenID, venID.ToString());
                                        }
                                        else
                                        {
                                            //excelError.Add("Nhà xe [" + excelPlanInput["VendorCode"] + "] không tồn tại.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(6, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                    else
                                    {
                                        var objVendor = data.ListVendor.FirstOrDefault(c => c.IsVendor == false);
                                        if (objVendor != null)
                                        {
                                            venID = objVendor.ID;
                                            venCode = "Xe nhà";
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVenID, venID.ToString());
                                        }
                                        else
                                        {
                                            //excelError.Add("Nhà xe không xác định.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(7, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    var dataCode = new List<string>();
                                    var dataChar = new char[] { '-', ' ', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '/', '?', '<', ',', '>', '~', '`' };
                                    var sCode = vehCode.Split(dataChar, StringSplitOptions.RemoveEmptyEntries).ToArray();
                                    foreach (var c in dataChar)
                                    {
                                        dataCode.Add(string.Join(c.ToString(), sCode).ToLower());
                                    }

                                    if (isContinue)
                                    {
                                        var objVehicle = data.ListVehicle.FirstOrDefault(c => c.VendorID == venID && dataCode.Contains(c.VehicleNo.Trim().ToLower()));
                                        if (objVehicle != null)
                                        {
                                            vehID = objVehicle.ID;
                                            vehCode = objVehicle.VehicleNo;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVehID, vehID.ToString());
                                            if (venID > 0 && venCode == "Xe nhà")
                                            {
                                                var objPlanning = data.ListVehiclePlan.FirstOrDefault(c => c.VehicleID == vehID && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA)));
                                                if (objPlanning != null)
                                                {
                                                    var objDriver = data.ListDriver.FirstOrDefault(c => c.ID == objPlanning.DriverID);
                                                    if (objDriver != null)
                                                    {
                                                        driverName = objDriver.DriverName;
                                                        driverTel = objDriver.DriverTel;
                                                    }
                                                }
                                                else
                                                {
                                                    driverName = objVehicle.DriverName;
                                                    driverTel = objVehicle.DriverTel;
                                                }
                                                if (string.IsNullOrEmpty(driverName))
                                                {
                                                    //excelError.Add("Không có thông tin tài xế.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (venID > 0)
                                            {
                                                if (venCode != "Xe nhà")
                                                {
                                                    isNewVehicle = true;
                                                }
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                                                isContinue = false;
                                                //excelError.Add("Xe [" + excelPlanInput["VehicleNo"] + "] không tồn tại.");
                                            }
                                        }

                                        if (!string.IsNullOrEmpty(excelInput["GroupVehicle"]))
                                        {
                                            var objCheck = dataOrder.ListGroupOfVehicle.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["GroupVehicle"].Trim().ToLower());
                                            if (objCheck != null)
                                            {
                                                govID = objCheck.ID;
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGovID, govID.ToString());
                                            }
                                            else
                                            {
                                                //excelError.Add("Không tìm thấy loại xe [" + excelInput["GroupVehicle"] + "]");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Lưu thông tin chuyến
                                var obj = new DTOOPSDIImportPacketTOMaster_Import();
                                if (venID > 0 && vehID > 0 && ETD != null && ETA != null)
                                {
                                    obj = dataTOMaster.FirstOrDefault(c => c.VendorID == venID && (c.VehicleID == vehID || c.VehicleNo == vehCode) && c.ETD == ETD);
                                    if (obj == null)
                                    {
                                        obj = new DTOOPSDIImportPacketTOMaster_Import();
                                        obj.ETD = ETD;
                                        obj.ETA = ETA;
                                        obj.IsNewVendorVehicle = isNewVehicle;
                                        //obj.SortOrder = idx++;
                                        obj.VehicleID = vehID;
                                        obj.VendorID = venID;
                                        obj.VehicleNo = vehCode;
                                        obj.VendorCode = venCode;
                                        obj.GroupOfVehicleID = govID;
                                        obj.DriverTel = driverTel;
                                        obj.DriverName = driverName;
                                        obj.Note = excelPlanInput["MasterNote"];
                                        obj.Error = new List<string>();
                                        obj.ListDITOGroupProduct = new List<DTOOPSDIImportPacket_GroupProduct>();
                                        //foreach (var item in excelError)
                                        //{
                                        //    obj.Error.Add(item);
                                        //}
                                        dataTOMaster.Add(obj);
                                        dicTOMaster.Add(checkRow.Index.Value, obj.SortOrder);
                                    }
                                    else
                                    {
                                        if (obj.IsFTL && obj.GroupOfVehicleID != govID)
                                        {
                                            obj = dataTOMaster.FirstOrDefault(c => c.VendorID == venID && (c.VehicleID == vehID || c.VehicleNo == vehCode) && c.ETD == ETD && c.GroupOfVehicleID == govID);
                                            if (obj == null)
                                            {
                                                obj = new DTOOPSDIImportPacketTOMaster_Import();
                                                obj.ETD = ETD;
                                                obj.ETA = ETA;
                                                obj.IsNewVendorVehicle = isNewVehicle;
                                                //obj.SortOrder = idx++;
                                                obj.VehicleID = vehID;
                                                obj.VendorID = venID;
                                                obj.VehicleNo = vehCode;
                                                obj.VendorCode = venCode;
                                                obj.GroupOfVehicleID = govID;
                                                obj.DriverTel = driverTel;
                                                obj.DriverName = driverName;
                                                obj.Note = excelPlanInput["MasterNote"];
                                                obj.Error = new List<string>();
                                                obj.ListDITOGroupProduct = new List<DTOOPSDIImportPacket_GroupProduct>();
                                                //foreach (var item in excelError)
                                                //{
                                                //    obj.Error.Add(item);
                                                //}
                                                dataTOMaster.Add(obj);
                                                dicTOMaster.Add(checkRow.Index.Value, obj.SortOrder);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    obj.ETD = ETD;
                                    obj.ETA = ETA;
                                    obj.IsNewVendorVehicle = isNewVehicle;
                                    //obj.SortOrder = idx++;
                                    obj.VehicleID = vehID;
                                    obj.VendorID = venID;
                                    obj.VehicleNo = vehCode;
                                    obj.VendorCode = venCode;
                                    obj.GroupOfVehicleID = govID;
                                    obj.DriverTel = driverTel;
                                    obj.DriverName = driverName;
                                    obj.Note = excelPlanInput["MasterNote"];
                                    obj.Error = new List<string>();
                                    obj.ListDITOGroupProduct = new List<DTOOPSDIImportPacket_GroupProduct>();
                                    //foreach (var item in excelError)
                                    //{
                                    //    obj.Error.Add(item);
                                    //}
                                    dataTOMaster.Add(obj);
                                    dicTOMaster.Add(checkRow.Index.Value, obj.SortOrder);
                                }
                                #endregion

                                #region Kiểm tra nhóm sản phẩm
                                if (isContinue)
                                {
                                    var objCopy = new CopyHelper();
                                    var oData = GetDataGroupProduct(checkRow, excelInput, dataOrder, objSettingOrder, sValue);
                                    var isSettingETD = objSettingOrder.ETD > 0 || objSettingOrder.ETDTime_RequestDate > 0;
                                    foreach (var o in oData)
                                    {
                                        if (o.IsFTL)
                                        {
                                            if (obj.ListDITOGroupProduct.Count == 0)
                                            {
                                                obj.IsFTL = true;
                                            }
                                            if (!obj.IsFTL)
                                            {
                                                //obj.Error.Add("Chuyến LTL không thể chạy đơn FTL. Nhóm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                                isContinue = false;
                                            }

                                            if (isContinue)
                                            {
                                                var objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                        && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                        && (isSettingETD ? c.ETD == o.ETD : true) && c.GroupID == o.GroupID && c.ProductID == o.ProductID
                                                        && (c.TypeOfPacking == 1 ? c.Ton == o.Ton : c.TypeOfPacking == 2 ? c.CBM == o.CBM : c.Quantity == o.Quantity));
                                                if (objDITO == null)
                                                    objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                        && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                        && (isSettingETD ? c.ETD == o.ETD : true) && c.GroupID == o.GroupID && c.ProductID == o.ProductID);
                                                if (objDITO != null)
                                                {
                                                    if (obj.FTLOrderID < 1)
                                                        obj.FTLOrderID = objDITO.OrderID;
                                                    if (obj.FTLOrderID != objDITO.OrderID)
                                                    {
                                                        //obj.Error.Add("Không thể chạy 2 đơn FTL. Nhóm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                                        isContinue = false;
                                                    }

                                                    if (isContinue)
                                                    {
                                                        o.ID = objDITO.ID;
                                                        o.ETA = objDITO.ETA;
                                                        o.ETARequest = objDITO.ETARequest;
                                                        o.ETD = objDITO.ETD;
                                                        o.LocationFromName = objDITO.LocationFromName;
                                                        o.LocationToName = objDITO.LocationToName;
                                                        switch (objDITO.TypeOfPacking)
                                                        {
                                                            case 1:
                                                                if (objDITO.Ton > o.Ton)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.Ton = Math.Round(objDITO.Ton - o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * objTmp.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.CBM = Math.Round(objDITO.ExchangeCBM.Value * objTmp.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.Ton == o.Ton)
                                                                {
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá số tấn. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 2:
                                                                if (objDITO.CBM > o.CBM)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.CBM = Math.Round(objDITO.CBM - o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Ton = Math.Round(objDITO.ExchangeTon.Value * objTmp.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * objTmp.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.CBM == o.CBM)
                                                                {
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá số khối. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 3:
                                                                if (objDITO.Quantity > o.Quantity)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.Quantity = Math.Round(objDITO.Quantity - o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Ton = Math.Round(objDITO.ExchangeTon.Value * objTmp.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.CBM = Math.Round(objDITO.ExchangeCBM.Value * objTmp.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.Quantity == o.Quantity)
                                                                {
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá SL. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //obj.Error.Add("Không tìm thấy sản phẩm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (obj.IsFTL)
                                            {
                                                //obj.Error.Add("Chuyến FTL không thể chạy đơn LTL. Nhóm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                if (o.Ton == 0 && o.CBM == 0 && o.Quantity == 0 && o.ProductID > 0 && o.GroupID > 0)
                                                {
                                                    //obj.Error.Add("Không có thông tin sản lượng. Nhóm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    var objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.TOMasterID == null && c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                           && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                           && c.GroupID == o.GroupID && c.ProductID == o.ProductID && (c.TypeOfPacking == 1 ? c.Ton == o.Ton : (c.TypeOfPacking == 2 ? c.CBM == o.CBM : c.Quantity == o.Quantity)));
                                                    if (objDITO == null)
                                                        objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.TOMasterID == null && c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                           && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                           && c.GroupID == o.GroupID && c.ProductID == o.ProductID && (c.TypeOfPacking == 1 ? c.Ton > o.Ton : (c.TypeOfPacking == 2 ? c.CBM > o.CBM : c.Quantity > o.Quantity)));
                                                    if (objDITO == null)
                                                        objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.TOMasterID == null && c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                           && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                           && c.GroupID == o.GroupID && c.ProductID == o.ProductID);
                                                    if (objDITO == null)
                                                        objDITO = data.ListDITOGroupProduct.FirstOrDefault(c => c.OrderCode.Trim().ToLower() == o.OrderCode.Trim().ToLower()
                                                           && c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID && c.DNCode == o.DNCode && c.SOCode == o.SOCode
                                                           && c.GroupID == o.GroupID && c.ProductID == o.ProductID);
                                                    if (objDITO != null)
                                                    {
                                                        o.ID = objDITO.ID;
                                                        o.ETA = objDITO.ETA;
                                                        o.ETARequest = objDITO.ETARequest;
                                                        o.ETD = objDITO.ETD;
                                                        o.LocationFromName = objDITO.LocationFromName;
                                                        o.LocationToName = objDITO.LocationToName;
                                                        switch (objDITO.TypeOfPacking)
                                                        {
                                                            case 1:
                                                                if (objDITO.Ton > o.Ton)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.Ton = Math.Round(objDITO.Ton - o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * objTmp.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.CBM = Math.Round(objDITO.ExchangeCBM.Value * objTmp.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.Ton == o.Ton)
                                                                {
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Ton, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá số tấn. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 2:
                                                                if (objDITO.CBM > o.CBM)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.CBM = Math.Round(objDITO.CBM - o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Ton = Math.Round(objDITO.ExchangeTon.Value * objTmp.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * objTmp.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.CBM == o.CBM)
                                                                {
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeQuantity > 0)
                                                                    {
                                                                        o.Quantity = Math.Round(objDITO.ExchangeQuantity.Value * o.CBM, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá số khối. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 3:
                                                                if (objDITO.Quantity > o.Quantity)
                                                                {
                                                                    var objTmp = new DTOOPSDIImportPacket_GroupProduct();
                                                                    objCopy.Copy(objDITO, objTmp);
                                                                    objTmp.Quantity = Math.Round(objDITO.Quantity - o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.Ton = Math.Round(objDITO.ExchangeTon.Value * objTmp.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                        objTmp.CBM = Math.Round(objDITO.ExchangeCBM.Value * objTmp.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    data.ListDITOGroupProduct.Add(objTmp);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else if (objDITO.Quantity == o.Quantity)
                                                                {
                                                                    if (objDITO.ExchangeTon > 0)
                                                                    {
                                                                        o.Ton = Math.Round(objDITO.ExchangeTon.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    if (objDITO.ExchangeCBM > 0)
                                                                    {
                                                                        o.CBM = Math.Round(objDITO.ExchangeCBM.Value * o.Quantity, NoDigit, MidpointRounding.AwayFromZero);
                                                                    }
                                                                    data.ListDITOGroupProduct.Remove(objDITO);
                                                                    obj.ListDITOGroupProduct.Add(o);
                                                                }
                                                                else
                                                                {
                                                                    //obj.Error.Add("ĐH [" + objDITO.OrderCode + "] Quá SL. Dòng [" + row + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //obj.Error.Add("Không tìm thấy sản phẩm [" + o.GroupCode + "] ĐH [" + o.OrderCode + "]. Dòng[" + row + "].");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }

                            if (isContinue)
                            {
                                foreach (var item in dataTOMaster.Where(c => c.IsFTL == true && c.FTLOrderID > 0).ToList())
                                {
                                    var objCheck = data.ListDITOGroupProduct.Where(c => c.OrderID == item.FTLOrderID && c.IsFTL == true).ToList();
                                    if (objCheck.Count > 0)
                                    {
                                        //item.Error.Add("Chưa phân chuyến hết đơn FTL. ĐH [" + objCheck.FirstOrDefault().OrderCode + "]");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(20, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                            }

                            if (isContinue)
                            {
                                foreach (var item in dataTOMaster)
                                {
                                    var objV = data.ListVehicle.FirstOrDefault(c => c.VendorID == item.VendorID && c.ID == item.VehicleID);
                                    if (objV != null && item.ListDITOGroupProduct.Sum(c => c.Ton) > objV.MaxWeight)
                                    {
                                        //item.ExcelError = "Quá trọng tải.";
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckNote1, HelperExcel.MessageError(19, lstMessageError));
                                    }
                                }
                            }
                        }

                        result.ListRowResult.Add(rowResult);
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                    }

                    HelperExcel.SaveData(model, id, lstWorksheet);

                    result.SYSExcel = HelperExcel.GetByID(model, id);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        private List<DTOOPSDIImportPacket_GroupProduct> GetDataGroupProduct(Row checkRow, Dictionary<string, string> excelInput, DTOORDOrder_ImportCheck data, DTOCUSSettingOrder objSetting, List<string> sValue)
        {
            var dataRes = new List<DTOOPSDIImportPacket_GroupProduct>();

            int svID = -1, serviceID = -1, tmID = -1, transportID = -1;

            if (objSetting.TypeOfTransportModeID > 0)
            {
                tmID = objSetting.TypeOfTransportModeID;
                var objTM = data.ListTransportMode.FirstOrDefault(c => c.ID == tmID);
                if (objTM != null)
                    transportID = objTM.TransportModeID;
            }
            else
            {
                var str = excelInput["TypeOfTransportMode"];
                if (!string.IsNullOrEmpty(str))
                {
                    var objTM = data.ListTransportMode.FirstOrDefault(c => c.Code.ToLower() == str.Trim().ToLower());
                    if (objTM != null)
                    {
                        tmID = objTM.ID;
                        transportID = objTM.TransportModeID;
                    }
                }
            }

            if (objSetting.ServiceOfOrderID > 0)
            {
                svID = objSetting.ServiceOfOrderID;
                var objSV = data.ListServiceOfOrder.FirstOrDefault(c => c.ID == svID);
                if (objSV != null)
                    serviceID = objSV.ServiceOfOrderID;
            }
            else
            {
                var str = excelInput["ServiceOfOrder"].Trim().ToLower();
                if (!string.IsNullOrEmpty(str))
                {
                    var objSV = data.ListServiceOfOrder.FirstOrDefault(c => c.Code.ToLower() == str.Trim().ToLower());
                    if (objSV != null)
                    {
                        svID = objSV.ID;
                        serviceID = objSV.ServiceOfOrderID;
                    }
                }
            }

            //Xe tải
            if ((transportID == iFTL || transportID == iLTL) && (serviceID == iLO || serviceID == -1))
            {
                #region ĐH xe tải
                var eItem = new DTOOPSDIImportPacket_GroupProduct();
                var cusID = -1;

                #region Check tgian

                if (objSetting.RequestDate > 0)
                {
                    try
                    {
                        eItem.RequestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate"]);
                    }
                    catch
                    {
                    }
                    if (objSetting.RequestTime > 0 && eItem.RequestDate != null)
                    {
                        if (!string.IsNullOrEmpty(excelInput["RequestTime"]))
                        {
                            try
                            {
                                eItem.RequestDate = eItem.RequestDate.Date.Add(TimeSpan.Parse(excelInput["RequestTime"]));
                            }
                            catch
                            {
                            }
                        }
                    }
                }
                if (objSetting.RequestDate_Time > 0)
                {
                    try
                    {
                        eItem.RequestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate_Time"]);
                    }
                    catch
                    {
                    }
                }

                if (!string.IsNullOrEmpty(excelInput["ETD"]))
                {
                    try
                    {
                        eItem.ETD = HelperExcel.ValueToDateVN(excelInput["ETD"]);
                    }
                    catch
                    {
                    }
                }
                else if (objSetting.ETDTime_RequestDate > 0 && eItem.RequestDate != null)
                {
                    if (!string.IsNullOrEmpty(excelInput["ETDTime_RequestDate"]))
                    {
                        try
                        {
                            eItem.ETD = eItem.RequestDate.Date.Add(TimeSpan.Parse(excelInput["ETDTime_RequestDate"]));
                        }
                        catch
                        {
                        }
                    }
                    else
                    {
                        eItem.ETD = eItem.RequestDate;
                    }
                }

                if (!string.IsNullOrEmpty(excelInput["ETA"]))
                {
                    try
                    {
                        eItem.ETA = HelperExcel.ValueToDateVN(excelInput["ETA"]);
                    }
                    catch
                    {
                    }
                }
                else if (objSetting.ETATime_RequestDate > 0 && eItem.RequestDate != null)
                {
                    if (!string.IsNullOrEmpty(excelInput["ETATime_RequestDate"]))
                    {
                        try
                        {
                            eItem.ETA = eItem.RequestDate.Date.Add(TimeSpan.Parse(excelInput["ETATime_RequestDate"]));
                        }
                        catch
                        {
                        }
                    }
                    else
                    {
                        eItem.ETA = eItem.RequestDate;
                    }
                }

                if (!string.IsNullOrEmpty(excelInput["ETARequest"]))
                {
                    try
                    {
                        eItem.ETARequest = HelperExcel.ValueToDateVN(excelInput["ETARequest"]);
                    }
                    catch
                    {
                    }
                    if (eItem.ETARequest != null && objSetting.ETARequestTime > 0)
                    {
                        if (!string.IsNullOrEmpty(excelInput["ETARequestTime"]))
                        {
                            try
                            {
                                eItem.ETARequest = eItem.ETARequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETARequestTime"]));
                            }
                            catch
                            {
                            }
                        }
                    }
                }

                #endregion

                #region Check Customer, Contract và Code

                if (objSetting.CustomerID == objSetting.SYSCustomerID)
                {
                    if (!string.IsNullOrEmpty(excelInput["CustomerCode"]))
                    {
                        var objCheck = data.ListCustomer.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["CustomerCode"].Trim().ToLower());
                        if (objCheck != null)
                        {
                            cusID = objCheck.ID;
                        }
                    }
                }
                else
                {
                    cusID = objSetting.CustomerID;
                }

                eItem.OrderCode = excelInput["OrderCode"];

                #endregion

                #region Check nhà phân phối

                var pID = -1;
                string toCode = string.Empty;
                string toName = string.Empty;
                string dName = excelInput["DistributorName"];
                string dCode = excelInput["DistributorCode"];

                if (!string.IsNullOrEmpty(excelInput["DistributorCodeName"]))
                {
                    string[] s = excelInput["DistributorCodeName"].Split('-');
                    dCode = s[0];
                    if (s.Length > 1)
                    {
                        dName = excelInput["DistributorCodeName"].Substring(dCode.Length + 1);
                    }
                }

                if (!string.IsNullOrEmpty(dCode))
                {
                    var objCheck = data.ListDistributor.FirstOrDefault(c => c.PartnerCode.Trim().ToLower() == dCode.Trim().ToLower() && c.CustomerID == cusID);
                    if (objCheck != null)
                    {
                        pID = objCheck.CUSPartnerID;
                        toCode = excelInput["LocationToCode"];
                        toName = excelInput["LocationToName"];
                        if (objSetting.LocationToCodeName > 0)
                        {
                            if (!string.IsNullOrEmpty(excelInput["LocationToCodeName"]))
                            {
                                toCode = excelInput["LocationToCodeName"].Split('-').FirstOrDefault();
                                toName = excelInput["LocationToCodeName"].Split('-').Skip(1).FirstOrDefault();
                            }
                            else
                            {
                                toCode = string.Empty;
                                toName = string.Empty;
                            }
                        }

                        //Tìm theo code
                        var objTo = data.ListDistributorLocation.FirstOrDefault(c => c.CusPartID == pID && c.LocationCode.Trim().ToLower() == toCode.Trim().ToLower());
                        if (objTo != null)
                        {
                            eItem.LocationToID = objTo.CUSLocationID;
                        }
                        else
                        {
                            objTo = data.ListDistributorLocation.FirstOrDefault(c => c.CusPartID == pID && c.Address.Trim().ToLower() == excelInput["LocationToAddress"].Trim().ToLower());
                            if (objTo != null)
                            {
                                eItem.LocationToID = objTo.CUSLocationID;
                            }
                        }
                    }
                }

                #endregion

                #region Check sản lượng, kho, nhóm sản phẩm và đơn vị tính

                //Dictionary quantity theo kho. [Q = Quantity]
                Dictionary<int, Dictionary<int, double>> dicQ = new Dictionary<int, Dictionary<int, double>>();
                //Dictionary chi tiết kho. [L = Location]
                Dictionary<int, DTOORDData_Location> dicL = new Dictionary<int, DTOORDData_Location>();
                //Dictionary chi tiết nhóm sản phẩm đầu tiên/chỉ định trong kho. [GS = GroupProductInStock]
                Dictionary<int, DTOORDData_GroupProduct> dicGS = new Dictionary<int, DTOORDData_GroupProduct>();

                //Dictionary quantity theo kho-nhóm hàng-hàng hóa. [QP = QuantityProduct]
                Dictionary<string, Dictionary<int, double>> dicQP = new Dictionary<string, Dictionary<int, double>>();

                //Nếu thiết lập kho theo cột, check kho, lấy sản lượng theo excel.
                if (objSetting.HasStock && objSetting.ListStock != null)
                {
                    foreach (var stock in objSetting.ListStock)
                    {
                        int sID = stock.StockID;
                        var objCheck = data.ListStock.FirstOrDefault(c => c.CUSLocationID == sID && c.CustomerID == cusID);
                        if (objCheck != null)
                        {
                            dicL.Add(sID, objCheck);
                        }

                        Dictionary<int, double> dicV = new Dictionary<int, double>();
                        var dicS = GetDataValue(checkRow, stock, sValue);
                        if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                        {
                            try
                            {
                                if (!string.IsNullOrEmpty(dicS["Ton"]))
                                    dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                else
                                    dicV.Add(1, 0);
                            }
                            catch
                            {
                                dicV.Add(1, 0);
                            }
                            try
                            {
                                if (!string.IsNullOrEmpty(dicS["CBM"]))
                                    dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                else
                                    dicV.Add(2, 0);
                            }
                            catch
                            {
                                dicV.Add(2, 0);
                            }
                            try
                            {
                                if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                    dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                else
                                    dicV.Add(3, 0);
                            }
                            catch
                            {
                                dicV.Add(3, 0);
                            }
                            dicQ.Add(sID, dicV);
                        }
                    }
                }
                else if (objSetting.HasStockProduct)
                {
                    foreach (var stock in objSetting.ListStockWithProduct)
                    {
                        var cusStock = data.ListStock.FirstOrDefault(c => c.CUSLocationID == stock.StockID && c.CustomerID == cusID);
                        var cusGroup = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID == stock.StockID && c.ID == stock.GroupOfProductID);
                        var cusProduct = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID == stock.GroupOfProductID && stock.ProductID == c.ID);
                        if (cusStock != null && cusGroup != null && cusProduct != null)
                        {
                            Dictionary<int, double> dicV = new Dictionary<int, double>();
                            var dicS = GetDataValue(checkRow, stock, sValue);
                            if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                            {
                                try
                                {
                                    if (!string.IsNullOrEmpty(dicS["Ton"]))
                                        dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                    else
                                        dicV.Add(1, 0);
                                }
                                catch
                                {
                                    dicV.Add(1, 0);
                                }
                                try
                                {
                                    if (!string.IsNullOrEmpty(dicS["CBM"]))
                                        dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                    else
                                        dicV.Add(2, 0);
                                }
                                catch
                                {
                                    dicV.Add(2, 0);
                                }
                                try
                                {
                                    if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                        dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                    else
                                        dicV.Add(3, 0);
                                }
                                catch
                                {
                                    dicV.Add(3, 0);
                                }
                                var key = stock.StockID + "-" + stock.GroupOfProductID + "-" + stock.ProductID;
                                dicQP.Add(key, dicV);
                            }
                        }
                    }
                }
                //Mỗi dòng 1 kho, check kho, lấy sản lượng theo excel.
                else
                {
                    int sID = -1;
                    if (objSetting.LocationFromCode < 1 && objSetting.LocationFromCodeName < 1)
                    {
                        if (data.ListStock.Count(c => c.CustomerID == cusID) == 1)
                        {
                            var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID);

                            sID = objCheck.CUSLocationID;
                            dicL.Add(sID, objCheck);
                        }
                    }
                    else
                    {
                        var sCode = excelInput["LocationFromCode"];
                        if (objSetting.LocationFromCodeName > 0)
                        {
                            if (!string.IsNullOrEmpty(excelInput["LocationFromCodeName"]))
                            {
                                sCode = excelInput["LocationFromCodeName"].Split('-').FirstOrDefault();
                            }
                            else
                            {
                                sCode = string.Empty;
                            }
                        }
                        var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.ToLower().Trim() == sCode.ToLower().Trim());
                        if (objCheck != null)
                        {
                            sID = objCheck.CUSLocationID;
                            dicL.Add(sID, objCheck);
                        }
                        else
                        {
                            dicL.Add(-1, new DTOORDData_Location());
                        }
                    }


                    if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]) || !string.IsNullOrEmpty(excelInput["CBM_SKU"]) || !string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                    {
                        Dictionary<int, double> dicV = new Dictionary<int, double>();
                        try
                        {
                            if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]))
                                dicV.Add(1, Convert.ToDouble(excelInput["Ton_SKU"]));
                            else
                                dicV.Add(1, 0);
                        }
                        catch
                        {
                            dicV.Add(1, 0);
                        }
                        try
                        {
                            if (!string.IsNullOrEmpty(excelInput["CBM_SKU"]))
                                dicV.Add(2, Convert.ToDouble(excelInput["CBM_SKU"]));
                            else
                                dicV.Add(2, 0);
                        }
                        catch
                        {
                            dicV.Add(2, 0);
                        }
                        try
                        {
                            if (!string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity_SKU"]));
                            else
                                dicV.Add(3, 0);
                        }
                        catch
                        {
                            dicV.Add(3, 0);
                        }
                        dicQ.Add(sID, dicV);
                    }
                    else
                    {
                        Dictionary<int, double> dicV = new Dictionary<int, double>();
                        try
                        {
                            if (!string.IsNullOrEmpty(excelInput["Ton"]))
                                dicV.Add(1, Convert.ToDouble(excelInput["Ton"]));
                            else
                                dicV.Add(1, 0);
                        }
                        catch
                        {
                            dicV.Add(1, 0);
                        }
                        try
                        {
                            if (!string.IsNullOrEmpty(excelInput["CBM"]))
                                dicV.Add(2, Convert.ToDouble(excelInput["CBM"]));
                            else
                                dicV.Add(2, 0);
                        }
                        catch
                        {
                            dicV.Add(2, 0);
                        }
                        try
                        {
                            if (!string.IsNullOrEmpty(excelInput["Quantity"]))
                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity"]));
                            else
                                dicV.Add(3, 0);
                        }
                        catch
                        {
                            dicV.Add(3, 0);
                        }
                        dicQ.Add(sID, dicV);
                    }
                }

                string strGopCode = string.Empty;
                //Dictionary Product theo GroupProduct. [P = Product] - Key: GroupOfProductID
                Dictionary<int, int> dicP = new Dictionary<int, int>();
                //Dictionary ProductCode theo GroupProduct. [PCode = ProductCode] - Key: GroupOfProductID
                Dictionary<int, string> dicPCode = new Dictionary<int, string>();
                Dictionary<int, bool> dicPIsKG = new Dictionary<int, bool>();

                //Nếu không có cột nhóm SP, check sản phẩm ko nhóm (ProductCodeWithoutGroup)
                //Nếu không có cột nhóm SP, kiểm tra kho có duy nhất nhóm SP => Lấy
                if (objSetting.GroupProductCode == 0 && objSetting.GroupProductCodeNotUnicode == 0)
                {
                    if (objSetting.ProductCodeWithoutGroup > 0)
                    {
                        if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                        {
                            var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                            if (objP != null)
                            {
                                foreach (var st in dicQ)
                                {
                                    var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                    if (objGS != null)
                                    {
                                        strGopCode = objGS.Code;
                                        dicGS.Add(st.Key, objGS);
                                        dicP.Add(objGS.ID, objP.ID);
                                        dicPCode.Add(objGS.ID, objP.Code);
                                        dicPIsKG.Add(objGS.ID, objP.IsKg);
                                    }
                                    else
                                    {
                                        dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (var st in dicQ)
                        {
                            var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                            if (dataGS.Count == 0)
                            {
                                dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                            }
                            else if (dataGS.Count == 1)
                            {
                                var objCheck = dataGS.FirstOrDefault();
                                strGopCode = objCheck.Code;
                                dicGS.Add(st.Key, objCheck);
                            }
                            else
                            {
                                var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                if (objCheck != null)
                                {
                                    strGopCode = objCheck.Code;
                                    dicGS.Add(st.Key, objCheck);
                                }
                                else
                                {
                                    dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                }
                            }
                        }
                    }
                }
                //Kiểm tra nhóm SP có tồn tại + có trong kho.
                else if (objSetting.ProductCodeWithoutGroup == 0)
                {
                    if (objSetting.GroupProductCode > 0)
                        strGopCode = excelInput["GroupProductCode"];
                    else
                        strGopCode = StringHelper.RemoveSign4VietnameseString(excelInput["GroupProductCodeNotUnicode"]);

                    if (!string.IsNullOrEmpty(strGopCode))
                    {
                        var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.Code.Trim().ToLower() == strGopCode.Trim().ToLower());
                        if (objGop != null)
                        {
                            foreach (var st in dicQ)
                            {
                                if (data.ListGroupOfProduct.Count(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key) == 0)
                                {
                                    dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                }
                                else
                                {
                                    var objCheck = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key);
                                    dicGS.Add(st.Key, objCheck);
                                }
                            }
                        }
                        else
                        {
                            dicGS.Add(-1, new DTOORDData_GroupProduct());
                        }
                    }
                    else
                    {
                        foreach (var st in dicQ)
                        {
                            var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                            if (dataGS.Count == 0)
                            {
                                dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                            }
                            else if (dataGS.Count == 1)
                            {
                                var objCheck = dataGS.FirstOrDefault();
                                strGopCode = objCheck.Code;
                                dicGS.Add(st.Key, objCheck);
                            }
                            else
                            {
                                var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                if (objCheck != null)
                                {
                                    strGopCode = objCheck.Code;
                                    dicGS.Add(st.Key, objCheck);
                                }
                                else
                                {
                                    dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                    {
                        var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                        if (objP != null)
                        {
                            foreach (var st in dicQ)
                            {
                                var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                if (objGS != null)
                                {
                                    strGopCode = objGS.Code;
                                    dicGS.Add(st.Key, objGS);
                                    dicP.Add(objGS.ID, objP.ID);
                                    dicPCode.Add(objGS.ID, objP.Code);
                                    dicPIsKG.Add(objGS.ID, objP.IsKg);
                                }
                                else
                                {
                                    dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                }
                            }
                        }
                    }
                }

                if (objSetting.ProductCodeWithoutGroup == 0)
                {
                    if (objSetting.Packing == 0 && objSetting.PackingNotUnicode == 0)
                    {
                        foreach (var gop in dicGS)
                        {
                            if (!dicP.ContainsKey(gop.Value.ID))
                            {
                                var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                if (dataProduct.Count == 1)
                                {
                                    dicP.Add(gop.Value.ID, dataProduct[0].ID);
                                    dicPCode.Add(gop.Value.ID, dataProduct[0].Code);
                                    dicPIsKG.Add(gop.Value.ID, dataProduct[0].IsKg);
                                }
                                else
                                {
                                    var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                    if (objDefault != null)
                                    {
                                        dicP.Add(gop.Value.ID, objDefault.ID);
                                        dicPCode.Add(gop.Value.ID, objDefault.Code);
                                        dicPIsKG.Add(gop.Value.ID, objDefault.IsKg);
                                    }
                                    else
                                    {
                                        dicP.Add(gop.Value.ID, -1);
                                        dicPCode.Add(gop.Value.ID, "");
                                        dicPIsKG.Add(gop.Value.ID, false);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (var gop in dicGS)
                        {
                            if (!dicP.ContainsKey(gop.Value.ID))
                            {
                                var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                if (dataProduct.Count > 0)
                                {
                                    var str = string.Empty;
                                    if (objSetting.Packing > 0)
                                        str = excelInput["Packing"];
                                    else if (objSetting.PackingNotUnicode > 0)
                                        str = StringHelper.RemoveSign4VietnameseString(excelInput["PackingNotUnicode"]);

                                    if (string.IsNullOrEmpty(str))
                                    {
                                        var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                        if (objDefault != null)
                                        {
                                            dicP.Add(gop.Value.ID, objDefault.ID);
                                            dicPCode.Add(gop.Value.ID, objDefault.Code);
                                            dicPIsKG.Add(gop.Value.ID, objDefault.IsKg);
                                        }
                                        else
                                        {
                                            dicP.Add(gop.Value.ID, -1);
                                            dicPCode.Add(gop.Value.ID, "");
                                            dicPIsKG.Add(gop.Value.ID, false);
                                        }
                                    }
                                    else
                                    {
                                        var product = dataProduct.FirstOrDefault(c => c.Code.ToLower().Trim() == str.ToLower().Trim());
                                        if (product != null)
                                        {
                                            dicP.Add(gop.Value.ID, product.ID);
                                            dicPCode.Add(gop.Value.ID, product.Code);
                                            dicPIsKG.Add(gop.Value.ID, product.IsKg);
                                        }
                                        else
                                        {
                                            dicP.Add(gop.Value.ID, -1);
                                            dicPCode.Add(gop.Value.ID, "");
                                            dicPIsKG.Add(gop.Value.ID, false);
                                        }
                                    }
                                }
                                else
                                {
                                    dicP.Add(gop.Value.ID, -1);
                                    dicPCode.Add(gop.Value.ID, "");
                                    dicPIsKG.Add(gop.Value.ID, false);
                                }
                            }
                        }
                    }
                }

                #endregion

                #region Lưu dữ liệu

                foreach (var dic in dicQ)
                {
                    var gop = new DTOORDData_GroupProduct();
                    try
                    {
                        gop = dicGS[dic.Key];
                    }
                    catch
                    {
                        gop.Code = excelInput["GroupProductCode"];
                    }

                    var item = new DTOOPSDIImportPacket_GroupProduct();
                    item.IsFTL = transportID == iFTL;
                    item.SOCode = excelInput["SOCode"];
                    item.DNCode = excelInput["DNCode"];
                    item.OrderCode = excelInput["OrderCode"];
                    item.GroupID = gop.ID;
                    item.GroupCode = gop.Code;
                    item.GroupName = gop.GroupName;
                    try
                    {
                        item.ProductID = dicP[gop.ID];
                        item.ProductCode = dicPCode[gop.ID];
                    }
                    catch
                    { }
                    item.LocationToID = eItem.LocationToID;
                    item.LocationFromID = dic.Key;

                    item.ETD = eItem.ETD;
                    item.ETA = eItem.ETA;
                    item.ETARequest = eItem.ETARequest;

                    var objProduct = data.ListProduct.FirstOrDefault(c => c.ID == item.ProductID && c.CustomerID == cusID);
                    if (objProduct != null)
                    {
                        item.Ton = Math.Round(dic.Value[1], NoDigit, MidpointRounding.AwayFromZero);
                        item.CBM = Math.Round(dic.Value[2], NoDigit, MidpointRounding.AwayFromZero);
                        item.Quantity = Math.Round(dic.Value[3], NoDigit, MidpointRounding.AwayFromZero);
                        if (objProduct.IsKg)
                            item.Ton = item.Ton / 1000;
                        item.Ton = Math.Round(item.Ton, NoDigit, MidpointRounding.AwayFromZero);
                    }
                    dataRes.Add(item);
                }
                foreach (var dic in dicQP)
                {
                    var tmp = dic.Key.ToString().Split('-').ToList();
                    var item = new DTOOPSDIImportPacket_GroupProduct();
                    item.IsFTL = transportID == iFTL;
                    item.SOCode = excelInput["SOCode"];
                    item.DNCode = excelInput["DNCode"];
                    item.OrderCode = excelInput["OrderCode"];
                    var cusStock = data.ListStock.FirstOrDefault(c => c.CUSLocationID.ToString() == tmp[0] && c.CustomerID == cusID);
                    var cusGroup = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID.ToString() == tmp[0] && c.ID.ToString() == tmp[1]);
                    var cusProduct = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID.ToString() == tmp[1] && c.ID.ToString() == tmp[2]);
                    if (cusStock != null && cusGroup != null && cusProduct != null)
                    {
                        item.GroupID = cusGroup.ID;
                        item.GroupCode = cusGroup.Code;
                        item.GroupName = cusGroup.GroupName;
                        item.ProductID = cusProduct.ID;
                        item.ProductCode = cusProduct.Code;
                        item.LocationToID = eItem.LocationToID;
                        item.LocationFromID = cusStock.CUSLocationID;
                        item.ETD = eItem.ETD;
                        item.ETA = eItem.ETA;
                        item.ETARequest = eItem.ETARequest;
                        item.Ton = Math.Round(dic.Value[1], NoDigit, MidpointRounding.AwayFromZero);
                        item.CBM = Math.Round(dic.Value[2], NoDigit, MidpointRounding.AwayFromZero);
                        item.Quantity = Math.Round(dic.Value[3], NoDigit, MidpointRounding.AwayFromZero);
                        if (cusProduct.IsKg)
                            item.Ton = item.Ton / 1000;
                        item.Ton = Math.Round(item.Ton, NoDigit, MidpointRounding.AwayFromZero);
                        dataRes.Add(item);
                    }
                }

                #endregion

                #endregion
            }

            return dataRes;
        }

        private Dictionary<string, string> GetDataValue(Row checkRow, object obj, List<string> sValue)
        {
            Dictionary<string, string> result = new Dictionary<string, string>();
            foreach (var prop in obj.GetType().GetProperties())
            {
                try
                {
                    var p = prop.Name;
                    if (!sValue.Contains(p))
                    {
                        var v = (int)prop.GetValue(obj, null);
                        var value = HelperExcel.GetString(checkRow, v - 1);
                        result.Add(p, v > 0 ? value : string.Empty);
                    }
                }
                catch (Exception)
                {
                }
            }
            return result;
        }

        private Dictionary<string, string> GetDataName()
        {
            Dictionary<string, string> result = new Dictionary<string, string>();

            result.Add("OrderCode", "Mã ĐH");
            result.Add("UniqueOrderCode", "Mã ĐH duy nhất");
            result.Add("SOCode", "Số SO");
            result.Add("DNCode", "Số DN");
            result.Add("RequestDate", "Ngày yêu cầu");
            result.Add("ETD", "ETD");
            result.Add("ETDTime_RequestDate", "ETD theo ngày yêu cầu");
            result.Add("ETA", "ETA");
            result.Add("ETATime_RequestDate", "ETA theo ngày yêu cầu");
            result.Add("ETARequest", "Ngày yc giao hàng");
            result.Add("ETDRequest", "Ngày yc đến kho");
            result.Add("CustomerCode", "Mã khách hàng");
            result.Add("CustomerName", "Tên khách hàng");
            result.Add("CustomerCodeName", "Mã-Tên khách hàng");
            result.Add("DistributorCode", "Mã NPP");
            result.Add("DistributorName", "Tên NPP");
            result.Add("DistributorCodeName", "Mã-Tên NPP");
            result.Add("LocationFromCode", "Mã điểm nhận");
            result.Add("LocationFromName", "Tên điểm nhận");
            result.Add("LocationFromCodeName", "Mã-Tên điểm nhận");
            result.Add("LocationToCode", "Mã điểm giao");
            result.Add("LocationToCodeName", "Mã-Tên điểm giao");
            result.Add("LocationToName", "Tên điểm giao");
            result.Add("LocationToAddress", "Địa chỉ giao");
            result.Add("GroupProductCode", "Nhóm sản phẩm");
            result.Add("Packing", "Mã hàng hóa/ĐVT");
            result.Add("Ton", "Tấn");
            result.Add("CBM", "Khối");
            result.Add("Quantity", "Số lượng");
            result.Add("GroupVehicle", "Loại xe");
            result.Add("Note", "Ghi chú");
            result.Add("TypeOfTransportMode", "Loại vận chuyển");
            result.Add("ServiceOfOrder", "Dịch vụ");
            result.Add("EconomicZone", "EconomicZone");
            result.Add("RoutingAreaCode", "Mã khu vực");
            result.Add("UserDefine1", "Tùy chọn 1");
            result.Add("UserDefine2", "Tùy chọn 2");
            result.Add("UserDefine3", "Tùy chọn 3");
            result.Add("UserDefine4", "Tùy chọn 4");
            result.Add("UserDefine5", "Tùy chọn 5");
            result.Add("UserDefine6", "Tùy chọn 6");
            result.Add("UserDefine7", "Tùy chọn 7");
            result.Add("UserDefine8", "Tùy chọn 8");
            result.Add("UserDefine9", "Tùy chọn 9");
            result.Add("RequestTime", "Giờ yêu cầu ĐH");
            result.Add("ETARequestTime", "Giờ yêu cầu giao hàng");
            result.Add("ETDRequestTime", "Giờ yêu cầu đến kho");
            result.Add("RequestDate_Time", "Ngày giờ yêu cầu ĐH");
            result.Add("LocationToNote", "Ghi chú điểm giao");
            result.Add("LocationToNote1", "Ghi chú điểm giao 1");
            result.Add("GroupProductCodeNotUnicode", "Nhóm sản phẩm(ko dấu)");
            result.Add("PackingNotUnicode", "Sản phẩm(ko dấu)");
            result.Add("RoutingCode", "Mã cung đường");
            result.Add("IsHot", "Gấp");
            result.Add("CutOffTime", "CutOffTime");
            result.Add("CarrierCode", "Mã hãng tàu");
            result.Add("CarrierCodeName", "Mã-têụ hãng tàu");
            result.Add("CarrierName", "Tên hãng tàu");
            result.Add("VesselNo", "Số tàu");
            result.Add("VesselName", "Tên tàu");
            result.Add("TripNo", "Số chuyến");
            result.Add("ContainerNo", "Số con.");
            result.Add("SealNo1", "SealNo1");
            result.Add("SealNo2", "SealNo2");
            result.Add("TypeOfContainerName", "Loại container");
            result.Add("LocationDepotCode", "Mã depot");
            result.Add("LocationDepotName", "Tên depot");
            result.Add("LocationReturnCode", "Mã depot trả");
            result.Add("LocationReturnName", "Tên depot trả");
            result.Add("HasCashCollect", "Thu hộ");
            result.Add("PriceTOMaster", "Giá chuyến");
            result.Add("PriceTon", "Giá theo tấn");
            result.Add("PriceCBM", "Giá theo khối");
            result.Add("PriceQuantity", "Giá theo số lượng");
            result.Add("TemperatureMax", "NĐ tối đa");
            result.Add("TemperatureMin", "NĐ tối thiểu");
            result.Add("DateGetEmpty", "Ngày lấy rỗng");
            result.Add("Date_TimeGetEmpty", "Ngày/giờ lấy rỗng");
            result.Add("TimeGetEmpty", "Giờ lấy rỗng");
            result.Add("DateReturnEmpty", "Ngày trả rỗng");
            result.Add("Date_TimeReturnEmpty", "Ngày/giờ trả rỗng");
            result.Add("TimeReturnEmpty", "Giờ trả rỗng");
            result.Add("TypeOfWAInspectionStatus", "Miễn kiểm");
            result.Add("InspectionDate", "Tgian kiểm hóa");
            result.Add("ProductCodeWithoutGroup", "Mã SP không nhóm");
            result.Add("Note1", "Ghi chú 1");
            result.Add("Note2", "Ghi chú 2");
            result.Add("Ton_SKU", "Tấn SKU");
            result.Add("CBM_SKU", "Khối SKU");
            result.Add("Quantity_SKU", "Số lượng SKU");
            result.Add("VendorCode", "Mã nhà xe");
            result.Add("VehicleNo", "Số xe");
            result.Add("MasterETDDate_Time", "Ngày-giờ ETD");
            result.Add("MasterETDDate", "Ngày ETD");
            result.Add("MasterETDTime", "Giờ ETD");
            result.Add("MasterETADate_Time", "Ngày-giờ ETA");
            result.Add("MasterETADate", "Ngày ETA");
            result.Add("MasterETATime", "Giờ ETA");
            result.Add("MasterNote", "Ghi chú chuyến");
            result.Add("MasterGroupVehicle", "Loại xe");
            result.Add("DriverName", "Tên tài xế");
            result.Add("DriverTel", "SĐT tài xế");
            result.Add("MasterSortOrder", "Số chuyến");
            result.Add("LocationFromProvince", "Tỉnh thành điểm lấy");
            result.Add("LocationFromDistrict", "Quận huyện điểm lấy");
            result.Add("LocationToProvince", "Tỉnh thành điểm giao");
            result.Add("LocationToDistrict", "Quận huyện điểm giao");
            result.Add("MasterHours", "Thời gian chuyến");
            result.Add("RomoocNo", "Số Romooc");

            return result;
        }
        #endregion

        #region NewCO - Vendor

        public DTOResult OPSCO_VEN_COTOContainer_List(string request, int typeOfView)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var dataRate = model.OPS_COTORate.Where(c => c.FirstRateTime != null && c.VendorID.HasValue && Account.ListCustomerID.Contains(c.VendorID.Value)).Select(c => new
                    {
                        c.COTOMasterID,
                        c.IsAccept,
                        c.Reason,
                        c.Note,
                        c.ReasonID,
                        VendorID = c.VendorID.HasValue && c.VendorID != Account.SYSCustomerID ? c.VendorID.Value : Account.SYSCustomerID,
                        VendorCode = c.VendorID.HasValue && c.VendorID != Account.SYSCustomerID ? c.CUS_Customer.Code : "Xe nhà",
                        c.CAT_Reason.ReasonName
                    }).ToList();
                    switch (typeOfView)
                    {
                        case 1:
                            dataRate = dataRate.Where(c => c.IsAccept == null).ToList();
                            break;
                        case 2:
                            dataRate = dataRate.Where(c => c.IsAccept == true).ToList();
                            break;
                        case 3:
                            dataRate = dataRate.Where(c => c.IsAccept == false).ToList();
                            break;
                        default:
                            break;
                    }
                    var data = dataRate.Select(c => c.COTOMasterID).ToList();
                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && !c.IsSplit && data.Contains(c.COTOMasterID.Value)).Select(c => new DTOOPSCO_VEN_Container
                        {
                            ID = c.OPSContainerID,
                            TOMasterID = c.COTOMasterID.Value,
                            TOMasterCode = c.OPS_COTOMaster.Code,
                            COTOStatus = c.OPS_COTOMaster.StatusOfCOTOMasterID,
                            TOVehicleID = c.OPS_COTOMaster.VehicleID ?? -1,
                            TOVehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                            TORomoocID = c.OPS_COTOMaster.RomoocID ?? -1,
                            TORomoocNo = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                            TOVendorID = c.OPS_COTOMaster.VendorOfVehicleID,
                            TOVendorCode = c.OPS_COTOMaster.VendorOfVehicleID > 0 && c.OPS_COTOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_COTOMaster.CUS_Customer.Code : "Xe nhà",
                            TODriverName = c.OPS_COTOMaster.DriverName1,
                            TODriverTel = c.OPS_COTOMaster.DriverTel1,
                            TOETA = c.OPS_COTOMaster.ETA,
                            TOETD = c.OPS_COTOMaster.ETD,
                            TOCreatedBy = c.OPS_COTOMaster.CreatedBy,
                            TOCreatedDate = c.OPS_COTOMaster.CreatedDate,
                            TOLastUpdate = string.IsNullOrEmpty(c.OPS_COTOMaster.ModifiedBy) ? c.OPS_COTOMaster.CreatedBy : c.OPS_COTOMaster.ModifiedBy,
                            TOLastUpdateTime = c.OPS_COTOMaster.ModifiedDate ?? c.OPS_COTOMaster.CreatedDate,
                            TOStatus = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : 2,

                            ContainerID = c.OPS_Container.ContainerID,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            CarrierCode = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierName = c.OPS_Container.ORD_Container.ORD_Order.PartnerID > 0 ? c.OPS_Container.ORD_Container.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            ETA = c.OPS_Container.ORD_Container.ETA,
                            ETD = c.OPS_Container.ORD_Container.ETD,
                            LocationFromCode = c.OPS_Container.ORD_Container.CUS_Location2.Code,
                            LocationFromName = c.OPS_Container.ORD_Container.CUS_Location2.LocationName,
                            LocationFromAddress = c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.Address,
                            LocationToCode = c.OPS_Container.ORD_Container.CUS_Location3.Code,
                            LocationToName = c.OPS_Container.ORD_Container.CUS_Location3.LocationName,
                            LocationToAddress = c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.Address,
                            LocationDepotCode = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Code : string.Empty,
                            LocationDepotName = c.OPS_Container.LocationDepotID > 0 ? c.OPS_Container.CAT_Location.Location : string.Empty,
                            LocationDepotReturnCode = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Code : string.Empty,
                            LocationDepotReturnName = c.OPS_Container.LocationDepotReturnID > 0 ? c.OPS_Container.CAT_Location1.Location : string.Empty,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            ServiceOfOrderName = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue ? c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                            Ton = c.OPS_Container.Ton,
                            TypeOfContainerName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            Note0 = c.OPS_Container.ORD_Container.Note ?? string.Empty,
                            Note1 = c.OPS_Container.ORD_Container.Note1 ?? string.Empty,
                            Note2 = c.OPS_Container.ORD_Container.Note2 ?? string.Empty
                        }).Distinct().ToList();
                    var dataORD = query.Select(c => c.OrderID).Distinct().ToList();
                    var dataGOP = model.ORD_GroupProduct.Where(c => dataORD.Contains(c.OrderID) && c.GroupOfProductID.HasValue).Select(c => new
                    {
                        c.OrderID,
                        c.CUS_GroupOfProduct.Code,
                        c.CUS_GroupOfProduct.GroupName
                    }).ToList();
                    foreach (var item in query)
                    {
                        item.ListGroupProductCode = dataGOP.Where(c => c.OrderID == item.OrderID).Select(c => c.Code).Distinct().ToList();
                        item.ListGroupProductName = dataGOP.Where(c => c.OrderID == item.OrderID).Select(c => c.GroupName).Distinct().ToList();
                        item.GroupProductCode = string.Join(", ", item.ListGroupProductCode);
                        item.GroupProductName = string.Join(", ", item.ListGroupProductName);
                        var o = dataRate.FirstOrDefault(c => c.COTOMasterID == item.TOMasterID);
                        if (o != null)
                        {
                            item.TOVendorID = o.VendorID;
                            item.TOVendorCode = o.VendorCode;
                            item.Reason = o.Reason;
                            item.RateNote = o.Note;
                            item.ReasonName = o.ReasonName ?? string.Empty;
                            item.ReasonID = o.ReasonID > 0 ? o.ReasonID.Value : -1;
                        }
                    }
                    var tmp = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = tmp.Total;
                    result.Data = tmp.Data as IEnumerable<DTOOPSCO_VEN_Container>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_VEN_COTOContainer_Add_No(DTOOPSCO_VEN_Container item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    var result = model.OPS_Container.FirstOrDefault(x => x.ID == item.ID);
                    if (item.COTOStatus >= -(int)SYSVarType.StatusOfCOTOMasterReceived)
                        throw new Exception("Chuyến đã hoàn tất. Không thể lưu!");
                    if (result != null)
                    {

                        result.ContainerNo = item.ContainerNo;
                        result.SealNo1 = item.SealNo1;
                        result.SealNo2 = item.SealNo2;
                        result.ModifiedBy = Account.UserName;
                        result.ModifiedDate = DateTime.Now;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_VEN_Driver> OPSCO_VEN_Driver_List()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return model.CUS_Driver.Where(c => Account.ListCustomerID.Contains(c.CustomerID)).Select(c => new DTOOPSCO_VEN_Driver
                    {

                        ID = c.ID,
                        VendorID = c.CustomerID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        DriverTel = c.CAT_Driver.Cellphone
                    }).ToList();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_VEN_Vehicle> OPSCO_VEN_Tractor_List()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return model.CUS_Vehicle.Where(c => Account.ListCustomerID.Contains(c.CustomerID) && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_VEN_Vehicle
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VendorID = c.CustomerID,
                        DriverName = c.CAT_Vehicle.DriverName,
                        DriverTel = c.CAT_Vehicle.Cellphone
                    }).ToList();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_VEN_Vehicle> OPSCO_VEN_Romooc_List()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return model.CUS_Romooc.Where(c => Account.ListCustomerID.Contains(c.CustomerID)).Select(c => new DTOOPSCO_VEN_Vehicle
                    {
                        ID = c.ID,
                        RomoocID = c.RomoocID,
                        RomoocNo = c.CAT_Romooc.RegNo,
                        VendorID = c.CustomerID
                    }).ToList();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_VEN_Reason> OPSCO_VEN_Reason_List()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return model.CAT_Reason.Where(c => c.TypeOfReasonID == -(int)SYSVarType.TypeOfReasonTenderReject).Select(c => new DTOOPSCO_VEN_Reason
                    {
                        ID = c.ID,
                        ReasonName = c.ReasonName
                    }).ToList();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_VEN_Reject(List<DTOOPSCO_VEN_TOMaster> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var dataError = HelperTOMaster.OPSCO_TenderReject(model, Account, data);
                    if (dataError.Count > 0 && dataError.Any(c => c != HelperTOMaster_Error.None))
                    {
                        throw FaultHelper.BusinessFault(null, null, string.Join(",", dataError.Where(c => c != HelperTOMaster_Error.None).ToList()));
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_VEN_Accept(List<DTOOPSCO_VEN_TOMaster> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var dataError = HelperTOMaster.OPSCO_TenderAccept(model, Account, data);
                    if (dataError.Count > 0 && dataError.Any(c => c != HelperTOMaster_Error.None))
                    {
                        throw FaultHelper.BusinessFault(null, null, string.Join(",", dataError.Where(c => c != HelperTOMaster_Error.None).ToList()));
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult OPSCO_VEN_Vehicle_List(string request, int venID, int typeOfVehicle)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (typeOfVehicle == 1)
                    {
                        var query = model.CUS_Vehicle.Where(c => c.CustomerID == venID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_VEN_Vehicle
                        {
                            ID = c.VehicleID,
                            VendorID = c.CustomerID,
                            VehicleID = c.VehicleID,
                            VehicleNo = c.CAT_Vehicle.RegNo,
                            MaxWeight = c.CAT_Vehicle.MaxWeight
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOOPSCO_VEN_Vehicle>;
                    }
                    else
                    {
                        var query = model.CUS_Romooc.Where(c => c.CustomerID == venID).Select(c => new DTOOPSCO_VEN_Vehicle
                        {
                            ID = c.RomoocID,
                            VendorID = c.CustomerID,
                            RomoocID = c.RomoocID,
                            RomoocNo = c.CAT_Romooc.RegNo,
                            MaxWeight = c.CAT_Romooc.MaxWeight
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOOPSCO_VEN_Vehicle>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_VEN_Change_Time(int mID, DateTime ETD, DateTime ETA)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var error = HelperTOMaster.OPSCO_VendorChangeScheduleTime(model, Account, mID, ETD, ETA);
                    if (error != HelperTOMaster_Error.None)
                        throw FaultHelper.BusinessFault(null, null, error.ToString());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_VEN_Change_Vehicle(int mID, int vehID, int romID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        if (vehID > 0)
                        {
                            var error = HelperTOMaster.OPSCO_ChangeScheduleVehicle(model, Account, mID, vehID, obj.VendorOfVehicleID);
                            if (error != HelperTOMaster_Error.None)
                                throw FaultHelper.BusinessFault(null, null, error.ToString());
                        }
                        else if (romID > 0)
                        {
                            var error = HelperTOMaster.OPSCO_ChangeScheduleRomooc(model, Account, mID, romID);
                            if (error != HelperTOMaster_Error.None)
                                throw FaultHelper.BusinessFault(null, null, error.ToString());
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_VEN_Change_Driver(int mID, string name, string tel)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == mID);
                    if (obj != null)
                    {
                        if (!string.IsNullOrEmpty(name))
                        {
                            obj.DriverID1 = OPS_FindFLMDriver(model, name);
                            obj.DriverName1 = name;
                            obj.DriverTel1 = tel;
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            model.SaveChanges();
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Nhập tài xế!");
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void OPSCO_VEN_Vehicle_New(int vendorID, string regNo, double? maxWeight, int typeOfVehicle)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (typeOfVehicle == 1)
                    {
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo.Trim().ToLower() == regNo.Trim().ToLower());
                        if (obj != null)
                        {
                            if (obj.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTractor)
                                throw FaultHelper.BusinessFault(null, null, "Xe đã tồn tại.");
                            var objCus = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == obj.ID && c.CustomerID == vendorID);
                            if (objCus != null)
                                throw FaultHelper.BusinessFault(null, null, "Xe đã tồn tại.");

                            objCus = new CUS_Vehicle();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.VehicleID = obj.ID;

                            model.CUS_Vehicle.Add(objCus);
                            model.SaveChanges();
                        }
                        else
                        {
                            obj = new CAT_Vehicle();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.RegNo = regNo;
                            obj.TypeOfVehicleID = -(int)SYSVarType.TypeOfVehicleTractor;
                            obj.IsOwn = false;
                            obj.MaxWeight = maxWeight;
                            model.CAT_Vehicle.Add(obj);

                            var objCus = new CUS_Vehicle();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.CAT_Vehicle = obj;

                            model.CUS_Vehicle.Add(objCus);
                            model.SaveChanges();
                        }
                    }
                    else
                    {
                        var obj = model.CAT_Romooc.FirstOrDefault(c => c.RegNo.Trim().ToLower() == regNo.Trim().ToLower());
                        if (obj != null)
                        {
                            var objCus = model.CUS_Romooc.FirstOrDefault(c => c.RomoocID == obj.ID && c.CustomerID == vendorID);
                            if (objCus != null)
                                throw FaultHelper.BusinessFault(null, null, "Romooc đã tồn tại.");

                            objCus = new CUS_Romooc();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.RomoocID = obj.ID;

                            model.CUS_Romooc.Add(objCus);
                            model.SaveChanges();
                        }
                        else
                        {
                            obj = new CAT_Romooc();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.RegNo = regNo;
                            obj.IsOwn = false;
                            obj.MaxWeight = maxWeight;
                            model.CAT_Romooc.Add(obj);

                            var objCus = new CUS_Romooc();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.CAT_Romooc = obj;

                            model.CUS_Romooc.Add(objCus);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region NewDI - Vendor
        public DTOResult OPSDI_VEN_DITOGroupProduct_List(string request, int typeOfView)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var dataRate = model.OPS_DITORate.Where(c => c.FirstRateTime != null && c.VendorID.HasValue && Account.ListCustomerID.Contains(c.VendorID.Value)).Select(c => new
                    {
                        c.DITOMasterID,
                        c.IsAccept,
                        c.Reason,
                        c.ReasonID,
                        VendorID = c.VendorID.HasValue && c.VendorID != Account.SYSCustomerID ? c.VendorID.Value : Account.SYSCustomerID,
                        VendorCode = c.VendorID.HasValue && c.VendorID != Account.SYSCustomerID ? c.CUS_Customer.Code : "Xe nhà",
                        c.CAT_Reason.ReasonName
                    }).ToList();
                    switch (typeOfView)
                    {
                        case 1:
                            dataRate = dataRate.Where(c => c.IsAccept == null).ToList();
                            break;
                        case 2:
                            dataRate = dataRate.Where(c => c.IsAccept == true).ToList();
                            break;
                        case 3:
                            dataRate = dataRate.Where(c => c.IsAccept == false).ToList();
                            break;
                        default:
                            break;
                    }
                    var data = dataRate.Select(c => c.DITOMasterID).ToList();
                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && data.Contains(c.DITOMasterID.Value) && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_VEN_GroupProduct
                        {
                            ID = c.ID,
                            TOMasterID = c.DITOMasterID.Value,
                            TOMasterCode = c.OPS_DITOMaster.Code,
                            TOVehicleID = c.OPS_DITOMaster.VehicleID ?? -1,
                            TOVehicleNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            TOVendorID = c.OPS_DITOMaster.VendorOfVehicleID,
                            TOVendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 && c.OPS_DITOMaster.VendorOfVehicleID != Account.SYSCustomerID ? c.OPS_DITOMaster.CUS_Customer.Code : "Xe nhà",
                            TODriverName = c.OPS_DITOMaster.DriverName1,
                            TODriverTel = c.OPS_DITOMaster.DriverTel1,
                            TOETA = c.OPS_DITOMaster.ETA,
                            TOETD = c.OPS_DITOMaster.ETD,
                            TOCreatedBy = c.OPS_DITOMaster.CreatedBy,
                            TOCreatedDate = c.OPS_DITOMaster.CreatedDate,
                            TOLastUpdate = string.IsNullOrEmpty(c.OPS_DITOMaster.ModifiedBy) ? c.OPS_DITOMaster.CreatedBy : c.OPS_DITOMaster.ModifiedBy,
                            TOLastUpdateTime = c.OPS_DITOMaster.ModifiedDate ?? c.OPS_DITOMaster.CreatedDate,
                            TOStatus = c.OPS_DITOMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : 2,
                            IsFTL = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL : false,

                            OrderCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.Code : string.Empty,
                            CustomerCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code : string.Empty,
                            CustomerShortName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName : string.Empty,
                            DistributorCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty : string.Empty,
                            DistributorName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty : string.Empty,
                            OrderGroupProductID = c.OrderGroupProductID ?? -1,
                            GroupProductCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_GroupOfProduct.Code : string.Empty,
                            GroupProductName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName : string.Empty,
                            ProductCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty : string.Empty,
                            ProductName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault() != null ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName : string.Empty : string.Empty,
                            GroupSort = c.GroupSort,
                            TransportModeName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name : string.Empty,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            ETA = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ETA : null,
                            ETD = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ETD : null,
                            DNCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.DNCode : string.Empty,
                            SOCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.SOCode : string.Empty,
                            TempMax = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.TempMax : null,
                            TempMin = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.TempMin : null,
                            UserDefine1 = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.UserDefine1 : string.Empty,
                            UserDefine2 = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.ORD_Order.UserDefine2 : string.Empty,
                            LocationFromID = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationID : -1,
                            LocationFromCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationFromName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : string.Empty,
                            LocationFromAddress = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location.CAT_Location.Address : string.Empty,
                            LocationToID = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationID : -1,
                            LocationToCode = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.OrderGroupProductID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                        }).ToList();
                    foreach (var item in query)
                    {
                        var o = dataRate.FirstOrDefault(c => c.DITOMasterID == item.TOMasterID);
                        if (o != null)
                        {
                            item.TOVendorID = o.VendorID;
                            item.TOVendorCode = o.VendorCode;
                            item.Reason = o.Reason;
                            item.ReasonName = o.ReasonName ?? string.Empty;
                            item.ReasonID = o.ReasonID > 0 ? o.ReasonID.Value : -1;
                        }
                    }
                    var tmp = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = tmp.Total;
                    result.Data = tmp.Data as IEnumerable<DTOOPSDI_VEN_GroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion
    }
}