using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Kendo.Mvc.Extensions;
using Data;
using DTO;
using System.ServiceModel;
using System.Data.Entity;
using Kendo.Mvc.UI;
using OfficeOpenXml;

namespace Business
{
    public class BLCustomer : Base, IBase
    {
        const int DefaultCountry = 1;

        #region Common

        public DTOResult Customer_AllList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName
                    }).ToList();

                    //var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).Select(c => new DTOCustomer
                    //{
                    //    ID = c.ID,
                    //    Code = c.Code,
                    //    CustomerName = c.ShortName
                    //}).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Customer

        public DTOResult Customer_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = c.CAT_Ward.WardName,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        TelNo = c.TelNo,
                        Fax = c.Fax,
                        Email = c.Email,
                        BillingName = c.BillingName,
                        BillingAddress = c.BillingAddress,
                        TaxCode = c.TaxCode,
                        Note = c.Note,
                        BiddingID = c.BiddingID,
                        TypeOfCustomerID = c.TypeOfCustomerID,
                        ParentID = c.ParentID,
                        IsFinance = c.IsFinance,
                        TypeBusiness = c.TypeBusiness,
                        Scale = c.Scale,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        IsApproved = c.IsApproved,
                        Field = c.Field,
                        BiddingCode = c.BiddingCode,
                        Image = c.Image,
                        IsSystem = c.IsSystem,
                        IsFindEconomicZone = c.IsFindEconomicZone,
                        IsCreateLocation = c.IsCreateLocation,
                        IsCreatePartner = c.IsCreatePartner,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSCustomer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSCustomer_ApprovedList(List<int> lst)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ActApproved = SYSActionCode.ActApproved.ToString();
                    if (Account.ListActionCode.Contains(ActApproved))
                    {
                        model.EventAccount = Account; model.EventRunning = false;
                        foreach (var id in lst)
                        {
                            var obj = model.CUS_Customer.FirstOrDefault(c => c.ID == id);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.IsApproved = true;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSCustomer_UnApprovedList(List<int> lst)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ActApproved = SYSActionCode.ActApproved.ToString();
                    if (Account.ListActionCode.Contains(ActApproved))
                    {
                        model.EventAccount = Account; model.EventRunning = false;
                        foreach (var id in lst)
                        {
                            var obj = model.CUS_Customer.FirstOrDefault(c => c.ID == id);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.IsApproved = false;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public CUSCustomer CustomerGetByID(int customerid)
        {
            try
            {
                CUSCustomer result = new CUSCustomer();
                result.IsEditable = true;
                using (var model = new DataEntities())
                {
                    using (var helper = new CopyHelper())
                    {
                        CUS_Customer obj = model.CUS_Customer.Where(c => c.ID == customerid).FirstOrDefault();
                        if (obj != null)
                            helper.Copy(obj, result);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int Customer_Save(CUSCustomer item)
        {
            try
            {
                //var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                //if (!isAllowed)
                //    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.Code == null || item.Code == string.Empty)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Mã không được trống");
                    }
                    else if (item.CustomerName == null || item.CustomerName == string.Empty)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    }
                    else if (item.ShortName == null || item.ShortName == string.Empty)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Tên ngắn không được trống");
                    }

                    if (item.CountryID == null && item.ProvinceID > 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn quốc gia trước khi chọn tỉnh thành");
                    if (item.ProvinceID == null && item.DistrictID > 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn tỉnh thành trước khi chọn quận huyện");

                    var lstDistrictID = model.CAT_District.Where(c => c.ProvinceID == item.ProvinceID).Select(c => c.ID).Distinct().ToList();
                    if (item.DistrictID > 0 && !lstDistrictID.Contains(item.DistrictID.Value))
                        throw FaultHelper.BusinessFault(null, null, "Quận huyện ko thuộc tỉnh thành đã chọn");

                    if (model.CUS_Customer.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");

                    using (var helper = new CopyHelper())
                    {
                        int iTypeOfCustomerCUS = -(int)SYSVarType.TypeOfCustomerCUS;

                        ///Lưu thông tin khách hàng
                        var obj = model.CUS_Customer.Where(c => c.ID == item.ID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CUS_Customer();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.TypeOfCustomerID = iTypeOfCustomerCUS;
                            model.CUS_Customer.Add(obj);

                            #region Lưu CUSCompany
                            var cusCom = new CUS_Company();
                            cusCom.CreatedBy = Account.UserName;
                            cusCom.CreatedDate = DateTime.Now;
                            cusCom.CUS_Customer = obj;
                            cusCom.CUS_Customer1 = obj;
                            model.CUS_Company.Add(cusCom);
                            #endregion
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Code = item.Code;
                        obj.CustomerName = item.CustomerName;
                        obj.ShortName = item.ShortName;
                        obj.Address = !string.IsNullOrEmpty(item.Address) ? item.Address : string.Empty;
                        obj.WardID = item.WardID;
                        obj.DistrictID = item.DistrictID > 0 ? item.DistrictID : null;
                        obj.ProvinceID = item.ProvinceID > 0 ? item.ProvinceID : null;
                        obj.CountryID = item.CountryID > 0 ? item.CountryID : null;
                        obj.TelNo = item.TelNo;
                        obj.Fax = item.Fax;
                        obj.Email = item.Email;
                        obj.BillingName = item.BillingName;
                        obj.BillingAddress = item.BillingAddress;
                        obj.TaxCode = item.TaxCode;
                        obj.Note = item.Note;
                        obj.BiddingID = item.BiddingID;
                        obj.ParentID = item.ParentID;
                        obj.IsFinance = item.IsFinance;
                        obj.TypeBusiness = item.TypeBusiness;
                        obj.Scale = item.Scale;
                        obj.Note1 = item.Note1;
                        obj.Note2 = item.Note2;
                        obj.IsFindEconomicZone = item.IsFindEconomicZone;
                        obj.IsCreatePartner = item.IsCreatePartner;
                        obj.IsCreateLocation = item.IsCreateLocation;
                        string ActApproved = SYSActionCode.ActApproved.ToString();
                        string ActAddAndApproved = SYSActionCode.ActAddAndApproved.ToString();
                        if (Account.ListActionCode.Contains(ActApproved) || Account.ListActionCode.Contains(ActAddAndApproved))
                            obj.IsApproved = item.IsApproved;

                        obj.Field = item.Field;
                        if (obj.ID < 1)
                        {
                            obj.ParentID = item.ParentID;
                            if (item.ParentID == null)
                                obj.IsFinance = true;
                        }
                        else
                        {
                            // Kiểm tra có được thiết lập các thông tin # hay chưa -> nếu có ko cho thay đổi parent
                            if (item.ParentID != obj.ParentID && item.ParentID != null)
                            {
                                if (model.CUS_Contact.Count(c => c.CustomerID == obj.ID) == 0 && model.CUS_GroupOfProduct.Count(c => c.CustomerID == obj.ID) == 0 && model.CUS_Location.Count(c => c.CustomerID == obj.ID) == 0 && model.CUS_Partner.Count(c => c.CustomerID == obj.ID) == 0 && model.CUS_Setting.Count(c => c.CustomerID == obj.ID) == 0 && model.CAT_Contract.Count(c => c.CustomerID == obj.ID) == 0)
                                    obj.ParentID = item.ParentID;
                                else
                                    throw FaultHelper.BusinessFault(null, null, "Khách hàng đã thiết lập dữ liệu, vui lòng không thay đổi");
                            }
                            // Kiểm tra khi thay đổi IsFinance nếu có contract rồi thì ko cho thay đổi
                            if (obj.IsFinance != item.IsFinance)
                            {
                                if (!item.IsFinance && model.CAT_Contract.Count(c => c.CustomerID == obj.ID) > 0)
                                    throw FaultHelper.BusinessFault(null, null, "Khách hàng đã có Hợp đồng, không thể thay đổi");
                                else
                                    obj.IsFinance = true;
                            }
                        }
                        model.SaveChanges();

                        // Tự động add vào ListCustomer khi thêm mới
                        if (item.ID <= 0)
                        {
                            var user = model.SYS_User.FirstOrDefault(c => c.ID == Account.UserID);
                            user.ModifiedBy = Account.UserName;
                            user.ModifiedDate = DateTime.Now;
                            if (!string.IsNullOrEmpty(user.ListCustomerID))
                                user.ListCustomerID += "," + obj.ID;
                            else
                                user.ListCustomerID = obj.ID.ToString();
                            model.SaveChanges();
                            Account.ListCustomerID = user.ListCustomerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(n => Convert.ToInt32(n)).ToArray();
                        }

                        // Thêm mới hãng tàu
                        if (item.IsCarrier && item.ID <= 0)
                        {
                            var lstPartnerLocation = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier).Select(c => new
                            {
                                c.PartnerID,
                                PartnerCode = c.CAT_Partner.Code,
                                c.LocationID,
                                LocationCode = c.PartnerCode,
                                LocationName = c.CAT_Location.Location,
                            }).ToList();
                            foreach (var partnerLocation in lstPartnerLocation.GroupBy(c => new { c.PartnerID, c.PartnerCode }))
                            {
                                CUS_Partner objPart = new CUS_Partner();
                                objPart.CreatedBy = Account.UserName;
                                objPart.CreatedDate = DateTime.Now;
                                objPart.CustomerID = obj.ID;
                                objPart.PartnerID = partnerLocation.Key.PartnerID;
                                objPart.PartnerCode = partnerLocation.Key.PartnerCode;
                                model.CUS_Partner.Add(objPart);

                                foreach (var location in partnerLocation)
                                {
                                    CUS_Location objLocation = new CUS_Location();
                                    objLocation.CreatedBy = Account.UserName;
                                    objLocation.CreatedDate = DateTime.Now;
                                    objLocation.CustomerID = obj.ID;
                                    objLocation.CUS_Partner = objPart;
                                    objLocation.LocationID = location.LocationID;
                                    objLocation.Code = location.LocationCode;
                                    objLocation.LocationName = location.LocationName;
                                    model.CUS_Location.Add(objLocation);
                                }
                            }
                        }

                        // Thêm mới cảng
                        if (item.IsSeaport && item.ID <= 0)
                        {
                            var lstPartnerLocation = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerSeaPort).Select(c => new
                            {
                                c.PartnerID,
                                PartnerCode = c.CAT_Partner.Code,
                                c.LocationID,
                                LocationCode = c.PartnerCode,
                                LocationName = c.CAT_Location.Location,
                            }).ToList();
                            foreach (var partnerLocation in lstPartnerLocation.GroupBy(c => new { c.PartnerID, c.PartnerCode }))
                            {
                                CUS_Partner objPart = new CUS_Partner();
                                objPart.CreatedBy = Account.UserName;
                                objPart.CreatedDate = DateTime.Now;
                                objPart.CustomerID = obj.ID;
                                objPart.PartnerID = partnerLocation.Key.PartnerID;
                                objPart.PartnerCode = partnerLocation.Key.PartnerCode;
                                model.CUS_Partner.Add(objPart);

                                foreach (var location in partnerLocation)
                                {
                                    CUS_Location objLocation = new CUS_Location();
                                    objLocation.CreatedBy = Account.UserName;
                                    objLocation.CreatedDate = DateTime.Now;
                                    objLocation.CustomerID = obj.ID;
                                    objLocation.CUS_Partner = objPart;
                                    objLocation.LocationID = location.LocationID;
                                    objLocation.Code = location.LocationCode;
                                    objLocation.LocationName = location.LocationName;
                                    model.CUS_Location.Add(objLocation);
                                }
                            }
                        }
                        model.SaveChanges();
                        return obj.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Customer_Delete(CUSCustomer item)
        {
            try
            {
                //var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActDel.ToString());
                //if (!isAllowed)
                //    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Customer.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (model.CAT_Contract.Count(c => c.CustomerID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xóa hợp đồng trước!");

                        foreach (var group in model.CUS_GroupOfProduct.Where(c => c.CustomerID == obj.ID))
                        {
                            foreach (var group2 in model.CUS_GroupOfProductInStock.Where(c => c.GroupOfProductID == group.ID))
                            {
                                model.CUS_GroupOfProductInStock.Remove(group2);
                            }
                            foreach (var group2 in model.CUS_GroupOfProduct.Where(c => c.ParentID == group.ID))
                            {
                                foreach (var product in model.CUS_Product.Where(c => c.GroupOfProductID == group2.ID))
                                {
                                    model.CUS_Product.Remove(product);
                                }
                                model.CUS_GroupOfProduct.Remove(group2);
                            }
                            foreach (var product in model.CUS_Product.Where(c => c.GroupOfProductID == group.ID))
                            {
                                model.CUS_Product.Remove(product);
                            }
                            model.CUS_GroupOfProduct.Remove(group);
                        }

                        foreach (var partner in model.CUS_Partner.Where(c => c.CustomerID == obj.ID))
                        {
                            model.CUS_Partner.Remove(partner);
                        }

                        foreach (var location in model.CUS_Location.Where(c => c.CustomerID == obj.ID))
                        {
                            model.CUS_Location.Remove(location);
                        }


                        foreach (var route in model.CUS_Routing.Where(c => c.CustomerID == obj.ID))
                        {
                            model.CUS_Routing.Remove(route);
                        }

                        foreach (var contact in model.CUS_Contact.Where(c => c.CustomerID == obj.ID))
                        {
                            model.CUS_Contact.Remove(contact);
                        }

                        foreach (var cus in model.CUS_Company.Where(c => c.CustomerOwnID == obj.ID))
                            model.CUS_Company.Remove(cus);

                        foreach (var setting in model.CUS_Setting.Where(c => c.CustomerID == obj.ID))
                        {
                            foreach (var packet in model.ORD_Packet.Where(c => c.CUSSettingID == setting.ID))
                            {
                                model.ORD_Packet.Remove(packet);
                            }
                            model.CUS_Setting.Remove(setting);
                        }

                        model.CUS_Customer.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Thiết lập
        public CUSSettingsCutOffTimeSuggest Customer_Setting_Get(int customerid)
        {
            try
            {
                CUSSettingsCutOffTimeSuggest result = new CUSSettingsCutOffTimeSuggest();
                using (var model = new DataEntities())
                {
                    result = HelperCUSSetting.CUSSettingsReport_CutOfTimeSuggest_Get(model, Account, customerid);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Customer_Setting_Save(int customerid, CUSCustomer item, CUSSettingsCutOffTimeSuggest setting)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CUS_Customer.FirstOrDefault(c => c.ID == customerid);
                    if (obj != null)
                    {
                        // Thông tin chính
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.IsFindEconomicZone = item.IsFindEconomicZone;
                        obj.IsFindRoutingAreaCode = item.IsFindRoutingAreaCode;
                        obj.IsCreateLocation = item.IsCreateLocation;
                        obj.IsCreatePartner = item.IsCreatePartner;
                        model.SaveChanges();
                        // Setting
                        HelperCUSSetting.CUSSettingsReport_CutOfTimeSuggest_Save(model, Account, customerid, setting);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Customer_Generate_LocationArea(int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    var customer = model.CUS_Customer.FirstOrDefault(c => c.ID == customerid);
                    if (customer != null && customer.IsFindRoutingAreaCode == true)
                    {
                        var lstLocation = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new { c.LocationID, c.RoutingAreaCode, c.RoutingAreaCodeNoUnicode }).Distinct().ToList();
                        var lstLocationID = lstLocation.Select(c => c.LocationID).Distinct().ToList();
                        // Xóa các điểm này ra khỏi khu vực
                        foreach (var item in model.CAT_RoutingAreaLocation.Where(c => lstLocationID.Contains(c.LocationID)))
                            model.CAT_RoutingAreaLocation.Remove(item);

                        // Add các điểm 
                        var lstCode = lstLocation.Where(c => !string.IsNullOrEmpty(c.RoutingAreaCode)).Select(c => c.RoutingAreaCode).Distinct().ToList();
                        var lstCodeNoUni = lstLocation.Where(c => !string.IsNullOrEmpty(c.RoutingAreaCodeNoUnicode)).Select(c => c.RoutingAreaCodeNoUnicode).Distinct().ToList();
                        var lstArea = model.CAT_RoutingArea.Where(c => lstCode.Contains(c.Code) || lstCodeNoUni.Contains(c.CodeNoUnicode)).Select(c => new { c.ID, c.Code, c.CodeNoUnicode }).Distinct().ToList();
                        foreach (var itemArea in lstArea)
                        {
                            foreach (var itemLocation in lstLocation.Where(c => c.RoutingAreaCode == itemArea.Code || c.RoutingAreaCodeNoUnicode == itemArea.CodeNoUnicode))
                            {
                                CAT_RoutingAreaLocation obj = new CAT_RoutingAreaLocation();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.LocationID = itemLocation.LocationID;
                                obj.RoutingAreaID = itemArea.ID;
                                model.CAT_RoutingAreaLocation.Add(obj);
                            }
                        }

                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Chưa chọn Tìm theo mã khu vực");

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Contact
        public CUSContact Contact_Get(int id)
        {
            try
            {
                CUSContact result = new CUSContact();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Contact.Where(c => c.ID == id).Select(c => new CUSContact
                    {
                        ID = c.ID,
                        LastName = c.LastName,
                        FirstName = c.FirstName,
                        CustomerID = c.CustomerID,
                        PositionName = c.PositionName,
                        DepartmentName = c.DepartmentName,
                        TelNo = c.TelNo,
                        Celphone = c.Celphone,
                        Email = c.Email,
                        Note = c.Note
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult Contact_List(string request, int customerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Contact.Where(c => c.CustomerID == customerid).Select(c => new CUSContact
                    {
                        ID = c.ID,
                        LastName = c.LastName,
                        FirstName = c.FirstName,
                        CustomerID = c.CustomerID,
                        PositionName = c.PositionName,
                        DepartmentName = c.DepartmentName,
                        TelNo = c.TelNo,
                        Celphone = c.Celphone,
                        Email = c.Email,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSContact>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int Contact_Save(CUSContact item, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    ///Lưu liên hệ
                    var obj = model.CUS_Contact.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CUS_Contact();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.CustomerID = customerid;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Celphone = item.Celphone;
                    obj.DepartmentName = item.DepartmentName;
                    obj.PositionName = item.PositionName;
                    obj.Note = item.Note;
                    obj.LastName = item.LastName;
                    obj.Email = item.Email;
                    obj.FirstName = item.FirstName;
                    obj.PositionName = item.PositionName;
                    obj.TelNo = item.TelNo;
                    if (obj.ID < 1)
                        model.CUS_Contact.Add(obj);

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Contact_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Contact.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.CUS_Contact.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region GroupOfProduct
        public DTOCUSGroupOfProduct GroupOfProduct_Get(int id)
        {
            try
            {
                DTOCUSGroupOfProduct result = new DTOCUSGroupOfProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CUS_GroupOfProduct.Where(c => c.ID == id).Select(c => new DTOCUSGroupOfProduct
                        {
                            ID = c.ID,
                            Code = c.Code,
                            BiddingGroupOfProductName = c.CAT_GroupOfProduct.GroupOfProduct,
                            BiddingGroupOfProductID = c.BiddingGroupOfProductID,
                            CustomerID = c.CustomerID,
                            GroupName = c.GroupName,
                            Level = c.Level,
                            ParentID = c.ParentID,
                            ParentName = c.CUS_GroupOfProduct2.GroupName,
                            PriceOfGOPID = c.PriceOfGOPID,
                            PriceOfGOPName = c.SYS_Var.ValueOfVar,
                            HasReturn = c.HasReturn,
                            IsDefault = c.IsDefault,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                        result.PriceOfGOPID = -1;
                        var obj = model.SYS_Var.FirstOrDefault(c => c.TypeOfVar == -(int)SYSVarType.PriceOfGOP);
                        if (obj != null) result.PriceOfGOPID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        /// <summary>
        /// Lấy tất cả danh sách Nhóm sản phẩm
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DTOResult GroupOfProductAll_List(Kendo.Mvc.UI.DataSourceRequest request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        BiddingGroupOfProductName = c.CAT_GroupOfProduct.GroupOfProduct,
                        BiddingGroupOfProductID = c.BiddingGroupOfProductID,
                        CustomerID = c.CustomerID,
                        GroupName = c.GroupName,
                        Level = c.Level,
                        ParentID = c.ParentID,
                        ParentName = c.CUS_GroupOfProduct2.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar,
                        HasReturn = c.HasReturn
                    }).ToDataSourceResult(request);
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lấy danh sách các nhóm sản phẩm của một khách hàng
        /// </summary>
        /// <param name="request">Request</param>
        /// <param name="customerid">ID khách hàng</param>
        /// <returns></returns>
        public DTOResult GroupOfProduct_List(string request, int customerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objrequest = new DataSourceRequest();
                    if (!string.IsNullOrEmpty(request))
                        objrequest = CreateRequest(request);
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        BiddingGroupOfProductName = c.CAT_GroupOfProduct.GroupOfProduct,
                        BiddingGroupOfProductID = c.BiddingGroupOfProductID,
                        CustomerID = c.CustomerID,
                        GroupName = c.GroupName,
                        Level = c.Level,
                        ParentID = c.ParentID,
                        ParentName = c.CUS_GroupOfProduct2.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar,
                        HasReturn = c.HasReturn,
                        IsDefault = c.IsDefault
                    }).ToDataSourceResult(objrequest);
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu thông tin nhóm sản phẩm
        /// </summary>
        /// <param name="item">Nhóm sản phẩm</param>
        /// <param name="customerid">ID Khách hàng</param>
        /// <returns></returns>
        public int GroupOfProduct_Save(DTOCUSGroupOfProduct item, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng Code
                    var objCheck = model.CUS_GroupOfProduct.FirstOrDefault(c => c.CustomerID == customerid && c.Code == item.Code && c.ID != item.ID);
                    if (objCheck != null)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    #endregion

                    var obj = model.CUS_GroupOfProduct.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CUS_GroupOfProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.CustomerID = customerid;
                        #region Kiểm tra parentID
                        if (item.ParentID != null)
                        {
                            // Kiểm tra group parent đã có con chưa? Nếu có ko cho thay đổi
                            //var lstProductOfParent = model.CUS_Product.Where(c => c.GroupOfProductID == item.ParentID);
                            //if (lstProductOfParent != null && lstProductOfParent.Count() > 0)
                            //throw FaultHelper.BusinessFault(null, null, "Có dữ liệu con");
                        }
                        #endregion
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        #region Kiểm tra parentID
                        // Thay đổi parentID
                        if (item.ParentID != obj.ParentID)
                        {
                            // Trở thành group con của group khác
                            if (item.ParentID != null)
                            {
                                // Kiểm tra group parent mới đã có con chưa? Nếu có ko cho thay đổi
                                var lstProductOfParent = model.CUS_Product.Where(c => c.GroupOfProductID == item.ParentID);
                                if (lstProductOfParent != null && lstProductOfParent.Count() > 0)
                                    throw FaultHelper.BusinessFault(null, null, "Có dữ liệu con");
                            }
                        }
                        #endregion
                    }
                    obj.BiddingGroupOfProductID = item.BiddingGroupOfProductID;
                    obj.Code = item.Code;
                    obj.GroupName = item.GroupName;
                    obj.Level = 1;
                    obj.ParentID = item.ParentID;
                    obj.PriceOfGOPID = item.PriceOfGOPID;
                    obj.HasReturn = item.HasReturn;
                    obj.IsDefault = item.IsDefault;
                    if (obj.ID < 1)
                        model.CUS_GroupOfProduct.Add(obj);

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xóa thông tin nhóm sản phẩm
        /// </summary>
        /// <param name="item">Nhóm sản phẩm</param>
        public void GroupOfProduct_Delete(DTOCUSGroupOfProduct item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        foreach (var child in model.CUS_Product.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CUS_Product.Remove(child);
                        }
                        foreach (var child in model.CUS_GroupOfProductInStock.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CUS_GroupOfProductInStock.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceDIGroupProduct.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CAT_PriceDIGroupProduct.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceDIVendor.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CAT_PriceDIVendor.Remove(child);
                        }
                        foreach (var child in model.CAT_ContractGroupOfProduct.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CAT_ContractGroupOfProduct.Remove(child);
                        }
                        foreach (var child in model.CUS_GroupOfProductMapping.Where(c => c.GroupOfProductCUSID == obj.ID))
                        {
                            model.CUS_GroupOfProductMapping.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceDILoadDetail.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CAT_PriceDILoadDetail.Remove(child);
                        }
                        model.CUS_GroupOfProduct.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public CUSGroupOfProduct GroupOfProduct_GetByCode(string Code, int customerid)
        {
            CUSGroupOfProduct result = new CUSGroupOfProduct();
            using (var model = new DataEntities())
            {
                using (var helper = new CopyHelper())
                {
                    CUS_GroupOfProduct obj = model.CUS_GroupOfProduct.FirstOrDefault(c => c.Code == Code && c.CustomerID == customerid);
                    if (obj != null)
                    {
                        helper.Copy(obj, result);
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// Cập nhật lại tất cả nhóm sản phẩm cho PriceTruckLoadingSet và PriceMOQLevelDetail
        /// </summary>
        /// <param name="customerid"></param>
        public void GroupOfProduct_ResetPrice(int customerid)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid && c.CUS_GroupOfProduct1.Count() == 0);

                    #region Kiểm tra xem Nhóm sản phẩm có được thiết lập đơn vị tính hay chưa
                    var objCheck = lstGroupOfProduct.FirstOrDefault(c => c.PriceOfGOPID == null);
                    if (objCheck != null)
                        throw FaultHelper.BusinessFault(null, null, "Nhập thiếu dữ liệu");
                    #endregion

                    if (lstGroupOfProduct != null)
                    {
                        var lstGroupOfProductID = lstGroupOfProduct.Select(c => c.ID).ToList();

                        #region Cập nhật cho PriceTruckLoadingSet
                        var lstPriceTruckLoadingSet = model.CAT_PriceDILoadDetail.Where(c => c.CAT_PriceDILoad.CAT_Price.CAT_ContractTerm.CAT_Contract.CustomerID == customerid);
                        foreach (var detail in lstPriceTruckLoadingSet)
                        {
                            var lstExistID = model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == detail.ID).Select(c => c.GroupOfProductID).ToList();
                            var lstNew = lstGroupOfProductID.Where(c => !lstExistID.Contains(c));
                            foreach (var item in lstNew)
                            {
                                CAT_PriceDILoadDetail objDetail = new CAT_PriceDILoadDetail();
                                objDetail.CreatedBy = Account.UserName;
                                objDetail.CreatedDate = DateTime.Now;
                                objDetail.PriceDILoadID = detail.ID;
                                objDetail.GroupOfProductID = item;
                                objDetail.PriceOfGOPID = lstGroupOfProduct.FirstOrDefault(c => c.ID == item).PriceOfGOPID;
                                model.CAT_PriceDILoadDetail.Add(objDetail);
                            }
                        }
                        #endregion

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Product

        public DTOCUSProduct Product_Get(int id)
        {
            try
            {
                DTOCUSProduct result = new DTOCUSProduct();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Product.Where(c => c.ID == id).Select(c => new DTOCUSProduct
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        Code = c.Code,
                        ProductName = c.ProductName,
                        Description = c.Description,
                        PackingID = c.PackingID,
                        Length = c.Length * 100, // chuyển sang cm
                        Height = c.Height * 100, // chuyển sang cm
                        Width = c.Width * 100, // chuyển sang cm
                        CBM = c.CBM * 1000000, // chuyển sang cm3
                        Weight = c.Weight * 1000, // chuyển sang kg
                        PackingName = c.CAT_Packing.PackingName,
                        IsKg = c.IsKg,
                        IsDefault = c.IsDefault,
                        SortOrder = c.SortOrder,
                        TempMax = c.TempMax,
                        TempMin = c.TempMin
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        /// <summary>
        /// Lấy danh sách sản phẩm theo Nhóm sản phẩm
        /// </summary>
        /// <param name="request">Request</param>
        /// <param name="groupofprodutid">ID Nhóm sản phẩm</param>
        /// <returns></returns>
        public DTOResult Product_List(string request, int groupofprodutid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Product.Where(c => c.GroupOfProductID == groupofprodutid).Select(c => new DTOCUSProduct
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        Code = c.Code,
                        ProductName = c.ProductName,
                        Description = c.Description,
                        PackingID = c.PackingID,
                        Length = c.Length * 100, // chuyển sang cm
                        Height = c.Height * 100, // chuyển sang cm
                        Width = c.Width * 100, // chuyển sang cm
                        CBM = c.CBM * 1000000, // chuyển sang cm3
                        Weight = c.Weight * 1000, // chuyển sang kg
                        PackingName = c.CAT_Packing.PackingName,
                        PackingCode = c.CAT_Packing.Code,
                        IsKg = c.IsKg,
                        IsDefault = c.IsDefault,
                        SortOrder = c.SortOrder,
                        TempMax = c.TempMax,
                        TempMin = c.TempMin
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu thông tin sản phẩm
        /// </summary>
        /// <param name="item">Sản phẩm</param>
        /// <param name="groupofprodutid">ID Nhóm sản phẩm</param>
        /// <returns></returns>
        public int Product_Save(DTOCUSProduct item, int groupofprodutid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng Code
                    var objCheck = model.CUS_Product.FirstOrDefault(c => c.GroupOfProductID == groupofprodutid && c.Code == item.Code && c.ID != item.ID);
                    if (objCheck != null)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    #endregion

                    var obj = model.CUS_Product.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CUS_Product();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.GroupOfProductID = groupofprodutid;
                        model.CUS_Product.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.CBM = item.CBM > 0 ? item.CBM / 1000000 : 0;
                    obj.Code = item.Code;
                    obj.Description = !string.IsNullOrEmpty(item.Description) ? item.Description : string.Empty;
                    obj.Height = item.Height > 0 ? Math.Round((double)item.Height / 100, 4, MidpointRounding.AwayFromZero) : 0;
                    obj.Length = item.Length > 0 ? Math.Round((double)item.Length / 100, 4, MidpointRounding.AwayFromZero) : 0;
                    obj.PackingID = item.PackingID;
                    obj.ProductName = item.ProductName;
                    obj.Weight = item.Weight > 0 ? Math.Round((double)item.Weight / 1000, 4, MidpointRounding.AwayFromZero) : 0;
                    obj.Width = item.Width > 0 ? Math.Round((double)item.Width / 100, 4, MidpointRounding.AwayFromZero) : 0;
                    obj.IsKg = item.IsKg;
                    obj.IsDefault = item.IsDefault;
                    obj.TempMax = item.TempMax;
                    obj.TempMin = item.TempMin;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xóa sản phẩm
        /// </summary>
        /// <param name="item">Sản phẩm</param>
        public void Product_Delete(DTOCUSProduct item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Product.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CUS_Product.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCUSProduct_Export> CUS_Product_Export(int customerID)
        {
            try
            {
                List<DTOCUSProduct_Export> result = new List<DTOCUSProduct_Export>();
                using (var model = new DataEntities())
                {
                    List<int> lst = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerID).Select(c => c.ID).ToList();
                    foreach (var id in lst)
                    {
                        var range = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.ID == id).Select(c => new DTOCUSProduct_Export
                        {
                            ID = c.ID,
                            GroupOfProductID = c.GroupOfProductID,
                            GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                            Code = c.Code,
                            ProductName = c.ProductName,
                            Description = c.Description,
                            PackingID = c.PackingID,
                            PackingCode = c.CAT_Packing.Code,
                            Length = c.Length * 100, // chuyển sang cm
                            Height = c.Height * 100, // chuyển sang cm
                            Width = c.Width * 100, // chuyển sang cm
                            CBM = c.CBM * 1000000, // chuyển sang cm3
                            Weight = c.Weight * 1000, // chuyển sang kg
                            PackingName = c.CAT_Packing.PackingName,
                            IsKg = c.IsKg,
                            PriceOfGOPID = c.CUS_GroupOfProduct.PriceOfGOPID,
                            PriceOfGOPName = c.CUS_GroupOfProduct.SYS_Var.ValueOfVar,
                            HasReturn = c.CUS_GroupOfProduct.HasReturn,
                            TempMax = c.TempMax,
                            TempMin = c.TempMin
                        }).ToList();
                        if (range.Count > 0)
                        {
                            result.AddRange(range);
                        }
                        else
                        {
                            var o = model.CUS_GroupOfProduct.Where(c => c.ID == id).Select(c => new DTOCUSProduct_Export
                            {
                                GroupOfProductID = c.ID,
                                GroupOfProductCode = c.Code,
                                GroupOfProductName = c.GroupName,
                                PriceOfGOPID = c.PriceOfGOPID,
                                PriceOfGOPName = c.SYS_Var.ValueOfVar,
                                PackingCode = string.Empty,
                                HasReturn = c.HasReturn
                            }).FirstOrDefault();
                            o.PackingCode = ConvertPriceOfGOPToPakingCode(o.PriceOfGOPID);
                            result.Add(o);
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private string ConvertPriceOfGOPToPakingCode(int? priceofGOP)
        {
            if (!priceofGOP.HasValue)
                return string.Empty;
            using (var model = new DataEntities())
            {
                switch (priceofGOP)
                {
                    case -(int)SYSVarType.PriceOfGOPTon:
                        return model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon).Code;
                    case -(int)SYSVarType.PriceOfGOPCBM:
                        return model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM).Code;
                    default:
                        return model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU).Code;
                }
            }

        }

        public DTOCUSProduct_Data CUS_Product_Check(int customerID)
        {
            try
            {
                DTOCUSProduct_Data result = new DTOCUSProduct_Data();
                using (var model = new DataEntities())
                {
                    result.lstGOP = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerID).Select(c => new CUSGroupOfProduct
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName,
                        }).ToList();

                    result.lstProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == customerID).Select(c => new DTOCUSProduct
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                        Code = c.Code,
                        ProductName = c.ProductName,
                        Description = c.Description,
                        PackingID = c.PackingID,
                        Length = c.Length * 100, // chuyển sang cm
                        Height = c.Height * 100, // chuyển sang cm
                        Width = c.Width * 100, // chuyển sang cm
                        CBM = c.CBM * 1000000, // chuyển sang cm3
                        Weight = c.Weight * 1000, // chuyển sang kg
                        PackingName = c.CAT_Packing.PackingName,
                        IsKg = c.IsKg,
                        TempMax = c.TempMax,
                        TempMin = c.TempMin
                    }).ToList();

                    result.lstPriceOfGOP = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.PriceOfGOP).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                        TypeOfVar = c.TypeOfVar
                    }).ToList();

                    result.lstPackingGOP = model.CAT_Packing.Where(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = 0,
                        Code = c.Code,
                        ValueOfVar = c.PackingName,
                        TypeOfVar = c.TypeOfPackageID
                    }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUS_Product_Import(List<DTOCUSGroupProduct_Import> data, int customerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var group in data)
                    {
                        var objGroup = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == group.ID);
                        if (objGroup == null)
                        {
                            objGroup = new CUS_GroupOfProduct();
                            objGroup.CreatedBy = Account.UserName;
                            objGroup.CreatedDate = DateTime.Now;
                            objGroup.CustomerID = customerID;
                            objGroup.PriceOfGOPID = group.PriceOfGOPID;
                            objGroup.IsDefault = false;
                            model.CUS_GroupOfProduct.Add(objGroup);
                        }
                        else
                        {
                            objGroup.ModifiedBy = Account.UserName;
                            objGroup.ModifiedDate = DateTime.Now;
                        }
                        objGroup.GroupName = group.Name;
                        objGroup.Code = group.Code;
                        objGroup.Level = 1;
                        objGroup.HasReturn = group.HasReturn;

                        foreach (var pro in group.ListProduct.Where(c => c.ExcelSuccess))
                        {
                            var objProduct = model.CUS_Product.FirstOrDefault(c => c.ID == pro.ID);
                            if (objProduct == null)
                            {
                                objProduct = new CUS_Product();
                                objProduct.CreatedBy = Account.UserName;
                                objProduct.CreatedDate = DateTime.Now;
                                objProduct.IsDefault = false;
                                objProduct.CUS_GroupOfProduct = objGroup;
                                model.CUS_Product.Add(objProduct);
                            }
                            else
                            {
                                objProduct.ModifiedBy = Account.UserName;
                                objProduct.ModifiedDate = DateTime.Now;
                            }
                            objProduct.Code = pro.Code;
                            objProduct.ProductName = pro.ProductName;
                            objProduct.Length = pro.Length > 0 ? pro.Length / 100 : 0;
                            objProduct.CBM = pro.CBM > 0 ? pro.CBM / 1000000 : 0;
                            objProduct.Width = pro.Width > 0 ? pro.Width / 100 : 0;
                            objProduct.Height = pro.Height > 0 ? pro.Height / 100 : 0;
                            objProduct.IsKg = pro.IsKg;
                            if (objProduct.IsKg)
                            {
                                objProduct.Weight = pro.Weight > 0 ? pro.Weight / 1000 : 0;
                            }
                            else
                            {
                                objProduct.Weight = pro.Weight > 0 ? pro.Weight : 0;
                            }
                            objProduct.PackingID = pro.PackingID;
                            objProduct.Description = string.IsNullOrEmpty(pro.Description) ? string.Empty : pro.Description;
                            objProduct.TempMin = pro.TempMin;
                            objProduct.TempMax = pro.TempMax;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUS_Product_ExcelInit(int functionid, string functionkey, bool isreload, int customerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        #region lấy dữ liệu
                        var lstGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerID && c.CUS_Product.Count > 0).Select(c => new
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName,
                            PriceOfGOPName = c.SYS_Var.ValueOfVar,
                            HasReturn = c.HasReturn
                        }).ToList();
                        var lstGroupProductID = lstGroupProduct.Select(c => c.ID).ToList();
                        var lstProduct = model.CUS_Product.Where(c => lstGroupProductID.Contains(c.GroupOfProductID)).Select(c => new
                            {
                                ID = c.ID,
                                GroupOfProductID = c.GroupOfProductID,
                                Code = c.Code,
                                ProductName = c.ProductName,
                                Description = c.Description,
                                PackingCode = c.CAT_Packing.Code,
                                Length = c.Length * 100, // chuyển sang cm
                                Height = c.Height * 100, // chuyển sang cm
                                Width = c.Width * 100, // chuyển sang cm
                                CBM = c.CBM * 1000000, // chuyển sang cm3
                                Weight = c.Weight * 1000, // chuyển sang kg
                                IsKg = c.IsKg,
                                TempMax = c.TempMax,
                                TempMin = c.TempMin
                            }).ToList();
                        #endregion

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        List<double> lstColumWidth = new List<double>();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã nhóm hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên nhóm hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tính giá theo", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "UOM", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Chiều dài", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Rộng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Cao", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Thể tích(cm3)", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Cân nặng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "isKG ?", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Hàng trả về", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mô tả", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Nhiệt độ tối thiểu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Nhiệt độ tối đa", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        int stt = 1;
                        foreach (var itemGroup in lstGroupProduct)
                        {
                            //cells = new List<Cell>();
                            //col = 0;
                            //cells.Add(HelperExcel.NewCell(col++, stt));
                            //cells.Add(HelperExcel.NewCell(col++, itemGroup.Code, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, itemGroup.GroupName, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, itemGroup.PriceOfGOPName, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, itemGroup.HasReturn, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            //cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));

                            //ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            //stt++;

                            foreach (var itemProduct in lstProduct.Where(c => c.GroupOfProductID == itemGroup.ID))
                            {
                                cells = new List<Cell>();
                                col = 0;
                                cells.Add(HelperExcel.NewCell(col++, stt));
                                cells.Add(HelperExcel.NewCell(col++, itemGroup.Code, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemGroup.GroupName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemGroup.PriceOfGOPName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemProduct.Code, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemProduct.ProductName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemProduct.PackingCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemProduct.Length > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemProduct.Length.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemProduct.Width > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemProduct.Width.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemProduct.Height > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemProduct.Height.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemProduct.CBM > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemProduct.CBM.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemProduct.Weight > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemProduct.Weight.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemProduct.IsKg == true ? "x" : "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));

                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                                stt++;
                            }
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CUS_Product_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError, int customerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 24;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colGroupProductID = colData++;
                    int colProductID = colData++;
                    int colPriceOfGOPID = colData++;
                    int colPackingID = colData++;

                    int failCurrent = 0;
                    int failMax = 2;

                    int isGOPTon = -(int)SYSVarType.TypeOfPackingGOPTon;
                    int isGOPCBM = -(int)SYSVarType.TypeOfPackingGOPCBM;
                    int isGOPTU = -(int)SYSVarType.TypeOfPackingGOPTU;

                    var lstGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerID).Select(c => new { ID = c.ID, Code = c.Code }).ToList();
                    var lstGroupProductID = lstGroupProduct.Select(c => c.ID).ToList();
                    var lstProduct = model.CUS_Product.Where(c => lstGroupProductID.Contains(c.GroupOfProductID)).Select(c => new { ID = c.ID, GroupOfProductID = c.GroupOfProductID, Code = c.Code }).ToList();

                    var lstPacking = model.CAT_Packing.Where(c => c.TypeOfPackageID == isGOPTU || c.TypeOfPackageID == isGOPCBM || c.TypeOfPackageID == isGOPTon).Select(c => new { c.ID, c.Code, c.TypeOfPackageID }).ToList();

                    var lstPriceOfGOP = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.PriceOfGOP).Select(c => new { c.ID, c.ValueOfVar }).ToList();



                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);

                    int GOPID = -1;

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    int colGOP = 1;
                    int colPro = 4;
                    Dictionary<string, List<string>> dictGOP_Pro = new Dictionary<string, List<string>>();
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            string strGOPCode = HelperExcel.GetString(eRow, colGOP);
                            string strProCode = HelperExcel.GetString(eRow, colPro);

                            if (!string.IsNullOrEmpty(strGOPCode))
                            {
                                if (!dictGOP_Pro.ContainsKey(strGOPCode))
                                {
                                    dictGOP_Pro.Add(strGOPCode, new List<string>());
                                }
                                if (!string.IsNullOrEmpty(strProCode))
                                    dictGOP_Pro[strGOPCode].Add(strProCode);
                            }
                            else if (failCurrent >= failMax)
                            {
                                break;
                            }
                            else failCurrent++;

                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupName = HelperExcel.GetString(checkRow, colData++);
                        string dataPriceOfGOP = HelperExcel.GetString(checkRow, colData++);
                        string dataProCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProName = HelperExcel.GetString(checkRow, colData++);
                        string dataUOM = HelperExcel.GetString(checkRow, colData++);
                        string dataLength = HelperExcel.GetString(checkRow, colData++);
                        string dataWidth = HelperExcel.GetString(checkRow, colData++);
                        string dataHigh = HelperExcel.GetString(checkRow, colData++);
                        string dataCBM = HelperExcel.GetString(checkRow, colData++);
                        string dataWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataIsKg = HelperExcel.GetString(checkRow, colData++);
                        string dataIsReturn = HelperExcel.GetString(checkRow, colData++);
                        string dataDescription = HelperExcel.GetString(checkRow, colData++);
                        string dataTempMin = HelperExcel.GetString(checkRow, colData++);
                        string dataTempMax = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        GOPID = -1;
                        int priceOfGOPID = -1;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            GOPID = -1;
                            var check = lstGroupProduct.FirstOrDefault(c => c.Code == dataGroupCode);
                            if (check != null) GOPID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupProductID, GOPID.ToString());
                            if (!dictGOP_Pro.ContainsKey(dataGroupCode))
                            {
                                dictGOP_Pro.Add(dataGroupCode, new List<string>());
                            }
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataPriceOfGOP, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstPriceOfGOP.Count(c => c.ValueOfVar.ToLower() == dataPriceOfGOP.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            priceOfGOPID = -1;
                            var check = lstPriceOfGOP.FirstOrDefault(c => c.ValueOfVar.ToLower() == dataPriceOfGOP.ToLower());
                            if (check != null) priceOfGOPID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPriceOfGOPID, priceOfGOPID.ToString());
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataProCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && dictGOP_Pro[dataGroupCode].Count(c => c == dataProCode) > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var check = lstProduct.Where(c => c.GroupOfProductID == GOPID && c.Code == dataProCode).FirstOrDefault();
                            if (check != null) valid = check.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colProductID, valid);
                            dictGOP_Pro[dataGroupCode].Add(dataProCode);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataProName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataUOM, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;//uom ko cinh xac
                        if (flag && lstPacking.Count(c => c.Code.ToLower() == dataUOM.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            var valid = "-1";
                            var check = lstPacking.FirstOrDefault(c => c.Code.ToLower() == dataUOM.ToLower());
                            if (check != null)
                                valid = check.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPackingID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLength, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWidth, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataHigh, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCBM, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataWeight, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDescription, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 3000);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTempMin, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTempMax, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);


                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUS_Product_ExcelImport(long id, List<Row> lst, List<string> lstMessageError, int customerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 24;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colGroupProductID = colData++;
                    int colProductID = colData++;
                    int colPriceOfGOPID = colData++;
                    int colPackingID = colData++;

                    int failCurrent = 0;
                    int failMax = 2;
                    int rowEnd = lst.Count;

                    int isGOPTon = -(int)SYSVarType.TypeOfPackingGOPTon;
                    int isGOPCBM = -(int)SYSVarType.TypeOfPackingGOPCBM;
                    int isGOPTU = -(int)SYSVarType.TypeOfPackingGOPTU;

                    var lstGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerID).Select(c => new { ID = c.ID, Code = c.Code }).ToList();
                    var lstGroupProductID = lstGroupProduct.Select(c => c.ID).ToList();
                    var lstProduct = model.CUS_Product.Where(c => lstGroupProductID.Contains(c.GroupOfProductID)).Select(c => new { ID = c.ID, GroupOfProductID = c.GroupOfProductID, Code = c.Code }).ToList();

                    var lstPacking = model.CAT_Packing.Where(c => c.TypeOfPackageID == isGOPTU || c.TypeOfPackageID == isGOPCBM || c.TypeOfPackageID == isGOPTon).Select(c => new { c.ID, c.Code, c.TypeOfPackageID }).ToList();

                    var lstPriceOfGOP = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.PriceOfGOP).Select(c => new { c.ID, c.ValueOfVar }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    int colGOP = 1;
                    int colPro = 4;

                    Dictionary<string, List<string>> dictGOP_Pro = new Dictionary<string, List<string>>();
                    foreach (var checkRow in ws.Rows)
                    {
                        if (checkRow.Index >= rowStart)
                        {
                            string strGOPCode = HelperExcel.GetString(checkRow, colGOP);
                            string strProCode = HelperExcel.GetString(checkRow, colPro);

                            if (!string.IsNullOrEmpty(strGOPCode))
                            {
                                if (!dictGOP_Pro.ContainsKey(strGOPCode))
                                    dictGOP_Pro.Add(strGOPCode, new List<string>());
                                if (!string.IsNullOrEmpty(strProCode))
                                    dictGOP_Pro[strGOPCode].Add(strProCode);
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = checkRow.Index.Value;
                                break;
                            }
                            else failCurrent++;

                        }
                    }
                    int GOPID = -1;

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index >= rowEnd) break;
                        if (checkRow.Index >= rowStart)
                        {
                            colData = 1;
                            string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupName = HelperExcel.GetString(checkRow, colData++);
                            string dataPriceOfGOP = HelperExcel.GetString(checkRow, colData++);
                            string dataProCode = HelperExcel.GetString(checkRow, colData++);
                            string dataProName = HelperExcel.GetString(checkRow, colData++);
                            string dataUOM = HelperExcel.GetString(checkRow, colData++);
                            string dataLength = HelperExcel.GetString(checkRow, colData++);
                            string dataWidth = HelperExcel.GetString(checkRow, colData++);
                            string dataHigh = HelperExcel.GetString(checkRow, colData++);
                            string dataCBM = HelperExcel.GetString(checkRow, colData++);
                            string dataWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataIsKg = HelperExcel.GetString(checkRow, colData++);
                            string dataIsReturn = HelperExcel.GetString(checkRow, colData++);
                            string dataDescription = HelperExcel.GetString(checkRow, colData++);
                            string dataTempMin = HelperExcel.GetString(checkRow, colData++);
                            string dataTempMax = HelperExcel.GetString(checkRow, colData++);

                            bool flag = true;
                            int indexError = 0;
                            GOPID = -1;
                            int priceOfGOPID = -1;
                            if (flag)
                                flag = HelperExcel.Valid(dataGroupCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                            if (flag)
                            {
                                GOPID = -1;
                                var check = lstGroupProduct.FirstOrDefault(c => c.Code == dataGroupCode);
                                if (check != null) GOPID = check.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupProductID, GOPID.ToString());
                                if (!dictGOP_Pro.ContainsKey(dataGroupCode))
                                {
                                    dictGOP_Pro.Add(dataGroupCode, new List<string>());
                                }
                            }
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataGroupName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataPriceOfGOP, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                            indexError++;
                            if (flag && lstPriceOfGOP.Count(c => c.ValueOfVar.ToLower() == dataPriceOfGOP.ToLower()) == 0)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                            if (flag)
                            {
                                priceOfGOPID = -1;
                                var check = lstPriceOfGOP.FirstOrDefault(c => c.ValueOfVar.ToLower() == dataPriceOfGOP.ToLower());
                                if (check != null) priceOfGOPID = check.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPriceOfGOPID, priceOfGOPID.ToString());
                            }
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataProCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                            indexError++;
                            if (flag && dictGOP_Pro[dataGroupCode].Count(c => c == dataProCode) > 1)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                            if (flag)
                            {
                                var valid = "-1";
                                var check = lstProduct.Where(c => c.GroupOfProductID == GOPID && c.Code == dataProCode).FirstOrDefault();
                                if (check != null) valid = check.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colProductID, valid);
                                dictGOP_Pro[dataGroupCode].Add(dataProCode);
                            }
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataProName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataUOM, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                            indexError++;//uom ko cinh xac
                            if (flag && lstPacking.Count(c => c.Code.ToLower() == dataUOM.ToLower()) == 0)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                            if (flag)
                            {
                                var valid = "-1";
                                var check = lstPacking.FirstOrDefault(c => c.Code.ToLower() == dataUOM.ToLower());
                                if (check != null)
                                    valid = check.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPackingID, valid);
                            }
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataLength, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataWidth, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataHigh, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataCBM, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataWeight, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 0, 0);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataDescription, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 3000);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataTempMin, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataTempMax, HelperExcel.ValidType.Decimal, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);

                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CUS_Product_ExcelApprove(long id, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 24;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colGroupProductID = colData++;
                    int colProductID = colData++;
                    int colPriceOfGOPID = colData++;
                    int colPackingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        List<CUS_GroupOfProduct> lstGroupProduct = new List<CUS_GroupOfProduct>();
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupName = HelperExcel.GetString(checkRow, colData++);
                            string dataPriceOfGOP = HelperExcel.GetString(checkRow, colData++);
                            string dataProCode = HelperExcel.GetString(checkRow, colData++);
                            string dataProName = HelperExcel.GetString(checkRow, colData++);
                            string dataUOM = HelperExcel.GetString(checkRow, colData++);
                            string dataLength = HelperExcel.GetString(checkRow, colData++);
                            string dataWidth = HelperExcel.GetString(checkRow, colData++);
                            string dataHigh = HelperExcel.GetString(checkRow, colData++);
                            string dataCBM = HelperExcel.GetString(checkRow, colData++);
                            string dataWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataIsKg = HelperExcel.GetString(checkRow, colData++);
                            string dataIsReturn = HelperExcel.GetString(checkRow, colData++);
                            string dataDescription = HelperExcel.GetString(checkRow, colData++);
                            string dataTempMin = HelperExcel.GetString(checkRow, colData++);
                            string dataTempMax = HelperExcel.GetString(checkRow, colData++);

                            int groupProductID = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupProductID));
                            int priceOfGOPID = Convert.ToInt32(HelperExcel.GetString(checkRow, colPriceOfGOPID));
                            int? productID = Convert.ToInt32(HelperExcel.GetString(checkRow, colProductID));
                            int? packingID = Convert.ToInt32(HelperExcel.GetString(checkRow, colPackingID));

                            var objGroup = lstGroupProduct.FirstOrDefault(c => c.Code == dataGroupCode);
                            if (objGroup == null)
                            {
                                objGroup = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == groupProductID);
                                if (objGroup == null)
                                {
                                    objGroup = new CUS_GroupOfProduct();
                                    objGroup.CreatedBy = Account.UserName;
                                    objGroup.CreatedDate = DateTime.Now;
                                    objGroup.CustomerID = customerid;
                                    objGroup.PriceOfGOPID = priceOfGOPID;
                                    objGroup.IsDefault = false;
                                    model.CUS_GroupOfProduct.Add(objGroup);
                                }
                                else
                                {
                                    objGroup.CreatedBy = Account.UserName;
                                    objGroup.CreatedDate = DateTime.Now;
                                }
                                objGroup.Code = dataGroupCode;
                                objGroup.GroupName = dataGroupName;
                                objGroup.Level = 1;
                                objGroup.HasReturn = dataIsReturn.ToLower() == "x";

                                lstGroupProduct.Add(objGroup);
                            }

                            if (!string.IsNullOrEmpty(dataProCode))
                            {
                                var objProduct = model.CUS_Product.FirstOrDefault(c => c.ID == productID.Value);
                                if (objProduct == null)
                                {
                                    objProduct = new CUS_Product();
                                    objProduct.CreatedBy = Account.UserName;
                                    objProduct.CreatedDate = DateTime.Now;
                                    objProduct.IsDefault = false;
                                    objProduct.CUS_GroupOfProduct = objGroup;
                                    model.CUS_Product.Add(objProduct);
                                }
                                else
                                {
                                    objProduct.ModifiedBy = Account.UserName;
                                    objProduct.ModifiedDate = DateTime.Now;
                                }
                                objProduct.Code = dataProCode;
                                objProduct.ProductName = dataProName;
                                objProduct.Length = string.IsNullOrEmpty(dataLength) ? 0 : Convert.ToDouble(dataLength) / (double)100;
                                objProduct.CBM = string.IsNullOrEmpty(dataCBM) ? 0 : Convert.ToDouble(dataCBM) / (double)1000000;
                                objProduct.Width = string.IsNullOrEmpty(dataWidth) ? 0 : Convert.ToDouble(dataWidth) / (double)100;
                                objProduct.Height = string.IsNullOrEmpty(dataHigh) ? 0 : Convert.ToDouble(dataHigh) / (double)100;
                                objProduct.IsKg = dataIsKg.ToLower() == "x";
                                if (objProduct.IsKg)
                                {
                                    objProduct.Weight = string.IsNullOrEmpty(dataWeight) ? 0 : Convert.ToDouble(dataWeight) / 1000;
                                }
                                else
                                {
                                    objProduct.Weight = string.IsNullOrEmpty(dataWeight) ? 0 : Convert.ToDouble(dataWeight);
                                }
                                objProduct.PackingID = packingID;
                                objProduct.Description = dataDescription;
                                if (string.IsNullOrEmpty(dataTempMin))
                                    objProduct.TempMin = null;
                                else objProduct.TempMin = Convert.ToDouble(dataTempMin);
                                if (string.IsNullOrEmpty(dataTempMax))
                                    objProduct.TempMax = null;
                                else objProduct.TempMax = Convert.ToDouble(dataTempMax);
                            }
                        }
                        model.SaveChanges();
                        return true;
                    }
                    else return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Stock
        /// <summary>
        /// Lấy danh sách kho đã được cấu hình theo KH
        /// </summary>
        /// <param name="request">Request</param>
        /// <param name="customerid">ID Khách hàng</param>
        /// <returns></returns>
        public DTOResult Stock_List(string request, int customerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Location.Where(c => c.CusPartID == null && c.CustomerID == customerid).Select(c => new DTOCUSStock
                    {
                        LocationID = c.LocationID,
                        LocationName = c.LocationName,
                        CountryID = c.CAT_Location.CountryID,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceID = c.CAT_Location.ProvinceID,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        DistrictID = c.CAT_Location.DistrictID,
                        WardName = c.CAT_Location.CAT_Ward != null ? c.CAT_Location.CAT_Ward.WardName : string.Empty,
                        WardID = c.CAT_Location.WardID,
                        Address = c.CAT_Location.Address,
                        Lng = c.CAT_Location.Lng,
                        Lat = c.CAT_Location.Lat,
                        Code = c.Code,
                        ID = c.ID,
                        CATCode = c.CAT_Location.Code,
                        CATLocationName = c.CAT_Location.Location
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSStock>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Load danh sách kho chưa được cấu hình: dùng cho tạo mới popup
        /// </summary>
        /// <param name="request">Request</param>
        /// <param name="customerid">ID Khách hàng</param>
        /// <returns></returns>
        public DTOResult StockNotIn_List(string request, int customerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstStockExist = model.CUS_Location.Where(c => c.CusPartID == null && c.CustomerID == customerid).Select(c => c.LocationID);
                    List<int> lstStockID = new List<int>();
                    if (lstStockExist != null && lstStockExist.Count() > 0)
                        lstStockID = lstStockExist.ToList<int>();
                    var query = model.CAT_Location.Where(c => !lstStockExist.Contains(c.ID)).Select(c => new DTOCUSLocation
                    {
                        ID = c.ID,
                        LocationID = c.ID,
                        LocationName = c.Location,
                        CountryName = c.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_District.DistrictName,
                        WardName = c.CAT_Ward != null ? c.CAT_Ward.WardName : string.Empty,
                        Address = c.Address,
                        Lng = c.Lng,
                        Lat = c.Lat,
                        Code = c.Code,
                        StockCode = c.Code,
                        StockName = c.Location
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu danh sách kho (Tạo mới popup, Chỉnh sửa incell)
        /// 
        /// </summary>
        /// <param name="lst">Danh sách kho</param>
        /// <param name="customerid">ID Khách hàng</param>
        /// <returns></returns>
        public List<int> Stock_SaveList(List<DTOCUSLocation> lst, int customerid)
        {
            try
            {
                var result = new List<int>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng Code
                    foreach (var item in lst)
                    {
                        var obj = model.CUS_Location.FirstOrDefault(c => c.ID != item.ID && c.CusPartID == null && c.Code == item.Code && c.CustomerID == customerid);
                        if (obj != null)
                            throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    }
                    #endregion

                    foreach (var item in lst)
                    {
                        var obj = model.CUS_Location.FirstOrDefault(c => c.CustomerID == customerid && c.CusPartID == null && c.LocationID == item.ID);
                        if (obj == null)
                        {
                            obj = new CUS_Location();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.CustomerID = customerid;
                            obj.LocationID = item.LocationID;
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Code = item.Code;
                        obj.LocationName = item.LocationName;

                        if (obj.ID < 1)
                        {
                            // Chỉ thêm mới khi Code != null
                            if (!string.IsNullOrEmpty(item.Code))
                                model.CUS_Location.Add(obj);
                        }
                        else
                        {
                            // Xóa khi Code == null
                            if (string.IsNullOrEmpty(item.Code))
                                model.CUS_Location.Remove(obj);
                        }
                    }
                    model.SaveChanges();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSStock Stock_Save(DTOCUSStock item, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    item.Code = item.Code.Trim();
                    item.CATCode = item.CATCode.Trim();

                    if (model.CAT_Location.Where(c => c.ID != item.LocationID && c.Code == item.CATCode).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã hệ thống đã sử dụng");
                    if (model.CUS_Location.Where(c => c.ID != item.ID && c.Code == item.Code && c.CustomerID == customerid).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã sử dụng đã đã dùng cho điểm kho khác");

                    var obj = model.CAT_Location.FirstOrDefault(c => c.ID == item.LocationID);
                    if (obj == null)
                    {
                        obj = new CAT_Location();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    if (model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID).Count() < 2)
                    {
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Code = item.CATCode;
                        obj.Location = item.CATLocationName;
                        obj.Address = !string.IsNullOrEmpty(item.Address) ? item.Address : string.Empty;
                        obj.WardID = item.WardID;
                        if (obj.WardID < 1) obj.WardID = null;
                        obj.DistrictID = item.DistrictID;
                        obj.ProvinceID = item.ProvinceID;
                        obj.CountryID = item.CountryID;
                        obj.Lat = item.Lat;
                        obj.Lng = item.Lng;
                        if (obj.ID < 1)
                            model.CAT_Location.Add(obj);
                    }

                    var detail = model.CUS_Location.FirstOrDefault(c => c.ID == item.ID);
                    if (detail == null)
                    {
                        detail = new CUS_Location();
                        detail.CreatedBy = Account.UserName;
                        detail.CreatedDate = DateTime.Now;
                        detail.CustomerID = customerid;
                        model.CUS_Location.Add(detail);
                    }
                    else
                    {
                        detail.ModifiedBy = Account.UserName;
                        detail.ModifiedDate = DateTime.Now;
                    }
                    detail.CAT_Location = obj;
                    detail.LocationName = item.LocationName;
                    detail.Code = item.Code;

                    model.SaveChanges();
                    // Cập nhật cho RoutingArea
                    HelperRouting.Routing_Update(model, Account, obj.ID);
                    model.SaveChanges();
                    item.LocationID = obj.ID;
                    item.ID = detail.ID;
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSStock Stock_GetByID(int stockid, int customerid)
        {
            try
            {
                DTOCUSStock result = new DTOCUSStock();
                result.IsEditable = true;
                using (var model = new DataEntities())
                {
                    if (stockid > 0)
                    {
                        var obj = model.CUS_Location.FirstOrDefault(c => c.ID == stockid);
                        if (obj != null)
                        {
                            result.LocationID = obj.LocationID;
                            result.LocationName = obj.LocationName;
                            result.CountryID = obj.CAT_Location.CountryID;
                            result.CountryName = obj.CAT_Location.CAT_Country.CountryName;
                            result.ProvinceID = obj.CAT_Location.ProvinceID;
                            result.ProvinceName = obj.CAT_Location.CAT_Province.ProvinceName;
                            result.DistrictName = obj.CAT_Location.CAT_District.DistrictName;
                            result.DistrictID = obj.CAT_Location.DistrictID;
                            result.WardName = obj.CAT_Location.CAT_Ward != null ? obj.CAT_Location.CAT_Ward.WardName : string.Empty;
                            result.WardID = obj.CAT_Location.WardID;
                            result.Address = obj.CAT_Location.Address;
                            result.Lng = obj.CAT_Location.Lng;
                            result.Lat = obj.CAT_Location.Lat;
                            result.Code = obj.Code;
                            result.ID = obj.ID;
                            result.CATCode = obj.CAT_Location.Code;
                            result.CATLocationName = obj.CAT_Location.Location;

                            if (model.CUS_Location.FirstOrDefault(c => c.CustomerID != customerid && c.LocationID == obj.LocationID) != null)
                                result.IsEditable = false;
                        }
                    }
                    else
                    {
                        result.CountryID = -1;
                        result.ProvinceID = -1;
                        result.DistrictID = -1;
                        var objC = model.CAT_Country.FirstOrDefault();
                        if (objC != null) result.CountryID = objC.ID;

                        var objP = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objP != null) result.ProvinceID = objP.ID;
                        var objD = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objD != null) result.DistrictID = objD.ID;
                        result.Lat = result.Lng = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xóa danh sách kho
        /// </summary>
        /// <param name="lst">Danh sách kho</param>
        public void Stock_DeleteList(List<DTOCUSStock> lst)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CUS_Location.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            foreach (var objChild in model.CUS_GroupOfProductInStock.Where(c => c.StockID == obj.ID))
                            {
                                model.CUS_GroupOfProductInStock.Remove(objChild);
                            }
                            model.CUS_Location.Remove(obj);
                            model.SaveChanges();
                        }
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xóa kho
        /// </summary>
        /// <param name="item">Kho</param>
        public void Stock_Delete(DTOCUSStock item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Location.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy");
                    if (obj.CAT_LocationAreaDetail.Count > 0)
                        throw FaultHelper.BusinessFault(null, null, "Có dữ liệu khu vực, không thể xóa");
                    if (model.ORD_Container.Count(c => c.LocationDepotID == obj.ID || c.LocationDepotReturnID == obj.ID || c.LocationFromID == obj.ID || c.LocationToID == obj.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Có dữ liệu đơn hàng, không thể xóa");
                    if (model.ORD_GroupProduct.Count(c => c.LocationToOldID == obj.ID || c.LocationFromID == obj.ID || c.LocationToID == obj.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Có dữ liệu đơn hàng, không thể xóa");

                    foreach (var objChild in model.CUS_GroupOfProductInStock.Where(c => c.StockID == obj.ID))
                    {
                        model.CUS_GroupOfProductInStock.Remove(objChild);
                    }


                    if (model.CUS_Location.Count(c => c.CustomerID != obj.CustomerID && c.LocationID == obj.LocationID) == 0)
                    {
                        var catlocation = model.CAT_Location.FirstOrDefault(c => c.ID == obj.LocationID);
                        if (catlocation != null)
                        {
                            foreach (var route in model.CAT_Routing.Where(c => c.LocationFromID == obj.LocationID || c.LocationToID == obj.LocationID))
                            {
                                model.CAT_Routing.Remove(route);
                            }

                            foreach (var area in model.CAT_RoutingAreaLocation.Where(c => c.LocationID == obj.LocationID))
                            {
                                model.CAT_RoutingAreaLocation.Remove(area);
                            }

                            foreach (var matrx in model.CAT_LocationMatrix.Where(c => c.LocationFromID == obj.LocationID || c.LocationToID == obj.LocationID))
                            {
                                foreach (var detai in model.CAT_LocationMatrixDetail.Where(c => c.LocationMatrixID == matrx.ID))
                                {
                                    model.CAT_LocationMatrixDetail.Remove(detai);
                                }
                                model.CAT_LocationMatrix.Remove(matrx);
                            }

                            foreach (var require in model.CAT_LocationRequire.Where(c => c.LocationID == obj.LocationID))
                            {
                                model.CAT_LocationRequire.Remove(require);
                            }

                            foreach (var constrain in model.CAT_ConstraintAllocation.Where(c => c.LocationID == obj.LocationID))
                            {
                                model.CAT_ConstraintAllocation.Remove(constrain);
                            }
                            model.CAT_Location.Remove(catlocation);

                        }

                    }

                    model.CUS_Location.Remove(obj);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public AddressSearchItem AddressSearch_List(int id)
        {
            try
            {
                var result = new AddressSearchItem();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => c.ID == id).Select(c => new AddressSearchItem
                    {
                        CUSLocationID = c.ID,
                        CustomerID = c.CustomerID,
                        CUSPartnerID = c.CusPartID,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "",
                        LocationCode = c.Code,
                        Address = c.CAT_Location.Address,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region routing area (kho+ đối tác)
        public List<CATRoutingArea> Customer_Location_RoutingAreaList(int locationID)
        {
            try
            {
                List<CATRoutingArea> result = new List<CATRoutingArea>();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CATLocation_ListRoutingArea(model, Account, locationID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult Customer_Location_RoutingAreaNotInList(int locationID, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CATLocation_ListRoutingAreaNotIn(model, Account, locationID, request);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Customer_Location_RoutingAreaNotInSave(List<int> lstAreaID, int locationID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    HelperRouting.CATLocation_AddRoutingArea(model, Account, lstAreaID, new List<int> { locationID });
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Customer_Location_RoutingAreaNotInDeleteList(List<int> lstAreaID, int locationID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    HelperRouting.CATLocation_RemoveRoutingArea(model, Account, lstAreaID, new List<int> { locationID });
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region GroupOfProduct In Stock
        public DTOResult GroupOfProductInStock_List(string request, int stockid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProductInStock.Where(c => c.StockID == stockid).Select(c => new DTOCUSGroupOfProductInStock
                    {
                        GroupOfProductID = c.GroupOfProductID,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                        IsEditable = false,
                        IsChoose = false
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSGroupOfProductInStock>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult GroupOfProductNotInStock_List(string request, int stockid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var stock = model.CUS_Location.FirstOrDefault(c => c.ID == stockid);
                    if (stock != null)
                    {
                        var lstGroupID = model.CUS_GroupOfProductInStock.Where(c => c.StockID == stockid).Select(c => c.GroupOfProductID).Distinct().ToList();
                        var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == stock.CustomerID && !lstGroupID.Contains(c.ID)).Select(c => new CUSGroupOfProduct
                        {
                            ID = c.ID,
                            CustomerID = c.CustomerID,
                            CustomerCode = c.CUS_Customer.Code,
                            CustomerName = c.CUS_Customer.CustomerName,
                            ParentID = c.ParentID,
                            Code = c.Code,
                            GroupName = c.GroupName,
                            Level = c.Level,
                            PriceOfGOPID = c.PriceOfGOPID,
                            BiddingGroupOfProductID = c.BiddingGroupOfProductID
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<CUSGroupOfProduct>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void GroupOfProductNotInStock_SaveList(List<int> lst, int stockid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng GroupID
                    foreach (var item in lst)
                    {
                        var obj = model.CUS_GroupOfProductInStock.FirstOrDefault(c => c.GroupOfProductID == item && c.StockID == stockid);
                        if (obj != null)
                            throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");
                    }

                    foreach (var item in lst)
                    {
                        var obj = new CUS_GroupOfProductInStock();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.StockID = stockid;
                        obj.GroupOfProductID = item;
                        model.CUS_GroupOfProductInStock.Add(obj);
                    }
                    model.SaveChanges();
                    #endregion
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void GroupOfProductInStock_DeleteList(List<int> lstGroupID, int stockID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lstGroupID)
                    {
                        var obj = model.CUS_GroupOfProductInStock.FirstOrDefault(c => c.GroupOfProductID == item && c.StockID == stockID);
                        if (obj != null)
                            model.CUS_GroupOfProductInStock.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Routing
        public DTOResult Routing_List(string request, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Routing.Where(c => c.CustomerID == customerID).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        RoutingID = c.RoutingID,
                        Code = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        RoutingParentID = c.CAT_Routing.ParentID,
                        Note = c.CAT_Routing.Note,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Routing_Delete(DTOCUSRouting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Routing.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (model.ORD_GroupProduct.Count(c => c.CUSRoutingID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được tạo đơn hàng, không thể xóa!");
                        if (model.ORD_Container.Count(c => c.CUSRoutingID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được tạo đơn hàng, không thể xóa!");

                        var lstContractRouting = model.CAT_ContractRouting.Where(c => c.RoutingID == obj.RoutingID && c.CAT_Contract.CustomerID == obj.CustomerID);
                        if (lstContractRouting.Count() > 0)
                        {
                            if (model.CAT_PriceCOContainer.Count(c => c.ContractRoutingID.HasValue && c.CAT_ContractRouting.RoutingID == obj.RoutingID && c.CAT_ContractRouting.CAT_Contract.CustomerID == obj.CustomerID) > 0)
                                throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập bảng giá, không thể xóa!");
                            if (model.CAT_PriceDIGroupProduct.Count(c => c.CAT_ContractRouting.RoutingID == obj.RoutingID && c.CAT_ContractRouting.CAT_Contract.CustomerID == obj.CustomerID) > 0)
                                throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập bảng giá, không thể xóa!");
                            if (model.CAT_PriceGroupVehicle.Count(c => c.CAT_ContractRouting.RoutingID == obj.RoutingID && c.CAT_ContractRouting.CAT_Contract.CustomerID == obj.CustomerID) > 0)
                                throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập bảng giá, không thể xóa!");

                            foreach (var child in lstContractRouting)
                                model.CAT_ContractRouting.Remove(child);
                        }
                        model.CUS_Routing.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RoutingNotIn_List(string request, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstMyRouting = model.CUS_Routing.Where(c => c.CustomerID == customerID).Select(c => c.RoutingID).ToList();

                    var query = model.CAT_Routing.Where(c => !lstMyRouting.Contains(c.ID) && c.Code != string.Empty).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        LocationFromID = c.LocationFromID,
                        LocationToID = c.LocationToID,
                        EDistance = c.EDistance,
                        EHours = c.EHours,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        RoutingAreaFromID = c.RoutingAreaFromID,
                        RoutingAreaToID = c.RoutingAreaToID,
                        IsAreaLast = c.IsAreaLast,
                        IsUse = c.IsUse,
                        LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                        LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                        ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void RoutingNotIn_SaveList(List<DTOCATRouting> lst, int customerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        if (model.CUS_Routing.Count(c => c.CustomerID == customerID && c.RoutingID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập trước đó!");

                        CUS_Routing obj = new CUS_Routing();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.CustomerID = customerID;
                        obj.RoutingID = item.ID;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        model.CUS_Routing.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private int Routing_FindRoute(DataEntities model, int customerid, int? contractid, int locationfromid, int locationtoid)
        {
            var result = -1;
            if (contractid > 0)
            {
                var objRoute = model.CAT_ContractRouting.Where(c => c.ContractID == contractid &&
                    c.CAT_Routing.LocationFromID == locationfromid && c.CAT_Routing.LocationToID == locationtoid).Select(c => new { c.RoutingID }).FirstOrDefault();
                if (objRoute != null)
                {
                    var cusroute = model.CUS_Routing.FirstOrDefault(c => c.CustomerID == customerid && c.RoutingID == objRoute.RoutingID);
                    if (cusroute != null)
                        result = cusroute.ID;
                }
                else
                {
                    foreach (var objRouteArea in model.CAT_ContractRouting.Where(c => c.ContractID == contractid &&
                        c.CAT_Routing.RoutingAreaFromID != null && c.CAT_Routing.RoutingAreaToID != null).Select(c => new
                        {
                            c.RoutingID,
                            RoutingAreaFromID = c.CAT_Routing.RoutingAreaFromID.Value,
                            RoutingAreaToID = c.CAT_Routing.RoutingAreaToID.Value
                        }))
                    {
                        if (model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == objRouteArea.RoutingAreaFromID && c.LocationID == locationfromid).Count() > 0 &&
                            model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == objRouteArea.RoutingAreaToID && c.LocationID == locationtoid).Count() > 0)
                        {
                            var cusroute = model.CUS_Routing.FirstOrDefault(c => c.CustomerID == customerid && c.RoutingID == objRouteArea.RoutingID);
                            if (cusroute != null)
                                result = cusroute.ID;
                            break;
                        }
                    }
                }
            }
            else
            {
                var objRoute = model.CUS_Routing.Where(c => c.CustomerID == customerid &&
                    c.CAT_Routing.LocationFromID == locationfromid && c.CAT_Routing.LocationToID == locationtoid).Select(c => new { c.ID }).FirstOrDefault();
                if (objRoute != null)
                {
                    result = objRoute.ID;
                }
                else
                {
                    foreach (var objRouteArea in model.CUS_Routing.Where(c => c.CustomerID == customerid &&
                        c.CAT_Routing.RoutingAreaFromID != null && c.CAT_Routing.RoutingAreaToID != null).Select(c => new
                        {
                            c.ID,
                            RoutingAreaFromID = c.CAT_Routing.RoutingAreaFromID.Value,
                            RoutingAreaToID = c.CAT_Routing.RoutingAreaToID.Value
                        }))
                    {
                        if (model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == objRouteArea.RoutingAreaFromID && c.LocationID == locationfromid).Count() > 0 &&
                            model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == objRouteArea.RoutingAreaToID && c.LocationID == locationtoid).Count() > 0)
                        {
                            result = objRouteArea.ID;
                            break;
                        }
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// Cập nhật lại CusRoutingID cho OrderGroup theo ID khách hàng
        /// </summary>
        /// <param name="customerID"></param>
        public void Routing_Reset(int customerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstOrder = model.ORD_GroupProduct.Where(c => c.ORD_Order.CustomerID == customerID && c.ORD_Order.SYSCustomerID == Account.SYSCustomerID);
                    foreach (var item in lstOrder)
                    {
                        item.CUSRoutingID = Routing_FindRoute(model, customerID, item.ORD_Order.ContractID, item.CUS_Location.LocationID, item.CUS_Location1.LocationID);
                        item.ModifiedBy = Account.UserName;
                        item.ModifiedDate = DateTime.Now;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region SYSSetting

        public DTOCUSSettingInfo CUSSettingInfo_Get(int cusID)
        {
            try
            {
                DTOCUSSettingInfo result = new DTOCUSSettingInfo();
                using (var model = new DataEntities())
                {
                    string sKey = CUSSettingKey.Info.ToString();

                    var item = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == cusID);
                    if (item != null)
                    {
                        if (!string.IsNullOrEmpty(item.Setting))
                        {
                            var data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCUSSettingInfo>>(item.Setting);
                            if (data != null && data.Count > 0)
                                result = data.FirstOrDefault();
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSSettingInfo_Save(DTOCUSSettingInfo item, int cusID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    string sKey = CUSSettingKey.Info.ToString();
                    List<DTOCUSSettingInfo> lst = new List<DTOCUSSettingInfo>();
                    lst.Add(item);
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == cusID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(lst);
                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.CustomerID = cusID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Setting = sSetting;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSSettingInfo_LocationList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        WardID = c.WardID,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        EconomicZone = c.EconomicZone,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate,
                        Note1 = c.Note1,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Common
        /// <summary>
        /// Cập nhật cho tất cả RoutingArea liên quan
        /// </summary>
        /// <param name="model"></param>
        /// <param name="Account"></param>
        /// <param name="locationID"></param>
        private void Routing_Update(DataEntities model, AccountItem Account, int locationID)
        {
            HelperRouting.Routing_Update(model, Account, locationID);
        }

        public List<AddressSearchItem> AddressSearch_ByCustomerList(int customerid)
        {
            try
            {
                List<AddressSearchItem> result = new List<AddressSearchItem>();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new AddressSearchItem
                    {
                        CUSLocationID = c.ID,
                        CustomerID = c.CustomerID,
                        CUSPartnerID = c.CusPartID,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "",
                        LocationCode = c.Code,
                        Address = c.CAT_Location.Address,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Đối tác +kho
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <param name="customerid"></param>
        /// <param name="typeofpartnerID">1: NPP, 2: Cảng, 3: Hãng tàu</param>
        /// <returns></returns>
        public DTOResult Partner_List(string request, int customerid, int typeofpartnerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    switch (typeofpartnerID)
                    {
                        case 1: typeofpartnerID = -(int)SYSVarType.TypeOfPartnerDistributor;
                            break;
                        case 2: typeofpartnerID = -(int)SYSVarType.TypeOfPartnerSeaPort;
                            break;
                        case 3: typeofpartnerID = -(int)SYSVarType.TypeOfPartnerCarrier;
                            break;
                    }
                    var query = model.CUS_Partner.Where(c => c.CustomerID == customerid && c.CAT_Partner.TypeOfPartnerID == typeofpartnerID).Select(c => new DTOCUSPartnerAll
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerID = c.PartnerID,
                        PartnerCode = c.PartnerCode,
                        TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID,
                        TypeOfPartnerName = c.CAT_Partner.SYS_Var.ValueOfVar,
                        GroupOfPartnerCode = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.Code : string.Empty,
                        GroupOfPartnerID = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.ID : 0,
                        GroupOfPartnerName = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.GroupName : string.Empty,
                        CATCode = c.CAT_Partner.Code,
                        CATName = c.CAT_Partner.PartnerName,
                        CountryName = c.CAT_Partner.CAT_Country.CountryName,
                        DistrictName = c.CAT_Partner.CAT_District.DistrictName,
                        ProvinceName = c.CAT_Partner.CAT_Province.ProvinceName,
                        WardName = c.CAT_Partner.WardID != null ? c.CAT_Partner.CAT_Ward.WardName : string.Empty,
                        Address = c.CAT_Partner.Address,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSPartnerAll>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult PartnerNotIn_List(string request, int customerid, int typePartner)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {

                    int iTypeOfPartner = 0;
                    switch (typePartner)
                    {
                        case 1: iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerSeaPort;
                            break;
                        case 2: iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerCarrier;
                            break;
                        case 3: iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerDistributor;
                            break;
                        default: break;
                    }

                    if (iTypeOfPartner == 0)
                        throw FaultHelper.BusinessFault(null, null, "Loại đối tác không chính xác");
                    var lstExist = model.CUS_Partner.Where(c => c.CustomerID == customerid && c.CAT_Partner.TypeOfPartnerID == iTypeOfPartner).Select(c => c.PartnerID).ToList();

                    var query = model.CAT_Partner.Where(c => c.TypeOfPartnerID == iTypeOfPartner && !lstExist.Contains(c.ID)).Select(c => new DTOCUSPartnerAll
                        {
                            PartnerID = c.ID,
                            PartnerCode = c.Code,
                            TypeOfPartnerID = c.TypeOfPartnerID,
                            TypeOfPartnerName = c.SYS_Var.ValueOfVar,
                            GroupOfPartnerCode = c.CAT_GroupOfPartner != null ? c.CAT_GroupOfPartner.Code : string.Empty,
                            GroupOfPartnerID = c.CAT_GroupOfPartner != null ? c.CAT_GroupOfPartner.ID : 0,
                            GroupOfPartnerName = c.CAT_GroupOfPartner != null ? c.CAT_GroupOfPartner.GroupName : string.Empty,
                            CATCode = c.Code,
                            CATName = c.PartnerName,
                            CountryName = c.CAT_Country.CountryName,
                            DistrictName = c.CAT_District.DistrictName,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            WardName = c.WardID != null ? c.CAT_Ward.WardName : string.Empty,
                            Address = c.Address,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSPartnerAll>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<int> Partner_SaveList(List<DTOCUSPartnerAll> lst, int customerid)
        {
            try
            {
                var result = new List<int>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    result = HelperRouting.CUSPartner_SaveList(model, Account, lst, customerid);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Partner_Delete(int cuspartnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUSPartner_Delete(model, Account, cuspartnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int Partner_Save(DTOCUSPartnerAllCustom item, int customerid, int typeOfPartner)
        {
            try
            {
                //1: seaport, 2: carrier, 3: distributor
                int sysTypePartner = -1;
                int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                int iSeaport = -(int)SYSVarType.TypeOfPartnerSeaPort;
                int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;
                switch (typeOfPartner)
                {
                    case 1: sysTypePartner = iSeaport; break;
                    case 2: sysTypePartner = iCarrier; break;
                    case 3: sysTypePartner = iDistributor; break;
                    default:
                        break;
                }
                if (sysTypePartner == -1)
                    throw FaultHelper.BusinessFault(null, null, "Loại đối tác không chính xác");
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CUSPartner_Save(model, Account, item, customerid, sysTypePartner);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult PartnerLocation_List(string request, int cuspartnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var partner = model.CUS_Partner.FirstOrDefault(c => c.ID == cuspartnerid);
                    if (partner != null)
                    {
                        var query = model.CAT_PartnerLocation.Where(c => c.PartnerID == partner.PartnerID).Select(c => new DTOCUSLocation
                        {
                            ID = -1,
                            LocationID = c.LocationID,
                            LocationName = string.Empty,
                            CountryName = c.CAT_Location.CAT_Country.CountryName,
                            WardName = c.CAT_Location.WardID != null ? c.CAT_Location.CAT_Ward.WardName : string.Empty,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            Address = c.CAT_Location.Address,
                            Lng = c.CAT_Location.Lng,
                            Lat = c.CAT_Location.Lat,
                            Code = string.Empty,
                            CountryID = c.CAT_Location.CountryID,
                            ProvinceID = c.CAT_Location.ProvinceID,
                            DistrictID = c.CAT_Location.DistrictID,
                            CATLocationCode = c.CAT_Location.Code,
                            CATLocationName = c.CAT_Location.Location,
                            GroupOfLocationName = c.CAT_Location.GroupOfLocationID > 0 ? c.CAT_Location.CAT_GroupOfLocation.GroupName : string.Empty,
                            StatusAddressSearch = 0,
                            Note = c.CAT_Location.Note,
                            Note1 = c.CAT_Location.Note1,
                        }).ToDataSourceResult(CreateRequest(request));

                        var data = query.Data as IEnumerable<DTOCUSLocation>;

                        var lstCUSLocation = model.CUS_Location.Where(c => c.CusPartID == cuspartnerid).ToList();
                        foreach (var item in data)
                        {
                            var obj = lstCUSLocation.FirstOrDefault(c => c.LocationID == item.LocationID);
                            if (obj != null)
                            {
                                item.ID = obj.ID;
                                item.Code = obj.Code;
                                item.LocationName = obj.LocationName;
                                if (model.CUS_Location.Count(c => c.LocationID == item.LocationID && c.CustomerID != partner.CustomerID) == 0)
                                    item.IsEditable = true;
                            }
                        }
                        result.Data = data;
                        result.Total = query.Total;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCUSLocation> PartnerLocation_SaveList(List<DTOCUSLocation> lst, int cuspartnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CUStomer_PartnerLocation_SaveList(model, Account, lst, cuspartnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult PartnerLocation_NotInList(string request, int cuspartnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var partner = model.CUS_Partner.FirstOrDefault(c => c.ID == cuspartnerid);
                    if (partner != null)
                    {
                        var query = model.CAT_Location.Where(c => c.ID > 1).Select(c => new DTOCUSLocation
                        {
                            ID = c.ID,
                            LocationID = c.ID,
                            LocationName = string.Empty,
                            CountryName = c.CAT_Country.CountryName,
                            WardName = c.WardID != null ? c.CAT_Ward.WardName : string.Empty,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                            Address = c.Address,
                            Lng = c.Lng,
                            Lat = c.Lat,
                            Code = c.Code,
                            CountryID = c.CountryID,
                            ProvinceID = c.ProvinceID,
                            DistrictID = c.DistrictID,
                            CATLocationCode = c.Code,
                            CATLocationName = c.Location,
                            GroupOfLocationName = c.GroupOfLocationID.HasValue ? c.CAT_GroupOfLocation.GroupName : string.Empty,
                            Note = c.Note,
                            Note1 = c.Note1,
                        }).ToDataSourceResult(CreateRequest(request));

                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCUSLocation>;
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<int> PartnerLocation_SaveNotinList(List<int> lst, int cuspartnerid)
        {
            try
            {
                var result = new List<int>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUStomer_PartnerLocation_NotInSaveList(model, Account, lst, cuspartnerid);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPartnerLocation PartnerLocation_Save(DTOCUSPartnerLocation item, int cuspartnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CUStomer_PartnerLocation_Save(model, Account, item, cuspartnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPartnerLocation PartnerLocation_Get(int id)
        {
            try
            {
                var result = new DTOCUSPartnerLocation();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var obj = model.CUS_Location.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.LocationID = obj.LocationID;
                            result.Code = obj.Code;
                            result.Location = obj.LocationName;
                            result.Address = obj.CAT_Location.Address;
                            result.WardID = obj.CAT_Location.WardID;
                            result.DistrictID = obj.CAT_Location.DistrictID;
                            result.ProvinceID = obj.CAT_Location.ProvinceID;
                            result.CountryID = obj.CAT_Location.CountryID;
                            result.Lat = obj.CAT_Location.Lat;
                            result.Lng = obj.CAT_Location.Lng;
                            result.IsEditable = false;
                            result.GroupOfLocationID = obj.CAT_Location.GroupOfLocationID.HasValue ? obj.CAT_Location.GroupOfLocationID.Value : -1;
                            if (model.CUS_Location.FirstOrDefault(c => c.LocationID == obj.LocationID && c.CustomerID != obj.CustomerID) == null)
                                result.IsEditable = true;
                            result.Note = obj.CAT_Location.Note;
                            result.Note1 = obj.CAT_Location.Note1;
                            result.RoutingAreaCode = obj.RoutingAreaCode;
                            result.ApplyForAllCarrier = false;
                            result.ApplyForAllSeaport = false;
                            result.IsVendorLoad = obj.IsVendorLoad;
                            result.IsVendorUnLoad = obj.IsVendorUnLoad;
                        }
                    }
                    else
                    {
                        result.ID = 0;
                        var objC = model.CAT_Country.FirstOrDefault();
                        result.CountryID = 0;
                        if (objC != null) result.CountryID = objC.ID;
                        var objP = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        result.ProvinceID = 0;
                        if (objP != null) result.ProvinceID = objP.ID;
                        var objD = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        result.DistrictID = 0;
                        if (objP != null) result.DistrictID = objD.ID;
                        result.GroupOfLocationID = -1;
                        result.ApplyForAllCarrier = false;
                        result.ApplyForAllSeaport = false;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void PartnerLocation_DeleteList(List<DTOCUSLocation> lst)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUStomer_PartnerLocation_DeleteList(model, Account, lst);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void PartnerLocation_Delete(DTOCUSLocation item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUStomer_PartnerLocation_Delete(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public List<DTOPartnerLocation_Excel> PartnerLocation_Export(int customerID, bool isCarrier, bool isSeaport, bool isDistributor)
        {
            try
            {
                int iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerDistributor;
                if (isCarrier)
                    iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerCarrier;
                if (isSeaport)
                    iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerSeaPort;

                List<DTOPartnerLocation_Excel> result = new List<DTOPartnerLocation_Excel>();
                using (var model = new DataEntities())
                {
                    var ListCUSRouting = model.CUS_Routing.Where(c => c.CustomerID == customerID);
                    var lstRoutingAreaID = ListCUSRouting.Where(c => c.CAT_Routing.RoutingAreaFromID > 0).Select(c => c.CAT_Routing.RoutingAreaFromID.Value).Distinct().ToList();
                    lstRoutingAreaID.AddRange(ListCUSRouting.Where(c => c.CAT_Routing.RoutingAreaToID > 0).Select(c => c.CAT_Routing.RoutingAreaToID.Value).Distinct().ToList());
                    var lstRoutingAreaLocation = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == -1).Select(c => new { c.CAT_RoutingArea.Code, c.CAT_RoutingArea.AreaName, c.LocationID }).ToList();
                    if (lstRoutingAreaID.Count > 0)
                        lstRoutingAreaLocation = model.CAT_RoutingAreaLocation.Where(c => lstRoutingAreaID.Contains(c.RoutingAreaID)).Select(c => new { c.CAT_RoutingArea.Code, c.CAT_RoutingArea.AreaName, c.LocationID }).ToList();

                    var lst = model.CUS_Partner.Where(c => c.CAT_Partner.TypeOfPartnerID == iTypeOfPartner && c.CustomerID == customerID);
                    foreach (var partner in lst)
                    {
                        var lstCATLocation = model.CAT_PartnerLocation.Where(c => c.PartnerID == partner.PartnerID).Select(c => new DTOCUSLocation
                        {
                            LocationID = c.LocationID,
                            LocationName = string.Empty,
                            CountryName = c.CAT_Location.CAT_Country.CountryName,
                            WardName = c.CAT_Location.WardID != null ? c.CAT_Location.CAT_Ward.WardName : string.Empty,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            Address = c.CAT_Location.Address,
                            Lng = c.CAT_Location.Lng,
                            Lat = c.CAT_Location.Lat,
                            Code = string.Empty,
                            CountryID = c.CAT_Location.CountryID,
                            ProvinceID = c.CAT_Location.ProvinceID,
                            DistrictID = c.CAT_Location.DistrictID,
                            SysCode = c.CAT_Location.Code,
                            Note = c.CAT_Location.Note,
                            Note1 = c.CAT_Location.Note1
                        }).ToList();

                        var lstCUSLocation = model.CUS_Location.Where(c => c.CusPartID == partner.ID).ToList();
                        if (lstCUSLocation != null && lstCUSLocation.Count() > 0)
                        {
                            foreach (var item in lstCUSLocation)
                            {
                                var obj = lstCATLocation.FirstOrDefault(c => c.LocationID == item.LocationID);
                                if (obj != null)
                                {
                                    obj.ID = item.ID;
                                    obj.Code = item.Code;
                                    obj.LocationName = item.LocationName;
                                }
                                //if (model.CUS_Location.FirstOrDefault(c => c.LocationID == item.LocationID && c.CustomerID != item.CustomerID) == null)
                                //    obj.IsEditable = true;
                            }
                        }
                        foreach (var location in lstCATLocation)
                        {
                            var o = new DTOPartnerLocation_Excel();
                            o.PartnerCode = partner.PartnerCode;
                            o.PartnerName = partner.CAT_Partner.PartnerName;
                            o.PartnerAddress = partner.CAT_Partner.Address;
                            o.PartnerGroupName = partner.CAT_Partner.GroupOfPartnerID.HasValue ? partner.CAT_Partner.CAT_GroupOfPartner.Code : string.Empty;
                            o.LocationCode = location.Code;
                            o.LocationName = location.LocationName;
                            o.LocationAddress = location.Address;
                            o.Lat = location.Lat;
                            o.Lng = location.Lng;
                            o.ProvinceID = location.ProvinceID;
                            o.ProvinceName = location.ProvinceName;
                            o.CountryID = location.CountryID;
                            o.CountryName = location.CountryName;
                            o.DistrictID = location.DistrictID;
                            o.DistrictName = location.DistrictName;
                            o.Note = location.Note;
                            o.Note1 = location.Note1;
                            var queryArea = lstRoutingAreaLocation.Where(c => c.LocationID == location.ID);
                            if (queryArea.Count() > 0)
                            {
                                o.RoutingAreaCode = string.Join(",", queryArea.Select(c => c.Code).Distinct().ToArray());
                                o.RoutingAreaName = string.Join(",", queryArea.Select(c => c.AreaName).Distinct().ToArray());
                            }

                            result.Add(o);
                        }
                    }

                }
                return result;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPartnerLocation_Check PartnerLocation_Check(int customerID)
        {
            try
            {
                DTOPartnerLocation_Check result = new DTOPartnerLocation_Check();
                using (var model = new DataEntities())
                {
                    result.lstCatPartner = model.CAT_Partner.Select(c => new CATPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PartnerName = c.PartnerName,
                        TypeOfPartnerID = c.TypeOfPartnerID
                    }).ToList();

                    result.lstPartnerOfCustomer = model.CUS_Partner.Where(c => c.CustomerID == customerID).Select(c => new CUSPartner
                    {
                        ID = c.ID,
                        PartnerCode = c.PartnerCode,
                        PartnerID = c.PartnerID
                    }).ToList();

                    result.lstCatLocation = model.CAT_Location.Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code
                    }).ToList();

                    result.lstLocationOfCustomer = model.CUS_Location.Where(c => c.CustomerID == customerID).Select(c => new CUSLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LocationID = c.LocationID,
                        CusPartID = c.CusPartID,
                    }).ToList();

                    result.lstProvince = model.CAT_Province.Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ProvinceName = c.ProvinceName,
                        CountryID = c.CountryID,
                    }).ToList();

                    result.lstDistrict = model.CAT_District.Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ProvinceID = c.ProvinceID,
                        DistrictName = c.DistrictName,
                    }).ToList();

                    result.lstGroupOfPartner = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                    }).ToList();


                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }

        }
        public List<AddressSearchItem> PartnerLocation_Import(List<DTOPartnerImport> lst, int customerid, bool isCarrier, bool isSeaport, bool isDistributor)
        {
            try
            {
                List<AddressSearchItem> result = new List<AddressSearchItem>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    result = HelperRouting.CUStomer_PartnerLocation_Import(model, Account, lst, customerid, isCarrier, isSeaport, isDistributor);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region excel onl mới
        public SYSExcel CUS_Partner_ExcelInit(int functionid, string functionkey, bool isreload, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    functionkey = functionkey + customerid;
                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        Dictionary<int, string> dicPartner = new Dictionary<int, string>();
                        dicPartner.Add(-(int)SYSVarType.TypeOfPartnerCarrier, "Carrier");
                        dicPartner.Add(-(int)SYSVarType.TypeOfPartnerSeaPort, "Seaport");
                        dicPartner.Add(-(int)SYSVarType.TypeOfPartnerDistributor, "Distributor");
                        dicPartner.Add(-1, "Stock");

                        var lstPartner = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => new
                        {
                            ID = c.ID,
                            SYSCode = c.CAT_Partner.Code,
                            Code = c.PartnerCode,
                            PartnerName = c.CAT_Partner.PartnerName,
                            c.CAT_Partner.Address,
                            GroupOfPartnerCode = c.CAT_Partner.GroupOfPartnerID > 0 ? c.CAT_Partner.CAT_GroupOfPartner.Code : string.Empty,
                            TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID,
                            ProvinceName = c.CAT_Partner.ProvinceID > 0 ? c.CAT_Partner.CAT_Province.ProvinceName : string.Empty,
                            CountryName = c.CAT_Partner.CountryID > 0 ? c.CAT_Partner.CAT_Country.CountryName : string.Empty,
                            DistrictName = c.CAT_Partner.DistrictID > 0 ? c.CAT_Partner.CAT_District.DistrictName : string.Empty,
                            Fax = c.CAT_Partner.Fax,
                            Email = c.CAT_Partner.Email,
                            TelNo = c.CAT_Partner.TelNo,
                            ExportDEM = c.ExportDEM,
                            ExportDET = c.ExportDET,
                            ImportDEM = c.ImportDEM,
                            ImportDET = c.ImportDET,
                        }).OrderBy(c => c.TypeOfPartnerID).ToList();

                        var lstLocation = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new
                        {
                            c.ID,
                            c.LocationID,
                            c.CusPartID,
                            c.Code,
                            c.LocationName,
                            SYSCode = c.CAT_Location.Code,
                            GroupOfLocationCode = c.CAT_Location.GroupOfLocationID > 0 ? c.CAT_Location.CAT_GroupOfLocation.Code : "",
                            c.CAT_Location.Address,
                            ProvinceName = c.CAT_Location.ProvinceID > 0 ? c.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            CountryName = c.CAT_Location.CountryID > 0 ? c.CAT_Location.CAT_Country.CountryName : string.Empty,
                            DistrictName = c.CAT_Location.DistrictID > 0 ? c.CAT_Location.CAT_District.DistrictName : string.Empty,
                            LoadTimeCO = c.CAT_Location.LoadTimeCO,
                            UnLoadTimeCO = c.CAT_Location.UnLoadTimeCO,
                            LoadTimeDI = c.CAT_Location.LoadTimeDI,
                            UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI,
                            c.CAT_Location.EconomicZone,
                            c.RoutingAreaCode,
                            c.CAT_Location.Lat,
                            c.CAT_Location.Lng,
                            c.IsVendorLoad,
                            c.IsVendorUnLoad
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã đối tác hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã đối tác sử dụng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên đối tác", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Nhóm NPP / địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã địa chỉ hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã địa chỉ sử dụng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tỉnh thành", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Quận/Huyện", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "SĐT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Fax", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Email", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Vùng kinh doanh", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã khu vực", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Kinh độ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Vĩ độ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "XK hạn lưu container", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "XK hạn giữ rỗng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "NK hạn lưu container", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "NK hạn giữ rỗng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "TG đóng hàng container", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "TG dỡ hàng container", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "TG đóng hàng phân phối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "TG dỡ hàng phân phối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        int stt = 1;
                        foreach (var itemPartner in lstPartner)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            if (dicPartner.ContainsKey(itemPartner.TypeOfPartnerID))
                                cells.Add(HelperExcel.NewCell(col++, dicPartner[itemPartner.TypeOfPartnerID], HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            else
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.SYSCode, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.Code, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.PartnerName, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.GroupOfPartnerCode, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.Address, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.ProvinceName, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.DistrictName, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.TelNo, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.Fax, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.Email, HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.ExportDEM, HelperExcel.ColorBlack, HelperExcel.ColorYellow, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.ExportDET, HelperExcel.ColorBlack, HelperExcel.ColorYellow, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.ImportDEM, HelperExcel.ColorBlack, HelperExcel.ColorYellow, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, itemPartner.ImportDET, HelperExcel.ColorBlack, HelperExcel.ColorYellow, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));

                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;

                            foreach (var itemLocation in lstLocation.Where(c => c.CusPartID == itemPartner.ID))
                            {
                                cells = new List<Cell>();
                                col = 0;
                                cells.Add(HelperExcel.NewCell(col++, stt));
                                if (dicPartner.ContainsKey(itemPartner.TypeOfPartnerID))
                                    cells.Add(HelperExcel.NewCell(col++, dicPartner[itemPartner.TypeOfPartnerID]));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, ""));
                                cells.Add(HelperExcel.NewCell(col++, itemPartner.SYSCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemPartner.Code, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemPartner.PartnerName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.GroupOfLocationCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.SYSCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.Code, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.LocationName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.Address, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.ProvinceName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.DistrictName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.EconomicZone, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.RoutingAreaCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemLocation.Lat > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemLocation.Lat.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber5));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemLocation.Lng > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemLocation.Lng.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber5));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.LoadTimeCO, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.UnLoadTimeCO, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.LoadTimeDI, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.UnLoadTimeDI, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                                stt++;
                            }
                        }

                        if (dicPartner.ContainsKey(-1))
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, dicPartner[-1], HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            cells.Add(HelperExcel.NewCell(col++, dicPartner[-1], HelperExcel.ColorBlack, HelperExcel.ColorYellow));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;

                            foreach (var itemLocation in lstLocation.Where(c => c.CusPartID == null))
                            {
                                cells = new List<Cell>();
                                col = 0;
                                cells.Add(HelperExcel.NewCell(col++, stt));
                                cells.Add(HelperExcel.NewCell(col++, dicPartner[-1]));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.GroupOfLocationCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.SYSCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.Code, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.LocationName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.Address, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.ProvinceName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.DistrictName, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.EconomicZone, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.RoutingAreaCode, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemLocation.Lat > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemLocation.Lat.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber5));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                if (itemLocation.Lng > 0)
                                    cells.Add(HelperExcel.NewCell(col++, itemLocation.Lng.Value, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber5));
                                else
                                    cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, "", HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.LoadTimeCO, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.UnLoadTimeCO, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.LoadTimeDI, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                cells.Add(HelperExcel.NewCell(col++, itemLocation.UnLoadTimeDI, HelperExcel.ColorBlack, HelperExcel.ColorWhite));
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                                stt++;
                            }
                        }


                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CUS_Partner_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 38;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colTypePartnerID = colData++;
                    int colCATPartnerID = colData++;
                    int colCUSPartnerID = colData++;
                    int colGroupPartnerID = colData++;
                    int colCATLocationID = colData++;
                    int colCUSLocationID = colData++;
                    int colGroupLocationID = colData++;
                    int colProvinceID = colData++;
                    int colDistrictID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    Dictionary<string, int> dicPartner = new Dictionary<string, int>();
                    dicPartner.Add("Carrier", -(int)SYSVarType.TypeOfPartnerCarrier);
                    dicPartner.Add("Seaport", -(int)SYSVarType.TypeOfPartnerSeaPort);
                    dicPartner.Add("Distributor", -(int)SYSVarType.TypeOfPartnerDistributor);
                    dicPartner.Add("Stock", -1);

                    var lstCatParner = model.CAT_Partner.Select(c => new { c.ID , c.Code}).ToList();
                    var lstCUSPartnerID = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => new { c.ID, c.PartnerCode, c.PartnerID }).ToList();
                    var lstCUSLocation = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new { c.ID, c.Code, c.CusPartID, c.LocationID }).ToList();
                    var lstGroupPartnerID = model.CAT_GroupOfPartner.Select(c => new { c.ID, c.Code }).ToList();
                    var lstGroupLocationID = model.CAT_GroupOfLocation.Select(c => new { c.ID, c.Code }).ToList();
                    var lstProvinceID = model.CAT_Province.Select(c => new { c.ID, c.ProvinceName }).ToList();
                    var lstDistrictID = model.CAT_District.Select(c => new { c.ID, c.DistrictName, c.ProvinceID }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    List<string> lstCodeCUS = new List<string>();
                    Dictionary<string, List<string>> dicCodeChild = new Dictionary<string, List<string>>();
                    Dictionary<string, List<string>> dicCodeChildCUS = new Dictionary<string, List<string>>();
                    dicCodeChild.Add("-1", new List<string>());
                    dicCodeChildCUS.Add("-1", new List<string>());
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    int colDataType = 1;
                    int colDataCATPartner = colDataType + 1;
                    int colDataCUSPartner = colDataCATPartner + 1;
                    int colDataCATLocation = colDataType + 5;
                    int colDataCUSLocation = colDataCATLocation + 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            string strType = HelperExcel.GetString(eRow, colDataType);
                            string strCode = HelperExcel.GetString(eRow, colDataCATPartner);
                            string strCodeCUS = HelperExcel.GetString(eRow, colDataCUSPartner);
                            string strCodeChild = HelperExcel.GetString(eRow, colDataCATLocation);
                            string strCodeChildCUS = HelperExcel.GetString(eRow, colDataCUSLocation);
                            if (!string.IsNullOrEmpty(strCode) && string.IsNullOrEmpty(strCodeChild))
                            {
                                if (!lstCode.Contains(strCode)) lstCode.Add(strCode);
                                if (!lstCodeCUS.Contains(strCodeCUS)) lstCodeCUS.Add(strCodeCUS);
                                if (!dicCodeChild.ContainsKey(strCode))
                                    dicCodeChild.Add(strCode, new List<string>());
                                if (!dicCodeChildCUS.ContainsKey(strCode))
                                    dicCodeChildCUS.Add(strCode, new List<string>());
                            }
                            else if (!string.IsNullOrEmpty(strCode) && !string.IsNullOrEmpty(strCodeChild))
                            {
                                if (!lstCode.Contains(strCode))
                                {
                                    lstCode.Add(strCode);
                                    lstCodeCUS.Add(strCodeCUS);

                                    if (!dicCodeChild.ContainsKey(strCode))
                                        dicCodeChild.Add(strCode, new List<string>());
                                    if (!dicCodeChildCUS.ContainsKey(strCode))
                                        dicCodeChildCUS.Add(strCode, new List<string>());

                                    if (dicCodeChild.ContainsKey(strCode))
                                        dicCodeChild[strCode].Add(strCodeChild);

                                    if (dicCodeChildCUS.ContainsKey(strCode))
                                        dicCodeChildCUS[strCode].Add(strCodeChildCUS);
                                }
                                else
                                {
                                    dicCodeChild[strCode].Add(strCodeChild);
                                    dicCodeChildCUS[strCode].Add(strCodeChildCUS);
                                }
                            }
                            else if (dicPartner.ContainsKey(strType) && !string.IsNullOrEmpty(strCodeChild))
                            {
                                dicCodeChild["-1"].Add(strCodeChild);
                                dicCodeChildCUS["-1"].Add(strCodeChildCUS);
                            }
                            else if (failCurrent >= failMax)
                            {
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataTypePartner = HelperExcel.GetString(checkRow, colData++);
                        string dataCATPartner = HelperExcel.GetString(checkRow, colData++);
                        string dataCUSPartner = HelperExcel.GetString(checkRow, colData++);
                        string dataPartnerName = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATLocation = HelperExcel.GetString(checkRow, colData++);
                        string dataCUSLocation = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                        string dataAddress = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict = HelperExcel.GetString(checkRow, colData++);
                        string dataTelNo = HelperExcel.GetString(checkRow, colData++);
                        string dataFax = HelperExcel.GetString(checkRow, colData++);
                        string dataEmail = HelperExcel.GetString(checkRow, colData++);
                        string dataEconomicZone = HelperExcel.GetString(checkRow, colData++);
                        string dataRoutingAreaCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLat = HelperExcel.GetString(checkRow, colData++);
                        string dataLng = HelperExcel.GetString(checkRow, colData++);
                        string dataExportDEM = HelperExcel.GetString(checkRow, colData++);
                        string dataExportDET = HelperExcel.GetString(checkRow, colData++);
                        string dataImportDEM = HelperExcel.GetString(checkRow, colData++);
                        string dataImportDET = HelperExcel.GetString(checkRow, colData++);
                        string dataLoadTimeCO = HelperExcel.GetString(checkRow, colData++);
                        string dataUnLoadTimeCO = HelperExcel.GetString(checkRow, colData++);
                        string dataLoadTimeDI = HelperExcel.GetString(checkRow, colData++);
                        string dataUnLoadTimeDI = HelperExcel.GetString(checkRow, colData++);

                        HelperExcel.SetString(checkRow, colCATPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colCUSPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colGroupPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colCATLocationID, "-1");
                        HelperExcel.SetString(checkRow, colCUSLocationID, "-1");
                        HelperExcel.SetString(checkRow, colGroupLocationID, "-1");
                        HelperExcel.SetString(checkRow, colProvinceID, "-1");
                        HelperExcel.SetString(checkRow, colDistrictID, "-1");
                        int cuspartnerid = -1;
                        int catlocationid = -1;
                        int catParnerID = -1;

                        bool flag = true;
                        int provinceid = -1;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypePartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !dicPartner.ContainsKey(dataTypePartner))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = dicPartner[dataTypePartner].ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTypePartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataCATPartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && dicPartner[dataTypePartner] < 0)
                            dataCATPartner = dicPartner[dataTypePartner].ToString();
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0 && lstCode.Where(c => c == dataCATPartner).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && dicPartner[dataTypePartner] > 0)
                        {
                            var valid = "-1";
                            var objID = model.CAT_Partner.Where(c => c.Code == dataCATPartner).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                            { 
                                valid = objID.ID.ToString();
                                catParnerID = objID.ID;
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATPartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataCUSPartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0 && lstCodeCUS.Where(c => c == dataCUSPartner).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && dicPartner[dataTypePartner] > 0)
                        {
                            var valid = "-1";
                            var objForParentID = lstCUSPartnerID.Where(c => c.PartnerID == catParnerID).Select(c => new { c.ID }).FirstOrDefault();
                            if (objForParentID != null)
                                valid = objForParentID.ID.ToString();
                            else
                            {
                                var objID = lstCUSPartnerID.Where(c => c.PartnerCode == dataCUSPartner).Select(c => new { c.ID }).FirstOrDefault();
                                if (objID != null)
                                    valid = objID.ID.ToString();
                            }
                            cuspartnerid = Convert.ToInt32(valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSPartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataPartnerName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 1000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupCode))
                        {
                            if (string.IsNullOrEmpty(dataCATLocation))
                            {
                                if (flag && dicPartner[dataTypePartner] > 0 && lstGroupPartnerID.Where(c => c.Code == dataGroupCode).Count() == 0)
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    flag = false;
                                }
                                if (flag && dicPartner[dataTypePartner] > 0)
                                {
                                    var valid = "-1";
                                    var objID = lstGroupPartnerID.Where(c => c.Code == dataGroupCode).Select(c => new { c.ID }).FirstOrDefault();
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupPartnerID, valid);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupLocationID, "-1");
                                }
                            }
                            else
                            {
                                if (flag && lstGroupLocationID.Where(c => c.Code == dataGroupCode).Count() == 0)
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    flag = false;
                                }
                                if (flag)
                                {
                                    var valid = "-1";
                                    var objID = lstGroupLocationID.Where(c => c.Code == dataGroupCode).Select(c => new { c.ID }).FirstOrDefault();
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupPartnerID, "-1");
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupLocationID, valid);
                                }
                            }
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation) && dicCodeChild[dataCATPartner].Where(c => c == dataCATLocation).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                        {
                            var valid = "-1";
                            var objID = model.CAT_Location.Where(c => c.Code == dataCATLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            catlocationid = Convert.ToInt32(valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATLocationID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCUSLocation) && dicCodeChildCUS[dataCATPartner].Where(c => c == dataCUSLocation).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataCUSLocation))
                        {
                            var valid = "-1";
                            var objID = lstCUSLocation.Where(c => c.CusPartID == cuspartnerid && c.LocationID == catlocationid).Select(c => new { c.ID }).FirstOrDefault();
                            if (cuspartnerid < 1)
                                objID = lstCUSLocation.Where(c => c.CusPartID == null && c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            else if (cuspartnerid < 1)
                            {
                                objID = lstCUSLocation.Where(c => c.CusPartID == null && c.LocationID == catlocationid).Select(c => new { c.ID }).FirstOrDefault();
                                if (objID != null)
                                    valid = objID.ID.ToString();
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSLocationID, valid);
                        }
                        //if (flag && !string.IsNullOrEmpty(dataCUSLocation))
                        //{
                        //    var valid = "-1";
                        //    var objID = lstCUSLocation.Where(c => c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                        //    if (objID != null)
                        //        valid = objID.ID.ToString();
                        //    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSLocationID, valid);
                        //}
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLocationName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataAddress, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataProvince, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProvince) && lstProvinceID.Where(c => c.ProvinceName == dataProvince).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataProvince))
                        {
                            var valid = "-1";
                            var objID = lstProvinceID.Where(c => c.ProvinceName == dataProvince).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                            {
                                provinceid = objID.ID;
                                valid = objID.ID.ToString();
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colProvinceID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataDistrict, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataDistrict) && provinceid > 0 && lstDistrictID.Where(c => c.ProvinceID == provinceid && c.DistrictName == dataDistrict).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataDistrict) && provinceid > 0)
                        {
                            var valid = "-1";
                            var objID = lstDistrictID.Where(c => c.ProvinceID == provinceid && c.DistrictName == dataDistrict).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDistrictID, valid);
                        }
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataTelNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataFax, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataEmail, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataEconomicZone, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataRoutingAreaCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 1000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLat, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLng, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataExportDEM, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataExportDET, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataImportDEM, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataImportDET, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLoadTimeCO, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataUnLoadTimeCO, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++; 
                        if (flag)
                            flag = HelperExcel.Valid(dataLoadTimeDI, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataUnLoadTimeDI, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUS_Partner_ExcelImport(long id, List<Row> lst, List<string> lstMessageError, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 38;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colTypePartnerID = colData++;
                    int colCATPartnerID = colData++;
                    int colCUSPartnerID = colData++;
                    int colGroupPartnerID = colData++;
                    int colCATLocationID = colData++;
                    int colCUSLocationID = colData++;
                    int colGroupLocationID = colData++;
                    int colProvinceID = colData++;
                    int colDistrictID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    Dictionary<string, int> dicPartner = new Dictionary<string, int>();
                    dicPartner.Add("Carrier", -(int)SYSVarType.TypeOfPartnerCarrier);
                    dicPartner.Add("Seaport", -(int)SYSVarType.TypeOfPartnerSeaPort);
                    dicPartner.Add("Distributor", -(int)SYSVarType.TypeOfPartnerDistributor);
                    dicPartner.Add("Stock", -1);

                    var lstCatParner = model.CAT_Partner.Select(c => new { c.ID, c.Code }).ToList();
                    var lstCUSPartnerID = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => new { c.ID, c.PartnerCode, c.PartnerID }).ToList();
                    var lstCUSLocation = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new { c.ID, c.Code, c.CusPartID, c.LocationID }).ToList();
                    var lstGroupPartnerID = model.CAT_GroupOfPartner.Select(c => new { c.ID, c.Code }).ToList();
                    var lstGroupLocationID = model.CAT_GroupOfLocation.Select(c => new { c.ID, c.Code }).ToList();
                    var lstProvinceID = model.CAT_Province.Select(c => new { c.ID, c.ProvinceName }).ToList();
                    var lstDistrictID = model.CAT_District.Select(c => new { c.ID, c.DistrictName, c.ProvinceID }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();
                    List<string> lstCodeCUS = new List<string>();
                    Dictionary<string, List<string>> dicCodeChild = new Dictionary<string, List<string>>();
                    Dictionary<string, List<string>> dicCodeChildCUS = new Dictionary<string, List<string>>();
                    dicCodeChild.Add("-1", new List<string>());
                    dicCodeChildCUS.Add("-1", new List<string>());

                    failCurrent = 0;
                    int colDataType = 1;
                    int colDataCATPartner = colDataType + 1;
                    int colDataCUSPartner = colDataCATPartner + 1;
                    int colDataCATLocation = colDataType + 5;
                    int colDataCUSLocation = colDataCATLocation + 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            string strType = HelperExcel.GetString(eRow, colDataType);
                            string strCode = HelperExcel.GetString(eRow, colDataCATPartner);
                            string strCodeCUS = HelperExcel.GetString(eRow, colDataCUSPartner);
                            string strCodeChild = HelperExcel.GetString(eRow, colDataCATLocation);
                            string strCodeChildCUS = HelperExcel.GetString(eRow, colDataCUSLocation);
                            if (!string.IsNullOrEmpty(strCode) && string.IsNullOrEmpty(strCodeChild))
                            {
                                if (!lstCode.Contains(strCode)) lstCode.Add(strCode);
                                if (!lstCodeCUS.Contains(strCodeCUS)) lstCodeCUS.Add(strCodeCUS);
                                if (!dicCodeChild.ContainsKey(strCode))
                                    dicCodeChild.Add(strCode, new List<string>());
                                if (!dicCodeChildCUS.ContainsKey(strCode))
                                    dicCodeChildCUS.Add(strCode, new List<string>());
                            }
                            else if (!string.IsNullOrEmpty(strCode) && !string.IsNullOrEmpty(strCodeChild))
                            {
                                if (!lstCode.Contains(strCode))
                                {
                                    lstCode.Add(strCode);
                                    lstCodeCUS.Add(strCodeCUS);

                                    if (!dicCodeChild.ContainsKey(strCode))
                                        dicCodeChild.Add(strCode, new List<string>());
                                    if (!dicCodeChildCUS.ContainsKey(strCode))
                                        dicCodeChildCUS.Add(strCode, new List<string>());

                                    if(dicCodeChild.ContainsKey(strCode))
                                        dicCodeChild[strCode].Add(strCodeChild);

                                    if (dicCodeChildCUS.ContainsKey(strCode))
                                        dicCodeChildCUS[strCode].Add(strCodeChildCUS);
                                }
                                else
                                {
                                    dicCodeChild[strCode].Add(strCodeChild);
                                    dicCodeChildCUS[strCode].Add(strCodeChildCUS);
                                }
                            }
                            else if (dicPartner.ContainsKey(strType) && !string.IsNullOrEmpty(strCodeChild))
                            {
                                dicCodeChild["-1"].Add(strCodeChild);
                                dicCodeChildCUS["-1"].Add(strCodeChildCUS);
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataTypePartner = HelperExcel.GetString(checkRow, colData++);
                        string dataCATPartner = HelperExcel.GetString(checkRow, colData++);
                        string dataCUSPartner = HelperExcel.GetString(checkRow, colData++);
                        string dataPartnerName = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATLocation = HelperExcel.GetString(checkRow, colData++);
                        string dataCUSLocation = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                        string dataAddress = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict = HelperExcel.GetString(checkRow, colData++);
                        string dataTelNo = HelperExcel.GetString(checkRow, colData++);
                        string dataFax = HelperExcel.GetString(checkRow, colData++);
                        string dataEmail = HelperExcel.GetString(checkRow, colData++);
                        string dataEconomicZone = HelperExcel.GetString(checkRow, colData++);
                        string dataRoutingAreaCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLat = HelperExcel.GetString(checkRow, colData++);
                        string dataLng = HelperExcel.GetString(checkRow, colData++);
                        string dataExportDEM = HelperExcel.GetString(checkRow, colData++);
                        string dataExportDET = HelperExcel.GetString(checkRow, colData++);
                        string dataImportDEM = HelperExcel.GetString(checkRow, colData++);
                        string dataImportDET = HelperExcel.GetString(checkRow, colData++);
                        string dataLoadTimeCO = HelperExcel.GetString(checkRow, colData++);
                        string dataUnLoadTimeCO = HelperExcel.GetString(checkRow, colData++);
                        string dataLoadTimeDI = HelperExcel.GetString(checkRow, colData++);
                        string dataUnLoadTimeDI = HelperExcel.GetString(checkRow, colData++);
                        

                        HelperExcel.SetString(checkRow, colCATPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colCUSPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colGroupPartnerID, "-1");
                        HelperExcel.SetString(checkRow, colCATLocationID, "-1");
                        HelperExcel.SetString(checkRow, colCUSLocationID, "-1");
                        HelperExcel.SetString(checkRow, colGroupLocationID, "-1");
                        HelperExcel.SetString(checkRow, colProvinceID, "-1");
                        HelperExcel.SetString(checkRow, colDistrictID, "-1");
                        int cuspartnerid = -1;
                        int catlocationid = -1;
                        int catParnerID = -1;

                        bool flag = true;
                        int provinceid = -1;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypePartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !dicPartner.ContainsKey(dataTypePartner))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = dicPartner[dataTypePartner].ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTypePartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataCATPartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && dicPartner[dataTypePartner] < 0)
                            dataCATPartner = dicPartner[dataTypePartner].ToString();
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0 && lstCode.Where(c => c == dataCATPartner).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && dicPartner[dataTypePartner] > 0)
                        {
                            var valid = "-1";
                            var objID = model.CAT_Partner.Where(c => c.Code == dataCATPartner).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                            {
                                valid = objID.ID.ToString();
                                catParnerID = objID.ID;
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATPartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataCUSPartner, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0 && lstCodeCUS.Where(c => c == dataCUSPartner).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && dicPartner[dataTypePartner] > 0)
                        {
                            var valid = "-1";
                            var objForParentID = lstCUSPartnerID.Where(c => c.PartnerID == catParnerID).Select(c => new { c.ID }).FirstOrDefault();
                            if (objForParentID != null)
                                valid = objForParentID.ID.ToString();
                            else
                            {
                                var objID = lstCUSPartnerID.Where(c => c.PartnerCode == dataCUSPartner).Select(c => new { c.ID }).FirstOrDefault();
                                if (objID != null)
                                    valid = objID.ID.ToString();
                            }
                            cuspartnerid = Convert.ToInt32(valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSPartnerID, valid);
                        }
                        indexError++;
                        if (flag && dicPartner[dataTypePartner] > 0)
                            flag = HelperExcel.Valid(dataPartnerName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 1000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupCode))
                        {
                            if (string.IsNullOrEmpty(dataCATLocation))
                            {
                                if (flag && dicPartner[dataTypePartner] > 0 && lstGroupPartnerID.Where(c => c.Code == dataGroupCode).Count() == 0)
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    flag = false;
                                }
                                if (flag && dicPartner[dataTypePartner] > 0)
                                {
                                    var valid = "-1";
                                    var objID = lstGroupPartnerID.Where(c => c.Code == dataGroupCode).Select(c => new { c.ID }).FirstOrDefault();
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupPartnerID, valid);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupLocationID, "-1");
                                }
                            }
                            else
                            {
                                if (flag && lstGroupLocationID.Where(c => c.Code == dataGroupCode).Count() == 0)
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    flag = false;
                                }
                                if (flag)
                                {
                                    var valid = "-1";
                                    var objID = lstGroupLocationID.Where(c => c.Code == dataGroupCode).Select(c => new { c.ID }).FirstOrDefault();
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupPartnerID, "-1");
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupLocationID, valid);
                                }
                            }
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation) && dicCodeChild[dataCATPartner].Where(c => c == dataCATLocation).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                        {
                            var valid = "-1";
                            var objID = model.CAT_Location.Where(c => c.Code == dataCATLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            catlocationid = Convert.ToInt32(valid);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATLocationID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCUSLocation) && dicCodeChildCUS[dataCATPartner].Where(c => c == dataCUSLocation).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataCUSLocation))
                        {
                            var valid = "-1";
                            var objID = lstCUSLocation.Where(c => c.CusPartID == cuspartnerid && c.LocationID == catlocationid).Select(c => new { c.ID }).FirstOrDefault();
                            if (cuspartnerid < 1)
                                objID = lstCUSLocation.Where(c => c.CusPartID == null && c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            else if (cuspartnerid < 1)
                            {
                                objID = lstCUSLocation.Where(c => c.CusPartID == null && c.LocationID == catlocationid).Select(c => new { c.ID }).FirstOrDefault();
                                if (objID != null)
                                    valid = objID.ID.ToString();
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSLocationID, valid);
                        }
                        //if (flag && !string.IsNullOrEmpty(dataCUSLocation))
                        //{
                        //    var valid = "-1";
                        //    var objID = lstCUSLocation.Where(c => c.Code == dataCUSLocation).Select(c => new { c.ID }).FirstOrDefault();
                        //    if (objID != null)
                        //        valid = objID.ID.ToString();
                        //    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCUSLocationID, valid);
                        //}
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLocationName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataAddress, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 500);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataProvince, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProvince) && lstProvinceID.Where(c => c.ProvinceName == dataProvince).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataProvince))
                        {
                            var valid = "-1";
                            var objID = lstProvinceID.Where(c => c.ProvinceName == dataProvince).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                            {
                                provinceid = objID.ID;
                                valid = objID.ID.ToString();
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colProvinceID, valid);
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataDistrict, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataDistrict) && provinceid > 0 && lstDistrictID.Where(c => c.ProvinceID == provinceid && c.DistrictName == dataDistrict).Count() == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag && !string.IsNullOrEmpty(dataDistrict) && provinceid > 0)
                        {
                            var valid = "-1";
                            var objID = lstDistrictID.Where(c => c.ProvinceID == provinceid && c.DistrictName == dataDistrict).Select(c => new { c.ID }).FirstOrDefault();
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDistrictID, valid);
                        }
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataTelNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataFax, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataEmail, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 50);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataEconomicZone, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataRoutingAreaCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 1000);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLat, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataCATLocation))
                            flag = HelperExcel.Valid(dataLng, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataExportDEM, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataExportDET, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataImportDEM, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataImportDET, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLoadTimeCO, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag )
                            flag = HelperExcel.Valid(dataUnLoadTimeCO, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLoadTimeDI, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataUnLoadTimeDI, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CUS_Partner_ExcelApprove(long id, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 38;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colTypePartnerID = colData++;
                    int colCATPartnerID = colData++;
                    int colCUSPartnerID = colData++;
                    int colGroupPartnerID = colData++;
                    int colCATLocationID = colData++;
                    int colCUSLocationID = colData++;
                    int colGroupLocationID = colData++;
                    int colProvinceID = colData++;
                    int colDistrictID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        Dictionary<string, int> dicCATPartner = new Dictionary<string, int>();
                        Dictionary<string, int> dicCUSPartner = new Dictionary<string, int>();
                        Dictionary<string, int> dicCATLocation = new Dictionary<string, int>();
                        //Import partner and update code
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataTypePartner = HelperExcel.GetString(checkRow, colData++);
                            string dataCATPartner = HelperExcel.GetString(checkRow, colData++);
                            string dataCUSPartner = HelperExcel.GetString(checkRow, colData++);
                            string dataPartnerName = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                            string dataCATLocation = HelperExcel.GetString(checkRow, colData++);
                            string dataCUSLocation = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                            string dataAddress = HelperExcel.GetString(checkRow, colData++);
                            string dataProvince = HelperExcel.GetString(checkRow, colData++);
                            string dataDistrict = HelperExcel.GetString(checkRow, colData++);
                            string dataTelNo = HelperExcel.GetString(checkRow, colData++);
                            string dataFax = HelperExcel.GetString(checkRow, colData++);
                            string dataEmail = HelperExcel.GetString(checkRow, colData++);
                            string dataEconomicZone = HelperExcel.GetString(checkRow, colData++);
                            string dataRoutingAreaCode = HelperExcel.GetString(checkRow, colData++);
                            string dataLat = HelperExcel.GetString(checkRow, colData++);
                            string dataLng = HelperExcel.GetString(checkRow, colData++);
                            string dataExportDEM = HelperExcel.GetString(checkRow, colData++);
                            string dataExportDET = HelperExcel.GetString(checkRow, colData++);
                            string dataImportDEM = HelperExcel.GetString(checkRow, colData++);
                            string dataImportDET = HelperExcel.GetString(checkRow, colData++);
                            string dataLoadTimeCO = HelperExcel.GetString(checkRow, colData++);
                            string dataUnLoadTimeCO = HelperExcel.GetString(checkRow, colData++);
                            string dataLoadTimeDI = HelperExcel.GetString(checkRow, colData++);
                            string dataUnLoadTimeDI = HelperExcel.GetString(checkRow, colData++);

                            int? typepartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colTypePartnerID));
                            int? catpartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCATPartnerID));
                            int? cuspartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCUSPartnerID));
                            int? grouppartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupPartnerID));
                            int? provinceid = Convert.ToInt32(HelperExcel.GetString(checkRow, colProvinceID));
                            int? districtid = Convert.ToInt32(HelperExcel.GetString(checkRow, colDistrictID));
                            int? catlocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCATLocationID));
                            int? grouplocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupLocationID));

                            if (typepartnerid > 0 && !dicCATPartner.ContainsKey(dataCATPartner))
                            {
                                var objCAT = model.CAT_Partner.FirstOrDefault(c => c.ID == catpartnerid);
                                if (objCAT == null)
                                {
                                    objCAT = new CAT_Partner();
                                    objCAT.CreatedBy = Account.UserName;
                                    objCAT.CreatedDate = DateTime.Now;
                                    objCAT.Code = dataCATPartner;
                                    objCAT.TypeOfPartnerID = typepartnerid.Value;
                                    objCAT.CountryID = DefaultCountry;
                                    model.CAT_Partner.Add(objCAT);
                                }
                                else
                                {
                                    objCAT.ModifiedBy = Account.UserName;
                                    objCAT.ModifiedDate = DateTime.Now;
                                }
                                objCAT.PartnerName = dataPartnerName;
                                if (grouppartnerid > 0)
                                    objCAT.GroupOfPartnerID = grouppartnerid;
                                else
                                    objCAT.GroupOfPartnerID = null;
                                objCAT.Address = dataAddress;
                                if (provinceid > 0)
                                    objCAT.ProvinceID = provinceid;
                                else
                                    objCAT.ProvinceID = null;
                                if (districtid > 0)
                                    objCAT.DistrictID = districtid;
                                else
                                    objCAT.DistrictID = null;
                                objCAT.TelNo = dataTelNo;
                                objCAT.Fax = dataFax;
                                objCAT.Email = dataEmail;

                                var objCUS = model.CUS_Partner.FirstOrDefault(c => c.ID == cuspartnerid);
                                if (objCUS == null)
                                {
                                    objCUS = new CUS_Partner();
                                    objCUS.CreatedBy = Account.UserName;
                                    objCUS.CreatedDate = DateTime.Now;
                                    objCUS.CustomerID = customerid;
                                    objCUS.CAT_Partner = objCAT;
                                    model.CUS_Partner.Add(objCUS);
                                }
                                else
                                {
                                    objCUS.ModifiedBy = Account.UserName;
                                    objCUS.ModifiedDate = DateTime.Now;
                                }
                                objCUS.PartnerCode = dataCUSPartner;
                                if (!string.IsNullOrEmpty(dataExportDEM))
                                    objCUS.ExportDEM = Convert.ToDouble(dataExportDEM);
                                else
                                    objCUS.ExportDEM = null;
                                if (!string.IsNullOrEmpty(dataExportDET))
                                    objCUS.ExportDET = Convert.ToDouble(dataExportDET);
                                else
                                    objCUS.ExportDET = null;
                                if (!string.IsNullOrEmpty(dataImportDEM))
                                    objCUS.ImportDEM = Convert.ToDouble(dataImportDEM);
                                else
                                    objCUS.ImportDEM = null;
                                if (!string.IsNullOrEmpty(dataImportDET))
                                    objCUS.ImportDET = Convert.ToDouble(dataImportDET);
                                else
                                    objCUS.ImportDET = null;

                                model.SaveChanges();

                                dicCATPartner.Add(dataCATPartner, objCAT.ID);
                                dicCUSPartner.Add(dataCUSPartner, objCUS.ID);
                            }

                            if (!string.IsNullOrEmpty(dataCATLocation) && !dicCATLocation.ContainsKey(dataCATLocation))
                            {
                                var objCAT = model.CAT_Location.FirstOrDefault(c => c.ID == catlocationid);
                                if (objCAT == null)
                                {
                                    objCAT = new CAT_Location();
                                    objCAT.CreatedBy = Account.UserName;
                                    objCAT.CreatedDate = DateTime.Now;
                                    objCAT.Code = dataCATLocation;
                                    objCAT.Location = dataCATLocation;
                                    objCAT.CountryID = DefaultCountry;
                                    objCAT.IsChecked = false;
                                    model.CAT_Location.Add(objCAT);
                                }
                                else
                                {
                                    objCAT.ModifiedBy = Account.UserName;
                                    objCAT.ModifiedDate = DateTime.Now;
                                }
                                objCAT.Location = dataLocationName;
                                objCAT.Address = dataAddress;
                                objCAT.ProvinceID = provinceid.Value;
                                objCAT.DistrictID = districtid.Value;
                                objCAT.EconomicZone = dataEconomicZone;
                                if (grouplocationid > 0)
                                    objCAT.GroupOfLocationID = grouplocationid.Value;
                                else
                                    objCAT.GroupOfLocationID = null;
                                if (!string.IsNullOrEmpty(dataLat))
                                    objCAT.Lat = Convert.ToDouble(dataLat);
                                else
                                    objCAT.Lat = null;
                                if (!string.IsNullOrEmpty(dataLng))
                                    objCAT.Lng = Convert.ToDouble(dataLng);
                                else
                                    objCAT.Lng = null;
                                if (!string.IsNullOrEmpty(dataLoadTimeCO))
                                    objCAT.LoadTimeCO = Convert.ToDouble(dataLoadTimeCO);
                                else
                                    objCAT.LoadTimeCO = null;
                                if (!string.IsNullOrEmpty(dataUnLoadTimeCO))
                                    objCAT.UnLoadTimeCO = Convert.ToDouble(dataUnLoadTimeCO);
                                else
                                    objCAT.UnLoadTimeCO = null;
                                if (!string.IsNullOrEmpty(dataLoadTimeDI))
                                    objCAT.LoadTimeDI = Convert.ToDouble(dataLoadTimeDI);
                                else
                                    objCAT.LoadTimeDI = null;
                                if (!string.IsNullOrEmpty(dataUnLoadTimeDI))
                                    objCAT.UnLoadTimeDI = Convert.ToDouble(dataUnLoadTimeDI);
                                else
                                    objCAT.UnLoadTimeDI = null;
                                model.SaveChanges();

                                dicCATLocation.Add(dataCATLocation, objCAT.ID);
                            }
                        }

                        //Import location
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataTypePartner = HelperExcel.GetString(checkRow, colData++);
                            string dataCATPartner = HelperExcel.GetString(checkRow, colData++);
                            string dataCUSPartner = HelperExcel.GetString(checkRow, colData++);
                            string dataPartnerName = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupCode = HelperExcel.GetString(checkRow, colData++);
                            string dataCATLocation = HelperExcel.GetString(checkRow, colData++);
                            string dataCUSLocation = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationName = HelperExcel.GetString(checkRow, colData++);
                            string dataAddress = HelperExcel.GetString(checkRow, colData++);
                            string dataProvince = HelperExcel.GetString(checkRow, colData++);
                            string dataDistrict = HelperExcel.GetString(checkRow, colData++);
                            string dataTelNo = HelperExcel.GetString(checkRow, colData++);
                            string dataFax = HelperExcel.GetString(checkRow, colData++);
                            string dataEmail = HelperExcel.GetString(checkRow, colData++);
                            string dataEconomicZone = HelperExcel.GetString(checkRow, colData++);
                            string dataRoutingAreaCode = HelperExcel.GetString(checkRow, colData++);
                            string dataLat = HelperExcel.GetString(checkRow, colData++);
                            string dataLng = HelperExcel.GetString(checkRow, colData++);
                            string dataRateGetEmpty = HelperExcel.GetString(checkRow, colData++);
                            string dataRateReturnEmpty = HelperExcel.GetString(checkRow, colData++);

                            int? typepartnerid = Convert.ToInt32(HelperExcel.GetString(checkRow, colTypePartnerID));
                            int? grouplocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colGroupLocationID));
                            int? provinceid = Convert.ToInt32(HelperExcel.GetString(checkRow, colProvinceID));
                            int? districtid = Convert.ToInt32(HelperExcel.GetString(checkRow, colDistrictID));
                            int? catlocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCATLocationID));
                            int? cuslocationid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCUSLocationID));

                            if (dicCATLocation.ContainsKey(dataCATLocation) && ((typepartnerid > 0 && dicCUSPartner.ContainsKey(dataCUSPartner)) || typepartnerid < 1))
                            {
                                int catpartnerid = -1;
                                if (typepartnerid > 0 && dicCATPartner.ContainsKey(dataCATPartner))
                                    catpartnerid = dicCATPartner[dataCATPartner];
                                catlocationid = dicCATLocation[dataCATLocation];
                                if (catpartnerid > 0 && catlocationid > 0 && model.CAT_PartnerLocation.Where(c => c.PartnerID == catpartnerid && c.LocationID == catlocationid.Value).Count() == 0)
                                {
                                    var objPartnerLocation = new CAT_PartnerLocation();
                                    objPartnerLocation.PartnerID = catpartnerid;
                                    objPartnerLocation.LocationID = catlocationid.Value;
                                    objPartnerLocation.PartnerCode = dataCATPartner;
                                    objPartnerLocation.CreatedBy = Account.UserName;
                                    objPartnerLocation.CreatedDate = DateTime.Now;
                                    model.CAT_PartnerLocation.Add(objPartnerLocation);
                                }

                                if (catlocationid > 0)
                                {
                                    var objCUS = model.CUS_Location.FirstOrDefault(c => c.ID == cuslocationid);
                                    if (objCUS == null)
                                    {
                                        objCUS = new CUS_Location();
                                        objCUS.CreatedBy = Account.UserName;
                                        objCUS.CreatedDate = DateTime.Now;
                                        objCUS.CustomerID = customerid;
                                        model.CUS_Location.Add(objCUS);
                                    }
                                    else
                                    {
                                        objCUS.ModifiedBy = Account.UserName;
                                        objCUS.ModifiedDate = DateTime.Now;
                                    }
                                    objCUS.Code = dataCUSLocation;
                                    objCUS.LocationName = dataLocationName;
                                    objCUS.LocationID = catlocationid.Value;
                                    if (typepartnerid > 0)
                                        objCUS.CusPartID = dicCUSPartner[dataCUSPartner];
                                    else
                                        objCUS.CusPartID = null;

                                    objCUS.RoutingAreaCode = dataRoutingAreaCode;
                                    if (!string.IsNullOrEmpty(dataRoutingAreaCode))
                                        objCUS.RoutingAreaCodeNoUnicode = HelperString.RemoveSign4VietnameseString(dataRoutingAreaCode);
                                }
                            }
                        }
                        model.SaveChanges();

                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        public List<DTOCUSPartnerLocationAll> CUS_Partner_List(int customerid, List<int> lstPartnerFilter, List<int> lstLocationFilter, bool isUseLocation)
        {
            try
            {
                List<DTOCUSPartnerLocationAll> result = new List<DTOCUSPartnerLocationAll>();
                using (var model = new DataEntities())
                {
                    int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;
                    int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;

                    var lstCUSPartnerID = new List<int>();
                    var lstCATLocationID = new List<int>();
                    if (lstPartnerFilter != null && lstPartnerFilter.Count > 0)
                    {
                        lstCUSPartnerID.AddRange(lstPartnerFilter);
                    }
                    if (lstLocationFilter != null && lstLocationFilter.Count > 0)
                    {
                        var lstPartnerID = model.CUS_Location.Where(c => c.CustomerID == customerid && c.CusPartID > 0 && lstLocationFilter.Contains(c.ID)).Select(c => c.CusPartID.Value).Distinct().ToList();
                        if (lstPartnerID.Count > 0)
                            lstCUSPartnerID.AddRange(lstPartnerID);
                        if (!lstCUSPartnerID.Contains(-1) && model.CUS_Location.Where(c => c.CustomerID == customerid && c.CusPartID == null && lstLocationFilter.Contains(c.ID)).Count() > 0)
                            lstCUSPartnerID.Add(-1);
                        lstCATLocationID.AddRange(model.CUS_Location.Where(c => c.CustomerID == customerid && lstLocationFilter.Contains(c.ID)).Select(c => c.LocationID).Distinct().ToList());
                    }
                    ////typeID: 1 cảng biển, 2 hãng tàu, 3 nhà phân phối, 4 kho


                    var lstCUSPartner = model.CUS_Partner.Where(c => c.CustomerID == customerid && lstCUSPartnerID.Contains(c.ID)).Select(c => new DTOCUSPartnerLocationAll
                    {
                        IsPartner = true,
                        CATPartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CATCode = c.CAT_Partner.Code,
                        CATName = c.CAT_Partner.PartnerName,
                        CUSCode = c.PartnerCode,
                        CATAddress = c.CAT_Partner.Address,
                        CountryName = c.CAT_Partner.CountryID > 0 ? c.CAT_Partner.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.CAT_Partner.ProvinceID > 0 ? c.CAT_Partner.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.CAT_Partner.DistrictID > 0 ? c.CAT_Partner.CAT_District.DistrictName : string.Empty,
                        CATLocationID = -1,
                        CUSLocationID = -1,
                        CUSLocationName = string.Empty,
                        TypeName = c.CAT_Partner.SYS_Var.ValueOfVar,
                        TypeID = c.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : c.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1,
                    }).OrderBy(c => c.TypeID).ToList();

                    var lstCATPartnerID = lstCUSPartner.Select(c => c.CATPartnerID).ToList();

                    var queryPartnerLocation = model.CAT_PartnerLocation.Where(c => lstCATPartnerID.Contains(c.PartnerID));
                    if (lstCATLocationID.Count > 0)
                        queryPartnerLocation = queryPartnerLocation.Where(c => lstCATLocationID.Contains(c.LocationID));
                    var hasStock = lstCUSPartnerID.Contains(-1);
                    var queryLocation = model.CUS_Location.Where(c => c.CustomerID == customerid && ((c.CusPartID == null && hasStock) || (c.CusPartID > 0 && lstCUSPartnerID.Contains(c.CusPartID.Value))));
                    if (lstCATLocationID.Count > 0)
                        queryLocation = queryLocation.Where(c => lstCATLocationID.Contains(c.LocationID));
                    var lstKeyFilterUseLocation = queryLocation.Where(c => c.CusPartID > 0).Select(c => c.CUS_Partner.PartnerID + "_" + c.LocationID).ToList();
                    if (isUseLocation)
                        queryPartnerLocation = queryPartnerLocation.Where(c => lstKeyFilterUseLocation.Contains(c.PartnerID + "_" + c.LocationID));

                    var lstPartnerLocation = queryPartnerLocation.Select(c => new DTOCUSPartnerLocationAll
                    {
                        IsPartner = false,
                        CATPartnerID = c.PartnerID,
                        CUSPartnerID = -1,
                        CATCode = c.CAT_Location.Code,
                        CATName = c.CAT_Location.Location,
                        CUSCode = string.Empty,
                        CUSLocationName = string.Empty,
                        CATAddress = c.CAT_Location.Address,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        CATLocationID = c.LocationID,
                        CUSLocationID = -1,
                        TypeName = string.Empty,
                        TypeID = c.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : c.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1,
                    }).ToList();



                    var lstCUSLocation = queryLocation.Select(c => new DTOCUSPartnerLocationAll
                    {
                        IsPartner = false,
                        CATPartnerID = c.CusPartID > 0 ? c.CUS_Partner.PartnerID : -1,
                        CUSPartnerID = c.CusPartID > 0 ? c.CusPartID.Value : -1,
                        CATCode = c.CAT_Location.Code,
                        CATName = c.CAT_Location.Location,
                        CUSCode = c.Code,
                        CUSLocationName = c.LocationName,
                        CATAddress = c.CAT_Location.Address,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        CATLocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        TypeName = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.SYS_Var.ValueOfVar : string.Empty,
                        TypeID = c.CusPartID > 0 ? (c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1) : 4,
                    }).ToList();

                    result.AddRange(lstCUSPartner);

                    foreach (var partner in lstCUSPartner)
                    {
                        var lstLocation = lstPartnerLocation.Where(c => c.CATPartnerID == partner.CATPartnerID).ToList();

                        foreach (var location in lstLocation)
                        {
                            location.CUSPartnerID = partner.CUSPartnerID;
                            var checkLocationUse = lstCUSLocation.Where(c => c.CATLocationID == location.CATLocationID && c.CUSPartnerID == partner.CUSPartnerID).FirstOrDefault();
                            if (checkLocationUse != null)
                            {
                                location.CUSCode = checkLocationUse.CUSCode;
                                location.CUSLocationID = checkLocationUse.CUSLocationID;
                                location.CUSLocationName = checkLocationUse.CUSLocationName;
                            }
                        }
                        var index = result.IndexOf(result.Where(c => c.CATPartnerID == partner.CATPartnerID && c.IsPartner).FirstOrDefault());
                        if (index >= 0)
                            result.InsertRange(index + 1, lstLocation);
                    }
                    if (lstCUSPartnerID.Contains(-1))
                    {
                        DTOCUSPartnerLocationAll objStockPartner = new DTOCUSPartnerLocationAll();
                        objStockPartner.IsPartner = true;
                        objStockPartner.CATPartnerID = -1;
                        objStockPartner.CUSPartnerID = -1;
                        objStockPartner.CATCode = string.Empty;
                        objStockPartner.CATName = string.Empty;
                        objStockPartner.CUSCode = string.Empty;
                        objStockPartner.CATAddress = string.Empty;
                        objStockPartner.CountryName = string.Empty;
                        objStockPartner.ProvinceName = string.Empty;
                        objStockPartner.DistrictName = string.Empty;
                        objStockPartner.CATLocationID = -1;
                        objStockPartner.CUSLocationID = -1;
                        objStockPartner.CUSLocationName = string.Empty;
                        objStockPartner.TypeName = "Kho";
                        objStockPartner.TypeID = 4;
                        result.Add(objStockPartner);

                        var lstCUSStock = lstCUSLocation.Where(c => c.CUSPartnerID == -1).ToList();

                        result.AddRange(lstCUSStock);
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPartnerAllCustom CUS_Partner_Get(int id, int typeid)
        {
            try
            {
                int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                int iSeaport = -(int)SYSVarType.TypeOfPartnerSeaPort;
                int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;

                var result = new DTOCUSPartnerAllCustom();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var obj = model.CUS_Partner.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.PartnerID = obj.PartnerID;
                            result.CUSCode = obj.PartnerCode;
                            result.CATCode = obj.CAT_Partner.Code;
                            result.CATPartnerName = obj.CAT_Partner.PartnerName;
                            result.Address = obj.CAT_Partner.Address;
                            result.WardID = obj.CAT_Partner.WardID;
                            result.DistrictID = obj.CAT_Partner.DistrictID;
                            result.ProvinceID = obj.CAT_Partner.ProvinceID;
                            result.CountryID = obj.CAT_Partner.CountryID;
                            result.TelNo = obj.CAT_Partner.TelNo;
                            result.Fax = obj.CAT_Partner.Fax;
                            result.Email = obj.CAT_Partner.Email;
                            result.BillingName = obj.CAT_Partner.BillingName;
                            result.BillingAddress = obj.CAT_Partner.BillingAddress;
                            result.TaxCode = obj.CAT_Partner.TaxCode;
                            result.Note = obj.CAT_Partner.Note;
                            result.BiddingID = obj.CAT_Partner.BiddingID;
                            result.GroupOfPartnerID = obj.CAT_Partner.GroupOfPartnerID > 0 ? obj.CAT_Partner.GroupOfPartnerID.Value : -1;
                            result.TypeID = obj.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : obj.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1;
                            result.TypeName = obj.CAT_Partner.SYS_Var.ValueOfVar;
                            result.RateGetEmpty = obj.RateGetEmpty;
                            result.RateReturnEmpty = obj.RateReturnEmpty;
                        }
                    }
                    else
                    {
                        result.ID = -1;
                        result.PartnerID = -1;

                        result.CountryID = 0;
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        result.ProvinceID = 0;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        result.DistrictID = 0;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                        result.WardID = null;

                        result.TypeID = 1;//1 seaport, 2:carrier, 3: distributor
                        if (typeid > 0) result.TypeID = typeid;
                        int typeSysvar = result.TypeID == 1 ? iSeaport : result.TypeID == 2 ? iCarrier : iDistributor;
                        var objSysvar = model.SYS_Var.FirstOrDefault(c => c.ID == typeSysvar);
                        if (objSysvar != null) result.TypeName = objSysvar.ValueOfVar;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int CUS_Partner_CUSLocationSaveCode(DTOCUSPartnerLocationAll item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CUSPartner_CUSLocationSaveCode(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region filter
        public DTOResult CUS_Partner_FilterByPartner_List(string request, int customerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => new DTOCUSPartnerAll
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerID = c.PartnerID,
                        PartnerCode = c.PartnerCode,
                        TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID,
                        TypeOfPartnerName = c.CAT_Partner.SYS_Var.ValueOfVar,
                        GroupOfPartnerCode = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.Code : string.Empty,
                        GroupOfPartnerID = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.ID : 0,
                        GroupOfPartnerName = c.CAT_Partner.CAT_GroupOfPartner != null ? c.CAT_Partner.CAT_GroupOfPartner.GroupName : string.Empty,
                        CATCode = c.CAT_Partner.Code,
                        CATName = c.CAT_Partner.PartnerName,
                        CountryName = c.CAT_Partner.CAT_Country.CountryName,
                        DistrictName = c.CAT_Partner.CAT_District.DistrictName,
                        ProvinceName = c.CAT_Partner.CAT_Province.ProvinceName,
                        WardName = c.CAT_Partner.WardID != null ? c.CAT_Partner.CAT_Ward.WardName : string.Empty,
                        Address = c.CAT_Partner.Address,
                    }).ToList();
                    query.Add(new DTOCUSPartnerAll
                    {
                        ID = -1,
                        CustomerID = customerid,
                        PartnerID = -1,
                        PartnerCode = string.Empty,
                        TypeOfPartnerID = -1,
                        TypeOfPartnerName = "KHO",
                        GroupOfPartnerCode = string.Empty,
                        GroupOfPartnerID = 0,
                        GroupOfPartnerName = string.Empty,
                        CATCode = "KHO",
                        CATName = "KHO",
                        CountryName = string.Empty,
                        DistrictName = string.Empty,
                        ProvinceName = string.Empty,
                        WardName = string.Empty,
                        Address = string.Empty,
                    });
                    var lst = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = lst.Total;
                    result.Data = lst.Data as IEnumerable<DTOCUSPartnerAll>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<int> CUS_Partner_FilterByPartner_GetNumOfCusLocation(int customerid)
        {
            try
            {
                List<int> result = new List<int>();
                using (var model = new DataEntities())
                {
                    if (model.CUS_Location.Count(c => c.CustomerID == customerid) <= 50)
                    {
                        result = model.CUS_Partner.Where(c => c.CustomerID == customerid).Select(c => c.ID).ToList();
                        result.Add(-1);//-1 : kho
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUS_Partner_FilterByLocation_List(string request, int customerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new DTOPartnerFilterByLocation
                    {
                        CatLocationID = c.LocationID,
                        CusLocationID = c.ID,
                        CATLocationCode = c.CAT_Location.Code,
                        CATLocationName = c.CAT_Location.Location,
                        CUSLocationCode = c.Code,
                        CUSLocationName = c.LocationName,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        LocationAddress = c.CAT_Location.Address,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng,
                        Economiczone = c.CAT_Location.EconomicZone,
                        Note = c.CAT_Location.Note,
                        Note1 = c.CAT_Location.Note,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "KHO",
                        PartnerName = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                        PartnerAddress = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.Address : string.Empty,
                        TypeOfPartnerName = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.SYS_Var.ValueOfVar : "KHO",
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPartnerFilterByLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCUSPartnerLocationAll> CUS_Partner_FilterByLocation_Result(int customerid, List<int> lstCatLocationID)
        {
            try
            {
                List<DTOCUSPartnerLocationAll> result = new List<DTOCUSPartnerLocationAll>();
                using (var model = new DataEntities())
                {
                    int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;
                    int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;

                    //typeID: 1 cảng biển, 2 hãng tàu, 3 nhà phân phối, 4 kho

                    var lst = model.CUS_Location.Where(c => c.CustomerID == customerid && lstCatLocationID.Contains(c.LocationID)).Select(c => c.CusPartID > 0 ? c.CusPartID : -1).Distinct().ToList();

                    var lstCUSPartner = model.CUS_Partner.Where(c => c.CustomerID == customerid && lst.Contains(c.ID)).Select(c => new
                    {
                        ID = c.ID,
                        PartnerID = c.PartnerID,
                        CATCode = c.CAT_Partner.Code,
                        CUSCode = c.PartnerCode,
                        Address = c.CAT_Partner.Address,
                        PartnerName = c.CAT_Partner.PartnerName,
                        GroupPartnerName = c.CAT_Partner.GroupOfPartnerID > 0 ? c.CAT_Partner.CAT_GroupOfPartner.GroupName : string.Empty,
                        CountryName = c.CAT_Partner.CountryID > 0 ? c.CAT_Partner.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.CAT_Partner.ProvinceID > 0 ? c.CAT_Partner.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.CAT_Partner.DistrictID > 0 ? c.CAT_Partner.CAT_District.DistrictName : string.Empty,
                        TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID,
                        TypeOfPartnerName = c.CAT_Partner.SYS_Var.ValueOfVar,
                        TypeID = c.CAT_Partner.TypeOfPartnerID == iDistributor ? 3 : c.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 1,
                    }).OrderBy(c => c.TypeID).ToList();
                    var lstPartnerID = lstCUSPartner.Select(c => c.PartnerID).ToList();
                    var lstPartnerLocation = model.CAT_PartnerLocation.Where(c => lstPartnerID.Contains(c.PartnerID)).Select(c => new
                    {
                        LocationID = c.LocationID,
                        PartnerID = c.PartnerID,
                        CATCode = c.CAT_Location.Code,
                        CATName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        CountryName = c.CAT_Location.CountryID > 0 ? c.CAT_Location.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.CAT_Location.ProvinceID > 0 ? c.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.CAT_Location.DistrictID > 0 ? c.CAT_Location.CAT_District.DistrictName : string.Empty
                    }).ToList();
                    var lstCUSLocation = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        Code = c.Code,
                        CusPartID = c.CusPartID,
                        LocationName = c.LocationName,
                        CATCode = c.CAT_Location.Code,
                        CATName = c.CAT_Location.Location,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        Address = c.CAT_Location.Address,
                    }).ToList();
                    foreach (var partner in lstCUSPartner)
                    {
                        DTOCUSPartnerLocationAll objPartner = new DTOCUSPartnerLocationAll();
                        objPartner.IsPartner = true;
                        objPartner.CATPartnerID = partner.PartnerID;
                        objPartner.CUSPartnerID = partner.ID;
                        objPartner.CATCode = partner.CATCode;
                        objPartner.CATName = partner.PartnerName;
                        objPartner.CUSCode = partner.CUSCode;
                        objPartner.CATAddress = partner.Address;
                        objPartner.CountryName = partner.CountryName;
                        objPartner.ProvinceName = partner.ProvinceName;
                        objPartner.DistrictName = partner.DistrictName;
                        objPartner.CATLocationID = -1;
                        objPartner.CUSLocationID = -1;
                        objPartner.CUSLocationName = string.Empty;
                        objPartner.TypeName = partner.TypeOfPartnerName;
                        objPartner.TypeID = partner.TypeID;
                        result.Add(objPartner);

                        var lstLocation = lstPartnerLocation.Where(c => c.PartnerID == partner.PartnerID).ToList();

                        foreach (var location in lstLocation)
                        {
                            DTOCUSPartnerLocationAll objLocation = new DTOCUSPartnerLocationAll();
                            objLocation.IsPartner = false;
                            objLocation.CATPartnerID = partner.PartnerID;
                            objLocation.CUSPartnerID = partner.ID;
                            objLocation.CATCode = location.CATCode;
                            objLocation.CATName = location.CATName;
                            objLocation.CUSCode = string.Empty;
                            objLocation.CATAddress = location.Address;
                            objLocation.CountryName = location.CountryName;
                            objLocation.ProvinceName = location.ProvinceName;
                            objLocation.DistrictName = location.DistrictName;
                            objLocation.CATLocationID = location.LocationID;
                            objLocation.CUSLocationID = -1;
                            objLocation.TypeName = string.Empty;
                            objPartner.TypeID = partner.TypeID;

                            var checkLocationUse = lstCUSLocation.Where(c => c.LocationID == location.LocationID && c.CusPartID == partner.ID).FirstOrDefault();
                            if (checkLocationUse != null)
                            {
                                objLocation.CUSCode = checkLocationUse.Code;
                                objLocation.CUSLocationID = checkLocationUse.ID;
                                objLocation.CUSLocationName = checkLocationUse.LocationName;
                            }

                            result.Add(objLocation);
                        }
                    }
                    if (lst.Contains(-1))
                    {
                        DTOCUSPartnerLocationAll objStockPartner = new DTOCUSPartnerLocationAll();
                        objStockPartner.IsPartner = true;
                        objStockPartner.CATPartnerID = -1;
                        objStockPartner.CUSPartnerID = -1;
                        objStockPartner.CATCode = string.Empty;
                        objStockPartner.CATName = string.Empty;
                        objStockPartner.CUSCode = string.Empty;
                        objStockPartner.CATAddress = string.Empty;
                        objStockPartner.CountryName = string.Empty;
                        objStockPartner.ProvinceName = string.Empty;
                        objStockPartner.DistrictName = string.Empty;
                        objStockPartner.CATLocationID = -1;
                        objStockPartner.CUSLocationID = -1;
                        objStockPartner.CUSLocationName = string.Empty;
                        objStockPartner.TypeName = "Kho";
                        objStockPartner.TypeID = 4;
                        result.Add(objStockPartner);

                        var lstCUSStock = lstCUSLocation.Where(c => c.CusPartID == null).ToList();

                        foreach (var stock in lstCUSStock)
                        {
                            DTOCUSPartnerLocationAll objStock = new DTOCUSPartnerLocationAll();
                            objStock.IsPartner = false;
                            objStock.CATPartnerID = -1;
                            objStock.CUSPartnerID = -1;
                            objStock.CATCode = stock.CATCode;
                            objStock.CATName = stock.CATName;
                            objStock.CUSCode = stock.Code;
                            objStock.CUSLocationName = stock.LocationName;
                            objStock.CATAddress = stock.Address;
                            objStock.CountryName = stock.CountryName;
                            objStock.ProvinceName = stock.ProvinceName;
                            objStock.DistrictName = stock.DistrictName;
                            objStock.CATLocationID = stock.LocationID;
                            objStock.CUSLocationID = stock.ID;
                            objStock.TypeName = string.Empty;
                            objStock.TypeID = objStockPartner.TypeID;
                            result.Add(objStock);
                        }
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region routing partner
        public DTOResult CUS_Partner_RoutingContract_List(string request, int customerid, int locationid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractRouting.Where(c => c.CAT_Contract.CustomerID == customerid && c.CAT_Routing.RoutingAreaFromID > 0 && c.CAT_Routing.RoutingAreaToID > 0).Select(c => new DTOCUSPartnerRouting
                        {
                            CATRoutingID = c.RoutingID,
                            CATRoutingCode = c.CAT_Routing.Code,
                            CATRoutingName = c.CAT_Routing.RoutingName,
                            CUSRoutingID = c.ID,
                            CUSRoutingCode = c.Code,
                            CUSRoutingName = c.RoutingName,
                            ContractID = c.ContractID,
                            ContractCode = c.CAT_Contract.ContractNo,
                            ContractName = c.CAT_Contract.DisplayName,
                            TermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                            TermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                            TermName = c.ContractTermID > 0 ? c.CAT_ContractTerm.TermName : string.Empty,
                            IsCheckFrom = false,
                            IsCheckTo = false,
                            AreaFromID = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.RoutingAreaFromID.Value : -1,
                            AreaFromCode = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.Code : string.Empty,
                            AreaFromName = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.AreaName : string.Empty,
                            AreaToID = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.RoutingAreaToID.Value : -1,
                            AreaToCode = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.Code : string.Empty,
                            AreaToName = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.AreaName : string.Empty,
                        }).ToDataSourceResult(CreateRequest(request));

                    var data = query.Data as IEnumerable<DTOCUSPartnerRouting>;

                    var lstArea = model.CAT_RoutingAreaLocation.Where(c => c.LocationID == locationid).Select(c => new { c.ID, c.RoutingAreaID, c.LocationID }).ToList();
                    foreach (var item in data)
                    {
                        if (lstArea.Count(c => c.RoutingAreaID == item.AreaFromID) > 0)
                            item.IsCheckFrom = true;
                        if (lstArea.Count(c => c.RoutingAreaID == item.AreaToID) > 0)
                            item.IsCheckTo = true;
                    }

                    result.Total = query.Total;
                    result.Data = data;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUS_Partner_RoutingContract_SaveList(List<int> lstAreaClear, List<int> lstAreaAdd, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    lstAreaClear = lstAreaClear.Distinct().ToList();
                    lstAreaAdd = lstAreaAdd.Distinct().ToList();
                    //clear kv-diem
                    foreach (var item in model.CAT_RoutingAreaLocation.Where(c => lstAreaClear.Contains(c.RoutingAreaID) && c.LocationID == locationid))
                    {
                        model.CAT_RoutingAreaLocation.Remove(item);
                    }
                    //add mới
                    foreach (var area in lstAreaAdd)
                    {
                        var obj = new CAT_RoutingAreaLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.RoutingAreaID = area;
                        obj.LocationID = locationid;
                        model.CAT_RoutingAreaLocation.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUS_Partner_RoutingContract_NewRoutingSave(DTOCUSPartnerNewRouting item, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    item.RoutingCode = item.RoutingCode.Trim();
                    item.RoutingName = item.RoutingName.Trim();

                    if (model.CAT_Routing.Count(c => c.Code == item.RoutingCode) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã cung đường đã tồn tại");
                    if (item.AreaToID <= 1 && item.AreaFromID <= 1)
                        throw FaultHelper.BusinessFault(null, null, "Khu vực đi, đến không chính xác");

                    var objCATRouting = new CAT_Routing();
                    objCATRouting.CreatedBy = Account.UserName;
                    objCATRouting.CreatedDate = DateTime.Now;
                    objCATRouting.Code = item.RoutingCode;
                    objCATRouting.RoutingName = item.RoutingName;
                    objCATRouting.IsAreaLast = false;
                    objCATRouting.IsUse = true;
                    objCATRouting.IsLocation = false;
                    objCATRouting.IsChecked = false;
                    objCATRouting.RoutingAreaFromID = item.AreaFromID;
                    objCATRouting.RoutingAreaToID = item.AreaToID;
                    model.CAT_Routing.Add(objCATRouting);

                    var objCUSRouting = new CUS_Routing();
                    objCUSRouting.CreatedBy = Account.UserName;
                    objCUSRouting.CreatedDate = DateTime.Now;
                    objCUSRouting.Code = item.RoutingCode;
                    objCUSRouting.RoutingName = item.RoutingName;
                    objCUSRouting.CustomerID = customerid;
                    objCUSRouting.CAT_Routing = objCATRouting;
                    model.CUS_Routing.Add(objCUSRouting);

                    var last = model.CAT_ContractRouting.Where(c => c.ContractID == item.ContractID).OrderByDescending(c => c.SortOrder).Select(c => c.SortOrder).FirstOrDefault();
                    if (last == null) last = 0;
                    last++;

                    var objContracRouting = new CAT_ContractRouting();
                    objContracRouting.CreatedBy = Account.UserName;
                    objContracRouting.CreatedDate = DateTime.Now;
                    objContracRouting.Code = item.RoutingCode;
                    objContracRouting.RoutingName = item.RoutingName;
                    objContracRouting.ContractID = item.ContractID;
                    objContracRouting.CAT_Routing = objCATRouting;
                    objContracRouting.SortOrder = last;
                    objContracRouting.ContractRoutingTypeID = -(int)SYSVarType.ContractRoutingTypePrice;
                    model.CAT_ContractRouting.Add(objContracRouting);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPartnerNewRouting CUS_Partner_RoutingContract_NewRoutingGet(int customerid)
        {
            try
            {
                DTOCUSPartnerNewRouting result = new DTOCUSPartnerNewRouting();
                using (var model = new DataEntities())
                {
                    var contract = model.CAT_Contract.Where(c => c.CustomerID == customerid).FirstOrDefault();
                    result.ContractID = -1;
                    if (contract != null) result.ContractID = contract.ID;
                    result.AreaFromCode_Name = "Chọn khu vực";
                    result.AreaToCode_Name = "Chọn khu vực";
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCATContract> CUS_Partner_RoutingContract_ContractData(int customerid)
        {
            try
            {
                List<DTOCATContract> result = new List<DTOCATContract>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Contract.Where(c => c.CustomerID == customerid).Select(c => new DTOCATContract
                        {
                            ID = c.ID,
                            ContractNo = c.ContractNo,
                            DisplayName = c.DisplayName
                        }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUS_Partner_RoutingContract_NewAreaSave(CATRoutingArea item, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    item.Code = item.Code.Trim();
                    item.AreaName = item.AreaName.Trim();

                    if (model.CAT_RoutingArea.Count(c => c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã khu vực đã tồn tại");


                    var objCATRoutingArea = new CAT_RoutingArea();
                    objCATRoutingArea.CreatedBy = Account.UserName;
                    objCATRoutingArea.CreatedDate = DateTime.Now;
                    objCATRoutingArea.Code = item.Code;
                    objCATRoutingArea.AreaName = item.AreaName;
                    objCATRoutingArea.CodeNoUnicode = HelperString.RemoveSign4VietnameseString(item.Code);
                    model.CAT_RoutingArea.Add(objCATRoutingArea);

                    var objCATRoutingAreaLocation = new CAT_RoutingAreaLocation();
                    objCATRoutingAreaLocation.CreatedBy = Account.UserName;
                    objCATRoutingAreaLocation.CreatedDate = DateTime.Now;
                    objCATRoutingAreaLocation.CAT_RoutingArea = objCATRoutingArea;
                    objCATRoutingAreaLocation.LocationID = locationid;
                    model.CAT_RoutingAreaLocation.Add(objCATRoutingAreaLocation);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUS_Partner_RoutingContract_AreaList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingArea.Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        AreaName = c.AreaName,
                        Code = c.Code
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRoutingArea>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region Location
        public DTOResult CUS_Partner_RoutingLocationContract_List(string request, int customerid, int locationid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractRouting.Where(c => c.CAT_Contract.CustomerID == customerid && (c.CAT_Routing.LocationFromID == locationid || c.CAT_Routing.LocationToID == locationid)).Select(c => new DTOCUSPartnerRouting
                    {
                        CATRoutingID = c.RoutingID,
                        CATRoutingCode = c.CAT_Routing.Code,
                        CATRoutingName = c.CAT_Routing.RoutingName,
                        CUSRoutingID = c.ID,
                        CUSRoutingCode = c.Code,
                        CUSRoutingName = c.RoutingName,
                        ContractID = c.ContractID,
                        ContractCode = c.CAT_Contract.ContractNo,
                        ContractName = c.CAT_Contract.DisplayName,
                        TermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                        TermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                        TermName = c.ContractTermID > 0 ? c.CAT_ContractTerm.TermName : string.Empty,
                        IsCheckFrom = false,
                        IsCheckTo = false,
                        LocationFromID = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.LocationFromID.Value : -1,
                        LocationFromCode = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.CAT_Location.Code : string.Empty,
                        LocationFromName = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.CAT_Location.Location : string.Empty,
                        LocationToID = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.LocationToID.Value : -1,
                        LocationToCode = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.CAT_Location1.Code : string.Empty,
                        LocationToName = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.CAT_Location1.Location : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSPartnerRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUS_Partner_RoutingLocationContract_NewRoutingSave(DTOCUSPartnerNewRouting item, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    item.RoutingCode = item.RoutingCode.Trim();
                    item.RoutingName = item.RoutingName.Trim();

                    if (model.CAT_Routing.Count(c => c.Code == item.RoutingCode) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã cung đường đã tồn tại");
                    if (item.LocationFromID <= 1 && item.LocationToID <= 1)
                        throw FaultHelper.BusinessFault(null, null, "Điểm đi, đến không chính xác");

                    if (item.LocationFromID == item.LocationToID)
                        throw FaultHelper.BusinessFault(null, null, "Điểm đi, đến không được trùng");

                    var objCATRouting = new CAT_Routing();
                    objCATRouting.CreatedBy = Account.UserName;
                    objCATRouting.CreatedDate = DateTime.Now;
                    objCATRouting.Code = item.RoutingCode;
                    objCATRouting.RoutingName = item.RoutingName;
                    objCATRouting.IsAreaLast = false;
                    objCATRouting.IsUse = true;
                    objCATRouting.IsLocation = false;
                    objCATRouting.IsChecked = false;
                    objCATRouting.LocationFromID = item.LocationFromID;
                    objCATRouting.LocationToID = item.LocationToID;
                    model.CAT_Routing.Add(objCATRouting);

                    var objCUSRouting = new CUS_Routing();
                    objCUSRouting.CreatedBy = Account.UserName;
                    objCUSRouting.CreatedDate = DateTime.Now;
                    objCUSRouting.Code = item.RoutingCode;
                    objCUSRouting.RoutingName = item.RoutingName;
                    objCUSRouting.CustomerID = customerid;
                    objCUSRouting.CAT_Routing = objCATRouting;
                    model.CUS_Routing.Add(objCUSRouting);

                    var last = model.CAT_ContractRouting.Where(c => c.ContractID == item.ContractID).OrderByDescending(c => c.SortOrder).Select(c => c.SortOrder).FirstOrDefault();
                    if (last == null) last = 0;
                    last++;

                    var objContracRouting = new CAT_ContractRouting();
                    objContracRouting.CreatedBy = Account.UserName;
                    objContracRouting.CreatedDate = DateTime.Now;
                    objContracRouting.Code = item.RoutingCode;
                    objContracRouting.RoutingName = item.RoutingName;
                    objContracRouting.ContractID = item.ContractID;
                    objContracRouting.CAT_Routing = objCATRouting;
                    objContracRouting.SortOrder = last;
                    objContracRouting.ContractRoutingTypeID = -(int)SYSVarType.ContractRoutingTypePrice;
                    model.CAT_ContractRouting.Add(objContracRouting);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPartnerNewRouting CUS_Partner_RoutingLocationContract_NewRoutingGet(int customerid)
        {
            try
            {
                DTOCUSPartnerNewRouting result = new DTOCUSPartnerNewRouting();
                using (var model = new DataEntities())
                {
                    var contract = model.CAT_Contract.Where(c => c.CustomerID == customerid).FirstOrDefault();
                    result.ContractID = -1;
                    if (contract != null) result.ContractID = contract.ID;
                    result.LocationFromCode_Name = "Chọn điểm";
                    result.LocationToCode_Name = "Chọn điểm";
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUS_Partner_RoutingContract_LocationList(string request, int customerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Location.Where(c => c.CustomerID == customerid).Select(c => new CATRoutingLocation
                    {
                        ID = c.LocationID,
                        LocationName = c.CAT_Location.Location,
                        Code = c.CAT_Location.Code,
                    }).Distinct().ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRoutingLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CATDOCK
        public DTOResult CUS_Partner_StockDock_List(string request,int locationid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Dock.Where(c => c.LocationID == locationid).Select(c => new DTOCATDock
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        Code = c.Code,
                        DockName = c.DockName,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATDock>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUS_Partner_StockDock_Save(DTOCATDock item, int locationid)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if(model.CAT_Dock.Where(c=>c.LocationID == locationid && c.ID != item.ID && c.Code == item.Code).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã tồn tại");

                    var obj = model.CAT_Dock.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Dock();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.LocationID = locationid;
                        model.CAT_Dock.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.DockName = item.DockName;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CUS_Partner_StockDock_Delete(DTOCATDock item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Dock.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Dock.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOCATDock CUS_Partner_StockDock_Get(int id)
        {
            try
            {
                DTOCATDock result = new DTOCATDock { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Dock.Where(c => c.ID == id).Select(c => new DTOCATDock
                        {
                            ID = c.ID,
                            Code = c.Code,
                            DockName = c.DockName,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #endregion

        #endregion

        //Done
        #region CUSSettingORD

        public DTOResult CUSSettingOrder_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.Order.ToString()
                        && (Account.ListActionCode.Contains(ViewAdmin) || c.CustomerID == Account.SYSCustomerID || Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOCUSSettingOrder
                        {
                            ID = c.ID,
                            Name = c.Name,
                            CreateBy = c.CreatedBy,
                            CreateDate = c.CreatedDate
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingOrder>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingOrder CUSSettingOrder_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingOrder result = new DTOCUSSettingOrder();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrder>(obj.Setting);
                            result.ID = obj.ID;
                            result.Name = obj.Name;
                            var transportModeID = HelperContract.GetTransportMode(model, result.TypeOfTransportModeID);
                            result.IsContainer = transportModeID == -(int)SYSVarType.TransportModeFCL || transportModeID == -(int)SYSVarType.TransportModeLCL;
                        }
                    }
                    else
                    {
                        result.ServiceOfOrderID = HelperContract.GetServiceOfOrder_First(model, -(int)SYSVarType.ServiceOfOrderLocal);
                        result.RowStart = 1;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingOrder_Save(DTOCUSSettingOrder item, int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.Name))
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    string sKey = CUSSettingKey.Order.ToString();
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == id && c.SYSCustomerID == Account.SYSCustomerID);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.CustomerID = item.CustomerID == 0 ? Account.SYSCustomerID : item.CustomerID;

                    item.TotalColumn = TotalColumnTemplate(item, item.CustomerID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);

                    obj.Setting = sSetting;
                    obj.Name = item.Name;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int TotalColumnTemplate(DTOCUSSettingOrder objSetting, int customerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int result = 0;

                    DTOORDOrder_ImportCheck dataImport = new DTOORDOrder_ImportCheck();
                    var isCus = customerID < 1 || customerID == Account.SYSCustomerID;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    int iTon = -(int)SYSVarType.PriceOfGOPTon;
                    int iCBM = -(int)SYSVarType.PriceOfGOPCBM;
                    var defTon = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon);
                    var defCBM = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM);
                    var defTU = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU);

                    //dataImport = ORDOrder_Excel_Import_Data(customerID);
                    dataImport.ListStock = model.CUS_Location.Where(c => c.CusPartID == null && (isCus && isAdmin ? true : !isCus ? c.CustomerID == customerID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    dataImport.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                    }).ToList();

                    dataImport.ListGroupOfProduct = model.CUS_GroupOfProductInStock.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == customerID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_GroupProduct
                    {
                        ID = c.GroupOfProductID,
                        Code = c.CUS_GroupOfProduct.Code,
                        GroupName = c.CUS_GroupOfProduct.GroupName,
                        CUSStockID = c.StockID,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        StockID = c.CUS_Location.LocationID,
                        IsDefault = c.CUS_GroupOfProduct.IsDefault,
                        PackingType = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? 1 : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? 2 : 3,
                        DefaultPackingID = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.ID : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.ID : defTU.ID,
                        DefaultPackingName = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.PackingName : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.PackingName : defTU.PackingName
                    }).ToList();

                    dataImport.ListProduct = model.CUS_Product.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == customerID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_Product
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        PackingID = c.PackingID,
                        PackingTypeGOP = c.PackingID > 0 ? c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3 : 0,
                        Length = c.Length,
                        Height = c.Height,
                        Width = c.Width,
                        Weight = c.Weight,
                        CBM = c.CBM,
                        IsKg = c.IsKg,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        SortOrder = c.SortOrder,
                        IsDefault = c.IsDefault
                    }).ToList();

                    string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                            "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                    List<string> sValue = new List<string>(aValue);
                    Dictionary<string, string> dicName = GetDataName();
                    if (objSetting != null)
                    {
                        if (objSetting.RowStart > 1)
                        {
                            int row = 1;
                            foreach (var prop in objSetting.GetType().GetProperties())
                            {
                                try
                                {
                                    var p = prop.Name;
                                    if (!sValue.Contains(p))
                                    {
                                        var v = (int)prop.GetValue(objSetting, null);
                                        if (v > 0)
                                        {
                                            if (v > result)
                                            {
                                                result = v;
                                            }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                }
                            }
                            if (objSetting.HasStock && objSetting.ListStock != null && objSetting.ListStock.Count > 0)
                            {
                                foreach (var obj in objSetting.ListStock)
                                {
                                    var cusStock = dataImport.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                    if (cusStock != null)
                                    {
                                        if (obj.Ton > 0)
                                        {
                                            if (obj.Ton > result)
                                            {
                                                result = obj.Ton;
                                            }
                                        }

                                        if (obj.CBM > 0)
                                        {
                                            if (obj.CBM > result)
                                            {
                                                result = obj.CBM;
                                            }
                                        }

                                        if (obj.Quantity > 0)
                                        {
                                            if (obj.Quantity > result)
                                            {
                                                result = obj.Quantity;
                                            }
                                        }
                                    }
                                }
                            }
                            if (objSetting.HasStockProduct && objSetting.ListStockWithProduct != null && objSetting.ListStockWithProduct.Count > 0)
                            {
                                foreach (var obj in objSetting.ListStockWithProduct)
                                {
                                    var cusStock = dataImport.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                    var cusGroup = dataImport.ListGroupOfProduct.FirstOrDefault(c => c.ID == obj.GroupOfProductID && c.CUSStockID == obj.StockID);
                                    var cusProduct = dataImport.ListProduct.FirstOrDefault(c => c.ID == obj.ProductID && c.GroupOfProductID == obj.GroupOfProductID);
                                    if (cusStock != null && cusGroup != null && cusProduct != null)
                                    {
                                        if (obj.Ton > 0)
                                        {
                                            if (obj.Ton > result)
                                            {
                                                result = obj.Ton;
                                            }
                                        }

                                        if (obj.CBM > 0)
                                        {
                                            if (obj.CBM > result)
                                            {
                                                result = obj.CBM;
                                            }
                                        }

                                        if (obj.Quantity > 0)
                                        {
                                            if (obj.Quantity > result)
                                            {
                                                result = obj.Quantity;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (objSetting.HasContainer && objSetting.ListContainer != null && objSetting.ListContainer.Count > 0)
                                {
                                    foreach (var obj in objSetting.ListContainer)
                                    {
                                        var cusPacking = dataImport.ListPackingCO.FirstOrDefault(c => c.ID == obj.PackingID);
                                        if (cusPacking != null)
                                        {
                                            if (obj.PackingID > 0)
                                            {
                                                if (obj.PackingCOQuantity > result)
                                                {
                                                    result = obj.PackingCOQuantity;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private Dictionary<string, string> GetDataName()
        {
            Dictionary<string, string> result = new Dictionary<string, string>();

            result.Add("OrderCode", "Mã ĐH");
            result.Add("UniqueOrderCode", "Mã ĐH duy nhất");
            result.Add("SOCode", "Số SO");
            result.Add("DNCode", "Số DN");
            result.Add("RequestDate", "Ngày yêu cầu");
            result.Add("ETD", "ETD");
            result.Add("ETDTime_RequestDate", "ETD theo ngày yêu cầu");
            result.Add("ETA", "ETA");
            result.Add("ETATime_RequestDate", "ETA theo ngày yêu cầu");
            result.Add("ETARequest", "Ngày yc giao hàng");
            result.Add("ETDRequest", "Ngày yc đến kho");
            result.Add("CustomerCode", "Mã khách hàng");
            result.Add("CustomerName", "Tên khách hàng");
            result.Add("CustomerCodeName", "Mã-Tên khách hàng");
            result.Add("DistributorCode", "Mã NPP");
            result.Add("DistributorName", "Tên NPP");
            result.Add("DistributorCodeName", "Mã-Tên NPP");
            result.Add("LocationFromCode", "Mã điểm nhận");
            result.Add("LocationFromName", "Tên điểm nhận");
            result.Add("LocationFromCodeName", "Mã-Tên điểm nhận");
            result.Add("LocationToCode", "Mã điểm giao");
            result.Add("LocationToCodeName", "Mã-Tên điểm giao");
            result.Add("LocationToName", "Tên điểm giao");
            result.Add("LocationToAddress", "Địa chỉ giao");
            result.Add("GroupProductCode", "Nhóm sản phẩm");
            result.Add("Packing", "Mã hàng hóa/ĐVT");
            result.Add("Ton", "Tấn");
            result.Add("CBM", "Khối");
            result.Add("Quantity", "Số lượng");
            result.Add("GroupVehicle", "Loại xe");
            result.Add("Note", "Ghi chú");
            result.Add("TypeOfTransportMode", "Loại vận chuyển");
            result.Add("ServiceOfOrder", "Dịch vụ");
            result.Add("EconomicZone", "EconomicZone");
            result.Add("RoutingAreaCode", "Mã khu vực");
            result.Add("UserDefine1", "Tùy chọn 1");
            result.Add("UserDefine2", "Tùy chọn 2");
            result.Add("UserDefine3", "Tùy chọn 3");
            result.Add("UserDefine4", "Tùy chọn 4");
            result.Add("UserDefine5", "Tùy chọn 5");
            result.Add("UserDefine6", "Tùy chọn 6");
            result.Add("UserDefine7", "Tùy chọn 7");
            result.Add("UserDefine8", "Tùy chọn 8");
            result.Add("UserDefine9", "Tùy chọn 9");
            result.Add("RequestTime", "Giờ yêu cầu ĐH");
            result.Add("ETARequestTime", "Giờ yêu cầu giao hàng");
            result.Add("ETDRequestTime", "Giờ yêu cầu đến kho");
            result.Add("RequestDate_Time", "Ngày giờ yêu cầu ĐH");
            result.Add("LocationToNote", "Ghi chú điểm giao");
            result.Add("LocationToNote1", "Ghi chú điểm giao 1");
            result.Add("GroupProductCodeNotUnicode", "Nhóm sản phẩm(ko dấu)");
            result.Add("PackingNotUnicode", "Sản phẩm(ko dấu)");
            result.Add("RoutingCode", "Mã cung đường");
            result.Add("IsHot", "Gấp");
            result.Add("CutOffTime", "CutOffTime");
            result.Add("CarrierCode", "Mã hãng tàu");
            result.Add("CarrierCodeName", "Mã-têụ hãng tàu");
            result.Add("CarrierName", "Tên hãng tàu");
            result.Add("VesselNo", "Số tàu");
            result.Add("VesselName", "Tên tàu");
            result.Add("TripNo", "Số chuyến");
            result.Add("ContainerNo", "Số con.");
            result.Add("SealNo1", "SealNo1");
            result.Add("SealNo2", "SealNo2");
            result.Add("TypeOfContainerName", "Loại container");
            result.Add("LocationDepotCode", "Mã depot");
            result.Add("LocationDepotName", "Tên depot");
            result.Add("LocationReturnCode", "Mã depot trả");
            result.Add("LocationReturnName", "Tên depot trả");
            result.Add("HasCashCollect", "Thu hộ");
            result.Add("PriceTOMaster", "Giá chuyến");
            result.Add("PriceTon", "Giá theo tấn");
            result.Add("PriceCBM", "Giá theo khối");
            result.Add("PriceQuantity", "Giá theo số lượng");
            result.Add("TemperatureMax", "NĐ tối đa");
            result.Add("TemperatureMin", "NĐ tối thiểu");
            result.Add("DateGetEmpty", "Ngày lấy rỗng");
            result.Add("Date_TimeGetEmpty", "Ngày/giờ lấy rỗng");
            result.Add("TimeGetEmpty", "Giờ lấy rỗng");
            result.Add("DateReturnEmpty", "Ngày trả rỗng");
            result.Add("Date_TimeReturnEmpty", "Ngày/giờ trả rỗng");
            result.Add("TimeReturnEmpty", "Giờ trả rỗng");
            result.Add("TypeOfWAInspectionStatus", "Miễn kiểm");
            result.Add("InspectionDate", "Tgian kiểm hóa");
            result.Add("ProductCodeWithoutGroup", "Mã SP không nhóm");
            result.Add("Note1", "Ghi chú 1");
            result.Add("Note2", "Ghi chú 2");
            result.Add("Ton_SKU", "Tấn SKU");
            result.Add("CBM_SKU", "Khối SKU");
            result.Add("Quantity_SKU", "Số lượng SKU");

            return result;
        }
        public void CUSSettingOrder_Delete(DTOCUSSettingOrder item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var lstPacketID = model.ORD_Packet.Where(c => c.CUSSettingID == item.ID).Select(c => c.ID).ToList();
                    if (lstPacketID.Count > 0)
                    {
                        var lstOrder = model.ORD_Order.Where(c => c.PacketID.HasValue && lstPacketID.Contains(c.PacketID.Value)).Select(c => c.Code).ToList();

                        if (lstOrder.Count > 0)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + string.Join(", ", lstOrder) + " đang được sử dụng, không thể xóa");
                        }
                        else
                        {
                            foreach (var id in lstPacketID)
                            {
                                var packet = model.ORD_Packet.Where(c => c.ID == id).FirstOrDefault();
                                model.ORD_Packet.Remove(packet);
                            }
                        }
                    }
                    var obj = model.CUS_Setting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingStockData CUSSettingORD_StockByCus_List(int cusID)
        {
            try
            {
                DTOCUSSettingStockData result = new DTOCUSSettingStockData();
                result.ListStock = new List<DTOCUSLocation>();
                result.ListDetail = new List<DTOCUSSettingStockDetail>();
                result.ListPacking = new List<DTOCUSSettingPacking>();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Location.Where(c => c.CustomerID == cusID && c.CusPartID == null).Select(c => new DTOCUSLocation
                    {
                        ID = c.ID,
                        LocationName = c.LocationName,
                        Code = c.Code
                    }).ToList();

                    result.ListStock.AddRange(query);

                    var listStockID = query.Select(c => c.ID).ToList();

                    var listGroupInStock = model.CUS_GroupOfProductInStock.Where(c => listStockID.Contains(c.StockID)).Select(c => new { StockID = c.StockID, GroupOfProductID = c.GroupOfProductID }).ToList();

                    var lstGroupID = listGroupInStock.Select(c => c.GroupOfProductID).ToList();
                    var listProduct = model.CUS_Product.Where(c => lstGroupID.Contains(c.GroupOfProductID)).Select(c => new
                        {
                            GroupOfProductID = c.GroupOfProductID,
                            GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                            ProductID = c.ID,
                            ProductCode = c.Code,
                        }).ToList();

                    result.ListPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new DTOCUSSettingPacking
                        {
                            PackingID = c.ID,
                            PackingCode = c.Code,
                        }).ToList();

                    foreach (var stock in query)
                    {
                        foreach (var group in listGroupInStock.Where(c => c.StockID == stock.ID))
                        {
                            foreach (var pro in listProduct.Where(c => c.GroupOfProductID == group.GroupOfProductID))
                            {
                                DTOCUSSettingStockDetail item = new DTOCUSSettingStockDetail();
                                item.StockID = stock.ID;
                                item.StockCode = stock.Code;
                                item.GroupProductID = group.GroupOfProductID;
                                item.GroupProductCode = pro.GroupOfProductCode;
                                item.ProductID = pro.ProductID;
                                item.ProductCode = pro.ProductCode;
                                result.ListDetail.Add(item);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        //Done
        #region CUSSettingPOD

        public DTOResult CUSSettingPOD_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.POD.ToString()).Select(c => new DTOCUSSettingPOD
                    {
                        SettingID = c.ID,
                        Name = c.Name,
                        SettingCustomerCode = c.CUS_Customer.Code,
                        SettingCustomerName = c.CUS_Customer.CustomerName,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingPOD>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingPOD CUSSettingPOD_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingPOD result = new DTOCUSSettingPOD();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingPOD>(obj.Setting);

                            result.Name = obj.Name;
                        }
                    }
                    else
                    {
                        result.RowStart = 1;
                        result.TypeOfTransportModeID = 1;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingPOD_Save(DTOCUSSettingPOD item, int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.Name))
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    string sKey = CUSSettingKey.POD.ToString();
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == id && c.SYSCustomerID == Account.SYSCustomerID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.CustomerID = item.CustomerID == 0 ? Account.SYSCustomerID : item.CustomerID;
                    obj.Setting = sSetting;
                    obj.Name = item.Name;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingPOD_Delete(DTOCUSSettingPOD item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Setting.Where(c => c.ID == item.SettingID).FirstOrDefault();
                    if (obj != null)
                    {
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOResult CUSSettingMON_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.MON.ToString()).Select(c => new DTOCUSSettingMON
                    {
                        SettingID = c.ID,
                        Name = c.Name,
                        SettingCustomerCode = c.CUS_Customer.Code,
                        SettingCustomerName = c.CUS_Customer.CustomerName,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingMON>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingMON CUSSettingMON_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingMON result = new DTOCUSSettingMON();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingMON>(obj.Setting);

                            result.Name = obj.Name;
                        }
                    }
                    else
                    {
                        result.RowStart = 1;
                        result.TypeOfTransportModeID = 1;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingMON_Save(DTOCUSSettingMON item, int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.Name))
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    string sKey = CUSSettingKey.MON.ToString();
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == id && c.SYSCustomerID == Account.SYSCustomerID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.CustomerID = item.CustomerID == 0 ? Account.SYSCustomerID : item.CustomerID;
                    obj.Setting = sSetting;
                    obj.Name = item.Name;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingMON_Delete(DTOCUSSettingMON item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Setting.Where(c => c.ID == item.SettingID).FirstOrDefault();
                    if (obj != null)
                    {
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSSettingPODMap_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.PODMap.ToString()).Select(c => new DTOCUSSettingPODMap
                    {
                        SettingID = c.ID,
                        Name = c.Name,
                        SettingCustomerCode = c.CUS_Customer.Code,
                        SettingCustomerName = c.CUS_Customer.CustomerName,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingPODMap>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingPODMap CUSSettingPODMap_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingPODMap result = new DTOCUSSettingPODMap();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingPODMap>(obj.Setting);

                            result.Name = obj.Name;
                        }
                    }
                    else
                    {
                        result.RowStart = 1;
                        result.TypeOfTransportModeID = 1;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingPODMap_Save(DTOCUSSettingPODMap item, int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.Name))
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    string sKey = CUSSettingKey.PODMap.ToString();
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == id && c.SYSCustomerID == Account.SYSCustomerID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.CustomerID = item.CustomerID == 0 ? Account.SYSCustomerID : item.CustomerID;
                    obj.Setting = sSetting;
                    obj.Name = item.Name;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingPODMap_Delete(DTOCUSSettingPODMap item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Setting.Where(c => c.ID == item.SettingID).FirstOrDefault();
                    if (obj != null)
                    {
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CUSSettingPlan
        public DTOResult CUSSettingPlan_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.Plan.ToString()).Select(c => new DTOCUSSettingPlan
                        {
                            ID = c.ID,
                            Name = c.Name,
                            CreateBy = c.CreatedBy,
                            CreateDate = c.CreatedDate
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingPlan>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingPlan CUSSettingPlan_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingPlan result = new DTOCUSSettingPlan();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingPlan>(obj.Setting);

                            result.Name = obj.Name;
                            result.ID = obj.ID;
                        }
                    }
                    else
                    {
                        result.CUSSettingOrderID = 0;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingPlan_Save(DTOCUSSettingPlan item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.Name))
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");

                    var objSettingOrder = CUSSettingOrder_Get(item.CUSSettingOrderID);
                    if (objSettingOrder == null || objSettingOrder.ID < 1) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thiết lập đơn hàng ID:" + item.CUSSettingOrderID);
                    string sKey = CUSSettingKey.Plan.ToString();
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == item.ID && c.SYSCustomerID == Account.SYSCustomerID);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.CustomerID = objSettingOrder.CustomerID == 0 ? Account.SYSCustomerID : objSettingOrder.CustomerID;
                    item.TotalColumn = CUSSettingPlan_TotalColumnTemplate(item, objSettingOrder);
                    item.RowStart = objSettingOrder.RowStart;
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);
                    obj.Setting = sSetting;
                    obj.Name = item.Name;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int CUSSettingPlan_TotalColumnTemplate(DTOCUSSettingPlan objSetting, DTOCUSSettingOrder objSettingOrder)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int result = 0;

                    string[] aValue = { "ID", "Name", "CreateBy", "CreateDate", "CUSSettingOrderID", "FileID", "FileName", "FilePath", "TotalColumn", "RowStart" };
                    List<string> sValue = new List<string>(aValue);
                    if (objSetting != null)
                    {
                        if (objSettingOrder.TotalColumn != null)
                            result = objSettingOrder.TotalColumn.Value;

                        if (objSettingOrder.RowStart > 1)
                        {
                            foreach (var prop in objSetting.GetType().GetProperties())
                            {
                                try
                                {
                                    var p = prop.Name;
                                    if (!sValue.Contains(p))
                                    {
                                        var v = (int)prop.GetValue(objSetting, null);
                                        if (v > 0)
                                        {
                                            if (v > result)
                                            {
                                                result = v;
                                            }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                }
                            }

                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingPlan_Delete(DTOCUSSettingPlan item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Setting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        if (model.OPS_DIImportPacket.Count(c => c.CUSSettingID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Tên đã được thiết lập, không thể xóa");
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSSettingPlan_SettingOrderList(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.Order.ToString()).Select(c => new DTOCUSSettingOrder
                    {
                        ID = c.ID,
                        Name = c.Name,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Data = query.Data as IEnumerable<DTOCUSSettingOrder>;
                    result.Total = query.Total;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Cussetting order code
        public DTOResult CUSSettingOrderCode_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.OrderCode.ToString()).Select(c => new DTOCUSSettingOrderCode
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate
                    }).ToList();
                    foreach (var item in query)
                    {
                        if (item.CustomerID == Account.SYSCustomerID)
                        {
                            item.CustomerID = 0;
                            item.CustomerCode = "";
                            item.CustomerName = "Tất cả";
                        }
                    }
                    var queryres = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = queryres.Total;
                    result.Data = queryres.Data as IEnumerable<DTOCUSSettingOrderCode>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingOrderCode CUSSettingOrderCode_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingOrderCode result = new DTOCUSSettingOrderCode();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrderCode>(obj.Setting);
                            if (result.CustomerID == Account.SYSCustomerID)
                            {
                                result.CustomerID = 0;
                                result.CustomerCode = "";
                                result.CustomerName = "Tất cả";
                            }
                            result.ID = obj.ID;
                        }
                    }
                    else
                    {
                        result.ID = 0;
                        result.CustomerID = 0;
                        result.CustomerCode = string.Empty;
                        result.CustomerName = string.Empty;

                        string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                        var ObjCus = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) &&
                            !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).FirstOrDefault();
                        if (ObjCus != null)
                        {
                            result.CustomerID = ObjCus.ID;
                            result.CustomerCode = ObjCus.Code;
                            result.CustomerName = ObjCus.CustomerName;
                        }
                        result.ActionReset = 0;
                        result.ActionType = 0;
                        result.SortOrder = 1;

                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingOrderCode_Save(DTOCUSSettingOrderCode item, int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    string sKey = CUSSettingKey.OrderCode.ToString();

                    if (model.CUS_Setting.Count(c => c.Key == sKey && c.ID != id && c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == item.CustomerID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Khách hàng đã có 1 thiết lập khác trong hệ thống.");

                    if (item.CustomerID != 0)
                    {
                        var objSetting = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == sKey && c.CustomerID == Account.SYSCustomerID).FirstOrDefault();
                        if (objSetting != null)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Đã thiết lập mã đơn hàng cho tất cả khách hàng.");
                        }
                    }
                    else
                    {
                        var lstSetting = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == sKey && c.CustomerID != Account.SYSCustomerID).ToList();
                        if (lstSetting != null && lstSetting.Count > 0)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Đã có thiết lập cho mỗi khách hàng không thể tạo thiết lập cho tất cả.");
                        }

                        if (model.CUS_Setting.Count(c => c.Key == sKey && c.ID != id && c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == Account.SYSCustomerID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Đã có thiết lập cho tất cả.");
                    }

                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == id && c.SYSCustomerID == Account.SYSCustomerID);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    if (item.CustomerID == 0)
                        item.CustomerID = Account.SYSCustomerID;
                    obj.CustomerID = item.CustomerID;
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);
                    obj.Setting = sSetting;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingOrderCode_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CUSSettingMONImport
        public DTOResult CUSSettingMONImport_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.MONImport.ToString()).Select(c => new DTOCUSSettingMONImport
                    {
                        ID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingMONImport>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingMONImport CUSSettingMONImport_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingMONImport result = new DTOCUSSettingMONImport();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingMONImport>(obj.Setting);

                            result.Name = obj.Name;
                            result.ID = obj.ID;
                        }
                    }
                    else
                    {
                        result.CUSSettingOrderID = 0;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingMONImport_Save(DTOCUSSettingMONImport item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.Name))
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    var objSettingOrder = model.CUS_Setting.FirstOrDefault(c => c.Key == CUSSettingKey.Order.ToString() && c.ID == item.CUSSettingOrderID);
                    if (objSettingOrder == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thiết lập đơn hàng ID:" + item.CUSSettingOrderID);

                    if (item.MasterCode <= 0 && (item.VehicleNo <= 0 || item.MasterSortOrder <= 0))
                    {
                        throw FaultHelper.BusinessFault(null, null, "Thiếu thiết lập MasterCode hoặc VehicleNo, MasterSortOrder");
                    }

                    string sKey = CUSSettingKey.MONImport.ToString();
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == item.ID && c.SYSCustomerID == Account.SYSCustomerID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.CustomerID = objSettingOrder.CustomerID == 0 ? Account.SYSCustomerID : objSettingOrder.CustomerID;
                    obj.Setting = sSetting;
                    obj.Name = item.Name;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingMONImport_Delete(DTOCUSSettingMONImport item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Setting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        //if (model.OPS_DIImportPacket.Count(c => c.CUSSettingID == item.ID) > 0)
                        //    throw FaultHelper.BusinessFault(null, null, "Tên đã được thiết lập, không thể xóa");
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSSettingMONImport_SettingOrderList(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.Order.ToString()).Select(c => new DTOCUSSettingOrder
                    {
                        ID = c.ID,
                        Name = c.Name,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Data = query.Data as IEnumerable<DTOCUSSettingOrder>;
                    result.Total = query.Total;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //CUSSettingMONExt
        public DTOResult CUSSettingMONExt_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.MONExt.ToString()).Select(c => new DTOCUSSettingMONExt
                    {
                        SettingID = c.ID,
                        Name = c.Name,
                        SettingCustomerCode = c.CUS_Customer.Code,
                        SettingCustomerName = c.CUS_Customer.CustomerName,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingMONExt>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingMONExt CUSSettingMONExt_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingMONExt result = new DTOCUSSettingMONExt();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingMONExt>(obj.Setting);

                            result.Name = obj.Name;
                        }
                    }
                    else
                    {
                        result.RowStart = 1;
                        result.TypeOfTransportModeID = 1;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingMONExt_Save(DTOCUSSettingMONExt item, int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.Name))
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    string sKey = CUSSettingKey.MONExt.ToString();
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == id && c.SYSCustomerID == Account.SYSCustomerID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.CustomerID = item.CustomerID == 0 ? Account.SYSCustomerID : item.CustomerID;
                    obj.Setting = sSetting;
                    obj.Name = item.Name;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingMONExt_Delete(DTOCUSSettingMONExt item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Setting.Where(c => c.ID == item.SettingID).FirstOrDefault();
                    if (obj != null)
                    {
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        //Done
        #region CUSContract

        #region Common

        public DTOResult CUSContract_List(string request)
        {
            try
            {
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CUS_Customer.IsSystem == false &&
                        (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) &&
                        c.CustomerID > 0 && (isAdmin ? true : Account.ListCustomerID.Contains(c.CustomerID.Value))).Select(c => new DTOCATContract
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        ContractNo = c.ContractNo,
                        EffectDate = c.EffectDate,
                        ExpiredDate = c.ExpiredDate,
                        SignDate = c.SignDate,
                        SignBy = c.SignBy,
                        PostionName = c.PostionName,
                        Content = c.Content,
                        DisplayName = c.DisplayName,
                        IsSKU = c.IsSKU,
                        UseRegion = c.UseRegion,
                        TypeOfContractDateID = c.TypeOfContractDateID,
                        TypeOfContractDateName = c.SYS_Var2.ValueOfVar,
                        TypeOfCustomerID = c.TypeOfCustomerID,
                        SYSCustomerID = c.SYSCustomerID,
                        CompanyID = c.CompanyID,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName,
                        CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                        //ServiceOfOrderID = c.ServiceOfOrderID,
                        TransportModeID = c.TransportModeID,
                        TypeOfContractID = c.TypeOfContractID,
                        UseLoadLocation = c.UseLoadLocation,
                        TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.SYS_Var.ValueOfVar : string.Empty,
                        TypeOfCustomerName = c.SYS_Var3.ValueOfVar,
                        LeadTime = c.LeadTime,
                        AllowCoLoad = c.AllowCoLoad,
                        IsDisabled = c.CAT_ContractTerm.Count > 0,
                        PriceInDay = c.PriceInDay
                    }).OrderBy(c => c.CustomerCode).ThenBy(c => c.CustomerName).ThenBy(c => c.ContractNo).ThenBy(c => c.DisplayName).ThenBy(c => c.TransportModeID).ThenBy(c => c.EffectDate).ThenBy(c => c.ExpiredDate).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContract>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATContract CUSContract_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int iFCL = -(int)SYSVarType.TransportModeFCL;
                    int iFTL = -(int)SYSVarType.TransportModeFTL;
                    int iLTL = -(int)SYSVarType.TransportModeLTL;
                    int iMain = -(int)SYSVarType.TypeOfContractMain;
                    if (id > 0)
                    {
                        var result = model.CAT_Contract.Where(c => c.ID == id).Select(c => new DTOCATContract
                        {
                            ID = c.ID,
                            CustomerID = c.CustomerID,
                            ContractNo = c.ContractNo,
                            EffectDate = c.EffectDate,
                            ExpiredDate = c.ExpiredDate,
                            SignDate = c.SignDate,
                            SignBy = c.SignBy,
                            PostionName = c.PostionName,
                            Content = c.Content,
                            DisplayName = c.DisplayName,
                            IsSKU = c.IsSKU,
                            UseRegion = c.UseRegion,
                            TypeOfContractDateID = c.TypeOfContractDateID,
                            TypeOfContractDateName = c.SYS_Var2.ValueOfVar,
                            TypeOfCustomerID = c.TypeOfCustomerID,
                            SYSCustomerID = c.SYSCustomerID,
                            CompanyID = c.CompanyID,
                            CustomerName = c.CUS_Customer.CustomerName,
                            CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                            //ServiceOfOrderID = c.ServiceOfOrderID,
                            TransportModeID = c.TransportModeID,
                            TypeOfContractID = c.TypeOfContractID,
                            UseLoadLocation = c.UseLoadLocation,
                            TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.SYS_Var.ValueOfVar : string.Empty,
                            TypeOfCustomerName = c.SYS_Var3.ValueOfVar,
                            LeadTime = c.LeadTime,
                            AllowCoLoad = c.AllowCoLoad,
                            IsDisabled = c.CAT_ContractTerm.Count > 0,
                            PriceInDay = c.PriceInDay,
                            TypeOfRunLevelID = c.TypeOfRunLevelID > 0 ? c.TypeOfRunLevelID : -1,
                            IsCreateNewTerm = c.IsCreateNewTerm,
                            TypeOfSGroupProductChangeID = c.TypeOfSGroupProductChangeID > 0 ? c.TypeOfSGroupProductChangeID : null,
                            ExprFCLAllocationPrice = c.ExprFCLAllocationPrice,
                            TypeOfContractQuantityID = c.TypeOfContractQuantityID,
                            //Setting = c.ExprFCLAllocationPrice != null ? Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATContract_Setting>(c.ExprFCLAllocationPrice) : null,
                        }).FirstOrDefault();
                        if (result != null)
                        {
                            bool flag = true;
                            try
                            {
                                result.ListSetting = result.ExprFCLAllocationPrice != null ? Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATContract_Setting>>(result.ExprFCLAllocationPrice) : null;
                                if (result.ListSetting == null || result.ListSetting.Count == 0)
                                {
                                    flag = false;
                                }
                            }
                            catch
                            {
                                flag = false;
                            }
                            if (!flag)
                            {
                                result.ListSetting = new List<DTOCATContract_Setting>();
                                foreach (var item in model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceOfOrder))
                                {
                                    DTOCATContract_Setting itemCat = new DTOCATContract_Setting();
                                    itemCat.ServiceOfOrderID = HelperContract.GetServiceOfOrder_First(model, item.ID);
                                    itemCat.Laden = 0;
                                    itemCat.GetEmpty = 0;
                                    itemCat.ReturnEmpty = 0;
                                    result.ListSetting.Add(itemCat);
                                }
                                string lstSetting = Newtonsoft.Json.JsonConvert.SerializeObject(result.ListSetting);
                                CATContractSetting_Save(lstSetting, id);
                            }

                        }

                        if (result != null)
                        {
                            var transportModeID = result.TransportModeID.HasValue ? HelperContract.GetTransportMode(model, result.TransportModeID.Value) : -1;
                            result.TypeOfMode = transportModeID == iFCL ? 1 : transportModeID == iFTL ? 2 : transportModeID == iLTL ? 3 : 0;
                        }

                        return result;
                    }
                    else
                    {
                        var result = new DTOCATContract();
                        result.ID = -1;
                        result.AllowCoLoad = true;
                        result.TransportModeID = HelperContract.GetTransportMode_First(model, iFCL);
                        result.TypeOfContractID = iMain;
                        //result.ServiceOfOrderID = -(int)SYSVarType.ServiceOfOrderExport;
                        result.TypeOfContractDateID = -(int)SYSVarType.TypeOfContractDateRequest;
                        result.SignDate = DateTime.Now.Date;
                        result.EffectDate = DateTime.Now.Date;
                        result.ExpiredDate = DateTime.Now.Date.AddDays(1);
                        result.IsDisabled = false;
                        result.TypeOfMode = 0;
                        result.PriceInDay = false;

                        result.ListSetting = new List<DTOCATContract_Setting>();
                        foreach (var item in model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceOfOrder))
                        {
                            DTOCATContract_Setting itemCat = new DTOCATContract_Setting();
                            itemCat.ServiceOfOrderID = HelperContract.GetServiceOfOrder_First(model, item.ID);
                            itemCat.Laden = 0;
                            itemCat.GetEmpty = 0;
                            itemCat.ReturnEmpty = 0;
                            result.ListSetting.Add(itemCat);
                        }
                        return result;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSContract_Save(DTOCATContract item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int result = -1;
                    result = HelperContract.Contract_Save(model, Account, item, -(int)SYSVarType.TypeOfCustomerCUS);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Contract_Delete(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSContract_Data CUSContract_Data(int id)
        {
            try
            {
                DTOCUSContract_Data result = new DTOCUSContract_Data();
                using (var model = new DataEntities())
                {
                    int iBoth = -(int)SYSVarType.TypeOfCustomerBOTH;
                    int iCus = -(int)SYSVarType.TypeOfCustomerCUS;
                    var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == id);
                    int customerid = 0;
                    if (contract != null)
                        customerid = contract.CustomerID.Value;
                    result.ListCustomer = model.CUS_Customer.Where(c => c.IsSystem == false && (c.TypeOfCustomerID == iBoth || c.TypeOfCustomerID == iCus)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();

                    result.ListCompany = model.CUS_Company.Where(c => c.CUS_Customer.IsSystem == false && (c.CUS_Customer.TypeOfCustomerID == iBoth || c.CUS_Customer.TypeOfCustomerID == iCus)).Select(c => new DTOCUSCompany
                    {
                        ID = c.ID,
                        CustomerOwnID = c.CustomerOwnID,
                        CustomerRelateID = c.CustomerRelateID,
                        CustomerRelateCode = c.CUS_Customer1.Code,
                        CustomerRelateName = c.CUS_Customer1.CustomerName
                    }).ToList();

                    result.ListMaterial = model.FLM_Material.Select(c => new FLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        MaterialName = c.MaterialName,
                        GroupOfMaterialID = c.GroupOfMaterialID,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName
                    }).ToList();

                    result.ListKPI = model.KPI_KPI.Where(c => c.KPITypeID == -(int)SYSVarType.KPITypeOrder).Select(c => new KPIKPI
                    {
                        ID = c.ID,
                        Code = c.Code,
                        KPIName = c.KPIName,
                        TypeOfKPIName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    result.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    result.ListProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == customerid).Select(c => new CUSProduct
                        {
                            ID = c.ID,
                            GroupOfProductID = c.GroupOfProductID,
                            ProductName = c.ProductName,
                            Code = c.Code
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSContract_ByCustomerList(string request, int customerID)
        {
            try
            {
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CUS_Customer.IsSystem == false &&
                        (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) &&
                        c.CustomerID > 0 && c.CustomerID.Value == customerID).Select(c => new DTOCATContract
                        {
                            ID = c.ID,
                            CustomerID = c.CustomerID,
                            ContractNo = c.ContractNo,
                            EffectDate = c.EffectDate,
                            ExpiredDate = c.ExpiredDate,
                            SignDate = c.SignDate,
                            SignBy = c.SignBy,
                            PostionName = c.PostionName,
                            Content = c.Content,
                            DisplayName = c.DisplayName,
                            IsSKU = c.IsSKU,
                            UseRegion = c.UseRegion,
                            TypeOfContractDateID = c.TypeOfContractDateID,
                            TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                            TypeOfCustomerID = c.TypeOfCustomerID,
                            SYSCustomerID = c.SYSCustomerID,
                            CompanyID = c.CompanyID,
                            CustomerName = c.CUS_Customer.CustomerName,
                            CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                            //ServiceOfOrderID = c.ServiceOfOrderID,
                            TransportModeID = c.TransportModeID,
                            TypeOfContractID = c.TypeOfContractID,
                            UseLoadLocation = c.UseLoadLocation,
                            TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.SYS_Var.ValueOfVar : string.Empty,
                            TypeOfCustomerName = c.SYS_Var2.ValueOfVar,
                            LeadTime = c.LeadTime,
                            AllowCoLoad = c.AllowCoLoad,
                            IsDisabled = c.CAT_ContractTerm.Count > 0,
                            PriceInDay = c.PriceInDay
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContract>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSContract_ByCompanyList(string request, int customerID)
        {
            try
            {
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CUS_Customer.IsSystem == false &&
                        (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) &&
                        c.CustomerID > 0 && c.CompanyID > 0 && c.CUS_Company.CustomerRelateID == customerID).Select(c => new DTOCATContract
                        {
                            ID = c.ID,
                            CustomerID = c.CustomerID,
                            ContractNo = c.ContractNo,
                            EffectDate = c.EffectDate,
                            ExpiredDate = c.ExpiredDate,
                            SignDate = c.SignDate,
                            SignBy = c.SignBy,
                            PostionName = c.PostionName,
                            Content = c.Content,
                            DisplayName = c.DisplayName,
                            IsSKU = c.IsSKU,
                            UseRegion = c.UseRegion,
                            TypeOfContractDateID = c.TypeOfContractDateID,
                            TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                            TypeOfCustomerID = c.TypeOfCustomerID,
                            SYSCustomerID = c.SYSCustomerID,
                            CompanyID = c.CompanyID,
                            CustomerName = c.CUS_Customer.CustomerName,
                            CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                            //ServiceOfOrderID = c.ServiceOfOrderID,
                            TransportModeID = c.TransportModeID,
                            TypeOfContractID = c.TypeOfContractID,
                            UseLoadLocation = c.UseLoadLocation,
                            TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.SYS_Var.ValueOfVar : string.Empty,
                            TypeOfCustomerName = c.SYS_Var2.ValueOfVar,
                            LeadTime = c.LeadTime,
                            AllowCoLoad = c.AllowCoLoad,
                            IsDisabled = c.CAT_ContractTerm.Count > 0,
                            PriceInDay = c.PriceInDay
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContract>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        #endregion

        #region CODefault

        /// <summary>
        /// Danh sách thiết lập trọng tải container
        /// </summary>
        /// <param name="request"></param>
        /// <param name="contractID"></param>
        /// <returns></returns>
        public DTOResult CUSContract_CODefault_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractCODefault
                    {
                        ID = c.ID,
                        PackingID = c.PackingID,
                        Ton = c.Ton,
                        ContractID = c.ContractID,
                        PackingName = c.CAT_Packing.PackingName,
                        IsChoose = false,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContractCODefault>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSContract_CODefault_NotInList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstPackingID = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID).Select(c => c.PackingID).Distinct().ToList();
                    var query = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F) && !lstPackingID.Contains(c.ID)).Select(c => new DTOCATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID,
                        TypeOfPackageName = c.SYS_Var.ValueOfVar,
                        IsChoose = false,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_CODefault_NotIn_SaveList(List<DTOCATPacking> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID && c.PackingID == item.ID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_ContractCODefault();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractID = contractID;
                            obj.PackingID = item.ID;
                            model.CAT_ContractCODefault.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_CODefault_Delete(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lst)
                    {
                        var obj = model.CAT_ContractCODefault.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceCOContainer.Where(c => c.PackingID == obj.PackingID && c.CAT_ContractRouting.ContractID == obj.ContractID))
                                model.CAT_PriceCOContainer.Remove(detail);
                            foreach (var detail in model.CAT_PriceCOService.Where(c => c.PackingID == obj.PackingID && c.CAT_Price.CAT_ContractTerm.ContractID == obj.ContractID))
                                model.CAT_PriceCOService.Remove(detail);

                            model.CAT_ContractCODefault.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu danh sách thiết lập trọng tải container
        /// </summary>
        /// <param name="data"></param>
        /// <param name="contractID"></param>
        public void CUSContract_CODefault_Update(List<DTOCATContractCODefault> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_ContractCODefault.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.Ton = item.Ton;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Routing

        public DTOResult CUSContract_Routing_List(int contractID, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        RoutingParentID = c.CAT_Routing.ParentID,
                        ContractID = c.ContractID,
                        RoutingID = c.RoutingID,
                        CATCode = c.CAT_Routing.Code,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        LeadTime = c.LeadTime,
                        Zone = c.Zone,
                        IsDelete = c.CAT_PriceCOContainer.Count > 0 || c.CAT_PriceDIGroupProduct.Count > 0 || c.CAT_PriceGroupVehicle.Count > 0,
                        SortOrder = c.SortOrder,
                        ContractTermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                        ContractTermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                        ContractRoutingTypeID = c.ContractRoutingTypeID,
                        ContractRoutingType = c.SYS_Var.ValueOfVar,
                        IsArea = c.CAT_Routing.RoutingAreaFromID.HasValue ? true : c.CAT_Routing.RoutingAreaToID.HasValue ? true : false,
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    var list = query.Data.Cast<DTOCATContractRouting>().ToList();

                    foreach (DTOCATContractRouting item in list)
                    {
                        var iExport = (int)KPICode.Export;
                        var iOPS = (int)KPICode.OPS;
                        var iPOD = (int)KPICode.POD;

                        var lstKPI = model.KPI_KPI.Where(c => c.ID == iExport || c.ID == iOPS || c.ID == iPOD).Select(c => new DTOContractKPITime
                            {
                                ID = -1,
                                KPIID = c.ID,
                                KPICode = c.Code,
                                KPIName = c.KPIName,
                                // TypeOfKPIID = c.KPI_KPI.TypeOfKPIID,
                                TypeOfKPIName = c.SYS_Var.ValueOfVar,
                                Expression = "",
                                CompareField = ""
                            }).ToList();

                        item.ListKPI = model.CAT_ContractKPITime.Where(c => c.ContractRoutingID == item.ID).Select(c => new DTOContractKPITime
                        {
                            ID = c.ID,
                            KPIID = c.KPIID,
                            KPICode = c.KPI_KPI.Code,
                            KPIName = c.KPI_KPI.KPIName,
                            // TypeOfKPIID = c.KPI_KPI.TypeOfKPIID,
                            TypeOfKPIName = c.KPI_KPI.SYS_Var.ValueOfVar,
                            Expression = c.Expression,
                            CompareField = c.CompareField
                        }).ToList();

                        if (item.ListKPI != null && item.ListKPI.Count > 0)
                        {
                            foreach (var objKPI in lstKPI)
                            {
                                var hasKPI = false;
                                foreach (var objKPITime in item.ListKPI)
                                {
                                    if (objKPI.KPIID == objKPITime.KPIID)
                                    {
                                        hasKPI = true;
                                        break;
                                    }
                                }
                                if (!hasKPI)
                                {
                                    item.ListKPI.Add(objKPI);
                                }
                            }
                        }
                        else
                        {
                            item.ListKPI = lstKPI;
                        }
                        item.ListKPI.OrderBy(c => c.KPICode);
                    }
                    result.Total = query.Total;
                    result.Data = list;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_Routing_Save(DTOCATContractRouting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_ContractRouting.Count(c => c.ID != item.ID && c.ContractID == item.ContractID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");

                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == item.ContractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();


                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0)
                        lastSortOrder = objLast.SortOrder;
                    lastSortOrder++;

                    var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        //Xóa cung đường trong bảng giá khi đổi từ giá sang KPI
                        if ((item.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypeKPI && obj.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice) || (obj.ContractTermID > 0 && obj.ContractTermID != item.ContractTermID))
                        {
                            HelperContract.CUSContract_Routing_RemoveInPrice(obj.ID, obj.ContractID, model);
                        }
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        obj.Zone = item.Zone;
                        obj.LeadTime = item.LeadTime;
                        obj.SortOrder = item.SortOrder > 0 ? item.SortOrder : lastSortOrder;

                        if (item.ContractTermID > 0)
                            obj.ContractTermID = item.ContractTermID;
                        else obj.ContractTermID = null;

                        obj.ContractRoutingTypeID = item.ContractRoutingTypeID;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public string CUSContract_Routing_LeadTime_Check(string sExpression, DateTime requestDate)
        {
            try
            {
                string result = string.Empty;
                try
                {
                    var registry = new ExpressionEvaluator.TypeRegistry();
                    registry.RegisterSymbol("requestdate", requestDate, typeof(DateTime));
                    var compiler = new ExpressionEvaluator.CompiledExpression(sExpression);
                    compiler.TypeRegistry = registry;
                    result = compiler.Eval().ToString();
                    return result;
                }
                catch (Exception)
                {
                    return "Sai công thức";
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_Routing_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var child in model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceCOContainer.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceDIGroupProduct.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceDILevelGroupProduct.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceDILevelGroupProduct.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceGroupVehicle.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceGVLevelGroupVehicle.Remove(child);
                        }
                        foreach (var child in model.CAT_ContractKPITime.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_ContractKPITime.Remove(child);
                        }

                        // cung duong chỉ có 1 khách hàng xài +  chưa có đơn hàng thì xóa khỏi khách hàng 
                        if (model.CUS_Routing.Count(c => c.RoutingID == obj.RoutingID) == 1)
                        {
                            if (model.ORD_GroupProduct.Count(c => c.CUSRoutingID == obj.ID) == 0)
                            {
                                var objCUS = model.CUS_Routing.FirstOrDefault(c => c.RoutingID == obj.RoutingID);
                                if (objCUS != null) model.CUS_Routing.Remove(objCUS);
                            }

                        }

                        model.CAT_ContractRouting.Remove(obj);

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_Routing_NotIn_Delete(int id, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objCus = model.CUS_Routing.FirstOrDefault(c => c.ID == id);
                    if (objCus == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu CusRouting");
                    if (model.CAT_ContractRouting.Count(c => c.ContractID != contractID && c.RoutingID == objCus.RoutingID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã sử dụng cho hơp đồng khác, không thể xóa");
                    if (model.ORD_Order.Count(c => c.CUSRoutingID == objCus.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã sử dụng cho đơn hàng, không thể xóa");
                    if (model.ORD_Container.Count(c => c.CUSRoutingID == objCus.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa, có dữ liệu ORD_Container");
                    if (model.ORD_GroupProduct.Count(c => c.CUSRoutingID == objCus.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa, có dữ liệu ORD_GroupProduct");

                    int CusID = objCus.CustomerID;
                    int RouteID = objCus.RoutingID;

                    model.CUS_Routing.Remove(objCus);

                    if (model.CUS_Routing.Count(c => c.RoutingID == CusID && c.CustomerID != RouteID) > 0)
                    {

                        var objCAT = model.CAT_Routing.FirstOrDefault(c => c.ID == RouteID);
                        if (objCAT != null)
                        {
                            foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.CATRoutingID == objCAT.ID))
                            {
                                model.OPS_DITOGroupProduct.Remove(item);
                            }
                            model.CAT_Routing.Remove(objCAT);
                        }
                    }



                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSContract_Routing_NotIn_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => c.RoutingID).ToList();
                    var objCus = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int cusID = objCus != null && objCus.CustomerID.HasValue ? objCus.CustomerID.Value : 0;
                    var query = model.CUS_Routing.Where(c => c.CustomerID == cusID && !lstID.Contains(c.RoutingID) && c.CAT_Routing.Code != string.Empty).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        ParentID = c.CAT_Routing.ParentID,
                        LocationFromID = c.CAT_Routing.LocationFromID,
                        LocationToID = c.CAT_Routing.LocationToID,
                        EDistance = c.CAT_Routing.EDistance,
                        EHours = c.CAT_Routing.EHours,
                        Code = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        RoutingAreaFromID = c.CAT_Routing.RoutingAreaFromID,
                        RoutingAreaToID = c.CAT_Routing.RoutingAreaToID,
                        IsAreaLast = c.CAT_Routing.IsAreaLast,
                        IsUse = c.CAT_Routing.IsUse,
                        LocationFromName = c.CAT_Routing.LocationFromID.HasValue ? c.CAT_Routing.CAT_Location.Location : string.Empty,
                        LocationToName = c.CAT_Routing.LocationToID.HasValue ? c.CAT_Routing.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.CAT_Routing.RoutingAreaFromID.HasValue ? c.CAT_Routing.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.CAT_Routing.RoutingAreaToID.HasValue ? c.CAT_Routing.CAT_RoutingArea1.AreaName : string.Empty,
                        ParentName = c.CAT_Routing.ParentID.HasValue ? c.CAT_Routing.CAT_Routing2.RoutingName : string.Empty,
                        Note = c.CAT_Routing.Note
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSContract_Routing_CATNotIn_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objCus = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int cusID = objCus != null && objCus.CustomerID > 0 ? objCus.CustomerID.Value : 0;
                    var lstID = model.CUS_Routing.Where(c => c.CustomerID == cusID).Select(c => c.RoutingID).ToList();
                    var query = model.CAT_Routing.Where(c => !string.IsNullOrEmpty(c.Code) && !lstID.Contains(c.ID)).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        RoutingID = c.ID,
                        ParentID = c.ParentID,
                        LocationFromID = c.LocationFromID,
                        LocationToID = c.LocationToID,
                        EDistance = c.EDistance,
                        EHours = c.EHours,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        RoutingAreaFromID = c.RoutingAreaFromID,
                        RoutingAreaToID = c.RoutingAreaToID,
                        IsAreaLast = c.IsAreaLast,
                        IsUse = c.IsUse,
                        LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                        LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                        ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_Routing_CATNotIn_Save(List<DTOCATRouting> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng");

                    int cusID = objContract.CustomerID > 0 ? objContract.CustomerID.Value : 0;
                    if (cusID == 0) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khách hàng");

                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == objContract.ID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;

                    lastSortOrder++;

                    foreach (var item in data)
                    {
                        CUS_Routing objCus = new CUS_Routing();
                        objCus.CreatedBy = Account.UserName;
                        objCus.CreatedDate = DateTime.Now;
                        objCus.CustomerID = cusID;
                        objCus.RoutingID = item.RoutingID;
                        objCus.Code = item.Code;
                        objCus.RoutingName = item.RoutingName;
                        model.CUS_Routing.Add(objCus);

                        CAT_ContractRouting obj = new CAT_ContractRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        obj.RoutingID = item.RoutingID;
                        obj.SortOrder = lastSortOrder;
                        obj.ContractRoutingTypeID = -(int)SYSVarType.ContractRoutingTypePrice;
                        model.CAT_ContractRouting.Add(obj);

                        lastSortOrder++;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_Routing_Insert(List<DTOCATRouting> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;
                    lastSortOrder++;

                    foreach (var item in data)
                    {
                        if (model.CAT_ContractRouting.Count(c => c.ContractID == contractID && c.RoutingID == item.RoutingID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập!");

                        CAT_ContractRouting obj = new CAT_ContractRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        obj.RoutingID = item.RoutingID;
                        obj.SortOrder = lastSortOrder;
                        obj.ContractRoutingTypeID = -(int)SYSVarType.ContractRoutingTypePrice;
                        model.CAT_ContractRouting.Add(obj);
                        lastSortOrder++;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCUSContractRouting_Import> CUSContract_Routing_Export(int contractID)
        {
            try
            {
                List<DTOCUSContractRouting_Import> result = new List<DTOCUSContractRouting_Import>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new DTOCUSContractRouting_Import
                    {
                        CATRoutingID = c.RoutingID,
                        CATRoutingCode = c.CAT_Routing.Code,
                        CATRoutingName = c.CAT_Routing.RoutingName,
                        ContractRoutingID = c.ID,
                        ContractRoutingCode = c.Code,
                        ContractRoutingName = c.RoutingName,
                        Zone = c.Zone,
                        LeadTime = c.LeadTime,
                        LeadTimeETA = c.LeadTimeETA,
                        LeadTimeETD = c.LeadTimeETD,
                        SortOrder = c.SortOrder,
                        ContractTermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                        ContractTermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                        IsArea = c.CAT_Routing.RoutingAreaFromID > 0 ? true : false,

                        LocationFromID = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.LocationFromID.Value : -1,
                        LocationFromCode = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.CAT_Location.Code : string.Empty,
                        LocationToID = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.LocationToID.Value : -1,
                        LocationToCode = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.CAT_Location1.Code : string.Empty,

                        AreaFromID = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.RoutingAreaFromID.Value : -1,
                        AreaFromCode = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.Code : string.Empty,
                        AreaToID = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.RoutingAreaToID.Value : -1,
                        AreaToCode = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.Code : string.Empty,

                        ContractRoutingType = c.SYS_Var.ValueOfVar,
                        ContractRoutingTypeCode = c.SYS_Var.Code,
                        ContractRoutingTypeID = c.ContractRoutingTypeID,
                    }).OrderBy(c => c.SortOrder).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_Routing_Import(List<DTOCUSContractRouting_Import> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == contractID);
                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hơp đồng");
                    int CusID = objContract.CustomerID.Value;
                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;

                    var objLastOnFile = data.Where(c => c.ExcelSuccess && c.SortOrder > 0).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                    int lastOnFile = 0;
                    if (objLastOnFile != null && objLastOnFile.SortOrder > 0) lastOnFile = objLastOnFile.SortOrder;
                    if (lastOnFile > lastSortOrder) lastSortOrder = lastOnFile;
                    lastSortOrder++;
                    foreach (var item in data.Where(c => c.ExcelSuccess))
                    {
                        #region lưu cat routing(nếu là mới)
                        var objCAT = model.CAT_Routing.FirstOrDefault(c => c.ID == item.CATRoutingID);
                        if (objCAT == null)
                        {
                            objCAT = new CAT_Routing();
                            objCAT.CreatedBy = Account.UserName;
                            objCAT.CreatedDate = DateTime.Now;

                            objCAT.Code = item.CATRoutingCode;
                            objCAT.RoutingName = item.CATRoutingName;
                            objCAT.IsAreaLast = false;
                            objCAT.IsUse = true;
                            objCAT.IsLocation = false;
                            objCAT.IsChecked = false;

                            if (item.LocationFromID > 0)
                                objCAT.LocationFromID = item.LocationFromID;
                            else objCAT.LocationFromID = null;
                            if (item.LocationToID > 0)
                                objCAT.LocationToID = item.LocationToID;
                            else objCAT.LocationToID = null;

                            if (item.AreaFromID > 0)
                                objCAT.RoutingAreaFromID = item.AreaFromID;
                            else objCAT.RoutingAreaFromID = null;
                            if (item.AreaToID > 0)
                                objCAT.RoutingAreaToID = item.AreaToID;
                            else objCAT.RoutingAreaToID = null;

                            model.CAT_Routing.Add(objCAT);
                        }
                        else
                        {
                            var count = model.CUS_Routing.Count(c => c.RoutingID == objCAT.ID && c.CustomerID != objContract.CustomerID);

                            if (count == 0)
                            {
                                if (item.LocationFromID > 0)
                                    objCAT.LocationFromID = item.LocationFromID;
                                else objCAT.LocationFromID = null;
                                if (item.LocationToID > 0)
                                    objCAT.LocationToID = item.LocationToID;
                                else objCAT.LocationToID = null;

                                if (item.AreaFromID > 0)
                                    objCAT.RoutingAreaFromID = item.AreaFromID;
                                else objCAT.RoutingAreaFromID = null;
                                if (item.AreaToID > 0)
                                    objCAT.RoutingAreaToID = item.AreaToID;
                                else objCAT.RoutingAreaToID = null;
                            }
                        }
                        #endregion

                        #region lưu cus routing
                        if (!(item.CUSRoutingID > 0))
                        {
                            CUS_Routing objCus = new CUS_Routing();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = CusID;
                            objCus.CAT_Routing = objCAT;
                            objCus.Code = item.CATRoutingCode;
                            objCus.RoutingName = item.CATRoutingName;
                            model.CUS_Routing.Add(objCus);
                        }
                        #endregion

                        #region Lưu contract routing
                        var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == item.ContractRoutingID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;

                            //Xóa cung đường trong bảng giá khi đổi từ giá sang KPI hoac khi đổi phụ lục
                            if ((item.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypeKPI && obj.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice) || (obj.ContractTermID > 0 && obj.ContractTermID != item.ContractTermID))
                            {
                                HelperContract.CUSContract_Routing_RemoveInPrice(obj.ID, obj.ContractID, model);
                            }
                        }
                        else
                        {
                            obj = new CAT_ContractRouting();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.CAT_Routing = objCAT;
                            obj.ContractID = contractID;
                            model.CAT_ContractRouting.Add(obj);
                        }
                        obj.Code = item.ContractRoutingCode;
                        obj.RoutingName = item.ContractRoutingName;
                        obj.Zone = item.Zone;
                        obj.LeadTime = item.LeadTime;

                        if (item.SortOrder > 0)
                            obj.SortOrder = item.SortOrder;
                        else
                        {
                            obj.SortOrder = lastSortOrder;
                            lastSortOrder++;
                        }

                        if (item.ContractTermID > 0)
                            obj.ContractTermID = item.ContractTermID;
                        else obj.ContractTermID = null;

                        obj.ContractRoutingTypeID = item.ContractRoutingTypeID;
                        #endregion

                    }
                    model.SaveChanges();


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSContractRoutingData CUSContract_RoutingByCus_List(int customerID, int contractID)
        {
            try
            {
                DTOCUSContractRoutingData result = new DTOCUSContractRoutingData();
                using (var model = new DataEntities())
                {
                    result.ListCUSRouting = model.CUS_Routing.Where(c => c.CustomerID == customerID).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        RoutingID = c.RoutingID,
                        Code = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        RoutingParentID = c.CAT_Routing.ParentID
                    }).ToList();

                    result.ListContractRouting = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        Code = c.Code,
                    }).ToList();

                    result.ListCATRouting = model.CAT_Routing.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                    }).ToList();

                    result.ListContractTerm = model.CAT_ContractTerm.Where(c => c.ContractID == contractID && c.IsAllRouting == false).Select(c => new DTOContractTerm
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TermName = c.TermName,
                            DisplayName = c.DisplayName,
                        }).ToList();

                    result.ListLocation = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new CATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location
                        }).ToList();
                    result.ListArea = model.CAT_RoutingArea.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new CATRoutingArea
                        {
                            ID = c.ID,
                            Code = c.Code,
                            AreaName = c.AreaName
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_KPI_Save(List<DTOContractKPITime> data, int routingID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_ContractKPITime.FirstOrDefault(c => c.KPIID == item.KPIID && c.ContractRoutingID == routingID);
                        if (obj == null)
                        {
                            obj = new CAT_ContractKPITime();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractRoutingID = routingID;
                            obj.KPIID = item.KPIID;
                            model.CAT_ContractKPITime.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Expression = item.Expression;
                        obj.CompareField = item.CompareField;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSContract_KPI_Routing_List(string request, int contractID, int routingID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractRouting.Where(c => c.ContractID == contractID && c.ID != routingID).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        CATCode = c.CAT_Routing.Code,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        LeadTime = c.LeadTime,
                        Zone = c.Zone,
                        IsDelete = false
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContractRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DateTime? CUSContract_KPI_Check_Expression(string sExpression, KPIKPITime item, double zone, double leadTime, List<DTOContractKPITime> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckDate(sExpression, item, zone, leadTime, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool? CUSContract_KPI_Check_Hit(string sExpression, string sField, KPIKPITime item, double zone, double leadTime, List<DTOContractKPITime> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckBool(sExpression, sField, item, zone, leadTime, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_KPI_Routing_Apply(List<DTOCATContractRouting> data, int routingID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objRouting = model.CAT_ContractRouting.Where(c => c.ID == routingID).Select(c => new
                    {
                        ContractID = c.ContractID,
                        ListKPI = c.CAT_ContractKPITime.Select(o => new DTOContractKPITime
                        {
                            KPIID = o.KPIID,
                            Expression = o.Expression,
                            CompareField = o.CompareField
                        }).ToList()
                    }).FirstOrDefault();
                    if (objRouting != null)
                    {
                        foreach (var item in data)
                        {
                            foreach (var o in objRouting.ListKPI)
                            {
                                var obj = model.CAT_ContractKPITime.FirstOrDefault(c => c.KPIID == o.KPIID && c.ContractRoutingID == item.ID);
                                if (obj == null)
                                {
                                    obj = new CAT_ContractKPITime();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractRoutingID = item.ID;
                                    obj.KPIID = o.KPIID;
                                    model.CAT_ContractKPITime.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Expression = o.Expression;
                                obj.CompareField = o.CompareField;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOContractTerm> CUSContract_Routing_ContractTermList(int contractID)
        {
            try
            {
                List<DTOContractTerm> result = new List<DTOContractTerm>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractTerm.Where(c => c.ContractID == contractID && c.IsAllRouting == false).Select(c => new DTOContractTerm
                          {
                              ID = c.ID,
                              Code = c.Code,
                              TermName = c.TermName,
                              DisplayName = c.DisplayName,
                          }).ToList();
                    DTOContractTerm itemNull = new DTOContractTerm { ID = -1, Code = string.Empty, TermName = string.Empty, DisplayName = string.Empty };
                    result.Insert(0, itemNull);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region tạo mới cung duong trong hợp đồng
        public DTOCATRouting CUSContract_NewRouting_Get(int ID)
        {
            try
            {
                DTOCATRouting result = new DTOCATRouting { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Routing.Where(c => c.ID == ID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            ParentID = c.ParentID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            EDistance = c.EDistance,
                            EHours = c.EHours,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            RoutingAreaFromID = c.RoutingAreaFromID,
                            RoutingAreaToID = c.RoutingAreaToID,
                            IsAreaLast = c.IsAreaLast,
                            IsUse = c.IsUse,
                            LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                            LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                            AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                            AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                            IsLocation = c.LocationFromID.HasValue ? true : c.LocationToID.HasValue ? true : false,
                            IsArea = c.RoutingAreaFromID.HasValue ? true : c.RoutingAreaToID.HasValue ? true : false,
                            IsChangeAble = c.LocationFromID == null && c.LocationToID == null && c.RoutingAreaFromID == null && c.RoutingAreaToID == null,
                            ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                            Note = c.Note
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.IsUse = true;
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSContract_NewRouting_Save(DTOCATRouting item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Routing.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");

                    if ((item.RoutingAreaFromID < 0 && item.RoutingAreaToID < 0) || (item.RoutingAreaFromID > 0 && !(item.RoutingAreaToID > 0)) || (item.RoutingAreaToID > 0 && !(item.RoutingAreaFromID > 0)))
                        throw FaultHelper.BusinessFault(null, null, "Cung đường theo khu vực thiếu khu vực bắt đầu hoặc kết thúc");
                    if ((item.LocationFromID < 0 && item.LocationToID < 0) || (item.LocationFromID > 0 && !(item.LocationToID > 0)) || (item.LocationToID > 0 && !(item.LocationFromID > 0)))
                        throw FaultHelper.BusinessFault(null, null, "Cung đường theo điểm thiếu điểm bắt đầu hoặc kết thúc");

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hơp đồng ID: " + contractID);
                    int cusID = objContract.CustomerID > 0 ? objContract.CustomerID.Value : objContract.SYSCustomerID;

                    var obj = model.CAT_Routing.FirstOrDefault(c => c.ID == item.ID);

                    if (obj == null)
                    {
                        obj = new CAT_Routing();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.IsAreaLast = false;
                        obj.IsUse = true;
                        model.CAT_Routing.Add(obj);
                    }
                    else
                    {
                        // Edit thì ko hiện IsAreaLast
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        if (model.CUS_Routing.Where(c => c.RoutingID == item.ID && c.CustomerID != cusID).Count() > 0)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được khách hàng khác sử dụng không được thay đổi!");
                        }
                    }

                    obj.ParentID = null;
                    obj.LocationFromID = item.LocationFromID;
                    obj.LocationToID = item.LocationToID;
                    obj.EDistance = item.EDistance;
                    obj.EHours = item.EHours;
                    obj.Code = item.Code;
                    obj.RoutingName = item.RoutingName;
                    obj.RoutingAreaFromID = item.RoutingAreaFromID;
                    obj.RoutingAreaToID = item.RoutingAreaToID;

                    obj.Note = item.Note;
                    obj.IsLocation = false;
                    if (obj.LocationFromID > 0)
                        obj.IsLocation = true;

                    var objCus = model.CUS_Routing.FirstOrDefault(c => c.CustomerID == cusID && c.RoutingID == item.ID);
                    if (objCus == null)
                    {
                        objCus = new CUS_Routing();
                        objCus.CustomerID = cusID;
                        objCus.CAT_Routing = obj;
                        objCus.CreatedBy = Account.UserName;
                        objCus.CreatedDate = DateTime.Now;
                        model.CUS_Routing.Add(objCus);
                    }
                    else
                    {
                        objCus.ModifiedBy = Account.UserName;
                        objCus.ModifiedDate = DateTime.Now;
                    }
                    objCus.Code = item.Code;
                    objCus.RoutingName = item.RoutingName;

                    model.SaveChanges();

                    //if (obj.RoutingAreaFromID.HasValue)
                    //    RoutingAreaLocation_Update(model, obj.RoutingAreaFromID.Value);
                    //if (obj.RoutingAreaToID.HasValue)
                    //    RoutingAreaLocation_Update(model, obj.RoutingAreaToID.Value);

                    //model.SaveChanges();
                    return objCus.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //route by location
        public DTOResult CUSContract_NewRouting_LocationList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //route by area
        public DTOResult CUSContract_NewRouting_AreaList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingArea.Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRoutingArea>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public CATRoutingArea CUSContract_NewRouting_AreaGet(int ID)
        {
            try
            {
                CATRoutingArea result = new CATRoutingArea { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingArea.Where(c => c.ID == ID).Select(c => new CATRoutingArea
                        {
                            ID = c.ID,
                            Code = c.Code,
                            AreaName = c.AreaName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSContract_NewRouting_AreaSave(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_RoutingArea.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");

                    var obj = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_RoutingArea();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_RoutingArea.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.AreaName = item.AreaName;
                    obj.CodeNoUnicode = HelperString.RemoveSign4VietnameseString(obj.Code);
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_NewRouting_AreaDelete(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.CAT_Routing.Count > 0 || obj.CAT_Routing1.Count > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập cho khu vực này, không thể xóa!");

                        foreach (var temp in model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == obj.ID))
                            model.CAT_RoutingAreaDetail.Remove(temp);
                        foreach (var temp in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == obj.ID))
                            model.CAT_RoutingAreaLocation.Remove(temp);

                        model.CAT_RoutingArea.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_NewRouting_AreaRefresh(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (model.CAT_RoutingArea.Count(c => c.ID == item.ID && c.CAT_RoutingAreaLocation.Count > 0) > 0)
                    {
                        CUSContract_RoutingAreaLocation_Update(model, item.ID);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSContract_NewRouting_AreaDetailList(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID).Select(c => new DTOCATRoutingAreaDetail
                    {
                        ID = c.ID,
                        RoutingAreaID = c.RoutingAreaID,
                        ProvinceID = c.ProvinceID,
                        DistrictID = c.DistrictID,
                        WardID = c.WardID,
                        CountryID = c.CountryID,
                        CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                        WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                        ColID = c.ID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRoutingAreaDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATRoutingAreaDetail CUSContract_NewRouting_AreaDetailGet(int ID)
        {
            try
            {
                DTOCATRoutingAreaDetail result = new DTOCATRoutingAreaDetail { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingAreaDetail.Where(c => c.ID == ID).Select(c => new DTOCATRoutingAreaDetail
                        {
                            ID = c.ID,
                            RoutingAreaID = c.RoutingAreaID,
                            ProvinceID = c.ProvinceID,
                            DistrictID = c.DistrictID,
                            WardID = c.WardID,
                            CountryID = c.CountryID,
                            CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                            ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                            DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                            WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSContract_NewRouting_AreaDetailSave(DTOCATRoutingAreaDetail item, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item.ProvinceID == null)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập tỉnh thành!");

                    if (item.ProvinceID > 0 && item.DistrictID > 0)
                    {
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == null) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Đã có khu vực bao quát khu vực đã chọn"); ;
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == item.DistrictID && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Khu vực chi tiết này đã tồn tại!");
                    }
                    if (item.ProvinceID > 0 && !(item.DistrictID > 0))
                    {
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == null && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Khu vực chi tiết này đã tồn tại!"); ;
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID > 0 && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Đã tồn tại khu vực chi tiết, không thể thêm khu vực bao quát");
                    }

                    var obj = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_RoutingAreaDetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.RoutingAreaID = areaID;
                    obj.ProvinceID = item.ProvinceID > 0 ? item.ProvinceID : null;
                    obj.DistrictID = item.DistrictID > 0 ? item.DistrictID : null;
                    obj.WardID = item.WardID < 1 ? null : item.WardID;
                    obj.CountryID = item.CountryID;

                    if (obj.ID < 1)
                        model.CAT_RoutingAreaDetail.Add(obj);
                    model.SaveChanges();

                    CUSContract_RoutingAreaLocation_Update(model, areaID);
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_NewRouting_AreaDetailDelete(DTOCATRoutingAreaDetail item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_RoutingAreaDetail.Remove(obj);
                        model.SaveChanges();

                        CUSContract_RoutingAreaLocation_Update(model, obj.RoutingAreaID);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        private void CUSContract_RoutingAreaLocation_Update(DataEntities model, int areaID)
        {
            try
            {
                // Xóa area location cũ
                foreach (var item in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID))
                    model.CAT_RoutingAreaLocation.Remove(item);

                var lstWardID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.WardID.HasValue).Select(c => c.WardID.Value).Distinct().ToArray();
                var lstDistrictID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.DistrictID.HasValue && c.WardID == null).Select(c => c.DistrictID.Value).Distinct().ToArray();
                var lstProvinceID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.ProvinceID.HasValue && c.DistrictID == null && c.WardID == null).Select(c => c.ProvinceID.Value).Distinct().ToArray();

                var lstLocation = model.CAT_Location.Where(c => (c.WardID.HasValue && lstWardID.Contains(c.WardID.Value)) || lstDistrictID.Contains(c.DistrictID) || lstProvinceID.Contains(c.ProvinceID)).Select(c => c.ID).ToArray();
                foreach (var location in lstLocation)
                {
                    CAT_RoutingAreaLocation objLocation = new CAT_RoutingAreaLocation();
                    objLocation.CreatedBy = Account.UserName;
                    objLocation.CreatedDate = DateTime.Now;
                    objLocation.LocationID = location;
                    objLocation.RoutingAreaID = areaID;
                    model.CAT_RoutingAreaLocation.Add(objLocation);
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // area location
        public DTOResult CUSContract_NewRouting_AreaLocation_List(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => new DTOCATRoutingAreaLocation
                    {
                        ID = c.ID,
                        LocationID = c.CAT_Location.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        Country = c.CAT_Location.CAT_Country.CountryName,
                        Province = c.CAT_Location.CAT_Province.ProvinceName,
                        District = c.CAT_Location.CAT_District.DistrictName,
                        Ward = c.CAT_Location.CAT_Ward != null ? c.CAT_Location.CAT_Ward.WardName : "",
                        CreatedDate = c.CreatedDate,
                        TypeOfPartnerName = "",
                    }).ToDataSourceResult(CreateRequest(request));

                    foreach (DTOCATRoutingAreaLocation item in query.Data)
                    {
                        var lstTypeOfPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID).Select(c => c.CAT_Partner.SYS_Var.ValueOfVar).Distinct().ToList();
                        item.TypeOfPartnerName = string.Join(", ", lstTypeOfPartner);
                    }

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRoutingAreaLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSContract_NewRouting_AreaLocationNotIn_List(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    List<int> hasList = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => c.LocationID).ToList();
                    if (hasList != null)
                    {
                        var query = model.CAT_Location.Where(c => !hasList.Contains(c.ID)).Select(c => new DTOCATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            CountryName = c.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                            TypeOfPartnerName = "",
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        foreach (DTOCATLocation item in query.Data)
                        {
                            var lstTypeOfPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID).Select(c => c.CAT_Partner.SYS_Var.ValueOfVar).Distinct().ToList();
                            item.TypeOfPartnerName = string.Join(", ", lstTypeOfPartner);
                        }

                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                    else
                    {
                        var query = model.CAT_Location.Select(c => new DTOCATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            CountryName = c.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                            TypeOfPartnerName = "",
                        }).Distinct().ToDataSourceResult(CreateRequest(request));

                        foreach (DTOCATLocation item in query.Data)
                        {
                            var lstTypeOfPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID).Select(c => c.CAT_Partner.SYS_Var.ValueOfVar).Distinct().ToList();
                            item.TypeOfPartnerName = string.Join(", ", lstTypeOfPartner);
                        }
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_NewRouting_AreaLocationNotIn_Save(int areaID, List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objRoutingArea = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == areaID);
                    if (objRoutingArea != null)
                    {
                        foreach (var id in lstID)
                        {
                            var objLocation = model.CAT_Location.FirstOrDefault(c => c.ID == id);
                            if (objLocation != null)
                            {
                                var obj = new CAT_RoutingAreaLocation();
                                obj.LocationID = id;
                                obj.RoutingAreaID = areaID;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.CAT_RoutingAreaLocation.Add(obj);
                            }

                        }

                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khu vực");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_NewRouting_AreaLocation_Delete(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var id in lstID)
                    {
                        var obj = model.CAT_RoutingAreaLocation.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            model.CAT_RoutingAreaLocation.Remove(obj);
                        }

                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_NewRouting_AreaLocation_Copy(int areaID, List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var lstLocationID = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => c.LocationID).Distinct().ToList();

                    foreach (var ID in lstID)
                    {
                        foreach (var item in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == ID))
                        {
                            if (lstLocationID.Count(c => c == item.LocationID) == 0)
                            {
                                CAT_RoutingAreaLocation obj = new CAT_RoutingAreaLocation();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.RoutingAreaID = areaID;
                                obj.LocationID = item.LocationID;
                                model.CAT_RoutingAreaLocation.Add(obj);
                            }
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        public SYSExcel CUSContract_Routing_ExcelOnline_Init(int contractID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new
                        {
                            CATRoutingID = c.RoutingID,
                            CATRoutingCode = c.CAT_Routing.Code,
                            CATRoutingName = c.CAT_Routing.RoutingName,
                            ContractRoutingID = c.ID,
                            ContractRoutingCode = c.Code,
                            ContractRoutingName = c.RoutingName,
                            Zone = c.Zone,
                            LeadTime = c.LeadTime,
                            LeadTimeETA = c.LeadTimeETA,
                            LeadTimeETD = c.LeadTimeETD,
                            SortOrder = c.SortOrder,
                            ContractTermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                            ContractTermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                            IsArea = c.CAT_Routing.RoutingAreaFromID > 0 ? true : false,

                            LocationFromID = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.LocationFromID.Value : -1,
                            LocationFromCode = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.CAT_Location.Code : string.Empty,
                            LocationToID = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.LocationToID.Value : -1,
                            LocationToCode = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.CAT_Location1.Code : string.Empty,

                            AreaFromID = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.RoutingAreaFromID.Value : -1,
                            AreaFromCode = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.Code : string.Empty,
                            AreaToID = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.RoutingAreaToID.Value : -1,
                            AreaToCode = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.Code : string.Empty,

                            ContractRoutingType = c.SYS_Var.ValueOfVar,
                            ContractRoutingTypeCode = c.SYS_Var.Code,
                            ContractRoutingTypeID = c.ContractRoutingTypeID,
                        }).OrderBy(c => c.SortOrder).ToList();

                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[15];
                        arrColumnWidth[0] = 80;
                        for (int i = 1; i < 15; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(0, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(1, "Mã hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(2, "Tên hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(3, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(4, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(5, "Zone", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(6, "Leadtime", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(7, "Phụ lục hợp đồng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(8, "Mã loại cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(9, "Loại cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(10, "Theo khu vực", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(11, "Khu vực đi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(12, "Khu vực đến", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(13, "Điểm đi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(14, "Điểm đến", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(item.SortOrder));
                            cells.Add(HelperExcel.NewCell(item.CATRoutingCode));
                            cells.Add(HelperExcel.NewCell(item.CATRoutingName));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingCode));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingName));
                            cells.Add(HelperExcel.NewCell(item.Zone));
                            cells.Add(HelperExcel.NewCell(item.LeadTime));
                            cells.Add(HelperExcel.NewCell(item.ContractTermCode));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingTypeCode));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingType));
                            var IsArea = item.IsArea ? "x" : string.Empty;
                            cells.Add(HelperExcel.NewCell(IsArea));
                            cells.Add(HelperExcel.NewCell(item.AreaFromCode));
                            cells.Add(HelperExcel.NewCell(item.AreaToCode));
                            cells.Add(HelperExcel.NewCell(item.LocationFromCode));
                            cells.Add(HelperExcel.NewCell(item.LocationToCode));

                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CUSContract_Routing_ExcelOnline_Change(int contractID, int customerID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckTermID = colData++;
                    int colCheckTypeRouteID = colData++;
                    int colCheckAreaFromID = colData++;
                    int colCheckAreaToID = colData++;
                    int colCheckLocationFromID = colData++;
                    int colCheckLocationToID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    var lstCATCode = new List<string>();
                    var lstCUSCode = new List<string>();

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {

                            if (eRow.Cells[colData + 1].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData + 1].Value.ToString()))
                            {
                                lstCUSCode.Add(eRow.Cells[colData + 1].Value.ToString());
                            }

                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCATCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 0;

                        string dataSortOrder = HelperExcel.GetString(checkRow, colData++);
                        string dataCATCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATName = HelperExcel.GetString(checkRow, colData++);
                        string dataConCode = HelperExcel.GetString(checkRow, colData++);
                        string dataConName = HelperExcel.GetString(checkRow, colData++);
                        string dataZone = HelperExcel.GetString(checkRow, colData++);
                        string dataLeadtime = HelperExcel.GetString(checkRow, colData++);
                        string dataContractTerm = HelperExcel.GetString(checkRow, colData++);
                        string dataContractRoutingTypeCode = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataIsArea = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaTo = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationTo = HelperExcel.GetString(checkRow, colData++);

                        bool isContinue = true;
                        //Cung đường
                        //Mã hệ thống
                        isContinue = HelperExcel.Valid(dataCATCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 0, lstMessageError, true, 50);

                        if (isContinue)
                        {
                            var checkCAT = model.CAT_Routing.FirstOrDefault(c => c.Code == dataCATCode);
                            var CATId = 0;
                            if (checkCAT != null && isContinue)
                            {
                                CATId = checkCAT.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Contains(dataCATCode))
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else if (isContinue)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Contains(dataCATCode))
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            var CUSId = 0;
                            //Mã cung đường khách hàng
                            var checkCUS = model.CUS_Routing.FirstOrDefault(c => c.RoutingID == CATId && c.CustomerID == customerID);
                            if (checkCUS != null && isContinue)
                            {
                                CUSId = checkCUS.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }
                            else if (isContinue)
                            {
                                CUSId = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }

                            if (isContinue)
                                isContinue = HelperExcel.Valid(dataConCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 2, lstMessageError, true, 50);

                            if (isContinue)
                            {
                                //kiem tra ma trong hop dong
                                var ContractRoutingID = 0;
                                var checkContract = model.CAT_ContractRouting.FirstOrDefault(c => c.Code == dataConCode && c.ContractID == contractID);
                                if (checkContract == null && isContinue)
                                {
                                    //kiem tra tren file
                                    if (lstCUSCode.Contains(dataConCode))
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                        isContinue = false;
                                        if(isContinue)
                                        {
                                            if (model.CAT_ContractRouting.Where(c => c.Code != dataConCode && c.ContractID == contractID && c.RoutingID == CATId).Count() > 0)
                                            {
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                    }
                                }
                                else if (isContinue)
                                {
                                    if (checkContract.RoutingID != checkCAT.ID && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng trong hợp đồng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(4, lstMessageError));
                                        isContinue = false;
                                    }
                                    else if (isContinue)
                                    {
                                        ContractRoutingID = checkContract.ID;
                                        if (lstCUSCode.Contains(dataConCode) && isContinue)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                            isContinue = false;
                                        }
                                        else if (isContinue)
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                        }
                                    }
                                }
                            }
                        }

                        //Zone
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataZone, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 5, lstMessageError, false);

                        //Leadtime
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataLeadtime, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 6, lstMessageError, false);

                        //SortOrder
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 7, lstMessageError, false);

                        var TermID = 0;
                        //Term
                        if (!string.IsNullOrEmpty(dataContractTerm) && isContinue)
                        {
                            var checkTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.Code == dataContractTerm && c.ContractID == contractID && !c.IsAllRouting);
                            if (checkTerm != null)
                            {
                                TermID = checkTerm.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Phụ lục không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                isContinue = false;
                            }
                        }
                        else if (isContinue)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                        }

                        var ContractRoutingTypeID = 0;
                        //check loai cung đường
                        if (string.IsNullOrEmpty(dataContractRoutingTypeCode) && isContinue)
                        {
                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã loại cung đường");
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                            isContinue = false;
                        }
                        else if (isContinue)
                        {
                            var lstContractRoutingType = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ContractRoutingType);
                            var checkType = lstContractRoutingType.FirstOrDefault(c => c.Code == dataContractRoutingTypeCode);
                            if (checkType != null)
                            {
                                ContractRoutingTypeID = checkType.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeRouteID, ContractRoutingTypeID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại cung đường không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                isContinue = false;
                            }
                        }

                        var IsArea = false;
                        //theo khu vực/ điểm
                        if (string.IsNullOrEmpty(dataIsArea) && isContinue)
                            IsArea = false;
                        else
                            IsArea = true;


                        var AreaFromID = 0;
                        var AreaToID = 0;
                        var LocationFromID = 0;
                        var LocationToID = 0;
                        //check khu vuc
                        if (IsArea && isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataAreaFrom) && isContinue)
                            {
                                var checkArea = model.CAT_RoutingArea.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataAreaFrom);
                                if (checkArea != null)
                                {
                                    AreaFromID = checkArea.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataAreaTo))
                                {
                                    var checkArea = model.CAT_RoutingArea.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataAreaTo);
                                    if (checkArea != null)
                                    {
                                        AreaToID = checkArea.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            if (isContinue)
                            {
                                LocationFromID = LocationToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                            }
                        }
                        else if (isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataLocationFrom) && isContinue)
                            {
                                var checkLo = model.CAT_Location.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataLocationFrom);
                                if (checkLo != null)
                                {
                                    LocationFromID = checkLo.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue) {
                                if (!string.IsNullOrEmpty(dataLocationTo) && isContinue)
                                {
                                    var checkLo = model.CAT_Location.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataLocationTo);
                                    if (checkLo != null)
                                    {
                                        LocationToID = checkLo.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            if (isContinue) {
                                AreaFromID = AreaToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSContract_Routing_ExcelOnline_Import(int contractID, int customerID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOCUSContractRoutingData resRouting = new DTOCUSContractRoutingData();
                    resRouting = CUSContract_RoutingByCus_List(customerID, contractID);

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckTermID = colData++;
                    int colCheckTypeRouteID = colData++;
                    int colCheckAreaFromID = colData++;
                    int colCheckAreaToID = colData++;
                    int colCheckLocationFromID = colData++;
                    int colCheckLocationToID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.CAT_Field.Select(c => new { c.ID, c.Code }).ToList();
                    var lstContractRoutingType = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ContractRoutingType);

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCATCode = new List<string>();
                    var lstCUSCode = new List<string>();

                    colData = 1;
                    failCurrent = 0;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData + 1].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData + 1].Value.ToString()))
                            {
                                lstCUSCode.Add(eRow.Cells[2].Value.ToString());
                            }

                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCATCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 0;
                        string dataSortOrder = HelperExcel.GetString(checkRow, colData++);
                        string dataCATCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATName = HelperExcel.GetString(checkRow, colData++);
                        string dataConCode = HelperExcel.GetString(checkRow, colData++);
                        string dataConName = HelperExcel.GetString(checkRow, colData++);
                        string dataZone = HelperExcel.GetString(checkRow, colData++);
                        string dataLeadtime = HelperExcel.GetString(checkRow, colData++);
                        string dataContractTerm = HelperExcel.GetString(checkRow, colData++);
                        string dataContractRoutingTypeCode = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataIsArea = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaTo = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationTo = HelperExcel.GetString(checkRow, colData++);

                        bool isContinue = true;

                        //Cung đường
                        //Mã hệ thống
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataCATCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 0, lstMessageError, true, 50);

                        if (isContinue)
                        {
                            var checkCAT = resRouting.ListCATRouting.FirstOrDefault(c => c.Code == dataCATCode);
                            var CATId = 0;
                            if (checkCAT != null && isContinue)
                            {
                                CATId = checkCAT.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Where(c => c == dataCATCode).Count() > 1)
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else if (isContinue)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Where(c => c == dataCATCode).Count() > 1)
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            var CUSId = 0;
                            //Mã cung đường khách hàng
                            var checkCUS = resRouting.ListCUSRouting.FirstOrDefault(c => c.RoutingID == CATId && c.CustomerID == customerID);
                            if (checkCUS != null && isContinue)
                            {
                                CUSId = checkCUS.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }
                            else if (isContinue)
                            {
                                CUSId = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }

                            if (isContinue)
                                isContinue = HelperExcel.Valid(dataConCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 2, lstMessageError, true, 50);

                            if (isContinue)
                            {
                                //kiem tra ma trong hop dong
                                var ContractRoutingID = 0;
                                var checkContract = resRouting.ListContractRouting.FirstOrDefault(c => c.Code == dataConCode);
                                if (checkContract == null && isContinue)
                                {
                                    //kiem tra tren file
                                    if (lstCUSCode.Where(c => c == dataConCode).Count() > 1)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                        isContinue = false;
                                        if (isContinue)
                                        {
                                            if (resRouting.ListContractRouting.Where(c => c.Code != dataConCode && c.RoutingID == CATId).Count() > 0)
                                            {
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                    }
                                }
                                else if (isContinue)
                                {
                                    if (checkContract.RoutingID != checkCAT.ID && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng trong hợp đồng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(4, lstMessageError));
                                        isContinue = false;
                                    }
                                    else if (isContinue)
                                    {
                                        ContractRoutingID = checkContract.ID;
                                        if (lstCUSCode.Where(c => c == dataConCode).Count() > 1 && isContinue)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                            isContinue = false;
                                        }
                                        else if (isContinue)
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                        }
                                    }
                                }
                            }
                        }

                        //Zone
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataZone, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 5, lstMessageError, false);

                        //Leadtime
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataLeadtime, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 6, lstMessageError, false);

                        //SortOrder
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 7, lstMessageError, false);

                        var TermID = 0;
                        //Term
                        if (!string.IsNullOrEmpty(dataContractTerm) && isContinue)
                        {
                            var checkTerm = resRouting.ListContractTerm.FirstOrDefault(c => c.Code == dataContractTerm && !c.IsAllRouting);
                            if (checkTerm != null)
                            {
                                TermID = checkTerm.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Phụ lục không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                isContinue = false;
                            }
                        }
                        else if (isContinue)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                        }

                        var ContractRoutingTypeID = 0;
                        //check loai cung đường
                        if (string.IsNullOrEmpty(dataContractRoutingTypeCode) && isContinue)
                        {
                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã loại cung đường");
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                            isContinue = false;
                        }
                        else if (isContinue)
                        {
                            var checkType = lstContractRoutingType.FirstOrDefault(c => c.Code == dataContractRoutingTypeCode);
                            if (checkType != null)
                            {
                                ContractRoutingTypeID = checkType.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeRouteID, ContractRoutingTypeID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại cung đường không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                isContinue = false;
                            }
                        }

                        var IsArea = false;
                        //theo khu vực/ điểm
                        if (string.IsNullOrEmpty(dataIsArea) && isContinue)
                            IsArea = false;
                        else
                            IsArea = true;


                        var AreaFromID = 0;
                        var AreaToID = 0;
                        var LocationFromID = 0;
                        var LocationToID = 0;
                        //check khu vuc
                        if (IsArea && isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataAreaFrom) && isContinue)
                            {
                                var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == dataAreaFrom);
                                if (checkArea != null)
                                {
                                    AreaFromID = checkArea.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataAreaTo))
                                {
                                    var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == dataAreaTo);
                                    if (checkArea != null)
                                    {
                                        AreaToID = checkArea.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            if (isContinue)
                            {
                                LocationFromID = LocationToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());

                            }
                        }
                        else if (isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataLocationFrom) && isContinue)
                            {
                                var checkLo = resRouting.ListLocation.FirstOrDefault(c=>c.Code == dataLocationFrom);
                                if (checkLo != null)
                                {
                                    LocationFromID = checkLo.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataLocationTo))
                                {
                                    var checkLo = resRouting.ListLocation.FirstOrDefault(c => c.Code == dataLocationTo);
                                    if (checkLo != null)
                                    {
                                        LocationToID = checkLo.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            if (isContinue)
                            {
                                AreaFromID = AreaToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());

                            }
                       }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CUSContract_Routing_ExcelOnline_Approve(long id, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckTermID = colData++;
                    int colCheckTypeRouteID = colData++;
                    int colCheckAreaFromID = colData++;
                    int colCheckAreaToID = colData++;
                    int colCheckLocationFromID = colData++;
                    int colCheckLocationToID = colData++;

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == contractID);
                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hơp đồng");
                    int CustomerID = objContract.CustomerID.Value;
                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;
                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    var objLastOnFile = lstRow.Where(c => c.Cells[0].Value != null && !string.IsNullOrEmpty(c.Cells[0].Value.ToString()) && c.Cells[0].Value.ToString().All(Char.IsNumber) && Convert.ToInt32(c.Cells[0].Value) > 0).OrderByDescending(c => Convert.ToInt32(HelperExcel.GetString(c, 0))).FirstOrDefault();
                    int lastOnFile = 0;
                    if (objLastOnFile != null && Convert.ToInt32(objLastOnFile.Cells[0].Value) > 0) lastOnFile = Convert.ToInt32(objLastOnFile.Cells[0].Value);
                    if (lastOnFile > lastSortOrder) lastSortOrder = lastOnFile;
                    lastSortOrder++;

                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 0;
                            string dataSortOrder = HelperExcel.GetString(checkRow, colData++);
                            string dataCATCode = HelperExcel.GetString(checkRow, colData++);
                            string dataCATName = HelperExcel.GetString(checkRow, colData++);
                            string dataConCode = HelperExcel.GetString(checkRow, colData++);
                            string dataConName = HelperExcel.GetString(checkRow, colData++);
                            string dataZone = HelperExcel.GetString(checkRow, colData++);
                            string dataLeadtime = HelperExcel.GetString(checkRow, colData++);
                            string dataContractTerm = HelperExcel.GetString(checkRow, colData++);
                            string dataContractRoutingTypeCode = HelperExcel.GetString(checkRow, colData++);
                            colData++;
                            string dataIsArea = HelperExcel.GetString(checkRow, colData++);
                            string dataAreaFrom = HelperExcel.GetString(checkRow, colData++);
                            string dataAreaTo = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationFrom = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationTo = HelperExcel.GetString(checkRow, colData++);

                            string dataContractRoutingID = HelperExcel.GetString(checkRow, colCheckID);
                            string dataCATID = HelperExcel.GetString(checkRow, colCheckCATID);
                            string dataCUSID = HelperExcel.GetString(checkRow, colCheckCUSID);
                            string dataTermID = HelperExcel.GetString(checkRow, colCheckTermID);
                            string dataTypeRouteID = HelperExcel.GetString(checkRow, colCheckTypeRouteID);
                            string dataAreaFromID = HelperExcel.GetString(checkRow, colCheckAreaFromID);
                            string dataAreaToID = HelperExcel.GetString(checkRow, colCheckAreaToID);
                            string dataLocationFromID = HelperExcel.GetString(checkRow, colCheckLocationFromID);
                            string dataLocationToID = HelperExcel.GetString(checkRow, colCheckLocationToID);

                            int contractRoutingID = Convert.ToInt32(dataContractRoutingID);
                            int CATID = Convert.ToInt32(dataCATID);
                            int CUSID = Convert.ToInt32(dataCUSID);
                            int termID = Convert.ToInt32(dataTermID);
                            int typeRouteID = Convert.ToInt32(dataTypeRouteID);
                            int areaFromID = Convert.ToInt32(dataAreaFromID);
                            int areaToID = Convert.ToInt32(dataAreaToID);
                            int locationFromID = Convert.ToInt32(dataLocationFromID);
                            int locationToID = Convert.ToInt32(dataLocationToID);

                            #region lưu cat routing(nếu là mới)
                            var objCAT = model.CAT_Routing.FirstOrDefault(c => c.ID == CATID);
                            if (objCAT == null)
                            {
                                objCAT = new CAT_Routing();
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;

                                objCAT.Code = dataCATCode;
                                objCAT.RoutingName = dataCATName;
                                objCAT.IsAreaLast = false;
                                objCAT.IsUse = true;
                                objCAT.IsLocation = false;
                                objCAT.IsChecked = false;

                                if (locationFromID > 0)
                                    objCAT.LocationFromID = locationFromID;
                                else objCAT.LocationFromID = null;
                                if (locationToID > 0)
                                    objCAT.LocationToID = locationToID;
                                else objCAT.LocationToID = null;

                                if (areaFromID > 0)
                                    objCAT.RoutingAreaFromID = areaFromID;
                                else objCAT.RoutingAreaFromID = null;
                                if (areaToID > 0)
                                    objCAT.RoutingAreaToID = areaToID;
                                else objCAT.RoutingAreaToID = null;

                                model.CAT_Routing.Add(objCAT);
                            }
                            else
                            {
                                if (model.CUS_Routing.Where(c => c.RoutingID == CATID && c.CustomerID != CustomerID).Count() > 0)
                                {
                                    bool isError = true;
                                    if (isError && locationFromID > 0 && objCAT.LocationFromID != locationFromID)
                                        isError = false;
                                    if (isError && locationToID > 0 && objCAT.LocationToID != locationToID)
                                        isError = false;
                                    if (isError && areaFromID > 0 && objCAT.RoutingAreaFromID != areaFromID)
                                        isError = false;
                                    if (isError && areaToID > 0 && objCAT.RoutingAreaToID != areaToID)
                                        isError = false;
                                    if (!isError)
                                    {
                                        throw FaultHelper.BusinessFault(null, null, "[Dòng" + (checkRow.Index + 1) + "]Cung đường đã được khác hàng khác sử dụng không được thay đổi!");
                                    }
                                }
                                else
                                {
                                    if (locationFromID > 0)
                                        objCAT.LocationFromID = locationFromID;
                                    else objCAT.LocationFromID = null;
                                    if (locationToID > 0)
                                        objCAT.LocationToID = locationToID;
                                    else objCAT.LocationToID = null;

                                    if (areaFromID > 0)
                                        objCAT.RoutingAreaFromID = areaFromID;
                                    else objCAT.RoutingAreaFromID = null;
                                    if (areaToID > 0)
                                        objCAT.RoutingAreaToID = areaToID;
                                    else objCAT.RoutingAreaToID = null;
                                }
                            }

                            #endregion

                            #region lưu cus routing
                            if (!(CUSID > 0))
                            {
                                CUS_Routing objCus = new CUS_Routing();
                                objCus.CreatedBy = Account.UserName;
                                objCus.CreatedDate = DateTime.Now;
                                objCus.CustomerID = CustomerID;
                                objCus.CAT_Routing = objCAT;
                                objCus.Code = dataCATCode;
                                objCus.RoutingName = dataCATName;
                                model.CUS_Routing.Add(objCus);
                            }
                            #endregion

                            #region Lưu contract routing
                            var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == contractRoutingID);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;

                                //Xóa cung đường trong bảng giá khi đổi từ giá sang KPI
                                if ((typeRouteID == -(int)SYSVarType.ContractRoutingTypeKPI && obj.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice) || (obj.ContractTermID > 0 && obj.ContractTermID != termID))
                                {
                                    HelperContract.CUSContract_Routing_RemoveInPrice(obj.ID, obj.ContractID, model);
                                }
                            }
                            else
                            {
                                obj = new CAT_ContractRouting();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.CAT_Routing = objCAT;
                                obj.ContractID = contractID;
                                model.CAT_ContractRouting.Add(obj);
                            }
                            obj.Code = dataConCode;
                            obj.RoutingName = dataConName;
                            obj.Zone = !string.IsNullOrEmpty(dataZone) ? (double?)Convert.ToDouble(dataZone) : null;
                            obj.LeadTime = !string.IsNullOrEmpty(dataLeadtime) ? (double?)Convert.ToDouble(dataLeadtime) : null;

                            if (!string.IsNullOrEmpty(dataSortOrder))
                            {
                                int sortOrder = Convert.ToInt32(dataSortOrder);
                                if (sortOrder > 0)
                                    obj.SortOrder = sortOrder;
                                else
                                {
                                    obj.SortOrder = lastSortOrder;
                                    lastSortOrder++;
                                }
                            }
                            else
                            {
                                obj.SortOrder = lastSortOrder;
                                lastSortOrder++;
                            }

                            if (termID > 0)
                                obj.ContractTermID = termID;
                            else obj.ContractTermID = null;

                            obj.ContractRoutingTypeID = typeRouteID;
                            #endregion
                        }
                        model.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Price

        #region Common

        public DTOResult CUSContract_Price_List(string request, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Price.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOPrice
                    {
                        ID = c.ID,
                        ContractTermID = c.ContractTermID,
                        Code = c.Code,
                        Name = c.Name,
                        EffectDate = c.EffectDate,
                        TypeOfOrderID = c.TypeOfOrderID,
                        ContractNo = c.CAT_ContractTerm.Code,
                        TypeOfOrderName = c.SYS_Var.ValueOfVar,
                        TypeOfPrice = c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderDirect ? 1 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderHot ? 2 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturn ? 3 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturnHot ? 4 : 0,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int CUSContract_Price_Save(DTOPrice item, int contractTermID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    int result = -1;
                    result = HelperContract.Price_Save(model, Account, item, contractTermID);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_Price_Copy(List<DTOPriceCopyItem> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == item.ID);
                        if (objPrice != null)
                        {
                            CAT_Price obj = new CAT_Price();
                            model.CAT_Price.Add(obj);

                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;

                            obj.Code = item.NewCode;
                            obj.Name = item.NewName;
                            obj.ContractTermID = objPrice.ContractTermID;
                            obj.EffectDate = objPrice.EffectDate;
                            obj.TypeOfOrderID = objPrice.TypeOfOrderID;
                            obj.TypeOfRunLevelID = objPrice.TypeOfRunLevelID;

                            #region CAT_PriceCOContainer
                            var listCOContainer = model.CAT_PriceCOContainer.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ContractRoutingID,
                                c.Price,
                                c.PriceMin,
                                c.PriceMax,
                                c.PackingID
                            }).ToList();
                            foreach (var i in listCOContainer)
                            {
                                CAT_PriceCOContainer o = new CAT_PriceCOContainer();
                                model.CAT_PriceCOContainer.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.PackingID = i.PackingID;
                                o.ContractRoutingID = i.ContractRoutingID;
                            }
                            #endregion

                            #region CAT_PriceCOService
                            var listCOService = model.CAT_PriceCOService.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ServiceID,
                                c.Price,
                                c.PriceMin,
                                c.PriceMax,
                                c.PackingID,
                                c.CurrencyID
                            }).ToList();
                            foreach (var i in listCOService)
                            {
                                CAT_PriceCOService o = new CAT_PriceCOService();
                                model.CAT_PriceCOService.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.PackingID = i.PackingID;
                                o.CurrencyID = i.CurrencyID;
                                o.ServiceID = i.ServiceID;
                            }
                            #endregion

                            #region CAT_PriceDIEx
                            var listPriceEX = model.CAT_PriceDIEx.Where(c => c.PriceID == objPrice.ID).Select(c => new
                            {
                                ID = c.ID,
                                TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                                ExprCBM = c.ExprCBM,
                                ExprInput = c.ExprInput,
                                ExprPrice = c.ExprPrice,
                                ExprPriceFix = c.ExprPriceFix,
                                ExprQuan = c.ExprQuan,
                                ExprTon = c.ExprTon,
                                Note = c.Note,
                                DIExSumID = c.DIExSumID,
                            }).ToList();
                            foreach (var priceEx in listPriceEX)
                            {
                                CAT_PriceDIEx o = new CAT_PriceDIEx();
                                model.CAT_PriceDIEx.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.PriceID = obj.ID;
                                o.TypeOfPriceDIExID = priceEx.TypeOfPriceDIExID;
                                o.ExprCBM = priceEx.ExprCBM;
                                o.ExprInput = priceEx.ExprInput;
                                o.ExprPrice = priceEx.ExprPrice;
                                o.ExprPriceFix = priceEx.ExprPriceFix;
                                o.ExprQuan = priceEx.ExprQuan;
                                o.ExprTon = priceEx.ExprTon;
                                o.Note = priceEx.Note;
                                o.DIExSumID = priceEx.DIExSumID;
                                foreach (var exGOL in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceEx.ID))
                                {
                                    CAT_PriceDIExGroupLocation gol = new CAT_PriceDIExGroupLocation();
                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.CAT_PriceDIEx = o;
                                    gol.GroupOfLocationID = exGOL.GroupOfLocationID;
                                    model.CAT_PriceDIExGroupLocation.Add(gol);
                                }
                                foreach (var exGOP in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == priceEx.ID))
                                {
                                    CAT_PriceDIExGroupProduct gop = new CAT_PriceDIExGroupProduct();
                                    gop.CreatedBy = Account.UserName;
                                    gop.CreatedDate = DateTime.Now;
                                    gop.CAT_PriceDIEx = o;
                                    gop.GroupOfProductID = exGOP.GroupOfProductID;
                                    gop.ExprPrice = exGOP.ExprPrice;
                                    gop.ExprQuantity = exGOP.ExprQuantity;
                                    model.CAT_PriceDIExGroupProduct.Add(gop);
                                }
                                foreach (var exRoute in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceEx.ID))
                                {
                                    CAT_PriceDIExRouting gop = new CAT_PriceDIExRouting();
                                    gop.CreatedBy = Account.UserName;
                                    gop.CreatedDate = DateTime.Now;
                                    gop.CAT_PriceDIEx = o;
                                    gop.RoutingID = exRoute.RoutingID;
                                    gop.ParentRoutingID = exRoute.ParentRoutingID;
                                    gop.LocationID = exRoute.LocationID;
                                    gop.TypeOfTOLocationID = exRoute.TypeOfTOLocationID;
                                    model.CAT_PriceDIExRouting.Add(gop);
                                }
                            }
                            #endregion

                            #region CAT_PriceDIGroupProduct
                            foreach (var i in model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ContractRoutingID,
                                c.Price,
                                c.GroupOfProductID,
                                c.PriceMin,
                                c.PriceMax
                            }).ToList())
                            {
                                CAT_PriceDIGroupProduct o = new CAT_PriceDIGroupProduct();
                                model.CAT_PriceDIGroupProduct.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.ContractRoutingID = i.ContractRoutingID;
                                o.GroupOfProductID = i.GroupOfProductID;
                            }
                            #endregion

                            #region CAT_PriceDILevel +CAT_PriceDILevelGroupproduct

                            foreach (var detail in model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == objPrice.ID))
                            {
                                CAT_PriceDILevelGroupProduct g = new CAT_PriceDILevelGroupProduct();
                                g.CreatedBy = Account.UserName;
                                g.CreatedDate = DateTime.Now;
                                g.ContractRoutingID = detail.ContractRoutingID;
                                g.GroupOfProductID = detail.GroupOfProductID;
                                g.Price = detail.Price;
                                g.ContractLevelID = detail.ContractLevelID;
                                g.CAT_Price = obj;
                                model.CAT_PriceDILevelGroupProduct.Add(g);
                            }
                            #endregion

                            #region CAT_PriceGroupVehicle
                            foreach (var i in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ContractRoutingID,
                                c.Price,
                                c.GroupOfVehicleID,
                                c.PriceMin,
                                c.PriceMax
                            }).ToList())
                            {
                                CAT_PriceGroupVehicle o = new CAT_PriceGroupVehicle();
                                model.CAT_PriceGroupVehicle.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.ContractRoutingID = i.ContractRoutingID;
                                o.GroupOfVehicleID = i.GroupOfVehicleID;
                            }
                            #endregion

                            #region CAT_PriceGVLevel +CAT_PriceGVLevelGroupVehicle

                            foreach (var detail in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == objPrice.ID))
                            {
                                CAT_PriceGVLevelGroupVehicle g = new CAT_PriceGVLevelGroupVehicle();
                                g.CreatedBy = Account.UserName;
                                g.CreatedDate = DateTime.Now;
                                g.ContractRoutingID = detail.ContractRoutingID;
                                g.Price = detail.Price;
                                g.PriceMax = detail.PriceMax;
                                g.PriceMin = detail.PriceMin;
                                g.ContractLevelID = detail.ContractLevelID;
                                g.CAT_Price = obj;
                                model.CAT_PriceGVLevelGroupVehicle.Add(g);
                            }
                            #endregion

                            #region CAT_PriceDILoad
                            var listPriceDILoad = model.CAT_PriceDILoad.Where(c => c.PriceID == objPrice.ID).ToList();
                            foreach (var i in listPriceDILoad)
                            {
                                CAT_PriceDILoad o = new CAT_PriceDILoad();
                                model.CAT_PriceDILoad.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.LocationID = i.LocationID;
                                o.IsLoading = i.IsLoading;
                                o.ParentRoutingID = i.ParentRoutingID;
                                o.RoutingID = i.RoutingID;
                                o.GroupOfLocationID = i.GroupOfLocationID;

                                foreach (var e in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == i.ID).Select(c => new
                                {
                                    c.PriceOfGOPID,
                                    c.Price,
                                    c.GroupOfProductID
                                }).ToList())
                                {
                                    CAT_PriceDILoadDetail g = new CAT_PriceDILoadDetail();

                                    g.CreatedBy = Account.UserName;
                                    g.CreatedDate = DateTime.Now;

                                    g.PriceOfGOPID = e.PriceOfGOPID;
                                    g.GroupOfProductID = e.GroupOfProductID;
                                    g.Price = e.Price;
                                    g.CAT_PriceDILoad = o;
                                    model.CAT_PriceDILoadDetail.Add(g);
                                }
                            }
                            #endregion

                            #region price moq
                            var listMOQ = model.CAT_PriceDIMOQ.Where(c => c.PriceID == objPrice.ID).ToList();
                            foreach (var moq in listMOQ)
                            {
                                CAT_PriceDIMOQ m = new CAT_PriceDIMOQ();
                                m.CreatedBy = Account.UserName;
                                m.CreatedDate = DateTime.Now;
                                m.MOQName = moq.MOQName;
                                m.ParentRoutingID = moq.ParentRoutingID;
                                m.DIMOQSumID = moq.DIMOQSumID;
                                m.ExprInput = moq.ExprInput;
                                m.ExprPrice = moq.ExprPrice;
                                m.ExprPriceFix = moq.ExprPriceFix;
                                m.ExprQuan = moq.ExprQuan;
                                m.ExprTon = moq.ExprTon;
                                m.ExprCBM = moq.ExprCBM;
                                m.TypeOfPriceDIExID = moq.TypeOfPriceDIExID;
                                m.CAT_Price = obj;
                                model.CAT_PriceDIMOQ.Add(m);

                                foreach (var detail in moq.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == moq.ID))
                                {
                                    CAT_PriceDIMOQGroupLocation gol = new CAT_PriceDIMOQGroupLocation();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfLocationID = detail.GroupOfLocationID;
                                    gol.CAT_PriceDIMOQ = m;

                                    model.CAT_PriceDIMOQGroupLocation.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == moq.ID))
                                {
                                    CAT_PriceDIMOQGroupProduct gol = new CAT_PriceDIMOQGroupProduct();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfProductID = detail.GroupOfProductID;
                                    gol.ExprPrice = detail.ExprPrice;
                                    gol.ExprQuantity = detail.ExprQuantity;

                                    gol.CAT_PriceDIMOQ = m;

                                    model.CAT_PriceDIMOQGroupProduct.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == moq.ID))
                                {
                                    CAT_PriceDIMOQRouting gol = new CAT_PriceDIMOQRouting();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.RoutingID = detail.RoutingID;
                                    gol.ParentRoutingID = detail.ParentRoutingID;
                                    gol.LocationID = detail.LocationID;
                                    gol.TypeOfTOLocationID = detail.TypeOfTOLocationID;

                                    gol.CAT_PriceDIMOQ = m;

                                    model.CAT_PriceDIMOQRouting.Add(gol);
                                }
                            }
                            #endregion

                            #region DI load moq
                            var listMoqLoad = model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == objPrice.ID).ToList();
                            foreach (var moq in listMoqLoad)
                            {
                                CAT_PriceDIMOQLoad m = new CAT_PriceDIMOQLoad();
                                m.CreatedBy = Account.UserName;
                                m.CreatedDate = DateTime.Now;
                                m.MOQName = moq.MOQName;
                                m.ParentRoutingID = moq.ParentRoutingID;
                                m.IsLoading = moq.IsLoading;
                                m.ExprInput = moq.ExprInput;
                                m.ExprPrice = moq.ExprPrice;
                                m.ExprPriceFix = moq.ExprPriceFix;
                                m.ExprQuan = moq.ExprQuan;
                                m.ExprTon = moq.ExprTon;
                                m.ExprCBM = moq.ExprCBM;
                                m.TypeOfPriceDIExID = moq.TypeOfPriceDIExID;
                                m.ParentRoutingID = moq.ParentRoutingID;
                                m.DIMOQLoadSumID = moq.DIMOQLoadSumID;
                                m.CAT_Price = obj;
                                model.CAT_PriceDIMOQLoad.Add(m);

                                foreach (var detail in moq.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                {
                                    CAT_PriceDIMOQLoadGroupLocation gol = new CAT_PriceDIMOQLoadGroupLocation();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfLocationID = detail.GroupOfLocationID;
                                    gol.CAT_PriceDIMOQLoad = m;

                                    model.CAT_PriceDIMOQLoadGroupLocation.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                {
                                    CAT_PriceDIMOQLoadGroupProduct gol = new CAT_PriceDIMOQLoadGroupProduct();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfProductID = detail.GroupOfProductID;
                                    gol.ExprPrice = detail.ExprPrice;
                                    gol.ExprQuantity = detail.ExprQuantity;

                                    gol.CAT_PriceDIMOQLoad = m;

                                    model.CAT_PriceDIMOQLoadGroupProduct.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                {
                                    CAT_PriceDIMOQLoadRouting gol = new CAT_PriceDIMOQLoadRouting();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.RoutingID = detail.RoutingID;
                                    gol.ParentRoutingID = detail.ParentRoutingID;
                                    gol.LocationID = detail.LocationID;

                                    gol.CAT_PriceDIMOQLoad = m;

                                    model.CAT_PriceDIMOQLoadRouting.Add(gol);
                                }
                            }
                            #endregion

                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_Price_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_Delete(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPrice_Data CUSContract_Price_Data(int contractTermID)
        {
            try
            {
                DTOCUSPrice_Data result = new DTOCUSPrice_Data();
                using (var model = new DataEntities())
                {
                    var objContractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objContractTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objContractTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");

                    int cusID = -1;
                    if (objContract != null && objContract.CustomerID.HasValue)
                        cusID = objContract.CustomerID.Value;

                    int iPackingTu = -(int)SYSVarType.TypeOfPackingGOPTU;
                    int iServiceCO = -(int)SYSVarType.TypeOfPackingServiceCO;

                    result.TermClosed = objContractTerm.IsClosed;

                    result.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListPackingTU = model.CAT_Packing.Where(c => c.TypeOfPackageID == iPackingTu).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListMaterial = model.FLM_Material.Select(c => new FLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        MaterialName = c.MaterialName,
                        GroupOfMaterialID = c.GroupOfMaterialID,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName
                    }).ToList();

                    result.ListGroupOfVehicle = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == objContract.ID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.GroupOfVehicleID,
                        Code = c.CAT_GroupOfVehicle.Code,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        Ton = c.CAT_GroupOfVehicle.Ton,
                        SortOrder = c.SortOrder
                    }).Distinct().OrderBy(c => c.SortOrder).ToList();

                    result.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == objContract.ID).Select(c => new DTOCATContractLevel
                        {
                            ID = c.ID,
                            Code = c.Code,
                            LevelName = c.LevelName,
                            CBM = c.CBM,
                            Ton = c.Ton,
                            DateEnd = c.DateEnd,
                            DateStart = c.DateStart,
                            GroupOfVehicleID = c.GroupOfVehicleID,
                            SortOrder = c.SortOrder,
                            Quantity = c.Quantity,
                            GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                            GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName
                        }).OrderBy(c => c.SortOrder).ToList();

                    result.ListService = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        ServiceName = c.ServiceName,
                        //PackingID = c.PackingID,
                        //PackingName = c.CAT_Packing.PackingName,
                        //IsContainer = c.CAT_Packing.TypeOfPackageID == iServiceCO
                    }).ToList();

                    result.ListGroupOfPartner = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    result.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    result.ListCurrency = model.CAT_Currency.Select(c => new CATCurrency
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CurrencyName = c.CurrencyName
                    }).ToList();
                    if (result.TermClosed)
                    {
                        var lstRoutingID = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();
                        lstRoutingID.AddRange(model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList());
                        lstRoutingID.AddRange(model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList());
                        lstRoutingID.AddRange(model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList());

                        result.ListRouting = model.CAT_ContractRouting.Where(c => lstRoutingID.Contains(c.ID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID
                            && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                    var ListRoutingParent = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.CAT_Routing.ParentID.HasValue).Select(c => new
                    {
                        ID = c.CAT_Routing.ParentID.Value,
                        Code = c.CAT_Routing.CAT_Routing2.Code,
                        RoutingName = c.CAT_Routing.CAT_Routing2.RoutingName
                    }).Distinct().ToList();

                    result.ListRoutingParent = ListRoutingParent.Select(c => new CATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName
                    }).ToList();

                    var ListLocation = model.CUS_Location.Where(c => c.CustomerID == cusID).Select(c => new
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        LocationName = c.LocationName
                    }).Distinct().ToList();
                    result.ListLocation = ListLocation.Select(c => new CUSLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LocationName = c.LocationName
                    }).ToList();

                    var dataRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.CAT_Routing.RoutingAreaToID.HasValue && c.CAT_Routing.CAT_RoutingArea1.ParentID.HasValue).Select(c => c.CAT_Routing.CAT_RoutingArea1.ParentID.Value).Distinct().ToList();
                    result.ListRoutingArea = model.CAT_RoutingArea.Where(c => dataRouting.Contains(c.ID)).Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToList();

                    result.ListPriceOfGOP = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.PriceOfGOP).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                        TypeOfVar = c.TypeOfVar
                    }).ToList();

                    result.ListTypeOfPriceDIEx = model.CAT_TypeOfPriceDIEx.Select(c => new DTOCATTypeOfPriceDIEx
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName,
                        //TypeOfPriceExID = c.TypeOfPriceExID
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPrice CUSContract_Price_Get(int id)
        {
            try
            {
                DTOPrice result = new DTOPrice();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Contract_Price_Get(model, Account, id);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_Price_DeletePriceNormal(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (obj != null)
                    {
                        //xoa tu DI GOP
                        foreach (var price in model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == obj.ID))
                        {
                            model.CAT_PriceDIGroupProduct.Remove(price);
                        }
                        //xoa tu gov
                        foreach (var price in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == obj.ID))
                        {
                            model.CAT_PriceGroupVehicle.Remove(price);
                        }

                        model.SaveChanges();
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_Price_DeletePriceLevel(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (obj != null)
                    {
                        //xoa tu DI GOP

                        foreach (var detail in model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == obj.ID))
                        {
                            model.CAT_PriceDILevelGroupProduct.Remove(detail);
                        }
                        //xoa tu gov
                        foreach (var detail in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == obj.ID))
                        {
                            model.CAT_PriceGVLevelGroupVehicle.Remove(detail);
                        }
                        model.SaveChanges();
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPriceCO_Data CUSContract_PriceCO_Data(int contractTermID)
        {
            try
            {
                DTOCUSPriceCO_Data result = new DTOCUSPriceCO_Data();
                using (var model = new DataEntities())
                {
                    var objContractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objContractTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objContractTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");
                    int cusID = -1;
                    if (objContract != null && objContract.CustomerID.HasValue)
                        cusID = objContract.CustomerID.Value;

                    int iPackingTu = -(int)SYSVarType.TypeOfPackingGOPTU;
                    int iServiceCO = -(int)SYSVarType.TypeOfPackingServiceCO;

                    result.TermClosed = objContractTerm.IsClosed;

                    result.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListPackingTU = model.CAT_Packing.Where(c => c.TypeOfPackageID == iPackingTu).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListService = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        ServiceName = c.ServiceName,
                        //PackingID = c.PackingID,
                        //PackingName = c.CAT_Packing.PackingName,
                        //IsContainer = c.CAT_Packing.TypeOfPackageID == iServiceCO
                    }).ToList();


                    result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToList();

                    if (result.TermClosed)
                    {
                        var lstRoutingID = model.CAT_PriceCOContainer.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();


                        result.ListRouting = model.CAT_ContractRouting.Where(c => lstRoutingID.Contains(c.ID)).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPrice_ExcelData CUSContract_Price_ExcelData(int contractTermID)
        {
            try
            {
                DTOCUSPrice_ExcelData result = new DTOCUSPrice_ExcelData();
                using (var model = new DataEntities())
                {
                    var objContractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objContractTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objContractTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");

                    int cusID = -1;
                    if (objContract != null && objContract.CustomerID.HasValue)
                        cusID = objContract.CustomerID.Value;

                    result.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractID == objContract.ID && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATContractRouting
                        {
                            ID = c.RoutingID,
                            Code = c.Code,
                            CATCode = c.CAT_Routing.Code,
                            RoutingName = c.CAT_Routing.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();

                    var ListLocation = model.CUS_Location.Where(c => c.CustomerID == cusID).Select(c => new
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        CATCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                    }).Distinct().ToList();

                    result.ListLocation = ListLocation.Select(c => new DTOCUSLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CATLocationCode = c.CATCode,
                        LocationName = c.LocationName,
                        Address = c.Address,
                    }).ToList();

                    result.ListPriceOfGOP = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.PriceOfGOP).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                        TypeOfVar = c.TypeOfVar
                    }).ToList();

                    result.ListGroupOfLocation = model.CAT_GroupOfLocation.Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region CUSPrice_CO_Ex
        #region info
        public DTOResult CUSPrice_CO_Ex_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOEx.Where(c => c.PriceID == priceID).Select(c => new DTOPriceCOEx
                    {
                        ID = c.ID,
                        TypeOfPriceCOExID = c.TypeOfPriceCOExID,
                        TypeOfPriceCOExName = c.CAT_TypeOfPriceCOEx.TypeName,
                        COExSumID = c.COExSumID,
                        COExSumName = c.SYS_Var.ValueOfVar,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        Note = c.Note,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceCOEx CUSPrice_CO_Ex_Get(int id)
        {
            try
            {
                DTOPriceCOEx result = new DTOPriceCOEx();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceCOEx.Where(c => c.ID == id).Select(c => new DTOPriceCOEx
                        {
                            ID = c.ID,
                            TypeOfPriceCOExID = c.TypeOfPriceCOExID,
                            TypeOfPriceCOExName = c.CAT_TypeOfPriceCOEx.TypeName,
                            COExSumID = c.COExSumID,
                            COExSumName = c.SYS_Var.ValueOfVar,
                            ExprInput = c.ExprInput,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            Note = c.Note,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOPriceCOEx();
                        result.ID = 0;
                        var typeEx = model.CAT_TypeOfPriceCOEx.FirstOrDefault();
                        result.TypeOfPriceCOExID = 0;
                        if (typeEx != null) result.TypeOfPriceCOExID = typeEx.ID;
                        var COExSum = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.COExSum).FirstOrDefault();
                        result.COExSumID = 0;
                        if (COExSum != null) result.COExSumID = COExSum.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSPrice_CO_Ex_Save(DTOPriceCOEx item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOEx.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceCOEx();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceCOEx.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ExprInput = item.ExprInput;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.TypeOfPriceCOExID = item.TypeOfPriceCOExID;
                    obj.COExSumID = item.COExSumID;
                    obj.Note = item.Note;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOEx.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceCOExContainer.Where(c => c.PriceCOExID == obj.ID))
                            model.CAT_PriceCOExContainer.Remove(item);
                        foreach (var item in model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == obj.ID))
                            model.CAT_PriceCOExRouting.Remove(item);

                        model.CAT_PriceCOEx.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price co ex Location
        public DTOResult CUSPrice_CO_Ex_Location_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.LocationID.HasValue).Select(c => new DTOPriceCOExLocation
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceCOExLocation CUSPrice_CO_Ex_Location_Get(int id)
        {
            try
            {
                DTOPriceCOExLocation result = new DTOPriceCOExLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceCOExRouting.Where(c => c.ID == id).Select(c => new DTOPriceCOExLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_Location_Save(DTOPriceCOExLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOExRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_Location_LocationNotInSaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.LocationID = locationID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_CO_Ex_Location_LocationNotInList(string request, int priceExID, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                    var query = model.CUS_Location.Where(c => c.CustomerID == customerID && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        Location = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price CO ex ruote
        public DTOResult CUSPrice_CO_Ex_Route_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.RoutingID.HasValue).Select(c => new DTOPriceCOExRouting
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_Route_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_CO_Ex_Route_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.RoutingID > 0).Select(c => c.RoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price CO ex parent route
        public DTOResult CUSPrice_CO_Ex_ParentRoute_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceCOExParentRouting
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExParentRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_ParentRoute_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_CO_Ex_ParentRoute_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price CO partner
        public DTOResult CUSPrice_CO_Ex_Partner_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.PartnerID.HasValue).Select(c => new DTOPriceCOExPartner
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        PartnerID = c.PartnerID.Value,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerCode = c.CAT_Partner.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_Partner_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_Ex_Partner_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var PartnerID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.PartnerID = PartnerID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_CO_Ex_Partner_PartnerNotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.PartnerID > 0).Select(c => c.PartnerID).Distinct().ToList();
                    var query = model.CUS_Partner.Where(c => c.CustomerID == CustomerID && !lstID.Contains(c.PartnerID)).Select(c => new DTOPriceCOExPartner
                    {
                        ID = c.CAT_Partner.ID,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #endregion

        #region DI_GroupVehicle

        #region ftl normal
        public List<DTOPriceGroupVehicle> CUSPrice_DI_GroupVehicle_GetData(int priceID)
        {
            try
            {
                List<DTOPriceGroupVehicle> result = new List<DTOPriceGroupVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == priceID).Select(c => new DTOPriceGroupVehicle
                    {
                        RouteID = c.ContractRoutingID,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        Price = c.Price,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_DI_GroupVehicle_SaveList(List<DTOPriceGroupVehicle> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var priceNew in data)
                    {
                        var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == priceNew.RouteID && c.GroupOfVehicleID == priceNew.GroupOfVehicleID && c.PriceID == priceID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_PriceGroupVehicle();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            obj.ContractRoutingID = priceNew.RouteID;
                            obj.GroupOfVehicleID = priceNew.GroupOfVehicleID;
                            model.CAT_PriceGroupVehicle.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMax = priceNew.PriceMax;
                        obj.PriceMin = priceNew.PriceMin;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceGroupVehicleData CUSPrice_DI_GroupVehicle_ExcelData(int priceid, int contractTermID)
        {
            try
            {
                DTOPriceGroupVehicleData result = new DTOPriceGroupVehicleData();
                result.ListDetail = new List<DTOPriceGroupVehicle>();
                result.ListGOV = new List<CATGroupOfVehicle>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceid);
                    if (objPrice == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá ID:" + priceid);

                    result.ListDetail = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == priceid).Select(c => new DTOPriceGroupVehicle
                    {
                        ID = c.ID,
                        RouteID = c.ContractRoutingID,
                        PriceMin = c.PriceMin,
                        PriceMax = c.PriceMax,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        Price = c.Price
                    }).ToList();

                    result.ListGOV = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == objPrice.CAT_ContractTerm.ContractID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.CAT_GroupOfVehicle.ID,
                        Code = c.CAT_GroupOfVehicle.Code,
                        Ton = c.CAT_GroupOfVehicle.Ton,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        SortOrder = c.SortOrder,
                    }).Distinct().OrderBy(c => c.SortOrder).ToList();
                    if (objPrice.CAT_ContractTerm.IsClosed)
                    {
                        var lstRoutingID = model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objPrice.ContractTermID).Select(c => c.ContractRoutingID).Distinct().ToList();

                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == objPrice.ContractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_DI_GroupVehicle_ExcelImport(List<DTOPriceGroupVehicleImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == detail.RouteID && c.GroupOfVehicleID == detail.GroupOfVehicleID && c.PriceID == priceID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new CAT_PriceGroupVehicle();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.GroupOfVehicleID = detail.GroupOfVehicleID;
                                obj.ContractRoutingID = row.RouteID;
                                model.CAT_PriceGroupVehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                            obj.PriceMax = detail.PriceMax;
                            obj.PriceMin = detail.PriceMin;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSPrice_DI_GroupVehicle_ExcelInit(bool isFrame, int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = CUSPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListGOV)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListGOV)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListGOV)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOV)
                                {
                                    var check = lst.ListDetail.Where(c => c.RouteID == route.ID && c.GroupOfVehicleID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOV)
                                {

                                    var check = lst.ListDetail.Where(c => c.RouteID == route.ID && c.GroupOfVehicleID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CUSPrice_DI_GroupVehicle_ExcelChange(bool isFrame, int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = CUSPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListGOV.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListGOV.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSPrice_DI_GroupVehicle_ExcelOnImport(bool isFrame, int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOV.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOV.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CUSPrice_DI_GroupVehicle_ExcelApprove(bool isFrame, int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOV.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOV.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListGOV)
                                {
                                    String priceMin = HelperExcel.GetString(eRow, colData++);
                                    String priceMax = HelperExcel.GetString(eRow, colData++);
                                    Int32? getpriceMin = Convert.ToInt32(priceMin);
                                    Int32? getpriceMax = Convert.ToInt32(priceMax);

                                    if (getpriceMin >= 0 || getpriceMax >= 0)
                                    {
                                        var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfVehicleID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                        if (obj == null)
                                        {
                                            obj = new CAT_PriceGroupVehicle();
                                            obj.CreatedBy = Account.UserName;
                                            obj.CreatedDate = DateTime.Now;
                                            obj.PriceID = priceID;
                                            obj.GroupOfVehicleID = level.ID;
                                            obj.ContractRoutingID = getRoutingID;
                                            model.CAT_PriceGroupVehicle.Add(obj);
                                        }
                                        else
                                        {
                                            obj.ModifiedBy = Account.UserName;
                                            obj.ModifiedDate = DateTime.Now;
                                        }
                                        obj.PriceMax = getpriceMax;
                                        obj.PriceMin = getpriceMin;
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListGOV)
                                {
                                    String price = HelperExcel.GetString(eRow, colData++);
                                    decimal getprice = 0;
                                    try
                                    {
                                        getprice = decimal.Parse(price);
                                    }
                                    catch
                                    {
                                        getprice = 0;
                                    }
                                    var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfVehicleID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                    if (obj == null)
                                    {
                                        obj = new CAT_PriceGroupVehicle();
                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;
                                        obj.PriceID = priceID;
                                        obj.GroupOfVehicleID = level.ID;
                                        obj.ContractRoutingID = getRoutingID;
                                        model.CAT_PriceGroupVehicle.Add(obj);
                                    }
                                    else
                                    {
                                        obj.ModifiedBy = Account.UserName;
                                        obj.ModifiedDate = DateTime.Now;
                                    }
                                    obj.Price = getprice;
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region ftl lv

        public List<DTOPriceGVLevelGroupVehicle> CUSPrice_DI_PriceGVLevel_DetailData(int priceID)
        {
            try
            {
                List<DTOPriceGVLevelGroupVehicle> result = new List<DTOPriceGVLevelGroupVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == priceID).Select(c => new DTOPriceGVLevelGroupVehicle
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        ContractLevelID = c.ContractLevelID,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceGVLevel_Save(List<DTOPriceGVLevelGroupVehicle> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var priceNew in lst)
                    {
                        var obj = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == priceID && c.ContractRoutingID == priceNew.RoutingID && c.ContractLevelID == priceNew.ContractLevelID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_PriceGVLevelGroupVehicle();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractRoutingID = priceNew.RoutingID;
                            obj.ContractLevelID = priceNew.ContractLevelID;
                            obj.PriceID = priceID;
                            model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMax = priceNew.PriceMax;
                        obj.PriceMin = priceNew.PriceMin;
                    }
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceGVLevelData CUSPrice_DI_PriceGVLevel_ExcelData(int priceid, int contractTermID)
        {
            try
            {
                DTOPriceGVLevelData result = new DTOPriceGVLevelData();
                result.ListDetail = new List<DTOPriceGVLevelGroupVehicle>();
                result.ListGroupVehicle = new List<CATGroupOfVehicle>();
                result.ListLevel = new List<DTOCATContractLevel>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);
                    result.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == objTerm.ContractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName
                    }).ToList();
                    if (objTerm.IsClosed)
                    {
                        var lstRoutingID = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();

                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                    result.ListDetail = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == priceid).Select(c => new DTOPriceGVLevelGroupVehicle
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        ContractLevelID = c.ContractLevelID,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_DI_PriceGVLevel_ExcelImport(List<DTOPriceGVLevelImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var priceNew in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceGVLevelGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == priceNew.RouteID && c.ContractLevelID == priceNew.LevelID);
                            if (obj == null)
                            {
                                obj = new CAT_PriceGVLevelGroupVehicle();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractLevelID = priceNew.LevelID;
                                obj.ContractRoutingID = row.RouteID;
                                obj.PriceID = priceID;
                                model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = priceNew.Price;
                            obj.PriceMax = priceNew.PriceMax;
                            obj.PriceMin = priceNew.PriceMin;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSPrice_DI_PriceGVLevel_ExcelInit(bool isFrame, int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = CUSPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListLevel)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListLevel)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListLevel)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListLevel)
                                {
                                    var check = lst.ListDetail.Where(c => c.RoutingID == route.ID && c.ContractLevelID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListLevel)
                                {
                                    var check = lst.ListDetail.Where(c => c.RoutingID == route.ID && c.ContractLevelID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CUSPrice_DI_PriceGVLevel_ExcelChange(bool isFrame, int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = CUSPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListLevel.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListLevel.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSPrice_DI_PriceGVLevel_ExcelOnImport(bool isFrame, int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListLevel.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListLevel.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CUSPrice_DI_PriceGVLevel_ExcelApprove(bool isFrame, int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListLevel.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListLevel.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListLevel)
                                {
                                    String priceMin = HelperExcel.GetString(eRow, colData++);
                                    String priceMax = HelperExcel.GetString(eRow, colData++);
                                    Int32? getpriceMin = Convert.ToInt32(priceMin);
                                    Int32? getpriceMax = Convert.ToInt32(priceMax);
                                    if (getpriceMin >= 0 || getpriceMax >= 0)
                                    {
                                        var obj = model.CAT_PriceGVLevelGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == getRoutingID && c.ContractLevelID == level.ID);
                                        if (obj == null)
                                        {
                                            obj = new CAT_PriceGVLevelGroupVehicle();
                                            obj.CreatedBy = Account.UserName;
                                            obj.CreatedDate = DateTime.Now;
                                            obj.ContractLevelID = level.ID;
                                            obj.ContractRoutingID = getRoutingID;
                                            obj.PriceID = priceID;
                                            model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                                        }
                                        else
                                        {
                                            obj.ModifiedBy = Account.UserName;
                                            obj.ModifiedDate = DateTime.Now;
                                        }
                                        obj.PriceMax = getpriceMax;
                                        obj.PriceMin = getpriceMin;
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListLevel)
                                {
                                    String price = HelperExcel.GetString(eRow, colData++);
                                    decimal getprice = 0;
                                    try
                                    {
                                        getprice = decimal.Parse(price);
                                    }
                                    catch
                                    {
                                        getprice = 0;
                                    }
                                    var obj = model.CAT_PriceGVLevelGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == getRoutingID && c.ContractLevelID == level.ID);
                                    if (obj == null)
                                    {
                                        obj = new CAT_PriceGVLevelGroupVehicle();
                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;
                                        obj.ContractLevelID = level.ID;
                                        obj.ContractRoutingID = getRoutingID;
                                        obj.PriceID = priceID;
                                        model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                                    }
                                    else
                                    {
                                        obj.ModifiedBy = Account.UserName;
                                        obj.ModifiedDate = DateTime.Now;
                                    }
                                    obj.Price = getprice;
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion
        #endregion

        #region DI_GroupProduct

        public List<DTOPriceDIGroupOfProduct> CUSPrice_DI_GroupProduct_Data(int priceID)
        {
            try
            {
                List<DTOPriceDIGroupOfProduct> result = new List<DTOPriceDIGroupOfProduct>();

                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDIGroupOfProduct
                        {
                            ID = c.ID,
                            ContractRoutingID = c.ContractRoutingID,
                            GroupOfProductID = c.GroupOfProductID,
                            Price = c.Price,
                            PriceID = c.PriceID,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_DI_GroupProduct_SaveList(List<DTOPriceDIGroupOfProduct> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var priceNew in data)
                    {
                        var obj = model.CAT_PriceDIGroupProduct.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == priceNew.ContractRoutingID && c.GroupOfProductID == priceNew.GroupOfProductID);
                        if (obj == null)
                        {
                            obj = new CAT_PriceDIGroupProduct();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            obj.ContractRoutingID = priceNew.ContractRoutingID;
                            obj.GroupOfProductID = priceNew.GroupOfProductID;
                            model.CAT_PriceDIGroupProduct.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMin = priceNew.PriceMin;
                        obj.PriceMax = priceNew.PriceMax;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceDIGroupOfProductData CUSPrice_DI_GroupProduct_Export(int priceID)
        {
            try
            {
                DTOPriceDIGroupOfProductData result = new DTOPriceDIGroupOfProductData();
                result.ListGOP = new List<CUSGroupOfProduct>();
                result.ListDetail = new List<DTOPriceDIGroupOfProduct>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        result.ListGOP = model.CUS_GroupOfProduct.Where(c => c.CustomerID == price.CAT_ContractTerm.CAT_Contract.CustomerID.Value).Select(c => new CUSGroupOfProduct
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName
                        }).ToList();

                        if (price.CAT_ContractTerm.IsClosed)
                        {
                            var lstRoutingID = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == price.ContractTermID).Select(c => c.ContractRoutingID).Distinct().ToList();

                            result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == price.ContractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                            {
                                ID = c.ID,
                                Code = c.Code,
                                RoutingName = c.RoutingName,
                                SortOrder = c.SortOrder
                            }).OrderBy(c => c.SortOrder).ToList();
                        }
                        else
                        {
                            result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == price.ContractTermID).Select(c => new DTOCATRouting
                            {
                                ID = c.ID,
                                Code = c.Code,
                                RoutingName = c.RoutingName,
                                SortOrder = c.SortOrder,
                            }).OrderBy(c => c.SortOrder).ToList();
                        }

                        result.ListDetail = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDIGroupOfProduct
                        {
                            ContractRoutingID = c.ContractRoutingID,
                            GroupOfProductID = c.GroupOfProductID,
                            Price = c.Price,
                            PriceID = c.PriceID,
                            ID = c.ID,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_DI_GroupProduct_Import(List<DTOPriceDIGroupOfProductImport> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in data.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == detail.ContractRoutingID && c.GroupOfProductID == detail.GroupOfProductID && c.PriceID == priceID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new CAT_PriceDIGroupProduct();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.GroupOfProductID = detail.GroupOfProductID;
                                obj.ContractRoutingID = row.RouteID;
                                model.CAT_PriceDIGroupProduct.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                            obj.PriceMax = detail.PriceMax;
                            obj.PriceMin = detail.PriceMin;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSPrice_DI_GroupProduct_ExcelInit(bool isFrame, int priceID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = CUSPrice_DI_GroupProduct_Export(priceID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListGOP)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListGOP)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListGOP)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOP)
                                {
                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.GroupOfProductID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOP)
                                {
                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.GroupOfProductID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CUSPrice_DI_GroupProduct_ExcelChange(bool isFrame, int priceID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = CUSPrice_DI_GroupProduct_Export(priceID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListGOP.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListGOP.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSPrice_DI_GroupProduct_ExcelOnImport(bool isFrame, int priceID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_DI_GroupProduct_Export(priceID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOP.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOP.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CUSPrice_DI_GroupProduct_ExcelApprove(bool isFrame, int priceID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_DI_GroupProduct_Export(priceID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOP.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOP.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListGOP)
                                {
                                    String priceMin = HelperExcel.GetString(eRow, colData++);
                                    String priceMax = HelperExcel.GetString(eRow, colData++);
                                    Int32? getpriceMin = Convert.ToInt32(priceMin);
                                    Int32? getpriceMax = Convert.ToInt32(priceMax);
                                    if (getpriceMin >= 0 || getpriceMax >= 0)
                                    {
                                        var obj = model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfProductID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                        if (obj == null)
                                        {
                                            obj = new CAT_PriceDIGroupProduct();
                                            obj.CreatedBy = Account.UserName;
                                            obj.CreatedDate = DateTime.Now;
                                            obj.PriceID = priceID;
                                            obj.GroupOfProductID = level.ID;
                                            obj.ContractRoutingID = getRoutingID;
                                            model.CAT_PriceDIGroupProduct.Add(obj);
                                        }
                                        else
                                        {
                                            obj.ModifiedBy = Account.UserName;
                                            obj.ModifiedDate = DateTime.Now;
                                        }
                                        obj.PriceMax = getpriceMax;
                                        obj.PriceMin = getpriceMin;
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListGOP)
                                {
                                    String price = HelperExcel.GetString(eRow, colData++);
                                    decimal getprice = 0;
                                    try
                                    {
                                        getprice = decimal.Parse(price);
                                    }
                                    catch
                                    {
                                        getprice = 0;
                                    }
                                    var obj = model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfProductID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                    if (obj == null)
                                    {
                                        obj = new CAT_PriceDIGroupProduct();
                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;
                                        obj.PriceID = priceID;
                                        obj.GroupOfProductID = level.ID;
                                        obj.ContractRoutingID = getRoutingID;
                                        model.CAT_PriceDIGroupProduct.Add(obj);
                                    }
                                    else
                                    {
                                        obj.ModifiedBy = Account.UserName;
                                        obj.ModifiedDate = DateTime.Now;
                                    }
                                    obj.Price = getprice;
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Loading Up

        #region common
        public void CUSPrice_DI_Load_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                            model.CAT_PriceDILoadDetail.Remove(detail);

                        model.CAT_PriceDILoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Load_DeleteList(List<int> data)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var id in data)
                    {
                        var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);

                            model.CAT_PriceDILoad.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Load_DeleteAllList(int priceID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        foreach (var diload in model.CAT_PriceDILoad.Where(c => c.PriceID == objPrice.ID && c.IsLoading))
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == diload.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);
                            model.CAT_PriceDILoad.Remove(diload);
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không thấy bảng giá");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Location
        public List<DTOPriceTruckDILoad> CUSPrice_DI_LoadLocation_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadLocation_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadLocation_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadLocation_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_LoadLocation_LocationNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadLocation_LocationNotIn_List(model, Account, request, priceID, false);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadLocation_LocationNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadLocation_LocationNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadLocation_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadLocation_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export CUSPrice_DI_LoadLocation_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadLocation_Export(model, Account, contractTermID, priceID, false);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadLocation_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 1, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Route
        public List<DTOPriceTruckDILoad> CUSPrice_DI_LoadRoute_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadRoute_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadRoute_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadRoute_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_LoadRoute_RouteNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadRoute_RouteNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadRoute_RouteNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadRoute_RouteNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadRoute_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadRoute_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export CUSPrice_DI_LoadRoute_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadRoute_Export(model, Account, contractTermID, priceID, false);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_DI_LoadRoute_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 2, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region TypeOfPartner
        public List<DTOPriceTruckDILoad> CUSPrice_DI_LoadPartner_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadPartner_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_LoadPartner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadPartner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadPartner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export CUSPrice_DI_LoadPartner_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_Export(model, Account, contractTermID, priceID, false);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadPartner_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 3, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Partner
        public List<DTOPriceDILoadPartner> CUSPrice_DI_LoadPartner_Partner_List(int priceID)
        {
            try
            {
                List<DTOPriceDILoadPartner> result = new List<DTOPriceDILoadPartner>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadParner_Partner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadPartner_Partner_SaveList(List<DTOPriceDILoadPartner> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_Partner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_LoadPartner_Partner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_Partner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadPartner_Partner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_Partner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_LoadPartner_Partner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_Partner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        #endregion

        #region Unload

        #region common
        public void CUSPrice_DI_UnLoad_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                            model.CAT_PriceDILoadDetail.Remove(detail);

                        model.CAT_PriceDILoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoad_DeleteList(List<int> data)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var id in data)
                    {
                        var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);

                            model.CAT_PriceDILoad.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoad_DeleteAllList(int priceID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        foreach (var diload in model.CAT_PriceDILoad.Where(c => c.PriceID == objPrice.ID && !c.IsLoading))
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == diload.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);
                            model.CAT_PriceDILoad.Remove(diload);
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không thấy bảng giá");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Location
        public List<DTOPriceTruckDILoad> CUSPrice_DI_UnLoadLocation_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadLocation_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadLocation_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadLocation_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_UnLoadLocation_LocationNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadLocation_LocationNotIn_List(model, Account, request, priceID, false);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadLocation_LocationNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadLocation_LocationNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadLocation_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadLocation_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export CUSPrice_DI_UnLoadLocation_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadLocation_Export(model, Account, contractTermID, priceID, false);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadLocation_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 1, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Route
        public List<DTOPriceTruckDILoad> CUSPrice_DI_UnLoadRoute_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadRoute_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadRoute_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadRoute_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_UnLoadRoute_RouteNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadRoute_RouteNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadRoute_RouteNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadRoute_RouteNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadRoute_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadRoute_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export CUSPrice_DI_UnLoadRoute_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadRoute_Export(model, Account, contractTermID, priceID, false);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadRoute_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 2, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region TypeOfPartner
        public List<DTOPriceTruckDILoad> CUSPrice_DI_UnLoadPartner_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadPartner_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_UnLoadPartner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadPartner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadPartner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        //Excel
        public DTOPriceTruckDILoad_Export CUSPrice_DI_UnLoadPartner_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_Export(model, Account, contractTermID, priceID, false);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadPartner_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 3, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Partner
        public List<DTOPriceDILoadPartner> CUSPrice_DI_UnLoadPartner_Partner_List(int priceID)
        {
            try
            {
                List<DTOPriceDILoadPartner> result = new List<DTOPriceDILoadPartner>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_Partner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadPartner_Partner_SaveList(List<DTOPriceDILoadPartner> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_Partner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_UnLoadPartner_Partner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_Partner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadPartner_Partner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_Partner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_UnLoadPartner_Partner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_Partner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        #endregion

        #region price ex new

        #region info
        public DTOResult CUSPrice_DI_Ex_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIEx.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDIEx
                    {
                        ID = c.ID,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                        ExprCBM = c.ExprCBM,
                        ExprInput = c.ExprInput,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        ExprTon = c.ExprTon,
                        Note = c.Note,
                        DIExSumID = c.DIExSumID,
                        DIExSumName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIEx CUSPrice_DI_Ex_Get(int id)
        {
            try
            {
                DTOPriceDIEx result = new DTOPriceDIEx();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIEx.Where(c => c.ID == id).Select(c => new DTOPriceDIEx
                                    {
                                        ID = c.ID,
                                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                                        ExprCBM = c.ExprCBM,
                                        ExprInput = c.ExprInput,
                                        ExprPrice = c.ExprPrice,
                                        ExprPriceFix = c.ExprPriceFix,
                                        ExprQuan = c.ExprQuan,
                                        ExprTon = c.ExprTon,
                                        Note = c.Note,
                                        DIExSumID = c.DIExSumID,
                                        DIExSumName = c.SYS_Var.ValueOfVar,
                                        TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                                    }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOPriceDIEx();
                        result.ID = 0;
                        var typeEx = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        result.TypeOfPriceDIExID = 0;
                        if (typeEx != null) result.TypeOfPriceDIExID = typeEx.ID;
                        var diExSum = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIExSum).FirstOrDefault();
                        result.DIExSumID = 0;
                        if (diExSum != null) result.DIExSumID = diExSum.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSPrice_DI_Ex_Save(DTOPriceDIEx item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIEx.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIEx();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceDIEx.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;
                    obj.DIExSumID = item.DIExSumID;
                    obj.Note = item.Note;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIEx.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == obj.ID))
                            model.CAT_PriceDIExGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == obj.ID))
                            model.CAT_PriceDIExGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == obj.ID))
                            model.CAT_PriceDIExRouting.Remove(item);

                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIExID == obj.ID))
                            model.FIN_Temp.Remove(item);

                        model.CAT_PriceDIEx.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex GroupLocation
        public DTOResult CUSPrice_DI_Ex_GroupLocation_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceExID).Select(c => new DTOPriceDIExGroupLocation
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_GroupLocation_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_PriceDIExGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.GroupOfLocationID = group;
                        model.CAT_PriceDIExGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_Ex_GroupLocation_GroupNotInList(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceExID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex GroupProduct
        public DTOResult CUSPrice_DI_Ex_GroupProduct_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == priceExID).Select(c => new DTOPriceDIExGroupProduct
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIExGroupProduct CUSPrice_DI_Ex_GroupProduct_Get(int id, int cusID)
        {
            try
            {
                DTOPriceDIExGroupProduct result = new DTOPriceDIExGroupProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIExGroupProduct.Where(c => c.ID == id).Select(c => new DTOPriceDIExGroupProduct
                        {
                            ID = c.ID,
                            PriceDIExID = c.PriceDIExID,
                            GroupOfProductID = c.GroupOfProductID,
                            ExprPrice = c.ExprPrice,
                            ExprQuantity = c.ExprQuantity
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.PriceDIExID = 0;
                        result.GroupOfProductID = 0;
                        var obj = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).FirstOrDefault();
                        if (obj != null) result.GroupOfProductID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_GroupProduct_Save(DTOPriceDIExGroupProduct item, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_PriceDIExGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIExGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        model.CAT_PriceDIExGroupProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.ExprQuantity = item.ExprQuantity;
                    obj.ExprPrice = item.ExprPrice;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_Ex_GroupProduct_GOPList(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex Location
        public DTOResult CUSPrice_DI_Ex_Location_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.LocationID.HasValue).Select(c => new DTOPriceDIExLocation
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIExLocation CUSPrice_DI_Ex_Location_Get(int id)
        {
            try
            {
                DTOPriceDIExLocation result = new DTOPriceDIExLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIExRouting.Where(c => c.ID == id).Select(c => new DTOPriceDIExLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Location_Save(DTOPriceDIExLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIExRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Location_LocationNotInSaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.LocationID = locationID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_Ex_Location_LocationNotInList(string request, int priceExID, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                    var query = model.CUS_Location.Where(c => c.CustomerID == customerID && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        Location = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex ruote
        public DTOResult CUSPrice_DI_Ex_Route_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.RoutingID.HasValue).Select(c => new DTOPriceDIExRouting
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Route_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_Ex_Route_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.RoutingID > 0).Select(c => c.RoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex parent route
        public DTOResult CUSPrice_DI_Ex_ParentRoute_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceDIExParentRouting
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExParentRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_ParentRoute_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_Ex_ParentRoute_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI partner
        public DTOResult CUSPrice_DI_Ex_Partner_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.PartnerID.HasValue).Select(c => new DTOPriceDIExPartner
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        PartnerID = c.PartnerID.Value,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerCode = c.CAT_Partner.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Partner_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Partner_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var PartnerID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.PartnerID = PartnerID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_Ex_Partner_PartnerNotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.PartnerID > 0).Select(c => c.PartnerID).Distinct().ToList();
                    var query = model.CUS_Partner.Where(c => c.CustomerID == CustomerID && !lstID.Contains(c.PartnerID)).Select(c => new DTOPriceDIExPartner
                    {
                        ID = c.CAT_Partner.ID,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI Ex MOQ
        public DTOResult CUSPrice_DI_Ex_Province_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ProvinceID.HasValue).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceID = c.ProvinceID.Value,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        ProvinceCode = c.CAT_Province.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Province_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_Ex_Province_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ProvinceID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.ProvinceID = ProvinceID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_Ex_Province_NotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ProvinceID > 0).Select(c => c.ProvinceID).Distinct().ToList();
                    var query = model.CAT_Province.Where(c => !lstID.Contains(c.ID)).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceCode = c.Code,
                        ProvinceName = c.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region MOQ new

        #region info
        public DTOResult CUSPrice_DI_PriceMOQ_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQ.Where(c => c.PriceID == priceID).Select(c => new DTOCATPriceDIMOQ
                    {
                        ID = c.ID,
                        PriceID = c.PriceID,
                        MOQName = c.MOQName,
                        ExprInput = c.ExprInput,
                        ExprCBM = c.ExprCBM,
                        ExprTon = c.ExprTon,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        DIMOQSumID = c.DIMOQSumID,
                        DIMOQSumName = c.SYS_Var.ValueOfVar,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPriceDIMOQ>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATPriceDIMOQ CUSPrice_DI_PriceMOQ_Get(int id)
        {
            try
            {
                DTOCATPriceDIMOQ result = new DTOCATPriceDIMOQ();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQ.Where(c => c.ID == id).Select(c => new DTOCATPriceDIMOQ
                            {
                                ID = c.ID,
                                PriceID = c.PriceID,
                                MOQName = c.MOQName,
                                ExprInput = c.ExprInput,
                                ExprCBM = c.ExprCBM,
                                ExprTon = c.ExprTon,
                                ExprPrice = c.ExprPrice,
                                ExprPriceFix = c.ExprPriceFix,
                                ExprQuan = c.ExprQuan,
                                DIMOQSumID = c.DIMOQSumID,
                                DIMOQSumName = c.SYS_Var.ValueOfVar,
                                TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                                TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                                TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                            }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOCATPriceDIMOQ();
                        result.ID = 0;
                        result.DIMOQSumID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIMOQSum).FirstOrDefault();
                        if (obj != null) result.DIMOQSumID = obj.ID;
                        result.TypeOfPriceDIExID = 0;
                        var objType = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        if (objType != null) result.TypeOfPriceDIExID = objType.ID;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSPrice_DI_PriceMOQ_Save(DTOCATPriceDIMOQ item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQ.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQ();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceDIMOQ.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MOQName = item.MOQName;
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.DIMOQSumID = item.DIMOQSumID;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQ.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == obj.ID))
                            model.CAT_PriceDIMOQGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == obj.ID))
                            model.CAT_PriceDIMOQGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == obj.ID))
                            model.CAT_PriceDIMOQRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQID == obj.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQ.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var moq in model.CAT_PriceDIMOQ.Where(c => c.PriceID == priceID))
                    {
                        foreach (var item in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == moq.ID))
                            model.CAT_PriceDIMOQGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == moq.ID))
                            model.CAT_PriceDIMOQGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == moq.ID))
                            model.CAT_PriceDIMOQRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQID == moq.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQ.Remove(moq);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Group Location
        public DTOResult CUSPrice_DI_PriceMOQ_GroupLocation_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == priceMOQID).Select(c => new DTOPriceDIMOQGroupLocation
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_GroupLocation_SaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_PriceDIMOQGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.GroupOfLocationID = group;
                        model.CAT_PriceDIMOQGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQ_GroupLocation_GroupNotInList(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == priceMOQID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq GroupProduct
        public DTOResult CUSPrice_DI_PriceMOQ_GroupProduct_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == priceMOQID).Select(c => new DTOPriceDIMOQGroupProduct
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQGroupProduct CUSPrice_DI_PriceMOQ_GroupProduct_Get(int id, int cusID)
        {
            try
            {
                DTOPriceDIMOQGroupProduct result = new DTOPriceDIMOQGroupProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQGroupProduct.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQGroupProduct
                        {
                            ID = c.ID,
                            PriceDIMOQID = c.PriceDIMOQID,
                            GroupOfProductID = c.GroupOfProductID,
                            ExprPrice = c.ExprPrice,
                            ExprQuantity = c.ExprQuantity
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.PriceDIMOQID = 0;
                        result.GroupOfProductID = 0;
                        var obj = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).FirstOrDefault();
                        if (obj != null) result.GroupOfProductID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_GroupProduct_Save(DTOPriceDIMOQGroupProduct item, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_PriceDIMOQGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        model.CAT_PriceDIMOQGroupProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.ExprQuantity = item.ExprQuantity;
                    obj.ExprPrice = item.ExprPrice;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQ_GroupProduct_GOPList(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq Location
        public DTOResult CUSPrice_DI_PriceMOQ_Location_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.LocationID.HasValue).Select(c => new DTOPriceDIMOQLocation
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLocation CUSPrice_DI_PriceMOQ_Location_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLocation result = new DTOPriceDIMOQLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIMOQRouting.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Location_Save(DTOPriceDIMOQLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Location_LocationNotInSaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.LocationID = locationID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQ_Location_LocationNotInList(string request, int priceMOQID, int custormerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                    var query = model.CUS_Location.Where(c => c.CustomerID == custormerID && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        Location = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq ruote
        public DTOResult CUSPrice_DI_PriceMOQ_Route_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.RoutingID.HasValue).Select(c => new DTOPriceDIMOQRouting
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Route_SaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQ_Route_RouteNotInList(string request, int priceMOQID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.RoutingID.HasValue).Select(c => c.RoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq parent route
        public DTOResult CUSPrice_DI_PriceMOQ_ParentRoute_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceDIMOQParentRouting
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQParentRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_ParentRoute_SaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQ_ParentRoute_RouteNotInList(string request, int priceMOQID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();
                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();
                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI partner MOQ
        public DTOResult CUSPrice_DI_PriceMOQ_Partner_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.PartnerID.HasValue).Select(c => new DTOPriceDIMOQPartner
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        PartnerID = c.PartnerID.Value,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerCode = c.CAT_Partner.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Partner_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Partner_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var PartnerID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceExID;
                        obj.PartnerID = PartnerID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQ_Partner_PartnerNotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.PartnerID > 0).Select(c => c.PartnerID).Distinct().ToList();
                    var query = model.CUS_Partner.Where(c => c.CustomerID == CustomerID && !lstID.Contains(c.PartnerID)).Select(c => new DTOPriceDIMOQPartner
                    {
                        ID = c.CAT_Partner.ID,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI Province MOQ
        public DTOResult CUSPrice_DI_PriceMOQ_Province_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.ProvinceID.HasValue).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        ProvinceID = c.ProvinceID.Value,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        ProvinceCode = c.CAT_Province.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Province_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQ_Province_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ProvinceID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceExID;
                        obj.ProvinceID = ProvinceID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQ_Province_NotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.ProvinceID > 0).Select(c => c.ProvinceID).Distinct().ToList();
                    var query = model.CAT_Province.Where(c =>!lstID.Contains(c.ID)).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceCode = c.Code,
                        ProvinceName = c.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        #endregion

        #region CO_Packing

        public List<DTOPriceRouting> CUSPrice_CO_COPackingPrice_List(int priceID)
        {
            try
            {
                List<DTOPriceRouting> result = new List<DTOPriceRouting>();
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objPrice.CAT_ContractTerm.ContractID);
                        result = objContract.CAT_ContractRouting.Select(c => new DTOPriceRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToList();

                        foreach (var item in result)
                        {
                            item.ListContainerPrice = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID && c.ContractRoutingID == item.ID).Select(c => new DTOCATPriceCOContainer
                            {
                                ID = c.ID,
                                PackingID = c.PackingID,
                                Price = c.Price,
                                PriceMin = c.PriceMin,
                                PriceMax = c.PriceMax,
                                PriceID = c.PriceID,
                                ContractRoutingID = c.ContractRoutingID,
                                PackingName = c.CAT_Packing.PackingName
                            }).ToList();
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_CO_COPackingPrice_SaveList(List<DTOPriceRouting> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routing in data)
                    {
                        if (routing.ListContainerPrice != null && routing.ListContainerPrice.Count > 0)
                        {
                            foreach (var con in routing.ListContainerPrice)
                            {
                                var obj = model.CAT_PriceCOContainer.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == routing.ID && c.PackingID == con.PackingID);
                                if (obj == null)
                                {
                                    obj = new CAT_PriceCOContainer();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.PriceID = priceID;
                                    obj.PackingID = con.PackingID;
                                    obj.ContractRoutingID = routing.ID;
                                    model.CAT_PriceCOContainer.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Price = con.Price;
                                obj.PriceMax = con.PriceMax;
                                obj.PriceMin = con.PriceMin;
                            }
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceContainer_Export CUSPrice_CO_COPackingPrice_Export(int priceID)
        {
            try
            {
                DTOPriceContainer_Export result = new DTOPriceContainer_Export();
                result.ListPacking = new List<CATPacking>();
                result.ListRouting = new List<DTOPrice_Routing>();
                result.ListRoutingPrice = new List<DTOPrice_COPrice>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        var lstPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                        {
                            ID = c.ID,
                            Code = c.Code,
                            PackingName = c.PackingName
                        }).ToList();
                        result.ListPacking.AddRange(lstPacking);
                        var lstRouting = model.CAT_ContractRouting.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new DTOPrice_Routing
                        {
                            RoutingID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToList();
                        result.ListRouting.AddRange(lstRouting);
                        var lstRoutingPrice = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID && c.ContractRoutingID.HasValue).Select(c => new DTOPrice_COPrice
                        {
                            RoutingID = c.ContractRoutingID.Value,
                            PackingID = c.PackingID,
                            Price = c.Price
                        }).ToList();
                        result.ListRoutingPrice.AddRange(lstRoutingPrice);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_CO_COPackingPrice_Import(List<DTOPrice_COPackingPrice_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (data != null)
                    {
                        // Xóa hết dữ liệu cũ
                        var lst = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID);
                        foreach (var item in lst)
                        {
                            model.CAT_PriceCOContainer.Remove(item);
                        }

                        foreach (var item in data.Where(c => c.ID > 0))
                        {
                            foreach (var o in item.ListContainerPrice)
                            {
                                var objPrice = new CAT_PriceCOContainer();
                                objPrice.CreatedBy = Account.UserName;
                                objPrice.CreatedDate = DateTime.Now;
                                objPrice.ContractRoutingID = item.ID;
                                objPrice.PackingID = o.PackingID;
                                objPrice.PriceID = priceID;
                                objPrice.Price = o.Price;
                                model.CAT_PriceCOContainer.Add(objPrice);
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CO_Service

        public DTOResult CUSPrice_CO_Service_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOService.Where(c => c.PriceID == priceID && c.PackingID == null).Select(c => new DTOCATPriceCOService
                    {
                        ID = c.ID,
                        PriceID = c.PriceID,
                        ServiceID = c.ServiceID,
                        Price = c.Price,
                        CurrencyID = c.CurrencyID,
                        ServiceName = c.CAT_Service.ServiceName,
                        CurrencyName = c.CAT_Currency.CurrencyName,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        //IsContainer = c.CAT_Service.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingServiceCO,
                        //PackingNameService = c.CAT_Service.CAT_Packing.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPriceCOService>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSPrice_CO_ServicePacking_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOService.Where(c => c.PriceID == priceID && c.PackingID != null).Select(c => new DTOCATPriceCOService
                    {
                        ID = c.ID,
                        PriceID = c.PriceID,
                        ServiceID = c.ServiceID,
                        Price = c.Price,
                        CurrencyID = c.CurrencyID,
                        ServiceName = c.CAT_Service.ServiceName,
                        CurrencyName = c.CAT_Currency.CurrencyName,
                        PackingID = c.PackingID,
                        PackingName = c.PackingID.HasValue ? c.CAT_Packing.PackingName : string.Empty,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        //IsContainer = c.CAT_Service.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingServiceCO,
                        //PackingNameService = c.CAT_Service.CAT_Packing.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPriceCOService>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATPriceCOService CUSPrice_CO_Service_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCATPriceCOService result = new DTOCATPriceCOService();
                    if (id > 0)
                    {
                        result = model.CAT_PriceCOService.Where(c => c.ID == id).Select(c => new DTOCATPriceCOService
                        {
                            ID = c.ID,
                            PriceID = c.PriceID,
                            ServiceID = c.ServiceID,
                            PackingID = c.PackingID,
                            Price = c.Price,
                            CurrencyID = c.CurrencyID,
                            ServiceName = c.CAT_Service.ServiceName,
                            CurrencyName = c.CAT_Currency.CurrencyName,
                            PackingName = c.CAT_Packing != null ? c.CAT_Packing.PackingName : string.Empty,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objService = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeDoc).FirstOrDefault();
                        if (objService != null) result.ServiceID = objService.ID;
                        var objCurrency = model.CAT_Currency.FirstOrDefault();
                        if (objCurrency != null) result.CurrencyID = objCurrency.ID;
                        var objPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).FirstOrDefault();
                        if (objPacking != null) result.PackingID = objPacking.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOCATPriceCOService CUSPrice_CO_ServicePacking_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCATPriceCOService result = new DTOCATPriceCOService();
                    if (id > 0)
                    {
                        result = model.CAT_PriceCOService.Where(c => c.ID == id).Select(c => new DTOCATPriceCOService
                        {
                            ID = c.ID,
                            PriceID = c.PriceID,
                            ServiceID = c.ServiceID,
                            PackingID = c.PackingID,
                            Price = c.Price,
                            CurrencyID = c.CurrencyID,
                            ServiceName = c.CAT_Service.ServiceName,
                            CurrencyName = c.CAT_Currency.CurrencyName,
                            PackingName = c.CAT_Packing != null ? c.CAT_Packing.PackingName : string.Empty,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objService = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeContainer).FirstOrDefault();
                        if (objService != null) result.ServiceID = objService.ID;
                        var objCurrency = model.CAT_Currency.FirstOrDefault();
                        if (objCurrency != null) result.CurrencyID = objCurrency.ID;
                        var objPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).FirstOrDefault();
                        if (objPacking != null) result.PackingID = objPacking.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CUSPrice_CO_Service_Save(DTOCATPriceCOService item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng Service
                    if (item.PackingID.HasValue)
                    {
                        if (model.CAT_PriceCOService.FirstOrDefault(c => c.PriceID == priceID && c.ServiceID == item.ServiceID && c.PackingID == item.PackingID && c.ID != item.ID) != null)
                            throw FaultHelper.BusinessFault(null, null, "Dịch vụ và loại Cotainer không được trùng!");
                    }
                    else
                    {
                        if (model.CAT_PriceCOService.FirstOrDefault(c => c.PriceID == priceID && c.ServiceID == item.ServiceID && c.PackingID == null && c.ID != item.ID) != null)
                            throw FaultHelper.BusinessFault(null, null, "Dịch vụ không được trùng!");
                    }
                    #endregion

                    var obj = model.CAT_PriceCOService.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceCOService();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ServiceID = item.ServiceID;
                    obj.CurrencyID = item.CurrencyID;
                    if (item.PackingID != null && item.PackingID > 0)
                        obj.PackingID = item.PackingID;
                    else
                        obj.PackingID = null;
                    obj.Price = item.Price;
                    obj.PriceMax = item.PriceMax;
                    obj.PriceMin = item.PriceMin;

                    if (obj.ID < 1)
                        model.CAT_PriceCOService.Add(obj);

                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_CO_Service_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOService.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.CAT_PriceCOService.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSPrice_CO_CATService_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeDoc).Select(c => new CATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName
                    }).ToList();
                    result.Data = query as IEnumerable<CATService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSPrice_CO_CATServicePacking_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeContainer).Select(c => new CATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName
                    }).ToList();
                    result.Data = query as IEnumerable<CATService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSPrice_CO_CATCODefault_List(int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = new List<DTOCATPacking>();
                    if (contractTermID > 0)
                    {
                        int ContractID = model.CAT_ContractTerm.Where(c => c.ID == contractTermID).Select(c => c.ContractID).FirstOrDefault();
                        query = model.CAT_ContractCODefault.Where(c => c.ContractID == ContractID).Select(c => new DTOCATPacking
                        {
                            ID = c.PackingID,
                            PackingName = c.CAT_Packing.PackingName
                        }).ToList();
                    }
                    result.Data = query as IEnumerable<DTOCATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region ltl level

        public List<DTOPriceDILevelGroupProduct> CUSPrice_DI_PriceLevel_DetailData(int priceID)
        {
            try
            {
                List<DTOPriceDILevelGroupProduct> result = new List<DTOPriceDILevelGroupProduct>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDILevelGroupProduct
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        LevelID = c.ContractLevelID,
                        GroupProductID = c.GroupOfProductID,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_DI_PriceLevel_Save(List<DTOPriceDILevelGroupProduct> lst, int priceid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var priceNew in lst)
                    {
                        var obj = model.CAT_PriceDILevelGroupProduct.FirstOrDefault(c => c.PriceID == priceid && c.ContractRoutingID == priceNew.RoutingID && c.ContractLevelID == priceNew.LevelID && c.GroupOfProductID == priceNew.GroupProductID);
                        if (obj == null)
                        {
                            obj = new CAT_PriceDILevelGroupProduct();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractLevelID = priceNew.LevelID;
                            obj.GroupOfProductID = priceNew.GroupProductID;
                            obj.ContractRoutingID = priceNew.RoutingID;
                            obj.PriceID = priceid;
                            model.CAT_PriceDILevelGroupProduct.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                    }
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceDILevelData CUSPrice_DI_PriceLevel_ExcelData(int priceid, int contractTermID)
        {
            try
            {
                DTOPriceDILevelData result = new DTOPriceDILevelData();
                result.ListDetail = new List<DTOPriceDILevelGroupProduct>();
                result.ListGroupProduct = new List<DTOCUSGroupOfProduct>();
                result.ListLevel = new List<DTOCATContractLevel>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    result.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == objTerm.ContractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName
                    }).ToList();
                    result.ListGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == objTerm.CAT_Contract.CustomerID.Value).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                    }).ToList();

                    if (objTerm.IsClosed)
                    {
                        var lstRoutingID = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == objTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();

                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();
                    }


                    result.ListDetail = model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == priceid).Select(c => new DTOPriceDILevelGroupProduct
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        LevelID = c.ContractLevelID,
                        GroupProductID = c.GroupOfProductID,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_DI_PriceLevel_ExcelImport(List<DTOPriceDILevelImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceDILevelGroupProduct.FirstOrDefault(c => c.ContractLevelID == detail.LevelID && c.ContractRoutingID == row.RouteID && c.GroupOfProductID == detail.GroupProductID && c.PriceID == priceID);
                            if (obj == null)
                            {
                                obj = new CAT_PriceDILevelGroupProduct();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractLevelID = detail.LevelID;
                                obj.GroupOfProductID = detail.GroupProductID;
                                obj.ContractRoutingID = row.RouteID;
                                obj.PriceID = priceID;
                                model.CAT_PriceDILevelGroupProduct.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public SYSExcel CUSPrice_DI_PriceLevel_ExcelInit(int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = CUSPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        //cot tinh
                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        //cot dong
                        int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                        var cellCols = new List<Cell>();
                        foreach (var level in lst.ListLevel)
                        {
                            cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            col += lst.ListGroupProduct.Count;
                            foreach (var pro in lst.ListGroupProduct)
                            {
                                cellCols.Add(HelperExcel.NewCell(collever++, pro.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                        }

                        // add cot vao row
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                        //merged cot
                        //merged cot tinh
                        col = 0;
                        ws.MergedCells = new List<string>(){ 
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                        };

                        //merged cot dong
                        var mercol = 3;
                        foreach (var level in lst.ListLevel)
                        {
                            ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + lst.ListGroupProduct.Count - 1));
                            mercol += lst.ListGroupProduct.Count;
                        }

                        //du lieu vao
                        int stt = 1;
                        foreach (var route in lst.ListRoute)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(route.Code));
                            cells.Add(HelperExcel.NewCell(route.RoutingName));
                            foreach (var level in lst.ListLevel)
                            {
                                foreach (var pro in lst.ListGroupProduct)
                                {
                                    var check = lst.ListDetail.Where(c => c.RoutingID == route.ID && c.LevelID == level.ID && c.GroupProductID == pro.ID).FirstOrDefault();
                                    if (check != null)
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    else
                                        cells.Add(HelperExcel.NewCell(0));
                                }
                            }
                            stt++;
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CUSPrice_DI_PriceLevel_ExcelChange(int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = CUSPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    int ColEnd = lst.ListGroupProduct.Count * lst.ListLevel.Count;

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colCheckRoute = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataCodeRouting = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeRouting, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 250);
                        indexError++;
                        if (flag && lst.ListRoute.Where(c => c.Code == dataCodeRouting).Count() < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataCodeRouting).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRoute, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError++;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataPrice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataPrice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSPrice_DI_PriceLevel_OnExcelImport(int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    int ColEnd = lstRoute.ListGroupProduct.Count * lstRoute.ListLevel.Count;

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colCheckRoute = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataCodeRouting = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeRouting, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 250);
                        indexError++;
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataCodeRouting).Count() < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataCodeRouting).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRoute, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError++;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataPrice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataPrice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CUSPrice_DI_PriceLevel_ExcelApprove(int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    int ColEnd = lstRoute.ListGroupProduct.Count * lstRoute.ListLevel.Count;

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colCheckRoute = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            if (eRow.Index == 0) continue;

                            colData = 3;
                            string routeID = HelperExcel.GetString(eRow, colCheckRoute);
                            int getrouteID = Int32.Parse(routeID);

                            foreach (var level in lstRoute.ListLevel)
                            {
                                foreach (var pro in lstRoute.ListGroupProduct)
                                {
                                    string price = "0";
                                    if (colData < eRow.Cells.Count)
                                        price = HelperExcel.GetString(eRow, colData++);
                                    int getprice = Int32.Parse(price);
                                    if (getprice > 0)
                                    {
                                        var obj = model.CAT_PriceDILevelGroupProduct.FirstOrDefault(c => c.ContractLevelID == level.ID && c.ContractRoutingID == getrouteID && c.GroupOfProductID == pro.ID && c.PriceID == priceID);
                                        if (obj == null)
                                        {
                                            obj = new CAT_PriceDILevelGroupProduct();
                                            obj.CreatedBy = Account.UserName;
                                            obj.CreatedDate = DateTime.Now;
                                            obj.ContractLevelID = level.ID;
                                            obj.GroupOfProductID = pro.ID;
                                            obj.ContractRoutingID = getrouteID;
                                            obj.PriceID = priceID;
                                            model.CAT_PriceDILevelGroupProduct.Add(obj);
                                        }
                                        else
                                        {
                                            obj.ModifiedBy = Account.UserName;
                                            obj.ModifiedDate = DateTime.Now;
                                        }
                                        obj.Price = getprice;
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region MOQ Load & Unload

        #region Load

        #region info
        public DTOResult CUSPrice_DI_PriceMOQLoad_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && c.IsLoading).Select(c => new DTOPriceDIMOQLoad
                    {
                        ID = c.ID,
                        MOQName = c.MOQName,
                        PriceID = c.PriceID,
                        ExprInput = c.ExprInput,
                        ExprCBM = c.ExprCBM,
                        ExprTon = c.ExprTon,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        DIMOQLoadSumID = c.DIMOQLoadSumID,
                        DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoad>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLoad CUSPrice_DI_PriceMOQLoad_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLoad result = new DTOPriceDIMOQLoad();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id && c.IsLoading).Select(c => new DTOPriceDIMOQLoad
                                    {
                                        ID = c.ID,
                                        MOQName = c.MOQName,
                                        PriceID = c.PriceID,
                                        ExprInput = c.ExprInput,
                                        ExprCBM = c.ExprCBM,
                                        ExprTon = c.ExprTon,
                                        ExprPrice = c.ExprPrice,
                                        ExprPriceFix = c.ExprPriceFix,
                                        ExprQuan = c.ExprQuan,
                                        DIMOQLoadSumID = c.DIMOQLoadSumID,
                                        DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                                        TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                                    }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOPriceDIMOQLoad();
                        result.ID = 0;
                        result.DIMOQLoadSumID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIMOQLoadSum).FirstOrDefault();
                        if (obj != null) result.DIMOQLoadSumID = obj.ID;
                        result.TypeOfPriceDIExID = 0;
                        var objType = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        if (objType != null) result.TypeOfPriceDIExID = objType.ID;

                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSPrice_DI_PriceMOQLoad_Save(DTOPriceDIMOQLoad item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQLoad();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        obj.IsLoading = true;
                        model.CAT_PriceDIMOQLoad.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MOQName = item.MOQName;
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.DIMOQLoadSumID = item.DIMOQLoadSumID;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;

                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var moqload in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && c.IsLoading))
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(moqload);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Group Location
        public DTOResult CUSPrice_DI_PriceMOQLoad_GroupLocation_List(string request, int priceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == priceMOQLoadID).Select(c => new DTOPriceDIMOQLoadGroupLocation
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_GroupLocation_SaveList(List<int> lst, int priceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = priceMOQLoadID;
                        obj.GroupOfLocationID = group;
                        model.CAT_PriceDIMOQLoadGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQLoad_GroupLocation_GroupNotInList(string request, int priceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == priceMOQLoadID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq load GroupProduct
        public DTOResult CUSPrice_DI_PriceMOQLoad_GroupProduct_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID).Select(c => new DTOPriceDIMOQLoadGroupProduct
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLoadGroupProduct CUSPrice_DI_PriceMOQLoad_GroupProduct_Get(int id, int cusID)
        {
            try
            {
                DTOPriceDIMOQLoadGroupProduct result = new DTOPriceDIMOQLoadGroupProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQLoadGroupProduct
                        {
                            ID = c.ID,
                            PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                            GroupOfProductID = c.GroupOfProductID,
                            ExprPrice = c.ExprPrice,
                            ExprQuantity = c.ExprQuantity
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.PriceDIMOQLoadID = 0;
                        result.GroupOfProductID = 0;
                        var obj = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).FirstOrDefault();
                        if (obj != null) result.GroupOfProductID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_GroupProduct_Save(DTOPriceDIMOQLoadGroupProduct item, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_PriceDIMOQLoadGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQLoadGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        model.CAT_PriceDIMOQLoadGroupProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.ExprQuantity = item.ExprQuantity;
                    obj.ExprPrice = item.ExprPrice;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQLoad_GroupProduct_GOPList(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq load Location
        public DTOResult CUSPrice_DI_PriceMOQLoad_Location_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.LocationID.HasValue).Select(c => new DTOPriceDIMOQLoadLocation
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        LocationID = c.LocationID.Value,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_Location_LocationNotInSaveList(List<int> lst, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        obj.LocationID = locationID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQLoad_Location_LocationNotInList(string request, int PriceMOQLoadID, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                    var query = model.CUS_Location.Where(c => c.CustomerID == customerID && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        Location = c.LocationName,
                        Address = c.CAT_Location.Address,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceDIMOQLoadLocation CUSPrice_DI_PriceMOQLoad_Location_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLoadLocation result = new DTOPriceDIMOQLoadLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIMOQLoadRouting.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQLoadLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSPrice_DI_PriceMOQLoad_Location_Save(DTOPriceDIMOQLoadLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoadRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq ruote
        public DTOResult CUSPrice_DI_PriceMOQLoad_Route_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.RoutingID.HasValue).Select(c => new DTOPriceDIMOQLoadRoute
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadRoute>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_Route_SaveList(List<int> lst, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQLoad_Route_RouteNotInList(string request, int PriceMOQLoadID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.RoutingID.HasValue).Select(c => c.RoutingID).Distinct().ToList();

                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq parent route
        public DTOResult CUSPrice_DI_PriceMOQLoad_ParentRoute_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceDIMOQLoadParentRoute
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadParentRoute>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_ParentRoute_SaveList(List<int> lst, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQLoad_ParentRoute_RouteNotInList(string request, int PriceMOQLoadID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu phụ lục");
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI Province MOQ
        public DTOResult CUSPrice_DI_PriceMOQLoad_Province_List(string request, int PriceDIMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceDIMOQLoadID && c.ProvinceID.HasValue).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceID = c.ProvinceID.Value,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        ProvinceCode = c.CAT_Province.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_Province_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQLoad_Province_SaveList(List<int> lst, int PriceDIMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ProvinceID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceDIMOQLoadID;
                        obj.ProvinceID = ProvinceID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_DI_PriceMOQLoad_Province_NotInList(string request, int PriceDIMOQLoadID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceDIMOQLoadID && c.ProvinceID > 0).Select(c => c.ProvinceID).Distinct().ToList();
                    var query = model.CAT_Province.Where(c => !lstID.Contains(c.ID)).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceCode = c.Code,
                        ProvinceName = c.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Unload

        #region info
        public DTOResult CUSPrice_DI_PriceMOQUnLoad_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && !c.IsLoading).Select(c => new DTOPriceDIMOQLoad
                    {
                        ID = c.ID,
                        MOQName = c.MOQName,
                        PriceID = c.PriceID,
                        ExprInput = c.ExprInput,
                        ExprCBM = c.ExprCBM,
                        ExprTon = c.ExprTon,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        DIMOQLoadSumID = c.DIMOQLoadSumID,
                        DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoad>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLoad CUSPrice_DI_PriceMOQUnLoad_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLoad result = new DTOPriceDIMOQLoad();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id && c.IsLoading == false).Select(c => new DTOPriceDIMOQLoad
                        {
                            ID = c.ID,
                            MOQName = c.MOQName,
                            PriceID = c.PriceID,
                            ExprInput = c.ExprInput,
                            ExprCBM = c.ExprCBM,
                            ExprTon = c.ExprTon,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            DIMOQLoadSumID = c.DIMOQLoadSumID,
                            DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                            TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                        }).FirstOrDefault();

                    }
                    else
                    {
                        result = new DTOPriceDIMOQLoad();
                        result.ID = 0;
                        result.DIMOQLoadSumID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIMOQLoadSum).FirstOrDefault();
                        if (obj != null) result.DIMOQLoadSumID = obj.ID;
                        result.TypeOfPriceDIExID = 0;
                        var objType = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        if (objType != null) result.TypeOfPriceDIExID = objType.ID;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSPrice_DI_PriceMOQUnLoad_Save(DTOPriceDIMOQLoad item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQLoad();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        obj.IsLoading = false;
                        model.CAT_PriceDIMOQLoad.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MOQName = item.MOQName;
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.DIMOQLoadSumID = item.DIMOQLoadSumID;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQUnLoad_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_DI_PriceMOQUnLoad_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var moqload in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && !c.IsLoading))
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(moqload);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #endregion

        #region CAT_PriceCOContainer
        public DTOPriceCOContainerData CUSPrice_CO_COContainer_Data(int priceID)
        {
            try
            {
                DTOPriceCOContainerData result = new DTOPriceCOContainerData();
                result.ListDetail = new List<DTOPriceCOContainer>();
                result.ListPacking = new List<CATPacking>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");

                    result.ListDetail = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID).Select(c => new DTOPriceCOContainer
                    {
                        ID = c.ID,
                        PackingID = c.PackingID,
                        Price = c.Price,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        PriceID = c.PriceID,
                        ContractRoutingID = c.ContractRoutingID.Value
                    }).ToList();
                    result.ListPacking = model.CAT_ContractCODefault.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new CATPacking
                    {
                        ID = c.PackingID,
                        Code = c.CAT_Packing.Code,
                        PackingName = c.CAT_Packing.PackingName,
                        TypeOfPackageID = c.CAT_Packing.TypeOfPackageID
                    }).Distinct().ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_COContainer_SaveList(List<DTOPriceCOContainer> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var priceNew in data)
                    {
                        var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == priceNew.ContractRoutingID && c.PackingID == priceNew.PackingID && c.PriceID == priceID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_PriceCOContainer();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            obj.ContractRoutingID = priceNew.ContractRoutingID;
                            obj.PackingID = priceNew.PackingID;
                            model.CAT_PriceCOContainer.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMax = priceNew.PriceMax;
                        obj.PriceMin = priceNew.PriceMin;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_CO_COContainer_ContainerList(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID).Select(c => c.PackingID).Distinct().ToList();
                    var query = model.CAT_Packing.Where(c => lisGOV.Contains(c.ID) && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATPacking>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_COContainer_ContainerDelete(List<int> lstPacking, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    foreach (var packing in lstPacking)
                    {
                        foreach (var priceGov in model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID && c.PackingID == packing))
                        {
                            model.CAT_PriceCOContainer.Remove(priceGov);
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSPrice_CO_COContainer_ContainerNotInList(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID).Select(c => c.PackingID).Distinct().ToList();
                    var query = model.CAT_Packing.Where(c => !lisGOV.Contains(c.ID) && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATPacking>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_COContainer_ContainerNotInSave(List<int> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        var listRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objPrice.CAT_ContractTerm.ContractID).Select(c => c.ID).ToList();
                        foreach (var route in listRoute)
                        {
                            foreach (var packing in lst)
                            {
                                var obj = model.CAT_PriceCOContainer.FirstOrDefault(c => c.PriceID == priceID && c.PackingID == packing);
                                if (obj == null)
                                {
                                    obj = new CAT_PriceCOContainer();
                                    obj.PackingID = packing;
                                    obj.PriceID = priceID;
                                    obj.ContractRoutingID = route;
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    model.CAT_PriceCOContainer.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Price = 0;
                            }
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceCOContainerExcelData CUSPrice_CO_COContainer_ExcelData(int priceid, int termID)
        {
            try
            {
                DTOPriceCOContainerExcelData result = new DTOPriceCOContainerExcelData();
                result.ListDetail = new List<DTOPriceCOContainer>();
                result.ListPacking = new List<CATPacking>();
                result.ListRouting = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceid);
                    if (price == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");

                    result.ListDetail = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceid).Select(c => new DTOPriceCOContainer
                    {
                        ID = c.ID,
                        ContractRoutingID = c.ContractRoutingID.Value,
                        PriceMin = c.PriceMin,
                        PriceMax = c.PriceMax,
                        PackingID = c.PackingID,
                        Price = c.Price
                    }).ToList();

                    result.ListPacking = model.CAT_ContractCODefault.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new CATPacking
                    {
                        ID = c.PackingID,
                        Code = c.CAT_Packing.Code,
                        PackingName = c.CAT_Packing.PackingName,
                    }).Distinct().ToList();

                    result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == termID).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSPrice_CO_COContainer_ExcelImport(List<DTOPriceCOContainerImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == detail.ContractRoutingID && c.PackingID == detail.PackingID && c.PriceID == priceID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new CAT_PriceCOContainer();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.PackingID = detail.PackingID;
                                obj.ContractRoutingID = row.RouteID;
                                model.CAT_PriceCOContainer.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                            obj.PriceMax = detail.PriceMax;
                            obj.PriceMin = detail.PriceMin;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSPrice_CO_GroupContainer_ExcelInit(bool isFrame, int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = CUSPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListPacking)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListPacking)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListPacking)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRouting)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListPacking)
                                {
                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.PackingID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRouting)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListPacking)
                                {

                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.PackingID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CUSPrice_CO_GroupContainer_ExcelChange(bool isFrame, int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = CUSPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListPacking.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListPacking.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRouting.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRouting.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSPrice_CO_GroupContainer_ExcelOnImport(bool isFrame, int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListPacking.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListPacking.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRouting.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRouting.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CUSPrice_CO_GroupContainer_ExcelApprove(bool isFrame, int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = CUSPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListPacking.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListPacking.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRouting)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListPacking)
                                        {
                                            String priceMin = HelperExcel.GetString(eRow, colData++);
                                            String priceMax = HelperExcel.GetString(eRow, colData++);
                                            decimal? getpriceMin = null;
                                            decimal? getpriceMax = null;
                                            try
                                            {
                                                getpriceMin = decimal.Parse(priceMin);
                                            }
                                            catch
                                            {
                                                getpriceMin = null;
                                            }
                                            try
                                            {
                                                getpriceMax = decimal.Parse(priceMax);
                                            }
                                            catch
                                            {
                                                getpriceMax = null;
                                            }

                                            var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == getRoutingID && c.PackingID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceCOContainer();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.PackingID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceCOContainer.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.PriceMax = getpriceMax;
                                            obj.PriceMin = getpriceMin;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRouting)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListPacking)
                                        {
                                            String price = HelperExcel.GetString(eRow, colData++);
                                            decimal getprice = 0;
                                            try
                                            {
                                                getprice = decimal.Parse(price);
                                            }
                                            catch
                                            {
                                                getprice = 0;
                                            }
                                            var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == getRoutingID && c.PackingID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceCOContainer();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.PackingID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceCOContainer.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.Price = getprice;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region GroupOfProduct
        public DTOResult CUSContract_GroupOfProduct_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractGroupOfProduct.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractGroupOfProduct
                    {
                        ID = c.ID,
                        ContractID = c.ContractID,
                        Expression = c.Expression,
                        GroupOfProductID = c.GroupOfProductID,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductIDChange = c.GroupOfProductIDChange,
                        GroupOfProductIDChangeName = c.GroupOfProductIDChange.HasValue ? c.CUS_GroupOfProduct1.GroupName : string.Empty,
                        IsChoose = false,
                        ProductID = c.ProductID > 0 ? c.ProductID.Value : -1,
                        ProductName = c.ProductID > 0 ? c.CUS_Product.ProductName : string.Empty,
                        ProductIDChange = c.ProductIDChange > 0 ? c.ProductIDChange.Value : -1,
                        ProductIDChangeName = c.ProductIDChange > 0 ? c.CUS_Product1.ProductName : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContractGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATContractGroupOfProduct CUSContract_GroupOfProduct_Get(int id, int contractID)
        {
            try
            {
                DTOCATContractGroupOfProduct result = new DTOCATContractGroupOfProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_ContractGroupOfProduct.Where(c => c.ID == id).Select(c => new DTOCATContractGroupOfProduct
                        {
                            ID = c.ID,
                            ContractID = c.ContractID,
                            Expression = c.Expression,
                            GroupOfProductID = c.GroupOfProductID,
                            GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                            GroupOfProductIDChange = c.GroupOfProductIDChange,
                            GroupOfProductIDChangeName = c.GroupOfProductIDChange.HasValue ? c.CUS_GroupOfProduct1.GroupName : string.Empty,
                            IsChoose = false,
                            ProductID = c.ProductID > 0 ? c.ProductID.Value : -1,
                            ProductName = c.ProductID > 0 ? c.CUS_Product.ProductName : string.Empty,
                            ProductIDChange = c.ProductIDChange > 0 ? c.ProductIDChange.Value : -1,
                            ProductIDChangeName = c.ProductIDChange > 0 ? c.CUS_Product1.ProductName : string.Empty,
                            ExpressionInput = c.ExpressionInput,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                        if (contract != null)
                        {
                            var group = model.CUS_GroupOfProduct.FirstOrDefault(c => c.CustomerID == contract.CustomerID);
                            result.GroupOfProductID = -1;
                            if (group != null) result.GroupOfProductID = group.ID;
                            result.GroupOfProductIDChange = -1;
                            result.ProductID = -1;
                            result.ProductIDChange = -1;
                            result.ContractID = contractID;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_GroupOfProduct_Save(DTOCATContractGroupOfProduct item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.GroupOfProductID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn nhóm hàng!");

                    var obj = model.CAT_ContractGroupOfProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_ContractGroupOfProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        model.CAT_ContractGroupOfProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.Expression = item.Expression;
                    obj.ExpressionInput = item.ExpressionInput;
                    obj.GroupOfProductIDChange = item.GroupOfProductIDChange > 0 ? item.GroupOfProductIDChange : null;
                    obj.ProductID = item.ProductID > 0 ? item.ProductID : null;
                    obj.ProductIDChange = item.ProductIDChange > 0 ? item.ProductIDChange : null;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_GroupOfProduct_Delete(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (lstid.Count > 0)
                    {
                        foreach (var item in lstid)
                        {
                            var obj = model.CAT_ContractGroupOfProduct.FirstOrDefault(c => c.ID == item);
                            if (obj != null)
                                model.CAT_ContractGroupOfProduct.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public double? CUSContract_GroupOfProduct_Check(DTOCATContractGroupOfProduct item)
        {
            try
            {
                double? result = null;
                using (var model = new DataEntities())
                {
                    //string file = "/" + "MailTemplate/" + "testKPI" + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                    //if (System.IO.File.Exists(System.Web.HttpContext.Current.Server.MapPath(file)))
                    //    System.IO.File.Delete(System.Web.HttpContext.Current.Server.MapPath(file));
                    //System.IO.FileInfo exportfile = new System.IO.FileInfo(System.Web.HttpContext.Current.Server.MapPath(file));

                    //ExcelPackage package = new ExcelPackage(exportfile);

                    ExcelPackage package = new ExcelPackage();
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                    int row = 0, col = 1;
                    string strCol = "A", strRow = "";
                    Dictionary<string, string> dicEx = new Dictionary<string, string>();

                    string strExpInput = item.ExpressionInput;
                    string strExp = item.Expression;

                    row++;
                    worksheet.Cells[row, col].Value = item.OrderTon;
                    strExp = strExp.Replace("[OrderTon]", strCol + row);
                    strRow = strCol + row; row++;

                    worksheet.Cells[row, col].Value = item.OrderCBM;
                    strExp = strExp.Replace("[OrderCBM]", strCol + row);
                    strRow = strCol + row; row++;

                    worksheet.Cells[row, col].Value = item.OrderQuantity;
                    strExp = strExp.Replace("[OrderQuantity]", strCol + row);
                    strRow = strCol + row; row++;

                    worksheet.Cells[row, col].Value = item.Ton;
                    strExp = strExp.Replace("[Ton]", strCol + row);
                    strRow = strCol + row; row++;

                    worksheet.Cells[row, col].Value = item.CBM;
                    strExp = strExp.Replace("[CBM]", strCol + row);
                    strRow = strCol + row; row++;

                    worksheet.Cells[row, col].Value = item.Quantity;
                    strExp = strExp.Replace("[Quantity]", strCol + row);
                    strRow = strCol + row; row++;

                    worksheet.Cells[row, col].Formula = strExpInput;
                    row++;
                    worksheet.Cells[row, col].Formula = strExp;

                    package.Workbook.Calculate();
                    var val = worksheet.Cells[row - 1, col].Value.ToString().Trim();
                    bool flag = false;
                    try
                    {
                        flag = Convert.ToBoolean(val);
                    }
                    catch
                    {
                        flag = false;
                    }
                    if (flag)
                    {
                        val = worksheet.Cells[row, col].Value.ToString().Trim();
                        try
                        {
                            result = Convert.ToDouble(val);
                        }
                        catch
                        {
                            throw FaultHelper.BusinessFault(null, null, "Công thức lỗi");
                        }
                    }
                    else
                    {
                        var group = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == item.GroupOfProductID);
                        if (group != null && group.PriceOfGOPID != null)
                        {
                            if (group.PriceOfGOPID == -(int)SYSVarType.PriceOfGOPCBM)
                                return item.CBM;
                            else if (group.PriceOfGOPID == -(int)SYSVarType.PriceOfGOPTon)
                                return item.Ton;
                            else if (group.PriceOfGOPID == -(int)SYSVarType.PriceOfGOPTU)
                                return item.Quantity;
                        }
                    }
                    //package.Save();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public SYSExcel CUSContract_GroupOfProduct_ExcelInit(int contractID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    functionkey = functionkey + contractID.ToString();
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var data = model.CAT_ContractGroupOfProduct.Where(c => c.ContractID == contractID).Select(c => new 
                        {
                            GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                            GroupOfProductIDChangeCode = c.GroupOfProductIDChange.HasValue ? c.CUS_GroupOfProduct1.Code : string.Empty,
                            ProductCode = c.ProductID > 0 ? c.CUS_Product.Code : string.Empty,
                            ProductIDChangeCode = c.ProductIDChange > 0 ? c.CUS_Product1.Code : string.Empty,
                            ExpressionInput = c.ExpressionInput,
                            Expression = c.Expression,
                            ProductID = c.ProductID,
                            GroupOfProductID = c.GroupOfProductID,
                            ProductChangeID = c.ProductIDChange,
                            GroupOfProductIDChange = c.GroupOfProductIDChange,
                        }).ToList() ;

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã nhóm hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã mặt hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã nhóm hàng quy đổi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã mặt hàng quy đổi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Công thức kiểm tra", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Công thức quy đổi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);



                        int rowStart = 2;
                        int colData = 7;
                        int colCheckChange = colData++;
                        int colCheckNote = colData++;
                        int colCheckGroupOfProduct = colData++;
                        int colCheckProduct = colData++;
                        int colCheckGroupOfProductIDChange = colData++;
                        int colCheckProductIDChange = colData++;

                        var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfProductCode));
                            cells.Add(HelperExcel.NewCell(col++, item.ProductCode));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfProductIDChangeCode));
                            cells.Add(HelperExcel.NewCell(col++, item.ProductIDChangeCode));
                            cells.Add(HelperExcel.NewCell(col++, item.Expression));
                            cells.Add(HelperExcel.NewCell(col++, item.ExpressionInput));
                            var checkRow = HelperExcel.NewRow(ws.Rows.Count, cells);
                            ws.Rows.Add(checkRow);

                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProduct, item.GroupOfProductID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProduct, item.ProductID > 0 ? item.ProductID.ToString() : "-1");
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProductIDChange, item.GroupOfProductIDChange > 0  ? item.GroupOfProductIDChange.ToString() : "-1");
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProductIDChange, item.ProductChangeID > 0 ? item.ProductChangeID.ToString() : "-1");
                            HelperExcel.SaveData(model, id, lstWorksheet);

                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);

                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }
                    result = HelperExcel.GetByID(model, id);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CUSContract_GroupOfProduct_ExcelChange(int contractID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 7;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckGroupOfProduct = colData++;
                    int colCheckProduct = colData++;
                    int colCheckGroupOfProductIDChange = colData++;
                    int colCheckProductIDChange = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int customerid = 0;
                    if (contract != null)
                        customerid = contract.CustomerID.Value;
                    var ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    var ListProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        Code = c.Code
                    }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    int GroupOfProductID = -1;
                    int ProductID = -1;
                    int GroupOfProductChangeID = -1;
                    int ProductChangeID = -1;
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataGroupOfProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataExpression = HelperExcel.GetString(checkRow, colData++);
                        string dataExpressionInput = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupOfProductCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        
                        indexError++;
                        if (flag && ListGroupOfProduct.Count(c => c.Code == dataGroupOfProductCode) < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            var valid = "-1";
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductCode);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                GroupOfProductID = obj.ID;
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProduct, valid);
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProductCode))
                        {
                            var valid = "-1";
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductCode && c.GroupOfProductID == GroupOfProductID);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                ProductID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode))
                        {
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductIDChangeCode);
                            if (obj != null)
                            {
                                GroupOfProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductIDChangeCode && c.GroupOfProductID == GroupOfProductChangeID);
                            if (obj != null)
                            {
                                ProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                             HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                             flag = false;
                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataExpressionInput))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProduct, ProductID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProductIDChange, GroupOfProductChangeID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProductIDChange, ProductChangeID.ToString());
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CUSContract_GroupOfProduct_ExcelImport(int contractID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int rowStart = 1;
                    int colData = 7;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckGroupOfProduct = colData++;
                    int colCheckProduct = colData++;
                    int colCheckGroupOfProductIDChange = colData++;
                    int colCheckProductIDChange = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int customerid = 0;
                    if (contract != null)
                        customerid = contract.CustomerID.Value;
                    var ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    var ListProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        Code = c.Code
                    }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;
                        int GroupOfProductID = -1;
                        int ProductID = -1;
                        int GroupOfProductChangeID = -1;
                        int ProductChangeID = -1;

                        colData = 1;
                        string dataGroupOfProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataExpression = HelperExcel.GetString(checkRow, colData++);
                        string dataExpressionInput = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupOfProductCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag && ListGroupOfProduct.Count(c => c.Code == dataGroupOfProductCode) < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            var valid = "-1";
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductCode);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                GroupOfProductID = obj.ID;
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProduct, valid);
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProductCode))
                        {
                            var valid = "-1";
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductCode && c.GroupOfProductID == GroupOfProductID);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                ProductID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode))
                        {
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductIDChangeCode);
                            if (obj != null)
                            {
                                GroupOfProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductIDChangeCode && c.GroupOfProductID == GroupOfProductChangeID);
                            if (obj != null)
                            {
                                ProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataExpressionInput))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProduct, ProductID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProductIDChange, GroupOfProductChangeID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProductIDChange, ProductChangeID.ToString());
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CUSContract_GroupOfProduct_ExcelApprove(int contractID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 7;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckGroupOfProduct = colData++;
                    int colCheckProduct = colData++;
                    int colCheckGroupOfProductIDChange = colData++;
                    int colCheckProductIDChange = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        var lstIDRemove = model.CAT_ContractGroupOfProduct.Where(c => c.ContractID == contractID).Select(c => c.ID).ToList();
                        foreach(var item in lstIDRemove)
                        {
                            var obj = model.CAT_ContractGroupOfProduct.FirstOrDefault(c => c.ID == item);
                            if (obj != null)
                                model.CAT_ContractGroupOfProduct.Remove(obj);
                        }
                        model.SaveChanges();

                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataGroupOfProductCode = HelperExcel.GetString(checkRow, colData++);
                            string dataProductCode = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupOfProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                            string dataProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                            string dataExpression = HelperExcel.GetString(checkRow, colData++);
                            string dataExpressionInput = HelperExcel.GetString(checkRow, colData++);

                            int GroupOfProductID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckGroupOfProduct));
                            int ProductID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckProduct));
                            int GroupOfProductIDChangeID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckGroupOfProductIDChange));
                            int ProductIDChangeID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckProductIDChange));


                            var obj = new CAT_ContractGroupOfProduct();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractID = contractID;
                            model.CAT_ContractGroupOfProduct.Add(obj);

                            obj.GroupOfProductID = GroupOfProductID;
                            obj.Expression = dataExpression;
                            obj.ExpressionInput = dataExpressionInput;
                            if (GroupOfProductIDChangeID > 0)
                                obj.GroupOfProductIDChange = GroupOfProductIDChangeID;
                            else obj.GroupOfProductIDChange = null;

                            if (ProductID > 0)
                                obj.ProductID = ProductID;
                            else obj.ProductID = null;

                            if (ProductIDChangeID > 0)
                                obj.ProductIDChange = ProductIDChangeID;
                            else obj.ProductIDChange = null;

                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                    return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Cuscontract_material
        public DTOCUSPrice_MaterialData CUSContract_MaterialChange_Data(int contractMaterialID)
        {
            try
            {
                DTOCUSPrice_MaterialData result = new DTOCUSPrice_MaterialData();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Term_Change_Data(model, Account, contractMaterialID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_MaterialChange_Save(DTOCUSPrice_MaterialData item, int contractMaterialID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Change_Save(model, Account, item, contractMaterialID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Contract term(phụ lục hợp đồng)
        public DTOResult CUSContract_ContractTerm_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTerm.Where(c => c.ContractID == contractID).Select(c => new DTOContractTerm
                    {
                        ID = c.ID,
                        ContractID = c.ContractID,
                        Code = c.Code,
                        TermName = c.TermName,
                        DisplayName = c.DisplayName,
                        Note = c.Note,
                        MaterialID = c.MaterialID > 0 ? c.MaterialID.Value : -1,
                        MaterialCode = c.MaterialID > 0 ? c.FLM_Material.Code : string.Empty,
                        MaterialName = c.MaterialID > 0 ? c.FLM_Material.MaterialName : string.Empty,
                        PriceContract = c.PriceContract > 0 ? c.PriceContract.Value : 0,
                        PriceCurrent = c.PriceCurrent > 0 ? c.PriceCurrent.Value : 0,
                        PriceWarning = c.PriceWarning > 0 ? c.PriceWarning.Value : 0,
                        DEM = c.DEM,
                        DET = c.DET,
                        ExprETA = c.ExprETA,
                        ExprETARequest = c.ExprETARequest,
                        DateEffect = c.DateEffect,
                        DateExpire = c.DateExpire,
                        DatePrice = c.DatePrice,
                        ExprDatePrice = c.ExprDatePrice,
                        ExprInput = c.ExprInput,
                        ExprPrice = c.ExprPrice,
                        DateWarning = c.DateWarning,
                        IsAllRouting = c.IsAllRouting,
                        IsWarning = c.IsWarning,
                        IsClosed = c.IsClosed,
                        ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.CAT_ServiceOfOrder.SYS_Var.ValueOfVar : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));

                    var list = query.Data.Cast<DTOContractTerm>().ToList();

                    foreach (var item in list)
                    {
                        item.RateMaterial = 0;
                        item.RatePrice = 0;

                        if (item.PriceContract > 0 && item.PriceCurrent > 0)
                        {
                            item.RateMaterial = Math.Round(((double)item.PriceCurrent - (double)item.PriceContract) / (double)item.PriceContract * 100, 2);

                            if (!string.IsNullOrEmpty(item.ExprPrice))
                            {
                                // Lấy 1 cung đường ra tính giá
                                var itemPrice = model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceCOContainer.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();

                                if (itemPrice != null)
                                {
                                    DTOMaterialChecking itemCheck = new DTOMaterialChecking();
                                    itemCheck.Price = itemPrice.Price;
                                    itemCheck.PriceContract = item.PriceContract;
                                    itemCheck.PriceCurrent = item.PriceCurrent;
                                    itemCheck.PriceWarning = item.PriceWarning;

                                    decimal? newPrice = PriceChange_GetPrice(itemCheck, item.ExprPrice);
                                    if (newPrice > 0)
                                        item.RatePrice = Math.Round(((double)newPrice - (double)itemPrice.Price) / (double)itemPrice.Price * 100, 2);
                                }
                            }
                        }
                    }

                    result.Total = query.Total;
                    result.Data = list;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private decimal? PriceChange_GetPrice(DTOMaterialChecking item, string strExp)
        {
            try
            {
                decimal? result = null;
                ExcelPackage package = new ExcelPackage();
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                int row = 0, col = 1;
                string strCol = "A", strRow = "";

                row++;
                worksheet.Cells[row, col].Value = item.PriceContract;
                strExp = strExp.Replace("[PriceContract]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.PriceCurrent;
                strExp = strExp.Replace("[PriceCurrent]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.PriceWarning;
                strExp = strExp.Replace("[PriceWarning]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.Price;
                strExp = strExp.Replace("[Price]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Formula = strExp;

                package.Workbook.Calculate();
                var val = worksheet.Cells[row, col].Value.ToString().Trim();

                try
                {
                    result = Convert.ToDecimal(val);
                }
                catch { }

                return result;
            }
            catch
            {
                return null;
            }
        }


        public DTOContractTerm CUSContract_ContractTerm_Get(int id, int contractID)
        {
            try
            {
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null)
                    {
                        throw new Exception("Không tìm thấy hợp đồng.");
                    }
                    if (id > 0)
                    {
                        result = model.CAT_ContractTerm.Where(c => c.ID == id).Select(c => new DTOContractTerm
                        {
                            ID = c.ID,
                            ContractID = c.ContractID,
                            Code = c.Code,
                            TermName = c.TermName,
                            DisplayName = c.DisplayName,
                            Note = c.Note,
                            MaterialID = c.MaterialID > 0 ? c.MaterialID.Value : -1,
                            MaterialCode = c.MaterialID > 0 ? c.FLM_Material.Code : string.Empty,
                            MaterialName = c.MaterialID > 0 ? c.FLM_Material.MaterialName : string.Empty,
                            PriceContract = c.PriceContract > 0 ? c.PriceContract.Value : 0,
                            PriceCurrent = c.PriceCurrent > 0 ? c.PriceCurrent.Value : 0,
                            PriceWarning = c.PriceWarning > 0 ? c.PriceWarning.Value : 0,
                            DEM = c.DEM,
                            DET = c.DET,
                            ExprETA = c.ExprETA,
                            ExprETARequest = c.ExprETARequest,
                            ExprETD = c.ExprETD,
                            ExprETDRequest = c.ExprETDRequest,
                            DateEffect = c.DateEffect,
                            DateExpire = c.DateExpire,
                            DatePrice = c.DatePrice,
                            ExprDatePrice = c.ExprDatePrice,
                            ExprInput = c.ExprInput,
                            ExprPrice = c.ExprPrice,
                            DateWarning = c.DateWarning,
                            IsAllRouting = c.IsAllRouting,
                            IsWarning = c.IsWarning,
                            IsEditAllRouting = c.CAT_Price.Count() > 0 ? false : true,
                            IsClosed = c.IsClosed,
                            SortConfigDateStart = c.SortConfigDateStart,
                            ServiceOfOrderID = c.ServiceOfOrderID.HasValue ? c.ServiceOfOrderID : -1,
                            ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.CAT_ServiceOfOrder.SYS_Var.ValueOfVar : string.Empty,
                        }).FirstOrDefault();

                        if (result != null)
                        {
                            result.RateMaterial = 0;
                            result.RatePrice = 0;

                            if (result.PriceContract > 0 && result.PriceCurrent > 0)
                            {
                                result.RateMaterial = Math.Round(((double)result.PriceCurrent - (double)result.PriceContract) / (double)result.PriceContract * 100, 2);

                                if (!string.IsNullOrEmpty(result.ExprPrice))
                                {
                                    // Lấy 1 cung đường ra tính giá
                                    var itemPrice = model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceCOContainer.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();

                                    if (itemPrice != null)
                                    {
                                        DTOMaterialChecking itemCheck = new DTOMaterialChecking();
                                        itemCheck.Price = itemPrice.Price;
                                        itemCheck.PriceContract = result.PriceContract;
                                        itemCheck.PriceCurrent = result.PriceCurrent;
                                        itemCheck.PriceWarning = result.PriceWarning;

                                        decimal? newPrice = PriceChange_GetPrice(itemCheck, result.ExprPrice);
                                        if (newPrice > 0)
                                            result.RatePrice = Math.Round(((double)newPrice - (double)itemPrice.Price) / (double)itemPrice.Price * 100, 2);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        result.ID = -1;
                        result.MaterialID = -1;
                        result.DateEffect = DateTime.Now.Date;
                        result.DateExpire = DateTime.Now.Date.AddDays(1);
                        result.IsEditAllRouting = true;
                        result.ServiceOfOrderID = -1;
                    }

                    var transportMode = objContract.TransportModeID.HasValue ? HelperContract.GetTransportMode(model, objContract.TransportModeID.Value) : -1;
                    result.TypeOfMode = transportMode == iFCL ? 1 : transportMode == iFTL ? 2 : transportMode == iLTL ? 3 : 0;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CUSContract_ContractTerm_Save(DTOContractTerm item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int result = -1;
                    result = HelperContract.Term_Save(model, Account, item, contractID);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_ContractTerm_Delete(int id)
        {
            try
            {
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Delete(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_ContractTerm_Open(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Open(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_ContractTerm_Close(int id)
        {
            try
            {
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Close(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSContract_ContractTerm_Price_List(string request, int contractTermID)
        {
            try
            {
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Price.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOPrice
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        EffectDate = c.EffectDate,
                        TypeOfOrderID = c.TypeOfOrderID,
                        ContractNo = c.CAT_ContractTerm.CAT_Contract.ContractNo,
                        TypeOfOrderName = c.SYS_Var.ValueOfVar,
                        TypeOfPrice = c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderDirect ? 1 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderHot ? 2 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturn ? 3 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturnHot ? 4 : 0,
                        TypeOfMode = c.CAT_ContractTerm.CAT_Contract.TransportModeID.HasValue ? (c.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFCL ? 1 : c.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFTL ? 2 : c.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iLTL ? 3 : 0) : 0,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSTerm_Change_RemoveWarning(int termID)
        {
            try
            {
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Change_RemoveWarning(model, Account, termID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CusContract Setting
        public void CUSContract_Setting_TypeOfRunLevelSave(int typeID, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ID:" + contractID);
                    else
                    {
                        objContract.ModifiedBy = Account.UserName;
                        objContract.ModifiedDate = DateTime.Now;
                        if (objContract.TypeOfRunLevelID != typeID)
                        {
                            foreach (var term in model.CAT_ContractTerm.Where(c => c.ContractID == objContract.ID))
                            {
                                //xoa bảng giá của term
                                foreach (var price in model.CAT_Price.Where(c => c.ContractTermID == term.ID))
                                {
                                    #region xoa service và giá container
                                    foreach (var service in model.CAT_PriceCOService.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceCOService.Remove(service);
                                    foreach (var con in model.CAT_PriceCOContainer.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceCOContainer.Remove(con);
                                    #endregion

                                    #region xoa phu thu
                                    foreach (var service in model.CAT_PriceDIEx.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var group in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == service.ID))
                                            model.CAT_PriceDIExGroupLocation.Remove(group);
                                        foreach (var gop in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == service.ID))
                                            model.CAT_PriceDIExGroupProduct.Remove(gop);
                                        foreach (var group in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == service.ID))
                                            model.CAT_PriceDIExRouting.Remove(group);

                                        //xóa fin_temp
                                        foreach (var fin in model.FIN_Temp.Where(c => c.PriceDIExID == service.ID))
                                            model.FIN_Temp.Remove(fin);

                                        model.CAT_PriceDIEx.Remove(service);
                                    }
                                    #endregion

                                    //xoa bang gia thuong
                                    foreach (var priceltl in model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceDIGroupProduct.Remove(priceltl);
                                    foreach (var priceftl in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceGroupVehicle.Remove(priceftl);

                                    //xoa bang gia bac thang
                                    foreach (var detail in model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceDILevelGroupProduct.Remove(detail);
                                    foreach (var detail in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceGVLevelGroupVehicle.Remove(detail);

                                    //xoa moq
                                    foreach (var moq in model.CAT_PriceDIMOQ.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var detail in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.CAT_PriceDIMOQGroupLocation.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.CAT_PriceDIMOQGroupProduct.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.CAT_PriceDIMOQRouting.Remove(detail);


                                        //xóa fin_temp
                                        foreach (var fin in model.FIN_Temp.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.FIN_Temp.Remove(fin);

                                        model.CAT_PriceDIMOQ.Remove(moq);
                                    }

                                    //xóa boc xếp
                                    foreach (var load in model.CAT_PriceDILoad.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == load.ID))
                                            model.CAT_PriceDILoadDetail.Remove(detail);

                                        model.CAT_PriceDILoad.Remove(load);
                                    }

                                    //xoa moq boc xep
                                    foreach (var moq in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var detail in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.CAT_PriceDIMOQLoadRouting.Remove(detail);

                                        //xóa fin_temp
                                        foreach (var fin in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.FIN_Temp.Remove(fin);

                                        model.CAT_PriceDIMOQLoad.Remove(moq);
                                    }

                                    model.CAT_Price.Remove(price);
                                }
                            }

                            //xóa thiết lập level

                            foreach (var setting in model.CAT_ContractLevel.Where(c => c.ContractID == objContract.ID))
                            {
                                model.CAT_ContractLevel.Remove(setting);
                            }
                        }
                        if (typeID > 0)
                            objContract.TypeOfRunLevelID = typeID;
                        else objContract.TypeOfRunLevelID = null;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_Setting_TypeOfSGroupProductChangeSave(int typeID, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);

                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ID:" + contractID);
                    else
                    {
                        objContract.ModifiedBy = Account.UserName;
                        objContract.ModifiedDate = DateTime.Now;

                        if (typeID > 0)
                        {
                            objContract.TypeOfSGroupProductChangeID = typeID;
                        }
                        else
                        {
                            objContract.TypeOfSGroupProductChangeID = null;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
        }

        public void CATContractSetting_Save(string setting, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);

                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ID:" + contractID);
                    else
                    {
                        objContract.ModifiedBy = Account.UserName;
                        objContract.ModifiedDate = DateTime.Now;

                        objContract.ExprFCLAllocationPrice = setting;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSContract_Setting_GOVList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractGroupVehicle
                    {
                        ID = c.ID,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOCATContractGroupVehicle>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATContractGroupVehicle CUSContract_Setting_GOVGet(int id)
        {
            try
            {
                DTOCATContractGroupVehicle result = new DTOCATContractGroupVehicle();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractGroupVehicle.Where(c => c.ID == id).Select(c => new DTOCATContractGroupVehicle
                    {
                        ID = c.ID,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName,
                        SortOrder = c.SortOrder
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_Setting_GOVSave(DTOCATContractGroupVehicle item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractGroupVehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thiết lập ID:" + item.ID);
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.SortOrder = item.SortOrder;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_Setting_GOVDeleteList(List<int> lst, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng");
                    foreach (var govID in lst)
                    {
                        var obj = model.CAT_ContractGroupVehicle.FirstOrDefault(c => c.ID == govID);
                        if (obj != null)
                        {
                            //bang gia bac thang
                            if (objContract.TypeOfRunLevelID > 0)
                            {
                                foreach (var level in model.CAT_ContractLevel.Where(c => c.ContractID == objContract.ID && c.GroupOfVehicleID > 0 && c.GroupOfVehicleID == obj.ID))
                                {
                                    foreach (var price in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.ContractLevelID == level.ID && c.CAT_Price.CAT_ContractTerm.ContractID == objContract.ID))
                                    {
                                        model.CAT_PriceGVLevelGroupVehicle.Remove(price);
                                    }
                                    model.CAT_ContractLevel.Remove(level);
                                }
                            }
                            else // bang gia thường
                            {
                                foreach (var price in model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.CAT_ContractTerm.ContractID == objContract.ID && c.GroupOfVehicleID == obj.ID))
                                {
                                    model.CAT_PriceGroupVehicle.Remove(price);
                                }
                            }

                            model.CAT_ContractGroupVehicle.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CUSContract_Setting_GOVNotInList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => c.GroupOfVehicleID).Distinct().ToList();
                    var query = model.CAT_GroupOfVehicle.Where(c => !lisGOV.Contains(c.ID)).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Ton = c.Ton,
                        GroupName = c.GroupName
                    }).OrderBy(c => c.Ton).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATGroupOfVehicle>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_Setting_GOVNotInSave(List<int> lst, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var gov in lst)
                    {
                        CAT_ContractGroupVehicle obj = new CAT_ContractGroupVehicle();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        obj.GroupOfVehicleID = gov;
                        obj.SortOrder = 1;
                        model.CAT_ContractGroupVehicle.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOResult CUSContract_Setting_LevelList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractLevel.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleCode = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                        DateEnd = c.DateEnd,
                        DateStart = c.DateStart,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOCATContractLevel>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATContractLevel CUSContract_Setting_LevelGet(int id)
        {
            try
            {
                DTOCATContractLevel result = new DTOCATContractLevel();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_ContractLevel.Where(c => c.ID == id).Select(c => new DTOCATContractLevel
                        {
                            ID = c.ID,
                            Code = c.Code,
                            LevelName = c.LevelName,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            GroupOfVehicleID = c.GroupOfVehicleID,
                            GroupOfVehicleCode = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                            DateEnd = c.DateEnd,
                            DateStart = c.DateStart,
                            SortOrder = c.SortOrder
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_Setting_LevelSave(DTOCATContractLevel item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_ContractLevel.Count(c => c.ID != item.ID && c.Code == item.Code && c.ContractID == contractID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã bậc giá đã sử dụng");
                    var obj = model.CAT_ContractLevel.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_ContractLevel();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        model.CAT_ContractLevel.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.LevelName = item.LevelName;
                    obj.Ton = item.Ton;
                    obj.CBM = item.CBM;
                    obj.Quantity = item.Quantity;
                    obj.GroupOfVehicleID = item.GroupOfVehicleID;
                    obj.DateEnd = item.DateEnd;
                    obj.DateStart = item.DateStart;
                    obj.SortOrder = item.SortOrder;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSContract_Setting_LevelDeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var levelID in lst)
                    {
                        var obj = model.CAT_ContractLevel.FirstOrDefault(c => c.ID == levelID);
                        if (obj != null) model.CAT_ContractLevel.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<CATGroupOfVehicle> CUSContract_Setting_Level_GOVList(int contractID)
        {
            try
            {
                List<CATGroupOfVehicle> result = new List<CATGroupOfVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.GroupOfVehicleID,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        Code = c.CAT_GroupOfVehicle.Code,
                        Ton = c.CAT_GroupOfVehicle.Ton
                    }).Distinct().ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region KPI Term
        public DTOResult CUSContract_ContractTerm_KPITime_List(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTermKPITimeDate.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOContractTerm_KPITime
                    {
                        ID = c.ID,
                        ContractTermID = c.ContractTermID,
                        TypeOfKPIID = c.TypeOfKPIID,
                        Code = c.KPI_TypeOfKPI.Code,
                        TypeName = c.KPI_TypeOfKPI.TypeName,
                        Expression = c.Expression,
                        CompareField = c.CompareField

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_KPITime>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_ContractTerm_KPITime_SaveExpr(DTOContractTerm_KPITime item)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractTermKPITimeDate.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.Expression = item.Expression;
                        obj.CompareField = item.CompareField;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSContract_ContractTerm_KPITime_NotInList(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var InList = model.CAT_ContractTermKPITimeDate.Where(c => c.ContractTermID == contractTermID).Select(c => c.TypeOfKPIID).ToList();
                    var query = model.KPI_TypeOfKPI.Where(c => !InList.Contains(c.ID) && (c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPIQuantityDateCustomer || c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPITimeDateCustomer)).Select(c => new DTOContractTerm_TypeOfKPI
                    {
                        ID = c.ID,
                        Code = c.Code,
                        IsChoose = false,
                        TypeName = c.TypeName,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_TypeOfKPI>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DateTime? CUSContract_KPITime_Check_Expression(KPITimeDate item, List<KPITimeDate> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckDate(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool? CUSContract_KPITime_Check_Hit(KPITimeDate item, List<KPITimeDate> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckBool(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public void CUSContract_ContractTerm_KPITime_SaveNotInList(List<DTOContractTerm_TypeOfKPI> lst, int contractTermID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_ContractTermKPITimeDate.FirstOrDefault(c => c.TypeOfKPIID == item.ID && c.ContractTermID == contractTermID);
                        if (obj == null)
                        {
                            obj = new CAT_ContractTermKPITimeDate();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractTermID = contractTermID;
                            obj.TypeOfKPIID = item.ID;
                            model.CAT_ContractTermKPITimeDate.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Expression = "";
                        obj.CompareField = "";
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSContract_ContractTerm_KPIQuantity_List(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTermKPIQuantityDate.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOContractTerm_KPIQuantity
                    {
                        ID = c.ID,
                        ContractTermID = c.ContractTermID,
                        TypeOfKPIID = c.TypeOfKPIID,
                        Code = c.KPI_TypeOfKPI.Code,
                        TypeName = c.KPI_TypeOfKPI.TypeName,
                        ExpressionTon = c.ExpressionTon,
                        ExpressionCBM = c.ExpressionCBM,
                        ExpressionQuantity = c.ExpressionQuantity,
                        CompareFieldTon = c.CompareFieldTon,
                        CompareFieldCBM = c.CompareFieldCBM,
                        CompareFieldQuantity = c.CompareFieldQuantity,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_KPIQuantity>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_ContractTerm_KPIQuantity_SaveExpr(DTOContractTerm_KPIQuantity item)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractTermKPIQuantityDate.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.ExpressionTon = item.ExpressionTon;
                        obj.ExpressionCBM = item.ExpressionCBM;
                        obj.ExpressionQuantity = item.ExpressionQuantity;
                        obj.CompareFieldTon = item.CompareFieldTon;
                        obj.CompareFieldCBM = item.CompareFieldCBM;
                        obj.CompareFieldQuantity = item.CompareFieldQuantity;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CUSContract_ContractTerm_KPIQuantity_NotInList(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var InList = model.CAT_ContractTermKPIQuantityDate.Where(c => c.ContractTermID == contractTermID).Select(c => c.TypeOfKPIID).ToList();
                    var query = model.KPI_TypeOfKPI.Where(c => !InList.Contains(c.ID) && (c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPIQuantityDateCustomer || c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPITimeDateCustomer)).Select(c => new DTOContractTerm_TypeOfKPI
                    {
                        ID = c.ID,
                        Code = c.Code,
                        IsChoose = false,
                        TypeName = c.TypeName,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_TypeOfKPI>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSContract_ContractTerm_KPIQuantity_SaveNotInList(List<DTOContractTerm_TypeOfKPI> lst, int contractTermID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_ContractTermKPIQuantityDate.FirstOrDefault(c => c.TypeOfKPIID == item.ID && c.ContractTermID == contractTermID);
                        if (obj == null)
                        {
                            obj = new CAT_ContractTermKPIQuantityDate();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractTermID = contractTermID;
                            obj.TypeOfKPIID = item.ID;
                            model.CAT_ContractTermKPIQuantityDate.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.ExpressionTon = "";
                        obj.ExpressionCBM = "";
                        obj.ExpressionQuantity = "";
                        obj.CompareFieldTon = "";
                        obj.CompareFieldCBM = "";
                        obj.CompareFieldQuantity = "";
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<KPIQuantityDate> CUSContract_KPIQuantity_Get(int id)
        {
            try
            {
                List<KPIQuantityDate> result = new List<KPIQuantityDate>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractTermKPIQuantityDate.Where(c => c.ID != id).Select(c => new KPIQuantityDate
                    {
                        TypeOfKPICode = c.KPI_TypeOfKPI.Code,
                        KPITon = 0,
                        KPIQuantity = 0,
                        KPICBM = 0,
                        IsKPI = false,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public KPIQuantityDate CUSContract_KPIQuantity_Check_Expression(KPIQuantityDate item, List<KPIQuantityDate> lst)
        {
            try
            {
                return HelperKPI.KPIQuantity_CheckQuantity(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool? CUSContract_KPIQuantity_Check_Hit(KPIQuantityDate item, List<KPIQuantityDate> lst)
        {
            try
            {
                return HelperKPI.KPIQuantity_CheckBool(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #endregion

        #region CUSSettingORDPlan

        public DTOResult CUSSettingORDPlan_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.ORDPlan.ToString()
                        && (Account.ListActionCode.Contains(ViewAdmin) || c.CustomerID == Account.SYSCustomerID || Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOCUSSettingORDPlan
                        {
                            ID = c.ID,
                            Name = c.Name,
                            CreateBy = c.CreatedBy,
                            CreateDate = c.CreatedDate
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingORDPlan>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingORDPlan CUSSettingORDPlan_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingORDPlan result = new DTOCUSSettingORDPlan();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingORDPlan>(obj.Setting);
                            result.ID = obj.ID;
                            result.Name = obj.Name;
                            var transportModeID = HelperContract.GetTransportMode(model, result.TypeOfTransportModeID);
                            result.IsContainer = transportModeID == -(int)SYSVarType.TransportModeFCL || transportModeID == -(int)SYSVarType.TransportModeLCL;
                        }
                    }
                    else
                    {
                        result.ServiceOfOrderID = HelperContract.GetServiceOfOrder_First(model, -(int)SYSVarType.ServiceOfOrderLocal);
                        result.RowStart = 1;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingORDPlan_Save(DTOCUSSettingORDPlan item, int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.Name))
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    string sKey = CUSSettingKey.ORDPlan.ToString();
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == id && c.SYSCustomerID == Account.SYSCustomerID);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.CustomerID = item.CustomerID == 0 ? Account.SYSCustomerID : item.CustomerID;

                    item.TotalColumn = CUSSettingORDPlan_TotalColumnTemplate(item, item.CustomerID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);

                    obj.Setting = sSetting;
                    obj.Name = item.Name;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int CUSSettingORDPlan_TotalColumnTemplate(DTOCUSSettingORDPlan objSetting, int customerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int result = 0;

                    DTOORDOrder_ImportCheck dataImport = new DTOORDOrder_ImportCheck();
                    var isCus = customerID < 1 || customerID == Account.SYSCustomerID;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    int iTon = -(int)SYSVarType.PriceOfGOPTon;
                    int iCBM = -(int)SYSVarType.PriceOfGOPCBM;
                    var defTon = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon);
                    var defCBM = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM);
                    var defTU = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU);

                    //dataImport = ORDOrder_Excel_Import_Data(customerID);
                    dataImport.ListStock = model.CUS_Location.Where(c => c.CusPartID == null && (isCus && isAdmin ? true : !isCus ? c.CustomerID == customerID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    dataImport.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                    }).ToList();

                    dataImport.ListGroupOfProduct = model.CUS_GroupOfProductInStock.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == customerID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_GroupProduct
                    {
                        ID = c.GroupOfProductID,
                        Code = c.CUS_GroupOfProduct.Code,
                        GroupName = c.CUS_GroupOfProduct.GroupName,
                        CUSStockID = c.StockID,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        StockID = c.CUS_Location.LocationID,
                        IsDefault = c.CUS_GroupOfProduct.IsDefault,
                        PackingType = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? 1 : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? 2 : 3,
                        DefaultPackingID = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.ID : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.ID : defTU.ID,
                        DefaultPackingName = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.PackingName : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.PackingName : defTU.PackingName
                    }).ToList();

                    dataImport.ListProduct = model.CUS_Product.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == customerID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_Product
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        PackingID = c.PackingID,
                        PackingTypeGOP = c.PackingID > 0 ? c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3 : 0,
                        Length = c.Length,
                        Height = c.Height,
                        Width = c.Width,
                        Weight = c.Weight,
                        CBM = c.CBM,
                        IsKg = c.IsKg,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        SortOrder = c.SortOrder,
                        IsDefault = c.IsDefault
                    }).ToList();

                    string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                            "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                    List<string> sValue = new List<string>(aValue);
                    if (objSetting != null)
                    {
                        if (objSetting.RowStart > 1)
                        {
                            int row = 1;
                            foreach (var prop in objSetting.GetType().GetProperties())
                            {
                                try
                                {
                                    var p = prop.Name;
                                    if (!sValue.Contains(p))
                                    {
                                        var v = (int)prop.GetValue(objSetting, null);
                                        if (v > 0)
                                        {
                                            if (v > result)
                                            {
                                                result = v;
                                            }
                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                }
                            }
                            if (objSetting.HasStock && objSetting.ListStock != null && objSetting.ListStock.Count > 0)
                            {
                                foreach (var obj in objSetting.ListStock)
                                {
                                    var cusStock = dataImport.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                    if (cusStock != null)
                                    {
                                        if (obj.Ton > 0)
                                        {
                                            if (obj.Ton > result)
                                            {
                                                result = obj.Ton;
                                            }
                                        }

                                        if (obj.CBM > 0)
                                        {
                                            if (obj.CBM > result)
                                            {
                                                result = obj.CBM;
                                            }
                                        }

                                        if (obj.Quantity > 0)
                                        {
                                            if (obj.Quantity > result)
                                            {
                                                result = obj.Quantity;
                                            }
                                        }
                                    }
                                }
                            }
                            if (objSetting.HasStockProduct && objSetting.ListStockWithProduct != null && objSetting.ListStockWithProduct.Count > 0)
                            {
                                foreach (var obj in objSetting.ListStockWithProduct)
                                {
                                    var cusStock = dataImport.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                    var cusGroup = dataImport.ListGroupOfProduct.FirstOrDefault(c => c.ID == obj.GroupOfProductID && c.CUSStockID == obj.StockID);
                                    var cusProduct = dataImport.ListProduct.FirstOrDefault(c => c.ID == obj.ProductID && c.GroupOfProductID == obj.GroupOfProductID);
                                    if (cusStock != null && cusGroup != null && cusProduct != null)
                                    {
                                        if (obj.Ton > 0)
                                        {
                                            if (obj.Ton > result)
                                            {
                                                result = obj.Ton;
                                            }
                                        }

                                        if (obj.CBM > 0)
                                        {
                                            if (obj.CBM > result)
                                            {
                                                result = obj.CBM;
                                            }
                                        }

                                        if (obj.Quantity > 0)
                                        {
                                            if (obj.Quantity > result)
                                            {
                                                result = obj.Quantity;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (objSetting.HasContainer && objSetting.ListContainer != null && objSetting.ListContainer.Count > 0)
                                {
                                    foreach (var obj in objSetting.ListContainer)
                                    {
                                        var cusPacking = dataImport.ListPackingCO.FirstOrDefault(c => c.ID == obj.PackingID);
                                        if (cusPacking != null)
                                        {
                                            if (obj.PackingID > 0)
                                            {
                                                if (obj.PackingCOQuantity > result)
                                                {
                                                    result = obj.PackingCOQuantity;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CUSSettingORDPlan_Delete(DTOCUSSettingORDPlan item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var lstPacketID = model.ORD_Packet.Where(c => c.CUSSettingID == item.ID).Select(c => c.ID).ToList();
                    if (lstPacketID.Count > 0)
                    {
                        var lstOrder = model.ORD_Order.Where(c => c.PacketID.HasValue && lstPacketID.Contains(c.PacketID.Value)).Select(c => c.Code).ToList();

                        if (lstOrder.Count > 0)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + string.Join(", ", lstOrder) + " đang được sử dụng, không thể xóa");
                        }
                        else
                        {
                            foreach (var id in lstPacketID)
                            {
                                var packet = model.ORD_Packet.Where(c => c.ID == id).FirstOrDefault();
                                model.ORD_Packet.Remove(packet);
                            }
                        }
                    }
                    var obj = model.CUS_Setting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        public void Location_Check(int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    //Clear cat location check like code, address
                    var lstCATLocation = model.CAT_Location.Select(c => new { c.ID, c.Code, c.Address }).ToList();
                    var lstCATLocationCodeAdd = lstCATLocation.Select(c => new { c.Code, c.Address }).Distinct().ToList();
                    if (lstCATLocationCodeAdd.Count > 0)
                    {
                        foreach (var itemCodeAdd in lstCATLocationCodeAdd)
                        {
                            var lst = lstCATLocation.Where(c => c.Code == itemCodeAdd.Code && c.Address == itemCodeAdd.Address).ToList();
                            if (lst.Count > 1)
                            {
                                var first = lst[0];

                                for (int i = 1; i < lst.Count; i++)
                                {
                                    var item = lst[i];
                                    foreach (var fix in model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID))
                                        fix.LocationID = first.ID;
                                    foreach (var fix in model.CUS_Location.Where(c => c.LocationID == item.ID))
                                        fix.LocationID = first.ID;
                                    foreach (var fix in model.CAT_Routing.Where(c => c.LocationToID == item.ID))
                                        fix.LocationToID = first.ID;
                                    foreach (var fix in model.OPS_DITOLocation.Where(c => c.LocationID == item.ID))
                                        fix.LocationID = first.ID;
                                    foreach (var fix in model.OPS_COTOContainer.Where(c => c.LocationFromID == item.ID))
                                        fix.LocationFromID = first.ID;
                                    foreach (var fix in model.OPS_COTOContainer.Where(c => c.LocationToID == item.ID))
                                        fix.LocationToID = first.ID;
                                    foreach (var fix in model.OPS_OPTCOTOContainer.Where(c => c.LocationFromID == item.ID))
                                        fix.LocationFromID = first.ID;
                                    foreach (var fix in model.OPS_OPTCOTOContainer.Where(c => c.LocationToID == item.ID))
                                        fix.LocationToID = first.ID;
                                    foreach (var fix in model.OPS_OPTCOTOLocation.Where(c => c.LocationID == item.ID))
                                        fix.LocationID = first.ID;
                                    foreach (var fix in model.OPS_OPTDITOLocation.Where(c => c.LocationID == item.ID))
                                        fix.LocationID = first.ID;
                                    foreach (var fix in model.OPS_OPTLocation.Where(c => c.LocationID == item.ID))
                                        fix.LocationID = first.ID;
                                    foreach (var fix in model.CAT_PriceDILoad.Where(c => c.LocationID == item.ID))
                                        fix.LocationID = first.ID;
                                    foreach (var fix in model.CAT_RoutingAreaLocation.Where(c => c.LocationID == item.ID))
                                        fix.LocationID = first.ID;
                                }
                                model.SaveChanges();
                                for (int i = 1; i < lst.Count; i++)
                                {
                                    var item = lst[i];
                                    var fix = model.CAT_Location.FirstOrDefault(c => c.ID == item.ID);
                                    if (fix != null)
                                    {
                                        model.CAT_Location.Remove(fix);
                                    }
                                }
                                model.SaveChanges();
                            }
                        }
                    }
                    //End cat location check like code, address

                    //Clear cat location check like code
                    lstCATLocation = model.CAT_Location.Select(c => new { c.ID, c.Code, c.Address }).ToList();
                    var lstCATLocationCode = lstCATLocation.Select(c => new { c.Code }).Distinct().ToList();
                    if (lstCATLocationCode.Count > 1)
                    {
                        foreach (var itemCode in lstCATLocationCode)
                        {
                            var lst = lstCATLocation.Where(c => c.Code == itemCode.Code).ToList();
                            if (lst.Count > 0)
                            {
                                for (int i = 1; i < lst.Count; i++)
                                {
                                    var item = lst[i];
                                    var catLocation = model.CAT_Location.FirstOrDefault(c => c.ID == item.ID);
                                    catLocation.Code = itemCode.Code + i.ToString();
                                    foreach (var fix in model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID))
                                        fix.PartnerCode = catLocation.Code;
                                    foreach (var fix in model.CUS_Location.Where(c => c.LocationID == item.ID))
                                        fix.Code = catLocation.Code;
                                }
                                model.SaveChanges();
                            }
                        }
                    }
                    //End cat location check like code

                    //Copy code cat location to partnerlocation
                    var lstCATParnerLocation = model.CAT_PartnerLocation.Select(c => new { c.ID, c.PartnerCode, c.CAT_Location.Code }).ToList();
                    foreach (var item in lstCATParnerLocation.Where(c => c.PartnerCode != c.Code))
                    {
                        var obj = model.CAT_PartnerLocation.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.PartnerCode = item.Code;
                        }
                    }
                    model.SaveChanges();
                    //End copy code cat location to partnerlocation

                    //Clear parner vendor
                    var lstCustomerID = model.CUS_Customer.Where(c => c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN).Select(c => c.ID).ToList();
                    foreach (var id in lstCustomerID)
                    {
                        foreach (var item in model.CUS_Location.Where(c => c.CustomerID == id))
                        {
                            model.CUS_Location.Remove(item);
                        }

                        foreach (var item in model.CUS_Partner.Where(c => c.CustomerID == id))
                        {
                            model.CUS_Partner.Remove(item);
                        }
                    }
                    model.SaveChanges();
                    //End clear parner vendor

                    //Clear cat parner location
                    var lstPartLocation = model.CAT_PartnerLocation.Select(c => new { c.LocationID, c.PartnerID }).Distinct().ToList();
                    foreach (var item in lstPartLocation)
                    {
                        if (model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID && c.PartnerID == item.PartnerID).Count() > 1)
                        {
                            var first = model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID && c.PartnerID == item.PartnerID).Select(c => new { c.ID }).FirstOrDefault();
                            if (first != null)
                            {
                                foreach (var del in model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID && c.PartnerID == item.PartnerID && c.ID != first.ID))
                                {
                                    model.CAT_PartnerLocation.Remove(del);
                                }
                                model.SaveChanges();
                            }
                        }
                    }
                    //End cat parner location

                    //Clear cus parner location
                    var lstCUSLocation = model.CUS_Location.Select(c => new { c.LocationID, c.CusPartID }).Distinct().ToList();
                    foreach (var cuslo in lstPartLocation)
                    {
                        var lst = model.CUS_Location.Where(c => c.LocationID == cuslo.LocationID && c.CusPartID == cuslo.PartnerID).Select(c => new { c.ID }).ToList();
                        if (lst.Count > 1)
                        {
                            var first = lst[0];
                            for (int i = 1; i < lst.Count; i++)
                            {
                                var item = lst[i];
                                foreach (var fix in model.ORD_Order.Where(c => c.LocationFromID == item.ID))
                                    fix.LocationFromID = first.ID;
                                foreach (var fix in model.ORD_GroupProduct.Where(c => c.LocationToID == item.ID))
                                    fix.LocationToID = first.ID;
                                foreach (var fix in model.ORD_GroupProduct_History.Where(c => c.LocationFromID == item.ID))
                                    fix.LocationFromID = first.ID;
                                foreach (var fix in model.ORD_GroupProduct_History.Where(c => c.LocationToID == item.ID))
                                    fix.LocationToID = first.ID;
                                foreach (var fix in model.ORD_Container.Where(c => c.LocationFromID == item.ID))
                                    fix.LocationFromID = first.ID;
                                foreach (var fix in model.ORD_Container.Where(c => c.LocationToID == item.ID))
                                    fix.LocationToID = first.ID;
                            }
                            model.SaveChanges();
                            for (int i = 1; i < lst.Count; i++)
                            {
                                var item = lst[i];
                                var fix = model.CUS_Location.FirstOrDefault(c => c.ID == item.ID);
                                if (fix != null)
                                {
                                    model.CUS_Location.Remove(fix);
                                }
                            }
                            model.SaveChanges();
                        }
                    }
                    //End cus parner location

                    ////Check customer
                    //lstCustomerID = model.CUS_Customer.Where(c => c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH).Select(c => c.ID).ToList();
                    //foreach (var id in lstCustomerID)
                    //{
                    //    var lstLocation = model.CUS_Location.Where(c => c.CustomerID == id && c.CusPartID > 0).Select(c => new { c.ID, c.CusPartID, c.LocationID, c.Code, c.CUS_Partner.PartnerCode, LocationCode = c.CAT_Location.Code }).ToList();
                    //    var lstLocationInPartId = lstLocation.Select(c => new { c.CusPartID, c.PartnerCode, c.LocationID }).Distinct().ToList();
                    //    var lstCATLocationID = new List<int>();
                    //    foreach (var locationinpartid in lstLocationInPartId)
                    //    {
                    //        var lst = lstLocation.Where(c => c.CusPartID == locationinpartid.CusPartID && c.LocationID == locationinpartid.LocationID).ToList();
                    //        if (lst.Count > 1)
                    //        {
                    //            var first = lst[0];
                    //            for (int i = 1; i < lst.Count; i++)
                    //            {
                    //                var item = lst[i];
                    //                foreach (var fix in model.ORD_Order.Where(c => c.LocationToID == item.ID))
                    //                    fix.LocationToID = first.ID;
                    //                foreach (var fix in model.ORD_GroupProduct.Where(c => c.LocationToID == item.ID))
                    //                    fix.LocationToID = first.ID;
                    //                foreach (var fix in model.ORD_GroupProduct_History.Where(c => c.LocationToID == item.ID))
                    //                    fix.LocationToID = first.ID;
                    //            }
                    //            model.SaveChanges();
                    //            for (int i = 1; i < lst.Count; i++)
                    //            {
                    //                var item = lst[i];
                    //                var fix = model.CUS_Location.FirstOrDefault(c => c.ID == item.ID);
                    //                if (fix != null)
                    //                {
                    //                    model.CUS_Location.Remove(fix);
                    //                }
                    //            }
                    //            model.SaveChanges();
                    //        }
                    //        if (!lstCATLocationID.Contains(locationinpartid.LocationID))
                    //            lstCATLocationID.Add(locationinpartid.LocationID);
                    //    }
                    //}

                    //var lstPartLocation = model.CAT_PartnerLocation.Select(c => new { c.LocationID, c.PartnerID }).Distinct().ToList();
                    //foreach (var item in lstPartLocation)
                    //{
                    //    if (model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID && c.PartnerID == item.PartnerID).Count() > 1)
                    //    {
                    //        var first = model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID && c.PartnerID == item.PartnerID).Select(c => new { c.ID }).FirstOrDefault();
                    //        if (first != null)
                    //        {
                    //            foreach (var del in model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID && c.PartnerID == item.PartnerID && c.ID != first.ID))
                    //            {
                    //                model.CAT_PartnerLocation.Remove(del);
                    //            }
                    //            model.SaveChanges();
                    //        }
                    //    }
                    //}
                    //End check customer


                    //Check catlocation
                    //var lstCustomerID = model.CUS_Customer.Select(c => c.ID).ToList();
                    //foreach (var cusID in lstCustomerID)
                    //{
                    //    var lstLocation = model.CUS_Location.Where(c => c.CustomerID == cusID && c.CusPartID > 0).Select(c => new { c.ID, c.CusPartID, c.LocationID, c.Code, c.CUS_Partner.PartnerCode, LocationCode = c.CAT_Location.Code }).ToList();
                    //    var lstLocationInPartId = lstLocation.Select(c => new { c.CusPartID, c.PartnerCode, c.LocationID }).Distinct().ToList();
                    //    var lstCATLocationID = new List<int>();
                    //    foreach (var locationinpartid in lstLocationInPartId)
                    //    {
                    //        var lst = lstLocation.Where(c => c.CusPartID == locationinpartid.CusPartID && c.LocationID == locationinpartid.LocationID).ToList();
                    //        if (lst.Count > 1)
                    //        {
                    //            var first = lst[0];
                    //            for (int i = 1; i < lst.Count; i++)
                    //            {
                    //                var item = lst[i];
                    //                foreach (var fix in model.ORD_Order.Where(c => c.LocationToID == item.ID))
                    //                    fix.LocationToID = first.ID;
                    //                foreach (var fix in model.ORD_GroupProduct.Where(c => c.LocationToID == item.ID))
                    //                    fix.LocationToID = first.ID;
                    //                foreach (var fix in model.ORD_Container.Where(c => c.LocationToID == item.ID))
                    //                    fix.LocationToID = first.ID;
                    //                foreach (var fix in model.ORD_GroupProduct_History.Where(c => c.LocationToID == item.ID))
                    //                    fix.LocationToID = first.ID;
                    //            }
                    //            model.SaveChanges();
                    //            for (int i = 1; i < lst.Count; i++)
                    //            {
                    //                var item = lst[i];
                    //                var fix = model.CUS_Location.FirstOrDefault(c => c.ID == item.ID);
                    //                if (fix != null)
                    //                {
                    //                    model.CUS_Location.Remove(fix);
                    //                }
                    //            }
                    //            model.SaveChanges();
                    //        }
                    //        if (!lstCATLocationID.Contains(locationinpartid.LocationID))
                    //            lstCATLocationID.Add(locationinpartid.LocationID);
                    //    }

                    //    var lstCATLocationCode = lstLocation.Select(c => new { c.LocationCode }).Distinct().ToList();
                    //    foreach (var itemCATLocationCode in lstCATLocationCode)
                    //    {
                    //        var lst = lstLocation.Where(c => c.LocationCode == itemCATLocationCode.LocationCode).Select(c => new { c.LocationID }).Distinct().ToList();
                    //        if (lst.Count > 1)
                    //        {
                    //            var first = lst[0];
                    //            for (int i = 1; i < lst.Count; i++)
                    //            {
                    //                var item = lst[i];
                    //                foreach (var itemLocation in model.CUS_Location.Where(c => c.LocationID == item.LocationID))
                    //                    itemLocation.LocationID = first.LocationID;
                    //                foreach (var itemLocation in model.CAT_Routing.Where(c => c.LocationToID == item.LocationID))
                    //                    itemLocation.LocationToID = first.LocationID;
                    //                foreach (var itemLocation in model.OPS_DITOLocation.Where(c => c.LocationID == item.LocationID))
                    //                    itemLocation.LocationID = first.LocationID;
                    //                foreach (var itemLocation in model.OPS_COTOContainer.Where(c => c.LocationFromID == item.LocationID))
                    //                    itemLocation.LocationFromID = first.LocationID;
                    //                foreach (var itemLocation in model.OPS_COTOContainer.Where(c => c.LocationToID == item.LocationID))
                    //                    itemLocation.LocationToID = first.LocationID;
                    //                foreach (var itemLocation in model.OPS_OPTCOTOContainer.Where(c => c.LocationFromID == item.LocationID))
                    //                    itemLocation.LocationToID = first.LocationID;
                    //                foreach (var itemLocation in model.OPS_OPTCOTOContainer.Where(c => c.LocationToID == item.LocationID))
                    //                    itemLocation.LocationToID = first.LocationID;
                    //                foreach (var itemLocation in model.OPS_OPTCOTOLocation.Where(c => c.LocationID == item.LocationID))
                    //                    itemLocation.LocationID = first.LocationID;
                    //                foreach (var itemLocation in model.OPS_OPTDITOLocation.Where(c => c.LocationID == item.LocationID))
                    //                    itemLocation.LocationID = first.LocationID;
                    //                foreach (var itemLocation in model.OPS_OPTLocation.Where(c => c.LocationID == item.LocationID))
                    //                    itemLocation.LocationID = first.LocationID;
                    //                foreach (var itemLocation in model.CAT_PriceDILoad.Where(c => c.LocationID == item.LocationID))
                    //                    itemLocation.LocationID = first.LocationID;
                    //            }
                    //            for (int i = 1; i < lst.Count; i++)
                    //            {
                    //                var item = lst[i];
                    //                var fix = model.CAT_Location.FirstOrDefault(c => c.ID == item.LocationID);
                    //                if (fix != null)
                    //                {
                    //                    foreach (var fixDetail in model.CAT_LocationMatrix.Where(c => c.LocationFromID == item.LocationID || c.LocationToID == item.LocationID))
                    //                        model.CAT_LocationMatrix.Remove(fixDetail);
                    //                    foreach (var fixDetail in model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID))
                    //                        model.CAT_PartnerLocation.Remove(fixDetail);
                    //                    foreach (var fixDetail in model.CAT_LocationAreaDetail.Where(c => c.LocationID == item.LocationID))
                    //                        model.CAT_LocationAreaDetail.Remove(fixDetail);
                    //                    foreach (var fixDetail in model.CAT_RoutingAreaLocation.Where(c => c.LocationID == item.LocationID))
                    //                        model.CAT_RoutingAreaLocation.Remove(fixDetail);
                    //                    // ánh bổ sung
                    //                    foreach (var fixDetail in model.CAT_LocationRequire.Where(c => c.LocationID == item.LocationID))
                    //                        model.CAT_LocationRequire.Remove(fixDetail);
                    //                    foreach (var fixDetail in model.CAT_ConstraintAllocation.Where(c => c.LocationID == item.LocationID))
                    //                        model.CAT_ConstraintAllocation.Remove(fixDetail);
                    //                    model.CAT_Location.Remove(fix);
                    //                }
                    //                model.SaveChanges();
                    //            }
                    //        }
                    //    } 
                    //}
                    //End check catlocation

                    //var lstLocation = model.CAT_Location.Select(c => new { c.Location, c.Address }).Distinct().ToList();
                    //var lstLocationCheck = model.CAT_Location.Select(c => new { c.ID, c.Location, c.Address }).ToList();
                    //foreach (var itemLocation in lstLocation)
                    //{
                    //    var lst = lstLocationCheck.Where(c => c.Location == itemLocation.Location && c.Address == itemLocation.Address).ToList();
                    //    if (lst.Count > 1)
                    //    {
                    //        var first = lst[0];
                    //        for (int i = 1; i < lst.Count; i++)
                    //        {
                    //            var item = lst[i];
                    //            foreach (var itemChange in model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;
                    //            foreach (var itemChange in model.CUS_Location.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;
                    //            foreach (var itemChange in model.CAT_Routing.Where(c => c.LocationFromID == item.ID))
                    //                itemChange.LocationFromID = first.ID;
                    //            foreach (var itemChange in model.CAT_Routing.Where(c => c.LocationToID == item.ID))
                    //                itemChange.LocationToID = first.ID;
                    //            foreach (var itemChange in model.OPS_DITOLocation.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;
                    //            foreach (var itemChange in model.CAT_PriceDILoad.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;
                    //            foreach (var itemChange in model.CAT_PriceDIExRouting.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;

                    //            foreach (var itemChange in model.CAT_LocationMatrix.Where(c => c.LocationFromID == item.ID || c.LocationToID == item.ID))
                    //            {
                    //                foreach (var detailChange in model.CAT_LocationMatrixStation.Where(c => c.LocationMatrixID == itemChange.ID))
                    //                    model.CAT_LocationMatrixStation.Remove(detailChange);
                    //                model.CAT_LocationMatrix.Remove(itemChange);
                    //            }
                    //            foreach (var itemChange in model.CAT_LocationAreaDetail.Where(c => c.LocationID == item.ID))
                    //                model.CAT_LocationAreaDetail.Remove(itemChange);
                    //            foreach (var itemChange in model.CAT_RoutingAreaLocation.Where(c => c.LocationID == item.ID))
                    //                model.CAT_RoutingAreaLocation.Remove(itemChange);

                    //            var obj = model.CAT_Location.FirstOrDefault(c => c.ID == item.ID);
                    //            if (obj != null)
                    //            {
                    //                model.CAT_Location.Remove(obj);
                    //                model.SaveChanges();
                    //            }
                    //        }
                    //    }
                    //}

                    //var lstLocation = model.CAT_Location.Select(c => new { c.Code }).Distinct().ToList();
                    //var lstLocationCheck = model.CAT_Location.Select(c => new { c.ID, c.Code }).ToList();
                    //foreach (var itemLocation in lstLocation)
                    //{
                    //    var lst = lstLocationCheck.Where(c => c.Code == itemLocation.Code).ToList();
                    //    if (lst.Count > 1)
                    //    {
                    //        var first = lst[0];
                    //        for (int i = 1; i < lst.Count; i++)
                    //        {
                    //            var item = lst[i];
                    //            foreach (var itemChange in model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;
                    //            foreach (var itemChange in model.CUS_Location.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;
                    //            foreach (var itemChange in model.CAT_Routing.Where(c => c.LocationFromID == item.ID))
                    //                itemChange.LocationFromID = first.ID;
                    //            foreach (var itemChange in model.CAT_Routing.Where(c => c.LocationToID == item.ID))
                    //                itemChange.LocationToID = first.ID;
                    //            foreach (var itemChange in model.OPS_DITOLocation.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;
                    //            foreach (var itemChange in model.CAT_PriceDILoad.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;
                    //            foreach (var itemChange in model.CAT_PriceDIExRouting.Where(c => c.LocationID == item.ID))
                    //                itemChange.LocationID = first.ID;

                    //            foreach (var itemChange in model.CAT_LocationMatrix.Where(c => c.LocationFromID == item.ID || c.LocationToID == item.ID))
                    //            {
                    //                foreach (var detailChange in model.CAT_LocationMatrixStation.Where(c => c.LocationMatrixID == itemChange.ID))
                    //                    model.CAT_LocationMatrixStation.Remove(detailChange);
                    //                model.CAT_LocationMatrix.Remove(itemChange);
                    //            }
                    //            foreach (var itemChange in model.CAT_LocationAreaDetail.Where(c => c.LocationID == item.ID))
                    //                model.CAT_LocationAreaDetail.Remove(itemChange);
                    //            foreach (var itemChange in model.CAT_RoutingAreaLocation.Where(c => c.LocationID == item.ID))
                    //                model.CAT_RoutingAreaLocation.Remove(itemChange);

                    //            var obj = model.CAT_Location.FirstOrDefault(c => c.ID == item.ID);
                    //            if (obj != null)
                    //            {
                    //                model.CAT_Location.Remove(obj);
                    //                model.SaveChanges();
                    //            }
                    //        }
                    //    }
                    //}

                    //var lstTerm = model.CAT_ContractTerm.Select(c => new { c.ID, c.ContractID, c.IsAllRouting, c.DateEffect, c.Code }).ToList();
                    //var lstPrice = model.CAT_Price.Select(c => new { c.ID, c.ContractTermID, c.Code, c.Name, c.EffectDate, c.TypeOfOrderID }).ToList();
                    //var lstContractID = lstTerm.Select(c => c.ContractID).Distinct().ToList();

                    //foreach (var contractid in lstContractID)
                    //{
                    //    if (lstTerm.Where(c => c.ContractID == contractid).Count() == 1)
                    //    {
                    //        var first = lstTerm.Where(c => c.ContractID == contractid).FirstOrDefault();
                    //        if (first != null)
                    //        {
                    //            var objTerm = new CAT_ContractTerm();
                    //            objTerm.ContractID = contractid;
                    //            objTerm.Code = "PL2";
                    //            objTerm.TermName = "Phụ lục 2";
                    //            objTerm.DisplayName = "Phụ lục 2";
                    //            objTerm.IsWarning = false;
                    //            objTerm.IsAllRouting = true;
                    //            objTerm.DateEffect = first.DateEffect;
                    //            objTerm.CreatedBy = Account.UserName;
                    //            objTerm.CreatedDate = DateTime.Now;

                    //            model.CAT_ContractTerm.Add(objTerm);
                    //            foreach (var price in lstPrice.Where(c => c.ContractTermID == first.ID))
                    //            {
                    //                var objPrice = new CAT_Price();
                    //                objPrice.CAT_ContractTerm = objTerm;
                    //                objPrice.Code = price.Code;
                    //                objPrice.Name = price.Name;
                    //                objPrice.EffectDate = price.EffectDate;
                    //                objPrice.TypeOfOrderID = price.TypeOfOrderID;
                    //                objPrice.CreatedBy = Account.UserName;
                    //                objPrice.CreatedDate = DateTime.Now;
                    //                model.CAT_Price.Add(objPrice);
                    //                model.SaveChanges();

                    //                foreach (var detail in model.CAT_ContractRouting.Where(c => c.ContractID == contractid))
                    //                    detail.ContractTermID = first.ID;
                    //                foreach (var detail in model.CAT_PriceDIEx.Where(c => c.PriceID == price.ID))
                    //                    detail.PriceID = objPrice.ID;
                    //                foreach (var detail in model.CAT_PriceDILoad.Where(c => c.PriceID == price.ID))
                    //                    detail.PriceID = objPrice.ID;
                    //                foreach (var detail in model.CAT_PriceDIMOQ.Where(c => c.PriceID == price.ID))
                    //                    detail.PriceID = objPrice.ID;
                    //                foreach (var detail in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == price.ID))
                    //                    detail.PriceID = objPrice.ID;
                    //                model.SaveChanges();
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        var first = lstTerm.Where(c => c.ContractID == contractid && c.Code == "PL1").FirstOrDefault();
                    //        if (first != null)
                    //        {
                    //            foreach (var detail in model.CAT_ContractRouting.Where(c => c.ContractID == contractid))
                    //                detail.ContractTermID = first.ID;
                    //            model.SaveChanges();
                    //        }
                    //    }

                    //    var lstGroupVehicleIn = model.CAT_ContractGroupVehicle.Select(c => new { c.ContractID, c.GroupOfVehicleID }).ToList();
                    //    var lstGroupVehicle = model.CAT_PriceGroupVehicle.Select(c => new { c.CAT_ContractRouting.ContractID, c.GroupOfVehicleID }).Distinct().ToList();
                    //    if (lstGroupVehicle.Count > 0)
                    //    {
                    //        foreach (var groupvehicle in lstGroupVehicle)
                    //        {
                    //            if (lstGroupVehicleIn.Where(c => c.ContractID == groupvehicle.ContractID && c.GroupOfVehicleID == groupvehicle.GroupOfVehicleID).Count() == 0)
                    //            {
                    //                var detail = new CAT_ContractGroupVehicle();
                    //                detail.ContractID = groupvehicle.ContractID;
                    //                detail.GroupOfVehicleID = groupvehicle.GroupOfVehicleID;
                    //                detail.CreatedBy = Account.UserName;
                    //                detail.CreatedDate = DateTime.Now;
                    //                model.CAT_ContractGroupVehicle.Add(detail);
                    //            }
                    //        }
                    //        model.SaveChanges();
                    //    }

                    //    lstGroupVehicleIn = model.CAT_ContractGroupVehicle.Select(c => new { c.ContractID, c.GroupOfVehicleID }).ToList();
                    //    var lstGroupVehicleLevel = model.CAT_ContractLevel.Where(c => c.GroupOfVehicleID > 0).Select(c => new { c.ContractID, c.GroupOfVehicleID }).Distinct().ToList();
                    //    if (lstGroupVehicleLevel.Count > 0)
                    //    {
                    //        foreach (var groupvehicle in lstGroupVehicleLevel.Where(c => c.GroupOfVehicleID > 0))
                    //        {
                    //            if (lstGroupVehicleIn.Where(c => c.ContractID == groupvehicle.ContractID && c.GroupOfVehicleID == groupvehicle.GroupOfVehicleID).Count() == 0)
                    //            {
                    //                var detail = new CAT_ContractGroupVehicle();
                    //                detail.ContractID = groupvehicle.ContractID;
                    //                detail.GroupOfVehicleID = groupvehicle.GroupOfVehicleID.Value;
                    //                detail.CreatedBy = Account.UserName;
                    //                detail.CreatedDate = DateTime.Now;
                    //                model.CAT_ContractGroupVehicle.Add(detail);
                    //            }
                    //        }
                    //        model.SaveChanges();
                    //    }
                    //}

                    //var lstFunctionID = model.SYS_Function.Select(c => new { c.ID }).Distinct();
                    //var lstActionInFunctionID = model.SYS_ActionInFunction.Select(c => new { c.FunctionID, c.ActionID, c.ID }).ToList();
                    //bool flag = false;
                    //foreach (var func in lstFunctionID)
                    //{
                    //    var lstActionID = lstActionInFunctionID.Where(c => c.FunctionID == func.ID).Select(c => c.ActionID).Distinct().ToList();
                    //    foreach (var actID in lstActionID)
                    //    {
                    //        var lstCheck = lstActionInFunctionID.Where(c => c.ActionID == actID && c.FunctionID == func.ID).ToList();
                    //        if (lstCheck.Count > 1)
                    //        {
                    //            for (int i = 1; i < lstCheck.Count; i++)
                    //            {
                    //                var item = lstCheck[i];
                    //                var obj = model.SYS_ActionInFunction.FirstOrDefault(c => c.ID == item.ID);
                    //                if (obj != null)
                    //                    model.SYS_ActionInFunction.Remove(obj);
                    //                flag = true;
                    //            }
                    //        }
                    //    }
                    //}
                    //if (flag)
                    //    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region PriceHistory

        public DTOCUSPrice_HistoryData PriceHistory_CheckPrice(List<int> lstCusId, int transportModeID)
        {
            try
            {
                DTOCUSPrice_HistoryData result = new DTOCUSPrice_HistoryData();
                //result.ListPriceOfCustomer = new List<DTOCUSPriceHistory_OfCustomer>();
                //result.hasLevel = false;
                //result.hasNomal = false;

                using (var model = new DataEntities())
                {
                    //foreach (int cusID in lstCusId)
                    //{
                    //    DTOCUSPriceHistory_OfCustomer priceOfCustomer = new DTOCUSPriceHistory_OfCustomer();
                    //    priceOfCustomer.CustomerID = cusID;
                    //    priceOfCustomer.CustomerName = model.CUS_Customer.Where(c => c.ID == cusID).FirstOrDefault().CustomerName;

                    //    DateTime now = DateTime.Now.Date;

                    //    var contract = model.CAT_Contract.Where(c => c.CustomerID == cusID && c.TransportModeID == transportModeID && c.ExpiredDate >= now && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();


                    //    if (contract != null)
                    //    {
                    //        var lstPrice = model.CAT_Price.Where(c => c.ContractID == contract.ID).OrderByDescending(c => c.CreatedDate).ToList();

                    //        foreach (var objPrice in lstPrice)
                    //        {
                    //            if (objPrice != null)
                    //            {
                    //                var hasNormal = model.CAT_PriceGroupVehicle.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceDIGroupProduct.Count(c => c.PriceID == objPrice.ID) > 0;
                    //                if (hasNormal == true)
                    //                {
                    //                    result.hasNomal = true;
                    //                }
                    //                var hasLevel = model.CAT_PriceDILevel.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceGVLevel.Count(c => c.PriceID == objPrice.ID) > 0;
                    //                if (hasLevel == true)
                    //                {
                    //                    result.hasLevel = true;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPrice_HistoryData PriceHistory_GetDataOneUser(int cusID, int contractID)
        {
            try
            {
                int iHot = -(int)SYSVarType.TypeOfOrderHot;
                int iDirect = -(int)SYSVarType.TypeOfOrderDirect;
                int iReturn = -(int)SYSVarType.TypeOfOrderReturn;
                int iReturnHot = -(int)SYSVarType.TypeOfOrderReturnHot;

                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;

                int iMain = -(int)SYSVarType.TypeOfContractMain;
                int iFrame = -(int)SYSVarType.TypeOfContractFrame;

                DTOCUSPrice_HistoryData result = new DTOCUSPrice_HistoryData();
                result.ContractPriceData = new DTOCUSPrice_Data();
                result.ListPrice = new List<DTOCUSPriceHistory_Price>();

                using (var model = new DataEntities())
                {
                    //khach hang
                    var customer = model.CUS_Customer.Where(c => c.ID == cusID).FirstOrDefault();
                    if (customer == null)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khách hàng");
                    }
                    else
                    {
                        result.CustomerID = cusID;
                        result.CustomerName = customer.CustomerName;
                    }
                    //hop dong
                    CAT_Contract contract = new CAT_Contract();
                    contract = model.CAT_Contract.Where(c => c.ID == contractID).FirstOrDefault();
                    if (contract == null)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng");
                    }

                    DateTime now = DateTime.Now.Date;

                    #region ContractPriceData
                    result.ContractPriceData.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    result.ContractPriceData.ListGroupOfVehicle = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.GroupOfVehicleID,
                        Code = c.CAT_GroupOfVehicle.Code,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        Ton = c.CAT_GroupOfVehicle.Ton,
                        SortOrder = c.SortOrder
                    }).Distinct().OrderBy(c => c.SortOrder).ToList();

                    result.ContractPriceData.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName,
                        CBM = c.CBM,
                        Ton = c.Ton,
                        DateEnd = c.DateEnd,
                        DateStart = c.DateStart,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        SortOrder = c.SortOrder,
                        Quantity = c.Quantity,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName
                    }).OrderBy(c => c.SortOrder).ToList();

                    var listTerm = model.CAT_ContractTerm.Where(c => c.ContractID == contractID).Select(c => new DTOContractTerm()
                    {
                        ID = c.ID,
                        TermName = c.TermName,
                        Code = c.Code,
                        IsClosed = c.IsClosed,
                        DateEffect = c.DateEffect,
                    }).OrderByDescending(c => c.DateEffect).ToList();

                    var ListAllRouting = new List<DTOCATContractRouting>();
                    var ListPrice = new List<CAT_Price>();
                    foreach (var term in listTerm)
                    {
                        var lstRoute = new List<DTOCATContractRouting>();
                        if (term.IsClosed)
                        {
                            var lstRoutingID = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == term.ID).Select(c => c.ContractRoutingID).Distinct().ToList();
                            lstRoutingID.AddRange(model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == term.ID).Select(c => c.ContractRoutingID).Distinct().ToList());
                            lstRoutingID.AddRange(model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == term.ID).Select(c => c.ContractRoutingID).Distinct().ToList());
                            lstRoutingID.AddRange(model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == term.ID).Select(c => c.ContractRoutingID).Distinct().ToList());

                            lstRoute = model.CAT_ContractRouting.Where(c => lstRoutingID.Contains(c.ID)).Select(c => new DTOCATContractRouting
                            {
                                ID = c.ID,
                                Code = c.Code,
                                RoutingName = c.RoutingName,
                                SortOrder = c.SortOrder
                            }).OrderBy(c => c.SortOrder).ToList();
                        }
                        else
                        {
                            lstRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == term.ID).Select(c => new DTOCATContractRouting
                            {
                                ID = c.ID,
                                Code = c.Code,
                                RoutingName = c.RoutingName,
                                SortOrder = c.SortOrder
                            }).OrderBy(c => c.SortOrder).ToList();
                        }
                        if (lstRoute != null)
                        {
                            ListAllRouting.AddRange(lstRoute);
                        }

                        var lstPrice = model.CAT_Price.Where(c => c.ContractTermID == term.ID && c.CAT_ContractTerm.IsAllRouting == false).OrderByDescending(c => c.EffectDate).ToList();
                        if (lstPrice != null)
                        {
                            ListPrice.AddRange(lstPrice);
                        }
                    }
                    result.ContractPriceData.ListRouting = ListAllRouting;
                    #endregion

                    ListPrice = ListPrice.OrderByDescending(c => c.EffectDate).ToList();
                    if (ListPrice != null)
                    {
                        foreach (var objPrice in ListPrice)
                        {
                            if (objPrice != null)
                            {

                                DTOCUSPriceHistory_Price history = new DTOCUSPriceHistory_Price();
                                history.ItemPrice = new DTOCUSPrice();
                                #region ItemPrice
                                history.ItemPrice.ID = objPrice.ID;
                                history.ItemPrice.ContractID = objPrice.ID;
                                history.ItemPrice.Code = objPrice.Code;
                                history.ItemPrice.Name = objPrice.Name;
                                //history.ItemPrice.CustomerName = objPrice.CAT_Contract.CUS_Customer.CustomerName;
                                history.ItemPrice.EffectDate = objPrice.EffectDate;
                                history.ItemPrice.TypeOfOrderID = objPrice.TypeOfOrderID;
                                //history.ItemPrice.ContractNo = objPrice.CAT_Contract.ContractNo;
                                history.ItemPrice.TypeOfOrderName = objPrice.SYS_Var.ValueOfVar;
                                history.ItemPrice.TypeOfPrice = objPrice.TypeOfOrderID == iDirect ? 1 : objPrice.TypeOfOrderID == iHot ? 2 : objPrice.TypeOfOrderID == iReturn ? 3 : objPrice.TypeOfOrderID == iReturnHot ? 4 : 0;
                                var transportMode = objPrice.CAT_ContractTerm.CAT_Contract.TransportModeID.HasValue ? objPrice.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID : -1;
                                history.ItemPrice.TypeOfMode = transportMode == iFCL ? 1 : transportMode == iFTL ? 2 : transportMode == iLTL ? 3 : 0;
                                history.ItemPrice.TypeOfContract = objPrice.CAT_ContractTerm.CAT_Contract.TypeOfContractID == iMain ? 1 : objPrice.CAT_ContractTerm.CAT_Contract.TypeOfContractID == iFrame ? 2 : 0;
                                history.ItemPrice.TypeOfRunLevelID = objPrice.TypeOfRunLevelID;

                                history.ItemPrice.CheckPrice = new DTOPriceCheck();

                                history.ItemPrice.CheckPrice.HasNormal = model.CAT_PriceGroupVehicle.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceDIGroupProduct.Count(c => c.PriceID == objPrice.ID) > 0;
                                history.ItemPrice.CheckPrice.HasLevel = model.CAT_ContractLevel.Count(c => c.ContractID == contractID) > 0 || model.CAT_PriceGVLevelGroupVehicle.Count(c => c.PriceID == objPrice.ID) > 0;
                                #endregion

                                #region FCL
                                if (objPrice.CAT_ContractTerm.CAT_Contract.TransportModeID != null && objPrice.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFCL)
                                {
                                    var lstDetailFCL = model.CAT_PriceCOContainer.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceCOContainer
                                    {
                                        ID = c.ID,
                                        PackingID = c.PackingID,
                                        Price = c.Price,
                                        PriceMax = c.PriceMax,
                                        PriceMin = c.PriceMin,
                                        PriceID = c.PriceID,
                                        ContractRoutingID = c.ContractRoutingID.Value
                                    }).ToList();
                                    var ListPacking = model.CAT_PriceCOContainer.Where(c => c.PriceID == objPrice.ID).Select(c => new CATPacking
                                    {
                                        ID = c.PackingID,
                                        Code = c.CAT_Packing.Code,
                                        PackingName = c.CAT_Packing.PackingName,
                                        TypeOfPackageID = c.CAT_Packing.TypeOfPackageID
                                    }).Distinct().ToList();

                                    history.FCLData = new DTOPriceCOContainerData();
                                    history.FCLData.ListDetail = new List<DTOPriceCOContainer>();
                                    history.FCLData.ListPacking = new List<CATPacking>();

                                    history.FCLData.ListDetail.AddRange(lstDetailFCL);
                                    history.FCLData.ListPacking.AddRange(ListPacking);
                                }
                                #endregion

                                #region FTL
                                if (objPrice.CAT_ContractTerm.CAT_Contract.TransportModeID != null && objPrice.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFTL)
                                {
                                    #region FTL Normal
                                    history.FTLNormalDetail = new List<DTOPriceGroupVehicle>();


                                    var ListDetail = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceGroupVehicle
                                    {
                                        RouteID = c.ContractRoutingID,
                                        GroupOfVehicleID = c.GroupOfVehicleID,
                                        Price = c.Price,
                                        PriceMax = c.PriceMax,
                                        PriceMin = c.PriceMin
                                    }).ToList();

                                    history.FTLNormalDetail.AddRange(ListDetail);
                                    #endregion

                                    #region FTL Level
                                    history.FTLLevelDetail = new List<DTOPriceGVLevelGroupVehicle>();
                                    var ListFTLLevelDetail = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceGVLevelGroupVehicle
                                    {
                                        ID = c.ID,
                                        RoutingID = c.ContractRoutingID,
                                        ContractLevelID = c.ContractLevelID,
                                        PriceMax = c.PriceMax,
                                        PriceMin = c.PriceMin,
                                        Price = c.Price
                                    }).ToList();

                                    history.FTLLevelDetail.AddRange(ListFTLLevelDetail);
                                    #endregion
                                }

                                #endregion

                                #region LTL
                                if (objPrice.CAT_ContractTerm.CAT_Contract.TransportModeID != null && objPrice.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iLTL)
                                {
                                    #region LTL Normal

                                    history.LTLNormalDetail = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceDIGroupOfProduct
                                    {
                                        ID = c.ID,
                                        ContractRoutingID = c.ContractRoutingID,
                                        GroupOfProductID = c.GroupOfProductID,
                                        Price = c.Price,
                                        PriceID = c.PriceID,
                                        PriceMax = c.PriceMax,
                                        PriceMin = c.PriceMin
                                    }).ToList();
                                    #endregion

                                    #region LTL Level
                                    history.LTLLevelDetail = new List<DTOPriceDILevelGroupProduct>();

                                    history.LTLLevelDetail = model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceDILevelGroupProduct
                                    {
                                        ID = c.ID,
                                        RoutingID = c.ContractRoutingID,
                                        LevelID = c.ContractLevelID,
                                        GroupProductID = c.GroupOfProductID,
                                        Price = c.Price,
                                    }).ToList();
                                    #endregion
                                }
                                #endregion

                                result.ListPrice.Add(history);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPrice_HistoryData PriceHistory_GetDataMulUser(List<int> lstCusId, int transportModeID, int typePrice)
        {
            try
            {
                int iHot = -(int)SYSVarType.TypeOfOrderHot;
                int iDirect = -(int)SYSVarType.TypeOfOrderDirect;
                int iReturn = -(int)SYSVarType.TypeOfOrderReturn;
                int iReturnHot = -(int)SYSVarType.TypeOfOrderReturnHot;

                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;

                int iMain = -(int)SYSVarType.TypeOfContractMain;
                int iFrame = -(int)SYSVarType.TypeOfContractFrame;

                DTOCUSPrice_HistoryData result = new DTOCUSPrice_HistoryData();
                //result.ListPriceOfCustomer = new List<DTOCUSPriceHistory_OfCustomer>();
                //result.ListPrice = new List<DTOCUSPriceHistory_Price>();
                //result.ListRoute = new List<DTOCATRouting>();

                using (var model = new DataEntities())
                {
                    //List<int> listContractId = new List<int>();
                    //foreach (var cusId in lstCusId)
                    //{
                    //    DTOCUSPriceHistory_OfCustomer priceOfCustomer = new DTOCUSPriceHistory_OfCustomer();
                    //    DTOCUSPrice_HistoryData data = new DTOCUSPrice_HistoryData();
                    //    priceOfCustomer.CustomerID = cusId;
                    //    priceOfCustomer.CustomerName = model.CUS_Customer.Where(c => c.ID == cusId).FirstOrDefault().CustomerName;

                    //    DateTime now = DateTime.Now.Date;

                    //    var listGOP = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusId).Select(c => new DTOCUSGroupOfProduct
                    //    {
                    //        ID = c.ID,
                    //        Code = c.Code,
                    //        GroupName = c.GroupName,
                    //        PriceOfGOPID = c.PriceOfGOPID,
                    //        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    //    }).ToList();

                    //    CAT_Contract contract = new CAT_Contract();
                    //    contract = model.CAT_Contract.Where(c => c.CustomerID == cusId && c.TransportModeID == transportModeID && c.ExpiredDate == null && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //    if (contract == null)
                    //    {
                    //        contract = model.CAT_Contract.Where(c => c.CustomerID == cusId && c.TransportModeID == transportModeID && c.ExpiredDate >= now && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //    }
                    //    if (contract != null)
                    //    {
                    //        listContractId.Add(contract.ID);
                    //        var ListAllRouting = model.CAT_ContractRouting.Where(c => c.ContractID == contract.ID).Select(c => new DTOCUSContractRouting
                    //        {
                    //            ID = c.ID,
                    //            Code = c.Code,
                    //            RoutingName = c.RoutingName,
                    //            CATID = c.CAT_Routing.ID,
                    //            CATCode = c.CAT_Routing.Code,
                    //            CATName = c.CAT_Routing.RoutingName,
                    //            SortOrder = c.SortOrder
                    //        }).OrderBy(c => c.SortOrder).ToList();

                    //        priceOfCustomer.ListGroupOfProduct = new List<DTOCUSGroupOfProduct>();
                    //        if (listGOP != null)
                    //        {
                    //            priceOfCustomer.ListGroupOfProduct.AddRange(listGOP);
                    //        }

                    //        priceOfCustomer.ListRouting = new List<DTOCUSContractRouting>();
                    //        if (ListAllRouting != null)
                    //        {
                    //            priceOfCustomer.ListRouting.AddRange(ListAllRouting);
                    //        }

                    //        var objPrice = model.CAT_Price.Where(c => c.ContractID == contract.ID).OrderByDescending(c => c.EffectDate).FirstOrDefault();

                    //        if (objPrice != null)
                    //        {

                    //            DTOCUSPriceHistory_Price history = new DTOCUSPriceHistory_Price();
                    //            history.ItemPrice = new DTOCUSPrice();
                    //            #region ItemPrice
                    //            history.ItemPrice.ID = objPrice.ID;
                    //            history.ItemPrice.ContractID = objPrice.ID;
                    //            history.ItemPrice.Code = objPrice.Code;
                    //            history.ItemPrice.Name = objPrice.Name;
                    //            history.ItemPrice.CustomerName = objPrice.CAT_Contract.CUS_Customer.CustomerName;
                    //            history.ItemPrice.CustomerID = objPrice.CAT_Contract.CUS_Customer.ID;
                    //            history.ItemPrice.EffectDate = objPrice.EffectDate;
                    //            history.ItemPrice.TypeOfOrderID = objPrice.TypeOfOrderID;
                    //            history.ItemPrice.ContractNo = objPrice.CAT_Contract.ContractNo;
                    //            history.ItemPrice.TypeOfOrderName = objPrice.SYS_Var.ValueOfVar;
                    //            history.ItemPrice.TypeOfPrice = objPrice.TypeOfOrderID == iDirect ? 1 : objPrice.TypeOfOrderID == iHot ? 2 : objPrice.TypeOfOrderID == iReturn ? 3 : objPrice.TypeOfOrderID == iReturnHot ? 4 : 0;
                    //            history.ItemPrice.TypeOfMode = objPrice.CAT_Contract.TransportModeID == iFCL ? 1 : objPrice.CAT_Contract.TransportModeID == iFTL ? 2 : objPrice.CAT_Contract.TransportModeID == iLTL ? 3 : 0;
                    //            history.ItemPrice.TypeOfContract = objPrice.CAT_Contract.TypeOfContractID == iMain ? 1 : objPrice.CAT_Contract.TypeOfContractID == iFrame ? 2 : 0;
                    //            history.ItemPrice.TypeOfRunLevelID = objPrice.TypeOfRunLevelID;

                    //            history.ItemPrice.CheckPrice = new DTOPriceCheck();

                    //            history.ItemPrice.CheckPrice.HasNormal = model.CAT_PriceGroupVehicle.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceDIGroupProduct.Count(c => c.PriceID == objPrice.ID) > 0;
                    //            history.ItemPrice.CheckPrice.HasLevel = model.CAT_PriceDILevel.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceGVLevel.Count(c => c.PriceID == objPrice.ID) > 0;
                    //            #endregion

                    //            #region FCL
                    //            if (objPrice.CAT_Contract.TransportModeID == iFCL)
                    //            {
                    //                var lstDetailFCL = model.CAT_PriceCOContainer.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceCOContainer
                    //                {
                    //                    ID = c.ID,
                    //                    PackingID = c.PackingID,
                    //                    Price = c.Price,
                    //                    PriceMax = c.PriceMax,
                    //                    PriceMin = c.PriceMin,
                    //                    PriceID = c.PriceID,
                    //                    ContractRoutingID = c.ContractRoutingID.Value
                    //                }).ToList();
                    //                var ListPacking = model.CAT_PriceCOContainer.Where(c => c.PriceID == objPrice.ID).Select(c => new CATPacking
                    //                {
                    //                    ID = c.PackingID,
                    //                    Code = c.CAT_Packing.Code,
                    //                    PackingName = c.CAT_Packing.PackingName,
                    //                    TypeOfPackageID = c.CAT_Packing.TypeOfPackageID
                    //                }).Distinct().ToList();

                    //                history.FCLData = new DTOPriceCOContainerData();
                    //                history.FCLData.ListDetail = new List<DTOPriceCOContainer>();
                    //                history.FCLData.ListPacking = new List<CATPacking>();

                    //                history.FCLData.ListDetail.AddRange(lstDetailFCL);
                    //                history.FCLData.ListPacking.AddRange(ListPacking);
                    //            }
                    //            #endregion

                    //            #region FTL
                    //            if (objPrice.CAT_Contract.TransportModeID == iFTL)
                    //            {
                    //                #region FTL Normal
                    //                history.FTLNormal = new DTOPriceGroupVehicleData();
                    //                history.FTLNormal.ListDetail = new List<DTOPriceGroupVehicle>();
                    //                history.FTLNormal.ListGOV = new List<CATGroupOfVehicle>();
                    //                history.FTLNormal.ListRoute = new List<DTOCATRouting>();


                    //                var ListDetail = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceGroupVehicle
                    //                {
                    //                    RouteID = c.ContractRoutingID,
                    //                    GroupOfVehicleID = c.GroupOfVehicleID,
                    //                    Price = c.Price,
                    //                    PriceMax = c.PriceMax,
                    //                    PriceMin = c.PriceMin
                    //                }).ToList();
                    //                var ListGOV = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == objPrice.ID).Select(c => new CATGroupOfVehicle
                    //                {
                    //                    ID = c.CAT_GroupOfVehicle.ID,
                    //                    Code = c.CAT_GroupOfVehicle.Code,
                    //                    Ton = c.CAT_GroupOfVehicle.Ton,
                    //                    GroupName = c.CAT_GroupOfVehicle.GroupName,
                    //                    SortOrder = c.CAT_GroupOfVehicle.SortOrder
                    //                }).Distinct().OrderBy(c => c.SortOrder).ToList();

                    //                history.FTLNormal.ListDetail.AddRange(ListDetail);
                    //                history.FTLNormal.ListGOV.AddRange(ListGOV);
                    //                #endregion

                    //                #region FTL Level
                    //                history.FTLLevel = new DTOPriceGVLevelDetail();
                    //                history.FTLLevel.ListDetail = new List<DTOPriceGVLevelGroupVehicle>();
                    //                history.FTLLevel.ListLevel = new List<DTOPriceGVLevel>();
                    //                var ListFTLLevelDetail = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_PriceGVLevel.PriceID == objPrice.ID).Select(c => new DTOPriceGVLevelGroupVehicle
                    //                {
                    //                    ID = c.ID,
                    //                    RoutingID = c.ContractRoutingID,
                    //                    LevelID = c.PriceGVLevelID,
                    //                    PriceMax = c.PriceMax,
                    //                    PriceMin = c.PriceMin,
                    //                    Price = c.Price
                    //                }).ToList();
                    //                var ListFTLLevel = model.CAT_PriceGVLevel.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceGVLevel
                    //                {
                    //                    ID = c.ID,
                    //                    Code = c.Code,
                    //                    PriceID = c.PriceID,
                    //                    LevelName = c.LevelName
                    //                }).ToList();

                    //                history.FTLLevel.ListDetail.AddRange(ListFTLLevelDetail);
                    //                history.FTLLevel.ListLevel.AddRange(ListFTLLevel);
                    //                #endregion
                    //            }

                    //            #endregion

                    //            #region LTL
                    //            if (objPrice.CAT_Contract.TransportModeID == iLTL)
                    //            {
                    //                #region LTL Normal
                    //                var dataRouting = contract.CAT_ContractRouting.Select(c => new DTOCUSPriceRouting
                    //                {
                    //                    ID = c.ID,
                    //                    Code = c.Code,
                    //                    RoutingName = c.RoutingName,
                    //                    CATID = c.CAT_Routing.ID,
                    //                    CATCode = c.CAT_Routing.Code,
                    //                    CATName = c.CAT_Routing.RoutingName,
                    //                    SortOrder = c.SortOrder
                    //                }).ToList();

                    //                foreach (var item in dataRouting)
                    //                {
                    //                    item.ListGroupProductPrice = new List<DTOCATPriceDIGroupProduct>();
                    //                    var lstGroupProductPrice = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == objPrice.ID && c.ContractRoutingID == item.ID).Select(c => new DTOCATPriceDIGroupProduct
                    //                    {
                    //                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                    //                        CustomerName = c.CUS_GroupOfProduct.CUS_Customer.CustomerName,
                    //                        GroupOfProductID = c.GroupOfProductID,
                    //                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                    //                        GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                    //                        ID = c.ID,
                    //                        Price = c.Price,
                    //                        PriceMax = c.PriceMax,
                    //                        PriceMin = c.PriceMin,
                    //                        ContractRoutingID = c.ContractRoutingID,
                    //                    }).ToList();
                    //                    item.ListGroupProductPrice.AddRange(lstGroupProductPrice);
                    //                }

                    //                history.LTLNormal = dataRouting;
                    //                #endregion

                    //                #region LTL Level
                    //                history.LTLLevel = new DTOPriceDILevelDetail();
                    //                history.LTLLevel.ListLevel = new List<DTOPriceDILevel>();
                    //                history.LTLLevel.ListDetail = new List<DTOPriceDILevelGroupProduct>();
                    //                history.LTLLevel.ListLevel = model.CAT_PriceDILevel.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceDILevel
                    //                {
                    //                    ID = c.ID,
                    //                    Code = c.Code,
                    //                    PriceID = c.PriceID,
                    //                    LevelName = c.LevelName
                    //                }).ToList();

                    //                history.LTLLevel.ListDetail = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_PriceDILevel.PriceID == objPrice.ID).Select(c => new DTOPriceDILevelGroupProduct
                    //                {
                    //                    ID = c.ID,
                    //                    RoutingID = c.ContractRoutingID,
                    //                    LevelID = c.PriceDILevelID,
                    //                    GroupProductID = c.GroupOfProductID,
                    //                    Price = c.Price,
                    //                }).ToList();
                    //                #endregion
                    //            }
                    //            #endregion

                    //            result.ListPrice.Add(history);
                    //        }
                    //    }
                    //    result.ListPriceOfCustomer.Add(priceOfCustomer);
                    //}
                    //if (listContractId != null)
                    //{
                    //    var listRouteID = model.CAT_ContractRouting.Where(c => listContractId.Contains(c.ContractID)).Select(c => c.RoutingID).Distinct().ToList();

                    //    var listRoute = model.CAT_Routing.Where(c => listRouteID.Contains(c.ID)).Select(c => new DTOCATRouting()
                    //    {
                    //        RoutingID = c.ID,
                    //        Code = c.Code,
                    //        RoutingName = c.RoutingName,
                    //    }).ToList();

                    //    result.ListRoute.AddRange(listRoute);
                    //}
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        public void Account_Setting()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var lstId = model.CUS_Customer.Select(c => c.ID);
                    Account.ListCustomerID = lstId.ToArray();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // Xóa hết đơn, NPP của khách hàng
        public void CustomerOrderDistributor_Delete(int cusID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var cus = model.CUS_Customer.FirstOrDefault(c => c.ID == cusID);
                    if (cus != null)
                    {
                        foreach (var item in model.FIN_PL.Where(c => c.CustomerID == cus.ID))
                        {
                            foreach (var detail in model.FIN_PLDetails.Where(c => c.PLID == item.ID))
                            {
                                foreach (var detail1 in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == detail.ID))
                                {
                                    model.FIN_PLGroupOfProduct.Remove(detail1);
                                }
                                foreach (var detail1 in model.FIN_PLContainer.Where(c => c.PLDetailID == detail.ID))
                                {
                                    model.FIN_PLContainer.Remove(detail1);
                                }
                                model.FIN_PLDetails.Remove(detail);
                            }
                            model.FIN_PL.Remove(item);
                        }

                        foreach (var item in model.ORD_Order.Where(c => c.CustomerID == cus.ID))
                        {
                            foreach (var detail in model.ORD_GroupProduct.Where(c => c.OrderID == item.ID))
                            {
                                foreach (var detail1 in model.ORD_Product.Where(c => c.GroupProductID == detail.ID))
                                {
                                    model.ORD_Product.Remove(detail1);
                                }

                                foreach (var detail1 in model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID == detail.ID))
                                {
                                    foreach (var detail2 in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == detail1.ID))
                                    {
                                        model.OPS_DITOProduct.Remove(detail2);
                                    }
                                    model.OPS_DITOGroupProduct.Remove(detail1);
                                }

                                foreach (var detail1 in model.OPS_DITOMaster.Where(c => c.OPS_DITOGroupProduct.Any(d => d.ORD_GroupProduct.OrderID == item.ID)))
                                {
                                    foreach (var detail2 in model.OPS_DITO.Where(c => c.DITOMasterID == detail1.ID))
                                    {
                                        foreach (var detail3 in model.OPS_DITODetail.Where(c => c.DITOID == detail2.ID))
                                        {
                                            model.OPS_DITODetail.Remove(detail3);
                                        }
                                        model.OPS_DITO.Remove(detail2);
                                    }

                                    foreach (var detail2 in model.OPS_DITOLocation.Where(c => c.DITOMasterID == detail1.ID))
                                    {
                                        model.OPS_DITOLocation.Remove(detail2);
                                    }
                                    foreach (var detail2 in model.OPS_DITORate.Where(c => c.DITOMasterID == detail1.ID))
                                    {
                                        model.OPS_DITORate.Remove(detail2);
                                    }
                                    foreach (var detail2 in model.OPS_DITOStation.Where(c => c.DITOMasterID == detail1.ID))
                                    {
                                        model.OPS_DITOStation.Remove(detail2);
                                    }

                                    model.OPS_DITOMaster.Remove(detail1);
                                }
                                model.ORD_GroupProduct.Remove(detail);
                            }
                            model.ORD_Order.Remove(item);
                        }


                        model.SaveChanges();

                        var lstCusPartner = model.CUS_Partner.Where(c => c.CustomerID == cusID && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerDistributor);
                        var lstCatPartnerID = model.CUS_Partner.Where(c => c.CustomerID == cusID && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerDistributor).Select(c => c.PartnerID).Distinct().ToList();
                        var lstCatPartner = model.CAT_Partner.Where(c => lstCatPartnerID.Contains(c.ID) && c.CUS_Partner.Count(d => d.CustomerID != cusID) == 0);
                        var lstCusLocation = model.CUS_Location.Where(c => c.CustomerID == cusID && c.CusPartID > 0 && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerDistributor);
                        var lstCatPartLocation = model.CAT_PartnerLocation.Where(c => lstCatPartnerID.Contains(c.PartnerID));
                        var lstCatLocationID = lstCatPartLocation.Select(c => c.LocationID).Distinct().ToList();
                        var lstCatLocation = model.CAT_Location.Where(c => lstCatLocationID.Contains(c.ID) && c.CUS_Location.Count == 0);
                        lstCatLocationID = lstCatLocation.Select(c => c.ID).Distinct().ToList();
                        var lstRoutingAreaLocation = model.CAT_RoutingAreaLocation.Where(c => lstCatLocationID.Contains(c.LocationID));
                        var lstMatrix = model.CAT_LocationMatrix.Where(c => lstCatLocationID.Contains(c.LocationFromID) || lstCatLocationID.Contains(c.LocationToID));

                        //model.CUS_Location.RemoveRange(lstCusLocation);
                        var countCusLocation = lstCusLocation.Count();
                        var countCusPart = lstCusPartner.Count();
                        var countPartLocation = lstCatPartLocation.Count();
                        var countLocation = lstCatLocation.Count();
                        var countCatPart = lstCatPartner.Count();
                        var countAreaDetail = lstRoutingAreaLocation.Count();

                        var test1 = lstCatLocationID.Any(c => c == 145);
                        var test2 = lstCatLocationID.Any(c => c == 339);
                        var test3 = lstCatLocationID.Any(c => c == 340);
                        var test4 = lstCatLocationID.Any(c => c == 10303);
                        var test5 = lstCatLocationID.Any(c => c == 10304);

                        model.CUS_Location.RemoveRange(lstCusLocation);
                        model.CUS_Partner.RemoveRange(lstCusPartner);
                        model.CAT_PartnerLocation.RemoveRange(lstCatPartLocation);
                        model.CAT_Location.RemoveRange(lstCatLocation);
                        model.CAT_RoutingAreaLocation.RemoveRange(lstRoutingAreaLocation);
                        model.CAT_LocationMatrix.RemoveRange(lstMatrix);
                        model.CAT_Partner.RemoveRange(lstCatPartner);

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region  CUSSettingExtReturn
        public DTOResult CUSSettingExtReturn_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.ExtReturn.ToString()).Select(c => new DTOCUSSettingExtReturn
                    {
                        SettingID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingExtReturn>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSSettingExtReturn CUSSettingExtReturn_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingExtReturn result = new DTOCUSSettingExtReturn();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingExtReturn>(obj.Setting);

                            result.Name = obj.Name;
                        }
                    }
                    else
                    {
                        result.RowStart = 1;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingExtReturn_Save(DTOCUSSettingExtReturn item, int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.Name))
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    string sKey = CUSSettingKey.ExtReturn.ToString();
                    var obj = model.CUS_Setting.FirstOrDefault(c => c.Key == sKey && c.ID == id && c.SYSCustomerID == Account.SYSCustomerID);

                    if (obj == null)
                    {
                        obj = new CUS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CUS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    item.ColumnIndexMax = CUSSettingExtReturn_GetIndexMax(item);

                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);
                    obj.Setting = sSetting;
                    obj.Name = item.Name;
                    obj.CustomerID = Account.SYSCustomerID;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int CUSSettingExtReturn_GetIndexMax(DTOCUSSettingExtReturn objSetting)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int result = 0;
                    if (objSetting != null)
                    {
                        if (objSetting.RowStart > 1)
                        {
                            string[] aValue = { "SYSCustomerID", "SettingID", "CreateBy", "CreateDate", "Name", "RowStart", "ColumnIndexMax" };
                            List<string> sValue = new List<string>(aValue);

                            foreach (var prop in objSetting.GetType().GetProperties())
                            {
                                try
                                {
                                    var p = prop.Name;
                                    if (!sValue.Contains(p))
                                    {
                                        try
                                        {
                                            var v = (int)prop.GetValue(objSetting, null);
                                            if (v > 0)
                                            {
                                                if (v > result)
                                                {
                                                    result = v;
                                                }
                                            }
                                        }
                                        catch
                                        {

                                        }
                                    }
                                }
                                catch (Exception)
                                {
                                }
                            }
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CUSSettingExtReturn_Delete(DTOCUSSettingExtReturn item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Setting.Where(c => c.ID == item.SettingID).FirstOrDefault();
                    if (obj != null)
                    {
                        model.CUS_Setting.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CUSSettingManual
        #endregion
    }
}